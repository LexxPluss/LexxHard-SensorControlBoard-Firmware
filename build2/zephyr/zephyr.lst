
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08040000 <_vector_table-0x200>:
	...

08040200 <_vector_table>:
 8040200:	80 b3 03 20 d9 89 04 08 f5 75 05 08 ad 89 04 08     ... .....u......
 8040210:	ad 89 04 08 ad 89 04 08 ad 89 04 08 00 00 00 00     ................
	...
 804022c:	e5 81 04 08 ad 89 04 08 00 00 00 00 51 81 04 08     ............Q...
 804023c:	fd e3 04 08                                         ....

08040240 <_irq_vector_table>:
 8040240:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 8040250:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 8040260:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 8040270:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 8040280:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 8040290:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 80402a0:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 80402b0:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 80402c0:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 80402d0:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 80402e0:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 80402f0:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 8040300:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 8040310:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 8040320:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 8040330:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 8040340:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 8040350:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 8040360:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 8040370:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 8040380:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 8040390:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 80403a0:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 80403b0:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 80403c0:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 80403d0:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 80403e0:	69 83 04 08 69 83 04 08 69 83 04 08 69 83 04 08     i...i...i...i...
 80403f0:	69 83 04 08 69 83 04 08                             i...i...

Disassembly of section text:

08040400 <memchr>:
 8040400:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8040404:	2a10      	cmp	r2, #16
 8040406:	db2b      	blt.n	8040460 <memchr+0x60>
 8040408:	f010 0f07 	tst.w	r0, #7
 804040c:	d008      	beq.n	8040420 <memchr+0x20>
 804040e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040412:	3a01      	subs	r2, #1
 8040414:	428b      	cmp	r3, r1
 8040416:	d02d      	beq.n	8040474 <memchr+0x74>
 8040418:	f010 0f07 	tst.w	r0, #7
 804041c:	b342      	cbz	r2, 8040470 <memchr+0x70>
 804041e:	d1f6      	bne.n	804040e <memchr+0xe>
 8040420:	b4f0      	push	{r4, r5, r6, r7}
 8040422:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040426:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804042a:	f022 0407 	bic.w	r4, r2, #7
 804042e:	f07f 0700 	mvns.w	r7, #0
 8040432:	2300      	movs	r3, #0
 8040434:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040438:	3c08      	subs	r4, #8
 804043a:	ea85 0501 	eor.w	r5, r5, r1
 804043e:	ea86 0601 	eor.w	r6, r6, r1
 8040442:	fa85 f547 	uadd8	r5, r5, r7
 8040446:	faa3 f587 	sel	r5, r3, r7
 804044a:	fa86 f647 	uadd8	r6, r6, r7
 804044e:	faa5 f687 	sel	r6, r5, r7
 8040452:	b98e      	cbnz	r6, 8040478 <memchr+0x78>
 8040454:	d1ee      	bne.n	8040434 <memchr+0x34>
 8040456:	bcf0      	pop	{r4, r5, r6, r7}
 8040458:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804045c:	f002 0207 	and.w	r2, r2, #7
 8040460:	b132      	cbz	r2, 8040470 <memchr+0x70>
 8040462:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040466:	3a01      	subs	r2, #1
 8040468:	ea83 0301 	eor.w	r3, r3, r1
 804046c:	b113      	cbz	r3, 8040474 <memchr+0x74>
 804046e:	d1f8      	bne.n	8040462 <memchr+0x62>
 8040470:	2000      	movs	r0, #0
 8040472:	4770      	bx	lr
 8040474:	3801      	subs	r0, #1
 8040476:	4770      	bx	lr
 8040478:	2d00      	cmp	r5, #0
 804047a:	bf06      	itte	eq
 804047c:	4635      	moveq	r5, r6
 804047e:	3803      	subeq	r0, #3
 8040480:	3807      	subne	r0, #7
 8040482:	f015 0f01 	tst.w	r5, #1
 8040486:	d107      	bne.n	8040498 <memchr+0x98>
 8040488:	3001      	adds	r0, #1
 804048a:	f415 7f80 	tst.w	r5, #256	; 0x100
 804048e:	bf02      	ittt	eq
 8040490:	3001      	addeq	r0, #1
 8040492:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8040496:	3001      	addeq	r0, #1
 8040498:	bcf0      	pop	{r4, r5, r6, r7}
 804049a:	3801      	subs	r0, #1
 804049c:	4770      	bx	lr
 804049e:	bf00      	nop

080404a0 <__aeabi_ldivmod>:
 80404a0:	b97b      	cbnz	r3, 80404c2 <__aeabi_ldivmod+0x22>
 80404a2:	b972      	cbnz	r2, 80404c2 <__aeabi_ldivmod+0x22>
 80404a4:	2900      	cmp	r1, #0
 80404a6:	bfbe      	ittt	lt
 80404a8:	2000      	movlt	r0, #0
 80404aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80404ae:	e006      	blt.n	80404be <__aeabi_ldivmod+0x1e>
 80404b0:	bf08      	it	eq
 80404b2:	2800      	cmpeq	r0, #0
 80404b4:	bf1c      	itt	ne
 80404b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80404ba:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80404be:	f000 b9bf 	b.w	8040840 <__aeabi_idiv0>
 80404c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80404c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80404ca:	2900      	cmp	r1, #0
 80404cc:	db09      	blt.n	80404e2 <__aeabi_ldivmod+0x42>
 80404ce:	2b00      	cmp	r3, #0
 80404d0:	db1a      	blt.n	8040508 <__aeabi_ldivmod+0x68>
 80404d2:	f000 f84d 	bl	8040570 <__udivmoddi4>
 80404d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80404da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80404de:	b004      	add	sp, #16
 80404e0:	4770      	bx	lr
 80404e2:	4240      	negs	r0, r0
 80404e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80404e8:	2b00      	cmp	r3, #0
 80404ea:	db1b      	blt.n	8040524 <__aeabi_ldivmod+0x84>
 80404ec:	f000 f840 	bl	8040570 <__udivmoddi4>
 80404f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80404f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80404f8:	b004      	add	sp, #16
 80404fa:	4240      	negs	r0, r0
 80404fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040500:	4252      	negs	r2, r2
 8040502:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040506:	4770      	bx	lr
 8040508:	4252      	negs	r2, r2
 804050a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 804050e:	f000 f82f 	bl	8040570 <__udivmoddi4>
 8040512:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040516:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 804051a:	b004      	add	sp, #16
 804051c:	4240      	negs	r0, r0
 804051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040522:	4770      	bx	lr
 8040524:	4252      	negs	r2, r2
 8040526:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 804052a:	f000 f821 	bl	8040570 <__udivmoddi4>
 804052e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040532:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040536:	b004      	add	sp, #16
 8040538:	4252      	negs	r2, r2
 804053a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 804053e:	4770      	bx	lr

08040540 <__aeabi_uldivmod>:
 8040540:	b953      	cbnz	r3, 8040558 <__aeabi_uldivmod+0x18>
 8040542:	b94a      	cbnz	r2, 8040558 <__aeabi_uldivmod+0x18>
 8040544:	2900      	cmp	r1, #0
 8040546:	bf08      	it	eq
 8040548:	2800      	cmpeq	r0, #0
 804054a:	bf1c      	itt	ne
 804054c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8040550:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8040554:	f000 b974 	b.w	8040840 <__aeabi_idiv0>
 8040558:	f1ad 0c08 	sub.w	ip, sp, #8
 804055c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040560:	f000 f806 	bl	8040570 <__udivmoddi4>
 8040564:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040568:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 804056c:	b004      	add	sp, #16
 804056e:	4770      	bx	lr

08040570 <__udivmoddi4>:
 8040570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040574:	9d08      	ldr	r5, [sp, #32]
 8040576:	4604      	mov	r4, r0
 8040578:	468e      	mov	lr, r1
 804057a:	2b00      	cmp	r3, #0
 804057c:	d14d      	bne.n	804061a <__udivmoddi4+0xaa>
 804057e:	428a      	cmp	r2, r1
 8040580:	4694      	mov	ip, r2
 8040582:	d969      	bls.n	8040658 <__udivmoddi4+0xe8>
 8040584:	fab2 f282 	clz	r2, r2
 8040588:	b152      	cbz	r2, 80405a0 <__udivmoddi4+0x30>
 804058a:	fa01 f302 	lsl.w	r3, r1, r2
 804058e:	f1c2 0120 	rsb	r1, r2, #32
 8040592:	fa20 f101 	lsr.w	r1, r0, r1
 8040596:	fa0c fc02 	lsl.w	ip, ip, r2
 804059a:	ea41 0e03 	orr.w	lr, r1, r3
 804059e:	4094      	lsls	r4, r2
 80405a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80405a4:	0c21      	lsrs	r1, r4, #16
 80405a6:	fbbe f6f8 	udiv	r6, lr, r8
 80405aa:	fa1f f78c 	uxth.w	r7, ip
 80405ae:	fb08 e316 	mls	r3, r8, r6, lr
 80405b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80405b6:	fb06 f107 	mul.w	r1, r6, r7
 80405ba:	4299      	cmp	r1, r3
 80405bc:	d90a      	bls.n	80405d4 <__udivmoddi4+0x64>
 80405be:	eb1c 0303 	adds.w	r3, ip, r3
 80405c2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80405c6:	f080 811f 	bcs.w	8040808 <__udivmoddi4+0x298>
 80405ca:	4299      	cmp	r1, r3
 80405cc:	f240 811c 	bls.w	8040808 <__udivmoddi4+0x298>
 80405d0:	3e02      	subs	r6, #2
 80405d2:	4463      	add	r3, ip
 80405d4:	1a5b      	subs	r3, r3, r1
 80405d6:	b2a4      	uxth	r4, r4
 80405d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80405dc:	fb08 3310 	mls	r3, r8, r0, r3
 80405e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80405e4:	fb00 f707 	mul.w	r7, r0, r7
 80405e8:	42a7      	cmp	r7, r4
 80405ea:	d90a      	bls.n	8040602 <__udivmoddi4+0x92>
 80405ec:	eb1c 0404 	adds.w	r4, ip, r4
 80405f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80405f4:	f080 810a 	bcs.w	804080c <__udivmoddi4+0x29c>
 80405f8:	42a7      	cmp	r7, r4
 80405fa:	f240 8107 	bls.w	804080c <__udivmoddi4+0x29c>
 80405fe:	4464      	add	r4, ip
 8040600:	3802      	subs	r0, #2
 8040602:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040606:	1be4      	subs	r4, r4, r7
 8040608:	2600      	movs	r6, #0
 804060a:	b11d      	cbz	r5, 8040614 <__udivmoddi4+0xa4>
 804060c:	40d4      	lsrs	r4, r2
 804060e:	2300      	movs	r3, #0
 8040610:	e9c5 4300 	strd	r4, r3, [r5]
 8040614:	4631      	mov	r1, r6
 8040616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804061a:	428b      	cmp	r3, r1
 804061c:	d909      	bls.n	8040632 <__udivmoddi4+0xc2>
 804061e:	2d00      	cmp	r5, #0
 8040620:	f000 80ef 	beq.w	8040802 <__udivmoddi4+0x292>
 8040624:	2600      	movs	r6, #0
 8040626:	e9c5 0100 	strd	r0, r1, [r5]
 804062a:	4630      	mov	r0, r6
 804062c:	4631      	mov	r1, r6
 804062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040632:	fab3 f683 	clz	r6, r3
 8040636:	2e00      	cmp	r6, #0
 8040638:	d14a      	bne.n	80406d0 <__udivmoddi4+0x160>
 804063a:	428b      	cmp	r3, r1
 804063c:	d302      	bcc.n	8040644 <__udivmoddi4+0xd4>
 804063e:	4282      	cmp	r2, r0
 8040640:	f200 80f9 	bhi.w	8040836 <__udivmoddi4+0x2c6>
 8040644:	1a84      	subs	r4, r0, r2
 8040646:	eb61 0303 	sbc.w	r3, r1, r3
 804064a:	2001      	movs	r0, #1
 804064c:	469e      	mov	lr, r3
 804064e:	2d00      	cmp	r5, #0
 8040650:	d0e0      	beq.n	8040614 <__udivmoddi4+0xa4>
 8040652:	e9c5 4e00 	strd	r4, lr, [r5]
 8040656:	e7dd      	b.n	8040614 <__udivmoddi4+0xa4>
 8040658:	b902      	cbnz	r2, 804065c <__udivmoddi4+0xec>
 804065a:	deff      	udf	#255	; 0xff
 804065c:	fab2 f282 	clz	r2, r2
 8040660:	2a00      	cmp	r2, #0
 8040662:	f040 8092 	bne.w	804078a <__udivmoddi4+0x21a>
 8040666:	eba1 010c 	sub.w	r1, r1, ip
 804066a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 804066e:	fa1f fe8c 	uxth.w	lr, ip
 8040672:	2601      	movs	r6, #1
 8040674:	0c20      	lsrs	r0, r4, #16
 8040676:	fbb1 f3f7 	udiv	r3, r1, r7
 804067a:	fb07 1113 	mls	r1, r7, r3, r1
 804067e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040682:	fb0e f003 	mul.w	r0, lr, r3
 8040686:	4288      	cmp	r0, r1
 8040688:	d908      	bls.n	804069c <__udivmoddi4+0x12c>
 804068a:	eb1c 0101 	adds.w	r1, ip, r1
 804068e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8040692:	d202      	bcs.n	804069a <__udivmoddi4+0x12a>
 8040694:	4288      	cmp	r0, r1
 8040696:	f200 80cb 	bhi.w	8040830 <__udivmoddi4+0x2c0>
 804069a:	4643      	mov	r3, r8
 804069c:	1a09      	subs	r1, r1, r0
 804069e:	b2a4      	uxth	r4, r4
 80406a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80406a4:	fb07 1110 	mls	r1, r7, r0, r1
 80406a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80406ac:	fb0e fe00 	mul.w	lr, lr, r0
 80406b0:	45a6      	cmp	lr, r4
 80406b2:	d908      	bls.n	80406c6 <__udivmoddi4+0x156>
 80406b4:	eb1c 0404 	adds.w	r4, ip, r4
 80406b8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80406bc:	d202      	bcs.n	80406c4 <__udivmoddi4+0x154>
 80406be:	45a6      	cmp	lr, r4
 80406c0:	f200 80bb 	bhi.w	804083a <__udivmoddi4+0x2ca>
 80406c4:	4608      	mov	r0, r1
 80406c6:	eba4 040e 	sub.w	r4, r4, lr
 80406ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80406ce:	e79c      	b.n	804060a <__udivmoddi4+0x9a>
 80406d0:	f1c6 0720 	rsb	r7, r6, #32
 80406d4:	40b3      	lsls	r3, r6
 80406d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80406da:	ea4c 0c03 	orr.w	ip, ip, r3
 80406de:	fa20 f407 	lsr.w	r4, r0, r7
 80406e2:	fa01 f306 	lsl.w	r3, r1, r6
 80406e6:	431c      	orrs	r4, r3
 80406e8:	40f9      	lsrs	r1, r7
 80406ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80406ee:	fa00 f306 	lsl.w	r3, r0, r6
 80406f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80406f6:	0c20      	lsrs	r0, r4, #16
 80406f8:	fa1f fe8c 	uxth.w	lr, ip
 80406fc:	fb09 1118 	mls	r1, r9, r8, r1
 8040700:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040704:	fb08 f00e 	mul.w	r0, r8, lr
 8040708:	4288      	cmp	r0, r1
 804070a:	fa02 f206 	lsl.w	r2, r2, r6
 804070e:	d90b      	bls.n	8040728 <__udivmoddi4+0x1b8>
 8040710:	eb1c 0101 	adds.w	r1, ip, r1
 8040714:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8040718:	f080 8088 	bcs.w	804082c <__udivmoddi4+0x2bc>
 804071c:	4288      	cmp	r0, r1
 804071e:	f240 8085 	bls.w	804082c <__udivmoddi4+0x2bc>
 8040722:	f1a8 0802 	sub.w	r8, r8, #2
 8040726:	4461      	add	r1, ip
 8040728:	1a09      	subs	r1, r1, r0
 804072a:	b2a4      	uxth	r4, r4
 804072c:	fbb1 f0f9 	udiv	r0, r1, r9
 8040730:	fb09 1110 	mls	r1, r9, r0, r1
 8040734:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8040738:	fb00 fe0e 	mul.w	lr, r0, lr
 804073c:	458e      	cmp	lr, r1
 804073e:	d908      	bls.n	8040752 <__udivmoddi4+0x1e2>
 8040740:	eb1c 0101 	adds.w	r1, ip, r1
 8040744:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8040748:	d26c      	bcs.n	8040824 <__udivmoddi4+0x2b4>
 804074a:	458e      	cmp	lr, r1
 804074c:	d96a      	bls.n	8040824 <__udivmoddi4+0x2b4>
 804074e:	3802      	subs	r0, #2
 8040750:	4461      	add	r1, ip
 8040752:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8040756:	fba0 9402 	umull	r9, r4, r0, r2
 804075a:	eba1 010e 	sub.w	r1, r1, lr
 804075e:	42a1      	cmp	r1, r4
 8040760:	46c8      	mov	r8, r9
 8040762:	46a6      	mov	lr, r4
 8040764:	d356      	bcc.n	8040814 <__udivmoddi4+0x2a4>
 8040766:	d053      	beq.n	8040810 <__udivmoddi4+0x2a0>
 8040768:	b15d      	cbz	r5, 8040782 <__udivmoddi4+0x212>
 804076a:	ebb3 0208 	subs.w	r2, r3, r8
 804076e:	eb61 010e 	sbc.w	r1, r1, lr
 8040772:	fa01 f707 	lsl.w	r7, r1, r7
 8040776:	fa22 f306 	lsr.w	r3, r2, r6
 804077a:	40f1      	lsrs	r1, r6
 804077c:	431f      	orrs	r7, r3
 804077e:	e9c5 7100 	strd	r7, r1, [r5]
 8040782:	2600      	movs	r6, #0
 8040784:	4631      	mov	r1, r6
 8040786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804078a:	f1c2 0320 	rsb	r3, r2, #32
 804078e:	40d8      	lsrs	r0, r3
 8040790:	fa0c fc02 	lsl.w	ip, ip, r2
 8040794:	fa21 f303 	lsr.w	r3, r1, r3
 8040798:	4091      	lsls	r1, r2
 804079a:	4301      	orrs	r1, r0
 804079c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80407a0:	fa1f fe8c 	uxth.w	lr, ip
 80407a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80407a8:	fb07 3610 	mls	r6, r7, r0, r3
 80407ac:	0c0b      	lsrs	r3, r1, #16
 80407ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80407b2:	fb00 f60e 	mul.w	r6, r0, lr
 80407b6:	429e      	cmp	r6, r3
 80407b8:	fa04 f402 	lsl.w	r4, r4, r2
 80407bc:	d908      	bls.n	80407d0 <__udivmoddi4+0x260>
 80407be:	eb1c 0303 	adds.w	r3, ip, r3
 80407c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80407c6:	d22f      	bcs.n	8040828 <__udivmoddi4+0x2b8>
 80407c8:	429e      	cmp	r6, r3
 80407ca:	d92d      	bls.n	8040828 <__udivmoddi4+0x2b8>
 80407cc:	3802      	subs	r0, #2
 80407ce:	4463      	add	r3, ip
 80407d0:	1b9b      	subs	r3, r3, r6
 80407d2:	b289      	uxth	r1, r1
 80407d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80407d8:	fb07 3316 	mls	r3, r7, r6, r3
 80407dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80407e0:	fb06 f30e 	mul.w	r3, r6, lr
 80407e4:	428b      	cmp	r3, r1
 80407e6:	d908      	bls.n	80407fa <__udivmoddi4+0x28a>
 80407e8:	eb1c 0101 	adds.w	r1, ip, r1
 80407ec:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80407f0:	d216      	bcs.n	8040820 <__udivmoddi4+0x2b0>
 80407f2:	428b      	cmp	r3, r1
 80407f4:	d914      	bls.n	8040820 <__udivmoddi4+0x2b0>
 80407f6:	3e02      	subs	r6, #2
 80407f8:	4461      	add	r1, ip
 80407fa:	1ac9      	subs	r1, r1, r3
 80407fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8040800:	e738      	b.n	8040674 <__udivmoddi4+0x104>
 8040802:	462e      	mov	r6, r5
 8040804:	4628      	mov	r0, r5
 8040806:	e705      	b.n	8040614 <__udivmoddi4+0xa4>
 8040808:	4606      	mov	r6, r0
 804080a:	e6e3      	b.n	80405d4 <__udivmoddi4+0x64>
 804080c:	4618      	mov	r0, r3
 804080e:	e6f8      	b.n	8040602 <__udivmoddi4+0x92>
 8040810:	454b      	cmp	r3, r9
 8040812:	d2a9      	bcs.n	8040768 <__udivmoddi4+0x1f8>
 8040814:	ebb9 0802 	subs.w	r8, r9, r2
 8040818:	eb64 0e0c 	sbc.w	lr, r4, ip
 804081c:	3801      	subs	r0, #1
 804081e:	e7a3      	b.n	8040768 <__udivmoddi4+0x1f8>
 8040820:	4646      	mov	r6, r8
 8040822:	e7ea      	b.n	80407fa <__udivmoddi4+0x28a>
 8040824:	4620      	mov	r0, r4
 8040826:	e794      	b.n	8040752 <__udivmoddi4+0x1e2>
 8040828:	4640      	mov	r0, r8
 804082a:	e7d1      	b.n	80407d0 <__udivmoddi4+0x260>
 804082c:	46d0      	mov	r8, sl
 804082e:	e77b      	b.n	8040728 <__udivmoddi4+0x1b8>
 8040830:	3b02      	subs	r3, #2
 8040832:	4461      	add	r1, ip
 8040834:	e732      	b.n	804069c <__udivmoddi4+0x12c>
 8040836:	4630      	mov	r0, r6
 8040838:	e709      	b.n	804064e <__udivmoddi4+0xde>
 804083a:	4464      	add	r4, ip
 804083c:	3802      	subs	r0, #2
 804083e:	e742      	b.n	80406c6 <__udivmoddi4+0x156>

08040840 <__aeabi_idiv0>:
 8040840:	4770      	bx	lr
 8040842:	bf00      	nop

08040844 <strcmp>:
 8040844:	f810 2b01 	ldrb.w	r2, [r0], #1
 8040848:	f811 3b01 	ldrb.w	r3, [r1], #1
 804084c:	2a01      	cmp	r2, #1
 804084e:	bf28      	it	cs
 8040850:	429a      	cmpcs	r2, r3
 8040852:	d0f7      	beq.n	8040844 <strcmp>
 8040854:	1ad0      	subs	r0, r2, r3
 8040856:	4770      	bx	lr

08040858 <strlen>:
 8040858:	4603      	mov	r3, r0
 804085a:	f813 2b01 	ldrb.w	r2, [r3], #1
 804085e:	2a00      	cmp	r2, #0
 8040860:	d1fb      	bne.n	804085a <strlen+0x2>
 8040862:	1a18      	subs	r0, r3, r0
 8040864:	3801      	subs	r0, #1
 8040866:	4770      	bx	lr

08040868 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8040868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804086c:	ed2d 8b02 	vpush	{d8}
	uint64_t round = BIT64(59); /* 0.5 */
 8040870:	ed9f 8bab 	vldr	d8, [pc, #684]	; 8040b20 <cbvprintf+0x2b8>
{
 8040874:	b09b      	sub	sp, #108	; 0x6c
 8040876:	4681      	mov	r9, r0
 8040878:	468a      	mov	sl, r1
 804087a:	4615      	mov	r5, r2
 804087c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 804087e:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8040880:	7828      	ldrb	r0, [r5, #0]
 8040882:	b910      	cbnz	r0, 804088a <cbvprintf+0x22>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8040884:	4630      	mov	r0, r6
 8040886:	f000 bdcb 	b.w	8041420 <cbvprintf+0xbb8>
			OUTC(*fp++);
 804088a:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
 804088c:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 804088e:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
 8040890:	d006      	beq.n	80408a0 <cbvprintf+0x38>
			OUTC(*fp++);
 8040892:	4651      	mov	r1, sl
			OUTC('%');
 8040894:	47c8      	blx	r9
 8040896:	2800      	cmp	r0, #0
 8040898:	f2c0 85c2 	blt.w	8041420 <cbvprintf+0xbb8>
 804089c:	3601      	adds	r6, #1
		if (bps == NULL) {
 804089e:	e22e      	b.n	8040cfe <cbvprintf+0x496>
		} state = {
 80408a0:	2218      	movs	r2, #24
 80408a2:	2100      	movs	r1, #0
 80408a4:	a80c      	add	r0, sp, #48	; 0x30
 80408a6:	f01a fad1 	bl	805ae4c <memset>
	if (*sp == '%') {
 80408aa:	786b      	ldrb	r3, [r5, #1]
 80408ac:	2b25      	cmp	r3, #37	; 0x25
 80408ae:	d059      	beq.n	8040964 <cbvprintf+0xfc>
 80408b0:	1c6a      	adds	r2, r5, #1
 80408b2:	4617      	mov	r7, r2
		switch (*sp) {
 80408b4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80408b8:	2b2b      	cmp	r3, #43	; 0x2b
 80408ba:	f000 808b 	beq.w	80409d4 <cbvprintf+0x16c>
 80408be:	d879      	bhi.n	80409b4 <cbvprintf+0x14c>
 80408c0:	2b20      	cmp	r3, #32
 80408c2:	f000 808c 	beq.w	80409de <cbvprintf+0x176>
 80408c6:	2b23      	cmp	r3, #35	; 0x23
 80408c8:	f000 808e 	beq.w	80409e8 <cbvprintf+0x180>
	if (conv->flag_zero && conv->flag_dash) {
 80408cc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80408d0:	f003 0244 	and.w	r2, r3, #68	; 0x44
 80408d4:	2a44      	cmp	r2, #68	; 0x44
 80408d6:	d103      	bne.n	80408e0 <cbvprintf+0x78>
		conv->flag_zero = false;
 80408d8:	f36f 1386 	bfc	r3, #6, #1
 80408dc:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
 80408e0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80408e4:	970a      	str	r7, [sp, #40]	; 0x28
 80408e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80408ea:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
 80408ee:	783b      	ldrb	r3, [r7, #0]
 80408f0:	2b2a      	cmp	r3, #42	; 0x2a
 80408f2:	d17e      	bne.n	80409f2 <cbvprintf+0x18a>
		conv->width_star = true;
 80408f4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80408f8:	f043 0301 	orr.w	r3, r3, #1
 80408fc:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
 8040900:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
 8040902:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
 8040904:	781a      	ldrb	r2, [r3, #0]
 8040906:	2a2e      	cmp	r2, #46	; 0x2e
 8040908:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 804090c:	bf0c      	ite	eq
 804090e:	2101      	moveq	r1, #1
 8040910:	2100      	movne	r1, #0
 8040912:	f361 0241 	bfi	r2, r1, #1, #1
 8040916:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
 804091a:	d10b      	bne.n	8040934 <cbvprintf+0xcc>
	++sp;
 804091c:	1c5a      	adds	r2, r3, #1
 804091e:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
 8040920:	785a      	ldrb	r2, [r3, #1]
 8040922:	2a2a      	cmp	r2, #42	; 0x2a
 8040924:	d17b      	bne.n	8040a1e <cbvprintf+0x1b6>
		conv->prec_star = true;
 8040926:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		return ++sp;
 804092a:	3302      	adds	r3, #2
		conv->prec_star = true;
 804092c:	f042 0204 	orr.w	r2, r2, #4
 8040930:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	switch (*sp) {
 8040934:	4619      	mov	r1, r3
 8040936:	f811 0b01 	ldrb.w	r0, [r1], #1
 804093a:	286c      	cmp	r0, #108	; 0x6c
 804093c:	f000 80cf 	beq.w	8040ade <cbvprintf+0x276>
 8040940:	d87d      	bhi.n	8040a3e <cbvprintf+0x1d6>
 8040942:	2868      	cmp	r0, #104	; 0x68
 8040944:	f000 8084 	beq.w	8040a50 <cbvprintf+0x1e8>
 8040948:	286a      	cmp	r0, #106	; 0x6a
 804094a:	f000 80d2 	beq.w	8040af2 <cbvprintf+0x28a>
 804094e:	284c      	cmp	r0, #76	; 0x4c
 8040950:	f000 80d6 	beq.w	8040b00 <cbvprintf+0x298>
		conv->length_mod = LENGTH_NONE;
 8040954:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		break;
 8040958:	4619      	mov	r1, r3
		conv->length_mod = LENGTH_NONE;
 804095a:	f36f 02c6 	bfc	r2, #3, #4
 804095e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
 8040962:	e080      	b.n	8040a66 <cbvprintf+0x1fe>
		conv->specifier = *sp++;
 8040964:	1caa      	adds	r2, r5, #2
 8040966:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 804096a:	9202      	str	r2, [sp, #8]
		if (conv->width_star) {
 804096c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8040970:	07df      	lsls	r7, r3, #31
 8040972:	f140 8178 	bpl.w	8040c66 <cbvprintf+0x3fe>
			width = va_arg(ap, int);
 8040976:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
 804097a:	f1bb 0f00 	cmp.w	fp, #0
 804097e:	da07      	bge.n	8040990 <cbvprintf+0x128>
				conv->flag_dash = true;
 8040980:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				width = -width;
 8040984:	f1cb 0b00 	rsb	fp, fp, #0
				conv->flag_dash = true;
 8040988:	f042 0204 	orr.w	r2, r2, #4
 804098c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
		if (conv->prec_star) {
 8040990:	0758      	lsls	r0, r3, #29
 8040992:	f140 8171 	bpl.w	8040c78 <cbvprintf+0x410>
			int arg = va_arg(ap, int);
 8040996:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
 804099a:	f1b8 0f00 	cmp.w	r8, #0
 804099e:	f280 8170 	bge.w	8040c82 <cbvprintf+0x41a>
				conv->prec_present = false;
 80409a2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80409a6:	f36f 0341 	bfc	r3, #1, #1
 80409aa:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
 80409ae:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80409b2:	e166      	b.n	8040c82 <cbvprintf+0x41a>
		switch (*sp) {
 80409b4:	2b2d      	cmp	r3, #45	; 0x2d
 80409b6:	d006      	beq.n	80409c6 <cbvprintf+0x15e>
 80409b8:	2b30      	cmp	r3, #48	; 0x30
 80409ba:	d187      	bne.n	80408cc <cbvprintf+0x64>
			conv->flag_zero = true;
 80409bc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80409c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80409c4:	e003      	b.n	80409ce <cbvprintf+0x166>
			conv->flag_dash = true;
 80409c6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80409ca:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
 80409ce:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
 80409d2:	e76e      	b.n	80408b2 <cbvprintf+0x4a>
			conv->flag_plus = true;
 80409d4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80409d8:	f043 0308 	orr.w	r3, r3, #8
 80409dc:	e7f7      	b.n	80409ce <cbvprintf+0x166>
			conv->flag_space = true;
 80409de:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80409e2:	f043 0310 	orr.w	r3, r3, #16
 80409e6:	e7f2      	b.n	80409ce <cbvprintf+0x166>
			conv->flag_hash = true;
 80409e8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80409ec:	f043 0320 	orr.w	r3, r3, #32
 80409f0:	e7ed      	b.n	80409ce <cbvprintf+0x166>
	size_t width = extract_decimal(&sp);
 80409f2:	a80a      	add	r0, sp, #40	; 0x28
 80409f4:	f003 ffce 	bl	8044994 <extract_decimal>
	if (sp != wp) {
 80409f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80409fa:	42bb      	cmp	r3, r7
 80409fc:	d081      	beq.n	8040902 <cbvprintf+0x9a>
		conv->unsupported |= ((conv->width_value < 0)
 80409fe:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
		conv->width_value = width;
 8040a02:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
 8040a04:	f3c7 0140 	ubfx	r1, r7, #1, #1
 8040a08:	ea41 72d0 	orr.w	r2, r1, r0, lsr #31
 8040a0c:	f007 017d 	and.w	r1, r7, #125	; 0x7d
 8040a10:	0052      	lsls	r2, r2, #1
 8040a12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8040a16:	430a      	orrs	r2, r1
 8040a18:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 8040a1c:	e771      	b.n	8040902 <cbvprintf+0x9a>
	size_t prec = extract_decimal(&sp);
 8040a1e:	a80a      	add	r0, sp, #40	; 0x28
 8040a20:	f003 ffb8 	bl	8044994 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
 8040a24:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
 8040a28:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
 8040a2a:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8040a2e:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
 8040a32:	f360 0341 	bfi	r3, r0, #1, #1
 8040a36:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
 8040a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8040a3c:	e77a      	b.n	8040934 <cbvprintf+0xcc>
	switch (*sp) {
 8040a3e:	2874      	cmp	r0, #116	; 0x74
 8040a40:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8040a44:	d059      	beq.n	8040afa <cbvprintf+0x292>
 8040a46:	287a      	cmp	r0, #122	; 0x7a
 8040a48:	d184      	bne.n	8040954 <cbvprintf+0xec>
		conv->length_mod = LENGTH_Z;
 8040a4a:	4613      	mov	r3, r2
 8040a4c:	2206      	movs	r2, #6
 8040a4e:	e041      	b.n	8040ad4 <cbvprintf+0x26c>
		if (*++sp == 'h') {
 8040a50:	785a      	ldrb	r2, [r3, #1]
 8040a52:	2a68      	cmp	r2, #104	; 0x68
 8040a54:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8040a58:	d13a      	bne.n	8040ad0 <cbvprintf+0x268>
			conv->length_mod = LENGTH_HH;
 8040a5a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8040a5c:	f361 02c6 	bfi	r2, r1, #3, #4
			++sp;
 8040a60:	1c99      	adds	r1, r3, #2
			conv->length_mod = LENGTH_LL;
 8040a62:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	conv->specifier = *sp++;
 8040a66:	460b      	mov	r3, r1
 8040a68:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
 8040a6c:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
 8040a6e:	9302      	str	r3, [sp, #8]
 8040a70:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
 8040a74:	f200 80cd 	bhi.w	8040c12 <cbvprintf+0x3aa>
 8040a78:	2a57      	cmp	r2, #87	; 0x57
 8040a7a:	d855      	bhi.n	8040b28 <cbvprintf+0x2c0>
 8040a7c:	2a41      	cmp	r2, #65	; 0x41
 8040a7e:	d004      	beq.n	8040a8a <cbvprintf+0x222>
 8040a80:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 8040a84:	2b02      	cmp	r3, #2
 8040a86:	f200 80c4 	bhi.w	8040c12 <cbvprintf+0x3aa>
		conv->specifier_cat = SPECIFIER_FP;
 8040a8a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8040a8e:	2104      	movs	r1, #4
 8040a90:	f361 0302 	bfi	r3, r1, #0, #3
 8040a94:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
 8040a98:	f002 03df 	and.w	r3, r2, #223	; 0xdf
		conv->specifier_a = (conv->specifier == 'a')
 8040a9c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
			|| (conv->specifier == 'A');
 8040aa0:	f1a3 0841 	sub.w	r8, r3, #65	; 0x41
 8040aa4:	f1d8 0300 	rsbs	r3, r8, #0
 8040aa8:	eb43 0308 	adc.w	r3, r3, r8
		conv->specifier_a = (conv->specifier == 'a')
 8040aac:	f363 12c7 	bfi	r2, r3, #7, #1
		if (conv->specifier_a
 8040ab0:	b2d3      	uxtb	r3, r2
		conv->specifier_a = (conv->specifier == 'a')
 8040ab2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		if (conv->specifier_a
 8040ab6:	0612      	lsls	r2, r2, #24
 8040ab8:	f100 80d3 	bmi.w	8040c62 <cbvprintf+0x3fa>
		if (conv->length_mod == LENGTH_L) {
 8040abc:	f003 0278 	and.w	r2, r3, #120	; 0x78
 8040ac0:	2a18      	cmp	r2, #24
 8040ac2:	f040 80a3 	bne.w	8040c0c <cbvprintf+0x3a4>
			conv->length_mod = LENGTH_NONE;
 8040ac6:	f36f 03c6 	bfc	r3, #3, #4
 8040aca:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 8040ace:	e08a      	b.n	8040be6 <cbvprintf+0x37e>
			conv->length_mod = LENGTH_H;
 8040ad0:	4613      	mov	r3, r2
 8040ad2:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
 8040ad4:	f362 03c6 	bfi	r3, r2, #3, #4
 8040ad8:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 8040adc:	e7c3      	b.n	8040a66 <cbvprintf+0x1fe>
		if (*++sp == 'l') {
 8040ade:	785a      	ldrb	r2, [r3, #1]
 8040ae0:	2a6c      	cmp	r2, #108	; 0x6c
 8040ae2:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8040ae6:	d101      	bne.n	8040aec <cbvprintf+0x284>
			conv->length_mod = LENGTH_LL;
 8040ae8:	2104      	movs	r1, #4
 8040aea:	e7b7      	b.n	8040a5c <cbvprintf+0x1f4>
			conv->length_mod = LENGTH_L;
 8040aec:	4613      	mov	r3, r2
 8040aee:	2203      	movs	r2, #3
 8040af0:	e7f0      	b.n	8040ad4 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_J;
 8040af2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8040af6:	2205      	movs	r2, #5
 8040af8:	e7ec      	b.n	8040ad4 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_T;
 8040afa:	4613      	mov	r3, r2
 8040afc:	2207      	movs	r2, #7
 8040afe:	e7e9      	b.n	8040ad4 <cbvprintf+0x26c>
		conv->unsupported = true;
 8040b00:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8040b04:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8040b08:	f023 0302 	bic.w	r3, r3, #2
 8040b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040b10:	f043 0302 	orr.w	r3, r3, #2
 8040b14:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
 8040b18:	e7a5      	b.n	8040a66 <cbvprintf+0x1fe>
 8040b1a:	bf00      	nop
 8040b1c:	f3af 8000 	nop.w
 8040b20:	00000000 	.word	0x00000000
 8040b24:	08000000 	.word	0x08000000
 8040b28:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8040b2c:	2b20      	cmp	r3, #32
 8040b2e:	d870      	bhi.n	8040c12 <cbvprintf+0x3aa>
 8040b30:	a101      	add	r1, pc, #4	; (adr r1, 8040b38 <cbvprintf+0x2d0>)
 8040b32:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8040b36:	bf00      	nop
 8040b38:	08040beb 	.word	0x08040beb
 8040b3c:	08040c13 	.word	0x08040c13
 8040b40:	08040c13 	.word	0x08040c13
 8040b44:	08040c13 	.word	0x08040c13
 8040b48:	08040c13 	.word	0x08040c13
 8040b4c:	08040c13 	.word	0x08040c13
 8040b50:	08040c13 	.word	0x08040c13
 8040b54:	08040c13 	.word	0x08040c13
 8040b58:	08040c13 	.word	0x08040c13
 8040b5c:	08040a8b 	.word	0x08040a8b
 8040b60:	08040c13 	.word	0x08040c13
 8040b64:	08040beb 	.word	0x08040beb
 8040b68:	08040bbd 	.word	0x08040bbd
 8040b6c:	08040a8b 	.word	0x08040a8b
 8040b70:	08040a8b 	.word	0x08040a8b
 8040b74:	08040a8b 	.word	0x08040a8b
 8040b78:	08040c13 	.word	0x08040c13
 8040b7c:	08040bbd 	.word	0x08040bbd
 8040b80:	08040c13 	.word	0x08040c13
 8040b84:	08040c13 	.word	0x08040c13
 8040b88:	08040c13 	.word	0x08040c13
 8040b8c:	08040c13 	.word	0x08040c13
 8040b90:	08040c21 	.word	0x08040c21
 8040b94:	08040beb 	.word	0x08040beb
 8040b98:	08040c45 	.word	0x08040c45
 8040b9c:	08040c13 	.word	0x08040c13
 8040ba0:	08040c13 	.word	0x08040c13
 8040ba4:	08040c45 	.word	0x08040c45
 8040ba8:	08040c13 	.word	0x08040c13
 8040bac:	08040beb 	.word	0x08040beb
 8040bb0:	08040c13 	.word	0x08040c13
 8040bb4:	08040c13 	.word	0x08040c13
 8040bb8:	08040beb 	.word	0x08040beb
		conv->specifier_cat = SPECIFIER_SINT;
 8040bbc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8040bc0:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
 8040bc2:	f361 0302 	bfi	r3, r1, #0, #3
 8040bc6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8040bca:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8040bce:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8040bd2:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
 8040bd4:	bf02      	ittt	eq
 8040bd6:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
 8040bda:	f041 0101 	orreq.w	r1, r1, #1
 8040bde:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
 8040be2:	2a63      	cmp	r2, #99	; 0x63
 8040be4:	d005      	beq.n	8040bf2 <cbvprintf+0x38a>
	bool unsupported = false;
 8040be6:	2300      	movs	r3, #0
 8040be8:	e006      	b.n	8040bf8 <cbvprintf+0x390>
		conv->specifier_cat = SPECIFIER_UINT;
 8040bea:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8040bee:	2102      	movs	r1, #2
 8040bf0:	e7e7      	b.n	8040bc2 <cbvprintf+0x35a>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8040bf2:	3b00      	subs	r3, #0
 8040bf4:	bf18      	it	ne
 8040bf6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 8040bf8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8040bfc:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8040c00:	430b      	orrs	r3, r1
 8040c02:	f363 0241 	bfi	r2, r3, #1, #1
 8040c06:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
 8040c0a:	e6af      	b.n	804096c <cbvprintf+0x104>
		} else if ((conv->length_mod != LENGTH_NONE)
 8040c0c:	f013 0f38 	tst.w	r3, #56	; 0x38
 8040c10:	d0e9      	beq.n	8040be6 <cbvprintf+0x37e>
			conv->invalid = true;
 8040c12:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8040c16:	f043 0301 	orr.w	r3, r3, #1
 8040c1a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 8040c1e:	e7e2      	b.n	8040be6 <cbvprintf+0x37e>
		conv->specifier_cat = SPECIFIER_PTR;
 8040c20:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8040c24:	2203      	movs	r2, #3
 8040c26:	f362 0302 	bfi	r3, r2, #0, #3
 8040c2a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8040c2e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8040c32:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8040c36:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
 8040c3a:	f1dc 0300 	rsbs	r3, ip, #0
 8040c3e:	eb43 030c 	adc.w	r3, r3, ip
 8040c42:	e7d9      	b.n	8040bf8 <cbvprintf+0x390>
		conv->specifier_cat = SPECIFIER_PTR;
 8040c44:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8040c48:	2203      	movs	r2, #3
 8040c4a:	f362 0302 	bfi	r3, r2, #0, #3
 8040c4e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
 8040c52:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8040c56:	f013 0f78 	tst.w	r3, #120	; 0x78
 8040c5a:	bf14      	ite	ne
 8040c5c:	2301      	movne	r3, #1
 8040c5e:	2300      	moveq	r3, #0
 8040c60:	e7ca      	b.n	8040bf8 <cbvprintf+0x390>
			unsupported = true;
 8040c62:	2301      	movs	r3, #1
 8040c64:	e7c8      	b.n	8040bf8 <cbvprintf+0x390>
		} else if (conv->width_present) {
 8040c66:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
 8040c6a:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8040c6c:	bfb4      	ite	lt
 8040c6e:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
 8040c72:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
 8040c76:	e68b      	b.n	8040990 <cbvprintf+0x128>
		} else if (conv->prec_present) {
 8040c78:	0799      	lsls	r1, r3, #30
 8040c7a:	f57f ae98 	bpl.w	80409ae <cbvprintf+0x146>
			precision = conv->prec_value;
 8040c7e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
 8040c82:	2300      	movs	r3, #0
 8040c84:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_pre_exp = 0;
 8040c88:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
 8040c8c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
 8040c90:	f003 0207 	and.w	r2, r3, #7
 8040c94:	2a04      	cmp	r2, #4
 8040c96:	d109      	bne.n	8040cac <cbvprintf+0x444>
		    && !conv->prec_present) {
 8040c98:	078a      	lsls	r2, r1, #30
 8040c9a:	d407      	bmi.n	8040cac <cbvprintf+0x444>
			if (conv->specifier_a) {
 8040c9c:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
 8040ca0:	2a00      	cmp	r2, #0
 8040ca2:	bfb4      	ite	lt
 8040ca4:	f04f 080d 	movlt.w	r8, #13
 8040ca8:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
 8040cac:	f003 0307 	and.w	r3, r3, #7
			= (enum length_mod_enum)conv->length_mod;
 8040cb0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 8040cb4:	2b01      	cmp	r3, #1
 8040cb6:	d137      	bne.n	8040d28 <cbvprintf+0x4c0>
			switch (length_mod) {
 8040cb8:	1ecb      	subs	r3, r1, #3
 8040cba:	2b04      	cmp	r3, #4
 8040cbc:	d821      	bhi.n	8040d02 <cbvprintf+0x49a>
 8040cbe:	e8df f003 	tbb	[pc, r3]
 8040cc2:	0903      	.short	0x0903
 8040cc4:	2009      	.short	0x2009
 8040cc6:	20          	.byte	0x20
 8040cc7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 8040cc8:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 8040ccc:	17da      	asrs	r2, r3, #31
 8040cce:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 8040cd2:	e006      	b.n	8040ce2 <cbvprintf+0x47a>
					(sint_value_type)va_arg(ap, intmax_t);
 8040cd4:	3407      	adds	r4, #7
 8040cd6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 8040cda:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8040cde:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
 8040ce2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8040ce6:	07bb      	lsls	r3, r7, #30
 8040ce8:	d056      	beq.n	8040d98 <cbvprintf+0x530>
			OUTS(sp, fp);
 8040cea:	9b02      	ldr	r3, [sp, #8]
 8040cec:	462a      	mov	r2, r5
 8040cee:	4651      	mov	r1, sl
 8040cf0:	4648      	mov	r0, r9
 8040cf2:	f014 ff30 	bl	8055b56 <outs>
 8040cf6:	2800      	cmp	r0, #0
 8040cf8:	f2c0 8392 	blt.w	8041420 <cbvprintf+0xbb8>
 8040cfc:	4406      	add	r6, r0
			while (pad_len-- > 0) {
 8040cfe:	9d02      	ldr	r5, [sp, #8]
 8040d00:	e5be      	b.n	8040880 <cbvprintf+0x18>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8040d02:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8040d06:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8040d08:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8040d0c:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 8040d10:	d105      	bne.n	8040d1e <cbvprintf+0x4b6>
				value->uint = (unsigned char)value->uint;
 8040d12:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
 8040d16:	930c      	str	r3, [sp, #48]	; 0x30
 8040d18:	2300      	movs	r3, #0
 8040d1a:	930d      	str	r3, [sp, #52]	; 0x34
 8040d1c:	e7e1      	b.n	8040ce2 <cbvprintf+0x47a>
			} else if (length_mod == LENGTH_H) {
 8040d1e:	2902      	cmp	r1, #2
 8040d20:	d1df      	bne.n	8040ce2 <cbvprintf+0x47a>
				value->sint = (short)value->sint;
 8040d22:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8040d26:	e7d1      	b.n	8040ccc <cbvprintf+0x464>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8040d28:	2b02      	cmp	r3, #2
 8040d2a:	d123      	bne.n	8040d74 <cbvprintf+0x50c>
			switch (length_mod) {
 8040d2c:	1ecb      	subs	r3, r1, #3
 8040d2e:	2b04      	cmp	r3, #4
 8040d30:	d813      	bhi.n	8040d5a <cbvprintf+0x4f2>
 8040d32:	e8df f003 	tbb	[pc, r3]
 8040d36:	0a03      	.short	0x0a03
 8040d38:	120a      	.short	0x120a
 8040d3a:	12          	.byte	0x12
 8040d3b:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
 8040d3c:	6820      	ldr	r0, [r4, #0]
 8040d3e:	2200      	movs	r2, #0
				value->sint = va_arg(ap, int);
 8040d40:	1d23      	adds	r3, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 8040d42:	900c      	str	r0, [sp, #48]	; 0x30
 8040d44:	920d      	str	r2, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
 8040d46:	461c      	mov	r4, r3
 8040d48:	e7cb      	b.n	8040ce2 <cbvprintf+0x47a>
					(uint_value_type)va_arg(ap,
 8040d4a:	1de3      	adds	r3, r4, #7
 8040d4c:	f023 0307 	bic.w	r3, r3, #7
				value->uint =
 8040d50:	ecb3 7b02 	vldmia	r3!, {d7}
 8040d54:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
				break;
 8040d58:	e7f5      	b.n	8040d46 <cbvprintf+0x4de>
					(uint_value_type)va_arg(ap, size_t);
 8040d5a:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8040d5e:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 8040d60:	930c      	str	r3, [sp, #48]	; 0x30
 8040d62:	f04f 0300 	mov.w	r3, #0
 8040d66:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
 8040d68:	d0d3      	beq.n	8040d12 <cbvprintf+0x4aa>
			} else if (length_mod == LENGTH_H) {
 8040d6a:	2902      	cmp	r1, #2
 8040d6c:	d1b9      	bne.n	8040ce2 <cbvprintf+0x47a>
				value->uint = (unsigned short)value->uint;
 8040d6e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8040d72:	e7d0      	b.n	8040d16 <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_FP) {
 8040d74:	2b04      	cmp	r3, #4
 8040d76:	d109      	bne.n	8040d8c <cbvprintf+0x524>
					(sint_value_type)va_arg(ap, long long);
 8040d78:	1de3      	adds	r3, r4, #7
 8040d7a:	f023 0307 	bic.w	r3, r3, #7
 8040d7e:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
 8040d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8040d86:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8040d8a:	e7aa      	b.n	8040ce2 <cbvprintf+0x47a>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8040d8c:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 8040d8e:	bf04      	itt	eq
 8040d90:	f854 3b04 	ldreq.w	r3, [r4], #4
 8040d94:	930c      	streq	r3, [sp, #48]	; 0x30
 8040d96:	e7a4      	b.n	8040ce2 <cbvprintf+0x47a>
		switch (conv->specifier) {
 8040d98:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8040d9c:	2a78      	cmp	r2, #120	; 0x78
 8040d9e:	d8ae      	bhi.n	8040cfe <cbvprintf+0x496>
 8040da0:	2a57      	cmp	r2, #87	; 0x57
 8040da2:	f200 808c 	bhi.w	8040ebe <cbvprintf+0x656>
 8040da6:	2a25      	cmp	r2, #37	; 0x25
 8040da8:	f000 80d4 	beq.w	8040f54 <cbvprintf+0x6ec>
 8040dac:	2a24      	cmp	r2, #36	; 0x24
 8040dae:	d9a6      	bls.n	8040cfe <cbvprintf+0x496>
 8040db0:	2a41      	cmp	r2, #65	; 0x41
 8040db2:	d003      	beq.n	8040dbc <cbvprintf+0x554>
 8040db4:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 8040db8:	2b02      	cmp	r3, #2
 8040dba:	d8a0      	bhi.n	8040cfe <cbvprintf+0x496>
	} u = {
 8040dbc:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
 8040dc0:	2b00      	cmp	r3, #0
 8040dc2:	f2c0 81b7 	blt.w	8041134 <cbvprintf+0x8cc>
	} else if (conv->flag_plus) {
 8040dc6:	0738      	lsls	r0, r7, #28
 8040dc8:	f100 81b6 	bmi.w	8041138 <cbvprintf+0x8d0>
		*sign = ' ';
 8040dcc:	f017 0710 	ands.w	r7, r7, #16
 8040dd0:	bf18      	it	ne
 8040dd2:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 8040dd4:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
 8040dd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8040ddc:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
 8040de0:	2d00      	cmp	r5, #0
 8040de2:	f040 81ab 	bne.w	804113c <cbvprintf+0x8d4>
 8040de6:	ea51 0003 	orrs.w	r0, r1, r3
 8040dea:	bf14      	ite	ne
 8040dec:	2001      	movne	r0, #1
 8040dee:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
 8040df0:	02db      	lsls	r3, r3, #11
		c = 'f';
 8040df2:	2a46      	cmp	r2, #70	; 0x46
	fract <<= EXPONENT_BITS;
 8040df4:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
		c = 'f';
 8040df8:	bf08      	it	eq
 8040dfa:	2266      	moveq	r2, #102	; 0x66
	fract <<= EXPONENT_BITS;
 8040dfc:	02c9      	lsls	r1, r1, #11
	if ((expo | fract) != 0) {
 8040dfe:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
 8040e02:	ea45 0e01 	orr.w	lr, r5, r1
 8040e06:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
 8040e0a:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
 8040e0e:	f000 8203 	beq.w	8041218 <cbvprintf+0x9b0>
		if (is_subnormal) {
 8040e12:	2800      	cmp	r0, #0
 8040e14:	f040 81cb 	bne.w	80411ae <cbvprintf+0x946>
		fract |= BIT_63;
 8040e18:	f04f 0c00 	mov.w	ip, #0
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
 8040e1c:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract *= 5U;
 8040e20:	f04f 0e05 	mov.w	lr, #5
		fract |= BIT_63;
 8040e24:	4663      	mov	r3, ip
 8040e26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8040e2a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8040e2e:	9109      	str	r1, [sp, #36]	; 0x24
	while (expo < -2) {
 8040e30:	f115 0f02 	cmn.w	r5, #2
 8040e34:	f2c0 81c2 	blt.w	80411bc <cbvprintf+0x954>
 8040e38:	f1bc 0f00 	cmp.w	ip, #0
 8040e3c:	d001      	beq.n	8040e42 <cbvprintf+0x5da>
 8040e3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
 8040e42:	2d00      	cmp	r5, #0
		fract += 2;
 8040e44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
	while (expo > 0) {
 8040e48:	f300 81cc 	bgt.w	80411e4 <cbvprintf+0x97c>
	fract >>= (4 - expo);
 8040e4c:	f1c5 0c04 	rsb	ip, r5, #4
 8040e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8040e52:	9908      	ldr	r1, [sp, #32]
 8040e54:	351c      	adds	r5, #28
 8040e56:	f1ac 0e20 	sub.w	lr, ip, #32
 8040e5a:	fa00 f505 	lsl.w	r5, r0, r5
 8040e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8040e62:	fa20 fe0e 	lsr.w	lr, r0, lr
 8040e66:	fa20 f00c 	lsr.w	r0, r0, ip
 8040e6a:	4329      	orrs	r1, r5
 8040e6c:	ea41 010e 	orr.w	r1, r1, lr
 8040e70:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
 8040e74:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 8040e78:	2947      	cmp	r1, #71	; 0x47
 8040e7a:	f040 81d4 	bne.w	8041226 <cbvprintf+0x9be>
		if (decexp < (-4 + 1) || decexp > precision) {
 8040e7e:	1cdd      	adds	r5, r3, #3
 8040e80:	db02      	blt.n	8040e88 <cbvprintf+0x620>
 8040e82:	4598      	cmp	r8, r3
 8040e84:	f280 81cb 	bge.w	804121e <cbvprintf+0x9b6>
			c += 'e' - 'g';  /* e or E */
 8040e88:	3a02      	subs	r2, #2
			if (precision > 0) {
 8040e8a:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
 8040e8e:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
 8040e90:	dd01      	ble.n	8040e96 <cbvprintf+0x62e>
				precision--;
 8040e92:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
 8040e96:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8040e9a:	0688      	lsls	r0, r1, #26
 8040e9c:	f100 81c3 	bmi.w	8041226 <cbvprintf+0x9be>
 8040ea0:	f1b8 0f00 	cmp.w	r8, #0
 8040ea4:	bfd4      	ite	le
 8040ea6:	2100      	movle	r1, #0
 8040ea8:	2101      	movgt	r1, #1
	if (c == 'f') {
 8040eaa:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
 8040eac:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
 8040eae:	f040 81bc 	bne.w	804122a <cbvprintf+0x9c2>
		if (decimals < 0) {
 8040eb2:	eb13 0108 	adds.w	r1, r3, r8
 8040eb6:	f140 81ba 	bpl.w	804122e <cbvprintf+0x9c6>
			decimals = 0;
 8040eba:	2100      	movs	r1, #0
 8040ebc:	e1ba      	b.n	8041234 <cbvprintf+0x9cc>
 8040ebe:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8040ec2:	2b20      	cmp	r3, #32
 8040ec4:	f63f af1b 	bhi.w	8040cfe <cbvprintf+0x496>
 8040ec8:	a001      	add	r0, pc, #4	; (adr r0, 8040ed0 <cbvprintf+0x668>)
 8040eca:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8040ece:	bf00      	nop
 8040ed0:	080410d7 	.word	0x080410d7
 8040ed4:	08040cff 	.word	0x08040cff
 8040ed8:	08040cff 	.word	0x08040cff
 8040edc:	08040cff 	.word	0x08040cff
 8040ee0:	08040cff 	.word	0x08040cff
 8040ee4:	08040cff 	.word	0x08040cff
 8040ee8:	08040cff 	.word	0x08040cff
 8040eec:	08040cff 	.word	0x08040cff
 8040ef0:	08040cff 	.word	0x08040cff
 8040ef4:	08040dbd 	.word	0x08040dbd
 8040ef8:	08040cff 	.word	0x08040cff
 8040efc:	08040f81 	.word	0x08040f81
 8040f00:	08041075 	.word	0x08041075
 8040f04:	08040dbd 	.word	0x08040dbd
 8040f08:	08040dbd 	.word	0x08040dbd
 8040f0c:	08040dbd 	.word	0x08040dbd
 8040f10:	08040cff 	.word	0x08040cff
 8040f14:	08041075 	.word	0x08041075
 8040f18:	08040cff 	.word	0x08040cff
 8040f1c:	08040cff 	.word	0x08040cff
 8040f20:	08040cff 	.word	0x08040cff
 8040f24:	08040cff 	.word	0x08040cff
 8040f28:	0804110d 	.word	0x0804110d
 8040f2c:	080410d7 	.word	0x080410d7
 8040f30:	080410db 	.word	0x080410db
 8040f34:	08040cff 	.word	0x08040cff
 8040f38:	08040cff 	.word	0x08040cff
 8040f3c:	08040f5b 	.word	0x08040f5b
 8040f40:	08040cff 	.word	0x08040cff
 8040f44:	080410d7 	.word	0x080410d7
 8040f48:	08040cff 	.word	0x08040cff
 8040f4c:	08040cff 	.word	0x08040cff
 8040f50:	080410d7 	.word	0x080410d7
			OUTC('%');
 8040f54:	4651      	mov	r1, sl
 8040f56:	4610      	mov	r0, r2
 8040f58:	e49c      	b.n	8040894 <cbvprintf+0x2c>
			if (precision >= 0) {
 8040f5a:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 8040f5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
 8040f60:	db09      	blt.n	8040f76 <cbvprintf+0x70e>
				len = strnlen(bps, precision);
 8040f62:	4641      	mov	r1, r8
 8040f64:	4610      	mov	r0, r2
 8040f66:	9203      	str	r2, [sp, #12]
 8040f68:	f01a f8db 	bl	805b122 <strnlen>
				len = strlen(bps);
 8040f6c:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
 8040f6e:	2700      	movs	r7, #0
			bpe = bps + len;
 8040f70:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
 8040f72:	b962      	cbnz	r2, 8040f8e <cbvprintf+0x726>
 8040f74:	e6c3      	b.n	8040cfe <cbvprintf+0x496>
				len = strlen(bps);
 8040f76:	4610      	mov	r0, r2
 8040f78:	9203      	str	r2, [sp, #12]
 8040f7a:	f7ff fc6d 	bl	8040858 <strlen>
 8040f7e:	e7f5      	b.n	8040f6c <cbvprintf+0x704>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8040f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		char sign = 0;
 8040f82:	2700      	movs	r7, #0
			bpe = buf + 1;
 8040f84:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8040f88:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				bps = encode_float(value->dbl, conv, precision,
 8040f8c:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
 8040f8e:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
 8040f90:	b107      	cbz	r7, 8040f94 <cbvprintf+0x72c>
			nj_len += 1U;
 8040f92:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 8040f94:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
 8040f98:	06c1      	lsls	r1, r0, #27
 8040f9a:	f140 8235 	bpl.w	8041408 <cbvprintf+0xba0>
			nj_len += 2U;
 8040f9e:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
 8040fa0:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
 8040fa2:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
 8040fa4:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 8040fa6:	bf44      	itt	mi
 8040fa8:	9910      	ldrmi	r1, [sp, #64]	; 0x40
 8040faa:	185b      	addmi	r3, r3, r1
		if (width > 0) {
 8040fac:	f1bb 0f00 	cmp.w	fp, #0
 8040fb0:	dd23      	ble.n	8040ffa <cbvprintf+0x792>
			width -= (int)nj_len;
 8040fb2:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
 8040fb6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8040fba:	0759      	lsls	r1, r3, #29
 8040fbc:	f3c3 0880 	ubfx	r8, r3, #2, #1
 8040fc0:	d41b      	bmi.n	8040ffa <cbvprintf+0x792>
				if (conv->flag_zero) {
 8040fc2:	0658      	lsls	r0, r3, #25
 8040fc4:	f140 8236 	bpl.w	8041434 <cbvprintf+0xbcc>
					if (sign != 0) {
 8040fc8:	2f00      	cmp	r7, #0
 8040fca:	f000 8236 	beq.w	804143a <cbvprintf+0xbd2>
						OUTC(sign);
 8040fce:	4651      	mov	r1, sl
 8040fd0:	4638      	mov	r0, r7
 8040fd2:	9203      	str	r2, [sp, #12]
 8040fd4:	47c8      	blx	r9
 8040fd6:	2800      	cmp	r0, #0
 8040fd8:	f2c0 8222 	blt.w	8041420 <cbvprintf+0xbb8>
						sign = 0;
 8040fdc:	4647      	mov	r7, r8
						OUTC(sign);
 8040fde:	3601      	adds	r6, #1
					pad = '0';
 8040fe0:	f04f 0830 	mov.w	r8, #48	; 0x30
 8040fe4:	9a03      	ldr	r2, [sp, #12]
 8040fe6:	445e      	add	r6, fp
 8040fe8:	465b      	mov	r3, fp
 8040fea:	eba6 000b 	sub.w	r0, r6, fp
				while (width-- > 0) {
 8040fee:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8040ff2:	2b00      	cmp	r3, #0
 8040ff4:	f300 820c 	bgt.w	8041410 <cbvprintf+0xba8>
 8040ff8:	4606      	mov	r6, r0
		if (sign != 0) {
 8040ffa:	b147      	cbz	r7, 804100e <cbvprintf+0x7a6>
			OUTC(sign);
 8040ffc:	4651      	mov	r1, sl
 8040ffe:	4638      	mov	r0, r7
 8041000:	9203      	str	r2, [sp, #12]
 8041002:	47c8      	blx	r9
 8041004:	2800      	cmp	r0, #0
 8041006:	f2c0 820b 	blt.w	8041420 <cbvprintf+0xbb8>
 804100a:	3601      	adds	r6, #1
 804100c:	9a03      	ldr	r2, [sp, #12]
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
 804100e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8041012:	0659      	lsls	r1, r3, #25
 8041014:	f140 8264 	bpl.w	80414e0 <cbvprintf+0xc78>
			if (conv->specifier_a) {
 8041018:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 804101c:	1ab6      	subs	r6, r6, r2
 804101e:	2b00      	cmp	r3, #0
 8041020:	f280 821a 	bge.w	8041458 <cbvprintf+0xbf0>
 8041024:	4617      	mov	r7, r2
 8041026:	46b8      	mov	r8, r7
 8041028:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
 804102a:	f817 0b01 	ldrb.w	r0, [r7], #1
 804102e:	2870      	cmp	r0, #112	; 0x70
 8041030:	f040 8206 	bne.w	8041440 <cbvprintf+0xbd8>
			while (pad_len-- > 0) {
 8041034:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8041036:	461e      	mov	r6, r3
 8041038:	441f      	add	r7, r3
 804103a:	1bbb      	subs	r3, r7, r6
 804103c:	2b00      	cmp	r3, #0
 804103e:	f300 8248 	bgt.w	80414d2 <cbvprintf+0xc6a>
			OUTS(cp, bpe);
 8041042:	462b      	mov	r3, r5
 8041044:	4642      	mov	r2, r8
			OUTS(bps, bpe);
 8041046:	4651      	mov	r1, sl
 8041048:	4648      	mov	r0, r9
 804104a:	f014 fd84 	bl	8055b56 <outs>
 804104e:	2800      	cmp	r0, #0
 8041050:	f2c0 81e6 	blt.w	8041420 <cbvprintf+0xbb8>
 8041054:	4430      	add	r0, r6
			while (pad_len-- > 0) {
 8041056:	4606      	mov	r6, r0
 8041058:	4483      	add	fp, r0
		while (width > 0) {
 804105a:	ebab 0306 	sub.w	r3, fp, r6
 804105e:	2b00      	cmp	r3, #0
 8041060:	f77f ae4d 	ble.w	8040cfe <cbvprintf+0x496>
			OUTC(' ');
 8041064:	4651      	mov	r1, sl
 8041066:	2020      	movs	r0, #32
 8041068:	47c8      	blx	r9
 804106a:	2800      	cmp	r0, #0
 804106c:	f2c0 81d8 	blt.w	8041420 <cbvprintf+0xbb8>
 8041070:	3601      	adds	r6, #1
			--width;
 8041072:	e7f2      	b.n	804105a <cbvprintf+0x7f2>
			if (conv->flag_plus) {
 8041074:	073d      	lsls	r5, r7, #28
 8041076:	d42c      	bmi.n	80410d2 <cbvprintf+0x86a>
				sign = ' ';
 8041078:	f017 0710 	ands.w	r7, r7, #16
 804107c:	bf18      	it	ne
 804107e:	2720      	movne	r7, #32
			sint = value->sint;
 8041080:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
 8041084:	2b00      	cmp	r3, #0
 8041086:	da06      	bge.n	8041096 <cbvprintf+0x82e>
				value->uint = (uint_value_type)-sint;
 8041088:	4252      	negs	r2, r2
				sign = '-';
 804108a:	f04f 072d 	mov.w	r7, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
 804108e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8041092:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			bps = encode_uint(value->uint, conv, buf, bpe);
 8041096:	f10d 0365 	add.w	r3, sp, #101	; 0x65
 804109a:	aa0e      	add	r2, sp, #56	; 0x38
 804109c:	9300      	str	r3, [sp, #0]
 804109e:	ab13      	add	r3, sp, #76	; 0x4c
 80410a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80410a4:	f003 fc8c 	bl	80449c0 <encode_uint>
 80410a8:	4602      	mov	r2, r0
			if (precision >= 0) {
 80410aa:	f1b8 0f00 	cmp.w	r8, #0
 80410ae:	f10d 0565 	add.w	r5, sp, #101	; 0x65
 80410b2:	f6ff af5e 	blt.w	8040f72 <cbvprintf+0x70a>
				conv->flag_zero = false;
 80410b6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
 80410ba:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
 80410bc:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
 80410c0:	4598      	cmp	r8, r3
				conv->flag_zero = false;
 80410c2:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
 80410c6:	f67f af54 	bls.w	8040f72 <cbvprintf+0x70a>
					conv->pad0_value = precision - (int)len;
 80410ca:	eba8 0303 	sub.w	r3, r8, r3
 80410ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80410d0:	e74f      	b.n	8040f72 <cbvprintf+0x70a>
				sign = '+';
 80410d2:	272b      	movs	r7, #43	; 0x2b
 80410d4:	e7d4      	b.n	8041080 <cbvprintf+0x818>
		switch (conv->specifier) {
 80410d6:	2700      	movs	r7, #0
 80410d8:	e7dd      	b.n	8041096 <cbvprintf+0x82e>
			if (value->ptr != NULL) {
 80410da:	980c      	ldr	r0, [sp, #48]	; 0x30
 80410dc:	2800      	cmp	r0, #0
 80410de:	f000 818f 	beq.w	8041400 <cbvprintf+0xb98>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 80410e2:	f10d 0365 	add.w	r3, sp, #101	; 0x65
 80410e6:	aa0e      	add	r2, sp, #56	; 0x38
 80410e8:	2100      	movs	r1, #0
		char sign = 0;
 80410ea:	2700      	movs	r7, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
 80410ec:	9300      	str	r3, [sp, #0]
 80410ee:	ab13      	add	r3, sp, #76	; 0x4c
 80410f0:	f003 fc66 	bl	80449c0 <encode_uint>
				conv->altform_0c = true;
 80410f4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
				bps = encode_uint((uintptr_t)value->ptr, conv,
 80410f8:	4602      	mov	r2, r0
				conv->altform_0c = true;
 80410fa:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80410fe:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8041102:	f043 0310 	orr.w	r3, r3, #16
 8041106:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
				goto prec_int_pad0;
 804110a:	e7ce      	b.n	80410aa <cbvprintf+0x842>
				store_count(conv, value->ptr, count);
 804110c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
 804110e:	2907      	cmp	r1, #7
 8041110:	f63f adf5 	bhi.w	8040cfe <cbvprintf+0x496>
 8041114:	e8df f001 	tbb	[pc, r1]
 8041118:	0c06040c 	.word	0x0c06040c
 804111c:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8041120:	701e      	strb	r6, [r3, #0]
		break;
 8041122:	e5ec      	b.n	8040cfe <cbvprintf+0x496>
		*(short *)dp = (short)count;
 8041124:	801e      	strh	r6, [r3, #0]
		break;
 8041126:	e5ea      	b.n	8040cfe <cbvprintf+0x496>
		*(intmax_t *)dp = (intmax_t)count;
 8041128:	17f2      	asrs	r2, r6, #31
 804112a:	e9c3 6200 	strd	r6, r2, [r3]
		break;
 804112e:	e5e6      	b.n	8040cfe <cbvprintf+0x496>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8041130:	601e      	str	r6, [r3, #0]
		break;
 8041132:	e5e4      	b.n	8040cfe <cbvprintf+0x496>
		*sign = '-';
 8041134:	272d      	movs	r7, #45	; 0x2d
 8041136:	e64d      	b.n	8040dd4 <cbvprintf+0x56c>
		*sign = '+';
 8041138:	272b      	movs	r7, #43	; 0x2b
 804113a:	e64b      	b.n	8040dd4 <cbvprintf+0x56c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
 804113c:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8041140:	4285      	cmp	r5, r0
 8041142:	d131      	bne.n	80411a8 <cbvprintf+0x940>
			if (isupper((int)c)) {
 8041144:	3201      	adds	r2, #1
 8041146:	48b9      	ldr	r0, [pc, #740]	; (804142c <cbvprintf+0xbc4>)
		if (fract == 0) {
 8041148:	430b      	orrs	r3, r1
			if (isupper((int)c)) {
 804114a:	b2d2      	uxtb	r2, r2
 804114c:	5c12      	ldrb	r2, [r2, r0]
 804114e:	f002 0203 	and.w	r2, r2, #3
		if (fract == 0) {
 8041152:	d11b      	bne.n	804118c <cbvprintf+0x924>
			if (isupper((int)c)) {
 8041154:	2a01      	cmp	r2, #1
 8041156:	d111      	bne.n	804117c <cbvprintf+0x914>
				*buf++ = 'I';
 8041158:	2349      	movs	r3, #73	; 0x49
 804115a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
 804115e:	234e      	movs	r3, #78	; 0x4e
 8041160:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
 8041164:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
 8041166:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		*bpe = buf;
 804116a:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		conv->flag_zero = false;
 804116e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8041172:	f36f 1386 	bfc	r3, #6, #1
 8041176:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		return bps;
 804117a:	e707      	b.n	8040f8c <cbvprintf+0x724>
				*buf++ = 'i';
 804117c:	2369      	movs	r3, #105	; 0x69
 804117e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
 8041182:	236e      	movs	r3, #110	; 0x6e
 8041184:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
 8041188:	2366      	movs	r3, #102	; 0x66
 804118a:	e7ec      	b.n	8041166 <cbvprintf+0x8fe>
			if (isupper((int)c)) {
 804118c:	2a01      	cmp	r2, #1
				*buf++ = 'N';
 804118e:	bf07      	ittee	eq
 8041190:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
 8041192:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
 8041194:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
 8041196:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
 8041198:	bf0c      	ite	eq
 804119a:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
 804119e:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
 80411a2:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 80411a6:	e7de      	b.n	8041166 <cbvprintf+0x8fe>
	bool is_subnormal = (expo == 0) && (fract != 0);
 80411a8:	2000      	movs	r0, #0
 80411aa:	e621      	b.n	8040df0 <cbvprintf+0x588>
				expo--;
 80411ac:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
 80411ae:	1849      	adds	r1, r1, r1
 80411b0:	415b      	adcs	r3, r3
 80411b2:	2b00      	cmp	r3, #0
 80411b4:	dafa      	bge.n	80411ac <cbvprintf+0x944>
 80411b6:	e9cd 1308 	strd	r1, r3, [sp, #32]
 80411ba:	e62d      	b.n	8040e18 <cbvprintf+0x5b0>
			fract >>= 1;
 80411bc:	0840      	lsrs	r0, r0, #1
 80411be:	46ac      	mov	ip, r5
			expo++;
 80411c0:	3501      	adds	r5, #1
			fract >>= 1;
 80411c2:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 80411c6:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 80411c8:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
 80411cc:	d2f6      	bcs.n	80411bc <cbvprintf+0x954>
		fract *= 5U;
 80411ce:	fb0e f501 	mul.w	r5, lr, r1
		decexp--;
 80411d2:	3b01      	subs	r3, #1
		fract *= 5U;
 80411d4:	fba0 010e 	umull	r0, r1, r0, lr
 80411d8:	4429      	add	r1, r5
		expo++;
 80411da:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
 80411de:	f04f 0c01 	mov.w	ip, #1
 80411e2:	e625      	b.n	8040e30 <cbvprintf+0x5c8>
		fract += 2;
 80411e4:	3002      	adds	r0, #2
		expo--;
 80411e6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		fract += 2;
 80411ea:	f141 0100 	adc.w	r1, r1, #0
 80411ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
		_ldiv5(&fract);
 80411f2:	a808      	add	r0, sp, #32
 80411f4:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80411f8:	f014 fc7e 	bl	8055af8 <_ldiv5>
		decexp++;
 80411fc:	9b04      	ldr	r3, [sp, #16]
 80411fe:	9a03      	ldr	r2, [sp, #12]
 8041200:	3301      	adds	r3, #1
 8041202:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
			fract <<= 1;
 8041206:	1849      	adds	r1, r1, r1
			expo--;
 8041208:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
			fract <<= 1;
 804120c:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
 804120e:	2800      	cmp	r0, #0
 8041210:	daf9      	bge.n	8041206 <cbvprintf+0x99e>
 8041212:	e9cd 1008 	strd	r1, r0, [sp, #32]
 8041216:	e614      	b.n	8040e42 <cbvprintf+0x5da>
 8041218:	2300      	movs	r3, #0
 804121a:	461d      	mov	r5, r3
 804121c:	e616      	b.n	8040e4c <cbvprintf+0x5e4>
			precision -= decexp;
 804121e:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
 8041222:	2266      	movs	r2, #102	; 0x66
 8041224:	e637      	b.n	8040e96 <cbvprintf+0x62e>
	bool prune_zero = false;
 8041226:	2100      	movs	r1, #0
 8041228:	e63f      	b.n	8040eaa <cbvprintf+0x642>
		decimals = precision + 1;
 804122a:	f108 0101 	add.w	r1, r8, #1
	if (decimals > 16) {
 804122e:	2910      	cmp	r1, #16
 8041230:	bfa8      	it	ge
 8041232:	2110      	movge	r1, #16
 8041234:	2010      	movs	r0, #16
 8041236:	460d      	mov	r5, r1
 8041238:	9007      	str	r0, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
 804123a:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
	*v >>= 1;
 804123e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
	while (decimals--) {
 8041242:	b9a5      	cbnz	r5, 804126e <cbvprintf+0xa06>
	fract += round;
 8041244:	9d08      	ldr	r5, [sp, #32]
 8041246:	1940      	adds	r0, r0, r5
 8041248:	9d09      	ldr	r5, [sp, #36]	; 0x24
 804124a:	eb41 0105 	adc.w	r1, r1, r5
	if (fract >= BIT64(60)) {
 804124e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8041252:	d21b      	bcs.n	804128c <cbvprintf+0xa24>
	fract += round;
 8041254:	e9cd 0108 	strd	r0, r1, [sp, #32]
	if (c == 'f') {
 8041258:	2a66      	cmp	r2, #102	; 0x66
 804125a:	f040 8099 	bne.w	8041390 <cbvprintf+0xb28>
		if (decexp > 0) {
 804125e:	2b00      	cmp	r3, #0
 8041260:	dc23      	bgt.n	80412aa <cbvprintf+0xa42>
			*buf++ = '0';
 8041262:	2130      	movs	r1, #48	; 0x30
 8041264:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
 8041268:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
 804126c:	e02f      	b.n	80412ce <cbvprintf+0xa66>
	*v >>= 1;
 804126e:	0840      	lsrs	r0, r0, #1
 8041270:	3d01      	subs	r5, #1
 8041272:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 8041276:	0849      	lsrs	r1, r1, #1
 8041278:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	_ldiv5(v);
 804127c:	a80a      	add	r0, sp, #40	; 0x28
 804127e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8041282:	f014 fc39 	bl	8055af8 <_ldiv5>
 8041286:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
 804128a:	e7d8      	b.n	804123e <cbvprintf+0x9d6>
	*v >>= 1;
 804128c:	0840      	lsrs	r0, r0, #1
 804128e:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 8041292:	0849      	lsrs	r1, r1, #1
 8041294:	e9cd 0108 	strd	r0, r1, [sp, #32]
	_ldiv5(v);
 8041298:	a808      	add	r0, sp, #32
 804129a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 804129e:	f014 fc2b 	bl	8055af8 <_ldiv5>
		decexp++;
 80412a2:	9b05      	ldr	r3, [sp, #20]
 80412a4:	9a04      	ldr	r2, [sp, #16]
 80412a6:	3301      	adds	r3, #1
 80412a8:	e7d6      	b.n	8041258 <cbvprintf+0x9f0>
	char *buf = bps;
 80412aa:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
 80412ac:	9907      	ldr	r1, [sp, #28]
 80412ae:	2900      	cmp	r1, #0
 80412b0:	dd0b      	ble.n	80412ca <cbvprintf+0xa62>
				*buf++ = _get_digit(&fract, &digit_count);
 80412b2:	a907      	add	r1, sp, #28
 80412b4:	a808      	add	r0, sp, #32
 80412b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80412ba:	f014 fc35 	bl	8055b28 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
 80412be:	9b05      	ldr	r3, [sp, #20]
 80412c0:	9a04      	ldr	r2, [sp, #16]
 80412c2:	3b01      	subs	r3, #1
				*buf++ = _get_digit(&fract, &digit_count);
 80412c4:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
 80412c8:	d1f0      	bne.n	80412ac <cbvprintf+0xa44>
			conv->pad0_value = decexp;
 80412ca:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
 80412cc:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
 80412ce:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 80412d2:	0689      	lsls	r1, r1, #26
 80412d4:	d402      	bmi.n	80412dc <cbvprintf+0xa74>
 80412d6:	f1b8 0f00 	cmp.w	r8, #0
 80412da:	dd1d      	ble.n	8041318 <cbvprintf+0xab0>
			*buf++ = '.';
 80412dc:	212e      	movs	r1, #46	; 0x2e
 80412de:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
 80412e2:	b19b      	cbz	r3, 804130c <cbvprintf+0xaa4>
 80412e4:	f1b8 0f00 	cmp.w	r8, #0
 80412e8:	dd16      	ble.n	8041318 <cbvprintf+0xab0>
			conv->pad0_value = -decexp;
 80412ea:	4259      	negs	r1, r3
			conv->pad_postdp = (conv->pad0_value > 0);
 80412ec:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
 80412f0:	4541      	cmp	r1, r8
 80412f2:	bfa8      	it	ge
 80412f4:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
 80412f6:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
 80412f8:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad0_value = -decexp;
 80412fc:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
 80412fe:	bfd4      	ite	le
 8041300:	2100      	movle	r1, #0
 8041302:	2101      	movgt	r1, #1
 8041304:	f361 1045 	bfi	r0, r1, #5, #1
 8041308:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
 804130c:	f1b8 0f00 	cmp.w	r8, #0
 8041310:	dd02      	ble.n	8041318 <cbvprintf+0xab0>
 8041312:	9907      	ldr	r1, [sp, #28]
 8041314:	2900      	cmp	r1, #0
 8041316:	dc56      	bgt.n	80413c6 <cbvprintf+0xb5e>
	if (prune_zero) {
 8041318:	9903      	ldr	r1, [sp, #12]
 804131a:	2900      	cmp	r1, #0
 804131c:	d163      	bne.n	80413e6 <cbvprintf+0xb7e>
	conv->pad0_pre_exp = precision;
 804131e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
 8041322:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 8041326:	2945      	cmp	r1, #69	; 0x45
 8041328:	d121      	bne.n	804136e <cbvprintf+0xb06>
		if (decexp < 0) {
 804132a:	2b00      	cmp	r3, #0
		*buf++ = c;
 804132c:	4629      	mov	r1, r5
			decexp = -decexp;
 804132e:	bfb8      	it	lt
 8041330:	425b      	neglt	r3, r3
		*buf++ = c;
 8041332:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
 8041336:	bfb4      	ite	lt
 8041338:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
 804133a:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
 804133c:	2b63      	cmp	r3, #99	; 0x63
 804133e:	706a      	strb	r2, [r5, #1]
 8041340:	dd09      	ble.n	8041356 <cbvprintf+0xaee>
			*buf++ = (decexp / 100) + '0';
 8041342:	2064      	movs	r0, #100	; 0x64
 8041344:	1ce9      	adds	r1, r5, #3
 8041346:	fb93 f2f0 	sdiv	r2, r3, r0
 804134a:	f102 0c30 	add.w	ip, r2, #48	; 0x30
			decexp %= 100;
 804134e:	fb00 3312 	mls	r3, r0, r2, r3
			*buf++ = (decexp / 100) + '0';
 8041352:	f885 c002 	strb.w	ip, [r5, #2]
		*buf++ = (decexp / 10) + '0';
 8041356:	200a      	movs	r0, #10
 8041358:	460d      	mov	r5, r1
 804135a:	fb93 f2f0 	sdiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
 804135e:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
 8041362:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
 8041366:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
 8041368:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
 804136c:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
 804136e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8041370:	2b00      	cmp	r3, #0
 8041372:	dc43      	bgt.n	80413fc <cbvprintf+0xb94>
 8041374:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8041376:	2b00      	cmp	r3, #0
 8041378:	bfd4      	ite	le
 804137a:	2300      	movle	r3, #0
 804137c:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
 804137e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8041382:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
 8041386:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
 8041388:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
 804138c:	702b      	strb	r3, [r5, #0]
	return bps;
 804138e:	e5fd      	b.n	8040f8c <cbvprintf+0x724>
		*buf = _get_digit(&fract, &digit_count);
 8041390:	a907      	add	r1, sp, #28
 8041392:	a808      	add	r0, sp, #32
 8041394:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8041398:	f014 fbc6 	bl	8055b28 <_get_digit>
		if (conv->flag_hash || (precision > 0)) {
 804139c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		if (*buf++ != '0') {
 80413a0:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
 80413a2:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
 80413a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
			decexp--;
 80413aa:	bf18      	it	ne
 80413ac:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
 80413b0:	0688      	lsls	r0, r1, #26
 80413b2:	d402      	bmi.n	80413ba <cbvprintf+0xb52>
 80413b4:	f1b8 0f00 	cmp.w	r8, #0
 80413b8:	dd12      	ble.n	80413e0 <cbvprintf+0xb78>
			*buf++ = '.';
 80413ba:	212e      	movs	r1, #46	; 0x2e
 80413bc:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
 80413c0:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
 80413c4:	e7a2      	b.n	804130c <cbvprintf+0xaa4>
		*buf++ = _get_digit(&fract, &digit_count);
 80413c6:	a907      	add	r1, sp, #28
 80413c8:	a808      	add	r0, sp, #32
		precision--;
 80413ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80413ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
 80413d2:	f014 fba9 	bl	8055b28 <_get_digit>
 80413d6:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
 80413da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80413de:	e795      	b.n	804130c <cbvprintf+0xaa4>
		if (*buf++ != '0') {
 80413e0:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
 80413e4:	e798      	b.n	8041318 <cbvprintf+0xab0>
		conv->pad0_pre_exp = 0;
 80413e6:	2100      	movs	r1, #0
 80413e8:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
 80413ea:	4628      	mov	r0, r5
 80413ec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80413f0:	2930      	cmp	r1, #48	; 0x30
 80413f2:	d0fa      	beq.n	80413ea <cbvprintf+0xb82>
		if (*buf != '.') {
 80413f4:	292e      	cmp	r1, #46	; 0x2e
 80413f6:	bf18      	it	ne
 80413f8:	4605      	movne	r5, r0
 80413fa:	e792      	b.n	8041322 <cbvprintf+0xaba>
		|| (conv->pad0_pre_exp > 0);
 80413fc:	2301      	movs	r3, #1
 80413fe:	e7be      	b.n	804137e <cbvprintf+0xb16>
			bpe = bps + 5;
 8041400:	4d0b      	ldr	r5, [pc, #44]	; (8041430 <cbvprintf+0xbc8>)
		char sign = 0;
 8041402:	4607      	mov	r7, r0
			bps = "(nil)";
 8041404:	1f6a      	subs	r2, r5, #5
 8041406:	e5c2      	b.n	8040f8e <cbvprintf+0x726>
		} else if (conv->altform_0) {
 8041408:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
 804140a:	bf48      	it	mi
 804140c:	3301      	addmi	r3, #1
 804140e:	e5c7      	b.n	8040fa0 <cbvprintf+0x738>
					OUTC(pad);
 8041410:	4651      	mov	r1, sl
 8041412:	4640      	mov	r0, r8
 8041414:	9203      	str	r2, [sp, #12]
 8041416:	47c8      	blx	r9
 8041418:	2800      	cmp	r0, #0
 804141a:	9a03      	ldr	r2, [sp, #12]
 804141c:	f6bf ade4 	bge.w	8040fe8 <cbvprintf+0x780>
#undef OUTS
#undef OUTC
}
 8041420:	b01b      	add	sp, #108	; 0x6c
 8041422:	ecbd 8b02 	vpop	{d8}
 8041426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804142a:	bf00      	nop
 804142c:	08063364 	.word	0x08063364
 8041430:	0805faa2 	.word	0x0805faa2
				char pad = ' ';
 8041434:	f04f 0820 	mov.w	r8, #32
 8041438:	e5d5      	b.n	8040fe6 <cbvprintf+0x77e>
					pad = '0';
 804143a:	f04f 0830 	mov.w	r8, #48	; 0x30
 804143e:	e5d2      	b.n	8040fe6 <cbvprintf+0x77e>
					OUTC(*cp++);
 8041440:	4651      	mov	r1, sl
 8041442:	47c8      	blx	r9
 8041444:	2800      	cmp	r0, #0
 8041446:	f6bf adee 	bge.w	8041026 <cbvprintf+0x7be>
 804144a:	e7e9      	b.n	8041420 <cbvprintf+0xbb8>
					OUTC(*cp++);
 804144c:	4651      	mov	r1, sl
 804144e:	9203      	str	r2, [sp, #12]
 8041450:	47c8      	blx	r9
 8041452:	2800      	cmp	r0, #0
 8041454:	9a03      	ldr	r2, [sp, #12]
 8041456:	dbe3      	blt.n	8041420 <cbvprintf+0xbb8>
				while (isdigit((int)*cp)) {
 8041458:	7810      	ldrb	r0, [r2, #0]
 804145a:	4617      	mov	r7, r2
 804145c:	4b35      	ldr	r3, [pc, #212]	; (8041534 <cbvprintf+0xccc>)
 804145e:	eb06 0802 	add.w	r8, r6, r2
 8041462:	3201      	adds	r2, #1
 8041464:	5cc3      	ldrb	r3, [r0, r3]
 8041466:	075b      	lsls	r3, r3, #29
 8041468:	d4f0      	bmi.n	804144c <cbvprintf+0xbe4>
				if (!conv->pad_postdp) {
 804146a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
 804146e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
 8041470:	0699      	lsls	r1, r3, #26
 8041472:	d407      	bmi.n	8041484 <cbvprintf+0xc1c>
 8041474:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
 8041476:	2e00      	cmp	r6, #0
 8041478:	eba8 0206 	sub.w	r2, r8, r6
 804147c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8041480:	dc0f      	bgt.n	80414a2 <cbvprintf+0xc3a>
 8041482:	4690      	mov	r8, r2
				if (*cp == '.') {
 8041484:	7838      	ldrb	r0, [r7, #0]
 8041486:	282e      	cmp	r0, #46	; 0x2e
 8041488:	d108      	bne.n	804149c <cbvprintf+0xc34>
					OUTC(*cp++);
 804148a:	4651      	mov	r1, sl
 804148c:	47c8      	blx	r9
						OUTC('0');
 804148e:	2800      	cmp	r0, #0
 8041490:	dbc6      	blt.n	8041420 <cbvprintf+0xbb8>
					while (pad_len-- > 0) {
 8041492:	2e00      	cmp	r6, #0
						OUTC('0');
 8041494:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
 8041498:	dc09      	bgt.n	80414ae <cbvprintf+0xc46>
					OUTC(*cp++);
 804149a:	3701      	adds	r7, #1
 804149c:	eba8 0607 	sub.w	r6, r8, r7
 80414a0:	e00e      	b.n	80414c0 <cbvprintf+0xc58>
						OUTC('0');
 80414a2:	4651      	mov	r1, sl
 80414a4:	2030      	movs	r0, #48	; 0x30
 80414a6:	47c8      	blx	r9
 80414a8:	2800      	cmp	r0, #0
 80414aa:	dae4      	bge.n	8041476 <cbvprintf+0xc0e>
 80414ac:	e7b8      	b.n	8041420 <cbvprintf+0xbb8>
						OUTC('0');
 80414ae:	4651      	mov	r1, sl
 80414b0:	2030      	movs	r0, #48	; 0x30
 80414b2:	3e01      	subs	r6, #1
 80414b4:	47c8      	blx	r9
 80414b6:	e7ea      	b.n	804148e <cbvprintf+0xc26>
					OUTC(*cp++);
 80414b8:	4651      	mov	r1, sl
 80414ba:	47c8      	blx	r9
 80414bc:	2800      	cmp	r0, #0
 80414be:	dbaf      	blt.n	8041420 <cbvprintf+0xbb8>
 80414c0:	46b8      	mov	r8, r7
 80414c2:	19f3      	adds	r3, r6, r7
				while (isdigit((int)*cp)) {
 80414c4:	4a1b      	ldr	r2, [pc, #108]	; (8041534 <cbvprintf+0xccc>)
 80414c6:	f817 0b01 	ldrb.w	r0, [r7], #1
 80414ca:	5c12      	ldrb	r2, [r2, r0]
 80414cc:	0752      	lsls	r2, r2, #29
 80414ce:	d4f3      	bmi.n	80414b8 <cbvprintf+0xc50>
 80414d0:	e5b0      	b.n	8041034 <cbvprintf+0x7cc>
				OUTC('0');
 80414d2:	4651      	mov	r1, sl
 80414d4:	2030      	movs	r0, #48	; 0x30
 80414d6:	47c8      	blx	r9
 80414d8:	2800      	cmp	r0, #0
 80414da:	dba1      	blt.n	8041420 <cbvprintf+0xbb8>
 80414dc:	3601      	adds	r6, #1
 80414de:	e5ac      	b.n	804103a <cbvprintf+0x7d2>
			if (conv->altform_0c | conv->altform_0) {
 80414e0:	06d8      	lsls	r0, r3, #27
 80414e2:	d401      	bmi.n	80414e8 <cbvprintf+0xc80>
 80414e4:	0719      	lsls	r1, r3, #28
 80414e6:	d507      	bpl.n	80414f8 <cbvprintf+0xc90>
				OUTC('0');
 80414e8:	4651      	mov	r1, sl
 80414ea:	2030      	movs	r0, #48	; 0x30
 80414ec:	9203      	str	r2, [sp, #12]
 80414ee:	47c8      	blx	r9
 80414f0:	2800      	cmp	r0, #0
 80414f2:	db95      	blt.n	8041420 <cbvprintf+0xbb8>
 80414f4:	3601      	adds	r6, #1
 80414f6:	9a03      	ldr	r2, [sp, #12]
			if (conv->altform_0c) {
 80414f8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80414fc:	06db      	lsls	r3, r3, #27
 80414fe:	d508      	bpl.n	8041512 <cbvprintf+0xcaa>
				OUTC(conv->specifier);
 8041500:	4651      	mov	r1, sl
 8041502:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 8041506:	9203      	str	r2, [sp, #12]
 8041508:	47c8      	blx	r9
 804150a:	2800      	cmp	r0, #0
 804150c:	db88      	blt.n	8041420 <cbvprintf+0xbb8>
 804150e:	3601      	adds	r6, #1
 8041510:	9a03      	ldr	r2, [sp, #12]
			while (pad_len-- > 0) {
 8041512:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8041514:	4437      	add	r7, r6
 8041516:	1bbb      	subs	r3, r7, r6
 8041518:	2b00      	cmp	r3, #0
 804151a:	dc01      	bgt.n	8041520 <cbvprintf+0xcb8>
			OUTS(bps, bpe);
 804151c:	462b      	mov	r3, r5
 804151e:	e592      	b.n	8041046 <cbvprintf+0x7de>
				OUTC('0');
 8041520:	4651      	mov	r1, sl
 8041522:	2030      	movs	r0, #48	; 0x30
 8041524:	9203      	str	r2, [sp, #12]
 8041526:	47c8      	blx	r9
 8041528:	2800      	cmp	r0, #0
 804152a:	f6ff af79 	blt.w	8041420 <cbvprintf+0xbb8>
 804152e:	3601      	adds	r6, #1
 8041530:	9a03      	ldr	r2, [sp, #12]
 8041532:	e7f0      	b.n	8041516 <cbvprintf+0xcae>
 8041534:	08063365 	.word	0x08063365

08041538 <cmd_nsec>:

	return 0;
}

static int cmd_nsec(const struct shell *shell, size_t argc, char **argv)
{
 8041538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804153c:	4607      	mov	r7, r0
 804153e:	468a      	mov	sl, r1
 8041540:	4614      	mov	r4, r2
	uint32_t period;
	uint32_t pulse;
	uint32_t pwm;
	int err;

	dev = device_get_binding(argv[args_indx.device]);
 8041542:	6850      	ldr	r0, [r2, #4]
{
 8041544:	ed2d 8b02 	vpush	{d8}
 8041548:	b087      	sub	sp, #28
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 804154a:	f00f fdd7 	bl	80510fc <z_impl_device_get_binding>
	if (!dev) {
 804154e:	4605      	mov	r5, r0
 8041550:	b960      	cbnz	r0, 804156c <cmd_nsec+0x34>
		shell_error(shell, "PWM device not found");
		return -EINVAL;
 8041552:	f06f 0415 	mvn.w	r4, #21
		shell_error(shell, "PWM device not found");
 8041556:	4a3a      	ldr	r2, [pc, #232]	; (8041640 <cmd_nsec+0x108>)
 8041558:	2102      	movs	r1, #2
 804155a:	4638      	mov	r0, r7
 804155c:	f015 f9af 	bl	80568be <shell_fprintf>
		shell_error(shell, "failed to setup PWM (err %d)", err);
		return err;
	}

	return 0;
}
 8041560:	4620      	mov	r0, r4
 8041562:	b007      	add	sp, #28
 8041564:	ecbd 8b02 	vpop	{d8}
 8041568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pwm = strtoul(argv[args_indx.pwm], NULL, 0);
 804156c:	2200      	movs	r2, #0
 804156e:	68a0      	ldr	r0, [r4, #8]
 8041570:	4611      	mov	r1, r2
 8041572:	f011 fd33 	bl	8052fdc <strtoul>
	period = strtoul(argv[args_indx.period], NULL, 0);
 8041576:	2200      	movs	r2, #0
	pwm = strtoul(argv[args_indx.pwm], NULL, 0);
 8041578:	4680      	mov	r8, r0
	period = strtoul(argv[args_indx.period], NULL, 0);
 804157a:	68e0      	ldr	r0, [r4, #12]
 804157c:	4611      	mov	r1, r2
 804157e:	f011 fd2d 	bl	8052fdc <strtoul>
	pulse = strtoul(argv[args_indx.pulse], NULL, 0);
 8041582:	2200      	movs	r2, #0
	period = strtoul(argv[args_indx.period], NULL, 0);
 8041584:	4681      	mov	r9, r0
	pulse = strtoul(argv[args_indx.pulse], NULL, 0);
 8041586:	6920      	ldr	r0, [r4, #16]
 8041588:	4611      	mov	r1, r2
 804158a:	f011 fd27 	bl	8052fdc <strtoul>
	if (argc == (args_indx.flags + 1)) {
 804158e:	f1ba 0f06 	cmp.w	sl, #6
	pulse = strtoul(argv[args_indx.pulse], NULL, 0);
 8041592:	4606      	mov	r6, r0
	if (argc == (args_indx.flags + 1)) {
 8041594:	d116      	bne.n	80415c4 <cmd_nsec+0x8c>
		flags = strtoul(argv[args_indx.flags], NULL, 0);
 8041596:	2200      	movs	r2, #0
 8041598:	6960      	ldr	r0, [r4, #20]
 804159a:	4611      	mov	r1, r2
 804159c:	f011 fd1e 	bl	8052fdc <strtoul>
 80415a0:	b2c3      	uxtb	r3, r0
	pwm_flags_t flags = 0;
 80415a2:	9302      	str	r3, [sp, #8]
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
	return api->get_cycles_per_sec(dev, pwm, cycles);
 80415a4:	68ab      	ldr	r3, [r5, #8]
 80415a6:	aa04      	add	r2, sp, #16
 80415a8:	4641      	mov	r1, r8
 80415aa:	4628      	mov	r0, r5
 80415ac:	685b      	ldr	r3, [r3, #4]
 80415ae:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 80415b0:	b150      	cbz	r0, 80415c8 <cmd_nsec+0x90>
		return -EIO;
 80415b2:	f06f 0404 	mvn.w	r4, #4
		shell_error(shell, "failed to setup PWM (err %d)", err);
 80415b6:	4623      	mov	r3, r4
 80415b8:	4a22      	ldr	r2, [pc, #136]	; (8041644 <cmd_nsec+0x10c>)
 80415ba:	2102      	movs	r1, #2
 80415bc:	4638      	mov	r0, r7
 80415be:	f015 f97e 	bl	80568be <shell_fprintf>
		return err;
 80415c2:	e7cd      	b.n	8041560 <cmd_nsec+0x28>
	pwm_flags_t flags = 0;
 80415c4:	2300      	movs	r3, #0
 80415c6:	e7ec      	b.n	80415a2 <cmd_nsec+0x6a>
	}

	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
 80415c8:	e9dd 4304 	ldrd	r4, r3, [sp, #16]
	if (period_cycles >= ((uint64_t)1 << 32)) {
 80415cc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
 80415d0:	fba9 b004 	umull	fp, r0, r9, r4
 80415d4:	9303      	str	r3, [sp, #12]
 80415d6:	fb09 0903 	mla	r9, r9, r3, r0
 80415da:	4658      	mov	r0, fp
 80415dc:	a316      	add	r3, pc, #88	; (adr r3, 8041638 <cmd_nsec+0x100>)
 80415de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80415e2:	4649      	mov	r1, r9
 80415e4:	f7fe ffac 	bl	8040540 <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 80415e8:	45da      	cmp	sl, fp
 80415ea:	4b17      	ldr	r3, [pc, #92]	; (8041648 <cmd_nsec+0x110>)
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
 80415ec:	ee08 0a10 	vmov	s16, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 80415f0:	eb73 0309 	sbcs.w	r3, r3, r9
 80415f4:	d202      	bcs.n	80415fc <cmd_nsec+0xc4>
		return -ENOTSUP;
 80415f6:	f06f 0485 	mvn.w	r4, #133	; 0x85
 80415fa:	e7dc      	b.n	80415b6 <cmd_nsec+0x7e>
	}

	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
 80415fc:	fba6 9404 	umull	r9, r4, r6, r4
 8041600:	9b03      	ldr	r3, [sp, #12]
 8041602:	fb06 4603 	mla	r6, r6, r3, r4
 8041606:	4648      	mov	r0, r9
 8041608:	a30b      	add	r3, pc, #44	; (adr r3, 8041638 <cmd_nsec+0x100>)
 804160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804160e:	4631      	mov	r1, r6
 8041610:	f7fe ff96 	bl	8040540 <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8041614:	45ca      	cmp	sl, r9
 8041616:	4a0c      	ldr	r2, [pc, #48]	; (8041648 <cmd_nsec+0x110>)
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
 8041618:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 804161a:	41b2      	sbcs	r2, r6
 804161c:	d3eb      	bcc.n	80415f6 <cmd_nsec+0xbe>
	return api->pin_set(dev, pwm, period, pulse, flags);
 804161e:	68aa      	ldr	r2, [r5, #8]
 8041620:	4628      	mov	r0, r5
 8041622:	9902      	ldr	r1, [sp, #8]
 8041624:	9100      	str	r1, [sp, #0]
 8041626:	4641      	mov	r1, r8
 8041628:	6814      	ldr	r4, [r2, #0]
 804162a:	ee18 2a10 	vmov	r2, s16
 804162e:	47a0      	blx	r4
	if (err) {
 8041630:	4604      	mov	r4, r0
 8041632:	2800      	cmp	r0, #0
 8041634:	d094      	beq.n	8041560 <cmd_nsec+0x28>
 8041636:	e7be      	b.n	80415b6 <cmd_nsec+0x7e>
 8041638:	3b9aca00 	.word	0x3b9aca00
 804163c:	00000000 	.word	0x00000000
 8041640:	0806207a 	.word	0x0806207a
 8041644:	08062090 	.word	0x08062090
 8041648:	3b9ac9ff 	.word	0x3b9ac9ff
 804164c:	00000000 	.word	0x00000000

08041650 <handle_channel_by_name>:
};

static int handle_channel_by_name(const struct shell *shell,
					const struct device *dev,
					const char *channel_name)
{
 8041650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8041654:	4615      	mov	r5, r2
 8041656:	b090      	sub	sp, #64	; 0x40
 8041658:	4607      	mov	r7, r0
 804165a:	460e      	mov	r6, r1
	char *endptr;
	int err;
	int i;

	/* Attempt to parse channel name as a number first */
	i = strtoul(channel_name, &endptr, 0);
 804165c:	2200      	movs	r2, #0
 804165e:	a909      	add	r1, sp, #36	; 0x24
 8041660:	4628      	mov	r0, r5
 8041662:	f011 fcbb 	bl	8052fdc <strtoul>

	if (*endptr != '\0') {
 8041666:	9b09      	ldr	r3, [sp, #36]	; 0x24
	i = strtoul(channel_name, &endptr, 0);
 8041668:	4604      	mov	r4, r0
	if (*endptr != '\0') {
 804166a:	781b      	ldrb	r3, [r3, #0]
 804166c:	b1a3      	cbz	r3, 8041698 <handle_channel_by_name+0x48>
 804166e:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8041768 <handle_channel_by_name+0x118>
		/* Channel name is not a number, look it up */
		for (i = 0; i < ARRAY_SIZE(sensor_channel_name); i++) {
 8041672:	2400      	movs	r4, #0
			if (strcmp(channel_name, sensor_channel_name[i]) == 0) {
 8041674:	f858 1b04 	ldr.w	r1, [r8], #4
 8041678:	4628      	mov	r0, r5
 804167a:	f7ff f8e3 	bl	8040844 <strcmp>
 804167e:	b158      	cbz	r0, 8041698 <handle_channel_by_name+0x48>
		for (i = 0; i < ARRAY_SIZE(sensor_channel_name); i++) {
 8041680:	3401      	adds	r4, #1
 8041682:	2c39      	cmp	r4, #57	; 0x39
 8041684:	d1f6      	bne.n	8041674 <handle_channel_by_name+0x24>
				break;
			}
		}

		if (i == ARRAY_SIZE(sensor_channel_name)) {
			shell_error(shell, "Channel not supported (%s)",
 8041686:	4638      	mov	r0, r7
 8041688:	462b      	mov	r3, r5
 804168a:	4a35      	ldr	r2, [pc, #212]	; (8041760 <handle_channel_by_name+0x110>)
 804168c:	2102      	movs	r1, #2
 804168e:	f015 f916 	bl	80568be <shell_fprintf>
				    channel_name);
			return -ENOTSUP;
 8041692:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8041696:	e020      	b.n	80416da <handle_channel_by_name+0x8a>
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
 8041698:	68b3      	ldr	r3, [r6, #8]
 804169a:	aa0a      	add	r2, sp, #40	; 0x28
 804169c:	b2a1      	uxth	r1, r4
 804169e:	4630      	mov	r0, r6
 80416a0:	691b      	ldr	r3, [r3, #16]
 80416a2:	4798      	blx	r3
		}
	}

	err = sensor_channel_get(dev, i, value);
	if (err < 0) {
 80416a4:	2800      	cmp	r0, #0
 80416a6:	db18      	blt.n	80416da <handle_channel_by_name+0x8a>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(const struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
 80416a8:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
		return err;
	}

	if (i >= ARRAY_SIZE(sensor_channel_name)) {
 80416ac:	2c38      	cmp	r4, #56	; 0x38
 80416ae:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80416b2:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8041758 <handle_channel_by_name+0x108>
 80416b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80416ba:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
 80416be:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80416c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80416c6:	dd0b      	ble.n	80416e0 <handle_channel_by_name+0x90>
		shell_print(shell, "channel idx=%d value = %10.6f", i,
 80416c8:	4623      	mov	r3, r4
 80416ca:	4a26      	ldr	r2, [pc, #152]	; (8041764 <handle_channel_by_name+0x114>)
 80416cc:	2100      	movs	r1, #0
 80416ce:	4638      	mov	r0, r7
 80416d0:	ed8d 7b00 	vstr	d7, [sp]
 80416d4:	f015 f8f3 	bl	80568be <shell_fprintf>
			sensor_value_to_double(&value[0]),
			sensor_value_to_double(&value[1]),
			sensor_value_to_double(&value[2]));
	}

	return 0;
 80416d8:	2000      	movs	r0, #0
}
 80416da:	b010      	add	sp, #64	; 0x40
 80416dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (i != SENSOR_CHAN_ACCEL_XYZ &&
 80416e0:	f024 0204 	bic.w	r2, r4, #4
		shell_print(shell,
 80416e4:	4b20      	ldr	r3, [pc, #128]	; (8041768 <handle_channel_by_name+0x118>)
	} else if (i != SENSOR_CHAN_ACCEL_XYZ &&
 80416e6:	2a03      	cmp	r2, #3
		shell_print(shell,
 80416e8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
	} else if (i != SENSOR_CHAN_ACCEL_XYZ &&
 80416ec:	d00b      	beq.n	8041706 <handle_channel_by_name+0xb6>
		i != SENSOR_CHAN_GYRO_XYZ &&
 80416ee:	2c0b      	cmp	r4, #11
 80416f0:	d009      	beq.n	8041706 <handle_channel_by_name+0xb6>
		shell_print(shell,
 80416f2:	9300      	str	r3, [sp, #0]
 80416f4:	2100      	movs	r1, #0
 80416f6:	4623      	mov	r3, r4
 80416f8:	4a1c      	ldr	r2, [pc, #112]	; (804176c <handle_channel_by_name+0x11c>)
 80416fa:	4638      	mov	r0, r7
 80416fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8041700:	f015 f8dd 	bl	80568be <shell_fprintf>
 8041704:	e7e8      	b.n	80416d8 <handle_channel_by_name+0x88>
 8041706:	eddd 6a0f 	vldr	s13, [sp, #60]	; 0x3c
		shell_print(shell,
 804170a:	2100      	movs	r1, #0
 804170c:	9300      	str	r3, [sp, #0]
 804170e:	4638      	mov	r0, r7
 8041710:	eeb8 4be6 	vcvt.f64.s32	d4, s13
 8041714:	4623      	mov	r3, r4
 8041716:	4a16      	ldr	r2, [pc, #88]	; (8041770 <handle_channel_by_name+0x120>)
 8041718:	ee84 6b05 	vdiv.f64	d6, d4, d5
 804171c:	eddd 4a0e 	vldr	s9, [sp, #56]	; 0x38
 8041720:	eeb8 4be4 	vcvt.f64.s32	d4, s9
 8041724:	ed8d 7b02 	vstr	d7, [sp, #8]
 8041728:	ee36 6b04 	vadd.f64	d6, d6, d4
 804172c:	ed8d 6b06 	vstr	d6, [sp, #24]
 8041730:	eddd 6a0d 	vldr	s13, [sp, #52]	; 0x34
 8041734:	eeb8 4be6 	vcvt.f64.s32	d4, s13
 8041738:	ee84 6b05 	vdiv.f64	d6, d4, d5
 804173c:	eddd 5a0c 	vldr	s11, [sp, #48]	; 0x30
 8041740:	eeb8 5be5 	vcvt.f64.s32	d5, s11
 8041744:	ee36 6b05 	vadd.f64	d6, d6, d5
 8041748:	ed8d 6b04 	vstr	d6, [sp, #16]
 804174c:	f015 f8b7 	bl	80568be <shell_fprintf>
 8041750:	e7c2      	b.n	80416d8 <handle_channel_by_name+0x88>
 8041752:	bf00      	nop
 8041754:	f3af 8000 	nop.w
 8041758:	00000000 	.word	0x00000000
 804175c:	412e8480 	.word	0x412e8480
 8041760:	080621fc 	.word	0x080621fc
 8041764:	0806218d 	.word	0x0806218d
 8041768:	20020278 	.word	0x20020278
 804176c:	080621ac 	.word	0x080621ac
 8041770:	080621c8 	.word	0x080621c8
 8041774:	00000000 	.word	0x00000000

08041778 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 8041778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804177c:	ed2d 8b02 	vpush	{d8}
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
 8041780:	ed9f 8b47 	vldr	d8, [pc, #284]	; 80418a0 <work_queue_main+0x128>
{
 8041784:	b084      	sub	sp, #16
 8041786:	4604      	mov	r4, r0
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8041788:	4e47      	ldr	r6, [pc, #284]	; (80418a8 <work_queue_main+0x130>)
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 804178a:	f04f 0310 	mov.w	r3, #16
 804178e:	f3ef 8711 	mrs	r7, BASEPRI
 8041792:	f383 8812 	msr	BASEPRI_MAX, r3
 8041796:	f3bf 8f6f 	isb	sy
 804179a:	f8d4 50f8 	ldr.w	r5, [r4, #248]	; 0xf8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
 804179e:	b98d      	cbnz	r5, 80417c4 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
 80417a0:	2102      	movs	r1, #2
 80417a2:	f504 7088 	add.w	r0, r4, #272	; 0x110
 80417a6:	f018 fe41 	bl	805a42c <flag_test_and_clear>
 80417aa:	2800      	cmp	r0, #0
 80417ac:	d135      	bne.n	804181a <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 80417ae:	2300      	movs	r3, #0
 80417b0:	f504 7280 	add.w	r2, r4, #256	; 0x100
 80417b4:	4639      	mov	r1, r7
 80417b6:	483d      	ldr	r0, [pc, #244]	; (80418ac <work_queue_main+0x134>)
 80417b8:	9302      	str	r3, [sp, #8]
 80417ba:	ed8d 8b00 	vstr	d8, [sp]
 80417be:	f010 fde7 	bl	8052390 <z_sched_wait>
			continue;
 80417c2:	e7e2      	b.n	804178a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 80417c4:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
	return node->next;
 80417c8:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 80417ca:	4295      	cmp	r5, r2
	list->head = node;
 80417cc:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 80417d0:	d101      	bne.n	80417d6 <work_queue_main+0x5e>
	list->tail = node;
 80417d2:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
	*flagp |= BIT(bit);
 80417d6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80417da:	f043 0302 	orr.w	r3, r3, #2
 80417de:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
	*flagp &= ~BIT(bit);
 80417e2:	68eb      	ldr	r3, [r5, #12]
 80417e4:	f023 0304 	bic.w	r3, r3, #4
 80417e8:	f043 0301 	orr.w	r3, r3, #1
 80417ec:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
 80417ee:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 80417f0:	f387 8811 	msr	BASEPRI, r7
 80417f4:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
 80417f8:	4628      	mov	r0, r5
 80417fa:	4798      	blx	r3
	__asm__ volatile(
 80417fc:	f04f 0310 	mov.w	r3, #16
 8041800:	f3ef 8811 	mrs	r8, BASEPRI
 8041804:	f383 8812 	msr	BASEPRI_MAX, r3
 8041808:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 804180c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 804180e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
 8041810:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8041814:	d40b      	bmi.n	804182e <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
 8041816:	60ea      	str	r2, [r5, #12]
 8041818:	e00e      	b.n	8041838 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 804181a:	f504 7584 	add.w	r5, r4, #264	; 0x108
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 804181e:	2200      	movs	r2, #0
 8041820:	2101      	movs	r1, #1
 8041822:	4628      	mov	r0, r5
 8041824:	f018 ff37 	bl	805a696 <z_sched_wake>
 8041828:	2800      	cmp	r0, #0
 804182a:	d1f8      	bne.n	804181e <work_queue_main+0xa6>
 804182c:	e7bf      	b.n	80417ae <work_queue_main+0x36>
	*flagp &= ~BIT(bit);
 804182e:	f023 0303 	bic.w	r3, r3, #3
	return list->head;
 8041832:	6830      	ldr	r0, [r6, #0]
 8041834:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8041836:	b970      	cbnz	r0, 8041856 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
 8041838:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 804183c:	f023 0302 	bic.w	r3, r3, #2
 8041840:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
	__asm__ volatile(
 8041844:	f388 8811 	msr	BASEPRI, r8
 8041848:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
 804184c:	05d8      	lsls	r0, r3, #23
 804184e:	d49c      	bmi.n	804178a <work_queue_main+0x12>
		(void) arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
 8041850:	f010 fca2 	bl	8052198 <z_impl_k_yield>
}
 8041854:	e799      	b.n	804178a <work_queue_main+0x12>
	return node->next;
 8041856:	2700      	movs	r7, #0
 8041858:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
 804185c:	46ba      	mov	sl, r7
		if (wc->work == work) {
 804185e:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 8041860:	4602      	mov	r2, r0
		if (wc->work == work) {
 8041862:	429d      	cmp	r5, r3
 8041864:	d10b      	bne.n	804187e <work_queue_main+0x106>
	return node->next;
 8041866:	6802      	ldr	r2, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 8041868:	b98f      	cbnz	r7, 804188e <work_queue_main+0x116>
 804186a:	6873      	ldr	r3, [r6, #4]
	list->head = node;
 804186c:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
 804186e:	4283      	cmp	r3, r0
 8041870:	d100      	bne.n	8041874 <work_queue_main+0xfc>
	list->tail = node;
 8041872:	6072      	str	r2, [r6, #4]
	parent->next = child;
 8041874:	f840 ab08 	str.w	sl, [r0], #8
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8041878:	f010 f934 	bl	8051ae4 <z_impl_k_sem_give>
}
 804187c:	463a      	mov	r2, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 804187e:	f1b9 0f00 	cmp.w	r9, #0
 8041882:	d0d9      	beq.n	8041838 <work_queue_main+0xc0>
	return node->next;
 8041884:	4648      	mov	r0, r9
 8041886:	4617      	mov	r7, r2
 8041888:	f8d9 9000 	ldr.w	r9, [r9]
 804188c:	e7e7      	b.n	804185e <work_queue_main+0xe6>
	return list->tail;
 804188e:	6873      	ldr	r3, [r6, #4]
	parent->next = child;
 8041890:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
 8041892:	4283      	cmp	r3, r0
	list->tail = node;
 8041894:	bf08      	it	eq
 8041896:	6077      	streq	r7, [r6, #4]
}
 8041898:	e7ec      	b.n	8041874 <work_queue_main+0xfc>
 804189a:	bf00      	nop
 804189c:	f3af 8000 	nop.w
 80418a0:	ffffffff 	.word	0xffffffff
 80418a4:	ffffffff 	.word	0xffffffff
 80418a8:	20038cec 	.word	0x20038cec
 80418ac:	20039aaf 	.word	0x20039aaf

080418b0 <_printf_float>:
 80418b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80418b4:	b08b      	sub	sp, #44	; 0x2c
 80418b6:	460c      	mov	r4, r1
 80418b8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80418bc:	4616      	mov	r6, r2
 80418be:	461f      	mov	r7, r3
 80418c0:	4605      	mov	r5, r0
 80418c2:	f011 fb95 	bl	8052ff0 <_localeconv_r>
 80418c6:	f8d0 b000 	ldr.w	fp, [r0]
 80418ca:	4658      	mov	r0, fp
 80418cc:	f7fe ffc4 	bl	8040858 <strlen>
 80418d0:	2300      	movs	r3, #0
 80418d2:	9308      	str	r3, [sp, #32]
 80418d4:	f8d8 3000 	ldr.w	r3, [r8]
 80418d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80418dc:	6822      	ldr	r2, [r4, #0]
 80418de:	3307      	adds	r3, #7
 80418e0:	f023 0307 	bic.w	r3, r3, #7
 80418e4:	f103 0108 	add.w	r1, r3, #8
 80418e8:	f8c8 1000 	str.w	r1, [r8]
 80418ec:	4682      	mov	sl, r0
 80418ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80418f2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80418f6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8041b58 <_printf_float+0x2a8>
 80418fa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80418fe:	eeb0 6bc0 	vabs.f64	d6, d0
 8041902:	eeb4 6b47 	vcmp.f64	d6, d7
 8041906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804190a:	dd24      	ble.n	8041956 <_printf_float+0xa6>
 804190c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8041910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8041914:	d502      	bpl.n	804191c <_printf_float+0x6c>
 8041916:	232d      	movs	r3, #45	; 0x2d
 8041918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804191c:	4b90      	ldr	r3, [pc, #576]	; (8041b60 <_printf_float+0x2b0>)
 804191e:	4891      	ldr	r0, [pc, #580]	; (8041b64 <_printf_float+0x2b4>)
 8041920:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8041924:	bf94      	ite	ls
 8041926:	4698      	movls	r8, r3
 8041928:	4680      	movhi	r8, r0
 804192a:	2303      	movs	r3, #3
 804192c:	6123      	str	r3, [r4, #16]
 804192e:	f022 0204 	bic.w	r2, r2, #4
 8041932:	2300      	movs	r3, #0
 8041934:	6022      	str	r2, [r4, #0]
 8041936:	9304      	str	r3, [sp, #16]
 8041938:	9700      	str	r7, [sp, #0]
 804193a:	4633      	mov	r3, r6
 804193c:	aa09      	add	r2, sp, #36	; 0x24
 804193e:	4621      	mov	r1, r4
 8041940:	4628      	mov	r0, r5
 8041942:	f019 fb1b 	bl	805af7c <_printf_common>
 8041946:	3001      	adds	r0, #1
 8041948:	f040 808a 	bne.w	8041a60 <_printf_float+0x1b0>
 804194c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8041950:	b00b      	add	sp, #44	; 0x2c
 8041952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8041956:	eeb4 0b40 	vcmp.f64	d0, d0
 804195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804195e:	d709      	bvc.n	8041974 <_printf_float+0xc4>
 8041960:	ee10 3a90 	vmov	r3, s1
 8041964:	2b00      	cmp	r3, #0
 8041966:	bfbc      	itt	lt
 8041968:	232d      	movlt	r3, #45	; 0x2d
 804196a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 804196e:	487e      	ldr	r0, [pc, #504]	; (8041b68 <_printf_float+0x2b8>)
 8041970:	4b7e      	ldr	r3, [pc, #504]	; (8041b6c <_printf_float+0x2bc>)
 8041972:	e7d5      	b.n	8041920 <_printf_float+0x70>
 8041974:	6863      	ldr	r3, [r4, #4]
 8041976:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 804197a:	9104      	str	r1, [sp, #16]
 804197c:	1c59      	adds	r1, r3, #1
 804197e:	d13c      	bne.n	80419fa <_printf_float+0x14a>
 8041980:	2306      	movs	r3, #6
 8041982:	6063      	str	r3, [r4, #4]
 8041984:	2300      	movs	r3, #0
 8041986:	9303      	str	r3, [sp, #12]
 8041988:	ab08      	add	r3, sp, #32
 804198a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 804198e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8041992:	ab07      	add	r3, sp, #28
 8041994:	6861      	ldr	r1, [r4, #4]
 8041996:	9300      	str	r3, [sp, #0]
 8041998:	6022      	str	r2, [r4, #0]
 804199a:	f10d 031b 	add.w	r3, sp, #27
 804199e:	4628      	mov	r0, r5
 80419a0:	f019 fa5c 	bl	805ae5c <__cvt>
 80419a4:	9b04      	ldr	r3, [sp, #16]
 80419a6:	9907      	ldr	r1, [sp, #28]
 80419a8:	2b47      	cmp	r3, #71	; 0x47
 80419aa:	4680      	mov	r8, r0
 80419ac:	d108      	bne.n	80419c0 <_printf_float+0x110>
 80419ae:	1cc8      	adds	r0, r1, #3
 80419b0:	db02      	blt.n	80419b8 <_printf_float+0x108>
 80419b2:	6863      	ldr	r3, [r4, #4]
 80419b4:	4299      	cmp	r1, r3
 80419b6:	dd41      	ble.n	8041a3c <_printf_float+0x18c>
 80419b8:	f1a9 0902 	sub.w	r9, r9, #2
 80419bc:	fa5f f989 	uxtb.w	r9, r9
 80419c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80419c4:	d820      	bhi.n	8041a08 <_printf_float+0x158>
 80419c6:	3901      	subs	r1, #1
 80419c8:	464a      	mov	r2, r9
 80419ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80419ce:	9107      	str	r1, [sp, #28]
 80419d0:	f019 fa96 	bl	805af00 <__exponent>
 80419d4:	9a08      	ldr	r2, [sp, #32]
 80419d6:	9004      	str	r0, [sp, #16]
 80419d8:	1813      	adds	r3, r2, r0
 80419da:	2a01      	cmp	r2, #1
 80419dc:	6123      	str	r3, [r4, #16]
 80419de:	dc02      	bgt.n	80419e6 <_printf_float+0x136>
 80419e0:	6822      	ldr	r2, [r4, #0]
 80419e2:	07d2      	lsls	r2, r2, #31
 80419e4:	d501      	bpl.n	80419ea <_printf_float+0x13a>
 80419e6:	3301      	adds	r3, #1
 80419e8:	6123      	str	r3, [r4, #16]
 80419ea:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80419ee:	2b00      	cmp	r3, #0
 80419f0:	d0a2      	beq.n	8041938 <_printf_float+0x88>
 80419f2:	232d      	movs	r3, #45	; 0x2d
 80419f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80419f8:	e79e      	b.n	8041938 <_printf_float+0x88>
 80419fa:	9904      	ldr	r1, [sp, #16]
 80419fc:	2947      	cmp	r1, #71	; 0x47
 80419fe:	d1c1      	bne.n	8041984 <_printf_float+0xd4>
 8041a00:	2b00      	cmp	r3, #0
 8041a02:	d1bf      	bne.n	8041984 <_printf_float+0xd4>
 8041a04:	2301      	movs	r3, #1
 8041a06:	e7bc      	b.n	8041982 <_printf_float+0xd2>
 8041a08:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8041a0c:	d118      	bne.n	8041a40 <_printf_float+0x190>
 8041a0e:	2900      	cmp	r1, #0
 8041a10:	6863      	ldr	r3, [r4, #4]
 8041a12:	dd0b      	ble.n	8041a2c <_printf_float+0x17c>
 8041a14:	6121      	str	r1, [r4, #16]
 8041a16:	b913      	cbnz	r3, 8041a1e <_printf_float+0x16e>
 8041a18:	6822      	ldr	r2, [r4, #0]
 8041a1a:	07d0      	lsls	r0, r2, #31
 8041a1c:	d502      	bpl.n	8041a24 <_printf_float+0x174>
 8041a1e:	3301      	adds	r3, #1
 8041a20:	440b      	add	r3, r1
 8041a22:	6123      	str	r3, [r4, #16]
 8041a24:	2300      	movs	r3, #0
 8041a26:	65a1      	str	r1, [r4, #88]	; 0x58
 8041a28:	9304      	str	r3, [sp, #16]
 8041a2a:	e7de      	b.n	80419ea <_printf_float+0x13a>
 8041a2c:	b913      	cbnz	r3, 8041a34 <_printf_float+0x184>
 8041a2e:	6822      	ldr	r2, [r4, #0]
 8041a30:	07d2      	lsls	r2, r2, #31
 8041a32:	d501      	bpl.n	8041a38 <_printf_float+0x188>
 8041a34:	3302      	adds	r3, #2
 8041a36:	e7f4      	b.n	8041a22 <_printf_float+0x172>
 8041a38:	2301      	movs	r3, #1
 8041a3a:	e7f2      	b.n	8041a22 <_printf_float+0x172>
 8041a3c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8041a40:	9b08      	ldr	r3, [sp, #32]
 8041a42:	4299      	cmp	r1, r3
 8041a44:	db05      	blt.n	8041a52 <_printf_float+0x1a2>
 8041a46:	6823      	ldr	r3, [r4, #0]
 8041a48:	6121      	str	r1, [r4, #16]
 8041a4a:	07d8      	lsls	r0, r3, #31
 8041a4c:	d5ea      	bpl.n	8041a24 <_printf_float+0x174>
 8041a4e:	1c4b      	adds	r3, r1, #1
 8041a50:	e7e7      	b.n	8041a22 <_printf_float+0x172>
 8041a52:	2900      	cmp	r1, #0
 8041a54:	bfd4      	ite	le
 8041a56:	f1c1 0202 	rsble	r2, r1, #2
 8041a5a:	2201      	movgt	r2, #1
 8041a5c:	4413      	add	r3, r2
 8041a5e:	e7e0      	b.n	8041a22 <_printf_float+0x172>
 8041a60:	6823      	ldr	r3, [r4, #0]
 8041a62:	055a      	lsls	r2, r3, #21
 8041a64:	d407      	bmi.n	8041a76 <_printf_float+0x1c6>
 8041a66:	6923      	ldr	r3, [r4, #16]
 8041a68:	4642      	mov	r2, r8
 8041a6a:	4631      	mov	r1, r6
 8041a6c:	4628      	mov	r0, r5
 8041a6e:	47b8      	blx	r7
 8041a70:	3001      	adds	r0, #1
 8041a72:	d12a      	bne.n	8041aca <_printf_float+0x21a>
 8041a74:	e76a      	b.n	804194c <_printf_float+0x9c>
 8041a76:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8041a7a:	f240 80e2 	bls.w	8041c42 <_printf_float+0x392>
 8041a7e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8041a82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8041a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8041a8a:	d133      	bne.n	8041af4 <_printf_float+0x244>
 8041a8c:	4a38      	ldr	r2, [pc, #224]	; (8041b70 <_printf_float+0x2c0>)
 8041a8e:	2301      	movs	r3, #1
 8041a90:	4631      	mov	r1, r6
 8041a92:	4628      	mov	r0, r5
 8041a94:	47b8      	blx	r7
 8041a96:	3001      	adds	r0, #1
 8041a98:	f43f af58 	beq.w	804194c <_printf_float+0x9c>
 8041a9c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8041aa0:	429a      	cmp	r2, r3
 8041aa2:	db02      	blt.n	8041aaa <_printf_float+0x1fa>
 8041aa4:	6823      	ldr	r3, [r4, #0]
 8041aa6:	07d8      	lsls	r0, r3, #31
 8041aa8:	d50f      	bpl.n	8041aca <_printf_float+0x21a>
 8041aaa:	4653      	mov	r3, sl
 8041aac:	465a      	mov	r2, fp
 8041aae:	4631      	mov	r1, r6
 8041ab0:	4628      	mov	r0, r5
 8041ab2:	47b8      	blx	r7
 8041ab4:	3001      	adds	r0, #1
 8041ab6:	f43f af49 	beq.w	804194c <_printf_float+0x9c>
 8041aba:	f04f 0800 	mov.w	r8, #0
 8041abe:	f104 091a 	add.w	r9, r4, #26
 8041ac2:	9b08      	ldr	r3, [sp, #32]
 8041ac4:	3b01      	subs	r3, #1
 8041ac6:	4543      	cmp	r3, r8
 8041ac8:	dc09      	bgt.n	8041ade <_printf_float+0x22e>
 8041aca:	6823      	ldr	r3, [r4, #0]
 8041acc:	079b      	lsls	r3, r3, #30
 8041ace:	f100 8108 	bmi.w	8041ce2 <_printf_float+0x432>
 8041ad2:	68e0      	ldr	r0, [r4, #12]
 8041ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8041ad6:	4298      	cmp	r0, r3
 8041ad8:	bfb8      	it	lt
 8041ada:	4618      	movlt	r0, r3
 8041adc:	e738      	b.n	8041950 <_printf_float+0xa0>
 8041ade:	2301      	movs	r3, #1
 8041ae0:	464a      	mov	r2, r9
 8041ae2:	4631      	mov	r1, r6
 8041ae4:	4628      	mov	r0, r5
 8041ae6:	47b8      	blx	r7
 8041ae8:	3001      	adds	r0, #1
 8041aea:	f43f af2f 	beq.w	804194c <_printf_float+0x9c>
 8041aee:	f108 0801 	add.w	r8, r8, #1
 8041af2:	e7e6      	b.n	8041ac2 <_printf_float+0x212>
 8041af4:	9b07      	ldr	r3, [sp, #28]
 8041af6:	2b00      	cmp	r3, #0
 8041af8:	dc3c      	bgt.n	8041b74 <_printf_float+0x2c4>
 8041afa:	4a1d      	ldr	r2, [pc, #116]	; (8041b70 <_printf_float+0x2c0>)
 8041afc:	2301      	movs	r3, #1
 8041afe:	4631      	mov	r1, r6
 8041b00:	4628      	mov	r0, r5
 8041b02:	47b8      	blx	r7
 8041b04:	3001      	adds	r0, #1
 8041b06:	f43f af21 	beq.w	804194c <_printf_float+0x9c>
 8041b0a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8041b0e:	4313      	orrs	r3, r2
 8041b10:	d102      	bne.n	8041b18 <_printf_float+0x268>
 8041b12:	6823      	ldr	r3, [r4, #0]
 8041b14:	07d9      	lsls	r1, r3, #31
 8041b16:	d5d8      	bpl.n	8041aca <_printf_float+0x21a>
 8041b18:	4653      	mov	r3, sl
 8041b1a:	465a      	mov	r2, fp
 8041b1c:	4631      	mov	r1, r6
 8041b1e:	4628      	mov	r0, r5
 8041b20:	47b8      	blx	r7
 8041b22:	3001      	adds	r0, #1
 8041b24:	f43f af12 	beq.w	804194c <_printf_float+0x9c>
 8041b28:	f04f 0900 	mov.w	r9, #0
 8041b2c:	f104 0a1a 	add.w	sl, r4, #26
 8041b30:	9b07      	ldr	r3, [sp, #28]
 8041b32:	425b      	negs	r3, r3
 8041b34:	454b      	cmp	r3, r9
 8041b36:	dc01      	bgt.n	8041b3c <_printf_float+0x28c>
 8041b38:	9b08      	ldr	r3, [sp, #32]
 8041b3a:	e795      	b.n	8041a68 <_printf_float+0x1b8>
 8041b3c:	2301      	movs	r3, #1
 8041b3e:	4652      	mov	r2, sl
 8041b40:	4631      	mov	r1, r6
 8041b42:	4628      	mov	r0, r5
 8041b44:	47b8      	blx	r7
 8041b46:	3001      	adds	r0, #1
 8041b48:	f43f af00 	beq.w	804194c <_printf_float+0x9c>
 8041b4c:	f109 0901 	add.w	r9, r9, #1
 8041b50:	e7ee      	b.n	8041b30 <_printf_float+0x280>
 8041b52:	bf00      	nop
 8041b54:	f3af 8000 	nop.w
 8041b58:	ffffffff 	.word	0xffffffff
 8041b5c:	7fefffff 	.word	0x7fefffff
 8041b60:	08063465 	.word	0x08063465
 8041b64:	0805fb7f 	.word	0x0805fb7f
 8041b68:	0806346d 	.word	0x0806346d
 8041b6c:	08063469 	.word	0x08063469
 8041b70:	08062fb4 	.word	0x08062fb4
 8041b74:	9a08      	ldr	r2, [sp, #32]
 8041b76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8041b78:	429a      	cmp	r2, r3
 8041b7a:	bfa8      	it	ge
 8041b7c:	461a      	movge	r2, r3
 8041b7e:	2a00      	cmp	r2, #0
 8041b80:	4691      	mov	r9, r2
 8041b82:	dc38      	bgt.n	8041bf6 <_printf_float+0x346>
 8041b84:	2300      	movs	r3, #0
 8041b86:	9305      	str	r3, [sp, #20]
 8041b88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8041b8c:	f104 021a 	add.w	r2, r4, #26
 8041b90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8041b92:	9905      	ldr	r1, [sp, #20]
 8041b94:	9304      	str	r3, [sp, #16]
 8041b96:	eba3 0309 	sub.w	r3, r3, r9
 8041b9a:	428b      	cmp	r3, r1
 8041b9c:	dc33      	bgt.n	8041c06 <_printf_float+0x356>
 8041b9e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8041ba2:	429a      	cmp	r2, r3
 8041ba4:	db3c      	blt.n	8041c20 <_printf_float+0x370>
 8041ba6:	6823      	ldr	r3, [r4, #0]
 8041ba8:	07da      	lsls	r2, r3, #31
 8041baa:	d439      	bmi.n	8041c20 <_printf_float+0x370>
 8041bac:	9b08      	ldr	r3, [sp, #32]
 8041bae:	9a04      	ldr	r2, [sp, #16]
 8041bb0:	9907      	ldr	r1, [sp, #28]
 8041bb2:	1a9a      	subs	r2, r3, r2
 8041bb4:	eba3 0901 	sub.w	r9, r3, r1
 8041bb8:	4591      	cmp	r9, r2
 8041bba:	bfa8      	it	ge
 8041bbc:	4691      	movge	r9, r2
 8041bbe:	f1b9 0f00 	cmp.w	r9, #0
 8041bc2:	dc35      	bgt.n	8041c30 <_printf_float+0x380>
 8041bc4:	f04f 0800 	mov.w	r8, #0
 8041bc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8041bcc:	f104 0a1a 	add.w	sl, r4, #26
 8041bd0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8041bd4:	1a9b      	subs	r3, r3, r2
 8041bd6:	eba3 0309 	sub.w	r3, r3, r9
 8041bda:	4543      	cmp	r3, r8
 8041bdc:	f77f af75 	ble.w	8041aca <_printf_float+0x21a>
 8041be0:	2301      	movs	r3, #1
 8041be2:	4652      	mov	r2, sl
 8041be4:	4631      	mov	r1, r6
 8041be6:	4628      	mov	r0, r5
 8041be8:	47b8      	blx	r7
 8041bea:	3001      	adds	r0, #1
 8041bec:	f43f aeae 	beq.w	804194c <_printf_float+0x9c>
 8041bf0:	f108 0801 	add.w	r8, r8, #1
 8041bf4:	e7ec      	b.n	8041bd0 <_printf_float+0x320>
 8041bf6:	4613      	mov	r3, r2
 8041bf8:	4631      	mov	r1, r6
 8041bfa:	4642      	mov	r2, r8
 8041bfc:	4628      	mov	r0, r5
 8041bfe:	47b8      	blx	r7
 8041c00:	3001      	adds	r0, #1
 8041c02:	d1bf      	bne.n	8041b84 <_printf_float+0x2d4>
 8041c04:	e6a2      	b.n	804194c <_printf_float+0x9c>
 8041c06:	2301      	movs	r3, #1
 8041c08:	4631      	mov	r1, r6
 8041c0a:	4628      	mov	r0, r5
 8041c0c:	9204      	str	r2, [sp, #16]
 8041c0e:	47b8      	blx	r7
 8041c10:	3001      	adds	r0, #1
 8041c12:	f43f ae9b 	beq.w	804194c <_printf_float+0x9c>
 8041c16:	9b05      	ldr	r3, [sp, #20]
 8041c18:	9a04      	ldr	r2, [sp, #16]
 8041c1a:	3301      	adds	r3, #1
 8041c1c:	9305      	str	r3, [sp, #20]
 8041c1e:	e7b7      	b.n	8041b90 <_printf_float+0x2e0>
 8041c20:	4653      	mov	r3, sl
 8041c22:	465a      	mov	r2, fp
 8041c24:	4631      	mov	r1, r6
 8041c26:	4628      	mov	r0, r5
 8041c28:	47b8      	blx	r7
 8041c2a:	3001      	adds	r0, #1
 8041c2c:	d1be      	bne.n	8041bac <_printf_float+0x2fc>
 8041c2e:	e68d      	b.n	804194c <_printf_float+0x9c>
 8041c30:	9a04      	ldr	r2, [sp, #16]
 8041c32:	464b      	mov	r3, r9
 8041c34:	4442      	add	r2, r8
 8041c36:	4631      	mov	r1, r6
 8041c38:	4628      	mov	r0, r5
 8041c3a:	47b8      	blx	r7
 8041c3c:	3001      	adds	r0, #1
 8041c3e:	d1c1      	bne.n	8041bc4 <_printf_float+0x314>
 8041c40:	e684      	b.n	804194c <_printf_float+0x9c>
 8041c42:	9a08      	ldr	r2, [sp, #32]
 8041c44:	2a01      	cmp	r2, #1
 8041c46:	dc01      	bgt.n	8041c4c <_printf_float+0x39c>
 8041c48:	07db      	lsls	r3, r3, #31
 8041c4a:	d537      	bpl.n	8041cbc <_printf_float+0x40c>
 8041c4c:	2301      	movs	r3, #1
 8041c4e:	4642      	mov	r2, r8
 8041c50:	4631      	mov	r1, r6
 8041c52:	4628      	mov	r0, r5
 8041c54:	47b8      	blx	r7
 8041c56:	3001      	adds	r0, #1
 8041c58:	f43f ae78 	beq.w	804194c <_printf_float+0x9c>
 8041c5c:	4653      	mov	r3, sl
 8041c5e:	465a      	mov	r2, fp
 8041c60:	4631      	mov	r1, r6
 8041c62:	4628      	mov	r0, r5
 8041c64:	47b8      	blx	r7
 8041c66:	3001      	adds	r0, #1
 8041c68:	f43f ae70 	beq.w	804194c <_printf_float+0x9c>
 8041c6c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8041c70:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8041c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8041c78:	d01b      	beq.n	8041cb2 <_printf_float+0x402>
 8041c7a:	9b08      	ldr	r3, [sp, #32]
 8041c7c:	f108 0201 	add.w	r2, r8, #1
 8041c80:	3b01      	subs	r3, #1
 8041c82:	4631      	mov	r1, r6
 8041c84:	4628      	mov	r0, r5
 8041c86:	47b8      	blx	r7
 8041c88:	3001      	adds	r0, #1
 8041c8a:	d10e      	bne.n	8041caa <_printf_float+0x3fa>
 8041c8c:	e65e      	b.n	804194c <_printf_float+0x9c>
 8041c8e:	2301      	movs	r3, #1
 8041c90:	464a      	mov	r2, r9
 8041c92:	4631      	mov	r1, r6
 8041c94:	4628      	mov	r0, r5
 8041c96:	47b8      	blx	r7
 8041c98:	3001      	adds	r0, #1
 8041c9a:	f43f ae57 	beq.w	804194c <_printf_float+0x9c>
 8041c9e:	f108 0801 	add.w	r8, r8, #1
 8041ca2:	9b08      	ldr	r3, [sp, #32]
 8041ca4:	3b01      	subs	r3, #1
 8041ca6:	4543      	cmp	r3, r8
 8041ca8:	dcf1      	bgt.n	8041c8e <_printf_float+0x3de>
 8041caa:	9b04      	ldr	r3, [sp, #16]
 8041cac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8041cb0:	e6db      	b.n	8041a6a <_printf_float+0x1ba>
 8041cb2:	f04f 0800 	mov.w	r8, #0
 8041cb6:	f104 091a 	add.w	r9, r4, #26
 8041cba:	e7f2      	b.n	8041ca2 <_printf_float+0x3f2>
 8041cbc:	2301      	movs	r3, #1
 8041cbe:	4642      	mov	r2, r8
 8041cc0:	e7df      	b.n	8041c82 <_printf_float+0x3d2>
 8041cc2:	2301      	movs	r3, #1
 8041cc4:	464a      	mov	r2, r9
 8041cc6:	4631      	mov	r1, r6
 8041cc8:	4628      	mov	r0, r5
 8041cca:	47b8      	blx	r7
 8041ccc:	3001      	adds	r0, #1
 8041cce:	f43f ae3d 	beq.w	804194c <_printf_float+0x9c>
 8041cd2:	f108 0801 	add.w	r8, r8, #1
 8041cd6:	68e3      	ldr	r3, [r4, #12]
 8041cd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8041cda:	1a5b      	subs	r3, r3, r1
 8041cdc:	4543      	cmp	r3, r8
 8041cde:	dcf0      	bgt.n	8041cc2 <_printf_float+0x412>
 8041ce0:	e6f7      	b.n	8041ad2 <_printf_float+0x222>
 8041ce2:	f04f 0800 	mov.w	r8, #0
 8041ce6:	f104 0919 	add.w	r9, r4, #25
 8041cea:	e7f4      	b.n	8041cd6 <_printf_float+0x426>
 8041cec:	0000      	movs	r0, r0
	...

08041cf0 <_dtoa_r>:
 8041cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8041cf4:	ed2d 8b02 	vpush	{d8}
 8041cf8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8041cfa:	b091      	sub	sp, #68	; 0x44
 8041cfc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8041d00:	ec59 8b10 	vmov	r8, r9, d0
 8041d04:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8041d06:	9106      	str	r1, [sp, #24]
 8041d08:	4606      	mov	r6, r0
 8041d0a:	9208      	str	r2, [sp, #32]
 8041d0c:	930c      	str	r3, [sp, #48]	; 0x30
 8041d0e:	b975      	cbnz	r5, 8041d2e <_dtoa_r+0x3e>
 8041d10:	2010      	movs	r0, #16
 8041d12:	f010 fe23 	bl	805295c <malloc>
 8041d16:	4602      	mov	r2, r0
 8041d18:	6270      	str	r0, [r6, #36]	; 0x24
 8041d1a:	b920      	cbnz	r0, 8041d26 <_dtoa_r+0x36>
 8041d1c:	4baa      	ldr	r3, [pc, #680]	; (8041fc8 <_dtoa_r+0x2d8>)
 8041d1e:	21ea      	movs	r1, #234	; 0xea
 8041d20:	48aa      	ldr	r0, [pc, #680]	; (8041fcc <_dtoa_r+0x2dc>)
 8041d22:	f011 fd8d 	bl	8053840 <__assert_func>
 8041d26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8041d2a:	6005      	str	r5, [r0, #0]
 8041d2c:	60c5      	str	r5, [r0, #12]
 8041d2e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8041d30:	6819      	ldr	r1, [r3, #0]
 8041d32:	b151      	cbz	r1, 8041d4a <_dtoa_r+0x5a>
 8041d34:	685a      	ldr	r2, [r3, #4]
 8041d36:	604a      	str	r2, [r1, #4]
 8041d38:	2301      	movs	r3, #1
 8041d3a:	4093      	lsls	r3, r2
 8041d3c:	608b      	str	r3, [r1, #8]
 8041d3e:	4630      	mov	r0, r6
 8041d40:	f011 f9a6 	bl	8053090 <_Bfree>
 8041d44:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8041d46:	2200      	movs	r2, #0
 8041d48:	601a      	str	r2, [r3, #0]
 8041d4a:	f1b9 0300 	subs.w	r3, r9, #0
 8041d4e:	bfbb      	ittet	lt
 8041d50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8041d54:	9303      	strlt	r3, [sp, #12]
 8041d56:	2300      	movge	r3, #0
 8041d58:	2201      	movlt	r2, #1
 8041d5a:	bfac      	ite	ge
 8041d5c:	6023      	strge	r3, [r4, #0]
 8041d5e:	6022      	strlt	r2, [r4, #0]
 8041d60:	4b9b      	ldr	r3, [pc, #620]	; (8041fd0 <_dtoa_r+0x2e0>)
 8041d62:	9c03      	ldr	r4, [sp, #12]
 8041d64:	43a3      	bics	r3, r4
 8041d66:	d11c      	bne.n	8041da2 <_dtoa_r+0xb2>
 8041d68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8041d6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8041d6e:	6013      	str	r3, [r2, #0]
 8041d70:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8041d74:	ea53 0308 	orrs.w	r3, r3, r8
 8041d78:	f000 84fe 	beq.w	8042778 <_dtoa_r+0xa88>
 8041d7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8041d7e:	b963      	cbnz	r3, 8041d9a <_dtoa_r+0xaa>
 8041d80:	4b94      	ldr	r3, [pc, #592]	; (8041fd4 <_dtoa_r+0x2e4>)
 8041d82:	e01f      	b.n	8041dc4 <_dtoa_r+0xd4>
 8041d84:	4b94      	ldr	r3, [pc, #592]	; (8041fd8 <_dtoa_r+0x2e8>)
 8041d86:	9301      	str	r3, [sp, #4]
 8041d88:	3308      	adds	r3, #8
 8041d8a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8041d8c:	6013      	str	r3, [r2, #0]
 8041d8e:	9801      	ldr	r0, [sp, #4]
 8041d90:	b011      	add	sp, #68	; 0x44
 8041d92:	ecbd 8b02 	vpop	{d8}
 8041d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8041d9a:	4b8e      	ldr	r3, [pc, #568]	; (8041fd4 <_dtoa_r+0x2e4>)
 8041d9c:	9301      	str	r3, [sp, #4]
 8041d9e:	3303      	adds	r3, #3
 8041da0:	e7f3      	b.n	8041d8a <_dtoa_r+0x9a>
 8041da2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8041da6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8041daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8041dae:	d10b      	bne.n	8041dc8 <_dtoa_r+0xd8>
 8041db0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8041db2:	2301      	movs	r3, #1
 8041db4:	6013      	str	r3, [r2, #0]
 8041db6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8041db8:	2b00      	cmp	r3, #0
 8041dba:	f000 84da 	beq.w	8042772 <_dtoa_r+0xa82>
 8041dbe:	4887      	ldr	r0, [pc, #540]	; (8041fdc <_dtoa_r+0x2ec>)
 8041dc0:	6018      	str	r0, [r3, #0]
 8041dc2:	1e43      	subs	r3, r0, #1
 8041dc4:	9301      	str	r3, [sp, #4]
 8041dc6:	e7e2      	b.n	8041d8e <_dtoa_r+0x9e>
 8041dc8:	a90f      	add	r1, sp, #60	; 0x3c
 8041dca:	aa0e      	add	r2, sp, #56	; 0x38
 8041dcc:	4630      	mov	r0, r6
 8041dce:	eeb0 0b48 	vmov.f64	d0, d8
 8041dd2:	f011 fbd9 	bl	8053588 <__d2b>
 8041dd6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8041dda:	4605      	mov	r5, r0
 8041ddc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8041dde:	2900      	cmp	r1, #0
 8041de0:	d046      	beq.n	8041e70 <_dtoa_r+0x180>
 8041de2:	ee18 4a90 	vmov	r4, s17
 8041de6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8041dea:	ec53 2b18 	vmov	r2, r3, d8
 8041dee:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8041df2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8041df6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8041dfa:	2400      	movs	r4, #0
 8041dfc:	ec43 2b16 	vmov	d6, r2, r3
 8041e00:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8041e04:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8041fb0 <_dtoa_r+0x2c0>
 8041e08:	ee36 7b47 	vsub.f64	d7, d6, d7
 8041e0c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8041fb8 <_dtoa_r+0x2c8>
 8041e10:	eea7 6b05 	vfma.f64	d6, d7, d5
 8041e14:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8041fc0 <_dtoa_r+0x2d0>
 8041e18:	ee07 1a90 	vmov	s15, r1
 8041e1c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8041e20:	eeb0 7b46 	vmov.f64	d7, d6
 8041e24:	eea4 7b05 	vfma.f64	d7, d4, d5
 8041e28:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8041e2c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8041e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8041e34:	ee16 ba90 	vmov	fp, s13
 8041e38:	940a      	str	r4, [sp, #40]	; 0x28
 8041e3a:	d508      	bpl.n	8041e4e <_dtoa_r+0x15e>
 8041e3c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8041e40:	eeb4 6b47 	vcmp.f64	d6, d7
 8041e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8041e48:	bf18      	it	ne
 8041e4a:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8041e4e:	f1bb 0f16 	cmp.w	fp, #22
 8041e52:	d82f      	bhi.n	8041eb4 <_dtoa_r+0x1c4>
 8041e54:	4b62      	ldr	r3, [pc, #392]	; (8041fe0 <_dtoa_r+0x2f0>)
 8041e56:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8041e5a:	ed93 7b00 	vldr	d7, [r3]
 8041e5e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8041e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8041e66:	d501      	bpl.n	8041e6c <_dtoa_r+0x17c>
 8041e68:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8041e6c:	2300      	movs	r3, #0
 8041e6e:	e022      	b.n	8041eb6 <_dtoa_r+0x1c6>
 8041e70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8041e72:	4401      	add	r1, r0
 8041e74:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8041e78:	2b20      	cmp	r3, #32
 8041e7a:	bfc1      	itttt	gt
 8041e7c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8041e80:	fa04 f303 	lslgt.w	r3, r4, r3
 8041e84:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8041e88:	fa28 f804 	lsrgt.w	r8, r8, r4
 8041e8c:	bfd6      	itet	le
 8041e8e:	f1c3 0320 	rsble	r3, r3, #32
 8041e92:	ea43 0808 	orrgt.w	r8, r3, r8
 8041e96:	fa08 f803 	lslle.w	r8, r8, r3
 8041e9a:	ee07 8a90 	vmov	s15, r8
 8041e9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8041ea2:	3901      	subs	r1, #1
 8041ea4:	ee17 4a90 	vmov	r4, s15
 8041ea8:	ec53 2b17 	vmov	r2, r3, d7
 8041eac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8041eb0:	2401      	movs	r4, #1
 8041eb2:	e7a3      	b.n	8041dfc <_dtoa_r+0x10c>
 8041eb4:	2301      	movs	r3, #1
 8041eb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8041eb8:	1a43      	subs	r3, r0, r1
 8041eba:	1e5a      	subs	r2, r3, #1
 8041ebc:	bf45      	ittet	mi
 8041ebe:	f1c3 0301 	rsbmi	r3, r3, #1
 8041ec2:	9304      	strmi	r3, [sp, #16]
 8041ec4:	2300      	movpl	r3, #0
 8041ec6:	2300      	movmi	r3, #0
 8041ec8:	9205      	str	r2, [sp, #20]
 8041eca:	bf54      	ite	pl
 8041ecc:	9304      	strpl	r3, [sp, #16]
 8041ece:	9305      	strmi	r3, [sp, #20]
 8041ed0:	f1bb 0f00 	cmp.w	fp, #0
 8041ed4:	db18      	blt.n	8041f08 <_dtoa_r+0x218>
 8041ed6:	9b05      	ldr	r3, [sp, #20]
 8041ed8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8041edc:	445b      	add	r3, fp
 8041ede:	9305      	str	r3, [sp, #20]
 8041ee0:	2300      	movs	r3, #0
 8041ee2:	9a06      	ldr	r2, [sp, #24]
 8041ee4:	2a09      	cmp	r2, #9
 8041ee6:	d849      	bhi.n	8041f7c <_dtoa_r+0x28c>
 8041ee8:	2a05      	cmp	r2, #5
 8041eea:	bfc4      	itt	gt
 8041eec:	3a04      	subgt	r2, #4
 8041eee:	9206      	strgt	r2, [sp, #24]
 8041ef0:	9a06      	ldr	r2, [sp, #24]
 8041ef2:	f1a2 0202 	sub.w	r2, r2, #2
 8041ef6:	bfcc      	ite	gt
 8041ef8:	2400      	movgt	r4, #0
 8041efa:	2401      	movle	r4, #1
 8041efc:	2a03      	cmp	r2, #3
 8041efe:	d848      	bhi.n	8041f92 <_dtoa_r+0x2a2>
 8041f00:	e8df f002 	tbb	[pc, r2]
 8041f04:	3a2c2e0b 	.word	0x3a2c2e0b
 8041f08:	9b04      	ldr	r3, [sp, #16]
 8041f0a:	2200      	movs	r2, #0
 8041f0c:	eba3 030b 	sub.w	r3, r3, fp
 8041f10:	9304      	str	r3, [sp, #16]
 8041f12:	9209      	str	r2, [sp, #36]	; 0x24
 8041f14:	f1cb 0300 	rsb	r3, fp, #0
 8041f18:	e7e3      	b.n	8041ee2 <_dtoa_r+0x1f2>
 8041f1a:	2200      	movs	r2, #0
 8041f1c:	9207      	str	r2, [sp, #28]
 8041f1e:	9a08      	ldr	r2, [sp, #32]
 8041f20:	2a00      	cmp	r2, #0
 8041f22:	dc39      	bgt.n	8041f98 <_dtoa_r+0x2a8>
 8041f24:	f04f 0a01 	mov.w	sl, #1
 8041f28:	46d1      	mov	r9, sl
 8041f2a:	4652      	mov	r2, sl
 8041f2c:	f8cd a020 	str.w	sl, [sp, #32]
 8041f30:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8041f32:	2100      	movs	r1, #0
 8041f34:	6079      	str	r1, [r7, #4]
 8041f36:	2004      	movs	r0, #4
 8041f38:	f100 0c14 	add.w	ip, r0, #20
 8041f3c:	4594      	cmp	ip, r2
 8041f3e:	6879      	ldr	r1, [r7, #4]
 8041f40:	d92f      	bls.n	8041fa2 <_dtoa_r+0x2b2>
 8041f42:	4630      	mov	r0, r6
 8041f44:	930d      	str	r3, [sp, #52]	; 0x34
 8041f46:	f011 f863 	bl	8053010 <_Balloc>
 8041f4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8041f4c:	9001      	str	r0, [sp, #4]
 8041f4e:	4602      	mov	r2, r0
 8041f50:	2800      	cmp	r0, #0
 8041f52:	d149      	bne.n	8041fe8 <_dtoa_r+0x2f8>
 8041f54:	4b23      	ldr	r3, [pc, #140]	; (8041fe4 <_dtoa_r+0x2f4>)
 8041f56:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8041f5a:	e6e1      	b.n	8041d20 <_dtoa_r+0x30>
 8041f5c:	2201      	movs	r2, #1
 8041f5e:	e7dd      	b.n	8041f1c <_dtoa_r+0x22c>
 8041f60:	2200      	movs	r2, #0
 8041f62:	9207      	str	r2, [sp, #28]
 8041f64:	9a08      	ldr	r2, [sp, #32]
 8041f66:	eb0b 0a02 	add.w	sl, fp, r2
 8041f6a:	f10a 0901 	add.w	r9, sl, #1
 8041f6e:	464a      	mov	r2, r9
 8041f70:	2a01      	cmp	r2, #1
 8041f72:	bfb8      	it	lt
 8041f74:	2201      	movlt	r2, #1
 8041f76:	e7db      	b.n	8041f30 <_dtoa_r+0x240>
 8041f78:	2201      	movs	r2, #1
 8041f7a:	e7f2      	b.n	8041f62 <_dtoa_r+0x272>
 8041f7c:	2401      	movs	r4, #1
 8041f7e:	2200      	movs	r2, #0
 8041f80:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8041f84:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8041f88:	2100      	movs	r1, #0
 8041f8a:	46d1      	mov	r9, sl
 8041f8c:	2212      	movs	r2, #18
 8041f8e:	9108      	str	r1, [sp, #32]
 8041f90:	e7ce      	b.n	8041f30 <_dtoa_r+0x240>
 8041f92:	2201      	movs	r2, #1
 8041f94:	9207      	str	r2, [sp, #28]
 8041f96:	e7f5      	b.n	8041f84 <_dtoa_r+0x294>
 8041f98:	f8dd a020 	ldr.w	sl, [sp, #32]
 8041f9c:	46d1      	mov	r9, sl
 8041f9e:	4652      	mov	r2, sl
 8041fa0:	e7c6      	b.n	8041f30 <_dtoa_r+0x240>
 8041fa2:	3101      	adds	r1, #1
 8041fa4:	6079      	str	r1, [r7, #4]
 8041fa6:	0040      	lsls	r0, r0, #1
 8041fa8:	e7c6      	b.n	8041f38 <_dtoa_r+0x248>
 8041faa:	bf00      	nop
 8041fac:	f3af 8000 	nop.w
 8041fb0:	636f4361 	.word	0x636f4361
 8041fb4:	3fd287a7 	.word	0x3fd287a7
 8041fb8:	8b60c8b3 	.word	0x8b60c8b3
 8041fbc:	3fc68a28 	.word	0x3fc68a28
 8041fc0:	509f79fb 	.word	0x509f79fb
 8041fc4:	3fd34413 	.word	0x3fd34413
 8041fc8:	080634a0 	.word	0x080634a0
 8041fcc:	080634b7 	.word	0x080634b7
 8041fd0:	7ff00000 	.word	0x7ff00000
 8041fd4:	0806349c 	.word	0x0806349c
 8041fd8:	08063493 	.word	0x08063493
 8041fdc:	08062fb5 	.word	0x08062fb5
 8041fe0:	0805c480 	.word	0x0805c480
 8041fe4:	08063534 	.word	0x08063534
 8041fe8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8041fea:	9901      	ldr	r1, [sp, #4]
 8041fec:	6011      	str	r1, [r2, #0]
 8041fee:	f1b9 0f0e 	cmp.w	r9, #14
 8041ff2:	d86c      	bhi.n	80420ce <_dtoa_r+0x3de>
 8041ff4:	2c00      	cmp	r4, #0
 8041ff6:	d06a      	beq.n	80420ce <_dtoa_r+0x3de>
 8041ff8:	f1bb 0f00 	cmp.w	fp, #0
 8041ffc:	f340 80a0 	ble.w	8042140 <_dtoa_r+0x450>
 8042000:	49c1      	ldr	r1, [pc, #772]	; (8042308 <_dtoa_r+0x618>)
 8042002:	f00b 020f 	and.w	r2, fp, #15
 8042006:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 804200a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 804200e:	ed92 7b00 	vldr	d7, [r2]
 8042012:	ea4f 112b 	mov.w	r1, fp, asr #4
 8042016:	f000 8087 	beq.w	8042128 <_dtoa_r+0x438>
 804201a:	4abc      	ldr	r2, [pc, #752]	; (804230c <_dtoa_r+0x61c>)
 804201c:	ed92 6b08 	vldr	d6, [r2, #32]
 8042020:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8042024:	ed8d 6b02 	vstr	d6, [sp, #8]
 8042028:	f001 010f 	and.w	r1, r1, #15
 804202c:	2203      	movs	r2, #3
 804202e:	48b7      	ldr	r0, [pc, #732]	; (804230c <_dtoa_r+0x61c>)
 8042030:	2900      	cmp	r1, #0
 8042032:	d17b      	bne.n	804212c <_dtoa_r+0x43c>
 8042034:	ed9d 6b02 	vldr	d6, [sp, #8]
 8042038:	ee86 7b07 	vdiv.f64	d7, d6, d7
 804203c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8042040:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8042042:	2900      	cmp	r1, #0
 8042044:	f000 80a2 	beq.w	804218c <_dtoa_r+0x49c>
 8042048:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 804204c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8042050:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8042054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8042058:	f140 8098 	bpl.w	804218c <_dtoa_r+0x49c>
 804205c:	f1b9 0f00 	cmp.w	r9, #0
 8042060:	f000 8094 	beq.w	804218c <_dtoa_r+0x49c>
 8042064:	f1ba 0f00 	cmp.w	sl, #0
 8042068:	dd2f      	ble.n	80420ca <_dtoa_r+0x3da>
 804206a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 804206e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8042072:	ed8d 7b02 	vstr	d7, [sp, #8]
 8042076:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 804207a:	3201      	adds	r2, #1
 804207c:	4650      	mov	r0, sl
 804207e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8042082:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8042086:	ee07 2a90 	vmov	s15, r2
 804208a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 804208e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8042092:	ee15 4a90 	vmov	r4, s11
 8042096:	ec52 1b15 	vmov	r1, r2, d5
 804209a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 804209e:	2800      	cmp	r0, #0
 80420a0:	d177      	bne.n	8042192 <_dtoa_r+0x4a2>
 80420a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80420a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80420aa:	ec42 1b17 	vmov	d7, r1, r2
 80420ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80420b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80420b6:	f300 8264 	bgt.w	8042582 <_dtoa_r+0x892>
 80420ba:	eeb1 7b47 	vneg.f64	d7, d7
 80420be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80420c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80420c6:	f100 8259 	bmi.w	804257c <_dtoa_r+0x88c>
 80420ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80420ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80420d0:	2a00      	cmp	r2, #0
 80420d2:	f2c0 811d 	blt.w	8042310 <_dtoa_r+0x620>
 80420d6:	f1bb 0f0e 	cmp.w	fp, #14
 80420da:	f300 8119 	bgt.w	8042310 <_dtoa_r+0x620>
 80420de:	4b8a      	ldr	r3, [pc, #552]	; (8042308 <_dtoa_r+0x618>)
 80420e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80420e4:	ed93 6b00 	vldr	d6, [r3]
 80420e8:	9b08      	ldr	r3, [sp, #32]
 80420ea:	2b00      	cmp	r3, #0
 80420ec:	f280 80b7 	bge.w	804225e <_dtoa_r+0x56e>
 80420f0:	f1b9 0f00 	cmp.w	r9, #0
 80420f4:	f300 80b3 	bgt.w	804225e <_dtoa_r+0x56e>
 80420f8:	f040 8240 	bne.w	804257c <_dtoa_r+0x88c>
 80420fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8042100:	ee26 6b07 	vmul.f64	d6, d6, d7
 8042104:	ed9d 7b02 	vldr	d7, [sp, #8]
 8042108:	eeb4 6bc7 	vcmpe.f64	d6, d7
 804210c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8042110:	464c      	mov	r4, r9
 8042112:	464f      	mov	r7, r9
 8042114:	f280 8216 	bge.w	8042544 <_dtoa_r+0x854>
 8042118:	f8dd 8004 	ldr.w	r8, [sp, #4]
 804211c:	2331      	movs	r3, #49	; 0x31
 804211e:	f808 3b01 	strb.w	r3, [r8], #1
 8042122:	f10b 0b01 	add.w	fp, fp, #1
 8042126:	e212      	b.n	804254e <_dtoa_r+0x85e>
 8042128:	2202      	movs	r2, #2
 804212a:	e780      	b.n	804202e <_dtoa_r+0x33e>
 804212c:	07cc      	lsls	r4, r1, #31
 804212e:	d504      	bpl.n	804213a <_dtoa_r+0x44a>
 8042130:	ed90 6b00 	vldr	d6, [r0]
 8042134:	3201      	adds	r2, #1
 8042136:	ee27 7b06 	vmul.f64	d7, d7, d6
 804213a:	1049      	asrs	r1, r1, #1
 804213c:	3008      	adds	r0, #8
 804213e:	e777      	b.n	8042030 <_dtoa_r+0x340>
 8042140:	d022      	beq.n	8042188 <_dtoa_r+0x498>
 8042142:	f1cb 0100 	rsb	r1, fp, #0
 8042146:	4a70      	ldr	r2, [pc, #448]	; (8042308 <_dtoa_r+0x618>)
 8042148:	f001 000f 	and.w	r0, r1, #15
 804214c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8042150:	ed92 7b00 	vldr	d7, [r2]
 8042154:	ee28 7b07 	vmul.f64	d7, d8, d7
 8042158:	ed8d 7b02 	vstr	d7, [sp, #8]
 804215c:	486b      	ldr	r0, [pc, #428]	; (804230c <_dtoa_r+0x61c>)
 804215e:	1109      	asrs	r1, r1, #4
 8042160:	2400      	movs	r4, #0
 8042162:	2202      	movs	r2, #2
 8042164:	b929      	cbnz	r1, 8042172 <_dtoa_r+0x482>
 8042166:	2c00      	cmp	r4, #0
 8042168:	f43f af6a 	beq.w	8042040 <_dtoa_r+0x350>
 804216c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8042170:	e766      	b.n	8042040 <_dtoa_r+0x350>
 8042172:	07cf      	lsls	r7, r1, #31
 8042174:	d505      	bpl.n	8042182 <_dtoa_r+0x492>
 8042176:	ed90 6b00 	vldr	d6, [r0]
 804217a:	3201      	adds	r2, #1
 804217c:	2401      	movs	r4, #1
 804217e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8042182:	1049      	asrs	r1, r1, #1
 8042184:	3008      	adds	r0, #8
 8042186:	e7ed      	b.n	8042164 <_dtoa_r+0x474>
 8042188:	2202      	movs	r2, #2
 804218a:	e759      	b.n	8042040 <_dtoa_r+0x350>
 804218c:	465f      	mov	r7, fp
 804218e:	4648      	mov	r0, r9
 8042190:	e775      	b.n	804207e <_dtoa_r+0x38e>
 8042192:	ec42 1b17 	vmov	d7, r1, r2
 8042196:	4a5c      	ldr	r2, [pc, #368]	; (8042308 <_dtoa_r+0x618>)
 8042198:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 804219c:	ed12 4b02 	vldr	d4, [r2, #-8]
 80421a0:	9a01      	ldr	r2, [sp, #4]
 80421a2:	1814      	adds	r4, r2, r0
 80421a4:	9a07      	ldr	r2, [sp, #28]
 80421a6:	b352      	cbz	r2, 80421fe <_dtoa_r+0x50e>
 80421a8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80421ac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80421b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80421b4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80421b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80421bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80421c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80421c4:	ee14 2a90 	vmov	r2, s9
 80421c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80421cc:	3230      	adds	r2, #48	; 0x30
 80421ce:	ee36 6b45 	vsub.f64	d6, d6, d5
 80421d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80421d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80421da:	f808 2b01 	strb.w	r2, [r8], #1
 80421de:	d439      	bmi.n	8042254 <_dtoa_r+0x564>
 80421e0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80421e4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80421e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80421ec:	d472      	bmi.n	80422d4 <_dtoa_r+0x5e4>
 80421ee:	45a0      	cmp	r8, r4
 80421f0:	f43f af6b 	beq.w	80420ca <_dtoa_r+0x3da>
 80421f4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80421f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80421fc:	e7e0      	b.n	80421c0 <_dtoa_r+0x4d0>
 80421fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8042202:	ee27 7b04 	vmul.f64	d7, d7, d4
 8042206:	4621      	mov	r1, r4
 8042208:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 804220c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8042210:	ee14 2a90 	vmov	r2, s9
 8042214:	3230      	adds	r2, #48	; 0x30
 8042216:	f808 2b01 	strb.w	r2, [r8], #1
 804221a:	45a0      	cmp	r8, r4
 804221c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8042220:	ee36 6b45 	vsub.f64	d6, d6, d5
 8042224:	d118      	bne.n	8042258 <_dtoa_r+0x568>
 8042226:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 804222a:	ee37 4b05 	vadd.f64	d4, d7, d5
 804222e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8042232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8042236:	dc4d      	bgt.n	80422d4 <_dtoa_r+0x5e4>
 8042238:	ee35 7b47 	vsub.f64	d7, d5, d7
 804223c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8042240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8042244:	f57f af41 	bpl.w	80420ca <_dtoa_r+0x3da>
 8042248:	4688      	mov	r8, r1
 804224a:	3901      	subs	r1, #1
 804224c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8042250:	2b30      	cmp	r3, #48	; 0x30
 8042252:	d0f9      	beq.n	8042248 <_dtoa_r+0x558>
 8042254:	46bb      	mov	fp, r7
 8042256:	e02a      	b.n	80422ae <_dtoa_r+0x5be>
 8042258:	ee26 6b03 	vmul.f64	d6, d6, d3
 804225c:	e7d6      	b.n	804220c <_dtoa_r+0x51c>
 804225e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8042262:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8042266:	f8dd 8004 	ldr.w	r8, [sp, #4]
 804226a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 804226e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8042272:	ee15 3a10 	vmov	r3, s10
 8042276:	3330      	adds	r3, #48	; 0x30
 8042278:	f808 3b01 	strb.w	r3, [r8], #1
 804227c:	9b01      	ldr	r3, [sp, #4]
 804227e:	eba8 0303 	sub.w	r3, r8, r3
 8042282:	4599      	cmp	r9, r3
 8042284:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8042288:	eea3 7b46 	vfms.f64	d7, d3, d6
 804228c:	d133      	bne.n	80422f6 <_dtoa_r+0x606>
 804228e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8042292:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8042296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804229a:	dc1a      	bgt.n	80422d2 <_dtoa_r+0x5e2>
 804229c:	eeb4 7b46 	vcmp.f64	d7, d6
 80422a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80422a4:	d103      	bne.n	80422ae <_dtoa_r+0x5be>
 80422a6:	ee15 3a10 	vmov	r3, s10
 80422aa:	07d9      	lsls	r1, r3, #31
 80422ac:	d411      	bmi.n	80422d2 <_dtoa_r+0x5e2>
 80422ae:	4629      	mov	r1, r5
 80422b0:	4630      	mov	r0, r6
 80422b2:	f010 feed 	bl	8053090 <_Bfree>
 80422b6:	2300      	movs	r3, #0
 80422b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80422ba:	f888 3000 	strb.w	r3, [r8]
 80422be:	f10b 0301 	add.w	r3, fp, #1
 80422c2:	6013      	str	r3, [r2, #0]
 80422c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80422c6:	2b00      	cmp	r3, #0
 80422c8:	f43f ad61 	beq.w	8041d8e <_dtoa_r+0x9e>
 80422cc:	f8c3 8000 	str.w	r8, [r3]
 80422d0:	e55d      	b.n	8041d8e <_dtoa_r+0x9e>
 80422d2:	465f      	mov	r7, fp
 80422d4:	4643      	mov	r3, r8
 80422d6:	4698      	mov	r8, r3
 80422d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80422dc:	2a39      	cmp	r2, #57	; 0x39
 80422de:	d106      	bne.n	80422ee <_dtoa_r+0x5fe>
 80422e0:	9a01      	ldr	r2, [sp, #4]
 80422e2:	429a      	cmp	r2, r3
 80422e4:	d1f7      	bne.n	80422d6 <_dtoa_r+0x5e6>
 80422e6:	9901      	ldr	r1, [sp, #4]
 80422e8:	2230      	movs	r2, #48	; 0x30
 80422ea:	3701      	adds	r7, #1
 80422ec:	700a      	strb	r2, [r1, #0]
 80422ee:	781a      	ldrb	r2, [r3, #0]
 80422f0:	3201      	adds	r2, #1
 80422f2:	701a      	strb	r2, [r3, #0]
 80422f4:	e7ae      	b.n	8042254 <_dtoa_r+0x564>
 80422f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80422fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80422fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8042302:	d1b2      	bne.n	804226a <_dtoa_r+0x57a>
 8042304:	e7d3      	b.n	80422ae <_dtoa_r+0x5be>
 8042306:	bf00      	nop
 8042308:	0805c480 	.word	0x0805c480
 804230c:	0805c458 	.word	0x0805c458
 8042310:	9907      	ldr	r1, [sp, #28]
 8042312:	2900      	cmp	r1, #0
 8042314:	f000 80d1 	beq.w	80424ba <_dtoa_r+0x7ca>
 8042318:	9906      	ldr	r1, [sp, #24]
 804231a:	2901      	cmp	r1, #1
 804231c:	f300 80b4 	bgt.w	8042488 <_dtoa_r+0x798>
 8042320:	990a      	ldr	r1, [sp, #40]	; 0x28
 8042322:	2900      	cmp	r1, #0
 8042324:	f000 80ac 	beq.w	8042480 <_dtoa_r+0x790>
 8042328:	f202 4233 	addw	r2, r2, #1075	; 0x433
 804232c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8042330:	461c      	mov	r4, r3
 8042332:	930a      	str	r3, [sp, #40]	; 0x28
 8042334:	9b04      	ldr	r3, [sp, #16]
 8042336:	4413      	add	r3, r2
 8042338:	9304      	str	r3, [sp, #16]
 804233a:	9b05      	ldr	r3, [sp, #20]
 804233c:	2101      	movs	r1, #1
 804233e:	4413      	add	r3, r2
 8042340:	4630      	mov	r0, r6
 8042342:	9305      	str	r3, [sp, #20]
 8042344:	f010 ff0c 	bl	8053160 <__i2b>
 8042348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 804234a:	4607      	mov	r7, r0
 804234c:	f1b8 0f00 	cmp.w	r8, #0
 8042350:	dd0d      	ble.n	804236e <_dtoa_r+0x67e>
 8042352:	9a05      	ldr	r2, [sp, #20]
 8042354:	2a00      	cmp	r2, #0
 8042356:	dd0a      	ble.n	804236e <_dtoa_r+0x67e>
 8042358:	4542      	cmp	r2, r8
 804235a:	9904      	ldr	r1, [sp, #16]
 804235c:	bfa8      	it	ge
 804235e:	4642      	movge	r2, r8
 8042360:	1a89      	subs	r1, r1, r2
 8042362:	9104      	str	r1, [sp, #16]
 8042364:	9905      	ldr	r1, [sp, #20]
 8042366:	eba8 0802 	sub.w	r8, r8, r2
 804236a:	1a8a      	subs	r2, r1, r2
 804236c:	9205      	str	r2, [sp, #20]
 804236e:	b303      	cbz	r3, 80423b2 <_dtoa_r+0x6c2>
 8042370:	9a07      	ldr	r2, [sp, #28]
 8042372:	2a00      	cmp	r2, #0
 8042374:	f000 80a6 	beq.w	80424c4 <_dtoa_r+0x7d4>
 8042378:	2c00      	cmp	r4, #0
 804237a:	dd13      	ble.n	80423a4 <_dtoa_r+0x6b4>
 804237c:	4639      	mov	r1, r7
 804237e:	4622      	mov	r2, r4
 8042380:	4630      	mov	r0, r6
 8042382:	930d      	str	r3, [sp, #52]	; 0x34
 8042384:	f010 ffac 	bl	80532e0 <__pow5mult>
 8042388:	462a      	mov	r2, r5
 804238a:	4601      	mov	r1, r0
 804238c:	4607      	mov	r7, r0
 804238e:	4630      	mov	r0, r6
 8042390:	f010 fefc 	bl	805318c <__multiply>
 8042394:	4629      	mov	r1, r5
 8042396:	900a      	str	r0, [sp, #40]	; 0x28
 8042398:	4630      	mov	r0, r6
 804239a:	f010 fe79 	bl	8053090 <_Bfree>
 804239e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80423a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80423a2:	4615      	mov	r5, r2
 80423a4:	1b1a      	subs	r2, r3, r4
 80423a6:	d004      	beq.n	80423b2 <_dtoa_r+0x6c2>
 80423a8:	4629      	mov	r1, r5
 80423aa:	4630      	mov	r0, r6
 80423ac:	f010 ff98 	bl	80532e0 <__pow5mult>
 80423b0:	4605      	mov	r5, r0
 80423b2:	2101      	movs	r1, #1
 80423b4:	4630      	mov	r0, r6
 80423b6:	f010 fed3 	bl	8053160 <__i2b>
 80423ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80423bc:	2b00      	cmp	r3, #0
 80423be:	4604      	mov	r4, r0
 80423c0:	f340 8082 	ble.w	80424c8 <_dtoa_r+0x7d8>
 80423c4:	461a      	mov	r2, r3
 80423c6:	4601      	mov	r1, r0
 80423c8:	4630      	mov	r0, r6
 80423ca:	f010 ff89 	bl	80532e0 <__pow5mult>
 80423ce:	9b06      	ldr	r3, [sp, #24]
 80423d0:	2b01      	cmp	r3, #1
 80423d2:	4604      	mov	r4, r0
 80423d4:	dd7b      	ble.n	80424ce <_dtoa_r+0x7de>
 80423d6:	2300      	movs	r3, #0
 80423d8:	930a      	str	r3, [sp, #40]	; 0x28
 80423da:	6922      	ldr	r2, [r4, #16]
 80423dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80423e0:	6910      	ldr	r0, [r2, #16]
 80423e2:	f018 ff5f 	bl	805b2a4 <__hi0bits>
 80423e6:	f1c0 0020 	rsb	r0, r0, #32
 80423ea:	9b05      	ldr	r3, [sp, #20]
 80423ec:	4418      	add	r0, r3
 80423ee:	f010 001f 	ands.w	r0, r0, #31
 80423f2:	f000 808d 	beq.w	8042510 <_dtoa_r+0x820>
 80423f6:	f1c0 0220 	rsb	r2, r0, #32
 80423fa:	2a04      	cmp	r2, #4
 80423fc:	f340 8086 	ble.w	804250c <_dtoa_r+0x81c>
 8042400:	f1c0 001c 	rsb	r0, r0, #28
 8042404:	9b04      	ldr	r3, [sp, #16]
 8042406:	4403      	add	r3, r0
 8042408:	9304      	str	r3, [sp, #16]
 804240a:	9b05      	ldr	r3, [sp, #20]
 804240c:	4403      	add	r3, r0
 804240e:	4480      	add	r8, r0
 8042410:	9305      	str	r3, [sp, #20]
 8042412:	9b04      	ldr	r3, [sp, #16]
 8042414:	2b00      	cmp	r3, #0
 8042416:	dd05      	ble.n	8042424 <_dtoa_r+0x734>
 8042418:	4629      	mov	r1, r5
 804241a:	461a      	mov	r2, r3
 804241c:	4630      	mov	r0, r6
 804241e:	f010 ffb9 	bl	8053394 <__lshift>
 8042422:	4605      	mov	r5, r0
 8042424:	9b05      	ldr	r3, [sp, #20]
 8042426:	2b00      	cmp	r3, #0
 8042428:	dd05      	ble.n	8042436 <_dtoa_r+0x746>
 804242a:	4621      	mov	r1, r4
 804242c:	461a      	mov	r2, r3
 804242e:	4630      	mov	r0, r6
 8042430:	f010 ffb0 	bl	8053394 <__lshift>
 8042434:	4604      	mov	r4, r0
 8042436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8042438:	2b00      	cmp	r3, #0
 804243a:	d06b      	beq.n	8042514 <_dtoa_r+0x824>
 804243c:	4621      	mov	r1, r4
 804243e:	4628      	mov	r0, r5
 8042440:	f018 ff7f 	bl	805b342 <__mcmp>
 8042444:	2800      	cmp	r0, #0
 8042446:	da65      	bge.n	8042514 <_dtoa_r+0x824>
 8042448:	2300      	movs	r3, #0
 804244a:	4629      	mov	r1, r5
 804244c:	220a      	movs	r2, #10
 804244e:	4630      	mov	r0, r6
 8042450:	f010 fe40 	bl	80530d4 <__multadd>
 8042454:	9b07      	ldr	r3, [sp, #28]
 8042456:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 804245a:	4605      	mov	r5, r0
 804245c:	2b00      	cmp	r3, #0
 804245e:	f000 8192 	beq.w	8042786 <_dtoa_r+0xa96>
 8042462:	4639      	mov	r1, r7
 8042464:	2300      	movs	r3, #0
 8042466:	220a      	movs	r2, #10
 8042468:	4630      	mov	r0, r6
 804246a:	f010 fe33 	bl	80530d4 <__multadd>
 804246e:	f1ba 0f00 	cmp.w	sl, #0
 8042472:	4607      	mov	r7, r0
 8042474:	f300 808e 	bgt.w	8042594 <_dtoa_r+0x8a4>
 8042478:	9b06      	ldr	r3, [sp, #24]
 804247a:	2b02      	cmp	r3, #2
 804247c:	dc51      	bgt.n	8042522 <_dtoa_r+0x832>
 804247e:	e089      	b.n	8042594 <_dtoa_r+0x8a4>
 8042480:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8042482:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8042486:	e751      	b.n	804232c <_dtoa_r+0x63c>
 8042488:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 804248c:	42a3      	cmp	r3, r4
 804248e:	bfbf      	itttt	lt
 8042490:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8042492:	1ae3      	sublt	r3, r4, r3
 8042494:	18d2      	addlt	r2, r2, r3
 8042496:	4613      	movlt	r3, r2
 8042498:	bfb7      	itett	lt
 804249a:	9309      	strlt	r3, [sp, #36]	; 0x24
 804249c:	1b1c      	subge	r4, r3, r4
 804249e:	4623      	movlt	r3, r4
 80424a0:	2400      	movlt	r4, #0
 80424a2:	f1b9 0f00 	cmp.w	r9, #0
 80424a6:	bfb5      	itete	lt
 80424a8:	9a04      	ldrlt	r2, [sp, #16]
 80424aa:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80424ae:	eba2 0809 	sublt.w	r8, r2, r9
 80424b2:	464a      	movge	r2, r9
 80424b4:	bfb8      	it	lt
 80424b6:	2200      	movlt	r2, #0
 80424b8:	e73b      	b.n	8042332 <_dtoa_r+0x642>
 80424ba:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80424be:	9f07      	ldr	r7, [sp, #28]
 80424c0:	461c      	mov	r4, r3
 80424c2:	e743      	b.n	804234c <_dtoa_r+0x65c>
 80424c4:	461a      	mov	r2, r3
 80424c6:	e76f      	b.n	80423a8 <_dtoa_r+0x6b8>
 80424c8:	9b06      	ldr	r3, [sp, #24]
 80424ca:	2b01      	cmp	r3, #1
 80424cc:	dc18      	bgt.n	8042500 <_dtoa_r+0x810>
 80424ce:	9b02      	ldr	r3, [sp, #8]
 80424d0:	b9b3      	cbnz	r3, 8042500 <_dtoa_r+0x810>
 80424d2:	9b03      	ldr	r3, [sp, #12]
 80424d4:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80424d8:	b9a2      	cbnz	r2, 8042504 <_dtoa_r+0x814>
 80424da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80424de:	0d12      	lsrs	r2, r2, #20
 80424e0:	0512      	lsls	r2, r2, #20
 80424e2:	b18a      	cbz	r2, 8042508 <_dtoa_r+0x818>
 80424e4:	9b04      	ldr	r3, [sp, #16]
 80424e6:	3301      	adds	r3, #1
 80424e8:	9304      	str	r3, [sp, #16]
 80424ea:	9b05      	ldr	r3, [sp, #20]
 80424ec:	3301      	adds	r3, #1
 80424ee:	9305      	str	r3, [sp, #20]
 80424f0:	2301      	movs	r3, #1
 80424f2:	930a      	str	r3, [sp, #40]	; 0x28
 80424f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80424f6:	2b00      	cmp	r3, #0
 80424f8:	f47f af6f 	bne.w	80423da <_dtoa_r+0x6ea>
 80424fc:	2001      	movs	r0, #1
 80424fe:	e774      	b.n	80423ea <_dtoa_r+0x6fa>
 8042500:	2300      	movs	r3, #0
 8042502:	e7f6      	b.n	80424f2 <_dtoa_r+0x802>
 8042504:	9b02      	ldr	r3, [sp, #8]
 8042506:	e7f4      	b.n	80424f2 <_dtoa_r+0x802>
 8042508:	920a      	str	r2, [sp, #40]	; 0x28
 804250a:	e7f3      	b.n	80424f4 <_dtoa_r+0x804>
 804250c:	d081      	beq.n	8042412 <_dtoa_r+0x722>
 804250e:	4610      	mov	r0, r2
 8042510:	301c      	adds	r0, #28
 8042512:	e777      	b.n	8042404 <_dtoa_r+0x714>
 8042514:	f1b9 0f00 	cmp.w	r9, #0
 8042518:	dc37      	bgt.n	804258a <_dtoa_r+0x89a>
 804251a:	9b06      	ldr	r3, [sp, #24]
 804251c:	2b02      	cmp	r3, #2
 804251e:	dd34      	ble.n	804258a <_dtoa_r+0x89a>
 8042520:	46ca      	mov	sl, r9
 8042522:	f1ba 0f00 	cmp.w	sl, #0
 8042526:	d10d      	bne.n	8042544 <_dtoa_r+0x854>
 8042528:	4621      	mov	r1, r4
 804252a:	4653      	mov	r3, sl
 804252c:	2205      	movs	r2, #5
 804252e:	4630      	mov	r0, r6
 8042530:	f010 fdd0 	bl	80530d4 <__multadd>
 8042534:	4601      	mov	r1, r0
 8042536:	4604      	mov	r4, r0
 8042538:	4628      	mov	r0, r5
 804253a:	f018 ff02 	bl	805b342 <__mcmp>
 804253e:	2800      	cmp	r0, #0
 8042540:	f73f adea 	bgt.w	8042118 <_dtoa_r+0x428>
 8042544:	9b08      	ldr	r3, [sp, #32]
 8042546:	f8dd 8004 	ldr.w	r8, [sp, #4]
 804254a:	ea6f 0b03 	mvn.w	fp, r3
 804254e:	f04f 0900 	mov.w	r9, #0
 8042552:	4621      	mov	r1, r4
 8042554:	4630      	mov	r0, r6
 8042556:	f010 fd9b 	bl	8053090 <_Bfree>
 804255a:	2f00      	cmp	r7, #0
 804255c:	f43f aea7 	beq.w	80422ae <_dtoa_r+0x5be>
 8042560:	f1b9 0f00 	cmp.w	r9, #0
 8042564:	d005      	beq.n	8042572 <_dtoa_r+0x882>
 8042566:	45b9      	cmp	r9, r7
 8042568:	d003      	beq.n	8042572 <_dtoa_r+0x882>
 804256a:	4649      	mov	r1, r9
 804256c:	4630      	mov	r0, r6
 804256e:	f010 fd8f 	bl	8053090 <_Bfree>
 8042572:	4639      	mov	r1, r7
 8042574:	4630      	mov	r0, r6
 8042576:	f010 fd8b 	bl	8053090 <_Bfree>
 804257a:	e698      	b.n	80422ae <_dtoa_r+0x5be>
 804257c:	2400      	movs	r4, #0
 804257e:	4627      	mov	r7, r4
 8042580:	e7e0      	b.n	8042544 <_dtoa_r+0x854>
 8042582:	46bb      	mov	fp, r7
 8042584:	4604      	mov	r4, r0
 8042586:	4607      	mov	r7, r0
 8042588:	e5c6      	b.n	8042118 <_dtoa_r+0x428>
 804258a:	9b07      	ldr	r3, [sp, #28]
 804258c:	46ca      	mov	sl, r9
 804258e:	2b00      	cmp	r3, #0
 8042590:	f000 8100 	beq.w	8042794 <_dtoa_r+0xaa4>
 8042594:	f1b8 0f00 	cmp.w	r8, #0
 8042598:	dd05      	ble.n	80425a6 <_dtoa_r+0x8b6>
 804259a:	4639      	mov	r1, r7
 804259c:	4642      	mov	r2, r8
 804259e:	4630      	mov	r0, r6
 80425a0:	f010 fef8 	bl	8053394 <__lshift>
 80425a4:	4607      	mov	r7, r0
 80425a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80425a8:	2b00      	cmp	r3, #0
 80425aa:	d05d      	beq.n	8042668 <_dtoa_r+0x978>
 80425ac:	6879      	ldr	r1, [r7, #4]
 80425ae:	4630      	mov	r0, r6
 80425b0:	f010 fd2e 	bl	8053010 <_Balloc>
 80425b4:	4680      	mov	r8, r0
 80425b6:	b928      	cbnz	r0, 80425c4 <_dtoa_r+0x8d4>
 80425b8:	4b82      	ldr	r3, [pc, #520]	; (80427c4 <_dtoa_r+0xad4>)
 80425ba:	4602      	mov	r2, r0
 80425bc:	f240 21ea 	movw	r1, #746	; 0x2ea
 80425c0:	f7ff bbae 	b.w	8041d20 <_dtoa_r+0x30>
 80425c4:	693a      	ldr	r2, [r7, #16]
 80425c6:	3202      	adds	r2, #2
 80425c8:	0092      	lsls	r2, r2, #2
 80425ca:	f107 010c 	add.w	r1, r7, #12
 80425ce:	300c      	adds	r0, #12
 80425d0:	f018 fc01 	bl	805add6 <memcpy>
 80425d4:	2201      	movs	r2, #1
 80425d6:	4641      	mov	r1, r8
 80425d8:	4630      	mov	r0, r6
 80425da:	f010 fedb 	bl	8053394 <__lshift>
 80425de:	9b01      	ldr	r3, [sp, #4]
 80425e0:	3301      	adds	r3, #1
 80425e2:	9304      	str	r3, [sp, #16]
 80425e4:	9b01      	ldr	r3, [sp, #4]
 80425e6:	4453      	add	r3, sl
 80425e8:	9308      	str	r3, [sp, #32]
 80425ea:	9b02      	ldr	r3, [sp, #8]
 80425ec:	f003 0301 	and.w	r3, r3, #1
 80425f0:	46b9      	mov	r9, r7
 80425f2:	9307      	str	r3, [sp, #28]
 80425f4:	4607      	mov	r7, r0
 80425f6:	9b04      	ldr	r3, [sp, #16]
 80425f8:	4621      	mov	r1, r4
 80425fa:	3b01      	subs	r3, #1
 80425fc:	4628      	mov	r0, r5
 80425fe:	9302      	str	r3, [sp, #8]
 8042600:	f018 fdc5 	bl	805b18e <quorem>
 8042604:	4603      	mov	r3, r0
 8042606:	3330      	adds	r3, #48	; 0x30
 8042608:	9005      	str	r0, [sp, #20]
 804260a:	4649      	mov	r1, r9
 804260c:	4628      	mov	r0, r5
 804260e:	9309      	str	r3, [sp, #36]	; 0x24
 8042610:	f018 fe97 	bl	805b342 <__mcmp>
 8042614:	463a      	mov	r2, r7
 8042616:	4682      	mov	sl, r0
 8042618:	4621      	mov	r1, r4
 804261a:	4630      	mov	r0, r6
 804261c:	f010 ff2a 	bl	8053474 <__mdiff>
 8042620:	68c2      	ldr	r2, [r0, #12]
 8042622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8042624:	4680      	mov	r8, r0
 8042626:	bb0a      	cbnz	r2, 804266c <_dtoa_r+0x97c>
 8042628:	4601      	mov	r1, r0
 804262a:	4628      	mov	r0, r5
 804262c:	f018 fe89 	bl	805b342 <__mcmp>
 8042630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8042632:	4602      	mov	r2, r0
 8042634:	4641      	mov	r1, r8
 8042636:	4630      	mov	r0, r6
 8042638:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 804263c:	f010 fd28 	bl	8053090 <_Bfree>
 8042640:	9b06      	ldr	r3, [sp, #24]
 8042642:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8042644:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8042648:	ea43 0102 	orr.w	r1, r3, r2
 804264c:	9b07      	ldr	r3, [sp, #28]
 804264e:	430b      	orrs	r3, r1
 8042650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8042652:	d10d      	bne.n	8042670 <_dtoa_r+0x980>
 8042654:	2b39      	cmp	r3, #57	; 0x39
 8042656:	d029      	beq.n	80426ac <_dtoa_r+0x9bc>
 8042658:	f1ba 0f00 	cmp.w	sl, #0
 804265c:	dd01      	ble.n	8042662 <_dtoa_r+0x972>
 804265e:	9b05      	ldr	r3, [sp, #20]
 8042660:	3331      	adds	r3, #49	; 0x31
 8042662:	9a02      	ldr	r2, [sp, #8]
 8042664:	7013      	strb	r3, [r2, #0]
 8042666:	e774      	b.n	8042552 <_dtoa_r+0x862>
 8042668:	4638      	mov	r0, r7
 804266a:	e7b8      	b.n	80425de <_dtoa_r+0x8ee>
 804266c:	2201      	movs	r2, #1
 804266e:	e7e1      	b.n	8042634 <_dtoa_r+0x944>
 8042670:	f1ba 0f00 	cmp.w	sl, #0
 8042674:	db06      	blt.n	8042684 <_dtoa_r+0x994>
 8042676:	9906      	ldr	r1, [sp, #24]
 8042678:	ea41 0a0a 	orr.w	sl, r1, sl
 804267c:	9907      	ldr	r1, [sp, #28]
 804267e:	ea5a 0101 	orrs.w	r1, sl, r1
 8042682:	d120      	bne.n	80426c6 <_dtoa_r+0x9d6>
 8042684:	2a00      	cmp	r2, #0
 8042686:	ddec      	ble.n	8042662 <_dtoa_r+0x972>
 8042688:	4629      	mov	r1, r5
 804268a:	2201      	movs	r2, #1
 804268c:	4630      	mov	r0, r6
 804268e:	9304      	str	r3, [sp, #16]
 8042690:	f010 fe80 	bl	8053394 <__lshift>
 8042694:	4621      	mov	r1, r4
 8042696:	4605      	mov	r5, r0
 8042698:	f018 fe53 	bl	805b342 <__mcmp>
 804269c:	2800      	cmp	r0, #0
 804269e:	9b04      	ldr	r3, [sp, #16]
 80426a0:	dc02      	bgt.n	80426a8 <_dtoa_r+0x9b8>
 80426a2:	d1de      	bne.n	8042662 <_dtoa_r+0x972>
 80426a4:	07da      	lsls	r2, r3, #31
 80426a6:	d5dc      	bpl.n	8042662 <_dtoa_r+0x972>
 80426a8:	2b39      	cmp	r3, #57	; 0x39
 80426aa:	d1d8      	bne.n	804265e <_dtoa_r+0x96e>
 80426ac:	9a02      	ldr	r2, [sp, #8]
 80426ae:	2339      	movs	r3, #57	; 0x39
 80426b0:	7013      	strb	r3, [r2, #0]
 80426b2:	4643      	mov	r3, r8
 80426b4:	4698      	mov	r8, r3
 80426b6:	3b01      	subs	r3, #1
 80426b8:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80426bc:	2a39      	cmp	r2, #57	; 0x39
 80426be:	d051      	beq.n	8042764 <_dtoa_r+0xa74>
 80426c0:	3201      	adds	r2, #1
 80426c2:	701a      	strb	r2, [r3, #0]
 80426c4:	e745      	b.n	8042552 <_dtoa_r+0x862>
 80426c6:	2a00      	cmp	r2, #0
 80426c8:	dd03      	ble.n	80426d2 <_dtoa_r+0x9e2>
 80426ca:	2b39      	cmp	r3, #57	; 0x39
 80426cc:	d0ee      	beq.n	80426ac <_dtoa_r+0x9bc>
 80426ce:	3301      	adds	r3, #1
 80426d0:	e7c7      	b.n	8042662 <_dtoa_r+0x972>
 80426d2:	9a04      	ldr	r2, [sp, #16]
 80426d4:	9908      	ldr	r1, [sp, #32]
 80426d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80426da:	428a      	cmp	r2, r1
 80426dc:	d02b      	beq.n	8042736 <_dtoa_r+0xa46>
 80426de:	4629      	mov	r1, r5
 80426e0:	2300      	movs	r3, #0
 80426e2:	220a      	movs	r2, #10
 80426e4:	4630      	mov	r0, r6
 80426e6:	f010 fcf5 	bl	80530d4 <__multadd>
 80426ea:	45b9      	cmp	r9, r7
 80426ec:	4605      	mov	r5, r0
 80426ee:	f04f 0300 	mov.w	r3, #0
 80426f2:	f04f 020a 	mov.w	r2, #10
 80426f6:	4649      	mov	r1, r9
 80426f8:	4630      	mov	r0, r6
 80426fa:	d107      	bne.n	804270c <_dtoa_r+0xa1c>
 80426fc:	f010 fcea 	bl	80530d4 <__multadd>
 8042700:	4681      	mov	r9, r0
 8042702:	4607      	mov	r7, r0
 8042704:	9b04      	ldr	r3, [sp, #16]
 8042706:	3301      	adds	r3, #1
 8042708:	9304      	str	r3, [sp, #16]
 804270a:	e774      	b.n	80425f6 <_dtoa_r+0x906>
 804270c:	f010 fce2 	bl	80530d4 <__multadd>
 8042710:	4639      	mov	r1, r7
 8042712:	4681      	mov	r9, r0
 8042714:	2300      	movs	r3, #0
 8042716:	220a      	movs	r2, #10
 8042718:	4630      	mov	r0, r6
 804271a:	f010 fcdb 	bl	80530d4 <__multadd>
 804271e:	4607      	mov	r7, r0
 8042720:	e7f0      	b.n	8042704 <_dtoa_r+0xa14>
 8042722:	f1ba 0f00 	cmp.w	sl, #0
 8042726:	9a01      	ldr	r2, [sp, #4]
 8042728:	bfcc      	ite	gt
 804272a:	46d0      	movgt	r8, sl
 804272c:	f04f 0801 	movle.w	r8, #1
 8042730:	4490      	add	r8, r2
 8042732:	f04f 0900 	mov.w	r9, #0
 8042736:	4629      	mov	r1, r5
 8042738:	2201      	movs	r2, #1
 804273a:	4630      	mov	r0, r6
 804273c:	9302      	str	r3, [sp, #8]
 804273e:	f010 fe29 	bl	8053394 <__lshift>
 8042742:	4621      	mov	r1, r4
 8042744:	4605      	mov	r5, r0
 8042746:	f018 fdfc 	bl	805b342 <__mcmp>
 804274a:	2800      	cmp	r0, #0
 804274c:	dcb1      	bgt.n	80426b2 <_dtoa_r+0x9c2>
 804274e:	d102      	bne.n	8042756 <_dtoa_r+0xa66>
 8042750:	9b02      	ldr	r3, [sp, #8]
 8042752:	07db      	lsls	r3, r3, #31
 8042754:	d4ad      	bmi.n	80426b2 <_dtoa_r+0x9c2>
 8042756:	4643      	mov	r3, r8
 8042758:	4698      	mov	r8, r3
 804275a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 804275e:	2a30      	cmp	r2, #48	; 0x30
 8042760:	d0fa      	beq.n	8042758 <_dtoa_r+0xa68>
 8042762:	e6f6      	b.n	8042552 <_dtoa_r+0x862>
 8042764:	9a01      	ldr	r2, [sp, #4]
 8042766:	429a      	cmp	r2, r3
 8042768:	d1a4      	bne.n	80426b4 <_dtoa_r+0x9c4>
 804276a:	f10b 0b01 	add.w	fp, fp, #1
 804276e:	2331      	movs	r3, #49	; 0x31
 8042770:	e778      	b.n	8042664 <_dtoa_r+0x974>
 8042772:	4b15      	ldr	r3, [pc, #84]	; (80427c8 <_dtoa_r+0xad8>)
 8042774:	f7ff bb26 	b.w	8041dc4 <_dtoa_r+0xd4>
 8042778:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 804277a:	2b00      	cmp	r3, #0
 804277c:	f47f ab02 	bne.w	8041d84 <_dtoa_r+0x94>
 8042780:	4b12      	ldr	r3, [pc, #72]	; (80427cc <_dtoa_r+0xadc>)
 8042782:	f7ff bb1f 	b.w	8041dc4 <_dtoa_r+0xd4>
 8042786:	f1ba 0f00 	cmp.w	sl, #0
 804278a:	dc03      	bgt.n	8042794 <_dtoa_r+0xaa4>
 804278c:	9b06      	ldr	r3, [sp, #24]
 804278e:	2b02      	cmp	r3, #2
 8042790:	f73f aec7 	bgt.w	8042522 <_dtoa_r+0x832>
 8042794:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8042798:	4621      	mov	r1, r4
 804279a:	4628      	mov	r0, r5
 804279c:	f018 fcf7 	bl	805b18e <quorem>
 80427a0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80427a4:	f808 3b01 	strb.w	r3, [r8], #1
 80427a8:	9a01      	ldr	r2, [sp, #4]
 80427aa:	eba8 0202 	sub.w	r2, r8, r2
 80427ae:	4592      	cmp	sl, r2
 80427b0:	ddb7      	ble.n	8042722 <_dtoa_r+0xa32>
 80427b2:	4629      	mov	r1, r5
 80427b4:	2300      	movs	r3, #0
 80427b6:	220a      	movs	r2, #10
 80427b8:	4630      	mov	r0, r6
 80427ba:	f010 fc8b 	bl	80530d4 <__multadd>
 80427be:	4605      	mov	r5, r0
 80427c0:	e7ea      	b.n	8042798 <_dtoa_r+0xaa8>
 80427c2:	bf00      	nop
 80427c4:	08063534 	.word	0x08063534
 80427c8:	08062fb4 	.word	0x08062fb4
 80427cc:	08063493 	.word	0x08063493

080427d0 <_ZNK8lexxhard19actuator_controller24actuator_controller_impl14pwm_trampolineEiih.isra.0>:
            shell_print(shell,
                        "actuator: %d encoder: %d pulse current: %d mV fail: %d dir: %d duty: %u",
                        i, pulse, current, fail, direction, duty);
        }
    }
    void pwm_trampoline(int index, int direction, uint8_t pwm_duty = 0) const {
 80427d0:	b513      	push	{r0, r1, r4, lr}
        msg_pwmtrampoline message;
 80427d2:	2300      	movs	r3, #0
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
 80427d4:	4c0a      	ldr	r4, [pc, #40]	; (8042800 <_ZNK8lexxhard19actuator_controller24actuator_controller_impl14pwm_trampolineEiih.isra.0+0x30>)
        message.all = false;
        message.index = index;
 80427d6:	f88d 0005 	strb.w	r0, [sp, #5]
        msg_pwmtrampoline message;
 80427da:	f88d 3004 	strb.w	r3, [sp, #4]
        message.direction = direction;
 80427de:	f88d 1006 	strb.w	r1, [sp, #6]
        message.duty = pwm_duty;
 80427e2:	f88d 2007 	strb.w	r2, [sp, #7]
 80427e6:	2200      	movs	r2, #0
 80427e8:	2300      	movs	r3, #0
 80427ea:	a901      	add	r1, sp, #4
 80427ec:	4804      	ldr	r0, [pc, #16]	; (8042800 <_ZNK8lexxhard19actuator_controller24actuator_controller_impl14pwm_trampolineEiih.isra.0+0x30>)
 80427ee:	f00f f80b 	bl	8051808 <z_impl_k_msgq_put>
        while (k_msgq_put(&msgq_pwmtrampoline, &message, K_NO_WAIT) != 0)
 80427f2:	b118      	cbz	r0, 80427fc <_ZNK8lexxhard19actuator_controller24actuator_controller_impl14pwm_trampolineEiih.isra.0+0x2c>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MSGQ_PURGE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_msgq_purge(msgq);
 80427f4:	4620      	mov	r0, r4
 80427f6:	f017 fdd9 	bl	805a3ac <z_impl_k_msgq_purge>
}
 80427fa:	e7f4      	b.n	80427e6 <_ZNK8lexxhard19actuator_controller24actuator_controller_impl14pwm_trampolineEiih.isra.0+0x16>
            k_msgq_purge(&msgq_pwmtrampoline);
    }
 80427fc:	b002      	add	sp, #8
 80427fe:	bd10      	pop	{r4, pc}
 8042800:	200209e4 	.word	0x200209e4

08042804 <_ZN8lexxhard19actuator_controller8cmd_dutyEPK5shelljPPc>:
    actuator act[3];
    bool location_initialized{false};
} impl;

int cmd_duty(const shell *shell, size_t argc, char **argv)
{
 8042804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8042806:	460d      	mov	r5, r1
 8042808:	4614      	mov	r4, r2
    shell_print(shell, "[notice] The order changed from Left-Center-Right(prev) -> Center-Left-Right(NOW)");
 804280a:	2100      	movs	r1, #0
 804280c:	4a17      	ldr	r2, [pc, #92]	; (804286c <_ZN8lexxhard19actuator_controller8cmd_dutyEPK5shelljPPc+0x68>)
{
 804280e:	4606      	mov	r6, r0
    shell_print(shell, "[notice] The order changed from Left-Center-Right(prev) -> Center-Left-Right(NOW)");
 8042810:	f014 f855 	bl	80568be <shell_fprintf>
    if (argc != 3 && argc != 5 && argc != 7) {
 8042814:	f025 0304 	bic.w	r3, r5, #4
 8042818:	2b03      	cmp	r3, #3
 804281a:	d00d      	beq.n	8042838 <_ZN8lexxhard19actuator_controller8cmd_dutyEPK5shelljPPc+0x34>
 804281c:	2d05      	cmp	r5, #5
 804281e:	d00b      	beq.n	8042838 <_ZN8lexxhard19actuator_controller8cmd_dutyEPK5shelljPPc+0x34>
        shell_error(shell, "Usage: %s %s <direction> <power> ...\n", argv[-1], argv[0]);
 8042820:	6823      	ldr	r3, [r4, #0]
 8042822:	4630      	mov	r0, r6
 8042824:	4a12      	ldr	r2, [pc, #72]	; (8042870 <_ZN8lexxhard19actuator_controller8cmd_dutyEPK5shelljPPc+0x6c>)
 8042826:	2102      	movs	r1, #2
 8042828:	9300      	str	r3, [sp, #0]
 804282a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 804282e:	f014 f846 	bl	80568be <shell_fprintf>
        return 1;
 8042832:	2001      	movs	r0, #1
        direction = atoi(argv[i * 2 + 1]);
        duty      = atoi(argv[i * 2 + 2]);
        impl.pwm_trampoline(i, direction, duty);
    }
    return 0;
}
 8042834:	b003      	add	sp, #12
 8042836:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (size_t i{0}, end{argc / 2}; i < end; ++i) {
 8042838:	086d      	lsrs	r5, r5, #1
 804283a:	3404      	adds	r4, #4
 804283c:	2600      	movs	r6, #0
 804283e:	42b5      	cmp	r5, r6
 8042840:	f104 0408 	add.w	r4, r4, #8
 8042844:	d00f      	beq.n	8042866 <_ZN8lexxhard19actuator_controller8cmd_dutyEPK5shelljPPc+0x62>
        direction = atoi(argv[i * 2 + 1]);
 8042846:	f854 0c08 	ldr.w	r0, [r4, #-8]
 804284a:	f018 fab0 	bl	805adae <atoi>
 804284e:	4607      	mov	r7, r0
        duty      = atoi(argv[i * 2 + 2]);
 8042850:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8042854:	f018 faab 	bl	805adae <atoi>
        impl.pwm_trampoline(i, direction, duty);
 8042858:	b2f9      	uxtb	r1, r7
 804285a:	b2c2      	uxtb	r2, r0
 804285c:	4630      	mov	r0, r6
 804285e:	f7ff ffb7 	bl	80427d0 <_ZNK8lexxhard19actuator_controller24actuator_controller_impl14pwm_trampolineEiih.isra.0>
    for (size_t i{0}, end{argc / 2}; i < end; ++i) {
 8042862:	3601      	adds	r6, #1
 8042864:	e7eb      	b.n	804283e <_ZN8lexxhard19actuator_controller8cmd_dutyEPK5shelljPPc+0x3a>
    return 0;
 8042866:	2000      	movs	r0, #0
 8042868:	e7e4      	b.n	8042834 <_ZN8lexxhard19actuator_controller8cmd_dutyEPK5shelljPPc+0x30>
 804286a:	bf00      	nop
 804286c:	0805e6a0 	.word	0x0805e6a0
 8042870:	0805e6f3 	.word	0x0805e6f3

08042874 <_ZNK8lexxhard19actuator_controller24actuator_controller_impl18pwm_trampoline_allEih.isra.0>:
        msg_pwmtrampoline message;
 8042874:	2300      	movs	r3, #0
    void pwm_trampoline_all(int direction, uint8_t pwm_duty = 0) const {
 8042876:	b513      	push	{r0, r1, r4, lr}
	return z_impl_k_msgq_put(msgq, data, timeout);
 8042878:	4c0b      	ldr	r4, [pc, #44]	; (80428a8 <_ZNK8lexxhard19actuator_controller24actuator_controller_impl18pwm_trampoline_allEih.isra.0+0x34>)
        msg_pwmtrampoline message;
 804287a:	f88d 3005 	strb.w	r3, [sp, #5]
        message.all = true;
 804287e:	2301      	movs	r3, #1
        message.direction = direction;
 8042880:	f88d 0006 	strb.w	r0, [sp, #6]
        message.all = true;
 8042884:	f88d 3004 	strb.w	r3, [sp, #4]
        message.duty = pwm_duty;
 8042888:	f88d 1007 	strb.w	r1, [sp, #7]
 804288c:	2200      	movs	r2, #0
 804288e:	2300      	movs	r3, #0
 8042890:	a901      	add	r1, sp, #4
 8042892:	4805      	ldr	r0, [pc, #20]	; (80428a8 <_ZNK8lexxhard19actuator_controller24actuator_controller_impl18pwm_trampoline_allEih.isra.0+0x34>)
 8042894:	f00e ffb8 	bl	8051808 <z_impl_k_msgq_put>
        while (k_msgq_put(&msgq_pwmtrampoline, &message, K_NO_WAIT) != 0)
 8042898:	b118      	cbz	r0, 80428a2 <_ZNK8lexxhard19actuator_controller24actuator_controller_impl18pwm_trampoline_allEih.isra.0+0x2e>
	z_impl_k_msgq_purge(msgq);
 804289a:	4620      	mov	r0, r4
 804289c:	f017 fd86 	bl	805a3ac <z_impl_k_msgq_purge>
}
 80428a0:	e7f4      	b.n	804288c <_ZNK8lexxhard19actuator_controller24actuator_controller_impl18pwm_trampoline_allEih.isra.0+0x18>
    }
 80428a2:	b002      	add	sp, #8
 80428a4:	bd10      	pop	{r4, pc}
 80428a6:	bf00      	nop
 80428a8:	200209e4 	.word	0x200209e4

080428ac <_ZNK8lexxhard19actuator_controller8actuator8get_infoEv>:
    std::tuple<int32_t, int32_t, bool, int8_t, uint8_t> get_info() const {
 80428ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80428b0:	4680      	mov	r8, r0
            calc_current(current_adc >= 0 ? adc_reader::get(current_adc) : 0),
 80428b2:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    std::tuple<int32_t, int32_t, bool, int8_t, uint8_t> get_info() const {
 80428b6:	460c      	mov	r4, r1
    int32_t get_pulse() const {return pulse_value;}
 80428b8:	6d8d      	ldr	r5, [r1, #88]	; 0x58
            calc_current(current_adc >= 0 ? adc_reader::get(current_adc) : 0),
 80428ba:	2800      	cmp	r0, #0
    std::tuple<int32_t, int32_t, bool, int8_t, uint8_t> get_info() const {
 80428bc:	ed2d 8b02 	vpush	{d8}
 80428c0:	b083      	sub	sp, #12
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }
 80428c2:	f891 7069 	ldrb.w	r7, [r1, #105]	; 0x69
 80428c6:	f991 6068 	ldrsb.w	r6, [r1, #104]	; 0x68
            calc_current(current_adc >= 0 ? adc_reader::get(current_adc) : 0),
 80428ca:	db43      	blt.n	8042954 <_ZNK8lexxhard19actuator_controller8actuator8get_infoEv+0xa8>
 80428cc:	f000 f9f6 	bl	8042cbc <_ZN8lexxhard10adc_reader3getEi>
        float current_a{adc_voltage_mv * 1e-3f / AMP_GAIN * VOLTAGE_DIVIDER / SHUNT_REGISTER};
 80428d0:	ee07 0a90 	vmov	s15, r0
 80428d4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8042958 <_ZNK8lexxhard19actuator_controller8actuator8get_infoEv+0xac>
 80428d8:	eddf 6a20 	vldr	s13, [pc, #128]	; 804295c <_ZNK8lexxhard19actuator_controller8actuator8get_infoEv+0xb0>
 80428dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        bool ready() const {return device_is_ready(dev);}
 80428e0:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        float current_a{adc_voltage_mv * 1e-3f / AMP_GAIN * VOLTAGE_DIVIDER / SHUNT_REGISTER};
 80428e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80428e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80428ec:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8042960 <_ZNK8lexxhard19actuator_controller8actuator8get_infoEv+0xb4>
 80428f0:	ee87 8a27 	vdiv.f32	s16, s14, s15
        return static_cast<int32_t>(current_a * 1e+3f);
 80428f4:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8042964 <_ZNK8lexxhard19actuator_controller8actuator8get_infoEv+0xb8>
 80428f8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80428fc:	eebd 8ac8 	vcvt.s32.f32	s16, s16
        bool ready() const {return device_is_ready(dev);}
 8042900:	f011 fbea 	bl	80540d8 <device_is_ready>
            return ready() ? gpio_pin_get(dev, pin) == 0 : false;
 8042904:	b1b0      	cbz	r0, 8042934 <_ZNK8lexxhard19actuator_controller8actuator8get_infoEv+0x88>
 8042906:	e9d4 4025 	ldrd	r4, r0, [r4, #148]	; 0x94
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_port_get(const struct device *port,
				gpio_port_value_t *value)
{
	const struct gpio_driver_data *const data =
 804290a:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return api->port_get_raw(port, value);
 804290e:	6883      	ldr	r3, [r0, #8]
 8042910:	a901      	add	r1, sp, #4
 8042912:	685b      	ldr	r3, [r3, #4]
 8042914:	4798      	blx	r3
			(const struct gpio_driver_data *)port->data;
	int ret;

	ret = gpio_port_get_raw(port, value);
	if (ret == 0) {
 8042916:	b950      	cbnz	r0, 804292e <_ZNK8lexxhard19actuator_controller8actuator8get_infoEv+0x82>
		*value ^= data->invert;
 8042918:	f8d9 3000 	ldr.w	r3, [r9]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 804291c:	b2e4      	uxtb	r4, r4
		*value ^= data->invert;
 804291e:	9a01      	ldr	r2, [sp, #4]
 8042920:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8042922:	2301      	movs	r3, #1
 8042924:	40a3      	lsls	r3, r4
 8042926:	421a      	tst	r2, r3
 8042928:	bf14      	ite	ne
 804292a:	2001      	movne	r0, #1
 804292c:	2000      	moveq	r0, #0
 804292e:	fab0 f080 	clz	r0, r0
 8042932:	0940      	lsrs	r0, r0, #5
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8042934:	f888 0002 	strb.w	r0, [r8, #2]
    }
 8042938:	4640      	mov	r0, r8
 804293a:	f888 7000 	strb.w	r7, [r8]
 804293e:	f888 6001 	strb.w	r6, [r8, #1]
 8042942:	ed88 8a01 	vstr	s16, [r8, #4]
 8042946:	f8c8 5008 	str.w	r5, [r8, #8]
 804294a:	b003      	add	sp, #12
 804294c:	ecbd 8b02 	vpop	{d8}
 8042950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            calc_current(current_adc >= 0 ? adc_reader::get(current_adc) : 0),
 8042954:	2000      	movs	r0, #0
 8042956:	e7bb      	b.n	80428d0 <_ZNK8lexxhard19actuator_controller8actuator8get_infoEv+0x24>
 8042958:	3a83126f 	.word	0x3a83126f
 804295c:	42480000 	.word	0x42480000
 8042960:	3c23d70a 	.word	0x3c23d70a
 8042964:	447a0000 	.word	0x447a0000

08042968 <_ZN8lexxhard19actuator_controller4infoEPK5shelljPPc>:
    impl.set_current_monitor();
    return 0;
}

int info(const shell *shell, size_t argc, char **argv)
{
 8042968:	b5f0      	push	{r4, r5, r6, r7, lr}
 804296a:	4d13      	ldr	r5, [pc, #76]	; (80429b8 <_ZN8lexxhard19actuator_controller4infoEPK5shelljPPc+0x50>)
        for (uint32_t i{0}; i < ACTUATOR_NUM; ++i) {
 804296c:	2400      	movs	r4, #0
            shell_print(shell,
 804296e:	4f13      	ldr	r7, [pc, #76]	; (80429bc <_ZN8lexxhard19actuator_controller4infoEPK5shelljPPc+0x54>)
{
 8042970:	b08b      	sub	sp, #44	; 0x2c
        shell_print(shell, "[notice] The order changed from Left-Center-Right(prev) -> Center-Left-Right(NOW)");
 8042972:	4a13      	ldr	r2, [pc, #76]	; (80429c0 <_ZN8lexxhard19actuator_controller4infoEPK5shelljPPc+0x58>)
 8042974:	2100      	movs	r1, #0
{
 8042976:	4606      	mov	r6, r0
        shell_print(shell, "[notice] The order changed from Left-Center-Right(prev) -> Center-Left-Right(NOW)");
 8042978:	f013 ffa1 	bl	80568be <shell_fprintf>
            auto [pulse, current, fail, direction, duty]{act[i].get_info()};
 804297c:	4629      	mov	r1, r5
 804297e:	a807      	add	r0, sp, #28
 8042980:	f7ff ff94 	bl	80428ac <_ZNK8lexxhard19actuator_controller8actuator8get_infoEv>
            shell_print(shell,
 8042984:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8042988:	463a      	mov	r2, r7
 804298a:	2100      	movs	r1, #0
 804298c:	9304      	str	r3, [sp, #16]
 804298e:	4630      	mov	r0, r6
 8042990:	f99d 301d 	ldrsb.w	r3, [sp, #29]
        for (uint32_t i{0}; i < ACTUATOR_NUM; ++i) {
 8042994:	359c      	adds	r5, #156	; 0x9c
            shell_print(shell,
 8042996:	9303      	str	r3, [sp, #12]
 8042998:	f89d 301e 	ldrb.w	r3, [sp, #30]
 804299c:	9302      	str	r3, [sp, #8]
 804299e:	9b08      	ldr	r3, [sp, #32]
 80429a0:	9301      	str	r3, [sp, #4]
 80429a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80429a4:	9300      	str	r3, [sp, #0]
 80429a6:	4623      	mov	r3, r4
        for (uint32_t i{0}; i < ACTUATOR_NUM; ++i) {
 80429a8:	3401      	adds	r4, #1
            shell_print(shell,
 80429aa:	f013 ff88 	bl	80568be <shell_fprintf>
        for (uint32_t i{0}; i < ACTUATOR_NUM; ++i) {
 80429ae:	2c03      	cmp	r4, #3
 80429b0:	d1e4      	bne.n	804297c <_ZN8lexxhard19actuator_controller4infoEPK5shelljPPc+0x14>
    impl.info(shell);
    return 0;
}
 80429b2:	2000      	movs	r0, #0
 80429b4:	b00b      	add	sp, #44	; 0x2c
 80429b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80429b8:	20022a10 	.word	0x20022a10
 80429bc:	0805e71a 	.word	0x0805e71a
 80429c0:	0805e6a0 	.word	0x0805e6a0

080429c4 <_ZN8lexxhard19actuator_controller24actuator_controller_impl13init_locationEv>:
    int init_location() {
 80429c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        LOG_INF("initialize location.");
 80429c8:	4c2e      	ldr	r4, [pc, #184]	; (8042a84 <_ZN8lexxhard19actuator_controller24actuator_controller_impl13init_locationEv+0xc0>)
    int init_location() {
 80429ca:	4606      	mov	r6, r0
        LOG_INF("initialize location.");
 80429cc:	6823      	ldr	r3, [r4, #0]
 80429ce:	f003 0307 	and.w	r3, r3, #7
 80429d2:	2b02      	cmp	r3, #2
 80429d4:	d909      	bls.n	80429ea <_ZN8lexxhard19actuator_controller24actuator_controller_impl13init_locationEv+0x26>
 *
 * @return Source ID.
 */
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
 80429d6:	4b2c      	ldr	r3, [pc, #176]	; (8042a88 <_ZN8lexxhard19actuator_controller24actuator_controller_impl13init_locationEv+0xc4>)
 80429d8:	f04f 0103 	mov.w	r1, #3
 80429dc:	482b      	ldr	r0, [pc, #172]	; (8042a8c <_ZN8lexxhard19actuator_controller24actuator_controller_impl13init_locationEv+0xc8>)
 80429de:	1ae3      	subs	r3, r4, r3
			sizeof(struct log_source_dynamic_data);
 80429e0:	089b      	lsrs	r3, r3, #2
 80429e2:	f363 118f 	bfi	r1, r3, #6, #10
 80429e6:	f013 fafe 	bl	8055fe6 <log_0>
        location_initialized = false;
 80429ea:	2700      	movs	r7, #0
        pwm_trampoline_all(msg_control::DOWN, 100);
 80429ec:	2164      	movs	r1, #100	; 0x64
 80429ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        location_initialized = false;
 80429f2:	f886 71f4 	strb.w	r7, [r6, #500]	; 0x1f4
        pwm_trampoline_all(msg_control::DOWN, 100);
 80429f6:	f7ff ff3d 	bl	8042874 <_ZNK8lexxhard19actuator_controller24actuator_controller_impl18pwm_trampoline_allEih.isra.0>
        bool stopped{wait_actuator_stop(30000, 100)};
 80429fa:	f247 5130 	movw	r1, #30000	; 0x7530
 80429fe:	2264      	movs	r2, #100	; 0x64
 8042a00:	4630      	mov	r0, r6
 8042a02:	f011 fb7c 	bl	80540fe <_ZN8lexxhard19actuator_controller24actuator_controller_impl18wait_actuator_stopEjj>
 8042a06:	4605      	mov	r5, r0
        pwm_trampoline_all(msg_control::STOP);
 8042a08:	4639      	mov	r1, r7
 8042a0a:	4638      	mov	r0, r7
 8042a0c:	f7ff ff32 	bl	8042874 <_ZNK8lexxhard19actuator_controller24actuator_controller_impl18pwm_trampoline_allEih.isra.0>
        if (!stopped || can_controller::is_emergency()) {
 8042a10:	b985      	cbnz	r5, 8042a34 <_ZN8lexxhard19actuator_controller24actuator_controller_impl13init_locationEv+0x70>
            LOG_WRN("can not initialize location.");
 8042a12:	6823      	ldr	r3, [r4, #0]
 8042a14:	f013 0f06 	tst.w	r3, #6
 8042a18:	d009      	beq.n	8042a2e <_ZN8lexxhard19actuator_controller24actuator_controller_impl13init_locationEv+0x6a>
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
 8042a1a:	4b1b      	ldr	r3, [pc, #108]	; (8042a88 <_ZN8lexxhard19actuator_controller24actuator_controller_impl13init_locationEv+0xc4>)
 8042a1c:	f04f 0102 	mov.w	r1, #2
 8042a20:	481b      	ldr	r0, [pc, #108]	; (8042a90 <_ZN8lexxhard19actuator_controller24actuator_controller_impl13init_locationEv+0xcc>)
 8042a22:	1ae4      	subs	r4, r4, r3
			sizeof(struct log_source_dynamic_data);
 8042a24:	08a4      	lsrs	r4, r4, #2
 8042a26:	f364 118f 	bfi	r1, r4, #6, #10
 8042a2a:	f013 fadc 	bl	8055fe6 <log_0>
 8042a2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8042a32:	e024      	b.n	8042a7e <_ZN8lexxhard19actuator_controller24actuator_controller_impl13init_locationEv+0xba>
        if (!stopped || can_controller::is_emergency()) {
 8042a34:	f000 faa4 	bl	8042f80 <_ZN8lexxhard14can_controller12is_emergencyEv>
 8042a38:	4605      	mov	r5, r0
 8042a3a:	2800      	cmp	r0, #0
 8042a3c:	d1e9      	bne.n	8042a12 <_ZN8lexxhard19actuator_controller24actuator_controller_impl13init_locationEv+0x4e>
 8042a3e:	4634      	mov	r4, r6
 8042a40:	f506 78ea 	add.w	r8, r6, #468	; 0x1d4
        pulse_value = prev_pulse_value = 0;
 8042a44:	270a      	movs	r7, #10
 8042a46:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
        int16_t count{static_cast<int16_t>(tim->CNT)};
 8042a4a:	6a22      	ldr	r2, [r4, #32]
 8042a4c:	6a53      	ldr	r3, [r2, #36]	; 0x24
        tim->CNT = 0;
 8042a4e:	6255      	str	r5, [r2, #36]	; 0x24
        return -count;
 8042a50:	425b      	negs	r3, r3
        pulse_value += pulse;
 8042a52:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8042a54:	fa02 f383 	sxtah	r3, r2, r3
        int32_t value{pulse_value - prev_pulse_value};
 8042a58:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
            if (get_delta_pulse() == 0)
 8042a5a:	429a      	cmp	r2, r3
        pulse_value += pulse;
 8042a5c:	67a3      	str	r3, [r4, #120]	; 0x78
        prev_pulse_value = pulse_value;
 8042a5e:	67e3      	str	r3, [r4, #124]	; 0x7c
            if (get_delta_pulse() == 0)
 8042a60:	d004      	beq.n	8042a6c <_ZN8lexxhard19actuator_controller24actuator_controller_impl13init_locationEv+0xa8>
            k_msleep(100);
 8042a62:	2064      	movs	r0, #100	; 0x64
 8042a64:	f011 fb44 	bl	80540f0 <k_msleep.isra.0>
        for (int i{0}; i < 10; ++i) {
 8042a68:	3f01      	subs	r7, #1
 8042a6a:	d1ee      	bne.n	8042a4a <_ZN8lexxhard19actuator_controller24actuator_controller_impl13init_locationEv+0x86>
        pulse_value = prev_pulse_value = 0;
 8042a6c:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
        for (uint32_t i{0}; i < ACTUATOR_NUM; ++i)
 8042a70:	349c      	adds	r4, #156	; 0x9c
 8042a72:	4544      	cmp	r4, r8
 8042a74:	d1e6      	bne.n	8042a44 <_ZN8lexxhard19actuator_controller24actuator_controller_impl13init_locationEv+0x80>
        location_initialized = true;
 8042a76:	2301      	movs	r3, #1
        return 0;
 8042a78:	2000      	movs	r0, #0
        location_initialized = true;
 8042a7a:	f886 31f4 	strb.w	r3, [r6, #500]	; 0x1f4
    }
 8042a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8042a82:	bf00      	nop
 8042a84:	200208cc 	.word	0x200208cc
 8042a88:	200208c8 	.word	0x200208c8
 8042a8c:	0805e76b 	.word	0x0805e76b
 8042a90:	0805e763 	.word	0x0805e763

08042a94 <_ZN8lexxhard19actuator_controller8cmd_initEPK5shelljPPc>:
{
 8042a94:	b510      	push	{r4, lr}
    shell_print(shell, "[notice] The order changed from Left-Center-Right(prev) -> Center-Left-Right(NOW)");
 8042a96:	4a08      	ldr	r2, [pc, #32]	; (8042ab8 <_ZN8lexxhard19actuator_controller8cmd_initEPK5shelljPPc+0x24>)
 8042a98:	2100      	movs	r1, #0
{
 8042a9a:	4604      	mov	r4, r0
    shell_print(shell, "[notice] The order changed from Left-Center-Right(prev) -> Center-Left-Right(NOW)");
 8042a9c:	f013 ff0f 	bl	80568be <shell_fprintf>
    if (impl.init_location() != 0)
 8042aa0:	4806      	ldr	r0, [pc, #24]	; (8042abc <_ZN8lexxhard19actuator_controller8cmd_initEPK5shelljPPc+0x28>)
 8042aa2:	f7ff ff8f 	bl	80429c4 <_ZN8lexxhard19actuator_controller24actuator_controller_impl13init_locationEv>
 8042aa6:	b120      	cbz	r0, 8042ab2 <_ZN8lexxhard19actuator_controller8cmd_initEPK5shelljPPc+0x1e>
        shell_print(shell, "init error.");
 8042aa8:	4a05      	ldr	r2, [pc, #20]	; (8042ac0 <_ZN8lexxhard19actuator_controller8cmd_initEPK5shelljPPc+0x2c>)
 8042aaa:	2100      	movs	r1, #0
 8042aac:	4620      	mov	r0, r4
 8042aae:	f013 ff06 	bl	80568be <shell_fprintf>
}
 8042ab2:	2000      	movs	r0, #0
 8042ab4:	bd10      	pop	{r4, pc}
 8042ab6:	bf00      	nop
 8042ab8:	0805e6a0 	.word	0x0805e6a0
 8042abc:	200229f0 	.word	0x200229f0
 8042ac0:	0805e780 	.word	0x0805e780

08042ac4 <_ZN8lexxhard19actuator_controller24actuator_controller_impl11to_locationERA3_KhS4_RA3_h>:
    int to_location(const uint8_t (&location)[ACTUATOR_NUM], const uint8_t (&power)[ACTUATOR_NUM], uint8_t (&detail)[ACTUATOR_NUM]) {
 8042ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        LOG_INF("move location.");
 8042ac8:	4c36      	ldr	r4, [pc, #216]	; (8042ba4 <_ZN8lexxhard19actuator_controller24actuator_controller_impl11to_locationERA3_KhS4_RA3_h+0xe0>)
    int to_location(const uint8_t (&location)[ACTUATOR_NUM], const uint8_t (&power)[ACTUATOR_NUM], uint8_t (&detail)[ACTUATOR_NUM]) {
 8042aca:	4698      	mov	r8, r3
 8042acc:	4606      	mov	r6, r0
 8042ace:	460d      	mov	r5, r1
        LOG_INF("move location.");
 8042ad0:	6823      	ldr	r3, [r4, #0]
    int to_location(const uint8_t (&location)[ACTUATOR_NUM], const uint8_t (&power)[ACTUATOR_NUM], uint8_t (&detail)[ACTUATOR_NUM]) {
 8042ad2:	4617      	mov	r7, r2
        LOG_INF("move location.");
 8042ad4:	f003 0307 	and.w	r3, r3, #7
 8042ad8:	2b02      	cmp	r3, #2
 8042ada:	d909      	bls.n	8042af0 <_ZN8lexxhard19actuator_controller24actuator_controller_impl11to_locationERA3_KhS4_RA3_h+0x2c>
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
 8042adc:	4b32      	ldr	r3, [pc, #200]	; (8042ba8 <_ZN8lexxhard19actuator_controller24actuator_controller_impl11to_locationERA3_KhS4_RA3_h+0xe4>)
 8042ade:	f04f 0103 	mov.w	r1, #3
 8042ae2:	4832      	ldr	r0, [pc, #200]	; (8042bac <_ZN8lexxhard19actuator_controller24actuator_controller_impl11to_locationERA3_KhS4_RA3_h+0xe8>)
 8042ae4:	1ae3      	subs	r3, r4, r3
			sizeof(struct log_source_dynamic_data);
 8042ae6:	089b      	lsrs	r3, r3, #2
 8042ae8:	f363 118f 	bfi	r1, r3, #6, #10
 8042aec:	f013 fa7b 	bl	8055fe6 <log_0>
        if (!location_initialized) {
 8042af0:	f896 31f4 	ldrb.w	r3, [r6, #500]	; 0x1f4
 8042af4:	b9c3      	cbnz	r3, 8042b28 <_ZN8lexxhard19actuator_controller24actuator_controller_impl11to_locationERA3_KhS4_RA3_h+0x64>
                detail[i] = 3;
 8042af6:	2303      	movs	r3, #3
 8042af8:	f888 3000 	strb.w	r3, [r8]
 8042afc:	f888 3001 	strb.w	r3, [r8, #1]
 8042b00:	f888 3002 	strb.w	r3, [r8, #2]
            LOG_WRN("location not initialized.");
 8042b04:	6823      	ldr	r3, [r4, #0]
 8042b06:	f013 0f06 	tst.w	r3, #6
 8042b0a:	d102      	bne.n	8042b12 <_ZN8lexxhard19actuator_controller24actuator_controller_impl11to_locationERA3_KhS4_RA3_h+0x4e>
            return -1;
 8042b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8042b10:	e045      	b.n	8042b9e <_ZN8lexxhard19actuator_controller24actuator_controller_impl11to_locationERA3_KhS4_RA3_h+0xda>
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
 8042b12:	4b25      	ldr	r3, [pc, #148]	; (8042ba8 <_ZN8lexxhard19actuator_controller24actuator_controller_impl11to_locationERA3_KhS4_RA3_h+0xe4>)
            LOG_WRN("location not initialized.");
 8042b14:	f04f 0102 	mov.w	r1, #2
 8042b18:	4825      	ldr	r0, [pc, #148]	; (8042bb0 <_ZN8lexxhard19actuator_controller24actuator_controller_impl11to_locationERA3_KhS4_RA3_h+0xec>)
 8042b1a:	1ae4      	subs	r4, r4, r3
			sizeof(struct log_source_dynamic_data);
 8042b1c:	08a4      	lsrs	r4, r4, #2
 8042b1e:	f364 118f 	bfi	r1, r4, #6, #10
            LOG_WRN("unable to move location.");
 8042b22:	f013 fa60 	bl	8055fe6 <log_0>
 8042b26:	e7f1      	b.n	8042b0c <_ZN8lexxhard19actuator_controller24actuator_controller_impl11to_locationERA3_KhS4_RA3_h+0x48>
 8042b28:	1e68      	subs	r0, r5, #1
 8042b2a:	3f01      	subs	r7, #1
 8042b2c:	4632      	mov	r2, r6
 8042b2e:	3502      	adds	r5, #2
        this->vel_max = 20 * target_power / 100;
 8042b30:	f04f 0c64 	mov.w	ip, #100	; 0x64
        activated = true;
 8042b34:	f04f 0e01 	mov.w	lr, #1
            act[i].to_location(location[i], power[i]);
 8042b38:	f817 3f01 	ldrb.w	r3, [r7, #1]!
        for (uint32_t i{0}; i < ACTUATOR_NUM; ++i)
 8042b3c:	329c      	adds	r2, #156	; 0x9c
            act[i].to_location(location[i], power[i]);
 8042b3e:	f810 1f01 	ldrb.w	r1, [r0, #1]!
        this->vel_max = 20 * target_power / 100;
 8042b42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        activated = true;
 8042b46:	f882 e00c 	strb.w	lr, [r2, #12]
            act[i].to_location(location[i], power[i]);
 8042b4a:	6011      	str	r1, [r2, #0]
        for (uint32_t i{0}; i < ACTUATOR_NUM; ++i)
 8042b4c:	42a8      	cmp	r0, r5
        this->vel_max = 20 * target_power / 100;
 8042b4e:	ea4f 0183 	mov.w	r1, r3, lsl #2
        this->vel_min = 10 * target_power / 100;
 8042b52:	ea4f 0343 	mov.w	r3, r3, lsl #1
        this->vel_max = 20 * target_power / 100;
 8042b56:	fbb1 f1fc 	udiv	r1, r1, ip
        this->vel_min = 10 * target_power / 100;
 8042b5a:	fbb3 f3fc 	udiv	r3, r3, ip
        this->vel_max = 20 * target_power / 100;
 8042b5e:	6051      	str	r1, [r2, #4]
        this->vel_min = 10 * target_power / 100;
 8042b60:	6093      	str	r3, [r2, #8]
        for (uint32_t i{0}; i < ACTUATOR_NUM; ++i)
 8042b62:	d1e9      	bne.n	8042b38 <_ZN8lexxhard19actuator_controller24actuator_controller_impl11to_locationERA3_KhS4_RA3_h+0x74>
        bool stopped{wait_actuator_stop(30000, 100)};
 8042b64:	f247 5130 	movw	r1, #30000	; 0x7530
 8042b68:	2264      	movs	r2, #100	; 0x64
 8042b6a:	4630      	mov	r0, r6
 8042b6c:	f011 fac7 	bl	80540fe <_ZN8lexxhard19actuator_controller24actuator_controller_impl18wait_actuator_stopEjj>
        pwm_trampoline_all(msg_control::STOP);
 8042b70:	2100      	movs	r1, #0
        bool stopped{wait_actuator_stop(30000, 100)};
 8042b72:	4605      	mov	r5, r0
        pwm_trampoline_all(msg_control::STOP);
 8042b74:	4608      	mov	r0, r1
 8042b76:	f7ff fe7d 	bl	8042874 <_ZNK8lexxhard19actuator_controller24actuator_controller_impl18pwm_trampoline_allEih.isra.0>
        if (!stopped || can_controller::is_emergency()) {
 8042b7a:	b965      	cbnz	r5, 8042b96 <_ZN8lexxhard19actuator_controller24actuator_controller_impl11to_locationERA3_KhS4_RA3_h+0xd2>
            LOG_WRN("unable to move location.");
 8042b7c:	6823      	ldr	r3, [r4, #0]
 8042b7e:	f013 0f06 	tst.w	r3, #6
 8042b82:	d0c3      	beq.n	8042b0c <_ZN8lexxhard19actuator_controller24actuator_controller_impl11to_locationERA3_KhS4_RA3_h+0x48>
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
 8042b84:	4b08      	ldr	r3, [pc, #32]	; (8042ba8 <_ZN8lexxhard19actuator_controller24actuator_controller_impl11to_locationERA3_KhS4_RA3_h+0xe4>)
 8042b86:	f04f 0102 	mov.w	r1, #2
 8042b8a:	480a      	ldr	r0, [pc, #40]	; (8042bb4 <_ZN8lexxhard19actuator_controller24actuator_controller_impl11to_locationERA3_KhS4_RA3_h+0xf0>)
 8042b8c:	1ae4      	subs	r4, r4, r3
			sizeof(struct log_source_dynamic_data);
 8042b8e:	08a4      	lsrs	r4, r4, #2
 8042b90:	f364 118f 	bfi	r1, r4, #6, #10
 8042b94:	e7c5      	b.n	8042b22 <_ZN8lexxhard19actuator_controller24actuator_controller_impl11to_locationERA3_KhS4_RA3_h+0x5e>
        if (!stopped || can_controller::is_emergency()) {
 8042b96:	f000 f9f3 	bl	8042f80 <_ZN8lexxhard14can_controller12is_emergencyEv>
 8042b9a:	2800      	cmp	r0, #0
 8042b9c:	d1ee      	bne.n	8042b7c <_ZN8lexxhard19actuator_controller24actuator_controller_impl11to_locationERA3_KhS4_RA3_h+0xb8>
    }
 8042b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8042ba2:	bf00      	nop
 8042ba4:	200208cc 	.word	0x200208cc
 8042ba8:	200208c8 	.word	0x200208c8
 8042bac:	0805e7b1 	.word	0x0805e7b1
 8042bb0:	0805e78d 	.word	0x0805e78d
 8042bb4:	0805e7a7 	.word	0x0805e7a7

08042bb8 <_ZN8lexxhard19actuator_controller6locateEPK5shelljPPc>:
{
 8042bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8042bbc:	460d      	mov	r5, r1
 8042bbe:	b087      	sub	sp, #28
 8042bc0:	4614      	mov	r4, r2
    shell_print(shell, "[notice] The order changed from Left-Center-Right(prev) -> Center-Left-Right(NOW)");
 8042bc2:	2100      	movs	r1, #0
 8042bc4:	4a26      	ldr	r2, [pc, #152]	; (8042c60 <_ZN8lexxhard19actuator_controller6locateEPK5shelljPPc+0xa8>)
{
 8042bc6:	4606      	mov	r6, r0
    shell_print(shell, "[notice] The order changed from Left-Center-Right(prev) -> Center-Left-Right(NOW)");
 8042bc8:	f013 fe79 	bl	80568be <shell_fprintf>
    uint8_t location[ACTUATOR_NUM]{0, 0, 0}, power[ACTUATOR_NUM]{0, 0, 0}, detail[ACTUATOR_NUM]{0, 0, 0};
 8042bcc:	4b25      	ldr	r3, [pc, #148]	; (8042c64 <_ZN8lexxhard19actuator_controller6locateEPK5shelljPPc+0xac>)
 8042bce:	f10d 080c 	add.w	r8, sp, #12
 8042bd2:	881a      	ldrh	r2, [r3, #0]
 8042bd4:	789b      	ldrb	r3, [r3, #2]
 8042bd6:	f8ad 200c 	strh.w	r2, [sp, #12]
 8042bda:	f888 3002 	strb.w	r3, [r8, #2]
 8042bde:	f88d 3012 	strb.w	r3, [sp, #18]
 8042be2:	f88d 3016 	strb.w	r3, [sp, #22]
    if (argc != 3 && argc != 5 && argc != 7) {
 8042be6:	f025 0304 	bic.w	r3, r5, #4
    uint8_t location[ACTUATOR_NUM]{0, 0, 0}, power[ACTUATOR_NUM]{0, 0, 0}, detail[ACTUATOR_NUM]{0, 0, 0};
 8042bea:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (argc != 3 && argc != 5 && argc != 7) {
 8042bee:	2b03      	cmp	r3, #3
    uint8_t location[ACTUATOR_NUM]{0, 0, 0}, power[ACTUATOR_NUM]{0, 0, 0}, detail[ACTUATOR_NUM]{0, 0, 0};
 8042bf0:	f8ad 2014 	strh.w	r2, [sp, #20]
    if (argc != 3 && argc != 5 && argc != 7) {
 8042bf4:	d00e      	beq.n	8042c14 <_ZN8lexxhard19actuator_controller6locateEPK5shelljPPc+0x5c>
 8042bf6:	2d05      	cmp	r5, #5
 8042bf8:	d00c      	beq.n	8042c14 <_ZN8lexxhard19actuator_controller6locateEPK5shelljPPc+0x5c>
        shell_error(shell, "Usage: %s %s <location> <power> ...\n", argv[-1], argv[0]);
 8042bfa:	6823      	ldr	r3, [r4, #0]
 8042bfc:	4630      	mov	r0, r6
 8042bfe:	4a1a      	ldr	r2, [pc, #104]	; (8042c68 <_ZN8lexxhard19actuator_controller6locateEPK5shelljPPc+0xb0>)
 8042c00:	2102      	movs	r1, #2
 8042c02:	9300      	str	r3, [sp, #0]
 8042c04:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8042c08:	f013 fe59 	bl	80568be <shell_fprintf>
        return 1;
 8042c0c:	2001      	movs	r0, #1
}
 8042c0e:	b007      	add	sp, #28
 8042c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for (size_t i{0}, end{argc / 2}; i < end; ++i) {
 8042c14:	086d      	lsrs	r5, r5, #1
 8042c16:	3404      	adds	r4, #4
 8042c18:	f10d 0910 	add.w	r9, sp, #16
 8042c1c:	2700      	movs	r7, #0
 8042c1e:	42af      	cmp	r7, r5
 8042c20:	f104 0408 	add.w	r4, r4, #8
 8042c24:	d00d      	beq.n	8042c42 <_ZN8lexxhard19actuator_controller6locateEPK5shelljPPc+0x8a>
        location[i] = atoi(argv[i * 2 + 1]);
 8042c26:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8042c2a:	f018 f8c0 	bl	805adae <atoi>
 8042c2e:	f808 0007 	strb.w	r0, [r8, r7]
        power[i]    = atoi(argv[i * 2 + 2]);
 8042c32:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8042c36:	3701      	adds	r7, #1
 8042c38:	f018 f8b9 	bl	805adae <atoi>
 8042c3c:	f809 0b01 	strb.w	r0, [r9], #1
    for (size_t i{0}, end{argc / 2}; i < end; ++i) {
 8042c40:	e7ed      	b.n	8042c1e <_ZN8lexxhard19actuator_controller6locateEPK5shelljPPc+0x66>
    if (impl.to_location(location, power, detail) != 0)
 8042c42:	ab05      	add	r3, sp, #20
 8042c44:	aa04      	add	r2, sp, #16
 8042c46:	4641      	mov	r1, r8
 8042c48:	4808      	ldr	r0, [pc, #32]	; (8042c6c <_ZN8lexxhard19actuator_controller6locateEPK5shelljPPc+0xb4>)
 8042c4a:	f7ff ff3b 	bl	8042ac4 <_ZN8lexxhard19actuator_controller24actuator_controller_impl11to_locationERA3_KhS4_RA3_h>
 8042c4e:	2800      	cmp	r0, #0
 8042c50:	d0dd      	beq.n	8042c0e <_ZN8lexxhard19actuator_controller6locateEPK5shelljPPc+0x56>
        shell_print(shell, "location error.");
 8042c52:	4630      	mov	r0, r6
 8042c54:	4a06      	ldr	r2, [pc, #24]	; (8042c70 <_ZN8lexxhard19actuator_controller6locateEPK5shelljPPc+0xb8>)
 8042c56:	2100      	movs	r1, #0
 8042c58:	f013 fe31 	bl	80568be <shell_fprintf>
    return 0;
 8042c5c:	2000      	movs	r0, #0
 8042c5e:	e7d6      	b.n	8042c0e <_ZN8lexxhard19actuator_controller6locateEPK5shelljPPc+0x56>
 8042c60:	0805e6a0 	.word	0x0805e6a0
 8042c64:	0805c450 	.word	0x0805c450
 8042c68:	0805e7c0 	.word	0x0805e7c0
 8042c6c:	200229f0 	.word	0x200229f0
 8042c70:	0805e7e6 	.word	0x0805e7e6

08042c74 <_GLOBAL__sub_I_HAL_TIM_Encoder_MspInit>:
k_thread thread;
k_msgq msgq, msgq_control;

// k_msgq msgq_can_actuator_control;

}
 8042c74:	b570      	push	{r4, r5, r6, lr}
 8042c76:	4b0f      	ldr	r3, [pc, #60]	; (8042cb4 <_GLOBAL__sub_I_HAL_TIM_Encoder_MspInit+0x40>)
 8042c78:	2403      	movs	r4, #3
class actuator_controller_impl {
 8042c7a:	2500      	movs	r5, #0
    position_control(counter &cnt) : cnt(cnt) {}
 8042c7c:	2600      	movs	r6, #0
class actuator_controller_impl {
 8042c7e:	229c      	movs	r2, #156	; 0x9c
 8042c80:	2100      	movs	r1, #0
 8042c82:	4618      	mov	r0, r3
 8042c84:	f018 f8e2 	bl	805ae4c <memset>
    position_control(counter &cnt) : cnt(cnt) {}
 8042c88:	220a      	movs	r2, #10
 8042c8a:	2114      	movs	r1, #20
class actuator_controller_impl {
 8042c8c:	4603      	mov	r3, r0
    position_control(counter &cnt) : cnt(cnt) {}
 8042c8e:	6740      	str	r0, [r0, #116]	; 0x74
class actuator_controller_impl {
 8042c90:	339c      	adds	r3, #156	; 0x9c
    position_control(counter &cnt) : cnt(cnt) {}
 8042c92:	6786      	str	r6, [r0, #120]	; 0x78
 8042c94:	67c5      	str	r5, [r0, #124]	; 0x7c
 8042c96:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
 8042c9a:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
class actuator {
 8042c9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
class actuator_controller_impl {
 8042ca2:	18a4      	adds	r4, r4, r2
class actuator {
 8042ca4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
class actuator_controller_impl {
 8042ca8:	d1e9      	bne.n	8042c7e <_GLOBAL__sub_I_HAL_TIM_Encoder_MspInit+0xa>
 8042caa:	4b03      	ldr	r3, [pc, #12]	; (8042cb8 <_GLOBAL__sub_I_HAL_TIM_Encoder_MspInit+0x44>)
 8042cac:	f883 41f4 	strb.w	r4, [r3, #500]	; 0x1f4
}
 8042cb0:	bd70      	pop	{r4, r5, r6, pc}
 8042cb2:	bf00      	nop
 8042cb4:	20022a10 	.word	0x20022a10
 8042cb8:	200229f0 	.word	0x200229f0

08042cbc <_ZN8lexxhard10adc_reader3getEi>:
            read_all_channels();
            k_msleep(20);
        }
    }
    int32_t get(int index) const {
        int32_t value{buffer[index]};
 8042cbc:	4b0a      	ldr	r3, [pc, #40]	; (8042ce8 <_ZN8lexxhard10adc_reader3getEi+0x2c>)
{
    impl.run();
}

int32_t get(int index)
{
 8042cbe:	b513      	push	{r0, r1, r4, lr}
        int32_t value{buffer[index]};
 8042cc0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 * @return a positive value is the reference voltage value.  Returns
 * zero if reference voltage information is not available.
 */
static inline uint16_t adc_ref_internal(const struct device *dev)
{
	const struct adc_driver_api *api =
 8042cc4:	681b      	ldr	r3, [r3, #0]
				(const struct adc_driver_api *)dev->api;

	return api->ref_internal;
 8042cc6:	689b      	ldr	r3, [r3, #8]
 8042cc8:	8884      	ldrh	r4, [r0, #4]
        if (int32_t ref{adc_ref_internal(dev)}; ref > 0)
 8042cca:	891b      	ldrh	r3, [r3, #8]
 8042ccc:	b143      	cbz	r3, 8042ce0 <_ZN8lexxhard10adc_reader3getEi+0x24>
	int32_t adc_mv = *valp * ref_mv;
 8042cce:	4363      	muls	r3, r4
	int ret = adc_gain_invert(gain, &adc_mv);
 8042cd0:	a901      	add	r1, sp, #4
 8042cd2:	2006      	movs	r0, #6
	int32_t adc_mv = *valp * ref_mv;
 8042cd4:	9301      	str	r3, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
 8042cd6:	f007 fc5f 	bl	804a598 <adc_gain_invert>
	if (ret == 0) {
 8042cda:	b908      	cbnz	r0, 8042ce0 <_ZN8lexxhard10adc_reader3getEi+0x24>
		*valp = (adc_mv >> resolution);
 8042cdc:	9c01      	ldr	r4, [sp, #4]
 8042cde:	1324      	asrs	r4, r4, #12
    return impl.get(index);
}
 8042ce0:	4620      	mov	r0, r4
 8042ce2:	b002      	add	sp, #8
 8042ce4:	bd10      	pop	{r4, pc}
 8042ce6:	bf00      	nop
 8042ce8:	20022be8 	.word	0x20022be8

08042cec <_GLOBAL__sub_I__ZN8lexxhard10adc_reader13log_const_adcE>:
class {
 8042cec:	4b01      	ldr	r3, [pc, #4]	; (8042cf4 <_GLOBAL__sub_I__ZN8lexxhard10adc_reader13log_const_adcE+0x8>)
 8042cee:	2200      	movs	r2, #0
 8042cf0:	601a      	str	r2, [r3, #0]

k_thread thread;

}
 8042cf2:	4770      	bx	lr
 8042cf4:	20022be8 	.word	0x20022be8

08042cf8 <_ZN8lexxhard14can_controller10brd_emgoffEPK5shelljPPc>:
                    bmu2ros.bmu_alarm1, bmu2ros.bmu_alarm2,
                    bmu2ros.max_cell_voltage.value, bmu2ros.max_cell_voltage.id, bmu2ros.min_cell_voltage.value, bmu2ros.min_cell_voltage.id,
                    bmu2ros.manufacturing, bmu2ros.inspection, bmu2ros.serial);
    }
    void brd_emgoff() {
        ros2board.emergency_stop = false;
 8042cf8:	4b03      	ldr	r3, [pc, #12]	; (8042d08 <_ZN8lexxhard14can_controller10brd_emgoffEPK5shelljPPc+0x10>)
 8042cfa:	2000      	movs	r0, #0
 8042cfc:	f883 0070 	strb.w	r0, [r3, #112]	; 0x70
        heartbeat_timeout = false;
 8042d00:	f883 0124 	strb.w	r0, [r3, #292]	; 0x124

int brd_emgoff(const shell *shell, size_t argc, char **argv)
{
    impl.brd_emgoff();
    return 0;
}
 8042d04:	4770      	bx	lr
 8042d06:	bf00      	nop
 8042d08:	20022c2c 	.word	0x20022c2c

08042d0c <_ZN8lexxhard14can_controller8bmu_infoEPK5shelljPPc>:
        shell_print(shell,
 8042d0c:	4b33      	ldr	r3, [pc, #204]	; (8042ddc <_ZN8lexxhard14can_controller8bmu_infoEPK5shelljPPc+0xd0>)
 8042d0e:	2100      	movs	r1, #0
{
 8042d10:	b500      	push	{lr}
        shell_print(shell,
 8042d12:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
{
 8042d14:	b0a7      	sub	sp, #156	; 0x9c
        shell_print(shell,
 8042d16:	9224      	str	r2, [sp, #144]	; 0x90
 8042d18:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8042d1a:	9223      	str	r2, [sp, #140]	; 0x8c
 8042d1c:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8042d1e:	9222      	str	r2, [sp, #136]	; 0x88
 8042d20:	7b9a      	ldrb	r2, [r3, #14]
 8042d22:	9221      	str	r2, [sp, #132]	; 0x84
 8042d24:	899a      	ldrh	r2, [r3, #12]
 8042d26:	9220      	str	r2, [sp, #128]	; 0x80
 8042d28:	7a9a      	ldrb	r2, [r3, #10]
 8042d2a:	921f      	str	r2, [sp, #124]	; 0x7c
 8042d2c:	891a      	ldrh	r2, [r3, #8]
 8042d2e:	921e      	str	r2, [sp, #120]	; 0x78
 8042d30:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8042d34:	921d      	str	r2, [sp, #116]	; 0x74
 8042d36:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8042d3a:	921c      	str	r2, [sp, #112]	; 0x70
 8042d3c:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8042d40:	921b      	str	r2, [sp, #108]	; 0x6c
 8042d42:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8042d46:	921a      	str	r2, [sp, #104]	; 0x68
 8042d48:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8042d4c:	9219      	str	r2, [sp, #100]	; 0x64
 8042d4e:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8042d52:	9218      	str	r2, [sp, #96]	; 0x60
 8042d54:	7f9a      	ldrb	r2, [r3, #30]
 8042d56:	9217      	str	r2, [sp, #92]	; 0x5c
 8042d58:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8042d5c:	9216      	str	r2, [sp, #88]	; 0x58
 8042d5e:	7e9a      	ldrb	r2, [r3, #26]
 8042d60:	9215      	str	r2, [sp, #84]	; 0x54
 8042d62:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8042d66:	9214      	str	r2, [sp, #80]	; 0x50
 8042d68:	7d9a      	ldrb	r2, [r3, #22]
 8042d6a:	9213      	str	r2, [sp, #76]	; 0x4c
 8042d6c:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8042d70:	9212      	str	r2, [sp, #72]	; 0x48
 8042d72:	7c9a      	ldrb	r2, [r3, #18]
 8042d74:	9211      	str	r2, [sp, #68]	; 0x44
 8042d76:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8042d7a:	9210      	str	r2, [sp, #64]	; 0x40
 8042d7c:	799a      	ldrb	r2, [r3, #6]
 8042d7e:	920f      	str	r2, [sp, #60]	; 0x3c
 8042d80:	889a      	ldrh	r2, [r3, #4]
 8042d82:	920e      	str	r2, [sp, #56]	; 0x38
 8042d84:	789a      	ldrb	r2, [r3, #2]
 8042d86:	920d      	str	r2, [sp, #52]	; 0x34
 8042d88:	881a      	ldrh	r2, [r3, #0]
 8042d8a:	920c      	str	r2, [sp, #48]	; 0x30
 8042d8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8042d8e:	920b      	str	r2, [sp, #44]	; 0x2c
 8042d90:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8042d92:	920a      	str	r2, [sp, #40]	; 0x28
 8042d94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8042d96:	9209      	str	r2, [sp, #36]	; 0x24
 8042d98:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8042d9a:	9208      	str	r2, [sp, #32]
 8042d9c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8042d9e:	9207      	str	r2, [sp, #28]
 8042da0:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8042da4:	9206      	str	r2, [sp, #24]
 8042da6:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8042daa:	9205      	str	r2, [sp, #20]
 8042dac:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8042db0:	9204      	str	r2, [sp, #16]
 8042db2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8042db6:	9203      	str	r2, [sp, #12]
 8042db8:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8042dbc:	9202      	str	r2, [sp, #8]
 8042dbe:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8042dc2:	9201      	str	r2, [sp, #4]
 8042dc4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8042dc8:	9200      	str	r2, [sp, #0]
 8042dca:	4a05      	ldr	r2, [pc, #20]	; (8042de0 <_ZN8lexxhard14can_controller8bmu_infoEPK5shelljPPc+0xd4>)
 8042dcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8042dd0:	f013 fd75 	bl	80568be <shell_fprintf>
}
 8042dd4:	2000      	movs	r0, #0
 8042dd6:	b027      	add	sp, #156	; 0x9c
 8042dd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8042ddc:	20022c2c 	.word	0x20022c2c
 8042de0:	0805e89c 	.word	0x0805e89c

08042de4 <_ZN8lexxhard14can_controller8brd_infoEPK5shelljPPc>:
        shell_print(shell,
 8042de4:	4b4d      	ldr	r3, [pc, #308]	; (8042f1c <_ZN8lexxhard14can_controller8brd_infoEPK5shelljPPc+0x138>)
    impl.brd_lockdown(enable);
    return 0;
}

int brd_info(const shell *shell, size_t argc, char **argv)
{
 8042de6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        shell_print(shell,
 8042dea:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
{
 8042dee:	b0b3      	sub	sp, #204	; 0xcc
        shell_print(shell,
 8042df0:	f893 c05a 	ldrb.w	ip, [r3, #90]	; 0x5a
 8042df4:	9227      	str	r2, [sp, #156]	; 0x9c
 8042df6:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 8042dfa:	f9b3 e054 	ldrsh.w	lr, [r3, #84]	; 0x54
 8042dfe:	9228      	str	r2, [sp, #160]	; 0xa0
 8042e00:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8042e04:	f893 106a 	ldrb.w	r1, [r3, #106]	; 0x6a
 8042e08:	9229      	str	r2, [sp, #164]	; 0xa4
 8042e0a:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
 8042e0e:	f893 406b 	ldrb.w	r4, [r3, #107]	; 0x6b
 8042e12:	922a      	str	r2, [sp, #168]	; 0xa8
 8042e14:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8042e18:	f893 505c 	ldrb.w	r5, [r3, #92]	; 0x5c
 8042e1c:	922b      	str	r2, [sp, #172]	; 0xac
 8042e1e:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 8042e22:	f893 606c 	ldrb.w	r6, [r3, #108]	; 0x6c
 8042e26:	922c      	str	r2, [sp, #176]	; 0xb0
 8042e28:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 8042e2c:	f893 706d 	ldrb.w	r7, [r3, #109]	; 0x6d
 8042e30:	922d      	str	r2, [sp, #180]	; 0xb4
 8042e32:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 8042e36:	f9b3 8056 	ldrsh.w	r8, [r3, #86]	; 0x56
 8042e3a:	922e      	str	r2, [sp, #184]	; 0xb8
 8042e3c:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 8042e40:	f9b3 9058 	ldrsh.w	r9, [r3, #88]	; 0x58
 8042e44:	922f      	str	r2, [sp, #188]	; 0xbc
 8042e46:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8042e4a:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8042f28 <_ZN8lexxhard14can_controller8brd_infoEPK5shelljPPc+0x144>
 8042e4e:	9230      	str	r2, [sp, #192]	; 0xc0
 8042e50:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8042e54:	9231      	str	r2, [sp, #196]	; 0xc4
 8042e56:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8042e5a:	4a31      	ldr	r2, [pc, #196]	; (8042f20 <_ZN8lexxhard14can_controller8brd_infoEPK5shelljPPc+0x13c>)
 8042e5c:	f893 b125 	ldrb.w	fp, [r3, #293]	; 0x125
 8042e60:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8042e64:	ed93 6a11 	vldr	s12, [r3, #68]	; 0x44
 8042e68:	f1bb 0f00 	cmp.w	fp, #0
 8042e6c:	bf18      	it	ne
 8042e6e:	4652      	movne	r2, sl
 8042e70:	f503 7a82 	add.w	sl, r3, #260	; 0x104
 8042e74:	ed93 5a12 	vldr	s10, [r3, #72]	; 0x48
 8042e78:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8042e7c:	ed93 4a13 	vldr	s8, [r3, #76]	; 0x4c
 8042e80:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
 8042e84:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8042e88:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8042f2c <_ZN8lexxhard14can_controller8brd_infoEPK5shelljPPc+0x148>
 8042e8c:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
 8042e90:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
 8042e94:	f893 a06e 	ldrb.w	sl, [r3, #110]	; 0x6e
 8042e98:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 8042e9c:	f893 a05e 	ldrb.w	sl, [r3, #94]	; 0x5e
 8042ea0:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
 8042ea4:	f893 a05d 	ldrb.w	sl, [r3, #93]	; 0x5d
 8042ea8:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
 8042eac:	ed93 3a14 	vldr	s6, [r3, #80]	; 0x50
 8042eb0:	921c      	str	r2, [sp, #112]	; 0x70
 8042eb2:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8042eb4:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
 8042eb8:	910b      	str	r1, [sp, #44]	; 0x2c
 8042eba:	2100      	movs	r1, #0
 8042ebc:	920a      	str	r2, [sp, #40]	; 0x28
 8042ebe:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8042ec0:	ed8d 3b1e 	vstr	d3, [sp, #120]	; 0x78
 8042ec4:	ed8d 4b1a 	vstr	d4, [sp, #104]	; 0x68
 8042ec8:	ed8d 5b18 	vstr	d5, [sp, #96]	; 0x60
 8042ecc:	ed8d 6b16 	vstr	d6, [sp, #88]	; 0x58
 8042ed0:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8042ed4:	e9cd ce10 	strd	ip, lr, [sp, #64]	; 0x40
 8042ed8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8042edc:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 8042ee0:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8042ee4:	9209      	str	r2, [sp, #36]	; 0x24
 8042ee6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8042ee8:	9208      	str	r2, [sp, #32]
 8042eea:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8042eec:	9207      	str	r2, [sp, #28]
 8042eee:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8042ef0:	9206      	str	r2, [sp, #24]
 8042ef2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8042ef4:	9205      	str	r2, [sp, #20]
 8042ef6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8042ef8:	9204      	str	r2, [sp, #16]
 8042efa:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8042efc:	9203      	str	r2, [sp, #12]
 8042efe:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8042f00:	9202      	str	r2, [sp, #8]
 8042f02:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8042f04:	9201      	str	r2, [sp, #4]
 8042f06:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8042f08:	9200      	str	r2, [sp, #0]
 8042f0a:	4a06      	ldr	r2, [pc, #24]	; (8042f24 <_ZN8lexxhard14can_controller8brd_infoEPK5shelljPPc+0x140>)
 8042f0c:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8042f10:	f013 fcd5 	bl	80568be <shell_fprintf>
    impl.brd_info(shell);
    return 0;
}
 8042f14:	2000      	movs	r0, #0
 8042f16:	b033      	add	sp, #204	; 0xcc
 8042f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8042f1c:	20022c2c 	.word	0x20022c2c
 8042f20:	0805ea42 	.word	0x0805ea42
 8042f24:	0805ea4a 	.word	0x0805ea4a
 8042f28:	0805ea3b 	.word	0x0805ea3b
 8042f2c:	0805ec33 	.word	0x0805ec33

08042f30 <_ZN8lexxhard14can_controller12brd_lockdownEPK5shelljPPc>:
    if (argc != 2) {
 8042f30:	2902      	cmp	r1, #2
{
 8042f32:	b507      	push	{r0, r1, r2, lr}
    if (argc != 2) {
 8042f34:	d00b      	beq.n	8042f4e <_ZN8lexxhard14can_controller12brd_lockdownEPK5shelljPPc+0x1e>
        shell_error(shell, "Usage: %s %s <disable | enable>\n", argv[-1], argv[0]);
 8042f36:	6813      	ldr	r3, [r2, #0]
 8042f38:	2102      	movs	r1, #2
 8042f3a:	9300      	str	r3, [sp, #0]
 8042f3c:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8042f40:	4a09      	ldr	r2, [pc, #36]	; (8042f68 <_ZN8lexxhard14can_controller12brd_lockdownEPK5shelljPPc+0x38>)
 8042f42:	f013 fcbc 	bl	80568be <shell_fprintf>
 8042f46:	2001      	movs	r0, #1
}
 8042f48:	b003      	add	sp, #12
 8042f4a:	f85d fb04 	ldr.w	pc, [sp], #4
    bool enable{strcmp(argv[1], "disable") != 0};
 8042f4e:	4907      	ldr	r1, [pc, #28]	; (8042f6c <_ZN8lexxhard14can_controller12brd_lockdownEPK5shelljPPc+0x3c>)
 8042f50:	6850      	ldr	r0, [r2, #4]
 8042f52:	f7fd fc77 	bl	8040844 <strcmp>
 8042f56:	3800      	subs	r0, #0
 8042f58:	4b05      	ldr	r3, [pc, #20]	; (8042f70 <_ZN8lexxhard14can_controller12brd_lockdownEPK5shelljPPc+0x40>)
 8042f5a:	bf18      	it	ne
 8042f5c:	2001      	movne	r0, #1
 8042f5e:	f883 0125 	strb.w	r0, [r3, #293]	; 0x125
    return 0;
 8042f62:	2000      	movs	r0, #0
 8042f64:	e7f0      	b.n	8042f48 <_ZN8lexxhard14can_controller12brd_lockdownEPK5shelljPPc+0x18>
 8042f66:	bf00      	nop
 8042f68:	0805eb8b 	.word	0x0805eb8b
 8042f6c:	0805ea42 	.word	0x0805ea42
 8042f70:	20022c2c 	.word	0x20022c2c

08042f74 <_ZN8lexxhard14can_controller8get_rsocEv>:
}

uint32_t get_rsoc()
{
    return impl.get_rsoc();
}
 8042f74:	4b01      	ldr	r3, [pc, #4]	; (8042f7c <_ZN8lexxhard14can_controller8get_rsocEv+0x8>)
 8042f76:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 8042f7a:	4770      	bx	lr
 8042f7c:	20022c2c 	.word	0x20022c2c

08042f80 <_ZN8lexxhard14can_controller12is_emergencyEv>:
        return board2ros.emergency_switch[0] ||
 8042f80:	4b07      	ldr	r3, [pc, #28]	; (8042fa0 <_ZN8lexxhard14can_controller12is_emergencyEv+0x20>)
 8042f82:	f893 0061 	ldrb.w	r0, [r3, #97]	; 0x61
               board2ros.bumper_switch[1] ||
 8042f86:	b950      	cbnz	r0, 8042f9e <_ZN8lexxhard14can_controller12is_emergencyEv+0x1e>
               board2ros.emergency_switch[1] ||
 8042f88:	f893 0062 	ldrb.w	r0, [r3, #98]	; 0x62
        return board2ros.emergency_switch[0] ||
 8042f8c:	b938      	cbnz	r0, 8042f9e <_ZN8lexxhard14can_controller12is_emergencyEv+0x1e>
               board2ros.bumper_switch[0] ||
 8042f8e:	f893 005f 	ldrb.w	r0, [r3, #95]	; 0x5f
               board2ros.emergency_switch[1] ||
 8042f92:	b920      	cbnz	r0, 8042f9e <_ZN8lexxhard14can_controller12is_emergencyEv+0x1e>
               board2ros.bumper_switch[1] ||
 8042f94:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
               board2ros.bumper_switch[0] ||
 8042f98:	b908      	cbnz	r0, 8042f9e <_ZN8lexxhard14can_controller12is_emergencyEv+0x1e>
               ros2board.emergency_stop;
 8042f9a:	f893 0070 	ldrb.w	r0, [r3, #112]	; 0x70
}

bool is_emergency()
{
    return impl.is_emergency();
}
 8042f9e:	4770      	bx	lr
 8042fa0:	20022c2c 	.word	0x20022c2c

08042fa4 <_GLOBAL__sub_I__ZN8lexxhard14can_controller13log_const_canE>:

k_thread thread;
k_msgq msgq_bmu, msgq_board, msgq_control;

}
 8042fa4:	b510      	push	{r4, lr}
class can_controller_impl {
 8042fa6:	4c0f      	ldr	r4, [pc, #60]	; (8042fe4 <_GLOBAL__sub_I__ZN8lexxhard14can_controller13log_const_canE+0x40>)
 8042fa8:	2240      	movs	r2, #64	; 0x40
 8042faa:	2100      	movs	r1, #0
 8042fac:	4620      	mov	r0, r4
 8042fae:	f017 ff4d 	bl	805ae4c <memset>
 8042fb2:	2230      	movs	r2, #48	; 0x30
 8042fb4:	2100      	movs	r1, #0
 8042fb6:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8042fba:	f017 ff47 	bl	805ae4c <memset>
class log_printer {
 8042fbe:	2100      	movs	r1, #0
 8042fc0:	2301      	movs	r3, #1
class can_controller_impl {
 8042fc2:	221c      	movs	r2, #28
 8042fc4:	f504 7084 	add.w	r0, r4, #264	; 0x108
class log_printer {
 8042fc8:	e9c4 311c 	strd	r3, r1, [r4, #112]	; 0x70
class can_controller_impl {
 8042fcc:	e9c4 113e 	strd	r1, r1, [r4, #248]	; 0xf8
 8042fd0:	e9c4 1140 	strd	r1, r1, [r4, #256]	; 0x100
 8042fd4:	f017 ff3a 	bl	805ae4c <memset>
 8042fd8:	f240 1301 	movw	r3, #257	; 0x101
 8042fdc:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
}
 8042fe0:	bd10      	pop	{r4, pc}
 8042fe2:	bf00      	nop
 8042fe4:	20022c2c 	.word	0x20022c2c

08042fe8 <_GLOBAL__sub_I__ZN8lexxhard16firmware_updater4initEv>:
#include <sys/reboot.h>
#include "firmware_updater.hpp"

namespace lexxhard::firmware_updater {

class {
 8042fe8:	4b05      	ldr	r3, [pc, #20]	; (8043000 <_GLOBAL__sub_I__ZN8lexxhard16firmware_updater4initEv+0x18>)
 8042fea:	2200      	movs	r2, #0
 8042fec:	e9c3 22c6 	strd	r2, r2, [r3, #792]	; 0x318
 8042ff0:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
 8042ff4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8042ff8:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324
}

k_thread thread;
k_msgq msgq_data, msgq_response;

}
 8042ffc:	4770      	bx	lr
 8042ffe:	bf00      	nop
 8043000:	20022d54 	.word	0x20022d54

08043004 <_ZN8lexxhard14imu_controller4infoEPK5shelljPPc>:
            }
            k_msleep(1);
        }
    }
    void info(const shell *shell) const {
        msg m{message};
 8043004:	4b2c      	ldr	r3, [pc, #176]	; (80430b8 <_ZN8lexxhard14imu_controller4infoEPK5shelljPPc+0xb4>)
        shell_print(shell,
 8043006:	2100      	movs	r1, #0
 8043008:	4a2c      	ldr	r2, [pc, #176]	; (80430bc <_ZN8lexxhard14imu_controller4infoEPK5shelljPPc+0xb8>)
 804300a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 804300e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    const device *dev{nullptr};
    msg message;
} impl;

int info(const shell *shell, size_t argc, char **argv)
{
 8043012:	b500      	push	{lr}
 8043014:	b09b      	sub	sp, #108	; 0x6c
        shell_print(shell,
 8043016:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 804301a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 804301e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8043022:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8043026:	ed93 7a08 	vldr	s14, [r3, #32]
 804302a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 804302e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8043032:	ed93 7a07 	vldr	s14, [r3, #28]
 8043036:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 804303a:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 804303e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8043042:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8043046:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 804304a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 804304e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8043052:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8043056:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 804305a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 804305e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8043062:	ed93 7a06 	vldr	s14, [r3, #24]
 8043066:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 804306a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 804306e:	ed93 7a05 	vldr	s14, [r3, #20]
 8043072:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8043076:	ed8d 7b08 	vstr	d7, [sp, #32]
 804307a:	ed93 7a04 	vldr	s14, [r3, #16]
 804307e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8043082:	ed8d 7b06 	vstr	d7, [sp, #24]
 8043086:	ed93 7a03 	vldr	s14, [r3, #12]
 804308a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 804308e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8043092:	ed93 7a02 	vldr	s14, [r3, #8]
 8043096:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 804309a:	ed8d 7b02 	vstr	d7, [sp, #8]
 804309e:	ed93 7a01 	vldr	s14, [r3, #4]
 80430a2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80430a6:	ed8d 7b00 	vstr	d7, [sp]
 80430aa:	f013 fc08 	bl	80568be <shell_fprintf>
    impl.info(shell);
    return 0;
}
 80430ae:	2000      	movs	r0, #0
 80430b0:	b01b      	add	sp, #108	; 0x6c
 80430b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80430b6:	bf00      	nop
 80430b8:	200230b0 	.word	0x200230b0
 80430bc:	0805ec39 	.word	0x0805ec39

080430c0 <_GLOBAL__sub_I__ZN8lexxhard14imu_controller13log_const_imuE>:
class {
 80430c0:	4b01      	ldr	r3, [pc, #4]	; (80430c8 <_GLOBAL__sub_I__ZN8lexxhard14imu_controller13log_const_imuE+0x8>)
 80430c2:	2200      	movs	r2, #0
 80430c4:	601a      	str	r2, [r3, #0]
}

k_thread thread;
k_msgq msgq;

}
 80430c6:	4770      	bx	lr
 80430c8:	200230b0 	.word	0x200230b0

080430cc <_ZN8lexxhard14led_controller5colorEPK5shelljPPc>:
    return 0;
}

int color(const shell *shell, size_t argc, char **argv)
{
    if (argc != 4) {
 80430cc:	2904      	cmp	r1, #4
{
 80430ce:	b510      	push	{r4, lr}
 80430d0:	4614      	mov	r4, r2
 80430d2:	b086      	sub	sp, #24
    if (argc != 4) {
 80430d4:	d00a      	beq.n	80430ec <_ZN8lexxhard14led_controller5colorEPK5shelljPPc+0x20>
        shell_error(shell, "Usage: %s %s <r> <g> <b>\n", argv[-1], argv[0]);
 80430d6:	6813      	ldr	r3, [r2, #0]
 80430d8:	2102      	movs	r1, #2
 80430da:	9300      	str	r3, [sp, #0]
 80430dc:	f852 3c04 	ldr.w	r3, [r2, #-4]
 80430e0:	4a15      	ldr	r2, [pc, #84]	; (8043138 <_ZN8lexxhard14led_controller5colorEPK5shelljPPc+0x6c>)
 80430e2:	f013 fbec 	bl	80568be <shell_fprintf>
        return 1;
 80430e6:	2001      	movs	r0, #1
    message.rgb[1] = atoi(argv[2]);
    message.rgb[2] = atoi(argv[3]);
    while (k_msgq_put(&msgq, &message, K_NO_WAIT) != 0)
        k_msgq_purge(&msgq);
    return 0;
}
 80430e8:	b006      	add	sp, #24
 80430ea:	bd10      	pop	{r4, pc}
} __attribute__((aligned(4)));

struct msg {
    msg() : pattern(NONE), interrupt_ms(0) {}
    msg(uint32_t pattern, uint32_t interrupt_ms) :
        pattern(pattern), interrupt_ms(interrupt_ms) {}
 80430ec:	2300      	movs	r3, #0
 80430ee:	22c8      	movs	r2, #200	; 0xc8
    message.rgb[0] = atoi(argv[1]);
 80430f0:	6860      	ldr	r0, [r4, #4]
 80430f2:	9304      	str	r3, [sp, #16]
    msg(uint32_t pattern, uint32_t interrupt_ms) :
 80430f4:	f8ad 3014 	strh.w	r3, [sp, #20]
        pattern(pattern), interrupt_ms(interrupt_ms) {}
 80430f8:	f88d 3016 	strb.w	r3, [sp, #22]
 80430fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8043100:	f017 fe55 	bl	805adae <atoi>
 8043104:	f88d 0014 	strb.w	r0, [sp, #20]
    message.rgb[1] = atoi(argv[2]);
 8043108:	68a0      	ldr	r0, [r4, #8]
 804310a:	f017 fe50 	bl	805adae <atoi>
 804310e:	f88d 0015 	strb.w	r0, [sp, #21]
    message.rgb[2] = atoi(argv[3]);
 8043112:	68e0      	ldr	r0, [r4, #12]
	return z_impl_k_msgq_put(msgq, data, timeout);
 8043114:	4c09      	ldr	r4, [pc, #36]	; (804313c <_ZN8lexxhard14led_controller5colorEPK5shelljPPc+0x70>)
 8043116:	f017 fe4a 	bl	805adae <atoi>
 804311a:	f88d 0016 	strb.w	r0, [sp, #22]
 804311e:	2200      	movs	r2, #0
 8043120:	2300      	movs	r3, #0
 8043122:	a902      	add	r1, sp, #8
 8043124:	4620      	mov	r0, r4
 8043126:	f00e fb6f 	bl	8051808 <z_impl_k_msgq_put>
    while (k_msgq_put(&msgq, &message, K_NO_WAIT) != 0)
 804312a:	2800      	cmp	r0, #0
 804312c:	d0dc      	beq.n	80430e8 <_ZN8lexxhard14led_controller5colorEPK5shelljPPc+0x1c>
	z_impl_k_msgq_purge(msgq);
 804312e:	4620      	mov	r0, r4
 8043130:	f017 f93c 	bl	805a3ac <z_impl_k_msgq_purge>
}
 8043134:	e7f3      	b.n	804311e <_ZN8lexxhard14led_controller5colorEPK5shelljPPc+0x52>
 8043136:	bf00      	nop
 8043138:	0805ecc4 	.word	0x0805ecc4
 804313c:	200233bc 	.word	0x200233bc

08043140 <_ZN8lexxhard14led_controller3msg16setup_cpm_breathEPKc>:
        else if (strcmp(str, "lockdown")        == 0) pattern = LOCKDOWN;
        else if (*str == '#') setup_cpm_breath(str);
        else pattern = NONE;
        interrupt_ms = 0;
    }
    void setup_cpm_breath(const char *str) {
 8043140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        pattern = NONE;
 8043142:	2300      	movs	r3, #0
    void setup_cpm_breath(const char *str) {
 8043144:	4604      	mov	r4, r0
 8043146:	460d      	mov	r5, r1
        pattern = NONE;
 8043148:	7003      	strb	r3, [r0, #0]
        cpm = 0;
 804314a:	6083      	str	r3, [r0, #8]
        int r{dec2(&str[1])};
 804314c:	1c48      	adds	r0, r1, #1
 804314e:	f011 f830 	bl	80541b2 <_ZNK8lexxhard14led_controller3msg4dec2EPKc.isra.0>
        int g{dec2(&str[3])};
        int b{dec2(&str[5])};
        if (r < 0 || g < 0 || b < 0)
 8043152:	1e07      	subs	r7, r0, #0
 8043154:	db25      	blt.n	80431a2 <_ZN8lexxhard14led_controller3msg16setup_cpm_breathEPKc+0x62>
        int g{dec2(&str[3])};
 8043156:	1ce8      	adds	r0, r5, #3
 8043158:	f011 f82b 	bl	80541b2 <_ZNK8lexxhard14led_controller3msg4dec2EPKc.isra.0>
        if (r < 0 || g < 0 || b < 0)
 804315c:	1e06      	subs	r6, r0, #0
 804315e:	db20      	blt.n	80431a2 <_ZN8lexxhard14led_controller3msg16setup_cpm_breathEPKc+0x62>
        int b{dec2(&str[5])};
 8043160:	1d68      	adds	r0, r5, #5
 8043162:	f011 f826 	bl	80541b2 <_ZNK8lexxhard14led_controller3msg4dec2EPKc.isra.0>
        if (r < 0 || g < 0 || b < 0)
 8043166:	1e03      	subs	r3, r0, #0
 8043168:	db1b      	blt.n	80431a2 <_ZN8lexxhard14led_controller3msg16setup_cpm_breathEPKc+0x62>
            return;
        rgb[0] = r;
 804316a:	7327      	strb	r7, [r4, #12]
        rgb[1] = g;
 804316c:	7366      	strb	r6, [r4, #13]
        rgb[2] = b;
 804316e:	73a3      	strb	r3, [r4, #14]
        if (str[7] != ' ')
 8043170:	79eb      	ldrb	r3, [r5, #7]
 8043172:	2b20      	cmp	r3, #32
 8043174:	d115      	bne.n	80431a2 <_ZN8lexxhard14led_controller3msg16setup_cpm_breathEPKc+0x62>
            return;
        if (strncmp(&str[8], "breath", 6) == 0 && str[14] == ' ') {
 8043176:	f105 0608 	add.w	r6, r5, #8
 804317a:	2206      	movs	r2, #6
 804317c:	4911      	ldr	r1, [pc, #68]	; (80431c4 <_ZN8lexxhard14led_controller3msg16setup_cpm_breathEPKc+0x84>)
 804317e:	4630      	mov	r0, r6
 8043180:	f017 ffa8 	bl	805b0d4 <strncmp>
 8043184:	b970      	cbnz	r0, 80431a4 <_ZN8lexxhard14led_controller3msg16setup_cpm_breathEPKc+0x64>
 8043186:	7bab      	ldrb	r3, [r5, #14]
 8043188:	2b20      	cmp	r3, #32
 804318a:	d10b      	bne.n	80431a4 <_ZN8lexxhard14led_controller3msg16setup_cpm_breathEPKc+0x64>
            pattern = RGB_BREATH;
 804318c:	23ca      	movs	r3, #202	; 0xca
            cpm = atoi(&str[15]);
 804318e:	f105 000f 	add.w	r0, r5, #15
            pattern = RGB_BREATH;
 8043192:	7023      	strb	r3, [r4, #0]
        } else if (strncmp(&str[8], "blink", 5) == 0 && str[13] == ' ') {
            pattern = RGB_BLINK;
            cpm = atoi(&str[14]);
 8043194:	f017 fe0b 	bl	805adae <atoi>
 8043198:	60a0      	str	r0, [r4, #8]
        } else {
            return;
        }
        if (cpm == 0)
 804319a:	68a3      	ldr	r3, [r4, #8]
 804319c:	b90b      	cbnz	r3, 80431a2 <_ZN8lexxhard14led_controller3msg16setup_cpm_breathEPKc+0x62>
            pattern = RGB;
 804319e:	23c8      	movs	r3, #200	; 0xc8
 80431a0:	7023      	strb	r3, [r4, #0]
    }
 80431a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        } else if (strncmp(&str[8], "blink", 5) == 0 && str[13] == ' ') {
 80431a4:	2205      	movs	r2, #5
 80431a6:	4908      	ldr	r1, [pc, #32]	; (80431c8 <_ZN8lexxhard14led_controller3msg16setup_cpm_breathEPKc+0x88>)
 80431a8:	4630      	mov	r0, r6
 80431aa:	f017 ff93 	bl	805b0d4 <strncmp>
 80431ae:	2800      	cmp	r0, #0
 80431b0:	d1f7      	bne.n	80431a2 <_ZN8lexxhard14led_controller3msg16setup_cpm_breathEPKc+0x62>
 80431b2:	7b6b      	ldrb	r3, [r5, #13]
 80431b4:	2b20      	cmp	r3, #32
 80431b6:	d1f4      	bne.n	80431a2 <_ZN8lexxhard14led_controller3msg16setup_cpm_breathEPKc+0x62>
            pattern = RGB_BLINK;
 80431b8:	23c9      	movs	r3, #201	; 0xc9
            cpm = atoi(&str[14]);
 80431ba:	f105 000e 	add.w	r0, r5, #14
            pattern = RGB_BLINK;
 80431be:	7023      	strb	r3, [r4, #0]
            cpm = atoi(&str[14]);
 80431c0:	e7e8      	b.n	8043194 <_ZN8lexxhard14led_controller3msg16setup_cpm_breathEPKc+0x54>
 80431c2:	bf00      	nop
 80431c4:	0805ecdf 	.word	0x0805ecdf
 80431c8:	0805ece6 	.word	0x0805ece6

080431cc <_ZN8lexxhard14led_controller3msgC1EPKc>:
    msg(const char *str) {
 80431cc:	b538      	push	{r3, r4, r5, lr}
 80431ce:	2300      	movs	r3, #0
 80431d0:	460d      	mov	r5, r1
 80431d2:	4604      	mov	r4, r0
        if      (strcmp(str, "emergency_stop")  == 0) pattern = EMERGENCY_STOP;
 80431d4:	493d      	ldr	r1, [pc, #244]	; (80432cc <_ZN8lexxhard14led_controller3msgC1EPKc+0x100>)
    msg(const char *str) {
 80431d6:	7003      	strb	r3, [r0, #0]
 80431d8:	8183      	strh	r3, [r0, #12]
 80431da:	7383      	strb	r3, [r0, #14]
 80431dc:	e9c0 3301 	strd	r3, r3, [r0, #4]
        if      (strcmp(str, "emergency_stop")  == 0) pattern = EMERGENCY_STOP;
 80431e0:	4628      	mov	r0, r5
 80431e2:	f7fd fb2f 	bl	8040844 <strcmp>
 80431e6:	b910      	cbnz	r0, 80431ee <_ZN8lexxhard14led_controller3msgC1EPKc+0x22>
 80431e8:	2301      	movs	r3, #1
        else pattern = NONE;
 80431ea:	7023      	strb	r3, [r4, #0]
 80431ec:	e068      	b.n	80432c0 <_ZN8lexxhard14led_controller3msgC1EPKc+0xf4>
        else if (strcmp(str, "amr_mode")        == 0) pattern = AMR_MODE;
 80431ee:	4938      	ldr	r1, [pc, #224]	; (80432d0 <_ZN8lexxhard14led_controller3msgC1EPKc+0x104>)
 80431f0:	4628      	mov	r0, r5
 80431f2:	f7fd fb27 	bl	8040844 <strcmp>
 80431f6:	b908      	cbnz	r0, 80431fc <_ZN8lexxhard14led_controller3msgC1EPKc+0x30>
 80431f8:	2302      	movs	r3, #2
 80431fa:	e7f6      	b.n	80431ea <_ZN8lexxhard14led_controller3msgC1EPKc+0x1e>
        else if (strcmp(str, "agv_mode")        == 0) pattern = AGV_MODE;
 80431fc:	4935      	ldr	r1, [pc, #212]	; (80432d4 <_ZN8lexxhard14led_controller3msgC1EPKc+0x108>)
 80431fe:	4628      	mov	r0, r5
 8043200:	f7fd fb20 	bl	8040844 <strcmp>
 8043204:	b908      	cbnz	r0, 804320a <_ZN8lexxhard14led_controller3msgC1EPKc+0x3e>
 8043206:	2303      	movs	r3, #3
 8043208:	e7ef      	b.n	80431ea <_ZN8lexxhard14led_controller3msgC1EPKc+0x1e>
        else if (strcmp(str, "mission_pause")   == 0) pattern = MISSION_PAUSE;
 804320a:	4933      	ldr	r1, [pc, #204]	; (80432d8 <_ZN8lexxhard14led_controller3msgC1EPKc+0x10c>)
 804320c:	4628      	mov	r0, r5
 804320e:	f7fd fb19 	bl	8040844 <strcmp>
 8043212:	b908      	cbnz	r0, 8043218 <_ZN8lexxhard14led_controller3msgC1EPKc+0x4c>
 8043214:	2304      	movs	r3, #4
 8043216:	e7e8      	b.n	80431ea <_ZN8lexxhard14led_controller3msgC1EPKc+0x1e>
        else if (strcmp(str, "path_blocked")    == 0) pattern = PATH_BLOCKED;
 8043218:	4930      	ldr	r1, [pc, #192]	; (80432dc <_ZN8lexxhard14led_controller3msgC1EPKc+0x110>)
 804321a:	4628      	mov	r0, r5
 804321c:	f7fd fb12 	bl	8040844 <strcmp>
 8043220:	b908      	cbnz	r0, 8043226 <_ZN8lexxhard14led_controller3msgC1EPKc+0x5a>
 8043222:	2305      	movs	r3, #5
 8043224:	e7e1      	b.n	80431ea <_ZN8lexxhard14led_controller3msgC1EPKc+0x1e>
        else if (strcmp(str, "manual_drive")    == 0) pattern = MANUAL_DRIVE;
 8043226:	492e      	ldr	r1, [pc, #184]	; (80432e0 <_ZN8lexxhard14led_controller3msgC1EPKc+0x114>)
 8043228:	4628      	mov	r0, r5
 804322a:	f7fd fb0b 	bl	8040844 <strcmp>
 804322e:	b908      	cbnz	r0, 8043234 <_ZN8lexxhard14led_controller3msgC1EPKc+0x68>
 8043230:	2306      	movs	r3, #6
 8043232:	e7da      	b.n	80431ea <_ZN8lexxhard14led_controller3msgC1EPKc+0x1e>
        else if (strcmp(str, "charging")        == 0) pattern = CHARGING;
 8043234:	492b      	ldr	r1, [pc, #172]	; (80432e4 <_ZN8lexxhard14led_controller3msgC1EPKc+0x118>)
 8043236:	4628      	mov	r0, r5
 8043238:	f7fd fb04 	bl	8040844 <strcmp>
 804323c:	b908      	cbnz	r0, 8043242 <_ZN8lexxhard14led_controller3msgC1EPKc+0x76>
 804323e:	230a      	movs	r3, #10
 8043240:	e7d3      	b.n	80431ea <_ZN8lexxhard14led_controller3msgC1EPKc+0x1e>
        else if (strcmp(str, "waiting_for_job") == 0) pattern = WAITING_FOR_JOB;
 8043242:	4929      	ldr	r1, [pc, #164]	; (80432e8 <_ZN8lexxhard14led_controller3msgC1EPKc+0x11c>)
 8043244:	4628      	mov	r0, r5
 8043246:	f7fd fafd 	bl	8040844 <strcmp>
 804324a:	b908      	cbnz	r0, 8043250 <_ZN8lexxhard14led_controller3msgC1EPKc+0x84>
 804324c:	230b      	movs	r3, #11
 804324e:	e7cc      	b.n	80431ea <_ZN8lexxhard14led_controller3msgC1EPKc+0x1e>
        else if (strcmp(str, "left_winker")     == 0) pattern = LEFT_WINKER;
 8043250:	4926      	ldr	r1, [pc, #152]	; (80432ec <_ZN8lexxhard14led_controller3msgC1EPKc+0x120>)
 8043252:	4628      	mov	r0, r5
 8043254:	f7fd faf6 	bl	8040844 <strcmp>
 8043258:	b908      	cbnz	r0, 804325e <_ZN8lexxhard14led_controller3msgC1EPKc+0x92>
 804325a:	230c      	movs	r3, #12
 804325c:	e7c5      	b.n	80431ea <_ZN8lexxhard14led_controller3msgC1EPKc+0x1e>
        else if (strcmp(str, "right_winker")    == 0) pattern = RIGHT_WINKER;
 804325e:	4924      	ldr	r1, [pc, #144]	; (80432f0 <_ZN8lexxhard14led_controller3msgC1EPKc+0x124>)
 8043260:	4628      	mov	r0, r5
 8043262:	f7fd faef 	bl	8040844 <strcmp>
 8043266:	b908      	cbnz	r0, 804326c <_ZN8lexxhard14led_controller3msgC1EPKc+0xa0>
 8043268:	230d      	movs	r3, #13
 804326a:	e7be      	b.n	80431ea <_ZN8lexxhard14led_controller3msgC1EPKc+0x1e>
        else if (strcmp(str, "both_winker")     == 0) pattern = BOTH_WINKER;
 804326c:	4921      	ldr	r1, [pc, #132]	; (80432f4 <_ZN8lexxhard14led_controller3msgC1EPKc+0x128>)
 804326e:	4628      	mov	r0, r5
 8043270:	f7fd fae8 	bl	8040844 <strcmp>
 8043274:	b908      	cbnz	r0, 804327a <_ZN8lexxhard14led_controller3msgC1EPKc+0xae>
 8043276:	230e      	movs	r3, #14
 8043278:	e7b7      	b.n	80431ea <_ZN8lexxhard14led_controller3msgC1EPKc+0x1e>
        else if (strcmp(str, "move_actuator")   == 0) pattern = MOVE_ACTUATOR;
 804327a:	491f      	ldr	r1, [pc, #124]	; (80432f8 <_ZN8lexxhard14led_controller3msgC1EPKc+0x12c>)
 804327c:	4628      	mov	r0, r5
 804327e:	f7fd fae1 	bl	8040844 <strcmp>
 8043282:	b908      	cbnz	r0, 8043288 <_ZN8lexxhard14led_controller3msgC1EPKc+0xbc>
 8043284:	230f      	movs	r3, #15
 8043286:	e7b0      	b.n	80431ea <_ZN8lexxhard14led_controller3msgC1EPKc+0x1e>
        else if (strcmp(str, "charge_level")    == 0) pattern = CHARGE_LEVEL;
 8043288:	491c      	ldr	r1, [pc, #112]	; (80432fc <_ZN8lexxhard14led_controller3msgC1EPKc+0x130>)
 804328a:	4628      	mov	r0, r5
 804328c:	f7fd fada 	bl	8040844 <strcmp>
 8043290:	b908      	cbnz	r0, 8043296 <_ZN8lexxhard14led_controller3msgC1EPKc+0xca>
 8043292:	2310      	movs	r3, #16
 8043294:	e7a9      	b.n	80431ea <_ZN8lexxhard14led_controller3msgC1EPKc+0x1e>
        else if (strcmp(str, "showtime")        == 0) pattern = SHOWTIME;
 8043296:	491a      	ldr	r1, [pc, #104]	; (8043300 <_ZN8lexxhard14led_controller3msgC1EPKc+0x134>)
 8043298:	4628      	mov	r0, r5
 804329a:	f7fd fad3 	bl	8040844 <strcmp>
 804329e:	b908      	cbnz	r0, 80432a4 <_ZN8lexxhard14led_controller3msgC1EPKc+0xd8>
 80432a0:	2364      	movs	r3, #100	; 0x64
 80432a2:	e7a2      	b.n	80431ea <_ZN8lexxhard14led_controller3msgC1EPKc+0x1e>
        else if (strcmp(str, "lockdown")        == 0) pattern = LOCKDOWN;
 80432a4:	4917      	ldr	r1, [pc, #92]	; (8043304 <_ZN8lexxhard14led_controller3msgC1EPKc+0x138>)
 80432a6:	4628      	mov	r0, r5
 80432a8:	f7fd facc 	bl	8040844 <strcmp>
 80432ac:	b908      	cbnz	r0, 80432b2 <_ZN8lexxhard14led_controller3msgC1EPKc+0xe6>
 80432ae:	2365      	movs	r3, #101	; 0x65
 80432b0:	e79b      	b.n	80431ea <_ZN8lexxhard14led_controller3msgC1EPKc+0x1e>
        else if (*str == '#') setup_cpm_breath(str);
 80432b2:	782b      	ldrb	r3, [r5, #0]
 80432b4:	2b23      	cmp	r3, #35	; 0x23
 80432b6:	d107      	bne.n	80432c8 <_ZN8lexxhard14led_controller3msgC1EPKc+0xfc>
 80432b8:	4629      	mov	r1, r5
 80432ba:	4620      	mov	r0, r4
 80432bc:	f7ff ff40 	bl	8043140 <_ZN8lexxhard14led_controller3msg16setup_cpm_breathEPKc>
        interrupt_ms = 0;
 80432c0:	2300      	movs	r3, #0
    }
 80432c2:	4620      	mov	r0, r4
        interrupt_ms = 0;
 80432c4:	6063      	str	r3, [r4, #4]
    }
 80432c6:	bd38      	pop	{r3, r4, r5, pc}
        else pattern = NONE;
 80432c8:	2300      	movs	r3, #0
 80432ca:	e78e      	b.n	80431ea <_ZN8lexxhard14led_controller3msgC1EPKc+0x1e>
 80432cc:	0805f51e 	.word	0x0805f51e
 80432d0:	0805ecec 	.word	0x0805ecec
 80432d4:	0805ecf5 	.word	0x0805ecf5
 80432d8:	0805ecfe 	.word	0x0805ecfe
 80432dc:	0805ed0c 	.word	0x0805ed0c
 80432e0:	0805ed19 	.word	0x0805ed19
 80432e4:	0805ed26 	.word	0x0805ed26
 80432e8:	0805ed2f 	.word	0x0805ed2f
 80432ec:	0805ed3f 	.word	0x0805ed3f
 80432f0:	0805ed4b 	.word	0x0805ed4b
 80432f4:	0805ed58 	.word	0x0805ed58
 80432f8:	0805ed64 	.word	0x0805ed64
 80432fc:	0805ed72 	.word	0x0805ed72
 8043300:	0805ed7f 	.word	0x0805ed7f
 8043304:	0805ebde 	.word	0x0805ebde

08043308 <_ZN8lexxhard14led_controller7patternEPK5shelljPPc>:
    if (argc != 2) {
 8043308:	2902      	cmp	r1, #2
{
 804330a:	b510      	push	{r4, lr}
 804330c:	b086      	sub	sp, #24
    if (argc != 2) {
 804330e:	d00a      	beq.n	8043326 <_ZN8lexxhard14led_controller7patternEPK5shelljPPc+0x1e>
        shell_error(shell, "Usage: %s %s <pattern>\n", argv[-1], argv[0]);
 8043310:	6813      	ldr	r3, [r2, #0]
 8043312:	2102      	movs	r1, #2
 8043314:	9300      	str	r3, [sp, #0]
 8043316:	f852 3c04 	ldr.w	r3, [r2, #-4]
 804331a:	4a0b      	ldr	r2, [pc, #44]	; (8043348 <_ZN8lexxhard14led_controller7patternEPK5shelljPPc+0x40>)
 804331c:	f013 facf 	bl	80568be <shell_fprintf>
        return 1;
 8043320:	2001      	movs	r0, #1
}
 8043322:	b006      	add	sp, #24
 8043324:	bd10      	pop	{r4, pc}
	return z_impl_k_msgq_put(msgq, data, timeout);
 8043326:	4c09      	ldr	r4, [pc, #36]	; (804334c <_ZN8lexxhard14led_controller7patternEPK5shelljPPc+0x44>)
    msg message{argv[1]};
 8043328:	a802      	add	r0, sp, #8
 804332a:	6851      	ldr	r1, [r2, #4]
 804332c:	f7ff ff4e 	bl	80431cc <_ZN8lexxhard14led_controller3msgC1EPKc>
 8043330:	2200      	movs	r2, #0
 8043332:	2300      	movs	r3, #0
 8043334:	a902      	add	r1, sp, #8
 8043336:	4620      	mov	r0, r4
 8043338:	f00e fa66 	bl	8051808 <z_impl_k_msgq_put>
    while (k_msgq_put(&msgq, &message, K_NO_WAIT) != 0)
 804333c:	2800      	cmp	r0, #0
 804333e:	d0f0      	beq.n	8043322 <_ZN8lexxhard14led_controller7patternEPK5shelljPPc+0x1a>
	z_impl_k_msgq_purge(msgq);
 8043340:	4620      	mov	r0, r4
 8043342:	f017 f833 	bl	805a3ac <z_impl_k_msgq_purge>
}
 8043346:	e7f3      	b.n	8043330 <_ZN8lexxhard14led_controller7patternEPK5shelljPPc+0x28>
 8043348:	0805ed88 	.word	0x0805ed88
 804334c:	200233bc 	.word	0x200233bc

08043350 <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE>:
    bool get_message(msg &output) {
 8043350:	b5f0      	push	{r4, r5, r6, r7, lr}
    msg() : pattern(NONE), interrupt_ms(0) {}
 8043352:	2500      	movs	r5, #0
 8043354:	b085      	sub	sp, #20
 8043356:	4604      	mov	r4, r0
 8043358:	460e      	mov	r6, r1
 804335a:	9502      	str	r5, [sp, #8]
 804335c:	f8ad 500c 	strh.w	r5, [sp, #12]
 8043360:	f88d 500e 	strb.w	r5, [sp, #14]
 8043364:	e9cd 5500 	strd	r5, r5, [sp]
	return z_impl_k_msgq_get(msgq, data, timeout);
 8043368:	22fa      	movs	r2, #250	; 0xfa
 804336a:	2300      	movs	r3, #0
 804336c:	4669      	mov	r1, sp
 804336e:	4856      	ldr	r0, [pc, #344]	; (80434c8 <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0x178>)
 8043370:	f00e faa0 	bl	80518b4 <z_impl_k_msgq_get>
        if (msg message_new; k_msgq_get(&msgq, &message_new, K_MSEC(DELAY_MS)) == 0) {
 8043374:	b9d8      	cbnz	r0, 80433ae <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0x5e>
            if (message.interrupt_ms > 0) {
 8043376:	6865      	ldr	r5, [r4, #4]
 8043378:	2d00      	cmp	r5, #0
 804337a:	d057      	beq.n	804342c <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0xdc>
                if (message_new.interrupt_ms == 0) {
 804337c:	9b01      	ldr	r3, [sp, #4]
 804337e:	2b00      	cmp	r3, #0
 8043380:	f040 80a0 	bne.w	80434c4 <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0x174>
                    message_interrupted = message_new;
 8043384:	466a      	mov	r2, sp
 8043386:	f104 0310 	add.w	r3, r4, #16
 804338a:	af02      	add	r7, sp, #8
 804338c:	4615      	mov	r5, r2
 804338e:	3308      	adds	r3, #8
 8043390:	cd03      	ldmia	r5!, {r0, r1}
 8043392:	42bd      	cmp	r5, r7
 8043394:	f843 0c08 	str.w	r0, [r3, #-8]
 8043398:	f843 1c04 	str.w	r1, [r3, #-4]
 804339c:	462a      	mov	r2, r5
 804339e:	d1f5      	bne.n	804338c <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0x3c>
 80433a0:	6828      	ldr	r0, [r5, #0]
 80433a2:	6018      	str	r0, [r3, #0]
 80433a4:	88a9      	ldrh	r1, [r5, #4]
 80433a6:	79aa      	ldrb	r2, [r5, #6]
        bool updated{false};
 80433a8:	2500      	movs	r5, #0
                    message_interrupted = message_new;
 80433aa:	8099      	strh	r1, [r3, #4]
 80433ac:	719a      	strb	r2, [r3, #6]
        if (message.interrupt_ms > 0) {
 80433ae:	6863      	ldr	r3, [r4, #4]
 80433b0:	b36b      	cbz	r3, 804340e <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0xbe>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 80433b2:	f00b f8ed 	bl	804e590 <sys_clock_cycle_get_32>
            uint32_t delta_ms{k_cyc_to_ms_near32(k_cycle_get_32() - cycle_interrupted)};
 80433b6:	6a23      	ldr	r3, [r4, #32]
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_cyc_to_ms_near32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, true, false, true);
 80433b8:	2200      	movs	r2, #0
		if (result32 && (t < BIT64(32))) {
 80433ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80433be:	1ac0      	subs	r0, r0, r3
		t += off;
 80433c0:	4b42      	ldr	r3, [pc, #264]	; (80434cc <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0x17c>)
 80433c2:	18c3      	adds	r3, r0, r3
 80433c4:	f142 0100 	adc.w	r1, r2, #0
		if (result32 && (t < BIT64(32))) {
 80433c8:	429f      	cmp	r7, r3
 80433ca:	eb72 0301 	sbcs.w	r3, r2, r1
			return ((uint32_t)t) / (from_hz / to_hz);
 80433ce:	bf25      	ittet	cs
 80433d0:	f500 30d2 	addcs.w	r0, r0, #107520	; 0x1a400
 80433d4:	4b3e      	ldrcs	r3, [pc, #248]	; (80434d0 <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0x180>)
			return t / ((uint64_t)from_hz / to_hz);
 80433d6:	f644 50ac 	movwcc	r0, #19884	; 0x4dac
			return ((uint32_t)t) / (from_hz / to_hz);
 80433da:	f500 70f0 	addcs.w	r0, r0, #480	; 0x1e0
 80433de:	bf28      	it	cs
 80433e0:	fbb0 f0f3 	udivcs	r0, r0, r3
            if (delta_ms > message.interrupt_ms) {
 80433e4:	6863      	ldr	r3, [r4, #4]
 80433e6:	4283      	cmp	r3, r0
 80433e8:	d211      	bcs.n	804340e <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0xbe>
                message = message_interrupted;
 80433ea:	f104 0310 	add.w	r3, r4, #16
 80433ee:	4622      	mov	r2, r4
 80433f0:	f104 011c 	add.w	r1, r4, #28
 80433f4:	f853 0b04 	ldr.w	r0, [r3], #4
 80433f8:	428b      	cmp	r3, r1
 80433fa:	f842 0b04 	str.w	r0, [r2], #4
 80433fe:	d1f9      	bne.n	80433f4 <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0xa4>
 8043400:	8819      	ldrh	r1, [r3, #0]
                updated = true;
 8043402:	2501      	movs	r5, #1
                message = message_interrupted;
 8043404:	8011      	strh	r1, [r2, #0]
 8043406:	789b      	ldrb	r3, [r3, #2]
 8043408:	7093      	strb	r3, [r2, #2]
                message.interrupt_ms = 0;
 804340a:	2300      	movs	r3, #0
 804340c:	6063      	str	r3, [r4, #4]
        output = message;
 804340e:	f104 030c 	add.w	r3, r4, #12
 8043412:	f854 2b04 	ldr.w	r2, [r4], #4
 8043416:	429c      	cmp	r4, r3
 8043418:	f846 2b04 	str.w	r2, [r6], #4
 804341c:	d1f9      	bne.n	8043412 <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0xc2>
 804341e:	8823      	ldrh	r3, [r4, #0]
    }
 8043420:	4628      	mov	r0, r5
        output = message;
 8043422:	8033      	strh	r3, [r6, #0]
 8043424:	78a3      	ldrb	r3, [r4, #2]
 8043426:	70b3      	strb	r3, [r6, #2]
    }
 8043428:	b005      	add	sp, #20
 804342a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (message_new.pattern != message.pattern)
 804342c:	f89d 1000 	ldrb.w	r1, [sp]
 8043430:	7823      	ldrb	r3, [r4, #0]
 8043432:	428b      	cmp	r3, r1
 8043434:	d10d      	bne.n	8043452 <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0x102>
            message_new.pattern == msg::RGB_BLINK ||
 8043436:	3338      	adds	r3, #56	; 0x38
        if (message_new.pattern == msg::RGB ||
 8043438:	b2db      	uxtb	r3, r3
 804343a:	2b02      	cmp	r3, #2
 804343c:	d8b7      	bhi.n	80433ae <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0x5e>
            if (message_new.cpm != message.cpm ||
 804343e:	68a3      	ldr	r3, [r4, #8]
 8043440:	9a02      	ldr	r2, [sp, #8]
 8043442:	429a      	cmp	r2, r3
 8043444:	d105      	bne.n	8043452 <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0x102>
                message_new.rgb[1] != message.rgb[1] ||
 8043446:	68e3      	ldr	r3, [r4, #12]
 8043448:	9d03      	ldr	r5, [sp, #12]
 804344a:	405d      	eors	r5, r3
 804344c:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8043450:	d0ad      	beq.n	80433ae <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0x5e>
                    if (message_new.interrupt_ms > 0) {
 8043452:	9a01      	ldr	r2, [sp, #4]
 8043454:	b30a      	cbz	r2, 804349a <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0x14a>
                        LOG_INF("interrupted pattern %u %ums", message_new.pattern, message_new.interrupt_ms);
 8043456:	481f      	ldr	r0, [pc, #124]	; (80434d4 <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0x184>)
 8043458:	6803      	ldr	r3, [r0, #0]
 804345a:	f003 0307 	and.w	r3, r3, #7
 804345e:	2b02      	cmp	r3, #2
 8043460:	d909      	bls.n	8043476 <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0x126>
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
 8043462:	4d1d      	ldr	r5, [pc, #116]	; (80434d8 <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0x188>)
 8043464:	f04f 0303 	mov.w	r3, #3
 8043468:	1b40      	subs	r0, r0, r5
			sizeof(struct log_source_dynamic_data);
 804346a:	0880      	lsrs	r0, r0, #2
 804346c:	f360 138f 	bfi	r3, r0, #6, #10
 8043470:	481a      	ldr	r0, [pc, #104]	; (80434dc <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0x18c>)
 8043472:	f012 fdde 	bl	8056032 <log_2>
                        message_interrupted = message;
 8043476:	4623      	mov	r3, r4
 8043478:	f104 0210 	add.w	r2, r4, #16
 804347c:	f104 010c 	add.w	r1, r4, #12
 8043480:	f853 0b04 	ldr.w	r0, [r3], #4
 8043484:	428b      	cmp	r3, r1
 8043486:	f842 0b04 	str.w	r0, [r2], #4
 804348a:	d1f9      	bne.n	8043480 <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0x130>
 804348c:	8819      	ldrh	r1, [r3, #0]
 804348e:	8011      	strh	r1, [r2, #0]
 8043490:	789b      	ldrb	r3, [r3, #2]
 8043492:	7093      	strb	r3, [r2, #2]
 8043494:	f00b f87c 	bl	804e590 <sys_clock_cycle_get_32>
                        cycle_interrupted = k_cycle_get_32();
 8043498:	6220      	str	r0, [r4, #32]
                    message = message_new;
 804349a:	466b      	mov	r3, sp
 804349c:	4622      	mov	r2, r4
 804349e:	af02      	add	r7, sp, #8
 80434a0:	461d      	mov	r5, r3
 80434a2:	3208      	adds	r2, #8
 80434a4:	cd03      	ldmia	r5!, {r0, r1}
 80434a6:	42bd      	cmp	r5, r7
 80434a8:	f842 0c08 	str.w	r0, [r2, #-8]
 80434ac:	f842 1c04 	str.w	r1, [r2, #-4]
 80434b0:	462b      	mov	r3, r5
 80434b2:	d1f5      	bne.n	80434a0 <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0x150>
 80434b4:	6828      	ldr	r0, [r5, #0]
 80434b6:	6010      	str	r0, [r2, #0]
 80434b8:	88a9      	ldrh	r1, [r5, #4]
 80434ba:	79ab      	ldrb	r3, [r5, #6]
                    updated = true;
 80434bc:	2501      	movs	r5, #1
                    message = message_new;
 80434be:	8091      	strh	r1, [r2, #4]
 80434c0:	7193      	strb	r3, [r2, #6]
                    updated = true;
 80434c2:	e774      	b.n	80433ae <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0x5e>
        bool updated{false};
 80434c4:	4605      	mov	r5, r0
 80434c6:	e772      	b.n	80433ae <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE+0x5e>
 80434c8:	200233bc 	.word	0x200233bc
 80434cc:	0001a5e0 	.word	0x0001a5e0
 80434d0:	00034bc0 	.word	0x00034bc0
 80434d4:	20020908 	.word	0x20020908
 80434d8:	200208c8 	.word	0x200208c8
 80434dc:	0805eda1 	.word	0x0805eda1

080434e0 <_ZN8lexxhard14led_controller19led_controller_impl11fill_strobeERK7led_rgbjjj>:
    void fill_strobe(const led_rgb &color, uint32_t nstrobe, uint32_t strobedelay, uint32_t endpause) {
 80434e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (counter < nstrobe * strobedelay / delay) {
 80434e2:	435a      	muls	r2, r3
 80434e4:	2619      	movs	r6, #25
 80434e6:	f8d0 521c 	ldr.w	r5, [r0, #540]	; 0x21c
    void fill_strobe(const led_rgb &color, uint32_t nstrobe, uint32_t strobedelay, uint32_t endpause) {
 80434ea:	4604      	mov	r4, r0
 80434ec:	9f06      	ldr	r7, [sp, #24]
        if (counter < nstrobe * strobedelay / delay) {
 80434ee:	fbb2 fcf6 	udiv	ip, r2, r6
 80434f2:	4565      	cmp	r5, ip
 80434f4:	d211      	bcs.n	804351a <_ZN8lexxhard14led_controller19led_controller_impl11fill_strobeERK7led_rgbjjj+0x3a>
            if ((counter % (strobedelay * 2 / delay)) == 0)
 80434f6:	005c      	lsls	r4, r3, #1
 80434f8:	fbb4 f4f6 	udiv	r4, r4, r6
 80434fc:	fbb5 f2f4 	udiv	r2, r5, r4
 8043500:	fb04 5512 	mls	r5, r4, r2, r5
 8043504:	b91d      	cbnz	r5, 804350e <_ZN8lexxhard14led_controller19led_controller_impl11fill_strobeERK7led_rgbjjj+0x2e>
    }
 8043506:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 804350a:	f010 be32 	b.w	8054172 <_ZN8lexxhard14led_controller19led_controller_impl4fillERK7led_rgbj.part.0>
            else if ((counter % (strobedelay * 2 / delay)) == strobedelay / delay)
 804350e:	fbb3 f3f6 	udiv	r3, r3, r6
 8043512:	429d      	cmp	r5, r3
 8043514:	d10c      	bne.n	8043530 <_ZN8lexxhard14led_controller19led_controller_impl11fill_strobeERK7led_rgbjjj+0x50>
        if (select == LED_BOTH) {
 8043516:	4907      	ldr	r1, [pc, #28]	; (8043534 <_ZN8lexxhard14led_controller19led_controller_impl11fill_strobeERK7led_rgbjjj+0x54>)
 8043518:	e7f5      	b.n	8043506 <_ZN8lexxhard14led_controller19led_controller_impl11fill_strobeERK7led_rgbjjj+0x26>
        } else if (counter == (nstrobe * strobedelay + endpause) / delay) {
 804351a:	443a      	add	r2, r7
 804351c:	fbb2 f2f6 	udiv	r2, r2, r6
 8043520:	4295      	cmp	r5, r2
 8043522:	d105      	bne.n	8043530 <_ZN8lexxhard14led_controller19led_controller_impl11fill_strobeERK7led_rgbjjj+0x50>
        if (select == LED_BOTH) {
 8043524:	4903      	ldr	r1, [pc, #12]	; (8043534 <_ZN8lexxhard14led_controller19led_controller_impl11fill_strobeERK7led_rgbjjj+0x54>)
 8043526:	f010 fe24 	bl	8054172 <_ZN8lexxhard14led_controller19led_controller_impl4fillERK7led_rgbj.part.0>
            counter = 0;
 804352a:	2300      	movs	r3, #0
 804352c:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
    }
 8043530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8043532:	bf00      	nop
 8043534:	0805ee3e 	.word	0x0805ee3e

08043538 <_ZN8lexxhard14led_controller19led_controller_impl19fill_blink_sequenceERK7led_rgbj>:
    void fill_blink_sequence(const led_rgb &color, uint32_t select = LED_BOTH) {
 8043538:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (counter >= 8 && counter < 25) {
 804353a:	f8d0 721c 	ldr.w	r7, [r0, #540]	; 0x21c
    void fill_blink_sequence(const led_rgb &color, uint32_t select = LED_BOTH) {
 804353e:	4604      	mov	r4, r0
        if (counter >= 8 && counter < 25) {
 8043540:	f1a7 0308 	sub.w	r3, r7, #8
 8043544:	2b10      	cmp	r3, #16
 8043546:	d81c      	bhi.n	8043582 <_ZN8lexxhard14led_controller19led_controller_impl19fill_blink_sequenceERK7led_rgbj+0x4a>
            n = (counter - 8) * 6;
 8043548:	2306      	movs	r3, #6
 804354a:	437b      	muls	r3, r7
 804354c:	3b30      	subs	r3, #48	; 0x30
 804354e:	2b24      	cmp	r3, #36	; 0x24
 8043550:	bf28      	it	cs
 8043552:	2324      	movcs	r3, #36	; 0x24
        if (select == LED_BOTH) {
 8043554:	2a02      	cmp	r2, #2
 8043556:	d116      	bne.n	8043586 <_ZN8lexxhard14led_controller19led_controller_impl19fill_blink_sequenceERK7led_rgbj+0x4e>
 8043558:	4625      	mov	r5, r4
            for (uint32_t i{0}; i < PIXELS; ++i)
 804355a:	2200      	movs	r2, #0
                pixeldata[LED_LEFT][i] = pixeldata[LED_RIGHT][i] = i < n ? color : black;
 804355c:	4e1a      	ldr	r6, [pc, #104]	; (80435c8 <_ZN8lexxhard14led_controller19led_controller_impl19fill_blink_sequenceERK7led_rgbj+0x90>)
 804355e:	4293      	cmp	r3, r2
 8043560:	bf8c      	ite	hi
 8043562:	4608      	movhi	r0, r1
 8043564:	4630      	movls	r0, r6
            for (uint32_t i{0}; i < PIXELS; ++i)
 8043566:	3201      	adds	r2, #1
 8043568:	3504      	adds	r5, #4
                pixeldata[LED_LEFT][i] = pixeldata[LED_RIGHT][i] = i < n ? color : black;
 804356a:	6800      	ldr	r0, [r0, #0]
            for (uint32_t i{0}; i < PIXELS; ++i)
 804356c:	2a24      	cmp	r2, #36	; 0x24
                pixeldata[LED_LEFT][i] = pixeldata[LED_RIGHT][i] = i < n ? color : black;
 804356e:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 8043572:	6328      	str	r0, [r5, #48]	; 0x30
            for (uint32_t i{0}; i < PIXELS; ++i)
 8043574:	d1f3      	bne.n	804355e <_ZN8lexxhard14led_controller19led_controller_impl19fill_blink_sequenceERK7led_rgbj+0x26>
        if (counter > 25)
 8043576:	2f19      	cmp	r7, #25
            counter = 0;
 8043578:	bf84      	itt	hi
 804357a:	2300      	movhi	r3, #0
 804357c:	f8c4 321c 	strhi.w	r3, [r4, #540]	; 0x21c
    }
 8043580:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t n{0};
 8043582:	2300      	movs	r3, #0
 8043584:	e7e6      	b.n	8043554 <_ZN8lexxhard14led_controller19led_controller_impl19fill_blink_sequenceERK7led_rgbj+0x1c>
 8043586:	2690      	movs	r6, #144	; 0x90
            for (uint32_t i{0}; i < PIXELS; ++i)
 8043588:	2500      	movs	r5, #0
                pixeldata[select][i] = i < n ? color : black;
 804358a:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80435c8 <_ZN8lexxhard14led_controller19led_controller_impl19fill_blink_sequenceERK7led_rgbj+0x90>
 804358e:	fb06 4602 	mla	r6, r6, r2, r4
 8043592:	3634      	adds	r6, #52	; 0x34
 8043594:	42ab      	cmp	r3, r5
 8043596:	bf8c      	ite	hi
 8043598:	4608      	movhi	r0, r1
 804359a:	4660      	movls	r0, ip
 804359c:	6800      	ldr	r0, [r0, #0]
 804359e:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
            for (uint32_t i{0}; i < PIXELS; ++i)
 80435a2:	3501      	adds	r5, #1
 80435a4:	2d24      	cmp	r5, #36	; 0x24
 80435a6:	d1f5      	bne.n	8043594 <_ZN8lexxhard14led_controller19led_controller_impl19fill_blink_sequenceERK7led_rgbj+0x5c>
            fill(black, select == LED_LEFT ? LED_RIGHT : LED_LEFT);
 80435a8:	fab2 f282 	clz	r2, r2
 80435ac:	2390      	movs	r3, #144	; 0x90
                pixeldata[select][i] = color;
 80435ae:	4906      	ldr	r1, [pc, #24]	; (80435c8 <_ZN8lexxhard14led_controller19led_controller_impl19fill_blink_sequenceERK7led_rgbj+0x90>)
            fill(black, select == LED_LEFT ? LED_RIGHT : LED_LEFT);
 80435b0:	0952      	lsrs	r2, r2, #5
                pixeldata[select][i] = color;
 80435b2:	6809      	ldr	r1, [r1, #0]
 80435b4:	fb03 4202 	mla	r2, r3, r2, r4
            for (uint32_t i{0}; i < PIXELS; ++i)
 80435b8:	2300      	movs	r3, #0
 80435ba:	3234      	adds	r2, #52	; 0x34
                pixeldata[select][i] = color;
 80435bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            for (uint32_t i{0}; i < PIXELS; ++i)
 80435c0:	3301      	adds	r3, #1
 80435c2:	2b24      	cmp	r3, #36	; 0x24
 80435c4:	d1fa      	bne.n	80435bc <_ZN8lexxhard14led_controller19led_controller_impl19fill_blink_sequenceERK7led_rgbj+0x84>
 80435c6:	e7d6      	b.n	8043576 <_ZN8lexxhard14led_controller19led_controller_impl19fill_blink_sequenceERK7led_rgbj+0x3e>
 80435c8:	0805ee3e 	.word	0x0805ee3e

080435cc <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE>:
    void poll(const msg &message) {
 80435cc:	b5f0      	push	{r4, r5, r6, r7, lr}
        switch (message.pattern) {
 80435ce:	780b      	ldrb	r3, [r1, #0]
    void poll(const msg &message) {
 80435d0:	b085      	sub	sp, #20
 80435d2:	4604      	mov	r4, r0
 80435d4:	2500      	movs	r5, #0
        switch (message.pattern) {
 80435d6:	2b10      	cmp	r3, #16
 80435d8:	d80d      	bhi.n	80435f6 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x2a>
 80435da:	b1b3      	cbz	r3, 804360a <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x3e>
 80435dc:	3b01      	subs	r3, #1
 80435de:	2b0f      	cmp	r3, #15
 80435e0:	d813      	bhi.n	804360a <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x3e>
 80435e2:	e8df f003 	tbb	[pc, r3]
 80435e6:	3127      	.short	0x3127
 80435e8:	3a383634 	.word	0x3a383634
 80435ec:	3c121212 	.word	0x3c121212
 80435f0:	9e9c9691 	.word	0x9e9c9691
 80435f4:	a5a0      	.short	0xa5a0
 80435f6:	2bc8      	cmp	r3, #200	; 0xc8
 80435f8:	f000 80d5 	beq.w	80437a6 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x1da>
 80435fc:	d807      	bhi.n	804360e <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x42>
 80435fe:	2b64      	cmp	r3, #100	; 0x64
 8043600:	f000 80c9 	beq.w	8043796 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x1ca>
 8043604:	2b65      	cmp	r3, #101	; 0x65
 8043606:	f000 80c9 	beq.w	804379c <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x1d0>
        fill(counter < thres / 2 ? color : black);
 804360a:	497d      	ldr	r1, [pc, #500]	; (8043800 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x234>)
 804360c:	e01d      	b.n	804364a <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x7e>
        switch (message.pattern) {
 804360e:	2bc9      	cmp	r3, #201	; 0xc9
 8043610:	f000 80d8 	beq.w	80437c4 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x1f8>
 8043614:	2bca      	cmp	r3, #202	; 0xca
 8043616:	d1f8      	bne.n	804360a <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x3e>
        case msg::RGB_BREATH:      fill_fade(led_rgb{.r{message.rgb[0]}, .g{message.rgb[1]}, .b{message.rgb[2]}}, message.cpm);break;
 8043618:	7b0b      	ldrb	r3, [r1, #12]
 804361a:	688a      	ldr	r2, [r1, #8]
 804361c:	f88d 300d 	strb.w	r3, [sp, #13]
 8043620:	7b4b      	ldrb	r3, [r1, #13]
 8043622:	f88d 500c 	strb.w	r5, [sp, #12]
 8043626:	f88d 300e 	strb.w	r3, [sp, #14]
 804362a:	7b8b      	ldrb	r3, [r1, #14]
 804362c:	a903      	add	r1, sp, #12
 804362e:	f88d 300f 	strb.w	r3, [sp, #15]
 8043632:	e06b      	b.n	804370c <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x140>
        case msg::EMERGENCY_STOP:  fill_strobe(emergency_stop, 10, 50, 1000); break;
 8043634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8043638:	220a      	movs	r2, #10
 804363a:	4972      	ldr	r1, [pc, #456]	; (8043804 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x238>)
 804363c:	9300      	str	r3, [sp, #0]
 804363e:	2332      	movs	r3, #50	; 0x32
        case msg::MOVE_ACTUATOR:   fill_strobe(move_actuator, 10, 200, 200); break;
 8043640:	4620      	mov	r0, r4
        case msg::LOCKDOWN:        fill_strobe(lockdown, 10, 200, 0); break;
 8043642:	f7ff ff4d 	bl	80434e0 <_ZN8lexxhard14led_controller19led_controller_impl11fill_strobeERK7led_rgbjjj>
 8043646:	e03f      	b.n	80436c8 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0xfc>
        if (select == LED_BOTH) {
 8043648:	496f      	ldr	r1, [pc, #444]	; (8043808 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x23c>)
 804364a:	4620      	mov	r0, r4
 804364c:	e0b7      	b.n	80437be <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x1f2>
 804364e:	496f      	ldr	r1, [pc, #444]	; (804380c <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x240>)
 8043650:	e7fb      	b.n	804364a <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x7e>
 8043652:	496f      	ldr	r1, [pc, #444]	; (8043810 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x244>)
 8043654:	e7f9      	b.n	804364a <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x7e>
 8043656:	496f      	ldr	r1, [pc, #444]	; (8043814 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x248>)
 8043658:	e7f7      	b.n	804364a <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x7e>
 804365a:	496f      	ldr	r1, [pc, #444]	; (8043818 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x24c>)
 804365c:	e7f5      	b.n	804364a <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x7e>
        if (counter % 3 == 0)
 804365e:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
 8043662:	4b6e      	ldr	r3, [pc, #440]	; (804381c <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x250>)
 8043664:	4353      	muls	r3, r2
 8043666:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 804366a:	d92d      	bls.n	80436c8 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0xfc>
        if (counter > 256 * 3)
 804366c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
            counter = 0;
 8043670:	4601      	mov	r1, r0
                pixeldata[LED_LEFT][i] = pixeldata[LED_RIGHT][i] = wheel(((i * 256 / PIXELS) + counter / 3) & 255);
 8043672:	f04f 0603 	mov.w	r6, #3
 8043676:	f04f 0724 	mov.w	r7, #36	; 0x24
            counter = 0;
 804367a:	bf84      	itt	hi
 804367c:	2300      	movhi	r3, #0
 804367e:	f8c0 321c 	strhi.w	r3, [r0, #540]	; 0x21c
    void poll(const msg &message) {
 8043682:	2000      	movs	r0, #0
                pixeldata[LED_LEFT][i] = pixeldata[LED_RIGHT][i] = wheel(((i * 256 / PIXELS) + counter / 3) & 255);
 8043684:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 8043688:	fbb0 f3f7 	udiv	r3, r0, r7
 804368c:	fbb2 f2f6 	udiv	r2, r2, r6
 8043690:	441a      	add	r2, r3
 8043692:	b2d3      	uxtb	r3, r2
        if (wheelpos < thres) {
 8043694:	2b54      	cmp	r3, #84	; 0x54
 8043696:	d821      	bhi.n	80436dc <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x110>
            color.r = wheelpos * 3;
 8043698:	eb02 0242 	add.w	r2, r2, r2, lsl #1
            color.b = 0;
 804369c:	f04f 0c00 	mov.w	ip, #0
            color.r = wheelpos * 3;
 80436a0:	b2d2      	uxtb	r2, r2
            color.g = 255 - wheelpos * 3;
 80436a2:	43d3      	mvns	r3, r2
 80436a4:	b2db      	uxtb	r3, r3
            for (uint32_t i{0}; i < PIXELS; ++i)
 80436a6:	f500 7080 	add.w	r0, r0, #256	; 0x100
                pixeldata[LED_LEFT][i] = pixeldata[LED_RIGHT][i] = wheel(((i * 256 / PIXELS) + counter / 3) & 255);
 80436aa:	f881 50c4 	strb.w	r5, [r1, #196]	; 0xc4
 80436ae:	f881 20c5 	strb.w	r2, [r1, #197]	; 0xc5
            for (uint32_t i{0}; i < PIXELS; ++i)
 80436b2:	3104      	adds	r1, #4
                pixeldata[LED_LEFT][i] = pixeldata[LED_RIGHT][i] = wheel(((i * 256 / PIXELS) + counter / 3) & 255);
 80436b4:	f881 30c2 	strb.w	r3, [r1, #194]	; 0xc2
            for (uint32_t i{0}; i < PIXELS; ++i)
 80436b8:	f5b0 5f10 	cmp.w	r0, #9216	; 0x2400
                pixeldata[LED_LEFT][i] = pixeldata[LED_RIGHT][i] = wheel(((i * 256 / PIXELS) + counter / 3) & 255);
 80436bc:	f881 c0c3 	strb.w	ip, [r1, #195]	; 0xc3
 80436c0:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
 80436c4:	630b      	str	r3, [r1, #48]	; 0x30
            for (uint32_t i{0}; i < PIXELS; ++i)
 80436c6:	d1dd      	bne.n	8043684 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0xb8>
        update();
 80436c8:	4620      	mov	r0, r4
 80436ca:	f010 fd88 	bl	80541de <_ZN8lexxhard14led_controller19led_controller_impl6updateEv>
        ++counter;
 80436ce:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80436d2:	3301      	adds	r3, #1
 80436d4:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
    }
 80436d8:	b005      	add	sp, #20
 80436da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if (wheelpos < thres * 2) {
 80436dc:	2ba9      	cmp	r3, #169	; 0xa9
 80436de:	d809      	bhi.n	80436f4 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x128>
            wheelpos -= thres;
 80436e0:	3b55      	subs	r3, #85	; 0x55
            color.r = 255 - wheelpos * 3;
 80436e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80436e6:	fa5f fc83 	uxtb.w	ip, r3
            color.g = 0;
 80436ea:	2300      	movs	r3, #0
            color.r = 255 - wheelpos * 3;
 80436ec:	ea6f 020c 	mvn.w	r2, ip
 80436f0:	b2d2      	uxtb	r2, r2
            color.b = wheelpos * 3;
 80436f2:	e7d8      	b.n	80436a6 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0xda>
            wheelpos -= thres * 2;
 80436f4:	3baa      	subs	r3, #170	; 0xaa
            color.r = 0;
 80436f6:	2200      	movs	r2, #0
            color.g = wheelpos * 3;
 80436f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80436fc:	b2db      	uxtb	r3, r3
            color.b = 255 - wheelpos * 3;
 80436fe:	ea6f 0c03 	mvn.w	ip, r3
 8043702:	fa5f fc8c 	uxtb.w	ip, ip
 8043706:	e7ce      	b.n	80436a6 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0xda>
        case msg::WAITING_FOR_JOB: fill_fade(waiting_for_job, 9); break;
 8043708:	2209      	movs	r2, #9
 804370a:	4945      	ldr	r1, [pc, #276]	; (8043820 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x254>)
        case msg::RGB_BREATH:      fill_fade(led_rgb{.r{message.rgb[0]}, .g{message.rgb[1]}, .b{message.rgb[2]}}, message.cpm);break;
 804370c:	f010 fd92 	bl	8054234 <_ZN8lexxhard14led_controller19led_controller_impl9fill_fadeERK7led_rgbj>
 8043710:	e7da      	b.n	80436c8 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0xfc>
        case msg::LEFT_WINKER:     fill_blink_sequence(sequence, LED_LEFT); break;
 8043712:	2200      	movs	r2, #0
        case msg::BOTH_WINKER:     fill_blink_sequence(sequence, LED_BOTH); break;
 8043714:	4943      	ldr	r1, [pc, #268]	; (8043824 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x258>)
 8043716:	4620      	mov	r0, r4
 8043718:	f7ff ff0e 	bl	8043538 <_ZN8lexxhard14led_controller19led_controller_impl19fill_blink_sequenceERK7led_rgbj>
 804371c:	e7d4      	b.n	80436c8 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0xfc>
        case msg::RIGHT_WINKER:    fill_blink_sequence(sequence, LED_RIGHT); break;
 804371e:	2201      	movs	r2, #1
 8043720:	e7f8      	b.n	8043714 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x148>
        case msg::BOTH_WINKER:     fill_blink_sequence(sequence, LED_BOTH); break;
 8043722:	2202      	movs	r2, #2
 8043724:	e7f6      	b.n	8043714 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x148>
        case msg::MOVE_ACTUATOR:   fill_strobe(move_actuator, 10, 200, 200); break;
 8043726:	23c8      	movs	r3, #200	; 0xc8
 8043728:	220a      	movs	r2, #10
 804372a:	493f      	ldr	r1, [pc, #252]	; (8043828 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x25c>)
 804372c:	9300      	str	r3, [sp, #0]
 804372e:	e787      	b.n	8043640 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x74>
        if (counter >= thres * 2)
 8043730:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8043734:	2b4f      	cmp	r3, #79	; 0x4f
            counter = 0;
 8043736:	bf84      	itt	hi
 8043738:	2300      	movhi	r3, #0
 804373a:	f8c0 321c 	strhi.w	r3, [r0, #540]	; 0x21c
        if (counter >= thres)
 804373e:	f8d0 521c 	ldr.w	r5, [r0, #540]	; 0x21c
 8043742:	2d27      	cmp	r5, #39	; 0x27
            head = PIXELS - (PIXELS * counter / thres);
 8043744:	bf97      	itett	ls
 8043746:	2324      	movls	r3, #36	; 0x24
            head = 0;
 8043748:	2500      	movhi	r5, #0
            head = PIXELS - (PIXELS * counter / thres);
 804374a:	435d      	mulls	r5, r3
 804374c:	2328      	movls	r3, #40	; 0x28
 804374e:	bf9c      	itt	ls
 8043750:	fbb5 f5f3 	udivls	r5, r5, r3
 8043754:	f1c5 0524 	rsbls	r5, r5, #36	; 0x24
        uint32_t rsoc{can_controller::get_rsoc()};
 8043758:	f7ff fc0c 	bl	8042f74 <_ZN8lexxhard14can_controller8get_rsocEv>
        if (rsoc < 100) {
 804375c:	2863      	cmp	r0, #99	; 0x63
 804375e:	d809      	bhi.n	8043774 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x1a8>
            n = PIXELS - (PIXELS * rsoc / 100U);
 8043760:	2324      	movs	r3, #36	; 0x24
 8043762:	4358      	muls	r0, r3
 8043764:	2364      	movs	r3, #100	; 0x64
 8043766:	fbb0 f0f3 	udiv	r0, r0, r3
 804376a:	f1c0 0024 	rsb	r0, r0, #36	; 0x24
 804376e:	4285      	cmp	r5, r0
 8043770:	bf38      	it	cc
 8043772:	4605      	movcc	r5, r0
        for (uint32_t i{0}; i < PIXELS; ++i)
 8043774:	4622      	mov	r2, r4
 8043776:	2300      	movs	r3, #0
            pixeldata[LED_LEFT][i] = pixeldata[LED_RIGHT][i] = i < n ? black : color;
 8043778:	4f21      	ldr	r7, [pc, #132]	; (8043800 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x234>)
 804377a:	4e2c      	ldr	r6, [pc, #176]	; (804382c <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x260>)
 804377c:	429d      	cmp	r5, r3
 804377e:	bf8c      	ite	hi
 8043780:	4639      	movhi	r1, r7
 8043782:	4631      	movls	r1, r6
        for (uint32_t i{0}; i < PIXELS; ++i)
 8043784:	3301      	adds	r3, #1
 8043786:	3204      	adds	r2, #4
            pixeldata[LED_LEFT][i] = pixeldata[LED_RIGHT][i] = i < n ? black : color;
 8043788:	6808      	ldr	r0, [r1, #0]
        for (uint32_t i{0}; i < PIXELS; ++i)
 804378a:	2b24      	cmp	r3, #36	; 0x24
            pixeldata[LED_LEFT][i] = pixeldata[LED_RIGHT][i] = i < n ? black : color;
 804378c:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
 8043790:	6310      	str	r0, [r2, #48]	; 0x30
        for (uint32_t i{0}; i < PIXELS; ++i)
 8043792:	d1f3      	bne.n	804377c <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x1b0>
 8043794:	e798      	b.n	80436c8 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0xfc>
        case msg::SHOWTIME:        fill_knight_industries_two_thousand(); break;
 8043796:	f010 fd82 	bl	805429e <_ZN8lexxhard14led_controller19led_controller_impl35fill_knight_industries_two_thousandEv>
 804379a:	e795      	b.n	80436c8 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0xfc>
        case msg::LOCKDOWN:        fill_strobe(lockdown, 10, 200, 0); break;
 804379c:	23c8      	movs	r3, #200	; 0xc8
 804379e:	220a      	movs	r2, #10
 80437a0:	4923      	ldr	r1, [pc, #140]	; (8043830 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x264>)
 80437a2:	9500      	str	r5, [sp, #0]
 80437a4:	e74d      	b.n	8043642 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x76>
        case msg::RGB:             fill(led_rgb{.r{message.rgb[0]}, .g{message.rgb[1]}, .b{message.rgb[2]}}); break;
 80437a6:	7b0b      	ldrb	r3, [r1, #12]
 80437a8:	f88d 500c 	strb.w	r5, [sp, #12]
 80437ac:	f88d 300d 	strb.w	r3, [sp, #13]
 80437b0:	7b4b      	ldrb	r3, [r1, #13]
 80437b2:	f88d 300e 	strb.w	r3, [sp, #14]
 80437b6:	7b8b      	ldrb	r3, [r1, #14]
 80437b8:	a903      	add	r1, sp, #12
 80437ba:	f88d 300f 	strb.w	r3, [sp, #15]
        if (select == LED_BOTH) {
 80437be:	f010 fcd8 	bl	8054172 <_ZN8lexxhard14led_controller19led_controller_impl4fillERK7led_rgbj.part.0>
        case msg::RGB_BLINK:       fill_blink(led_rgb{.r{message.rgb[0]}, .g{message.rgb[1]}, .b{message.rgb[2]}}, message.cpm); break;
 80437c2:	e781      	b.n	80436c8 <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0xfc>
 80437c4:	7b0b      	ldrb	r3, [r1, #12]
        uint32_t thres{60 * hz / count_per_min};
 80437c6:	688a      	ldr	r2, [r1, #8]
        case msg::RGB_BLINK:       fill_blink(led_rgb{.r{message.rgb[0]}, .g{message.rgb[1]}, .b{message.rgb[2]}}, message.cpm); break;
 80437c8:	f88d 300d 	strb.w	r3, [sp, #13]
 80437cc:	7b4b      	ldrb	r3, [r1, #13]
 80437ce:	f88d 500c 	strb.w	r5, [sp, #12]
 80437d2:	f88d 300e 	strb.w	r3, [sp, #14]
 80437d6:	7b8b      	ldrb	r3, [r1, #14]
 80437d8:	f88d 300f 	strb.w	r3, [sp, #15]
        uint32_t thres{60 * hz / count_per_min};
 80437dc:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80437e0:	fbb3 f3f2 	udiv	r3, r3, r2
        if (counter >= thres)
 80437e4:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
 80437e8:	4293      	cmp	r3, r2
            counter = 0;
 80437ea:	bf98      	it	ls
 80437ec:	f8c0 521c 	strls.w	r5, [r0, #540]	; 0x21c
        fill(counter < thres / 2 ? color : black);
 80437f0:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
 80437f4:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
 80437f8:	f4bf af07 	bcs.w	804360a <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x3e>
 80437fc:	a903      	add	r1, sp, #12
 80437fe:	e724      	b.n	804364a <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE+0x7e>
 8043800:	0805ee3e 	.word	0x0805ee3e
 8043804:	0805ee36 	.word	0x0805ee36
 8043808:	0805ee46 	.word	0x0805ee46
 804380c:	0805ee42 	.word	0x0805ee42
 8043810:	0805ee2e 	.word	0x0805ee2e
 8043814:	0805ee2a 	.word	0x0805ee2a
 8043818:	0805ee26 	.word	0x0805ee26
 804381c:	aaaaaaab 	.word	0xaaaaaaab
 8043820:	0805ee3a 	.word	0x0805ee3a
 8043824:	0805ee4e 	.word	0x0805ee4e
 8043828:	0805ee32 	.word	0x0805ee32
 804382c:	0805ee22 	.word	0x0805ee22
 8043830:	0805ee4a 	.word	0x0805ee4a

08043834 <_ZN8lexxhard14led_controller4initEv>:
    SHELL_SUBCMD_SET_END
);
SHELL_CMD_REGISTER(led, &sub, "LED commands", NULL);

void init()
{
 8043834:	b510      	push	{r4, lr}
        k_msgq_init(&msgq, msgq_buffer, sizeof (msg), 8);
 8043836:	2308      	movs	r3, #8
 8043838:	2210      	movs	r2, #16
 804383a:	4916      	ldr	r1, [pc, #88]	; (8043894 <_ZN8lexxhard14led_controller4initEv+0x60>)
 804383c:	4816      	ldr	r0, [pc, #88]	; (8043898 <_ZN8lexxhard14led_controller4initEv+0x64>)
 804383e:	f016 fd87 	bl	805a350 <k_msgq_init>
        dev[LED_LEFT] = device_get_binding("WS2812_0");
 8043842:	4c16      	ldr	r4, [pc, #88]	; (804389c <_ZN8lexxhard14led_controller4initEv+0x68>)
 8043844:	4816      	ldr	r0, [pc, #88]	; (80438a0 <_ZN8lexxhard14led_controller4initEv+0x6c>)
 8043846:	f00d fc59 	bl	80510fc <z_impl_device_get_binding>
 804384a:	6260      	str	r0, [r4, #36]	; 0x24
 804384c:	4815      	ldr	r0, [pc, #84]	; (80438a4 <_ZN8lexxhard14led_controller4initEv+0x70>)
 804384e:	f00d fc55 	bl	80510fc <z_impl_device_get_binding>
        dev[LED_RIGHT] = device_get_binding("WS2812_1");
 8043852:	62a0      	str	r0, [r4, #40]	; 0x28
 8043854:	4814      	ldr	r0, [pc, #80]	; (80438a8 <_ZN8lexxhard14led_controller4initEv+0x74>)
 8043856:	f00d fc51 	bl	80510fc <z_impl_device_get_binding>
        dev[2] = device_get_binding("WS2812_3");
 804385a:	62e0      	str	r0, [r4, #44]	; 0x2c
 804385c:	4813      	ldr	r0, [pc, #76]	; (80438ac <_ZN8lexxhard14led_controller4initEv+0x78>)
 804385e:	f00d fc4d 	bl	80510fc <z_impl_device_get_binding>
        dev[3] = device_get_binding("WS2812_2");
 8043862:	6320      	str	r0, [r4, #48]	; 0x30
        if (!device_is_ready(dev[LED_LEFT]) || !device_is_ready(dev[LED_RIGHT]) ||
 8043864:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8043866:	f010 fc78 	bl	805415a <device_is_ready>
            !device_is_ready(dev[2]) || !device_is_ready(dev[3]))
 804386a:	b190      	cbz	r0, 8043892 <_ZN8lexxhard14led_controller4initEv+0x5e>
        if (!device_is_ready(dev[LED_LEFT]) || !device_is_ready(dev[LED_RIGHT]) ||
 804386c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 804386e:	f010 fc74 	bl	805415a <device_is_ready>
 8043872:	b170      	cbz	r0, 8043892 <_ZN8lexxhard14led_controller4initEv+0x5e>
            !device_is_ready(dev[2]) || !device_is_ready(dev[3]))
 8043874:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8043876:	f010 fc70 	bl	805415a <device_is_ready>
        if (!device_is_ready(dev[LED_LEFT]) || !device_is_ready(dev[LED_RIGHT]) ||
 804387a:	b150      	cbz	r0, 8043892 <_ZN8lexxhard14led_controller4initEv+0x5e>
            !device_is_ready(dev[2]) || !device_is_ready(dev[3]))
 804387c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 804387e:	f010 fc6c 	bl	805415a <device_is_ready>
 8043882:	b130      	cbz	r0, 8043892 <_ZN8lexxhard14led_controller4initEv+0x5e>
        if (select == LED_BOTH) {
 8043884:	4620      	mov	r0, r4
 8043886:	490a      	ldr	r1, [pc, #40]	; (80438b0 <_ZN8lexxhard14led_controller4initEv+0x7c>)
 8043888:	f010 fc73 	bl	8054172 <_ZN8lexxhard14led_controller19led_controller_impl4fillERK7led_rgbj.part.0>
        update();
 804388c:	4620      	mov	r0, r4
 804388e:	f010 fca6 	bl	80541de <_ZN8lexxhard14led_controller19led_controller_impl6updateEv>
    impl.init();
}
 8043892:	bd10      	pop	{r4, pc}
 8043894:	2002311c 	.word	0x2002311c
 8043898:	200233bc 	.word	0x200233bc
 804389c:	2002319c 	.word	0x2002319c
 80438a0:	0805edbd 	.word	0x0805edbd
 80438a4:	0805edc6 	.word	0x0805edc6
 80438a8:	0805edcf 	.word	0x0805edcf
 80438ac:	0805edd8 	.word	0x0805edd8
 80438b0:	0805ee3e 	.word	0x0805ee3e

080438b4 <_ZN8lexxhard14led_controller3runEPvS1_S1_>:

void run(void *p1, void *p2, void *p3)
{
 80438b4:	b530      	push	{r4, r5, lr}
        if (!device_is_ready(dev[LED_LEFT]) || !device_is_ready(dev[LED_RIGHT]) ||
 80438b6:	4c14      	ldr	r4, [pc, #80]	; (8043908 <_ZN8lexxhard14led_controller3runEPvS1_S1_+0x54>)
{
 80438b8:	b085      	sub	sp, #20
        if (!device_is_ready(dev[LED_LEFT]) || !device_is_ready(dev[LED_RIGHT]) ||
 80438ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80438bc:	f010 fc4d 	bl	805415a <device_is_ready>
            !device_is_ready(dev[2]) || !device_is_ready(dev[3]))
 80438c0:	b1f8      	cbz	r0, 8043902 <_ZN8lexxhard14led_controller3runEPvS1_S1_+0x4e>
        if (!device_is_ready(dev[LED_LEFT]) || !device_is_ready(dev[LED_RIGHT]) ||
 80438c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80438c4:	f010 fc49 	bl	805415a <device_is_ready>
 80438c8:	b1d8      	cbz	r0, 8043902 <_ZN8lexxhard14led_controller3runEPvS1_S1_+0x4e>
            !device_is_ready(dev[2]) || !device_is_ready(dev[3]))
 80438ca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80438cc:	f010 fc45 	bl	805415a <device_is_ready>
        if (!device_is_ready(dev[LED_LEFT]) || !device_is_ready(dev[LED_RIGHT]) ||
 80438d0:	b1b8      	cbz	r0, 8043902 <_ZN8lexxhard14led_controller3runEPvS1_S1_+0x4e>
            !device_is_ready(dev[2]) || !device_is_ready(dev[3]))
 80438d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80438d4:	f010 fc41 	bl	805415a <device_is_ready>
 80438d8:	b198      	cbz	r0, 8043902 <_ZN8lexxhard14led_controller3runEPvS1_S1_+0x4e>
 80438da:	2500      	movs	r5, #0
            if (rec.get_message(message))
 80438dc:	4669      	mov	r1, sp
 80438de:	4620      	mov	r0, r4
 80438e0:	9502      	str	r5, [sp, #8]
 80438e2:	f8ad 500c 	strh.w	r5, [sp, #12]
 80438e6:	f88d 500e 	strb.w	r5, [sp, #14]
 80438ea:	e9cd 5500 	strd	r5, r5, [sp]
 80438ee:	f7ff fd2f 	bl	8043350 <_ZN8lexxhard14led_controller20led_message_receiver11get_messageERNS0_3msgE>
 80438f2:	b108      	cbz	r0, 80438f8 <_ZN8lexxhard14led_controller3runEPvS1_S1_+0x44>
                counter = 0;
 80438f4:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
            poll(message);
 80438f8:	4669      	mov	r1, sp
 80438fa:	4620      	mov	r0, r4
 80438fc:	f7ff fe66 	bl	80435cc <_ZN8lexxhard14led_controller19led_controller_impl4pollERKNS0_3msgE>
        }
 8043900:	e7ec      	b.n	80438dc <_ZN8lexxhard14led_controller3runEPvS1_S1_+0x28>
    impl.run();
    //while(1);
}
 8043902:	b005      	add	sp, #20
 8043904:	bd30      	pop	{r4, r5, pc}
 8043906:	bf00      	nop
 8043908:	2002319c 	.word	0x2002319c

0804390c <_GLOBAL__sub_I__ZN8lexxhard14led_controller13log_const_ledE>:

k_thread thread;
k_msgq msgq;

}
 804390c:	b538      	push	{r3, r4, r5, lr}
    led_message_receiver() {
 804390e:	4c0a      	ldr	r4, [pc, #40]	; (8043938 <_GLOBAL__sub_I__ZN8lexxhard14led_controller13log_const_ledE+0x2c>)
 8043910:	2500      	movs	r5, #0
 8043912:	2364      	movs	r3, #100	; 0x64
class led_controller_impl {
 8043914:	2210      	movs	r2, #16
 8043916:	4629      	mov	r1, r5
 8043918:	f104 0024 	add.w	r0, r4, #36	; 0x24
    led_message_receiver() {
 804391c:	6225      	str	r5, [r4, #32]
 804391e:	e9c4 3500 	strd	r3, r5, [r4]
 8043922:	e9c4 5502 	strd	r5, r5, [r4, #8]
 8043926:	e9c4 5504 	strd	r5, r5, [r4, #16]
 804392a:	e9c4 5506 	strd	r5, r5, [r4, #24]
class led_controller_impl {
 804392e:	f017 fa8d 	bl	805ae4c <memset>
 8043932:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
}
 8043936:	bd38      	pop	{r3, r4, r5, pc}
 8043938:	2002319c 	.word	0x2002319c

0804393c <_ZN8lexxhard14log_controller16write_log_to_memEPhjPv>:
    uint32_t index{0};
    uint8_t buf[SIZE + 1];
} ringbuf;

int write_log_to_mem(uint8_t *data, size_t length, void *ctx)
{
 804393c:	4602      	mov	r2, r0
 804393e:	b570      	push	{r4, r5, r6, lr}
 8043940:	1846      	adds	r6, r0, r1
            buf[index] = *data++;
 8043942:	4808      	ldr	r0, [pc, #32]	; (8043964 <_ZN8lexxhard14log_controller16write_log_to_memEPhjPv+0x28>)
 8043944:	6803      	ldr	r3, [r0, #0]
        while (length--) {
 8043946:	42b2      	cmp	r2, r6
 8043948:	eb00 0403 	add.w	r4, r0, r3
 804394c:	d006      	beq.n	804395c <_ZN8lexxhard14log_controller16write_log_to_memEPhjPv+0x20>
         return (i + 1) & (SIZE - 1);
 804394e:	3301      	adds	r3, #1
            buf[index] = *data++;
 8043950:	f812 5b01 	ldrb.w	r5, [r2], #1
         return (i + 1) & (SIZE - 1);
 8043954:	b29b      	uxth	r3, r3
            buf[index] = *data++;
 8043956:	7125      	strb	r5, [r4, #4]
            index = next(index);
 8043958:	6003      	str	r3, [r0, #0]
        while (length--) {
 804395a:	e7f3      	b.n	8043944 <_ZN8lexxhard14log_controller16write_log_to_memEPhjPv+0x8>
        buf[index] = 0x00;
 804395c:	2300      	movs	r3, #0
    ringbuf.put(data, length);
    return length;
}
 804395e:	4608      	mov	r0, r1
        buf[index] = 0x00;
 8043960:	7123      	strb	r3, [r4, #4]
}
 8043962:	bd70      	pop	{r4, r5, r6, pc}
 8043964:	200243f0 	.word	0x200243f0

08043968 <_ZN8lexxhard14log_controller11logapi_initEPK11log_backend>:
        index = 0;
 8043968:	4b04      	ldr	r3, [pc, #16]	; (804397c <_ZN8lexxhard14log_controller11logapi_initEPK11log_backend+0x14>)
 804396a:	2200      	movs	r2, #0
        buf[SIZE - 1] = 0xff; // overwrap detector
 804396c:	21ff      	movs	r1, #255	; 0xff
        index = 0;
 804396e:	601a      	str	r2, [r3, #0]
        buf[index]    = 0x00;
 8043970:	711a      	strb	r2, [r3, #4]
        buf[SIZE - 1] = 0xff; // overwrap detector
 8043972:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8043976:	70d9      	strb	r1, [r3, #3]
        buf[SIZE]     = 0x00; // null terminator for print to end of buffer
 8043978:	711a      	strb	r2, [r3, #4]
LOG_OUTPUT_DEFINE(log_output, write_log_to_mem, log_output_buf, sizeof log_output_buf);

void logapi_init(const log_backend *const backend)
{
    ringbuf.init();
}
 804397a:	4770      	bx	lr
 804397c:	200243f0 	.word	0x200243f0

08043980 <_ZN8lexxhard14log_controller14logapi_droppedEPK11log_backendj>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 8043980:	4801      	ldr	r0, [pc, #4]	; (8043988 <_ZN8lexxhard14log_controller14logapi_droppedEPK11log_backendj+0x8>)
 8043982:	f001 bec5 	b.w	8045710 <log_output_dropped_process>
 8043986:	bf00      	nop
 8043988:	0805c728 	.word	0x0805c728

0804398c <_ZN8lexxhard14log_controller10logapi_putEPK11log_backendP7log_msg>:

void logapi_put(const log_backend *const backend, log_msg *msg)
{
 804398c:	b510      	push	{r4, lr}
 804398e:	460c      	mov	r4, r1
	log_msg_get(msg);
 8043990:	4608      	mov	r0, r1
 8043992:	f012 fbec 	bl	805616e <log_msg_get>
	log_output_msg_process(output, msg, flags);
 8043996:	4805      	ldr	r0, [pc, #20]	; (80439ac <_ZN8lexxhard14log_controller10logapi_putEPK11log_backendP7log_msg+0x20>)
 8043998:	4621      	mov	r1, r4
 804399a:	220a      	movs	r2, #10
 804399c:	f001 fe3c 	bl	8045618 <log_output_msg_process>
	log_msg_put(msg);
 80439a0:	4620      	mov	r0, r4
    log_backend_std_put(&log_output, 0, msg);
}
 80439a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80439a6:	f012 bc11 	b.w	80561cc <log_msg_put>
 80439aa:	bf00      	nop
 80439ac:	0805c728 	.word	0x0805c728

080439b0 <_ZNK8lexxhard14log_controller17overwrap_ring_buf4showEPK5shell>:
    void show(const shell *shell) const {
 80439b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80439b2:	4605      	mov	r5, r0
 80439b4:	4608      	mov	r0, r1
        if (buf[SIZE - 1] == 0xff) {
 80439b6:	f505 3380 	add.w	r3, r5, #65536	; 0x10000
 80439ba:	78db      	ldrb	r3, [r3, #3]
 80439bc:	2bff      	cmp	r3, #255	; 0xff
 80439be:	d107      	bne.n	80439d0 <_ZNK8lexxhard14log_controller17overwrap_ring_buf4showEPK5shell+0x20>
            shell_fprintf(shell, SHELL_NORMAL, "%s", buf);
 80439c0:	1d2b      	adds	r3, r5, #4
 80439c2:	4a10      	ldr	r2, [pc, #64]	; (8043a04 <_ZNK8lexxhard14log_controller17overwrap_ring_buf4showEPK5shell+0x54>)
 80439c4:	2100      	movs	r1, #0
    }
 80439c6:	b003      	add	sp, #12
 80439c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            shell_fprintf(shell, SHELL_NORMAL, "%s", buf);
 80439cc:	f012 bf77 	b.w	80568be <shell_fprintf>
        uint32_t last{next(index)};
 80439d0:	682a      	ldr	r2, [r5, #0]
         return (i + 1) & (SIZE - 1);
 80439d2:	1c53      	adds	r3, r2, #1
 80439d4:	b29b      	uxth	r3, r3
        for (uint32_t i{last}; i != index; i = next(i)) {
 80439d6:	461c      	mov	r4, r3
 80439d8:	42a2      	cmp	r2, r4
 80439da:	d011      	beq.n	8043a00 <_ZNK8lexxhard14log_controller17overwrap_ring_buf4showEPK5shell+0x50>
            if (buf[i] == '\n')
 80439dc:	1929      	adds	r1, r5, r4
         return (i + 1) & (SIZE - 1);
 80439de:	3401      	adds	r4, #1
            if (buf[i] == '\n')
 80439e0:	7909      	ldrb	r1, [r1, #4]
         return (i + 1) & (SIZE - 1);
 80439e2:	b2a4      	uxth	r4, r4
            if (buf[i] == '\n')
 80439e4:	290a      	cmp	r1, #10
 80439e6:	d1f7      	bne.n	80439d8 <_ZNK8lexxhard14log_controller17overwrap_ring_buf4showEPK5shell+0x28>
            shell_fprintf(shell, SHELL_NORMAL, "%s", &buf[last]);
 80439e8:	1d23      	adds	r3, r4, #4
 80439ea:	4a06      	ldr	r2, [pc, #24]	; (8043a04 <_ZNK8lexxhard14log_controller17overwrap_ring_buf4showEPK5shell+0x54>)
 80439ec:	2100      	movs	r1, #0
 80439ee:	9001      	str	r0, [sp, #4]
 80439f0:	442b      	add	r3, r5
 80439f2:	f012 ff64 	bl	80568be <shell_fprintf>
            if (last != 0)
 80439f6:	9801      	ldr	r0, [sp, #4]
 80439f8:	2c00      	cmp	r4, #0
 80439fa:	d1e1      	bne.n	80439c0 <_ZNK8lexxhard14log_controller17overwrap_ring_buf4showEPK5shell+0x10>
    }
 80439fc:	b003      	add	sp, #12
 80439fe:	bd30      	pop	{r4, r5, pc}
        return last;
 8043a00:	461c      	mov	r4, r3
 8043a02:	e7f1      	b.n	80439e8 <_ZNK8lexxhard14log_controller17overwrap_ring_buf4showEPK5shell+0x38>
 8043a04:	0806018b 	.word	0x0806018b

08043a08 <_ZN8lexxhard14log_controller8cmd_showEPK5shelljPPc>:
};

LOG_BACKEND_DEFINE(log_backend_mem, log_backend_mem_api, true);

int cmd_show(const shell *shell, size_t argc, char **argv)
{
 8043a08:	4601      	mov	r1, r0
    ringbuf.show(shell);
 8043a0a:	4803      	ldr	r0, [pc, #12]	; (8043a18 <_ZN8lexxhard14log_controller8cmd_showEPK5shelljPPc+0x10>)
{
 8043a0c:	b508      	push	{r3, lr}
    ringbuf.show(shell);
 8043a0e:	f7ff ffcf 	bl	80439b0 <_ZNK8lexxhard14log_controller17overwrap_ring_buf4showEPK5shell>
    return 0;
}
 8043a12:	2000      	movs	r0, #0
 8043a14:	bd08      	pop	{r3, pc}
 8043a16:	bf00      	nop
 8043a18:	200243f0 	.word	0x200243f0

08043a1c <_GLOBAL__sub_I__ZN8lexxhard14log_controller7ringbufE>:
class overwrap_ring_buf {
 8043a1c:	4b01      	ldr	r3, [pc, #4]	; (8043a24 <_GLOBAL__sub_I__ZN8lexxhard14log_controller7ringbufE+0x8>)
 8043a1e:	2200      	movs	r2, #0
 8043a20:	601a      	str	r2, [r3, #0]
    SHELL_CMD(show, NULL, "Show memory log", cmd_show),
    SHELL_SUBCMD_SET_END
);
SHELL_CMD_REGISTER(mlog, &sub, "Memory log commands", NULL);

}
 8043a22:	4770      	bx	lr
 8043a24:	200243f0 	.word	0x200243f0

08043a28 <main>:
}

}

void main()
{
 8043a28:	b570      	push	{r4, r5, r6, lr}
 8043a2a:	b088      	sub	sp, #32
    // lexxhard::adc_reader::init();
    // lexxhard::can_controller::init();
    // lexxhard::firmware_updater::init();
    // lexxhard::imu_controller::init();
    // lexxhard::interlock_controller::init();
    lexxhard::led_controller::init();
 8043a2c:	f7ff ff02 	bl	8043834 <_ZN8lexxhard14led_controller4initEv>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8043a30:	f644 6220 	movw	r2, #20000	; 0x4e20
 8043a34:	2300      	movs	r3, #0
 8043a36:	491d      	ldr	r1, [pc, #116]	; (8043aac <main+0x84>)
 8043a38:	481d      	ldr	r0, [pc, #116]	; (8043ab0 <main+0x88>)
 8043a3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8043a3e:	2301      	movs	r3, #1
 8043a40:	2202      	movs	r2, #2
 8043a42:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8043a46:	2300      	movs	r3, #0
 8043a48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8043a4c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8043a50:	9300      	str	r3, [sp, #0]
 8043a52:	4b18      	ldr	r3, [pc, #96]	; (8043ab4 <main+0x8c>)
 8043a54:	f00d fe5e 	bl	8051714 <z_impl_k_thread_create>
 8043a58:	4817      	ldr	r0, [pc, #92]	; (8043ab8 <main+0x90>)
 8043a5a:	f00d fb4f 	bl	80510fc <z_impl_device_get_binding>
    // RUN(tof_controller, 2);
    // RUN(uss_controller, 2);
    // RUN(runaway_detector, 4);
    // RUN(rosserial, 5); // The rosserial thread will be started last.
    const device *gpiog{device_get_binding("GPIOG")};
    if (gpiog != nullptr)
 8043a5e:	4604      	mov	r4, r0
 8043a60:	b150      	cbz	r0, 8043a78 <main+0x50>
	struct gpio_driver_data *data =
 8043a62:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
 8043a64:	6881      	ldr	r1, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8043a66:	6813      	ldr	r3, [r2, #0]
 8043a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8043a6c:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
 8043a6e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8043a72:	680b      	ldr	r3, [r1, #0]
 8043a74:	2107      	movs	r1, #7
 8043a76:	4798      	blx	r3
{
 8043a78:	2501      	movs	r5, #1
        gpio_pin_configure(gpiog, 7, GPIO_OUTPUT_LOW | GPIO_ACTIVE_HIGH);
    int heartbeat_led{1};
    while (true) {
        if (gpiog != nullptr) {
 8043a7a:	f085 0601 	eor.w	r6, r5, #1
 8043a7e:	b164      	cbz	r4, 8043a9a <main+0x72>

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8043a80:	6923      	ldr	r3, [r4, #16]
 8043a82:	681b      	ldr	r3, [r3, #0]
		value = (value != 0) ? 0 : 1;
 8043a84:	f013 0f80 	tst.w	r3, #128	; 0x80
 8043a88:	bf18      	it	ne
 8043a8a:	4635      	movne	r5, r6
	if (value != 0)	{
 8043a8c:	b15d      	cbz	r5, 8043aa6 <main+0x7e>
	return api->port_set_bits_raw(port, pins);
 8043a8e:	68a3      	ldr	r3, [r4, #8]
 8043a90:	68db      	ldr	r3, [r3, #12]
            gpio_pin_set(gpiog, 7, heartbeat_led);
            heartbeat_led = !heartbeat_led;
 8043a92:	4635      	mov	r5, r6
	return api->port_clear_bits_raw(port, pins);
 8043a94:	2180      	movs	r1, #128	; 0x80
 8043a96:	4620      	mov	r0, r4
 8043a98:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
 8043a9a:	2100      	movs	r1, #0
 8043a9c:	f242 7010 	movw	r0, #10000	; 0x2710
 8043aa0:	f00e fc02 	bl	80522a8 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
 8043aa4:	e7e9      	b.n	8043a7a <main+0x52>
 8043aa6:	68a3      	ldr	r3, [r4, #8]
 8043aa8:	691b      	ldr	r3, [r3, #16]
 8043aaa:	e7f2      	b.n	8043a92 <main+0x6a>
 8043aac:	20039b00 	.word	0x20039b00
 8043ab0:	20020a68 	.word	0x20020a68
 8043ab4:	080438b5 	.word	0x080438b5
 8043ab8:	0805ee90 	.word	0x0805ee90

08043abc <_ZN8lexxhard15misc_controller4infoEPK5shelljPPc>:
    float get_main_board_temp() const {return temperature[3];}
    float get_actuator_board_temp(int index) const {
        switch (index) {
        case 0:  return temperature[0];
        case 1:  return temperature[2];
        case 2:  return temperature[1];
 8043abc:	4b11      	ldr	r3, [pc, #68]	; (8043b04 <_ZN8lexxhard15misc_controller4infoEPK5shelljPPc+0x48>)
        shell_print(shell,
 8043abe:	2100      	movs	r1, #0
 8043ac0:	4a11      	ldr	r2, [pc, #68]	; (8043b08 <_ZN8lexxhard15misc_controller4infoEPK5shelljPPc+0x4c>)
 8043ac2:	ed93 7a02 	vldr	s14, [r3, #8]
 8043ac6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    float temperature[TEMPERATURE_NUM]{0.0f, 0.0f, 0.0f, 0.0f};
    static constexpr uint8_t ADDR{0b1001000};
} impl;

int info(const shell *shell, size_t argc, char **argv)
{
 8043aca:	b500      	push	{lr}
 8043acc:	b089      	sub	sp, #36	; 0x24
        shell_print(shell,
 8043ace:	ed8d 7b06 	vstr	d7, [sp, #24]
 8043ad2:	ed93 7a03 	vldr	s14, [r3, #12]
 8043ad6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8043ada:	ed8d 7b04 	vstr	d7, [sp, #16]
 8043ade:	ed93 7a01 	vldr	s14, [r3, #4]
 8043ae2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8043ae6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8043aea:	ed93 7a04 	vldr	s14, [r3, #16]
 8043aee:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8043af2:	ed8d 7b00 	vstr	d7, [sp]
 8043af6:	f012 fee2 	bl	80568be <shell_fprintf>
    impl.info(shell);
    return 0;
}
 8043afa:	2000      	movs	r0, #0
 8043afc:	b009      	add	sp, #36	; 0x24
 8043afe:	f85d fb04 	ldr.w	pc, [sp], #4
 8043b02:	bf00      	nop
 8043b04:	2003440c 	.word	0x2003440c
 8043b08:	0805ee96 	.word	0x0805ee96

08043b0c <_ZN8lexxhard14pgv_controller4infoEPK5shelljPPc>:
            }
            k_msleep(10);
        }
    }
    void info(const shell *shell) const {
        shell_print(shell, "pgv info is not supported on this firmware version");
 8043b0c:	4a03      	ldr	r2, [pc, #12]	; (8043b1c <_ZN8lexxhard14pgv_controller4infoEPK5shelljPPc+0x10>)
 8043b0e:	2100      	movs	r1, #0
    msg pgv2can;
    k_sem sem;
} impl;

int info(const shell *shell, size_t argc, char **argv)
{
 8043b10:	b508      	push	{r3, lr}
        shell_print(shell, "pgv info is not supported on this firmware version");
 8043b12:	f012 fed4 	bl	80568be <shell_fprintf>
    impl.info(shell);
    return 0;
}
 8043b16:	2000      	movs	r0, #0
 8043b18:	bd08      	pop	{r3, pc}
 8043b1a:	bf00      	nop
 8043b1c:	0805eee3 	.word	0x0805eee3

08043b20 <_GLOBAL__sub_I__ZN8lexxhard14pgv_controller13log_const_pgvE>:
class pgv_controller_impl {
 8043b20:	4b03      	ldr	r3, [pc, #12]	; (8043b30 <_GLOBAL__sub_I__ZN8lexxhard14pgv_controller13log_const_pgvE+0x10>)
 8043b22:	2200      	movs	r2, #0
 8043b24:	e9c3 2290 	strd	r2, r2, [r3, #576]	; 0x240
 8043b28:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
}

k_thread thread;
k_msgq msgq, msgq_control;

}
 8043b2c:	4770      	bx	lr
 8043b2e:	bf00      	nop
 8043b30:	20034420 	.word	0x20034420

08043b34 <_ZN8std_msgs4Time7getTypeEv>:
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->data.nsec);
     return offset;
    }

    virtual const char * getType() override { return "std_msgs/Time"; };
 8043b34:	4800      	ldr	r0, [pc, #0]	; (8043b38 <_ZN8std_msgs4Time7getTypeEv+0x4>)
 8043b36:	4770      	bx	lr
 8043b38:	0805ef38 	.word	0x0805ef38

08043b3c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8043b3c:	4800      	ldr	r0, [pc, #0]	; (8043b40 <_ZN8std_msgs4Time6getMD5Ev+0x4>)
 8043b3e:	4770      	bx	lr
 8043b40:	0805ef46 	.word	0x0805ef46

08043b44 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:
      this->buffer_size = u_buffer_size.real;
      offset += sizeof(this->buffer_size);
     return offset;
    }

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8043b44:	4800      	ldr	r0, [pc, #0]	; (8043b48 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x4>)
 8043b46:	4770      	bx	lr
 8043b48:	0805ef67 	.word	0x0805ef67

08043b4c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8043b4c:	4800      	ldr	r0, [pc, #0]	; (8043b50 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x4>)
 8043b4e:	4770      	bx	lr
 8043b50:	0805ef80 	.word	0x0805ef80

08043b54 <_ZN14rosserial_msgs3Log7getTypeEv>:
      this->msg = (char *)(inbuffer + offset-1);
      offset += length_msg;
     return offset;
    }

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8043b54:	4800      	ldr	r0, [pc, #0]	; (8043b58 <_ZN14rosserial_msgs3Log7getTypeEv+0x4>)
 8043b56:	4770      	bx	lr
 8043b58:	0805efa1 	.word	0x0805efa1

08043b5c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8043b5c:	4800      	ldr	r0, [pc, #0]	; (8043b60 <_ZN14rosserial_msgs3Log6getMD5Ev+0x4>)
 8043b5e:	4770      	bx	lr
 8043b60:	0805efb4 	.word	0x0805efb4

08043b64 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    virtual const char * getType() override { return REQUESTPARAM; };
 8043b64:	4800      	ldr	r0, [pc, #0]	; (8043b68 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x4>)
 8043b66:	4770      	bx	lr
 8043b68:	0805f99b 	.word	0x0805f99b

08043b6c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8043b6c:	4800      	ldr	r0, [pc, #0]	; (8043b70 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x4>)
 8043b6e:	4770      	bx	lr
 8043b70:	0805efd5 	.word	0x0805efd5

08043b74 <_ZN8std_msgs6Header7getTypeEv>:
      this->frame_id = (char *)(inbuffer + offset-1);
      offset += length_frame_id;
     return offset;
    }

    virtual const char * getType() override { return "std_msgs/Header"; };
 8043b74:	4800      	ldr	r0, [pc, #0]	; (8043b78 <_ZN8std_msgs6Header7getTypeEv+0x4>)
 8043b76:	4770      	bx	lr
 8043b78:	0805eff6 	.word	0x0805eff6

08043b7c <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 8043b7c:	4800      	ldr	r0, [pc, #0]	; (8043b80 <_ZN8std_msgs6Header6getMD5Ev+0x4>)
 8043b7e:	4770      	bx	lr
 8043b80:	0805f006 	.word	0x0805f006

08043b84 <_ZN11sensor_msgs12BatteryState7getTypeEv>:
      this->serial_number = (char *)(inbuffer + offset-1);
      offset += length_serial_number;
     return offset;
    }

    virtual const char * getType() override { return "sensor_msgs/BatteryState"; };
 8043b84:	4800      	ldr	r0, [pc, #0]	; (8043b88 <_ZN11sensor_msgs12BatteryState7getTypeEv+0x4>)
 8043b86:	4770      	bx	lr
 8043b88:	0805f027 	.word	0x0805f027

08043b8c <_ZN11sensor_msgs12BatteryState6getMD5Ev>:
    virtual const char * getMD5() override { return "4ddae7f048e32fda22cac764685e3974"; };
 8043b8c:	4800      	ldr	r0, [pc, #0]	; (8043b90 <_ZN11sensor_msgs12BatteryState6getMD5Ev+0x4>)
 8043b8e:	4770      	bx	lr
 8043b90:	0805f040 	.word	0x0805f040

08043b94 <_ZN11sensor_msgs11Temperature7getTypeEv>:
      this->variance = u_variance.real;
      offset += sizeof(this->variance);
     return offset;
    }

    virtual const char * getType() override { return "sensor_msgs/Temperature"; };
 8043b94:	4800      	ldr	r0, [pc, #0]	; (8043b98 <_ZN11sensor_msgs11Temperature7getTypeEv+0x4>)
 8043b96:	4770      	bx	lr
 8043b98:	0805f061 	.word	0x0805f061

08043b9c <_ZN11sensor_msgs11Temperature6getMD5Ev>:
    virtual const char * getMD5() override { return "ff71b307acdbe7c871a5a6d7ed359100"; };
 8043b9c:	4800      	ldr	r0, [pc, #0]	; (8043ba0 <_ZN11sensor_msgs11Temperature6getMD5Ev+0x4>)
 8043b9e:	4770      	bx	lr
 8043ba0:	0805f079 	.word	0x0805f079

08043ba4 <_ZN13lexxauto_msgs7Battery7getTypeEv>:
      this->state_of_health =  ((uint8_t) (*(inbuffer + offset)));
      offset += sizeof(this->state_of_health);
     return offset;
    }

    virtual const char * getType() override { return "lexxauto_msgs/Battery"; };
 8043ba4:	4800      	ldr	r0, [pc, #0]	; (8043ba8 <_ZN13lexxauto_msgs7Battery7getTypeEv+0x4>)
 8043ba6:	4770      	bx	lr
 8043ba8:	0805f09a 	.word	0x0805f09a

08043bac <_ZN13lexxauto_msgs7Battery6getMD5Ev>:
    virtual const char * getMD5() override { return "613e648de502c9f11fd29aa4bc7d095e"; };
 8043bac:	4800      	ldr	r0, [pc, #0]	; (8043bb0 <_ZN13lexxauto_msgs7Battery6getMD5Ev+0x4>)
 8043bae:	4770      	bx	lr
 8043bb0:	0805f0b0 	.word	0x0805f0b0

08043bb4 <_ZN8std_msgs4Bool7getTypeEv>:
      this->data = u_data.real;
      offset += sizeof(this->data);
     return offset;
    }

    virtual const char * getType() override { return "std_msgs/Bool"; };
 8043bb4:	4800      	ldr	r0, [pc, #0]	; (8043bb8 <_ZN8std_msgs4Bool7getTypeEv+0x4>)
 8043bb6:	4770      	bx	lr
 8043bb8:	0805f0d1 	.word	0x0805f0d1

08043bbc <_ZN8std_msgs4Bool6getMD5Ev>:
    virtual const char * getMD5() override { return "8b94c1b53db61fb6aed406028ad6332a"; };
 8043bbc:	4800      	ldr	r0, [pc, #0]	; (8043bc0 <_ZN8std_msgs4Bool6getMD5Ev+0x4>)
 8043bbe:	4770      	bx	lr
 8043bc0:	0805f0df 	.word	0x0805f0df

08043bc4 <_ZN8std_msgs4Byte7getTypeEv>:
      this->data = u_data.real;
      offset += sizeof(this->data);
     return offset;
    }

    virtual const char * getType() override { return "std_msgs/Byte"; };
 8043bc4:	4800      	ldr	r0, [pc, #0]	; (8043bc8 <_ZN8std_msgs4Byte7getTypeEv+0x4>)
 8043bc6:	4770      	bx	lr
 8043bc8:	0805f100 	.word	0x0805f100

08043bcc <_ZN8std_msgs4Byte6getMD5Ev>:
    virtual const char * getMD5() override { return "ad736a2e8818154c487bb80fe42ce43b"; };
 8043bcc:	4800      	ldr	r0, [pc, #0]	; (8043bd0 <_ZN8std_msgs4Byte6getMD5Ev+0x4>)
 8043bce:	4770      	bx	lr
 8043bd0:	0805f10e 	.word	0x0805f10e

08043bd4 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->stride);
     return offset;
    }

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 8043bd4:	4800      	ldr	r0, [pc, #0]	; (8043bd8 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x4>)
 8043bd6:	4770      	bx	lr
 8043bd8:	0805f12f 	.word	0x0805f12f

08043bdc <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8043bdc:	4800      	ldr	r0, [pc, #0]	; (8043be0 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x4>)
 8043bde:	4770      	bx	lr
 8043be0:	0805f14c 	.word	0x0805f14c

08043be4 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->data_offset);
     return offset;
    }

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 8043be4:	4800      	ldr	r0, [pc, #0]	; (8043be8 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x4>)
 8043be6:	4770      	bx	lr
 8043be8:	0805f16d 	.word	0x0805f16d

08043bec <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8043bec:	4800      	ldr	r0, [pc, #0]	; (8043bf0 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x4>)
 8043bee:	4770      	bx	lr
 8043bf0:	0805f187 	.word	0x0805f187

08043bf4 <_ZN8std_msgs14ByteMultiArray7getTypeEv>:
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int8_t));
      }
     return offset;
    }

    virtual const char * getType() override { return "std_msgs/ByteMultiArray"; };
 8043bf4:	4800      	ldr	r0, [pc, #0]	; (8043bf8 <_ZN8std_msgs14ByteMultiArray7getTypeEv+0x4>)
 8043bf6:	4770      	bx	lr
 8043bf8:	0805f1a8 	.word	0x0805f1a8

08043bfc <_ZN8std_msgs14ByteMultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "70ea476cbcfd65ac2f68f3cda1e891fe"; };
 8043bfc:	4800      	ldr	r0, [pc, #0]	; (8043c00 <_ZN8std_msgs14ByteMultiArray6getMD5Ev+0x4>)
 8043bfe:	4770      	bx	lr
 8043c00:	0805f1c0 	.word	0x0805f1c0

08043c04 <_ZN8std_msgs6String7getTypeEv>:
      this->data = (char *)(inbuffer + offset-1);
      offset += length_data;
     return offset;
    }

    virtual const char * getType() override { return "std_msgs/String"; };
 8043c04:	4800      	ldr	r0, [pc, #0]	; (8043c08 <_ZN8std_msgs6String7getTypeEv+0x4>)
 8043c06:	4770      	bx	lr
 8043c08:	0805f1e1 	.word	0x0805f1e1

08043c0c <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8043c0c:	4800      	ldr	r0, [pc, #0]	; (8043c10 <_ZN8std_msgs6String6getMD5Ev+0x4>)
 8043c0e:	4770      	bx	lr
 8043c10:	0805f1f1 	.word	0x0805f1f1

08043c14 <_ZN8std_msgs15UInt8MultiArray7getTypeEv>:
        memcpy( &(this->data[i]), &(this->st_data), sizeof(uint8_t));
      }
     return offset;
    }

    virtual const char * getType() override { return "std_msgs/UInt8MultiArray"; };
 8043c14:	4800      	ldr	r0, [pc, #0]	; (8043c18 <_ZN8std_msgs15UInt8MultiArray7getTypeEv+0x4>)
 8043c16:	4770      	bx	lr
 8043c18:	0805f212 	.word	0x0805f212

08043c1c <_ZN8std_msgs15UInt8MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "82373f1612381bb6ee473b5cd6f5d89c"; };
 8043c1c:	4800      	ldr	r0, [pc, #0]	; (8043c20 <_ZN8std_msgs15UInt8MultiArray6getMD5Ev+0x4>)
 8043c1e:	4770      	bx	lr
 8043c20:	0805f22b 	.word	0x0805f22b

08043c24 <_ZN8std_msgs5UInt87getTypeEv>:
      this->data =  ((uint8_t) (*(inbuffer + offset)));
      offset += sizeof(this->data);
     return offset;
    }

    virtual const char * getType() override { return "std_msgs/UInt8"; };
 8043c24:	4800      	ldr	r0, [pc, #0]	; (8043c28 <_ZN8std_msgs5UInt87getTypeEv+0x4>)
 8043c26:	4770      	bx	lr
 8043c28:	0805f24c 	.word	0x0805f24c

08043c2c <_ZN8std_msgs5UInt86getMD5Ev>:
    virtual const char * getMD5() override { return "7c8164229e7d2c17eb95e9231617fdee"; };
 8043c2c:	4800      	ldr	r0, [pc, #0]	; (8043c30 <_ZN8std_msgs5UInt86getMD5Ev+0x4>)
 8043c2e:	4770      	bx	lr
 8043c30:	0805f25b 	.word	0x0805f25b

08043c34 <_ZN8std_msgs7Float327getTypeEv>:
      this->data = u_data.real;
      offset += sizeof(this->data);
     return offset;
    }

    virtual const char * getType() override { return "std_msgs/Float32"; };
 8043c34:	4800      	ldr	r0, [pc, #0]	; (8043c38 <_ZN8std_msgs7Float327getTypeEv+0x4>)
 8043c36:	4770      	bx	lr
 8043c38:	0805f27c 	.word	0x0805f27c

08043c3c <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 8043c3c:	4800      	ldr	r0, [pc, #0]	; (8043c40 <_ZN8std_msgs7Float326getMD5Ev+0x4>)
 8043c3e:	4770      	bx	lr
 8043c40:	0805f28d 	.word	0x0805f28d

08043c44 <_ZN13lexxauto_msgs17BoardTemperatures7getTypeEv>:
      offset += this->charge_plus.deserialize(inbuffer + offset);
      offset += this->charge_minus.deserialize(inbuffer + offset);
     return offset;
    }

    virtual const char * getType() override { return "lexxauto_msgs/BoardTemperatures"; };
 8043c44:	4800      	ldr	r0, [pc, #0]	; (8043c48 <_ZN13lexxauto_msgs17BoardTemperatures7getTypeEv+0x4>)
 8043c46:	4770      	bx	lr
 8043c48:	0805f2ae 	.word	0x0805f2ae

08043c4c <_ZN13lexxauto_msgs17BoardTemperatures6getMD5Ev>:
    virtual const char * getMD5() override { return "a42e69a015ec838a78d43fc7898038a0"; };
 8043c4c:	4800      	ldr	r0, [pc, #0]	; (8043c50 <_ZN13lexxauto_msgs17BoardTemperatures6getMD5Ev+0x4>)
 8043c4e:	4770      	bx	lr
 8043c50:	0805f2ce 	.word	0x0805f2ce

08043c54 <_ZN8std_msgs16UInt16MultiArray7getTypeEv>:
        memcpy( &(this->data[i]), &(this->st_data), sizeof(uint16_t));
      }
     return offset;
    }

    virtual const char * getType() override { return "std_msgs/UInt16MultiArray"; };
 8043c54:	4800      	ldr	r0, [pc, #0]	; (8043c58 <_ZN8std_msgs16UInt16MultiArray7getTypeEv+0x4>)
 8043c56:	4770      	bx	lr
 8043c58:	0805f2ef 	.word	0x0805f2ef

08043c5c <_ZN8std_msgs16UInt16MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "52f264f1c973c4b73790d384c6cb4484"; };
 8043c5c:	4800      	ldr	r0, [pc, #0]	; (8043c60 <_ZN8std_msgs16UInt16MultiArray6getMD5Ev+0x4>)
 8043c5e:	4770      	bx	lr
 8043c60:	0805f309 	.word	0x0805f309

08043c64 <_ZN13geometry_msgs7Vector37getTypeEv>:
      this->z = u_z.real;
      offset += sizeof(this->z);
     return offset;
    }

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8043c64:	4800      	ldr	r0, [pc, #0]	; (8043c68 <_ZN13geometry_msgs7Vector37getTypeEv+0x4>)
 8043c66:	4770      	bx	lr
 8043c68:	0805f32a 	.word	0x0805f32a

08043c6c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8043c6c:	4800      	ldr	r0, [pc, #0]	; (8043c70 <_ZN13geometry_msgs7Vector36getMD5Ev+0x4>)
 8043c6e:	4770      	bx	lr
 8043c70:	0805f340 	.word	0x0805f340

08043c74 <_ZN13lexxauto_msgs3Imu7getTypeEv>:
      offset += this->ang.deserialize(inbuffer + offset);
      offset += this->gyro.deserialize(inbuffer + offset);
     return offset;
    }

    virtual const char * getType() override { return "lexxauto_msgs/Imu"; };
 8043c74:	4800      	ldr	r0, [pc, #0]	; (8043c78 <_ZN13lexxauto_msgs3Imu7getTypeEv+0x4>)
 8043c76:	4770      	bx	lr
 8043c78:	0805f361 	.word	0x0805f361

08043c7c <_ZN13lexxauto_msgs3Imu6getMD5Ev>:
    virtual const char * getMD5() override { return "a3dd8e0f22c6b70b08a627b100690339"; };
 8043c7c:	4800      	ldr	r0, [pc, #0]	; (8043c80 <_ZN13lexxauto_msgs3Imu6getMD5Ev+0x4>)
 8043c7e:	4770      	bx	lr
 8043c80:	0805f373 	.word	0x0805f373

08043c84 <_ZN8std_msgs17Float64MultiArray7getTypeEv>:
        memcpy( &(this->data[i]), &(this->st_data), sizeof(double));
      }
     return offset;
    }

    virtual const char * getType() override { return "std_msgs/Float64MultiArray"; };
 8043c84:	4800      	ldr	r0, [pc, #0]	; (8043c88 <_ZN8std_msgs17Float64MultiArray7getTypeEv+0x4>)
 8043c86:	4770      	bx	lr
 8043c88:	0805f394 	.word	0x0805f394

08043c8c <_ZN8std_msgs17Float64MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "4b7d974086d4060e7db4613a7e6c3ba4"; };
 8043c8c:	4800      	ldr	r0, [pc, #0]	; (8043c90 <_ZN8std_msgs17Float64MultiArray6getMD5Ev+0x4>)
 8043c8e:	4770      	bx	lr
 8043c90:	0805f3af 	.word	0x0805f3af

08043c94 <_ZN3ros10SubscriberIN8std_msgs4BoolEN8lexxhard13ros_interlockEE10getMsgTypeEv>:
  }

  virtual const char * getMsgType() override
  {
    return this->msg.getType();
  }
 8043c94:	4800      	ldr	r0, [pc, #0]	; (8043c98 <_ZN3ros10SubscriberIN8std_msgs4BoolEN8lexxhard13ros_interlockEE10getMsgTypeEv+0x4>)
 8043c96:	4770      	bx	lr
 8043c98:	0805f0d1 	.word	0x0805f0d1

08043c9c <_ZN3ros10SubscriberIN8std_msgs4BoolEN8lexxhard13ros_interlockEE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
 8043c9c:	4800      	ldr	r0, [pc, #0]	; (8043ca0 <_ZN3ros10SubscriberIN8std_msgs4BoolEN8lexxhard13ros_interlockEE9getMsgMD5Ev+0x4>)
 8043c9e:	4770      	bx	lr
 8043ca0:	0805f0df 	.word	0x0805f0df

08043ca4 <_ZN3ros10SubscriberIN8std_msgs15UInt8MultiArrayEN8lexxhard7ros_dfuEE10getMsgTypeEv>:
  }
 8043ca4:	4800      	ldr	r0, [pc, #0]	; (8043ca8 <_ZN3ros10SubscriberIN8std_msgs15UInt8MultiArrayEN8lexxhard7ros_dfuEE10getMsgTypeEv+0x4>)
 8043ca6:	4770      	bx	lr
 8043ca8:	0805f212 	.word	0x0805f212

08043cac <_ZN3ros10SubscriberIN8std_msgs15UInt8MultiArrayEN8lexxhard7ros_dfuEE9getMsgMD5Ev>:
  }
 8043cac:	4800      	ldr	r0, [pc, #0]	; (8043cb0 <_ZN3ros10SubscriberIN8std_msgs15UInt8MultiArrayEN8lexxhard7ros_dfuEE9getMsgMD5Ev+0x4>)
 8043cae:	4770      	bx	lr
 8043cb0:	0805f22b 	.word	0x0805f22b

08043cb4 <_ZN3ros10SubscriberIN8std_msgs6StringEN8lexxhard9ros_boardEE10getMsgTypeEv>:
  }
 8043cb4:	4800      	ldr	r0, [pc, #0]	; (8043cb8 <_ZN3ros10SubscriberIN8std_msgs6StringEN8lexxhard9ros_boardEE10getMsgTypeEv+0x4>)
 8043cb6:	4770      	bx	lr
 8043cb8:	0805f1e1 	.word	0x0805f1e1

08043cbc <_ZN3ros10SubscriberIN8std_msgs6StringEN8lexxhard9ros_boardEE9getMsgMD5Ev>:
  }
 8043cbc:	4800      	ldr	r0, [pc, #0]	; (8043cc0 <_ZN3ros10SubscriberIN8std_msgs6StringEN8lexxhard9ros_boardEE9getMsgMD5Ev+0x4>)
 8043cbe:	4770      	bx	lr
 8043cc0:	0805f1f1 	.word	0x0805f1f1

08043cc4 <_ZN3ros10SubscriberIN8std_msgs4BoolEN8lexxhard9ros_boardEE10getMsgTypeEv>:
  }
 8043cc4:	4800      	ldr	r0, [pc, #0]	; (8043cc8 <_ZN3ros10SubscriberIN8std_msgs4BoolEN8lexxhard9ros_boardEE10getMsgTypeEv+0x4>)
 8043cc6:	4770      	bx	lr
 8043cc8:	0805f0d1 	.word	0x0805f0d1

08043ccc <_ZN3ros10SubscriberIN8std_msgs4BoolEN8lexxhard9ros_boardEE9getMsgMD5Ev>:
  }
 8043ccc:	4800      	ldr	r0, [pc, #0]	; (8043cd0 <_ZN3ros10SubscriberIN8std_msgs4BoolEN8lexxhard9ros_boardEE9getMsgMD5Ev+0x4>)
 8043cce:	4770      	bx	lr
 8043cd0:	0805f0df 	.word	0x0805f0df

08043cd4 <_ZN8lexxhard9ros_board18callback_messengerERKN8std_msgs4BoolE>:
        if (strncmp(req.data, "wheel_", 6) == 0)
            ros2board.wheel_power_off = strcmp(req.data, "wheel_poweroff") == 0;
        while (k_msgq_put(&can_controller::msgq_control, &ros2board, K_NO_WAIT) != 0)
            k_msgq_purge(&can_controller::msgq_control);
    }
    void callback_messenger(const std_msgs::Bool &req) {
 8043cd4:	b538      	push	{r3, r4, r5, lr}
        while (k_msgq_put(&can_controller::msgq_control, &ros2board, K_NO_WAIT) != 0)
 8043cd6:	f500 74d4 	add.w	r4, r0, #424	; 0x1a8
	return z_impl_k_msgq_put(msgq, data, timeout);
 8043cda:	4d06      	ldr	r5, [pc, #24]	; (8043cf4 <_ZN8lexxhard9ros_board18callback_messengerERKN8std_msgs4BoolE+0x20>)
 8043cdc:	2200      	movs	r2, #0
 8043cde:	2300      	movs	r3, #0
 8043ce0:	4621      	mov	r1, r4
 8043ce2:	4804      	ldr	r0, [pc, #16]	; (8043cf4 <_ZN8lexxhard9ros_board18callback_messengerERKN8std_msgs4BoolE+0x20>)
 8043ce4:	f00d fd90 	bl	8051808 <z_impl_k_msgq_put>
 8043ce8:	b118      	cbz	r0, 8043cf2 <_ZN8lexxhard9ros_board18callback_messengerERKN8std_msgs4BoolE+0x1e>
	z_impl_k_msgq_purge(msgq);
 8043cea:	4628      	mov	r0, r5
 8043cec:	f016 fb5e 	bl	805a3ac <z_impl_k_msgq_purge>
}
 8043cf0:	e7f4      	b.n	8043cdc <_ZN8lexxhard9ros_board18callback_messengerERKN8std_msgs4BoolE+0x8>
            k_msgq_purge(&can_controller::msgq_control);
    }
 8043cf2:	bd38      	pop	{r3, r4, r5, pc}
 8043cf4:	20022bf8 	.word	0x20022bf8

08043cf8 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
    configured_ = true;
  }

  virtual int publish(int id, const Msg * msg) override
  {
    if (id >= 100 && !configured_)
 8043cf8:	2963      	cmp	r1, #99	; 0x63
  virtual int publish(int id, const Msg * msg) override
 8043cfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8043cfe:	4604      	mov	r4, r0
 8043d00:	b085      	sub	sp, #20
 8043d02:	460e      	mov	r6, r1
 8043d04:	4610      	mov	r0, r2
    if (id >= 100 && !configured_)
 8043d06:	dd03      	ble.n	8043d10 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x18>
 8043d08:	f894 5d38 	ldrb.w	r5, [r4, #3384]	; 0xd38
 8043d0c:	2d00      	cmp	r5, #0
 8043d0e:	d05b      	beq.n	8043dc8 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xd0>
      return 0;

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8043d10:	6803      	ldr	r3, [r0, #0]
 8043d12:	f604 2163 	addw	r1, r4, #2659	; 0xa63
 8043d16:	681b      	ldr	r3, [r3, #0]
 8043d18:	4798      	blx	r3

    /* setup the header */
    message_out[0] = 0xff;
 8043d1a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
    message_out[1] = PROTOCOL_VER;
    message_out[2] = (uint8_t)((uint16_t)l & 255);
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8043d1e:	f884 6a61 	strb.w	r6, [r4, #2657]	; 0xa61
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8043d22:	f346 2607 	sbfx	r6, r6, #8, #8
    message_out[0] = 0xff;
 8043d26:	f8a4 3a5c 	strh.w	r3, [r4, #2652]	; 0xa5c
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8043d2a:	f3c0 2307 	ubfx	r3, r0, #8, #8
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8043d2e:	f884 6a62 	strb.w	r6, [r4, #2658]	; 0xa62
 8043d32:	f604 2161 	addw	r1, r4, #2657	; 0xa61
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8043d36:	4403      	add	r3, r0

    /* calculate checksum */
    int chk = 0;
    for (int i = 5; i < l + 7; i++)
 8043d38:	4e25      	ldr	r6, [pc, #148]	; (8043dd0 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xd8>)
 8043d3a:	1dc2      	adds	r2, r0, #7
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8043d3c:	f8a4 0a5e 	strh.w	r0, [r4, #2654]	; 0xa5e
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8043d40:	43db      	mvns	r3, r3
    for (int i = 5; i < l + 7; i++)
 8043d42:	1b36      	subs	r6, r6, r4
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8043d44:	f884 3a60 	strb.w	r3, [r4, #2656]	; 0xa60
    int chk = 0;
 8043d48:	2300      	movs	r3, #0
    for (int i = 5; i < l + 7; i++)
 8043d4a:	1875      	adds	r5, r6, r1
 8043d4c:	42aa      	cmp	r2, r5
 8043d4e:	dd03      	ble.n	8043d58 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x60>
      chk += message_out[i];
 8043d50:	f811 5b01 	ldrb.w	r5, [r1], #1
 8043d54:	442b      	add	r3, r5
    for (int i = 5; i < l + 7; i++)
 8043d56:	e7f8      	b.n	8043d4a <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x52>
    l += 7;
    message_out[l++] = 255 - (chk % 256);
 8043d58:	4259      	negs	r1, r3
 8043d5a:	f100 0508 	add.w	r5, r0, #8
 8043d5e:	b2db      	uxtb	r3, r3
 8043d60:	4422      	add	r2, r4
 8043d62:	b2c9      	uxtb	r1, r1
 8043d64:	bf58      	it	pl
 8043d66:	424b      	negpl	r3, r1

    if (l <= OUTPUT_SIZE)
 8043d68:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    message_out[l++] = 255 - (chk % 256);
 8043d6c:	ea6f 0303 	mvn.w	r3, r3
 8043d70:	f882 3a5c 	strb.w	r3, [r2, #2652]	; 0xa5c
    if (l <= OUTPUT_SIZE)
 8043d74:	dc1a      	bgt.n	8043dac <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xb4>
    {
      hardware_.write(message_out, l);
 8043d76:	f604 285c 	addw	r8, r4, #2652	; 0xa5c
        uint8_t c;
        uint32_t n{ring_buf_get(&ringbuf.rx, &c, sizeof c)};
        return n > 0 ? c : -1;
    }
    void write(uint8_t* data, int length) {
        if (device_is_ready(uart_dev)) {
 8043d7a:	f8d4 0848 	ldr.w	r0, [r4, #2120]	; 0x848
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
 8043d7e:	f016 fa6a 	bl	805a256 <z_device_ready>
 8043d82:	b308      	cbz	r0, 8043dc8 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xd0>
 8043d84:	462e      	mov	r6, r5
            while (length > 0) {
                uint32_t n{ring_buf_put(&ringbuf.tx, data, length)};
 8043d86:	f104 0924 	add.w	r9, r4, #36	; 0x24
            while (length > 0) {
 8043d8a:	2e00      	cmp	r6, #0
 8043d8c:	dd1c      	ble.n	8043dc8 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xd0>
                uint32_t n{ring_buf_put(&ringbuf.tx, data, length)};
 8043d8e:	4632      	mov	r2, r6
 8043d90:	4641      	mov	r1, r8
 8043d92:	4648      	mov	r0, r9
 8043d94:	f011 ff31 	bl	8055bfa <ring_buf_put>
 8043d98:	4607      	mov	r7, r0
                uart_irq_tx_enable(uart_dev);
 8043d9a:	f8d4 0848 	ldr.w	r0, [r4, #2120]	; 0x848
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_tx_enable != NULL) {
 8043d9e:	6883      	ldr	r3, [r0, #8]
 8043da0:	69db      	ldr	r3, [r3, #28]
 8043da2:	b103      	cbz	r3, 8043da6 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xae>
		api->irq_tx_enable(dev);
 8043da4:	4798      	blx	r3
                data += n;
 8043da6:	44b8      	add	r8, r7
                length -= n;
 8043da8:	1bf6      	subs	r6, r6, r7
            while (length > 0) {
 8043daa:	e7ee      	b.n	8043d8a <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x92>
      msg("")
 8043dac:	4b09      	ldr	r3, [pc, #36]	; (8043dd4 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xdc>)
      return l;
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
      return -1;
 8043dae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  void log(char byte, const char * msg)
  {
    rosserial_msgs::Log l;
    l.level = byte;
    l.msg = (char*)msg;
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8043db2:	aa01      	add	r2, sp, #4
 8043db4:	2107      	movs	r1, #7
 8043db6:	9301      	str	r3, [sp, #4]
    l.level = byte;
 8043db8:	2303      	movs	r3, #3
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8043dba:	4620      	mov	r0, r4
    l.level = byte;
 8043dbc:	f88d 3008 	strb.w	r3, [sp, #8]
    l.msg = (char*)msg;
 8043dc0:	4b05      	ldr	r3, [pc, #20]	; (8043dd8 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xe0>)
 8043dc2:	9303      	str	r3, [sp, #12]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8043dc4:	f7ff ff98 	bl	8043cf8 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>
  }
 8043dc8:	4628      	mov	r0, r5
 8043dca:	b005      	add	sp, #20
 8043dcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8043dd0:	fffff5a4 	.word	0xfffff5a4
 8043dd4:	0805c9a8 	.word	0x0805c9a8
 8043dd8:	0805f3d0 	.word	0x0805f3d0

08043ddc <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8043ddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      data()
 8043dde:	4b08      	ldr	r3, [pc, #32]	; (8043e00 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE15requestSyncTimeEv+0x24>)
 8043de0:	4604      	mov	r4, r0
    publish(TopicInfo::ID_TIME, &t);
 8043de2:	aa01      	add	r2, sp, #4
 8043de4:	210a      	movs	r1, #10
 8043de6:	9301      	str	r3, [sp, #4]
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8043de8:	2300      	movs	r3, #0
 8043dea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8043dee:	f7ff ff83 	bl	8043cf8 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>
            }
        }
    }
    unsigned long time() {
        return k_uptime_get_32();
 8043df2:	f010 fc68 	bl	80546c6 <k_uptime_get_32>
    rt_time = hardware_.time();
 8043df6:	f8c4 084c 	str.w	r0, [r4, #2124]	; 0x84c
  }
 8043dfa:	b004      	add	sp, #16
 8043dfc:	bd10      	pop	{r4, pc}
 8043dfe:	bf00      	nop
 8043e00:	0805c978 	.word	0x0805c978

08043e04 <_ZN8lexxhard9ros_board17callback_lexxhardERKN8std_msgs6StringE>:
    void callback_lexxhard(const std_msgs::String &req) {
 8043e04:	b538      	push	{r3, r4, r5, lr}
 8043e06:	460d      	mov	r5, r1
 8043e08:	4604      	mov	r4, r0
        if (strncmp(req.data, "wheel_", 6) == 0)
 8043e0a:	2206      	movs	r2, #6
 8043e0c:	490e      	ldr	r1, [pc, #56]	; (8043e48 <_ZN8lexxhard9ros_board17callback_lexxhardERKN8std_msgs6StringE+0x44>)
 8043e0e:	6868      	ldr	r0, [r5, #4]
 8043e10:	f017 f960 	bl	805b0d4 <strncmp>
 8043e14:	b940      	cbnz	r0, 8043e28 <_ZN8lexxhard9ros_board17callback_lexxhardERKN8std_msgs6StringE+0x24>
            ros2board.wheel_power_off = strcmp(req.data, "wheel_poweroff") == 0;
 8043e16:	490d      	ldr	r1, [pc, #52]	; (8043e4c <_ZN8lexxhard9ros_board17callback_lexxhardERKN8std_msgs6StringE+0x48>)
 8043e18:	6868      	ldr	r0, [r5, #4]
 8043e1a:	f7fc fd13 	bl	8040844 <strcmp>
 8043e1e:	fab0 f080 	clz	r0, r0
 8043e22:	0940      	lsrs	r0, r0, #5
 8043e24:	f884 01aa 	strb.w	r0, [r4, #426]	; 0x1aa
        while (k_msgq_put(&can_controller::msgq_control, &ros2board, K_NO_WAIT) != 0)
 8043e28:	f504 74d4 	add.w	r4, r4, #424	; 0x1a8
	return z_impl_k_msgq_put(msgq, data, timeout);
 8043e2c:	4d08      	ldr	r5, [pc, #32]	; (8043e50 <_ZN8lexxhard9ros_board17callback_lexxhardERKN8std_msgs6StringE+0x4c>)
 8043e2e:	2200      	movs	r2, #0
 8043e30:	2300      	movs	r3, #0
 8043e32:	4621      	mov	r1, r4
 8043e34:	4806      	ldr	r0, [pc, #24]	; (8043e50 <_ZN8lexxhard9ros_board17callback_lexxhardERKN8std_msgs6StringE+0x4c>)
 8043e36:	f00d fce7 	bl	8051808 <z_impl_k_msgq_put>
 8043e3a:	b118      	cbz	r0, 8043e44 <_ZN8lexxhard9ros_board17callback_lexxhardERKN8std_msgs6StringE+0x40>
	z_impl_k_msgq_purge(msgq);
 8043e3c:	4628      	mov	r0, r5
 8043e3e:	f016 fab5 	bl	805a3ac <z_impl_k_msgq_purge>
}
 8043e42:	e7f4      	b.n	8043e2e <_ZN8lexxhard9ros_board17callback_lexxhardERKN8std_msgs6StringE+0x2a>
    }
 8043e44:	bd38      	pop	{r3, r4, r5, pc}
 8043e46:	bf00      	nop
 8043e48:	0805f409 	.word	0x0805f409
 8043e4c:	0805f410 	.word	0x0805f410
 8043e50:	20022bf8 	.word	0x20022bf8

08043e54 <_ZN8lexxhard13ros_interlock30callback_emergency_stop_at_amrERKN8std_msgs4BoolE>:
            msg_emergency_stop_at_connected_robot.data = message.is_emergency_stop;
            pub_emergency_stop_at_connected_robot.publish(&msg_emergency_stop_at_connected_robot);
        }
    }
private:
    void callback_emergency_stop_at_amr(const std_msgs::Bool &msg) {
 8043e54:	b513      	push	{r0, r1, r4, lr}
        interlock_controller::msg_amr_status message{msg.data};
 8043e56:	790b      	ldrb	r3, [r1, #4]
	return z_impl_k_msgq_put(msgq, data, timeout);
 8043e58:	4c07      	ldr	r4, [pc, #28]	; (8043e78 <_ZN8lexxhard13ros_interlock30callback_emergency_stop_at_amrERKN8std_msgs4BoolE+0x24>)
 8043e5a:	f88d 3004 	strb.w	r3, [sp, #4]
 8043e5e:	2200      	movs	r2, #0
 8043e60:	2300      	movs	r3, #0
 8043e62:	a901      	add	r1, sp, #4
 8043e64:	4804      	ldr	r0, [pc, #16]	; (8043e78 <_ZN8lexxhard13ros_interlock30callback_emergency_stop_at_amrERKN8std_msgs4BoolE+0x24>)
 8043e66:	f00d fccf 	bl	8051808 <z_impl_k_msgq_put>
	while (k_msgq_put(&interlock_controller::msgq_amr_status, &message, K_NO_WAIT) != 0)
 8043e6a:	b118      	cbz	r0, 8043e74 <_ZN8lexxhard13ros_interlock30callback_emergency_stop_at_amrERKN8std_msgs4BoolE+0x20>
	z_impl_k_msgq_purge(msgq);
 8043e6c:	4620      	mov	r0, r4
 8043e6e:	f016 fa9d 	bl	805a3ac <z_impl_k_msgq_purge>
}
 8043e72:	e7f4      	b.n	8043e5e <_ZN8lexxhard13ros_interlock30callback_emergency_stop_at_amrERKN8std_msgs4BoolE+0xa>
            k_msgq_purge(&interlock_controller::msgq_amr_status);
    }
 8043e74:	b002      	add	sp, #8
 8043e76:	bd10      	pop	{r4, pc}
 8043e78:	200230e8 	.word	0x200230e8

08043e7c <_ZN8lexxhard7ros_dfu8callbackERKN8std_msgs15UInt8MultiArrayE>:
    void poll() {
        if (k_msgq_get(&firmware_updater::msgq_response, response.data, K_NO_WAIT) == 0)
            pub.publish(&response);
    }
private:
    void callback(const std_msgs::UInt8MultiArray &packet) {
 8043e7c:	b538      	push	{r3, r4, r5, lr}
 8043e7e:	460c      	mov	r4, r1
	return z_impl_k_msgq_put(msgq, data, timeout);
 8043e80:	4d06      	ldr	r5, [pc, #24]	; (8043e9c <_ZN8lexxhard7ros_dfu8callbackERKN8std_msgs15UInt8MultiArrayE+0x20>)
        while (k_msgq_put(&firmware_updater::msgq_data, packet.data, K_NO_WAIT) != 0)
 8043e82:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8043e84:	2200      	movs	r2, #0
 8043e86:	2300      	movs	r3, #0
 8043e88:	4804      	ldr	r0, [pc, #16]	; (8043e9c <_ZN8lexxhard7ros_dfu8callbackERKN8std_msgs15UInt8MultiArrayE+0x20>)
 8043e8a:	f00d fcbd 	bl	8051808 <z_impl_k_msgq_put>
 8043e8e:	b118      	cbz	r0, 8043e98 <_ZN8lexxhard7ros_dfu8callbackERKN8std_msgs15UInt8MultiArrayE+0x1c>
	z_impl_k_msgq_purge(msgq);
 8043e90:	4628      	mov	r0, r5
 8043e92:	f016 fa8b 	bl	805a3ac <z_impl_k_msgq_purge>
}
 8043e96:	e7f4      	b.n	8043e82 <_ZN8lexxhard7ros_dfu8callbackERKN8std_msgs15UInt8MultiArrayE+0x6>
            k_msgq_purge(&firmware_updater::msgq_data);
    }
 8043e98:	bd38      	pop	{r3, r4, r5, pc}
 8043e9a:	bf00      	nop
 8043e9c:	2002307c 	.word	0x2002307c

08043ea0 <_ZN8lexxhard9ros_board18callback_emergencyERKN8std_msgs4BoolE>:
    void callback_emergency(const std_msgs::Bool &req) {
 8043ea0:	b538      	push	{r3, r4, r5, lr}
        ros2board.emergency_stop = req.data;
 8043ea2:	790b      	ldrb	r3, [r1, #4]
        while (k_msgq_put(&can_controller::msgq_control, &ros2board, K_NO_WAIT) != 0)
 8043ea4:	f500 74d4 	add.w	r4, r0, #424	; 0x1a8
	return z_impl_k_msgq_put(msgq, data, timeout);
 8043ea8:	4d07      	ldr	r5, [pc, #28]	; (8043ec8 <_ZN8lexxhard9ros_board18callback_emergencyERKN8std_msgs4BoolE+0x28>)
        ros2board.emergency_stop = req.data;
 8043eaa:	f880 31a8 	strb.w	r3, [r0, #424]	; 0x1a8
 8043eae:	2200      	movs	r2, #0
 8043eb0:	2300      	movs	r3, #0
 8043eb2:	4621      	mov	r1, r4
 8043eb4:	4804      	ldr	r0, [pc, #16]	; (8043ec8 <_ZN8lexxhard9ros_board18callback_emergencyERKN8std_msgs4BoolE+0x28>)
 8043eb6:	f00d fca7 	bl	8051808 <z_impl_k_msgq_put>
        while (k_msgq_put(&can_controller::msgq_control, &ros2board, K_NO_WAIT) != 0)
 8043eba:	b118      	cbz	r0, 8043ec4 <_ZN8lexxhard9ros_board18callback_emergencyERKN8std_msgs4BoolE+0x24>
	z_impl_k_msgq_purge(msgq);
 8043ebc:	4628      	mov	r0, r5
 8043ebe:	f016 fa75 	bl	805a3ac <z_impl_k_msgq_purge>
}
 8043ec2:	e7f4      	b.n	8043eae <_ZN8lexxhard9ros_board18callback_emergencyERKN8std_msgs4BoolE+0xe>
    }
 8043ec4:	bd38      	pop	{r3, r4, r5, pc}
 8043ec6:	bf00      	nop
 8043ec8:	20022bf8 	.word	0x20022bf8

08043ecc <_ZN8lexxhard9ros_board17callback_poweroffERKN8std_msgs4BoolE>:
    void callback_poweroff(const std_msgs::Bool &req) {
 8043ecc:	b538      	push	{r3, r4, r5, lr}
        ros2board.power_off = req.data;
 8043ece:	790b      	ldrb	r3, [r1, #4]
        while (k_msgq_put(&can_controller::msgq_control, &ros2board, K_NO_WAIT) != 0)
 8043ed0:	f500 74d4 	add.w	r4, r0, #424	; 0x1a8
	return z_impl_k_msgq_put(msgq, data, timeout);
 8043ed4:	4d07      	ldr	r5, [pc, #28]	; (8043ef4 <_ZN8lexxhard9ros_board17callback_poweroffERKN8std_msgs4BoolE+0x28>)
        ros2board.power_off = req.data;
 8043ed6:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
 8043eda:	2200      	movs	r2, #0
 8043edc:	2300      	movs	r3, #0
 8043ede:	4621      	mov	r1, r4
 8043ee0:	4804      	ldr	r0, [pc, #16]	; (8043ef4 <_ZN8lexxhard9ros_board17callback_poweroffERKN8std_msgs4BoolE+0x28>)
 8043ee2:	f00d fc91 	bl	8051808 <z_impl_k_msgq_put>
        while (k_msgq_put(&can_controller::msgq_control, &ros2board, K_NO_WAIT) != 0)
 8043ee6:	b118      	cbz	r0, 8043ef0 <_ZN8lexxhard9ros_board17callback_poweroffERKN8std_msgs4BoolE+0x24>
	z_impl_k_msgq_purge(msgq);
 8043ee8:	4628      	mov	r0, r5
 8043eea:	f016 fa5f 	bl	805a3ac <z_impl_k_msgq_purge>
}
 8043eee:	e7f4      	b.n	8043eda <_ZN8lexxhard9ros_board17callback_poweroffERKN8std_msgs4BoolE+0xe>
    }
 8043ef0:	bd38      	pop	{r3, r4, r5, pc}
 8043ef2:	bf00      	nop
 8043ef4:	20022bf8 	.word	0x20022bf8

08043ef8 <_ZN11sensor_msgs11TemperatureC1Ev>:
      variance(0)
 8043ef8:	4a08      	ldr	r2, [pc, #32]	; (8043f1c <_ZN11sensor_msgs11TemperatureC1Ev+0x24>)
 8043efa:	6002      	str	r2, [r0, #0]
      frame_id("")
 8043efc:	4a08      	ldr	r2, [pc, #32]	; (8043f20 <_ZN11sensor_msgs11TemperatureC1Ev+0x28>)
 8043efe:	6042      	str	r2, [r0, #4]
 8043f00:	2200      	movs	r2, #0
    Temperature():
 8043f02:	b530      	push	{r4, r5, lr}
 8043f04:	e9c0 2202 	strd	r2, r2, [r0, #8]
      variance(0)
 8043f08:	2400      	movs	r4, #0
 8043f0a:	2500      	movs	r5, #0
 8043f0c:	6102      	str	r2, [r0, #16]
 8043f0e:	4a05      	ldr	r2, [pc, #20]	; (8043f24 <_ZN11sensor_msgs11TemperatureC1Ev+0x2c>)
 8043f10:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8043f14:	6142      	str	r2, [r0, #20]
 8043f16:	e9c0 4508 	strd	r4, r5, [r0, #32]
    }
 8043f1a:	bd30      	pop	{r4, r5, pc}
 8043f1c:	0805ca08 	.word	0x0805ca08
 8043f20:	0805c9d8 	.word	0x0805c9d8
 8043f24:	08060045 	.word	0x08060045

08043f28 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      data_offset(0)
 8043f28:	4a06      	ldr	r2, [pc, #24]	; (8043f44 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x1c>)
      stride(0)
 8043f2a:	4907      	ldr	r1, [pc, #28]	; (8043f48 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x20>)
 8043f2c:	6002      	str	r2, [r0, #0]
 8043f2e:	2200      	movs	r2, #0
 8043f30:	6081      	str	r1, [r0, #8]
 8043f32:	4906      	ldr	r1, [pc, #24]	; (8043f4c <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x24>)
 8043f34:	6042      	str	r2, [r0, #4]
 8043f36:	61c2      	str	r2, [r0, #28]
 8043f38:	e9c0 1203 	strd	r1, r2, [r0, #12]
 8043f3c:	e9c0 2205 	strd	r2, r2, [r0, #20]
    }
 8043f40:	4770      	bx	lr
 8043f42:	bf00      	nop
 8043f44:	0805ca80 	.word	0x0805ca80
 8043f48:	0805ca68 	.word	0x0805ca68
 8043f4c:	08060045 	.word	0x08060045

08043f50 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8043f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8043f54:	4604      	mov	r4, r0
 8043f56:	b086      	sub	sp, #24
 8043f58:	f010 fbb5 	bl	80546c6 <k_uptime_get_32>
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8043f5c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8043f60:	f8d4 3d40 	ldr.w	r3, [r4, #3392]	; 0xd40
 8043f64:	4606      	mov	r6, r0
 8043f66:	1ac3      	subs	r3, r0, r3
 8043f68:	4293      	cmp	r3, r2
      configured_ = false;
 8043f6a:	bf84      	itt	hi
 8043f6c:	2300      	movhi	r3, #0
 8043f6e:	f884 3d38 	strbhi.w	r3, [r4, #3384]	; 0xd38
    if (mode_ != MODE_FIRST_FF)
 8043f72:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
 8043f76:	b133      	cbz	r3, 8043f86 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      if (c_time > last_msg_timeout_time)
 8043f78:	f8d4 3d44 	ldr.w	r3, [r4, #3396]	; 0xd44
 8043f7c:	4283      	cmp	r3, r0
        mode_ = MODE_FIRST_FF;
 8043f7e:	bf3c      	itt	cc
 8043f80:	2300      	movcc	r3, #0
 8043f82:	f8c4 3d24 	strcc.w	r3, [r4, #3364]	; 0xd24
        mode_ = MODE_FIRST_FF;
 8043f86:	4fb3      	ldr	r7, [pc, #716]	; (8044254 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x304>)
 8043f88:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 8044264 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x314>
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8043f8c:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 8044268 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x318>
      if (spin_timeout_ > 0)
 8043f90:	f8d4 3858 	ldr.w	r3, [r4, #2136]	; 0x858
 8043f94:	b973      	cbnz	r3, 8043fb4 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x64>
        uint32_t n{ring_buf_get(&ringbuf.rx, &c, sizeof c)};
 8043f96:	2201      	movs	r2, #1
 8043f98:	4669      	mov	r1, sp
 8043f9a:	1d20      	adds	r0, r4, #4
 8043f9c:	f011 fe93 	bl	8055cc6 <ring_buf_get>
        return n > 0 ? c : -1;
 8043fa0:	4605      	mov	r5, r0
 8043fa2:	b988      	cbnz	r0, 8043fc8 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x78>
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8043fa4:	f894 0d38 	ldrb.w	r0, [r4, #3384]	; 0xd38
 8043fa8:	2800      	cmp	r0, #0
 8043faa:	f040 8144 	bne.w	8044236 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x2e6>
  }
 8043fae:	b006      	add	sp, #24
 8043fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return k_uptime_get_32();
 8043fb4:	f010 fb87 	bl	80546c6 <k_uptime_get_32>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8043fb8:	f8d4 3858 	ldr.w	r3, [r4, #2136]	; 0x858
 8043fbc:	1b80      	subs	r0, r0, r6
 8043fbe:	4298      	cmp	r0, r3
 8043fc0:	d9e9      	bls.n	8043f96 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x46>
          return SPIN_TIMEOUT;
 8043fc2:	f06f 0001 	mvn.w	r0, #1
 8043fc6:	e7f2      	b.n	8043fae <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
      checksum_ += data;
 8043fc8:	f8d4 2d34 	ldr.w	r2, [r4, #3380]	; 0xd34
        return n > 0 ? c : -1;
 8043fcc:	f89d 3000 	ldrb.w	r3, [sp]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8043fd0:	f8d4 5d24 	ldr.w	r5, [r4, #3364]	; 0xd24
      checksum_ += data;
 8043fd4:	441a      	add	r2, r3
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8043fd6:	2d07      	cmp	r5, #7
      checksum_ += data;
 8043fd8:	f8c4 2d34 	str.w	r2, [r4, #3380]	; 0xd34
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8043fdc:	d112      	bne.n	8044004 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0xb4>
        message_in[index_++] = data;
 8043fde:	f8d4 2d30 	ldr.w	r2, [r4, #3376]	; 0xd30
 8043fe2:	1c51      	adds	r1, r2, #1
 8043fe4:	4422      	add	r2, r4
 8043fe6:	f8c4 1d30 	str.w	r1, [r4, #3376]	; 0xd30
 8043fea:	f882 385c 	strb.w	r3, [r2, #2140]	; 0x85c
        bytes_--;
 8043fee:	f8d4 3d28 	ldr.w	r3, [r4, #3368]	; 0xd28
 8043ff2:	3b01      	subs	r3, #1
 8043ff4:	f8c4 3d28 	str.w	r3, [r4, #3368]	; 0xd28
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8043ff8:	2b00      	cmp	r3, #0
 8043ffa:	d1c9      	bne.n	8043f90 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
          mode_ = MODE_MSG_CHECKSUM;
 8043ffc:	2308      	movs	r3, #8
          mode_++;
 8043ffe:	f8c4 3d24 	str.w	r3, [r4, #3364]	; 0xd24
 8044002:	e7c5      	b.n	8043f90 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
      else if (mode_ == MODE_FIRST_FF)
 8044004:	b99d      	cbnz	r5, 804402e <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0xde>
        if (data == 0xff)
 8044006:	2bff      	cmp	r3, #255	; 0xff
 8044008:	d107      	bne.n	804401a <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0xca>
          mode_++;
 804400a:	2301      	movs	r3, #1
 804400c:	f8c4 3d24 	str.w	r3, [r4, #3364]	; 0xd24
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8044010:	f106 0314 	add.w	r3, r6, #20
 8044014:	f8c4 3d44 	str.w	r3, [r4, #3396]	; 0xd44
 8044018:	e7ba      	b.n	8043f90 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        return k_uptime_get_32();
 804401a:	f010 fb54 	bl	80546c6 <k_uptime_get_32>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 804401e:	f241 3388 	movw	r3, #5000	; 0x1388
 8044022:	1b80      	subs	r0, r0, r6
 8044024:	4298      	cmp	r0, r3
 8044026:	d9b3      	bls.n	8043f90 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
          configured_ = false;
 8044028:	f884 5d38 	strb.w	r5, [r4, #3384]	; 0xd38
 804402c:	e7c9      	b.n	8043fc2 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x72>
      else if (mode_ == MODE_PROTOCOL_VER)
 804402e:	2d01      	cmp	r5, #1
 8044030:	d10e      	bne.n	8044050 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x100>
        if (data == PROTOCOL_VER)
 8044032:	2bfe      	cmp	r3, #254	; 0xfe
 8044034:	d101      	bne.n	804403a <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0xea>
          mode_++;
 8044036:	2302      	movs	r3, #2
 8044038:	e7e1      	b.n	8043ffe <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0xae>
          mode_ = MODE_FIRST_FF;
 804403a:	2300      	movs	r3, #0
 804403c:	f8c4 3d24 	str.w	r3, [r4, #3364]	; 0xd24
          if (configured_ == false)
 8044040:	f894 3d38 	ldrb.w	r3, [r4, #3384]	; 0xd38
 8044044:	2b00      	cmp	r3, #0
 8044046:	d1a3      	bne.n	8043f90 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8044048:	4620      	mov	r0, r4
 804404a:	f7ff fec7 	bl	8043ddc <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 804404e:	e79f      	b.n	8043f90 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8044050:	2d02      	cmp	r5, #2
 8044052:	d10a      	bne.n	804406a <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x11a>
        index_ = 0;
 8044054:	2200      	movs	r2, #0
        bytes_ = data;
 8044056:	f8c4 3d28 	str.w	r3, [r4, #3368]	; 0xd28
        index_ = 0;
 804405a:	f8c4 2d30 	str.w	r2, [r4, #3376]	; 0xd30
        mode_++;
 804405e:	2203      	movs	r2, #3
        mode_++;
 8044060:	f8c4 2d24 	str.w	r2, [r4, #3364]	; 0xd24
        checksum_ = data;               /* first byte included in checksum */
 8044064:	f8c4 3d34 	str.w	r3, [r4, #3380]	; 0xd34
 8044068:	e792      	b.n	8043f90 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 804406a:	2d03      	cmp	r5, #3
 804406c:	d107      	bne.n	804407e <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x12e>
        bytes_ += data << 8;
 804406e:	f8d4 2d28 	ldr.w	r2, [r4, #3368]	; 0xd28
 8044072:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 8044076:	f8c4 3d28 	str.w	r3, [r4, #3368]	; 0xd28
        mode_++;
 804407a:	2304      	movs	r3, #4
 804407c:	e7bf      	b.n	8043ffe <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0xae>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 804407e:	2d04      	cmp	r5, #4
 8044080:	d105      	bne.n	804408e <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x13e>
 8044082:	403a      	ands	r2, r7
        if ((checksum_ % 256) == 255)
 8044084:	2aff      	cmp	r2, #255	; 0xff
          mode_++;
 8044086:	bf0c      	ite	eq
 8044088:	2305      	moveq	r3, #5
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 804408a:	2300      	movne	r3, #0
 804408c:	e7b7      	b.n	8043ffe <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0xae>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 804408e:	2d05      	cmp	r5, #5
 8044090:	d103      	bne.n	804409a <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x14a>
        mode_++;
 8044092:	2206      	movs	r2, #6
        topic_ = data;
 8044094:	f8c4 3d2c 	str.w	r3, [r4, #3372]	; 0xd2c
 8044098:	e7e2      	b.n	8044060 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x110>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 804409a:	2d06      	cmp	r5, #6
 804409c:	d10b      	bne.n	80440b6 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x166>
        topic_ += data << 8;
 804409e:	f8d4 2d2c 	ldr.w	r2, [r4, #3372]	; 0xd2c
 80440a2:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 80440a6:	f8c4 3d2c 	str.w	r3, [r4, #3372]	; 0xd2c
        mode_ = MODE_MESSAGE;
 80440aa:	2307      	movs	r3, #7
 80440ac:	f8c4 3d24 	str.w	r3, [r4, #3364]	; 0xd24
        if (bytes_ == 0)
 80440b0:	f8d4 3d28 	ldr.w	r3, [r4, #3368]	; 0xd28
 80440b4:	e7a0      	b.n	8043ff8 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0xa8>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80440b6:	2d08      	cmp	r5, #8
 80440b8:	f47f af6a 	bne.w	8043f90 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        mode_ = MODE_FIRST_FF;
 80440bc:	403a      	ands	r2, r7
 80440be:	2300      	movs	r3, #0
        if ((checksum_ % 256) == 255)
 80440c0:	2aff      	cmp	r2, #255	; 0xff
        mode_ = MODE_FIRST_FF;
 80440c2:	f8c4 3d24 	str.w	r3, [r4, #3364]	; 0xd24
        if ((checksum_ % 256) == 255)
 80440c6:	f47f af63 	bne.w	8043f90 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80440ca:	f8d4 5d2c 	ldr.w	r5, [r4, #3372]	; 0xd2c
 80440ce:	2d00      	cmp	r5, #0
 80440d0:	d15a      	bne.n	8044188 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x238>
            requestSyncTime();
 80440d2:	4620      	mov	r0, r4
 80440d4:	f504 674c 	add.w	r7, r4, #3264	; 0xcc0
 80440d8:	f7ff fe80 	bl	8043ddc <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      buffer_size(0)
 80440dc:	4b5e      	ldr	r3, [pc, #376]	; (8044258 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x308>)
        ti.buffer_size = OUTPUT_SIZE;
 80440de:	f44f 7800 	mov.w	r8, #512	; 0x200
 80440e2:	9300      	str	r3, [sp, #0]
 80440e4:	4b5d      	ldr	r3, [pc, #372]	; (804425c <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x30c>)
 80440e6:	e9cd 3504 	strd	r3, r5, [sp, #16]
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80440ea:	f604 455c 	addw	r5, r4, #3164	; 0xc5c
 80440ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
      if (publishers[i] != 0) // non-empty slot
 80440f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80440f6:	b1c3      	cbz	r3, 804412a <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x1da>
        ti.topic_id = publishers[i]->id_;
 80440f8:	689a      	ldr	r2, [r3, #8]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80440fa:	6858      	ldr	r0, [r3, #4]
        ti.topic_id = publishers[i]->id_;
 80440fc:	f8ad 2004 	strh.w	r2, [sp, #4]
        ti.topic_name = (char *) publishers[i]->topic_;
 8044100:	681a      	ldr	r2, [r3, #0]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8044102:	6803      	ldr	r3, [r0, #0]
        ti.topic_name = (char *) publishers[i]->topic_;
 8044104:	9202      	str	r2, [sp, #8]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8044106:	689b      	ldr	r3, [r3, #8]
 8044108:	4798      	blx	r3
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 804410a:	f855 3c04 	ldr.w	r3, [r5, #-4]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 804410e:	9003      	str	r0, [sp, #12]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8044110:	6858      	ldr	r0, [r3, #4]
 8044112:	6803      	ldr	r3, [r0, #0]
 8044114:	68db      	ldr	r3, [r3, #12]
 8044116:	4798      	blx	r3
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
  {
    return endpoint_;
 8044118:	f855 3c04 	ldr.w	r3, [r5, #-4]
        publish(publishers[i]->getEndpointType(), &ti);
 804411c:	466a      	mov	r2, sp
 804411e:	6919      	ldr	r1, [r3, #16]
        ti.buffer_size = OUTPUT_SIZE;
 8044120:	e9cd 0804 	strd	r0, r8, [sp, #16]
        publish(publishers[i]->getEndpointType(), &ti);
 8044124:	4620      	mov	r0, r4
 8044126:	f7ff fde7 	bl	8043cf8 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 804412a:	42bd      	cmp	r5, r7
 804412c:	d1e1      	bne.n	80440f2 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x1a2>
 804412e:	f604 5724 	addw	r7, r4, #3364	; 0xd24
        ti.buffer_size = INPUT_SIZE;
 8044132:	f44f 7800 	mov.w	r8, #512	; 0x200
      if (subscribers[i] != 0) // non-empty slot
 8044136:	f855 0b04 	ldr.w	r0, [r5], #4
 804413a:	b1c8      	cbz	r0, 8044170 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        ti.topic_id = subscribers[i]->id_;
 804413c:	6843      	ldr	r3, [r0, #4]
 804413e:	f8ad 3004 	strh.w	r3, [sp, #4]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8044142:	6883      	ldr	r3, [r0, #8]
 8044144:	9302      	str	r3, [sp, #8]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8044146:	6803      	ldr	r3, [r0, #0]
 8044148:	689b      	ldr	r3, [r3, #8]
 804414a:	4798      	blx	r3
 804414c:	9003      	str	r0, [sp, #12]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 804414e:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8044152:	6803      	ldr	r3, [r0, #0]
 8044154:	68db      	ldr	r3, [r3, #12]
 8044156:	4798      	blx	r3
        ti.buffer_size = INPUT_SIZE;
 8044158:	e9cd 0804 	strd	r0, r8, [sp, #16]
        publish(subscribers[i]->getEndpointType(), &ti);
 804415c:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8044160:	6803      	ldr	r3, [r0, #0]
 8044162:	685b      	ldr	r3, [r3, #4]
 8044164:	4798      	blx	r3
 8044166:	466a      	mov	r2, sp
 8044168:	4601      	mov	r1, r0
 804416a:	4620      	mov	r0, r4
 804416c:	f7ff fdc4 	bl	8043cf8 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8044170:	42bd      	cmp	r5, r7
 8044172:	d1e0      	bne.n	8044136 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x1e6>
    configured_ = true;
 8044174:	2301      	movs	r3, #1
            return SPIN_ERR;
 8044176:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
            last_sync_time = c_time;
 804417a:	f8c4 6d3c 	str.w	r6, [r4, #3388]	; 0xd3c
    configured_ = true;
 804417e:	f884 3d38 	strb.w	r3, [r4, #3384]	; 0xd38
            last_sync_receive_time = c_time;
 8044182:	f8c4 6d40 	str.w	r6, [r4, #3392]	; 0xd40
            return SPIN_ERR;
 8044186:	e712      	b.n	8043fae <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_TIME)
 8044188:	2d0a      	cmp	r5, #10
 804418a:	d136      	bne.n	80441fa <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x2aa>
 804418c:	9302      	str	r3, [sp, #8]
    t.data.sec += offset / 1000;
 804418e:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 8044192:	e9cd 8300 	strd	r8, r3, [sp]
 8044196:	f010 fa96 	bl	80546c6 <k_uptime_get_32>
    uint32_t offset = hardware_.time() - rt_time;
 804419a:	f8d4 584c 	ldr.w	r5, [r4, #2124]	; 0x84c
    t.deserialize(data);
 804419e:	f604 015c 	addw	r1, r4, #2140	; 0x85c
    uint32_t offset = hardware_.time() - rt_time;
 80441a2:	1b45      	subs	r5, r0, r5
    t.deserialize(data);
 80441a4:	4668      	mov	r0, sp
 80441a6:	f010 f8eb 	bl	8054380 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80441aa:	9b01      	ldr	r3, [sp, #4]
 80441ac:	fbb5 f0fa 	udiv	r0, r5, sl
 80441b0:	4403      	add	r3, r0
    t.data.nsec += (offset % 1000) * 1000000UL;
 80441b2:	fb0a 5010 	mls	r0, sl, r0, r5
 80441b6:	4d2a      	ldr	r5, [pc, #168]	; (8044260 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x310>)
    t.data.sec += offset / 1000;
 80441b8:	9301      	str	r3, [sp, #4]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80441ba:	9b02      	ldr	r3, [sp, #8]
 80441bc:	fb05 3000 	mla	r0, r5, r0, r3
 80441c0:	9002      	str	r0, [sp, #8]
 80441c2:	f010 fa80 	bl	80546c6 <k_uptime_get_32>
    sec_offset = new_now.sec - ms / 1000 - 1;
 80441c6:	9b01      	ldr	r3, [sp, #4]
    normalizeSecNSec(sec_offset, nsec_offset);
 80441c8:	f604 0154 	addw	r1, r4, #2132	; 0x854
    sec_offset = new_now.sec - ms / 1000 - 1;
 80441cc:	fbb0 f2fa 	udiv	r2, r0, sl
 80441d0:	3b01      	subs	r3, #1
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80441d2:	fb0a 0012 	mls	r0, sl, r2, r0
    sec_offset = new_now.sec - ms / 1000 - 1;
 80441d6:	1a9b      	subs	r3, r3, r2
 80441d8:	f8c4 3850 	str.w	r3, [r4, #2128]	; 0x850
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80441dc:	9b02      	ldr	r3, [sp, #8]
 80441de:	444b      	add	r3, r9
 80441e0:	fb05 3010 	mls	r0, r5, r0, r3
 80441e4:	f8c4 0854 	str.w	r0, [r4, #2132]	; 0x854
    normalizeSecNSec(sec_offset, nsec_offset);
 80441e8:	f504 6005 	add.w	r0, r4, #2128	; 0x850
 80441ec:	f000 fb94 	bl	8044918 <_ZN3ros16normalizeSecNSecERjS0_>
 80441f0:	f010 fa69 	bl	80546c6 <k_uptime_get_32>
    last_sync_receive_time = hardware_.time();
 80441f4:	f8c4 0d40 	str.w	r0, [r4, #3392]	; 0xd40
  }
 80441f8:	e6ca      	b.n	8043f90 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80441fa:	2d06      	cmp	r5, #6
 80441fc:	d109      	bne.n	8044212 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x2c2>
            req_param_resp.deserialize(message_in);
 80441fe:	f604 015c 	addw	r1, r4, #2140	; 0x85c
 8044202:	f604 504c 	addw	r0, r4, #3404	; 0xd4c
 8044206:	f010 ff1a 	bl	805503e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 804420a:	2301      	movs	r3, #1
 804420c:	f884 3d48 	strb.w	r3, [r4, #3400]	; 0xd48
 8044210:	e6be      	b.n	8043f90 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8044212:	2d0b      	cmp	r5, #11
 8044214:	d102      	bne.n	804421c <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x2cc>
            configured_ = false;
 8044216:	f884 3d38 	strb.w	r3, [r4, #3384]	; 0xd38
 804421a:	e6b9      	b.n	8043f90 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
            if (subscribers[topic_ - 100])
 804421c:	f505 7533 	add.w	r5, r5, #716	; 0x2cc
 8044220:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8044224:	2800      	cmp	r0, #0
 8044226:	f43f aeb3 	beq.w	8043f90 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
              subscribers[topic_ - 100]->callback(message_in);
 804422a:	6803      	ldr	r3, [r0, #0]
 804422c:	f604 015c 	addw	r1, r4, #2140	; 0x85c
 8044230:	681b      	ldr	r3, [r3, #0]
 8044232:	4798      	blx	r3
 8044234:	e6ac      	b.n	8043f90 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8044236:	f8d4 3d3c 	ldr.w	r3, [r4, #3388]	; 0xd3c
 804423a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 804423e:	1af3      	subs	r3, r6, r3
 8044240:	4293      	cmp	r3, r2
 8044242:	d904      	bls.n	804424e <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x2fe>
      requestSyncTime();
 8044244:	4620      	mov	r0, r4
 8044246:	f7ff fdc9 	bl	8043ddc <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 804424a:	f8c4 6d3c 	str.w	r6, [r4, #3388]	; 0xd3c
    return SPIN_OK;
 804424e:	4628      	mov	r0, r5
 8044250:	e6ad      	b.n	8043fae <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
 8044252:	bf00      	nop
 8044254:	800000ff 	.word	0x800000ff
 8044258:	0805c990 	.word	0x0805c990
 804425c:	08060045 	.word	0x08060045
 8044260:	000f4240 	.word	0x000f4240
 8044264:	0805c978 	.word	0x0805c978
 8044268:	3b9aca00 	.word	0x3b9aca00

0804426c <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv>:
    impl.run();
}

k_thread thread;

}
 804426c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
class NodeHandle_ : public NodeHandleBase_
 8044270:	4ddf      	ldr	r5, [pc, #892]	; (80445f0 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x384>)
 8044272:	f640 0248 	movw	r2, #2120	; 0x848
 8044276:	4bdf      	ldr	r3, [pc, #892]	; (80445f4 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x388>)
 8044278:	2100      	movs	r1, #0
 804427a:	4628      	mov	r0, r5
 804427c:	2600      	movs	r6, #0
      strings_length(0), st_strings(), strings(nullptr)
 804427e:	2700      	movs	r7, #0
 8044280:	f8df 8408 	ldr.w	r8, [pc, #1032]	; 804468c <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x420>
 8044284:	f840 3b04 	str.w	r3, [r0], #4
      data(0)
 8044288:	f505 5480 	add.w	r4, r5, #4096	; 0x1000
 804428c:	f016 fdde 	bl	805ae4c <memset>
class rosserial_hardware_zephyr {
 8044290:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8044294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8044298:	4631      	mov	r1, r6
 804429a:	f8c5 3844 	str.w	r3, [r5, #2116]	; 0x844
 804429e:	f605 005c 	addw	r0, r5, #2140	; 0x85c
 80442a2:	f8c5 684c 	str.w	r6, [r5, #2124]	; 0x84c
 80442a6:	f8c5 6850 	str.w	r6, [r5, #2128]	; 0x850
 80442aa:	f8c5 6854 	str.w	r6, [r5, #2132]	; 0x854
 80442ae:	f8c5 6858 	str.w	r6, [r5, #2136]	; 0x858
 80442b2:	f016 fdcb 	bl	805ae4c <memset>
 80442b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80442ba:	4631      	mov	r1, r6
 80442bc:	f605 205c 	addw	r0, r5, #2652	; 0xa5c
 80442c0:	f016 fdc4 	bl	805ae4c <memset>
 80442c4:	2264      	movs	r2, #100	; 0x64
 80442c6:	4631      	mov	r1, r6
 80442c8:	f605 405c 	addw	r0, r5, #3164	; 0xc5c
 80442cc:	f016 fdbe 	bl	805ae4c <memset>
 80442d0:	2264      	movs	r2, #100	; 0x64
 80442d2:	4631      	mov	r1, r6
 80442d4:	f505 604c 	add.w	r0, r5, #3264	; 0xcc0
 80442d8:	f016 fdb8 	bl	805ae4c <memset>
 80442dc:	4bc6      	ldr	r3, [pc, #792]	; (80445f8 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x38c>)
 80442de:	f8c5 8d90 	str.w	r8, [r5, #3472]	; 0xd90
      state_of_health(0)
 80442e2:	f605 50d8 	addw	r0, r5, #3544	; 0xdd8
 80442e6:	f8c5 3d4c 	str.w	r3, [r5, #3404]	; 0xd4c
 80442ea:	f505 6356 	add.w	r3, r5, #3424	; 0xd60
 80442ee:	f8c5 6d24 	str.w	r6, [r5, #3364]	; 0xd24
 80442f2:	601f      	str	r7, [r3, #0]
 80442f4:	4bc1      	ldr	r3, [pc, #772]	; (80445fc <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x390>)
 80442f6:	f8c5 6d28 	str.w	r6, [r5, #3368]	; 0xd28
 80442fa:	f8c5 3d78 	str.w	r3, [r5, #3448]	; 0xd78
      serial_number("")
 80442fe:	4bc0      	ldr	r3, [pc, #768]	; (8044600 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x394>)
 8044300:	f8c5 6d2c 	str.w	r6, [r5, #3372]	; 0xd2c
 8044304:	f8c5 3d7c 	str.w	r3, [r5, #3452]	; 0xd7c
 8044308:	4bbe      	ldr	r3, [pc, #760]	; (8044604 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x398>)
 804430a:	f8c5 6d30 	str.w	r6, [r5, #3376]	; 0xd30
 804430e:	f8c5 3d80 	str.w	r3, [r5, #3456]	; 0xd80
 8044312:	f605 5394 	addw	r3, r5, #3476	; 0xd94
 8044316:	f8c5 6d34 	str.w	r6, [r5, #3380]	; 0xd34
 804431a:	601f      	str	r7, [r3, #0]
 804431c:	f605 5398 	addw	r3, r5, #3480	; 0xd98
 8044320:	f885 6d38 	strb.w	r6, [r5, #3384]	; 0xd38
 8044324:	601f      	str	r7, [r3, #0]
 8044326:	f605 539c 	addw	r3, r5, #3484	; 0xd9c
 804432a:	f8c5 6d3c 	str.w	r6, [r5, #3388]	; 0xd3c
 804432e:	601f      	str	r7, [r3, #0]
 8044330:	f505 635a 	add.w	r3, r5, #3488	; 0xda0
 8044334:	f8c5 6d40 	str.w	r6, [r5, #3392]	; 0xd40
 8044338:	601f      	str	r7, [r3, #0]
 804433a:	f605 53a4 	addw	r3, r5, #3492	; 0xda4
 804433e:	f8c5 6d44 	str.w	r6, [r5, #3396]	; 0xd44
 8044342:	601f      	str	r7, [r3, #0]
 8044344:	f605 53a8 	addw	r3, r5, #3496	; 0xda8
 8044348:	f885 6d48 	strb.w	r6, [r5, #3400]	; 0xd48
 804434c:	f8c5 6d50 	str.w	r6, [r5, #3408]	; 0xd50
 8044350:	f8c5 6d54 	str.w	r6, [r5, #3412]	; 0xd54
 8044354:	f8c5 6d58 	str.w	r6, [r5, #3416]	; 0xd58
 8044358:	f8c5 6d5c 	str.w	r6, [r5, #3420]	; 0xd5c
 804435c:	f8c5 6d64 	str.w	r6, [r5, #3428]	; 0xd64
 8044360:	f8c5 6d68 	str.w	r6, [r5, #3432]	; 0xd68
 8044364:	f8c5 6d6c 	str.w	r6, [r5, #3436]	; 0xd6c
 8044368:	f8c5 6d70 	str.w	r6, [r5, #3440]	; 0xd70
 804436c:	f8c5 6d84 	str.w	r6, [r5, #3460]	; 0xd84
 8044370:	f8c5 6d88 	str.w	r6, [r5, #3464]	; 0xd88
 8044374:	f8c5 6d8c 	str.w	r6, [r5, #3468]	; 0xd8c
 8044378:	601f      	str	r7, [r3, #0]
 804437a:	f605 53ac 	addw	r3, r5, #3500	; 0xdac
 804437e:	f8c5 8dcc 	str.w	r8, [r5, #3532]	; 0xdcc
 8044382:	601f      	str	r7, [r3, #0]
 8044384:	f605 53b8 	addw	r3, r5, #3512	; 0xdb8
 8044388:	f8c5 8dd0 	str.w	r8, [r5, #3536]	; 0xdd0
 804438c:	601f      	str	r7, [r3, #0]
 804438e:	f605 53c4 	addw	r3, r5, #3524	; 0xdc4
 8044392:	f8c5 6db0 	str.w	r6, [r5, #3504]	; 0xdb0
 8044396:	601f      	str	r7, [r3, #0]
 8044398:	f8c5 6db4 	str.w	r6, [r5, #3508]	; 0xdb4
 804439c:	f8c5 6dbc 	str.w	r6, [r5, #3516]	; 0xdbc
 80443a0:	f8c5 6dc0 	str.w	r6, [r5, #3520]	; 0xdc0
 80443a4:	f8c5 6dc8 	str.w	r6, [r5, #3528]	; 0xdc8
 80443a8:	f8c5 6dd4 	str.w	r6, [r5, #3540]	; 0xdd4
 80443ac:	f7ff fda4 	bl	8043ef8 <_ZN11sensor_msgs11TemperatureC1Ev>
#include "lexxauto_msgs/Battery.h"
#include "can_controller.hpp"

namespace lexxhard {

class ros_bmu {
 80443b0:	f605 6008 	addw	r0, r5, #3592	; 0xe08
 80443b4:	f8c5 6e00 	str.w	r6, [r5, #3584]	; 0xe00
 80443b8:	f885 6e04 	strb.w	r6, [r5, #3588]	; 0xe04
 80443bc:	f7ff fd9c 	bl	8043ef8 <_ZN11sensor_msgs11TemperatureC1Ev>
 80443c0:	f505 6063 	add.w	r0, r5, #3632	; 0xe30
 80443c4:	f7ff fd98 	bl	8043ef8 <_ZN11sensor_msgs11TemperatureC1Ev>
 80443c8:	f605 6058 	addw	r0, r5, #3672	; 0xe58
 80443cc:	f7ff fd94 	bl	8043ef8 <_ZN11sensor_msgs11TemperatureC1Ev>
    endpoint_(endpoint) {};
 80443d0:	4b8d      	ldr	r3, [pc, #564]	; (8044608 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x39c>)
      data_length(0), st_data(), data(nullptr)
 80443d2:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 8044690 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x424>
 80443d6:	f605 609c 	addw	r0, r5, #3740	; 0xe9c
 80443da:	f8c5 3e80 	str.w	r3, [r5, #3712]	; 0xe80
 80443de:	f605 5378 	addw	r3, r5, #3448	; 0xd78
 80443e2:	f8c5 9e98 	str.w	r9, [r5, #3736]	; 0xe98
 80443e6:	f8c5 3e84 	str.w	r3, [r5, #3716]	; 0xe84
 80443ea:	f8c5 6e90 	str.w	r6, [r5, #3728]	; 0xe90
 80443ee:	f7ff fd9b 	bl	8043f28 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 80443f2:	4b86      	ldr	r3, [pc, #536]	; (804460c <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3a0>)
 80443f4:	f605 60cc 	addw	r0, r5, #3788	; 0xecc
 80443f8:	f8c5 6ebc 	str.w	r6, [r5, #3772]	; 0xebc
 80443fc:	f8c5 3ec8 	str.w	r3, [r5, #3784]	; 0xec8
 8044400:	f885 6ec0 	strb.w	r6, [r5, #3776]	; 0xec0
 8044404:	f8c5 6ec4 	str.w	r6, [r5, #3780]	; 0xec4
 8044408:	f7ff fd8e 	bl	8043f28 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data(0)
 804440c:	4b80      	ldr	r3, [pc, #512]	; (8044610 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3a4>)
      data(0)
 804440e:	f8df a284 	ldr.w	sl, [pc, #644]	; 8044694 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x428>
      charge_minus()
 8044412:	f605 7018 	addw	r0, r5, #3864	; 0xf18
 8044416:	f8c5 3f00 	str.w	r3, [r5, #3840]	; 0xf00
 804441a:	f8c5 3f08 	str.w	r3, [r5, #3848]	; 0xf08
 804441e:	4b7d      	ldr	r3, [pc, #500]	; (8044614 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3a8>)
 8044420:	f8c5 6eec 	str.w	r6, [r5, #3820]	; 0xeec
 8044424:	f8c5 3f10 	str.w	r3, [r5, #3856]	; 0xf10
 8044428:	f885 6ef0 	strb.w	r6, [r5, #3824]	; 0xef0
 804442c:	f8c5 6ef4 	str.w	r6, [r5, #3828]	; 0xef4
 8044430:	f8c5 aef8 	str.w	sl, [r5, #3832]	; 0xef8
 8044434:	f885 6efc 	strb.w	r6, [r5, #3836]	; 0xefc
 8044438:	f885 6f04 	strb.w	r6, [r5, #3844]	; 0xf04
 804443c:	f885 6f0c 	strb.w	r6, [r5, #3852]	; 0xf0c
 8044440:	f7ff fd5a 	bl	8043ef8 <_ZN11sensor_msgs11TemperatureC1Ev>
 8044444:	f505 6074 	add.w	r0, r5, #3904	; 0xf40
 8044448:	f7ff fd56 	bl	8043ef8 <_ZN11sensor_msgs11TemperatureC1Ev>
 804444c:	f605 7068 	addw	r0, r5, #3944	; 0xf68
 8044450:	f7ff fd52 	bl	8043ef8 <_ZN11sensor_msgs11TemperatureC1Ev>
 8044454:	f505 6079 	add.w	r0, r5, #3984	; 0xf90
 8044458:	f7ff fd4e 	bl	8043ef8 <_ZN11sensor_msgs11TemperatureC1Ev>
 804445c:	f605 70b8 	addw	r0, r5, #4024	; 0xfb8
 8044460:	f7ff fd4a 	bl	8043ef8 <_ZN11sensor_msgs11TemperatureC1Ev>
 8044464:	f505 607e 	add.w	r0, r5, #4064	; 0xfe0
 8044468:	f7ff fd46 	bl	8043ef8 <_ZN11sensor_msgs11TemperatureC1Ev>
 804446c:	486a      	ldr	r0, [pc, #424]	; (8044618 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3ac>)
 804446e:	f7ff fd43 	bl	8043ef8 <_ZN11sensor_msgs11TemperatureC1Ev>
 8044472:	4a6a      	ldr	r2, [pc, #424]	; (804461c <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3b0>)
 8044474:	4b6a      	ldr	r3, [pc, #424]	; (8044620 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3b4>)
 8044476:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
 804447a:	65e2      	str	r2, [r4, #92]	; 0x5c
 804447c:	f605 62c8 	addw	r2, r5, #3784	; 0xec8
 8044480:	6323      	str	r3, [r4, #48]	; 0x30
 8044482:	6622      	str	r2, [r4, #96]	; 0x60
 8044484:	4a67      	ldr	r2, [pc, #412]	; (8044624 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3b8>)
      data(0)
 8044486:	4b68      	ldr	r3, [pc, #416]	; (8044628 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3bc>)
 8044488:	6722      	str	r2, [r4, #112]	; 0x70
 804448a:	f605 62f8 	addw	r2, r5, #3832	; 0xef8
 804448e:	63a3      	str	r3, [r4, #56]	; 0x38
 8044490:	6762      	str	r2, [r4, #116]	; 0x74
 8044492:	4a66      	ldr	r2, [pc, #408]	; (804462c <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3c0>)
 8044494:	4b66      	ldr	r3, [pc, #408]	; (8044630 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3c4>)
 8044496:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 804449a:	f505 6270 	add.w	r2, r5, #3840	; 0xf00
 804449e:	64a3      	str	r3, [r4, #72]	; 0x48
 80444a0:	f605 6398 	addw	r3, r5, #3736	; 0xe98
 80444a4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 80444a8:	4a62      	ldr	r2, [pc, #392]	; (8044634 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3c8>)
    endpoint_(endpoint)
 80444aa:	4963      	ldr	r1, [pc, #396]	; (8044638 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3cc>)
 80444ac:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 80444b0:	f505 6271 	add.w	r2, r5, #3856	; 0xf10
 80444b4:	63e7      	str	r7, [r4, #60]	; 0x3c
 80444b6:	2701      	movs	r7, #1
 80444b8:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 80444bc:	4a5f      	ldr	r2, [pc, #380]	; (804463c <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3d0>)
 80444be:	64e3      	str	r3, [r4, #76]	; 0x4c
 80444c0:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
 80444c4:	f605 7208 	addw	r2, r5, #3848	; 0xf08
 80444c8:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
 80444cc:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 80444d0:	4a5b      	ldr	r2, [pc, #364]	; (8044640 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3d4>)
class ros_board {
 80444d2:	6426      	str	r6, [r4, #64]	; 0x40
 80444d4:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
 80444d8:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 80444dc:	65a6      	str	r6, [r4, #88]	; 0x58
 80444de:	f8c4 20c4 	str.w	r2, [r4, #196]	; 0xc4
 80444e2:	4a58      	ldr	r2, [pc, #352]	; (8044644 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3d8>)
 80444e4:	66e6      	str	r6, [r4, #108]	; 0x6c
 80444e6:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
 80444ea:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 80444ee:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 80444f2:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
 80444f6:	4a54      	ldr	r2, [pc, #336]	; (8044648 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3dc>)
 80444f8:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
 80444fc:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
 8044500:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
 8044504:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
 8044508:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
 804450c:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
 8044510:	f8c4 a0f4 	str.w	sl, [r4, #244]	; 0xf4
 8044514:	f884 60f8 	strb.w	r6, [r4, #248]	; 0xf8
 8044518:	e9c4 163f 	strd	r1, r6, [r4, #252]	; 0xfc
    topic_ = topic_name;
 804451c:	494b      	ldr	r1, [pc, #300]	; (804464c <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3e0>)
    endpoint_(endpoint)
 804451e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    topic_ = topic_name;
 8044522:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0
    endpoint_(endpoint)
 8044526:	494a      	ldr	r1, [pc, #296]	; (8044650 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3e4>)
 8044528:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
 804452c:	f8c4 2154 	str.w	r2, [r4, #340]	; 0x154
 8044530:	4a48      	ldr	r2, [pc, #288]	; (8044654 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3e8>)
 8044532:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
 8044536:	f8c4 a118 	str.w	sl, [r4, #280]	; 0x118
 804453a:	f884 611c 	strb.w	r6, [r4, #284]	; 0x11c
 804453e:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
 8044542:	f884 6164 	strb.w	r6, [r4, #356]	; 0x164
 8044546:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 804454a:	e9c4 1648 	strd	r1, r6, [r4, #288]	; 0x120
    topic_ = topic_name;
 804454e:	4942      	ldr	r1, [pc, #264]	; (8044658 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3ec>)
    endpoint_(endpoint)
 8044550:	e9c4 374a 	strd	r3, r7, [r4, #296]	; 0x128
 8044554:	e9c4 3753 	strd	r3, r7, [r4, #332]	; 0x14c
 8044558:	e9c4 375c 	strd	r3, r7, [r4, #368]	; 0x170
    topic_ = topic_name;
 804455c:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
 8044560:	4b3e      	ldr	r3, [pc, #248]	; (804465c <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3f0>)
    endpoint_(endpoint)
 8044562:	493f      	ldr	r1, [pc, #252]	; (8044660 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3f4>)
    topic_ = topic_name;
 8044564:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
    endpoint_(endpoint)
 8044568:	f8c4 1130 	str.w	r1, [r4, #304]	; 0x130
 804456c:	4b3d      	ldr	r3, [pc, #244]	; (8044664 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3f8>)
      data("")
 804456e:	493e      	ldr	r1, [pc, #248]	; (8044668 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x3fc>)
 8044570:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
 8044574:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 8044578:	e9c4 184f 	strd	r1, r8, [r4, #316]	; 0x13c
 804457c:	493b      	ldr	r1, [pc, #236]	; (804466c <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x400>)
      z(0)
 804457e:	f04f 0800 	mov.w	r8, #0
 8044582:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
 8044586:	4b3a      	ldr	r3, [pc, #232]	; (8044670 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x404>)
 8044588:	e9c4 1651 	strd	r1, r6, [r4, #324]	; 0x144
    topic_ = topic_name;
 804458c:	4939      	ldr	r1, [pc, #228]	; (8044674 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x408>)
    endpoint_(endpoint)
 804458e:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
    topic_ = topic_name;
 8044592:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
    endpoint_(endpoint)
 8044596:	e9c4 265a 	strd	r2, r6, [r4, #360]	; 0x168
 804459a:	f8c4 9198 	str.w	r9, [r4, #408]	; 0x198
 804459e:	f7ff fcc3 	bl	8043f28 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 80445a2:	4b35      	ldr	r3, [pc, #212]	; (8044678 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x40c>)
      data_length(0), st_data(), data(nullptr)
 80445a4:	f504 70ee 	add.w	r0, r4, #476	; 0x1dc
 80445a8:	f8c4 61bc 	str.w	r6, [r4, #444]	; 0x1bc
 80445ac:	f04f 0900 	mov.w	r9, #0
 80445b0:	f884 61c0 	strb.w	r6, [r4, #448]	; 0x1c0
 80445b4:	f8c4 61c4 	str.w	r6, [r4, #452]	; 0x1c4
 80445b8:	e9c4 3672 	strd	r3, r6, [r4, #456]	; 0x1c8
 80445bc:	f504 73bc 	add.w	r3, r4, #376	; 0x178
 80445c0:	e9c4 3774 	strd	r3, r7, [r4, #464]	; 0x1d0
    topic_ = topic_name;
 80445c4:	4b2d      	ldr	r3, [pc, #180]	; (804467c <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x410>)
 80445c6:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
 80445ca:	4b2d      	ldr	r3, [pc, #180]	; (8044680 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x414>)
 80445cc:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
 80445d0:	f7ff fcaa 	bl	8043f28 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      gyro()
 80445d4:	4b2b      	ldr	r3, [pc, #172]	; (8044684 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x418>)
 80445d6:	f505 5291 	add.w	r2, r5, #4640	; 0x1220
 80445da:	f8c4 61fc 	str.w	r6, [r4, #508]	; 0x1fc
 80445de:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
      data_length(0), st_data(), data(nullptr)
 80445e2:	f504 703d 	add.w	r0, r4, #756	; 0x2f4
 80445e6:	4b28      	ldr	r3, [pc, #160]	; (8044688 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x41c>)
 80445e8:	f8a4 6200 	strh.w	r6, [r4, #512]	; 0x200
 80445ec:	e054      	b.n	8044698 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x42c>
 80445ee:	bf00      	nop
 80445f0:	20020b60 	.word	0x20020b60
 80445f4:	0805cbf4 	.word	0x0805cbf4
 80445f8:	0805c9c0 	.word	0x0805c9c0
 80445fc:	0805ca20 	.word	0x0805ca20
 8044600:	0805c9f0 	.word	0x0805c9f0
 8044604:	0805c9d8 	.word	0x0805c9d8
 8044608:	0805f41f 	.word	0x0805f41f
 804460c:	0805ca98 	.word	0x0805ca98
 8044610:	0805ca50 	.word	0x0805ca50
 8044614:	0805cb10 	.word	0x0805cb10
 8044618:	20021b68 	.word	0x20021b68
 804461c:	0805f443 	.word	0x0805f443
 8044620:	0805cae0 	.word	0x0805cae0
 8044624:	0805f456 	.word	0x0805f456
 8044628:	0805caf8 	.word	0x0805caf8
 804462c:	0805f473 	.word	0x0805f473
 8044630:	0805f433 	.word	0x0805f433
 8044634:	0805f48f 	.word	0x0805f48f
 8044638:	08043ea1 	.word	0x08043ea1
 804463c:	0805f4a7 	.word	0x0805f4a7
 8044640:	0805f4c1 	.word	0x0805f4c1
 8044644:	0805f4e6 	.word	0x0805f4e6
 8044648:	0805cb28 	.word	0x0805cb28
 804464c:	0805f50d 	.word	0x0805f50d
 8044650:	08043ecd 	.word	0x08043ecd
 8044654:	08043cd5 	.word	0x08043cd5
 8044658:	0805f52d 	.word	0x0805f52d
 804465c:	0805f558 	.word	0x0805f558
 8044660:	0805cb40 	.word	0x0805cb40
 8044664:	0805f580 	.word	0x0805f580
 8044668:	0805cab0 	.word	0x0805cab0
 804466c:	08043e05 	.word	0x08043e05
 8044670:	0805cb70 	.word	0x0805cb70
 8044674:	0805f548 	.word	0x0805f548
 8044678:	08043e7d 	.word	0x08043e7d
 804467c:	0805f597 	.word	0x0805f597
 8044680:	0805cb58 	.word	0x0805cb58
 8044684:	0805cba0 	.word	0x0805cba0
 8044688:	0805cb88 	.word	0x0805cb88
 804468c:	08060045 	.word	0x08060045
 8044690:	0805cac8 	.word	0x0805cac8
 8044694:	0805ca38 	.word	0x0805ca38
 8044698:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
 804469c:	f8c4 3238 	str.w	r3, [r4, #568]	; 0x238
 80446a0:	f8c4 3258 	str.w	r3, [r4, #600]	; 0x258
 80446a4:	f8c4 3278 	str.w	r3, [r4, #632]	; 0x278
 80446a8:	f505 5394 	add.w	r3, r5, #4736	; 0x1280
 80446ac:	f8c4 6204 	str.w	r6, [r4, #516]	; 0x204
 80446b0:	f8c4 62a8 	str.w	r6, [r4, #680]	; 0x2a8
 80446b4:	f8c4 a2b0 	str.w	sl, [r4, #688]	; 0x2b0
 80446b8:	f884 62b4 	strb.w	r6, [r4, #692]	; 0x2b4
 80446bc:	f8c4 62c8 	str.w	r6, [r4, #712]	; 0x2c8
 80446c0:	f8c4 a2d8 	str.w	sl, [r4, #728]	; 0x2d8
 80446c4:	f884 62dc 	strb.w	r6, [r4, #732]	; 0x2dc
 80446c8:	e9c2 8900 	strd	r8, r9, [r2]
 80446cc:	e9c2 8902 	strd	r8, r9, [r2, #8]
 80446d0:	e9c2 8904 	strd	r8, r9, [r2, #16]
 80446d4:	f505 5292 	add.w	r2, r5, #4672	; 0x1240
 80446d8:	e9c3 8900 	strd	r8, r9, [r3]
 80446dc:	e9c2 8900 	strd	r8, r9, [r2]
 80446e0:	e9c2 8902 	strd	r8, r9, [r2, #8]
 80446e4:	e9c2 8904 	strd	r8, r9, [r2, #16]
 80446e8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80446ec:	f505 5293 	add.w	r2, r5, #4704	; 0x1260
 80446f0:	e9c3 8904 	strd	r8, r9, [r3, #16]
 80446f4:	4b26      	ldr	r3, [pc, #152]	; (8044790 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x524>)
 80446f6:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 80446fa:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
 80446fe:	f8c4 329c 	str.w	r3, [r4, #668]	; 0x29c
 8044702:	4b24      	ldr	r3, [pc, #144]	; (8044794 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x528>)
 8044704:	e9c2 8900 	strd	r8, r9, [r2]
 8044708:	e9c2 8902 	strd	r8, r9, [r2, #8]
 804470c:	e9c2 8904 	strd	r8, r9, [r2, #16]
 8044710:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
 8044714:	f102 0350 	add.w	r3, r2, #80	; 0x50
    endpoint_(endpoint)
 8044718:	4a1f      	ldr	r2, [pc, #124]	; (8044798 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x52c>)
 804471a:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
 804471e:	f8c4 22cc 	str.w	r2, [r4, #716]	; 0x2cc
 8044722:	4a1e      	ldr	r2, [pc, #120]	; (804479c <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x530>)
 8044724:	e9c4 26b8 	strd	r2, r6, [r4, #736]	; 0x2e0
 8044728:	e9c4 37ba 	strd	r3, r7, [r4, #744]	; 0x2e8
    topic_ = topic_name;
 804472c:	4b1c      	ldr	r3, [pc, #112]	; (80447a0 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x534>)
 804472e:	4f1d      	ldr	r7, [pc, #116]	; (80447a4 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x538>)
 8044730:	f8c4 32d4 	str.w	r3, [r4, #724]	; 0x2d4
 8044734:	f8c4 72f0 	str.w	r7, [r4, #752]	; 0x2f0
 8044738:	f7ff fbf6 	bl	8043f28 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 804473c:	f505 5399 	add.w	r3, r5, #4896	; 0x1320
 8044740:	f504 7055 	add.w	r0, r4, #852	; 0x354
 8044744:	f8c4 6314 	str.w	r6, [r4, #788]	; 0x314
 8044748:	f8c4 6320 	str.w	r6, [r4, #800]	; 0x320
 804474c:	f505 559c 	add.w	r5, r5, #4992	; 0x1380
 8044750:	f8c4 6348 	str.w	r6, [r4, #840]	; 0x348
 8044754:	f8c4 7350 	str.w	r7, [r4, #848]	; 0x350
 8044758:	e943 8902 	strd	r8, r9, [r3, #-8]
 804475c:	4b12      	ldr	r3, [pc, #72]	; (80447a8 <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x53c>)
 804475e:	f8c4 3338 	str.w	r3, [r4, #824]	; 0x338
 8044762:	f504 733c 	add.w	r3, r4, #752	; 0x2f0
 8044766:	f8c4 333c 	str.w	r3, [r4, #828]	; 0x33c
 804476a:	f7ff fbdd 	bl	8043f28 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 804476e:	4b0f      	ldr	r3, [pc, #60]	; (80447ac <_GLOBAL__sub_I__ZN8lexxhard9rosserial4initEv+0x540>)
 8044770:	f8c4 6374 	str.w	r6, [r4, #884]	; 0x374
 8044774:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
 8044778:	f504 7354 	add.w	r3, r4, #848	; 0x350
 804477c:	f8c4 6380 	str.w	r6, [r4, #896]	; 0x380
 8044780:	f8c4 33b4 	str.w	r3, [r4, #948]	; 0x3b4
 8044784:	f8c4 63c0 	str.w	r6, [r4, #960]	; 0x3c0
 8044788:	e945 8902 	strd	r8, r9, [r5, #-8]
 804478c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8044790:	0805f5aa 	.word	0x0805f5aa
 8044794:	0805f5ba 	.word	0x0805f5ba
 8044798:	0805cbb8 	.word	0x0805cbb8
 804479c:	08043e55 	.word	0x08043e55
 80447a0:	0805f5e5 	.word	0x0805f5e5
 80447a4:	0805cbd0 	.word	0x0805cbd0
 80447a8:	0805f604 	.word	0x0805f604
 80447ac:	0805f619 	.word	0x0805f619

080447b0 <_GLOBAL__sub_I__ZN8lexxhard16runaway_detector4initEv>:
}

k_thread thread;
k_msgq msgq;

}
 80447b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80447b4:	2008      	movs	r0, #8
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80447b6:	4c2a      	ldr	r4, [pc, #168]	; (8044860 <_GLOBAL__sub_I__ZN8lexxhard16runaway_detector4initEv+0xb0>)
 80447b8:	2500      	movs	r5, #0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80447ba:	6060      	str	r0, [r4, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80447bc:	6025      	str	r5, [r4, #0]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80447be:	e9c4 5502 	strd	r5, r5, [r4, #8]
 80447c2:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80447c6:	e9c4 5506 	strd	r5, r5, [r4, #24]
 80447ca:	e9c4 5508 	strd	r5, r5, [r4, #32]
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80447ce:	f010 fec6 	bl	805555e <_ZNSt16allocator_traitsISaIPN12_GLOBAL__N_111yaw_checker5topicEEE8allocateERS4_j.isra.0>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80447d2:	6866      	ldr	r6, [r4, #4]
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80447d4:	4607      	mov	r7, r0
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80447d6:	6020      	str	r0, [r4, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80447d8:	3e01      	subs	r6, #1
 80447da:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
 80447dc:	eb00 0886 	add.w	r8, r0, r6, lsl #2
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80447e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80447e4:	f016 fa34 	bl	805ac50 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
 80447e8:	f500 7300 	add.w	r3, r0, #512	; 0x200
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
 80447ec:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
 80447f0:	60e0      	str	r0, [r4, #12]
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80447f2:	60a0      	str	r0, [r4, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80447f4:	61a0      	str	r0, [r4, #24]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80447f6:	6123      	str	r3, [r4, #16]
	_M_node = __new_node;
 80447f8:	f8c4 8014 	str.w	r8, [r4, #20]
 80447fc:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
	_M_last = _M_first + difference_type(_S_buffer_size());
 8044800:	e9c4 0307 	strd	r0, r3, [r4, #28]
class yaw_checker {
 8044804:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8044808:	f010 feb4 	bl	8055574 <_ZNSt5queueIfSt5dequeIfSaIfEEEC1IS2_vEEv>
 804480c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8044810:	f010 feb0 	bl	8055574 <_ZNSt5queueIfSt5dequeIfSaIfEEEC1IS2_vEEv>
 8044814:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8044818:	f010 feac 	bl	8055574 <_ZNSt5queueIfSt5dequeIfSaIfEEEC1IS2_vEEv>
 804481c:	2300      	movs	r3, #0
 804481e:	4629      	mov	r1, r5
 8044820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8044824:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8044828:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 804482c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8044830:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 8044834:	f884 50a0 	strb.w	r5, [r4, #160]	; 0xa0
 8044838:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
 804483c:	f016 fb06 	bl	805ae4c <memset>
class {
 8044840:	4629      	mov	r1, r5
 8044842:	22c0      	movs	r2, #192	; 0xc0
 8044844:	f504 70dc 	add.w	r0, r4, #440	; 0x1b8
class yaw_checker {
 8044848:	f884 51b4 	strb.w	r5, [r4, #436]	; 0x1b4
class {
 804484c:	f016 fafe 	bl	805ae4c <memset>
} impl;
 8044850:	4620      	mov	r0, r4
 8044852:	4a04      	ldr	r2, [pc, #16]	; (8044864 <_GLOBAL__sub_I__ZN8lexxhard16runaway_detector4initEv+0xb4>)
 8044854:	4904      	ldr	r1, [pc, #16]	; (8044868 <_GLOBAL__sub_I__ZN8lexxhard16runaway_detector4initEv+0xb8>)
}
 8044856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
} impl;
 804485a:	f012 bed2 	b.w	8057602 <__aeabi_atexit>
 804485e:	bf00      	nop
 8044860:	2003469c 	.word	0x2003469c
 8044864:	20037634 	.word	0x20037634
 8044868:	08055603 	.word	0x08055603

0804486c <_GLOBAL__sub_I__ZN8lexxhard16sdlog_controller13log_const_logE>:
        return entries[index];
    }
    static constexpr uint32_t MAX_ENTRIES{30};
private:
    void reset() {
        for (auto &i : entries)
 804486c:	4a06      	ldr	r2, [pc, #24]	; (8044888 <_GLOBAL__sub_I__ZN8lexxhard16sdlog_controller13log_const_logE+0x1c>)
    directory_list() {
 804486e:	231e      	movs	r3, #30
            i[0] = '\0';
 8044870:	2100      	movs	r1, #0
        for (auto &i : entries)
 8044872:	3b01      	subs	r3, #1
            i[0] = '\0';
 8044874:	f882 1360 	strb.w	r1, [r2, #864]	; 0x360
        for (auto &i : entries)
 8044878:	f502 7280 	add.w	r2, r2, #256	; 0x100
 804487c:	d1f9      	bne.n	8044872 <_GLOBAL__sub_I__ZN8lexxhard16sdlog_controller13log_const_logE+0x6>
    char workpath[PATH_MAX], workpath2[PATH_MAX];
    static constexpr int32_t MIN_FREE_MB{1024};
    static constexpr uint32_t MAX_FILE_COUNT{500};
};

class sdlog_controller_impl {
 804487e:	4a03      	ldr	r2, [pc, #12]	; (804488c <_GLOBAL__sub_I__ZN8lexxhard16sdlog_controller13log_const_logE+0x20>)
 8044880:	f882 396c 	strb.w	r3, [r2, #2412]	; 0x96c
}

k_thread thread;
k_msgq msgq;

}
 8044884:	4770      	bx	lr
 8044886:	bf00      	nop
 8044888:	20034914 	.word	0x20034914
 804488c:	20036914 	.word	0x20036914

08044890 <_ZN8lexxhard14tof_controller4infoEPK5shelljPPc>:
LOG_MODULE_REGISTER(tof);

char __aligned(4) msgq_buffer[8 * sizeof (msg)];

int info(const shell *shell, size_t argc, char **argv)
{
 8044890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8044892:	4604      	mov	r4, r0
    shell_print(shell, "L:%dmV R:%dmV",
 8044894:	2000      	movs	r0, #0
 8044896:	f7fe fa11 	bl	8042cbc <_ZN8lexxhard10adc_reader3getEi>
 804489a:	9003      	str	r0, [sp, #12]
 804489c:	2001      	movs	r0, #1
 804489e:	f7fe fa0d 	bl	8042cbc <_ZN8lexxhard10adc_reader3getEi>
 80448a2:	9b03      	ldr	r3, [sp, #12]
 80448a4:	9000      	str	r0, [sp, #0]
 80448a6:	2100      	movs	r1, #0
 80448a8:	4620      	mov	r0, r4
 80448aa:	4a03      	ldr	r2, [pc, #12]	; (80448b8 <_ZN8lexxhard14tof_controller4infoEPK5shelljPPc+0x28>)
 80448ac:	f012 f807 	bl	80568be <shell_fprintf>
                adc_reader::get(adc_reader::DOWNWARD_L),
                adc_reader::get(adc_reader::DOWNWARD_R));
    return 0;
}
 80448b0:	2000      	movs	r0, #0
 80448b2:	b004      	add	sp, #16
 80448b4:	bd10      	pop	{r4, pc}
 80448b6:	bf00      	nop
 80448b8:	0805fa25 	.word	0x0805fa25

080448bc <_ZN8lexxhard14uss_controller4infoEPK5shelljPPc>:
#define RUN(x) \
    k_thread_create(&fetcher[x].thread, fetcher_stack_##x, K_THREAD_STACK_SIZEOF(fetcher_stack_##x), \
                    &uss_fetcher::runner, &fetcher[x], nullptr, nullptr, 3, K_FP_REGS, K_NO_WAIT);

int info(const shell *shell, size_t argc, char **argv)
{
 80448bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        distance[0] = this->distance[0];
 80448be:	4b0b      	ldr	r3, [pc, #44]	; (80448ec <_ZN8lexxhard14uss_controller4infoEPK5shelljPPc+0x30>)
    uint32_t front[2], left[2], right[2], back[2];
    fetcher[0].get_distance(front);
    fetcher[1].get_distance(left);
    fetcher[2].get_distance(right);
    fetcher[3].get_distance(back);
    shell_print(shell, "FL:%umm FR:%umm L:%umm R:%umm B:%umm\n",
 80448c0:	2100      	movs	r1, #0
 80448c2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80448c6:	9203      	str	r2, [sp, #12]
 80448c8:	f8d3 2310 	ldr.w	r2, [r3, #784]	; 0x310
 80448cc:	9202      	str	r2, [sp, #8]
 80448ce:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80448d2:	9201      	str	r2, [sp, #4]
 80448d4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80448d8:	9200      	str	r2, [sp, #0]
 80448da:	4a05      	ldr	r2, [pc, #20]	; (80448f0 <_ZN8lexxhard14uss_controller4infoEPK5shelljPPc+0x34>)
 80448dc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80448e0:	f011 ffed 	bl	80568be <shell_fprintf>
                front[0], front[1],
                left[0], right[0], back[0]);
    return 0;
}
 80448e4:	2000      	movs	r0, #0
 80448e6:	b005      	add	sp, #20
 80448e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80448ec:	20021f28 	.word	0x20021f28
 80448f0:	0805fa55 	.word	0x0805fa55

080448f4 <_GLOBAL__sub_I__ZN8lexxhard14uss_controller13log_const_ussE>:
}

k_thread thread;
k_msgq msgq;

}
 80448f4:	b538      	push	{r3, r4, r5, lr}
 80448f6:	2400      	movs	r4, #0
} fetcher[4];
 80448f8:	4d06      	ldr	r5, [pc, #24]	; (8044914 <_GLOBAL__sub_I__ZN8lexxhard14uss_controller13log_const_ussE+0x20>)
 80448fa:	1928      	adds	r0, r5, r4
 80448fc:	f504 7484 	add.w	r4, r4, #264	; 0x108
 8044900:	f44f 7284 	mov.w	r2, #264	; 0x108
 8044904:	2100      	movs	r1, #0
 8044906:	f016 faa1 	bl	805ae4c <memset>
 804490a:	f5b4 6f84 	cmp.w	r4, #1056	; 0x420
 804490e:	d1f4      	bne.n	80448fa <_GLOBAL__sub_I__ZN8lexxhard14uss_controller13log_const_ussE+0x6>
}
 8044910:	bd38      	pop	{r3, r4, r5, pc}
 8044912:	bf00      	nop
 8044914:	20021f28 	.word	0x20021f28

08044918 <_ZN3ros16normalizeSecNSecERjS0_>:

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
  uint32_t nsec_part = nsec % 1000000000UL;
 8044918:	680b      	ldr	r3, [r1, #0]
  uint32_t sec_part = nsec / 1000000000UL;
  sec += sec_part;
 804491a:	6802      	ldr	r2, [r0, #0]
{
 804491c:	b530      	push	{r4, r5, lr}
  uint32_t sec_part = nsec / 1000000000UL;
 804491e:	4d04      	ldr	r5, [pc, #16]	; (8044930 <_ZN3ros16normalizeSecNSecERjS0_+0x18>)
 8044920:	fbb3 f4f5 	udiv	r4, r3, r5
  sec += sec_part;
 8044924:	4422      	add	r2, r4
  uint32_t nsec_part = nsec % 1000000000UL;
 8044926:	fb05 3314 	mls	r3, r5, r4, r3
  sec += sec_part;
 804492a:	6002      	str	r2, [r0, #0]
  nsec = nsec_part;
 804492c:	600b      	str	r3, [r1, #0]
}
 804492e:	bd30      	pop	{r4, r5, pc}
 8044930:	3b9aca00 	.word	0x3b9aca00

08044934 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8044934:	680b      	ldr	r3, [r1, #0]
 8044936:	3301      	adds	r3, #1
 8044938:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 804493a:	4b01      	ldr	r3, [pc, #4]	; (8044940 <char_out+0xc>)
 804493c:	681b      	ldr	r3, [r3, #0]
 804493e:	4718      	bx	r3
 8044940:	200200b0 	.word	0x200200b0

08044944 <__printk_hook_install>:
	_char_out = fn;
 8044944:	4b01      	ldr	r3, [pc, #4]	; (804494c <__printk_hook_install+0x8>)
 8044946:	6018      	str	r0, [r3, #0]
}
 8044948:	4770      	bx	lr
 804494a:	bf00      	nop
 804494c:	200200b0 	.word	0x200200b0

08044950 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 8044950:	b507      	push	{r0, r1, r2, lr}
 8044952:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
 8044954:	2100      	movs	r1, #0
{
 8044956:	4602      	mov	r2, r0
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
 8044958:	4803      	ldr	r0, [pc, #12]	; (8044968 <vprintk+0x18>)
		struct out_context ctx = { 0 };
 804495a:	9101      	str	r1, [sp, #4]
		cbvprintf(char_out, &ctx, fmt, ap);
 804495c:	a901      	add	r1, sp, #4
 804495e:	f7fb ff83 	bl	8040868 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 8044962:	b003      	add	sp, #12
 8044964:	f85d fb04 	ldr.w	pc, [sp], #4
 8044968:	08044935 	.word	0x08044935

0804496c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 804496c:	b530      	push	{r4, r5, lr}
 804496e:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
 8044970:	2500      	movs	r5, #0
{
 8044972:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 8044974:	9503      	str	r5, [sp, #12]
 8044976:	e9cd 0101 	strd	r0, r1, [sp, #4]

	cbvprintf(str_out, &ctx, fmt, ap);
 804497a:	a901      	add	r1, sp, #4
 804497c:	4804      	ldr	r0, [pc, #16]	; (8044990 <vsnprintk+0x24>)
 804497e:	f7fb ff73 	bl	8040868 <cbvprintf>

	if (ctx.count < ctx.max) {
 8044982:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 8044986:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
 8044988:	bfb8      	it	lt
 804498a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
 804498c:	b005      	add	sp, #20
 804498e:	bd30      	pop	{r4, r5, pc}
 8044990:	0805564b 	.word	0x0805564b

08044994 <extract_decimal>:
{
 8044994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8044996:	4602      	mov	r2, r0
 8044998:	6801      	ldr	r1, [r0, #0]
	while (isdigit((int)(unsigned char)*sp)) {
 804499a:	4e08      	ldr	r6, [pc, #32]	; (80449bc <extract_decimal+0x28>)
	size_t val = 0;
 804499c:	2000      	movs	r0, #0
		val = 10U * val + *sp++ - '0';
 804499e:	270a      	movs	r7, #10
 80449a0:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
 80449a2:	3101      	adds	r1, #1
 80449a4:	7823      	ldrb	r3, [r4, #0]
 80449a6:	5d9d      	ldrb	r5, [r3, r6]
 80449a8:	076d      	lsls	r5, r5, #29
 80449aa:	d401      	bmi.n	80449b0 <extract_decimal+0x1c>
	*str = sp;
 80449ac:	6014      	str	r4, [r2, #0]
}
 80449ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
 80449b0:	fb07 3300 	mla	r3, r7, r0, r3
 80449b4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80449b8:	e7f2      	b.n	80449a0 <extract_decimal+0xc>
 80449ba:	bf00      	nop
 80449bc:	08063365 	.word	0x08063365

080449c0 <encode_uint>:
{
 80449c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80449c4:	4615      	mov	r5, r2
 80449c6:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 80449c8:	78d3      	ldrb	r3, [r2, #3]
{
 80449ca:	4680      	mov	r8, r0
	bool upcase = isupper((int)conv->specifier);
 80449cc:	4a21      	ldr	r2, [pc, #132]	; (8044a54 <encode_uint+0x94>)
{
 80449ce:	460f      	mov	r7, r1
	switch (specifier) {
 80449d0:	2b6f      	cmp	r3, #111	; 0x6f
 80449d2:	f813 b002 	ldrb.w	fp, [r3, r2]
 80449d6:	f00b 0b03 	and.w	fp, fp, #3
 80449da:	d029      	beq.n	8044a30 <encode_uint+0x70>
 80449dc:	d824      	bhi.n	8044a28 <encode_uint+0x68>
		return 16;
 80449de:	2b58      	cmp	r3, #88	; 0x58
 80449e0:	bf14      	ite	ne
 80449e2:	260a      	movne	r6, #10
 80449e4:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
 80449e6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 80449ea:	4632      	mov	r2, r6
 80449ec:	2300      	movs	r3, #0
 80449ee:	4640      	mov	r0, r8
 80449f0:	4639      	mov	r1, r7
 80449f2:	f7fb fda5 	bl	8040540 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80449f6:	2a09      	cmp	r2, #9
 80449f8:	b2d4      	uxtb	r4, r2
 80449fa:	d81e      	bhi.n	8044a3a <encode_uint+0x7a>
 80449fc:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 80449fe:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8044a00:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 8044a02:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8044a06:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 8044a0a:	d301      	bcc.n	8044a10 <encode_uint+0x50>
 8044a0c:	45d1      	cmp	r9, sl
 8044a0e:	d811      	bhi.n	8044a34 <encode_uint+0x74>
	if (conv->flag_hash) {
 8044a10:	782b      	ldrb	r3, [r5, #0]
 8044a12:	069b      	lsls	r3, r3, #26
 8044a14:	d505      	bpl.n	8044a22 <encode_uint+0x62>
		if (radix == 8) {
 8044a16:	2e08      	cmp	r6, #8
 8044a18:	d115      	bne.n	8044a46 <encode_uint+0x86>
			conv->altform_0 = true;
 8044a1a:	78ab      	ldrb	r3, [r5, #2]
 8044a1c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 8044a20:	70ab      	strb	r3, [r5, #2]
}
 8044a22:	4648      	mov	r0, r9
 8044a24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8044a28:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 8044a2c:	2b70      	cmp	r3, #112	; 0x70
 8044a2e:	e7d7      	b.n	80449e0 <encode_uint+0x20>
	switch (specifier) {
 8044a30:	2608      	movs	r6, #8
 8044a32:	e7d8      	b.n	80449e6 <encode_uint+0x26>
		value /= radix;
 8044a34:	4680      	mov	r8, r0
 8044a36:	460f      	mov	r7, r1
 8044a38:	e7d7      	b.n	80449ea <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8044a3a:	f1bb 0f01 	cmp.w	fp, #1
 8044a3e:	bf0c      	ite	eq
 8044a40:	3437      	addeq	r4, #55	; 0x37
 8044a42:	3457      	addne	r4, #87	; 0x57
 8044a44:	e7db      	b.n	80449fe <encode_uint+0x3e>
		} else if (radix == 16) {
 8044a46:	2e10      	cmp	r6, #16
 8044a48:	d1eb      	bne.n	8044a22 <encode_uint+0x62>
			conv->altform_0c = true;
 8044a4a:	78ab      	ldrb	r3, [r5, #2]
 8044a4c:	f043 0310 	orr.w	r3, r3, #16
 8044a50:	e7e6      	b.n	8044a20 <encode_uint+0x60>
 8044a52:	bf00      	nop
 8044a54:	08063365 	.word	0x08063365

08044a58 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

FUNC_NORETURN void sys_reboot(int type)
{
 8044a58:	b507      	push	{r0, r1, r2, lr}
 8044a5a:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
 8044a5c:	f04f 0210 	mov.w	r2, #16
 8044a60:	f3ef 8311 	mrs	r3, BASEPRI
 8044a64:	f382 8812 	msr	BASEPRI_MAX, r2
 8044a68:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
 8044a6c:	f014 f842 	bl	8058af4 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
 8044a70:	9801      	ldr	r0, [sp, #4]
 8044a72:	f003 ffe1 	bl	8048a38 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
 8044a76:	4803      	ldr	r0, [pc, #12]	; (8044a84 <sys_reboot+0x2c>)
 8044a78:	f010 fdf9 	bl	805566e <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8044a7c:	f003 fa58 	bl	8047f30 <arch_cpu_idle>
 8044a80:	e7fc      	b.n	8044a7c <sys_reboot+0x24>
 8044a82:	bf00      	nop
 8044a84:	0805faa3 	.word	0x0805faa3

08044a88 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
 8044a88:	070b      	lsls	r3, r1, #28
 8044a8a:	d506      	bpl.n	8044a9a <foldcase+0x12>
 8044a8c:	4b03      	ldr	r3, [pc, #12]	; (8044a9c <foldcase+0x14>)
 8044a8e:	5cc3      	ldrb	r3, [r0, r3]
 8044a90:	f003 0303 	and.w	r3, r3, #3
 8044a94:	2b01      	cmp	r3, #1
        return tolower(ch);
 8044a96:	bf08      	it	eq
 8044a98:	3020      	addeq	r0, #32
    return ch;
}
 8044a9a:	4770      	bx	lr
 8044a9c:	08063365 	.word	0x08063365

08044aa0 <st_stm32f7_init>:
  * @rmtoll FLASH_ACR    ARTEN      LL_FLASH_EnableART
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableART(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_ARTEN);
 8044aa0:	4a2c      	ldr	r2, [pc, #176]	; (8044b54 <st_stm32f7_init+0xb4>)
 8044aa2:	6813      	ldr	r3, [r2, #0]
 8044aa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 * So the init priority has to be 0 (zero).
 *
 * @return 0
 */
static int st_stm32f7_init(const struct device *arg)
{
 8044aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8044aaa:	6013      	str	r3, [r2, #0]
 8044aac:	f04f 0310 	mov.w	r3, #16
 8044ab0:	f3ef 8011 	mrs	r0, BASEPRI
 8044ab4:	f383 8812 	msr	BASEPRI_MAX, r3
 8044ab8:	f3bf 8f6f 	isb	sy
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8044abc:	4b26      	ldr	r3, [pc, #152]	; (8044b58 <st_stm32f7_init+0xb8>)
 8044abe:	695a      	ldr	r2, [r3, #20]
 8044ac0:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8044ac4:	d111      	bne.n	8044aea <st_stm32f7_init+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8044ac6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8044aca:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8044ace:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8044ad2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8044ad6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8044ada:	695a      	ldr	r2, [r3, #20]
 8044adc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8044ae0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8044ae2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8044ae6:	f3bf 8f6f 	isb	sy
	LL_FLASH_EnableART();

	key = irq_lock();

	SCB_EnableICache();
	if (!(SCB->CCR & SCB_CCR_DC_Msk)) {
 8044aea:	4a1b      	ldr	r2, [pc, #108]	; (8044b58 <st_stm32f7_init+0xb8>)
 8044aec:	6953      	ldr	r3, [r2, #20]
 8044aee:	03db      	lsls	r3, r3, #15
 8044af0:	d427      	bmi.n	8044b42 <st_stm32f7_init+0xa2>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8044af2:	6953      	ldr	r3, [r2, #20]
 8044af4:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8044af8:	d123      	bne.n	8044b42 <st_stm32f7_init+0xa2>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8044afa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8044afe:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8044b02:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8044b06:	f643 75e0 	movw	r5, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8044b0a:	f3c3 04c9 	ubfx	r4, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8044b0e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8044b12:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8044b14:	ea03 0705 	and.w	r7, r3, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8044b18:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8044b1a:	ea47 7681 	orr.w	r6, r7, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8044b1e:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8044b20:	f8c2 6260 	str.w	r6, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8044b24:	d2f9      	bcs.n	8044b1a <st_stm32f7_init+0x7a>
    } while(sets-- != 0U);
 8044b26:	3b20      	subs	r3, #32
 8044b28:	f113 0f20 	cmn.w	r3, #32
 8044b2c:	d1f2      	bne.n	8044b14 <st_stm32f7_init+0x74>
 8044b2e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8044b32:	6953      	ldr	r3, [r2, #20]
 8044b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8044b38:	6153      	str	r3, [r2, #20]
 8044b3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8044b3e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8044b42:	f380 8811 	msr	BASEPRI, r0
 8044b46:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 8044b4a:	4b04      	ldr	r3, [pc, #16]	; (8044b5c <st_stm32f7_init+0xbc>)

	return 0;
}
 8044b4c:	2000      	movs	r0, #0
	SystemCoreClock = 16000000;
 8044b4e:	4a04      	ldr	r2, [pc, #16]	; (8044b60 <st_stm32f7_init+0xc0>)
 8044b50:	601a      	str	r2, [r3, #0]
}
 8044b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8044b54:	40023c00 	.word	0x40023c00
 8044b58:	e000ed00 	.word	0xe000ed00
 8044b5c:	20020584 	.word	0x20020584
 8044b60:	00f42400 	.word	0x00f42400

08044b64 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8044b64:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8044b66:	2200      	movs	r2, #0
{
 8044b68:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
 8044b6a:	490f      	ldr	r1, [pc, #60]	; (8044ba8 <enable_logger+0x44>)
 8044b6c:	480f      	ldr	r0, [pc, #60]	; (8044bac <enable_logger+0x48>)
 8044b6e:	f015 fe15 	bl	805a79c <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8044b72:	2200      	movs	r2, #0
 8044b74:	2300      	movs	r3, #0
 8044b76:	2400      	movs	r4, #0
 8044b78:	4d0d      	ldr	r5, [pc, #52]	; (8044bb0 <enable_logger+0x4c>)
 8044b7a:	490e      	ldr	r1, [pc, #56]	; (8044bb4 <enable_logger+0x50>)
 8044b7c:	4628      	mov	r0, r5
 8044b7e:	9400      	str	r4, [sp, #0]
 8044b80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8044b84:	230e      	movs	r3, #14
 8044b86:	f44f 7240 	mov.w	r2, #768	; 0x300
 8044b8a:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8044b8e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8044b92:	4b09      	ldr	r3, [pc, #36]	; (8044bb8 <enable_logger+0x54>)
 8044b94:	f00c fdbe 	bl	8051714 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8044b98:	4908      	ldr	r1, [pc, #32]	; (8044bbc <enable_logger+0x58>)
 8044b9a:	4628      	mov	r0, r5
 8044b9c:	f00c fd0a 	bl	80515b4 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 8044ba0:	4620      	mov	r0, r4
 8044ba2:	b009      	add	sp, #36	; 0x24
 8044ba4:	bd30      	pop	{r4, r5, pc}
 8044ba6:	bf00      	nop
 8044ba8:	08044bc1 	.word	0x08044bc1
 8044bac:	20022348 	.word	0x20022348
 8044bb0:	20022380 	.word	0x20022380
 8044bb4:	2003a380 	.word	0x2003a380
 8044bb8:	08044f95 	.word	0x08044f95
 8044bbc:	0805fe95 	.word	0x0805fe95

08044bc0 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
 8044bc0:	4801      	ldr	r0, [pc, #4]	; (8044bc8 <log_process_thread_timer_expiry_fn+0x8>)
 8044bc2:	f00c bf8f 	b.w	8051ae4 <z_impl_k_sem_give>
 8044bc6:	bf00      	nop
 8044bc8:	20020a4c 	.word	0x20020a4c

08044bcc <z_log_get_s_mask>:
{
 8044bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8044bce:	4605      	mov	r5, r0
	uint32_t mask = 0U;
 8044bd0:	2000      	movs	r0, #0
		} else if (arm && isalpha((int)curr)) {
 8044bd2:	4e10      	ldr	r6, [pc, #64]	; (8044c14 <z_log_get_s_mask+0x48>)
				mask |= BIT(arg);
 8044bd4:	2701      	movs	r7, #1
	uint32_t arg = 0U;
 8044bd6:	4603      	mov	r3, r0
	bool arm = false;
 8044bd8:	4602      	mov	r2, r0
	while ((curr = *str++) && arg < nargs) {
 8044bda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8044bde:	b10c      	cbz	r4, 8044be4 <z_log_get_s_mask+0x18>
 8044be0:	428b      	cmp	r3, r1
 8044be2:	d300      	bcc.n	8044be6 <z_log_get_s_mask+0x1a>
}
 8044be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
 8044be6:	2c25      	cmp	r4, #37	; 0x25
 8044be8:	d102      	bne.n	8044bf0 <z_log_get_s_mask+0x24>
			arm = !arm;
 8044bea:	f082 0201 	eor.w	r2, r2, #1
 8044bee:	e7f4      	b.n	8044bda <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
 8044bf0:	2a00      	cmp	r2, #0
 8044bf2:	d0f2      	beq.n	8044bda <z_log_get_s_mask+0xe>
 8044bf4:	f814 c006 	ldrb.w	ip, [r4, r6]
 8044bf8:	f01c 0f03 	tst.w	ip, #3
 8044bfc:	d0ed      	beq.n	8044bda <z_log_get_s_mask+0xe>
			if (curr == 's') {
 8044bfe:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
 8044c00:	bf08      	it	eq
 8044c02:	fa07 f203 	lsleq.w	r2, r7, r3
			arg++;
 8044c06:	f103 0301 	add.w	r3, r3, #1
				mask |= BIT(arg);
 8044c0a:	bf08      	it	eq
 8044c0c:	4310      	orreq	r0, r2
			arm = false;
 8044c0e:	2200      	movs	r2, #0
 8044c10:	e7e3      	b.n	8044bda <z_log_get_s_mask+0xe>
 8044c12:	bf00      	nop
 8044c14:	08063365 	.word	0x08063365

08044c18 <log_core_init>:
{
 8044c18:	b508      	push	{r3, lr}
	panic_mode = false;
 8044c1a:	4a0d      	ldr	r2, [pc, #52]	; (8044c50 <log_core_init+0x38>)
 8044c1c:	2300      	movs	r3, #0
	log_output_timestamp_freq_set(freq);
 8044c1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	panic_mode = false;
 8044c22:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 8044c24:	4a0b      	ldr	r2, [pc, #44]	; (8044c54 <log_core_init+0x3c>)
 8044c26:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
 8044c28:	4b0b      	ldr	r3, [pc, #44]	; (8044c58 <log_core_init+0x40>)
 8044c2a:	4a0c      	ldr	r2, [pc, #48]	; (8044c5c <log_core_init+0x44>)
 8044c2c:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
 8044c2e:	f000 fd9b 	bl	8045768 <log_output_timestamp_freq_set>
		log_msg_pool_init();
 8044c32:	f000 fb39 	bl	80452a8 <log_msg_pool_init>
		log_list_init(&list);
 8044c36:	480a      	ldr	r0, [pc, #40]	; (8044c60 <log_core_init+0x48>)
 8044c38:	f011 f9ac 	bl	8055f94 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
 8044c3c:	2310      	movs	r3, #16
 8044c3e:	2248      	movs	r2, #72	; 0x48
 8044c40:	4908      	ldr	r1, [pc, #32]	; (8044c64 <log_core_init+0x4c>)
 8044c42:	4809      	ldr	r0, [pc, #36]	; (8044c68 <log_core_init+0x50>)
 8044c44:	f015 fb1a 	bl	805a27c <k_mem_slab_init>
}
 8044c48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_runtime_filters_init();
 8044c4c:	f000 ba64 	b.w	8045118 <z_log_runtime_filters_init>
 8044c50:	20038f17 	.word	0x20038f17
 8044c54:	20037288 	.word	0x20037288
 8044c58:	200200b4 	.word	0x200200b4
 8044c5c:	08055fd3 	.word	0x08055fd3
 8044c60:	20037290 	.word	0x20037290
 8044c64:	20044240 	.word	0x20044240
 8044c68:	20037298 	.word	0x20037298

08044c6c <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8044c6c:	4b12      	ldr	r3, [pc, #72]	; (8044cb8 <log_init+0x4c>)
{
 8044c6e:	b570      	push	{r4, r5, r6, lr}
 8044c70:	f3bf 8f5b 	dmb	ish
 8044c74:	e853 5f00 	ldrex	r5, [r3]
 8044c78:	1c6a      	adds	r2, r5, #1
 8044c7a:	e843 2100 	strex	r1, r2, [r3]
 8044c7e:	2900      	cmp	r1, #0
 8044c80:	d1f8      	bne.n	8044c74 <log_init+0x8>
 8044c82:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 8044c86:	b92d      	cbnz	r5, 8044c94 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
 8044c88:	4c0c      	ldr	r4, [pc, #48]	; (8044cbc <log_init+0x50>)
 8044c8a:	4e0d      	ldr	r6, [pc, #52]	; (8044cc0 <log_init+0x54>)
 8044c8c:	1b36      	subs	r6, r6, r4
 8044c8e:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
 8044c90:	42b5      	cmp	r5, r6
 8044c92:	db00      	blt.n	8044c96 <log_init+0x2a>
}
 8044c94:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
 8044c96:	7b23      	ldrb	r3, [r4, #12]
 8044c98:	b153      	cbz	r3, 8044cb0 <log_init+0x44>
			if (backend->api->init != NULL) {
 8044c9a:	6823      	ldr	r3, [r4, #0]
 8044c9c:	699b      	ldr	r3, [r3, #24]
 8044c9e:	b10b      	cbz	r3, 8044ca4 <log_init+0x38>
				backend->api->init(backend);
 8044ca0:	4620      	mov	r0, r4
 8044ca2:	4798      	blx	r3
			log_backend_enable(backend,
 8044ca4:	6863      	ldr	r3, [r4, #4]
 8044ca6:	2204      	movs	r2, #4
 8044ca8:	4620      	mov	r0, r4
 8044caa:	6819      	ldr	r1, [r3, #0]
 8044cac:	f000 facc 	bl	8045248 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 8044cb0:	3501      	adds	r5, #1
 8044cb2:	3410      	adds	r4, #16
 8044cb4:	e7ec      	b.n	8044c90 <log_init+0x24>
 8044cb6:	bf00      	nop
 8044cb8:	2003728c 	.word	0x2003728c
 8044cbc:	0805c134 	.word	0x0805c134
 8044cc0:	0805c154 	.word	0x0805c154

08044cc4 <get_msg>:
{
 8044cc4:	b510      	push	{r4, lr}
	__asm__ volatile(
 8044cc6:	f04f 0310 	mov.w	r3, #16
 8044cca:	f3ef 8411 	mrs	r4, BASEPRI
 8044cce:	f383 8812 	msr	BASEPRI_MAX, r3
 8044cd2:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
 8044cd6:	4804      	ldr	r0, [pc, #16]	; (8044ce8 <get_msg+0x24>)
 8044cd8:	f011 f96c 	bl	8055fb4 <log_list_head_get>
	__asm__ volatile(
 8044cdc:	f384 8811 	msr	BASEPRI, r4
 8044ce0:	f3bf 8f6f 	isb	sy
}
 8044ce4:	bd10      	pop	{r4, pc}
 8044ce6:	bf00      	nop
 8044ce8:	20037290 	.word	0x20037290

08044cec <z_log_notify_backend_enabled>:
{
 8044cec:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8044cee:	4c04      	ldr	r4, [pc, #16]	; (8044d00 <z_log_notify_backend_enabled+0x14>)
 8044cf0:	7823      	ldrb	r3, [r4, #0]
 8044cf2:	b913      	cbnz	r3, 8044cfa <z_log_notify_backend_enabled+0xe>
 8044cf4:	4803      	ldr	r0, [pc, #12]	; (8044d04 <z_log_notify_backend_enabled+0x18>)
 8044cf6:	f00c fef5 	bl	8051ae4 <z_impl_k_sem_give>
	backend_attached = true;
 8044cfa:	2301      	movs	r3, #1
 8044cfc:	7023      	strb	r3, [r4, #0]
}
 8044cfe:	bd10      	pop	{r4, pc}
 8044d00:	20038f16 	.word	0x20038f16
 8044d04:	20020a4c 	.word	0x20020a4c

08044d08 <z_log_dropped>:
 8044d08:	4b0c      	ldr	r3, [pc, #48]	; (8044d3c <z_log_dropped+0x34>)
 8044d0a:	f3bf 8f5b 	dmb	ish
 8044d0e:	e853 2f00 	ldrex	r2, [r3]
 8044d12:	3201      	adds	r2, #1
 8044d14:	e843 2100 	strex	r1, r2, [r3]
 8044d18:	2900      	cmp	r1, #0
 8044d1a:	d1f8      	bne.n	8044d0e <z_log_dropped+0x6>
 8044d1c:	f3bf 8f5b 	dmb	ish
	if (buffered) {
 8044d20:	b158      	cbz	r0, 8044d3a <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8044d22:	4b07      	ldr	r3, [pc, #28]	; (8044d40 <z_log_dropped+0x38>)
 8044d24:	f3bf 8f5b 	dmb	ish
 8044d28:	e853 2f00 	ldrex	r2, [r3]
 8044d2c:	3a01      	subs	r2, #1
 8044d2e:	e843 2100 	strex	r1, r2, [r3]
 8044d32:	2900      	cmp	r1, #0
 8044d34:	d1f8      	bne.n	8044d28 <z_log_dropped+0x20>
 8044d36:	f3bf 8f5b 	dmb	ish
}
 8044d3a:	4770      	bx	lr
 8044d3c:	20037288 	.word	0x20037288
 8044d40:	20037284 	.word	0x20037284

08044d44 <z_log_dropped_read_and_clear>:
}
 8044d44:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8044d46:	4b06      	ldr	r3, [pc, #24]	; (8044d60 <z_log_dropped_read_and_clear+0x1c>)
 8044d48:	f3bf 8f5b 	dmb	ish
 8044d4c:	4602      	mov	r2, r0
 8044d4e:	e853 0f00 	ldrex	r0, [r3]
 8044d52:	e843 2100 	strex	r1, r2, [r3]
 8044d56:	2900      	cmp	r1, #0
 8044d58:	d1f9      	bne.n	8044d4e <z_log_dropped_read_and_clear+0xa>
 8044d5a:	f3bf 8f5b 	dmb	ish
 8044d5e:	4770      	bx	lr
 8044d60:	20037288 	.word	0x20037288

08044d64 <dropped_notify>:
{
 8044d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8044d66:	4c0b      	ldr	r4, [pc, #44]	; (8044d94 <dropped_notify+0x30>)
	uint32_t dropped = z_log_dropped_read_and_clear();
 8044d68:	f7ff ffec 	bl	8044d44 <z_log_dropped_read_and_clear>
 8044d6c:	4d0a      	ldr	r5, [pc, #40]	; (8044d98 <dropped_notify+0x34>)
 8044d6e:	4607      	mov	r7, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
 8044d70:	2600      	movs	r6, #0
 8044d72:	1b2d      	subs	r5, r5, r4
 8044d74:	112d      	asrs	r5, r5, #4
 8044d76:	42ae      	cmp	r6, r5
 8044d78:	db00      	blt.n	8044d7c <dropped_notify+0x18>
}
 8044d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8044d7c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8044d7e:	795b      	ldrb	r3, [r3, #5]
 8044d80:	b12b      	cbz	r3, 8044d8e <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
 8044d82:	6823      	ldr	r3, [r4, #0]
 8044d84:	691b      	ldr	r3, [r3, #16]
 8044d86:	b113      	cbz	r3, 8044d8e <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
 8044d88:	4639      	mov	r1, r7
 8044d8a:	4620      	mov	r0, r4
 8044d8c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8044d8e:	3601      	adds	r6, #1
 8044d90:	3410      	adds	r4, #16
 8044d92:	e7f0      	b.n	8044d76 <dropped_notify+0x12>
 8044d94:	0805c134 	.word	0x0805c134
 8044d98:	0805c154 	.word	0x0805c154

08044d9c <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
 8044d9c:	4b17      	ldr	r3, [pc, #92]	; (8044dfc <z_log_strdup+0x60>)
 8044d9e:	4298      	cmp	r0, r3
{
 8044da0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8044da2:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
 8044da4:	d302      	bcc.n	8044dac <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
 8044da6:	4b16      	ldr	r3, [pc, #88]	; (8044e00 <z_log_strdup+0x64>)
 8044da8:	4298      	cmp	r0, r3
 8044daa:	d321      	bcc.n	8044df0 <z_log_strdup+0x54>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
 8044dac:	2200      	movs	r2, #0
 8044dae:	2300      	movs	r3, #0
 8044db0:	a901      	add	r1, sp, #4
 8044db2:	4814      	ldr	r0, [pc, #80]	; (8044e04 <z_log_strdup+0x68>)
 8044db4:	f00c fb98 	bl	80514e8 <k_mem_slab_alloc>
	if (err != 0) {
 8044db8:	4605      	mov	r5, r0
 8044dba:	b9e0      	cbnz	r0, 8044df6 <z_log_strdup+0x5a>
 8044dbc:	2201      	movs	r2, #1
 8044dbe:	9b01      	ldr	r3, [sp, #4]
 8044dc0:	f3bf 8f5b 	dmb	ish
 8044dc4:	e853 1f00 	ldrex	r1, [r3]
 8044dc8:	e843 2000 	strex	r0, r2, [r3]
 8044dcc:	2800      	cmp	r0, #0
 8044dce:	d1f9      	bne.n	8044dc4 <z_log_strdup+0x28>
 8044dd0:	f3bf 8f5b 	dmb	ish
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 8044dd4:	223f      	movs	r2, #63	; 0x3f
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
 8044dd6:	9e01      	ldr	r6, [sp, #4]
 8044dd8:	4621      	mov	r1, r4
 8044dda:	1d33      	adds	r3, r6, #4
 8044ddc:	4618      	mov	r0, r3
 8044dde:	f016 f98d 	bl	805b0fc <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
 8044de2:	227e      	movs	r2, #126	; 0x7e
 8044de4:	4603      	mov	r3, r0
	dup->buf[sizeof(dup->buf) - 1] = '\0';
 8044de6:	f886 5044 	strb.w	r5, [r6, #68]	; 0x44
	dup->buf[sizeof(dup->buf) - 2] = '~';
 8044dea:	f886 2043 	strb.w	r2, [r6, #67]	; 0x43
	return dup->buf;
 8044dee:	461c      	mov	r4, r3
}
 8044df0:	4620      	mov	r0, r4
 8044df2:	b002      	add	sp, #8
 8044df4:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
 8044df6:	4b04      	ldr	r3, [pc, #16]	; (8044e08 <z_log_strdup+0x6c>)
 8044df8:	e7f9      	b.n	8044dee <z_log_strdup+0x52>
 8044dfa:	bf00      	nop
 8044dfc:	0805b67c 	.word	0x0805b67c
 8044e00:	08063618 	.word	0x08063618
 8044e04:	20037298 	.word	0x20037298
 8044e08:	0805facc 	.word	0x0805facc

08044e0c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
 8044e0c:	b150      	cbz	r0, 8044e24 <log_is_strdup+0x18>
 8044e0e:	4b06      	ldr	r3, [pc, #24]	; (8044e28 <log_is_strdup+0x1c>)
 8044e10:	4298      	cmp	r0, r3
 8044e12:	d306      	bcc.n	8044e22 <log_is_strdup+0x16>
 8044e14:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8044e18:	4298      	cmp	r0, r3
 8044e1a:	bf2c      	ite	cs
 8044e1c:	2000      	movcs	r0, #0
 8044e1e:	2001      	movcc	r0, #1
 8044e20:	4770      	bx	lr
 8044e22:	2000      	movs	r0, #0
}
 8044e24:	4770      	bx	lr
 8044e26:	bf00      	nop
 8044e28:	20044240 	.word	0x20044240

08044e2c <z_impl_log_process>:
	if (!backend_attached && !bypass) {
 8044e2c:	4b4c      	ldr	r3, [pc, #304]	; (8044f60 <z_impl_log_process+0x134>)
 8044e2e:	781b      	ldrb	r3, [r3, #0]
{
 8044e30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8044e34:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
 8044e36:	b903      	cbnz	r3, 8044e3a <z_impl_log_process+0xe>
 8044e38:	b1a0      	cbz	r0, 8044e64 <z_impl_log_process+0x38>
	msg = get_msg();
 8044e3a:	f7ff ff43 	bl	8044cc4 <get_msg>
	if (msg.msg) {
 8044e3e:	4604      	mov	r4, r0
 8044e40:	b118      	cbz	r0, 8044e4a <z_impl_log_process+0x1e>
		if (!bypass) {
 8044e42:	b19d      	cbz	r5, 8044e6c <z_impl_log_process+0x40>
			log_msg_put(msg.msg);
 8044e44:	4620      	mov	r0, r4
 8044e46:	f011 f9c1 	bl	80561cc <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
 8044e4a:	b92d      	cbnz	r5, 8044e58 <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
 8044e4c:	4b45      	ldr	r3, [pc, #276]	; (8044f64 <z_impl_log_process+0x138>)
	if (!bypass && z_log_dropped_pending()) {
 8044e4e:	681b      	ldr	r3, [r3, #0]
 8044e50:	2b00      	cmp	r3, #0
 8044e52:	dd01      	ble.n	8044e58 <z_impl_log_process+0x2c>
		dropped_notify();
 8044e54:	f7ff ff86 	bl	8044d64 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
 8044e58:	4843      	ldr	r0, [pc, #268]	; (8044f68 <z_impl_log_process+0x13c>)
 8044e5a:	f011 f8a9 	bl	8055fb0 <log_list_head_peek>
 8044e5e:	1e05      	subs	r5, r0, #0
 8044e60:	bf18      	it	ne
 8044e62:	2501      	movne	r5, #1
}
 8044e64:	4628      	mov	r0, r5
 8044e66:	b003      	add	sp, #12
 8044e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8044e6c:	4b3f      	ldr	r3, [pc, #252]	; (8044f6c <z_impl_log_process+0x140>)
 8044e6e:	f3bf 8f5b 	dmb	ish
 8044e72:	e853 2f00 	ldrex	r2, [r3]
 8044e76:	3a01      	subs	r2, #1
 8044e78:	e843 2100 	strex	r1, r2, [r3]
 8044e7c:	2900      	cmp	r1, #0
 8044e7e:	d1f8      	bne.n	8044e72 <z_impl_log_process+0x46>
		    !panic_mode) {
 8044e80:	4b3b      	ldr	r3, [pc, #236]	; (8044f70 <z_impl_log_process+0x144>)
 8044e82:	f3bf 8f5b 	dmb	ish
		if (!IS_ENABLED(CONFIG_LOG2) &&
 8044e86:	781b      	ldrb	r3, [r3, #0]
 8044e88:	b9bb      	cbnz	r3, 8044eba <z_impl_log_process+0x8e>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8044e8a:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_std(msg)) {
 8044e8c:	07da      	lsls	r2, r3, #31
 8044e8e:	d414      	bmi.n	8044eba <z_impl_log_process+0x8e>
	msg_str = log_msg_str_get(msg);
 8044e90:	f011 f9af 	bl	80561f2 <log_msg_str_get>
 8044e94:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
 8044e96:	4620      	mov	r0, r4
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
 8044e98:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8044f8c <z_impl_log_process+0x160>
 8044e9c:	f011 f974 	bl	8056188 <log_msg_nargs_get>
 8044ea0:	4601      	mov	r1, r0
 8044ea2:	4640      	mov	r0, r8
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
 8044ea4:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8044f90 <z_impl_log_process+0x164>
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
 8044ea8:	f7ff fe90 	bl	8044bcc <z_log_get_s_mask>
 8044eac:	4b31      	ldr	r3, [pc, #196]	; (8044f74 <z_impl_log_process+0x148>)
 8044eae:	4606      	mov	r6, r0
 8044eb0:	eba9 0303 	sub.w	r3, r9, r3
 8044eb4:	ea4f 0a93 	mov.w	sl, r3, lsr #2
	while (mask) {
 8044eb8:	b936      	cbnz	r6, 8044ec8 <z_impl_log_process+0x9c>
	return __log_backends_end - __log_backends_start;
 8044eba:	4e2f      	ldr	r6, [pc, #188]	; (8044f78 <z_impl_log_process+0x14c>)
 8044ebc:	2700      	movs	r7, #0
 8044ebe:	4b2f      	ldr	r3, [pc, #188]	; (8044f7c <z_impl_log_process+0x150>)
 8044ec0:	1b9b      	subs	r3, r3, r6
 8044ec2:	ea4f 1823 	mov.w	r8, r3, asr #4
 8044ec6:	e048      	b.n	8044f5a <z_impl_log_process+0x12e>
		idx = 31 - __builtin_clz(mask);
 8044ec8:	fab6 f786 	clz	r7, r6
		str = (const char *)log_msg_arg_get(msg, idx);
 8044ecc:	4620      	mov	r0, r4
		idx = 31 - __builtin_clz(mask);
 8044ece:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
 8044ed2:	4639      	mov	r1, r7
 8044ed4:	f011 f95b 	bl	805618e <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
 8044ed8:	4b29      	ldr	r3, [pc, #164]	; (8044f80 <z_impl_log_process+0x154>)
		str = (const char *)log_msg_arg_get(msg, idx);
 8044eda:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
 8044edc:	4298      	cmp	r0, r3
 8044ede:	d302      	bcc.n	8044ee6 <z_impl_log_process+0xba>
		if (!is_rodata(str) && !log_is_strdup(str) &&
 8044ee0:	4b28      	ldr	r3, [pc, #160]	; (8044f84 <z_impl_log_process+0x158>)
 8044ee2:	4298      	cmp	r0, r3
 8044ee4:	d31b      	bcc.n	8044f1e <z_impl_log_process+0xf2>
 8044ee6:	4610      	mov	r0, r2
 8044ee8:	f7ff ff90 	bl	8044e0c <log_is_strdup>
 8044eec:	b9b8      	cbnz	r0, 8044f1e <z_impl_log_process+0xf2>
 8044eee:	4b26      	ldr	r3, [pc, #152]	; (8044f88 <z_impl_log_process+0x15c>)
 8044ef0:	429a      	cmp	r2, r3
 8044ef2:	d014      	beq.n	8044f1e <z_impl_log_process+0xf2>
	return msg->hdr.ids.source_id;
 8044ef4:	8961      	ldrh	r1, [r4, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
 8044ef6:	f3c1 1189 	ubfx	r1, r1, #6, #10
 8044efa:	f000 f92b 	bl	8045154 <log_source_name_get>
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
 8044efe:	f8d9 3000 	ldr.w	r3, [r9]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
 8044f02:	4602      	mov	r2, r0
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
 8044f04:	075b      	lsls	r3, r3, #29
 8044f06:	d00a      	beq.n	8044f1e <z_impl_log_process+0xf2>
 8044f08:	ea4f 138a 	mov.w	r3, sl, lsl #6
 8044f0c:	4639      	mov	r1, r7
 8044f0e:	4658      	mov	r0, fp
 8044f10:	f043 0301 	orr.w	r3, r3, #1
 8044f14:	f8ad 3000 	strh.w	r3, [sp]
 8044f18:	4643      	mov	r3, r8
 8044f1a:	f011 f8a3 	bl	8056064 <log_3>
		mask &= ~BIT(idx);
 8044f1e:	2301      	movs	r3, #1
 8044f20:	fa03 f707 	lsl.w	r7, r3, r7
 8044f24:	ea26 0607 	bic.w	r6, r6, r7
 8044f28:	e7c6      	b.n	8044eb8 <z_impl_log_process+0x8c>
	return backend->cb->active;
 8044f2a:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
 8044f2c:	795b      	ldrb	r3, [r3, #5]
 8044f2e:	b193      	cbz	r3, 8044f56 <z_impl_log_process+0x12a>
	return msg->hdr.ids.level;
 8044f30:	7aa1      	ldrb	r1, [r4, #10]
	backend_level = log_filter_get(backend, domain_id,
 8044f32:	2301      	movs	r3, #1
	return msg->hdr.ids.source_id;
 8044f34:	8962      	ldrh	r2, [r4, #10]
 8044f36:	4630      	mov	r0, r6
	return msg->hdr.ids.level;
 8044f38:	f001 0907 	and.w	r9, r1, #7
 8044f3c:	f3c1 01c2 	ubfx	r1, r1, #3, #3
 8044f40:	f3c2 1289 	ubfx	r2, r2, #6, #10
 8044f44:	f000 f996 	bl	8045274 <log_filter_get>
			if (log_backend_is_active(backend) &&
 8044f48:	4581      	cmp	r9, r0
 8044f4a:	d804      	bhi.n	8044f56 <z_impl_log_process+0x12a>
	backend->api->put(backend, msg);
 8044f4c:	6833      	ldr	r3, [r6, #0]
 8044f4e:	4621      	mov	r1, r4
 8044f50:	4630      	mov	r0, r6
 8044f52:	685b      	ldr	r3, [r3, #4]
 8044f54:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
 8044f56:	3701      	adds	r7, #1
 8044f58:	3610      	adds	r6, #16
 8044f5a:	4547      	cmp	r7, r8
 8044f5c:	dbe5      	blt.n	8044f2a <z_impl_log_process+0xfe>
 8044f5e:	e771      	b.n	8044e44 <z_impl_log_process+0x18>
 8044f60:	20038f16 	.word	0x20038f16
 8044f64:	20037288 	.word	0x20037288
 8044f68:	20037290 	.word	0x20037290
 8044f6c:	20037284 	.word	0x20037284
 8044f70:	20038f17 	.word	0x20038f17
 8044f74:	200208c8 	.word	0x200208c8
 8044f78:	0805c134 	.word	0x0805c134
 8044f7c:	0805c154 	.word	0x0805c154
 8044f80:	0805b67c 	.word	0x0805b67c
 8044f84:	08063618 	.word	0x08063618
 8044f88:	0805facc 	.word	0x0805facc
 8044f8c:	20020910 	.word	0x20020910
 8044f90:	0805fae6 	.word	0x0805fae6

08044f94 <log_process_thread_func>:
{
 8044f94:	b510      	push	{r4, lr}
	log_init();
 8044f96:	f7ff fe69 	bl	8044c6c <log_init>
	return z_impl_z_current_get();
 8044f9a:	f00d f99d 	bl	80522d8 <z_impl_z_current_get>
	proc_tid = process_tid;
 8044f9e:	4b0c      	ldr	r3, [pc, #48]	; (8044fd0 <log_process_thread_func+0x3c>)
 8044fa0:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8044fa2:	b130      	cbz	r0, 8044fb2 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8044fa4:	4b0b      	ldr	r3, [pc, #44]	; (8044fd4 <log_process_thread_func+0x40>)
	    process_tid &&
 8044fa6:	681b      	ldr	r3, [r3, #0]
 8044fa8:	2b09      	cmp	r3, #9
 8044faa:	dd02      	ble.n	8044fb2 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
 8044fac:	480a      	ldr	r0, [pc, #40]	; (8044fd8 <log_process_thread_func+0x44>)
 8044fae:	f00c fd99 	bl	8051ae4 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
 8044fb2:	4c09      	ldr	r4, [pc, #36]	; (8044fd8 <log_process_thread_func+0x44>)
		union { uintptr_t x; bool val; } parm0 = { .val = bypass };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 8044fb4:	2000      	movs	r0, #0
 8044fb6:	f7ff ff39 	bl	8044e2c <z_impl_log_process>
		if (log_process(false) == false) {
 8044fba:	2800      	cmp	r0, #0
 8044fbc:	d1fa      	bne.n	8044fb4 <log_process_thread_func+0x20>
 8044fbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8044fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8044fc6:	4620      	mov	r0, r4
 8044fc8:	f00c fdb2 	bl	8051b30 <z_impl_k_sem_take>
 8044fcc:	e7f2      	b.n	8044fb4 <log_process_thread_func+0x20>
 8044fce:	bf00      	nop
 8044fd0:	200372b8 	.word	0x200372b8
 8044fd4:	20037284 	.word	0x20037284
 8044fd8:	20020a4c 	.word	0x20020a4c

08044fdc <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
 8044fdc:	4b28      	ldr	r3, [pc, #160]	; (8045080 <msg_finalize+0xa4>)
{
 8044fde:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8044fe0:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 8044fe2:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
 8044fe4:	8141      	strh	r1, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
 8044fe6:	4798      	blx	r3
 8044fe8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8044fea:	f04f 0310 	mov.w	r3, #16
 8044fee:	f3ef 8511 	mrs	r5, BASEPRI
 8044ff2:	f383 8812 	msr	BASEPRI_MAX, r3
 8044ff6:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 8044ffa:	4822      	ldr	r0, [pc, #136]	; (8045084 <msg_finalize+0xa8>)
 8044ffc:	4621      	mov	r1, r4
 8044ffe:	f010 ffcd 	bl	8055f9c <log_list_add_tail>
	__asm__ volatile(
 8045002:	f385 8811 	msr	BASEPRI, r5
 8045006:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 804500a:	4b1f      	ldr	r3, [pc, #124]	; (8045088 <msg_finalize+0xac>)
 804500c:	f3bf 8f5b 	dmb	ish
 8045010:	e853 2f00 	ldrex	r2, [r3]
 8045014:	1c51      	adds	r1, r2, #1
 8045016:	e843 1000 	strex	r0, r1, [r3]
 804501a:	2800      	cmp	r0, #0
 804501c:	d1f8      	bne.n	8045010 <msg_finalize+0x34>
	if (panic_mode) {
 804501e:	4b1b      	ldr	r3, [pc, #108]	; (804508c <msg_finalize+0xb0>)
 8045020:	f3bf 8f5b 	dmb	ish
 8045024:	781b      	ldrb	r3, [r3, #0]
 8045026:	b183      	cbz	r3, 804504a <msg_finalize+0x6e>
	__asm__ volatile(
 8045028:	f04f 0310 	mov.w	r3, #16
 804502c:	f3ef 8411 	mrs	r4, BASEPRI
 8045030:	f383 8812 	msr	BASEPRI_MAX, r3
 8045034:	f3bf 8f6f 	isb	sy
 8045038:	2000      	movs	r0, #0
 804503a:	f7ff fef7 	bl	8044e2c <z_impl_log_process>
	__asm__ volatile(
 804503e:	f384 8811 	msr	BASEPRI, r4
 8045042:	f3bf 8f6f 	isb	sy
}
 8045046:	b003      	add	sp, #12
 8045048:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && cnt == 0) {
 804504a:	4b11      	ldr	r3, [pc, #68]	; (8045090 <msg_finalize+0xb4>)
 804504c:	681b      	ldr	r3, [r3, #0]
 804504e:	2b00      	cmp	r3, #0
 8045050:	d0f9      	beq.n	8045046 <msg_finalize+0x6a>
 8045052:	b952      	cbnz	r2, 804506a <msg_finalize+0x8e>
	z_impl_k_timer_start(timer, duration, period);
 8045054:	2200      	movs	r2, #0
 8045056:	2300      	movs	r3, #0
 8045058:	480e      	ldr	r0, [pc, #56]	; (8045094 <msg_finalize+0xb8>)
 804505a:	e9cd 2300 	strd	r2, r3, [sp]
 804505e:	f242 7210 	movw	r2, #10000	; 0x2710
 8045062:	2300      	movs	r3, #0
 8045064:	f00d fb66 	bl	8052734 <z_impl_k_timer_start>
 8045068:	e7ed      	b.n	8045046 <msg_finalize+0x6a>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 804506a:	2a0a      	cmp	r2, #10
 804506c:	d1eb      	bne.n	8045046 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
 804506e:	4809      	ldr	r0, [pc, #36]	; (8045094 <msg_finalize+0xb8>)
 8045070:	f015 fba0 	bl	805a7b4 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8045074:	4808      	ldr	r0, [pc, #32]	; (8045098 <msg_finalize+0xbc>)
}
 8045076:	b003      	add	sp, #12
 8045078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 804507c:	f00c bd32 	b.w	8051ae4 <z_impl_k_sem_give>
 8045080:	200200b4 	.word	0x200200b4
 8045084:	20037290 	.word	0x20037290
 8045088:	20037284 	.word	0x20037284
 804508c:	20038f17 	.word	0x20038f17
 8045090:	200372b8 	.word	0x200372b8
 8045094:	20022348 	.word	0x20022348
 8045098:	20020a4c 	.word	0x20020a4c

0804509c <z_impl_log_panic>:
{
 804509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
 804509e:	4f0e      	ldr	r7, [pc, #56]	; (80450d8 <z_impl_log_panic+0x3c>)
 80450a0:	783d      	ldrb	r5, [r7, #0]
 80450a2:	b975      	cbnz	r5, 80450c2 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
 80450a4:	4c0d      	ldr	r4, [pc, #52]	; (80450dc <z_impl_log_panic+0x40>)
	log_init();
 80450a6:	f7ff fde1 	bl	8044c6c <log_init>
 80450aa:	4e0d      	ldr	r6, [pc, #52]	; (80450e0 <z_impl_log_panic+0x44>)
 80450ac:	1b36      	subs	r6, r6, r4
 80450ae:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 80450b0:	42b5      	cmp	r5, r6
 80450b2:	db07      	blt.n	80450c4 <z_impl_log_panic+0x28>
 80450b4:	2000      	movs	r0, #0
 80450b6:	f7ff feb9 	bl	8044e2c <z_impl_log_process>
		while (log_process(false) == true) {
 80450ba:	2800      	cmp	r0, #0
 80450bc:	d1fa      	bne.n	80450b4 <z_impl_log_panic+0x18>
	panic_mode = true;
 80450be:	2301      	movs	r3, #1
 80450c0:	703b      	strb	r3, [r7, #0]
}
 80450c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
 80450c4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 80450c6:	795b      	ldrb	r3, [r3, #5]
 80450c8:	b11b      	cbz	r3, 80450d2 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
 80450ca:	6823      	ldr	r3, [r4, #0]
 80450cc:	4620      	mov	r0, r4
 80450ce:	695b      	ldr	r3, [r3, #20]
 80450d0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 80450d2:	3501      	adds	r5, #1
 80450d4:	3410      	adds	r4, #16
 80450d6:	e7eb      	b.n	80450b0 <z_impl_log_panic+0x14>
 80450d8:	20038f17 	.word	0x20038f17
 80450dc:	0805c134 	.word	0x0805c134
 80450e0:	0805c154 	.word	0x0805c154

080450e4 <log_free>:
{
 80450e4:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
 80450e6:	3804      	subs	r0, #4
 80450e8:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 80450ea:	f3bf 8f5b 	dmb	ish
 80450ee:	e850 3f00 	ldrex	r3, [r0]
 80450f2:	1e5a      	subs	r2, r3, #1
 80450f4:	e840 2100 	strex	r1, r2, [r0]
 80450f8:	2900      	cmp	r1, #0
 80450fa:	d1f8      	bne.n	80450ee <log_free+0xa>
	if (atomic_dec(&dup->refcount) == 1) {
 80450fc:	2b01      	cmp	r3, #1
 80450fe:	f3bf 8f5b 	dmb	ish
 8045102:	d103      	bne.n	804510c <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
 8045104:	a901      	add	r1, sp, #4
 8045106:	4803      	ldr	r0, [pc, #12]	; (8045114 <log_free+0x30>)
 8045108:	f015 f8d4 	bl	805a2b4 <k_mem_slab_free>
}
 804510c:	b003      	add	sp, #12
 804510e:	f85d fb04 	ldr.w	pc, [sp], #4
 8045112:	bf00      	nop
 8045114:	20037298 	.word	0x20037298

08045118 <z_log_runtime_filters_init>:
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8045118:	480b      	ldr	r0, [pc, #44]	; (8045148 <z_log_runtime_filters_init+0x30>)
	 *
	 * Each log source's aggregated runtime level is set to match its
	 * compile-time level. When backends are attached later on in
	 * log_init(), they'll be initialized to the same value.
	 */
	for (int i = 0; i < log_sources_count(); i++) {
 804511a:	2100      	movs	r1, #0
 804511c:	4b0b      	ldr	r3, [pc, #44]	; (804514c <z_log_runtime_filters_init+0x34>)
 804511e:	1a1b      	subs	r3, r3, r0
	return __log_const_start[source_id].level;
 8045120:	3004      	adds	r0, #4
{
 8045122:	b530      	push	{r4, r5, lr}
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8045124:	08db      	lsrs	r3, r3, #3
 8045126:	4c0a      	ldr	r4, [pc, #40]	; (8045150 <z_log_runtime_filters_init+0x38>)
	for (int i = 0; i < log_sources_count(); i++) {
 8045128:	4299      	cmp	r1, r3
 804512a:	d100      	bne.n	804512e <z_log_runtime_filters_init+0x16>

		LOG_FILTER_SLOT_SET(filters,
				    LOG_FILTER_AGGR_SLOT_IDX,
				    level);
	}
}
 804512c:	bd30      	pop	{r4, r5, pc}
		LOG_FILTER_SLOT_SET(filters,
 804512e:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
	for (int i = 0; i < log_sources_count(); i++) {
 8045132:	3101      	adds	r1, #1
		LOG_FILTER_SLOT_SET(filters,
 8045134:	6825      	ldr	r5, [r4, #0]
 8045136:	f002 0207 	and.w	r2, r2, #7
 804513a:	f025 0507 	bic.w	r5, r5, #7
 804513e:	432a      	orrs	r2, r5
 8045140:	f844 2b04 	str.w	r2, [r4], #4
	for (int i = 0; i < log_sources_count(); i++) {
 8045144:	e7f0      	b.n	8045128 <z_log_runtime_filters_init+0x10>
 8045146:	bf00      	nop
 8045148:	0805c024 	.word	0x0805c024
 804514c:	0805c134 	.word	0x0805c134
 8045150:	200208c8 	.word	0x200208c8

08045154 <log_source_name_get>:
 8045154:	4a04      	ldr	r2, [pc, #16]	; (8045168 <log_source_name_get+0x14>)
 8045156:	4b05      	ldr	r3, [pc, #20]	; (804516c <log_source_name_get+0x18>)
 8045158:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 804515a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
 804515e:	bf34      	ite	cc
 8045160:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
 8045164:	2000      	movcs	r0, #0
}
 8045166:	4770      	bx	lr
 8045168:	0805c024 	.word	0x0805c024
 804516c:	0805c134 	.word	0x0805c134

08045170 <z_impl_log_filter_set>:
}

uint32_t z_impl_log_filter_set(struct log_backend const *const backend,
			       uint32_t domain_id, int16_t source_id,
			       uint32_t level)
{
 8045170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8045174:	468a      	mov	sl, r1
 8045176:	4616      	mov	r6, r2
 8045178:	4698      	mov	r8, r3
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING)) {
		uint32_t new_aggr_filter;

		uint32_t *filters = log_dynamic_filters_get(source_id);

		if (backend == NULL) {
 804517a:	b9c8      	cbnz	r0, 80451b0 <z_impl_log_filter_set+0x40>
	return __log_backends_end - __log_backends_start;
 804517c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8045214 <z_impl_log_filter_set+0xa4>
			struct log_backend const *iter_backend;
			uint32_t max = 0U;
			uint32_t current;

			for (int i = 0; i < log_backend_count_get(); i++) {
 8045180:	4604      	mov	r4, r0
 8045182:	4f21      	ldr	r7, [pc, #132]	; (8045208 <z_impl_log_filter_set+0x98>)
			uint32_t max = 0U;
 8045184:	4605      	mov	r5, r0
 8045186:	eba7 0709 	sub.w	r7, r7, r9
 804518a:	113f      	asrs	r7, r7, #4
			for (int i = 0; i < log_backend_count_get(); i++) {
 804518c:	42bc      	cmp	r4, r7
 804518e:	db02      	blt.n	8045196 <z_impl_log_filter_set+0x26>
					    new_aggr_filter);
		}
	}

	return level;
}
 8045190:	4628      	mov	r0, r5
 8045192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		union { uintptr_t x; uint32_t val; } parm3 = { .val = level };
		return (uint32_t) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
 8045196:	eb09 1004 	add.w	r0, r9, r4, lsl #4
 804519a:	4643      	mov	r3, r8
 804519c:	4632      	mov	r2, r6
 804519e:	4651      	mov	r1, sl
 80451a0:	f7ff ffe6 	bl	8045170 <z_impl_log_filter_set>
				max = MAX(current, max);
 80451a4:	4285      	cmp	r5, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
 80451a6:	f104 0401 	add.w	r4, r4, #1
				max = MAX(current, max);
 80451aa:	bf38      	it	cc
 80451ac:	4605      	movcc	r5, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
 80451ae:	e7ed      	b.n	804518c <z_impl_log_filter_set+0x1c>
	return __log_const_start[source_id].level;
 80451b0:	4b16      	ldr	r3, [pc, #88]	; (804520c <z_impl_log_filter_set+0x9c>)
			LOG_FILTER_SLOT_SET(filters,
 80451b2:	4c17      	ldr	r4, [pc, #92]	; (8045210 <z_impl_log_filter_set+0xa0>)
 80451b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3

		return LOG_FILTER_SLOT_GET(filters,
					   log_backend_id_get(backend));
	}

	return log_compiled_level_get(source_id);
 80451b8:	791d      	ldrb	r5, [r3, #4]
	return backend->cb->id;
 80451ba:	6843      	ldr	r3, [r0, #4]
			level = MIN(level, max);
 80451bc:	4545      	cmp	r5, r8
			LOG_FILTER_SLOT_SET(filters,
 80451be:	791a      	ldrb	r2, [r3, #4]
 80451c0:	f04f 0307 	mov.w	r3, #7
			level = MIN(level, max);
 80451c4:	bf28      	it	cs
 80451c6:	4645      	movcs	r5, r8
			LOG_FILTER_SLOT_SET(filters,
 80451c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80451cc:	fa03 f102 	lsl.w	r1, r3, r2
 80451d0:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 80451d4:	ea23 0301 	bic.w	r3, r3, r1
 80451d8:	f005 0107 	and.w	r1, r5, #7
 80451dc:	fa01 f202 	lsl.w	r2, r1, r2
	uint32_t max_filter = LOG_LEVEL_NONE;
 80451e0:	2100      	movs	r1, #0
			LOG_FILTER_SLOT_SET(filters,
 80451e2:	4313      	orrs	r3, r2
 80451e4:	2203      	movs	r2, #3
		uint32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
 80451e6:	fa23 f002 	lsr.w	r0, r3, r2
 80451ea:	3203      	adds	r2, #3
 80451ec:	f000 0007 	and.w	r0, r0, #7
 80451f0:	4281      	cmp	r1, r0
 80451f2:	bf38      	it	cc
 80451f4:	4601      	movcc	r1, r0
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
 80451f6:	2a1e      	cmp	r2, #30
 80451f8:	d1f5      	bne.n	80451e6 <z_impl_log_filter_set+0x76>
			LOG_FILTER_SLOT_SET(filters,
 80451fa:	f023 0307 	bic.w	r3, r3, #7
 80451fe:	430b      	orrs	r3, r1
 8045200:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
	return level;
 8045204:	e7c4      	b.n	8045190 <z_impl_log_filter_set+0x20>
 8045206:	bf00      	nop
 8045208:	0805c154 	.word	0x0805c154
 804520c:	0805c024 	.word	0x0805c024
 8045210:	200208c8 	.word	0x200208c8
 8045214:	0805c134 	.word	0x0805c134

08045218 <backend_filter_set>:
{
 8045218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 804521a:	4c09      	ldr	r4, [pc, #36]	; (8045240 <backend_filter_set+0x28>)
 804521c:	4606      	mov	r6, r0
 804521e:	4b09      	ldr	r3, [pc, #36]	; (8045244 <backend_filter_set+0x2c>)
 8045220:	460f      	mov	r7, r1
		for (int i = 0; i < log_sources_count(); i++) {
 8045222:	2500      	movs	r5, #0
 8045224:	1ae4      	subs	r4, r4, r3
 8045226:	08e4      	lsrs	r4, r4, #3
 8045228:	42a5      	cmp	r5, r4
 804522a:	d100      	bne.n	804522e <backend_filter_set+0x16>
}
 804522c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804522e:	2100      	movs	r1, #0
 8045230:	b22a      	sxth	r2, r5
 8045232:	463b      	mov	r3, r7
 8045234:	4630      	mov	r0, r6
		for (int i = 0; i < log_sources_count(); i++) {
 8045236:	3501      	adds	r5, #1
 8045238:	f7ff ff9a 	bl	8045170 <z_impl_log_filter_set>
 804523c:	e7f4      	b.n	8045228 <backend_filter_set+0x10>
 804523e:	bf00      	nop
 8045240:	0805c134 	.word	0x0805c134
 8045244:	0805c024 	.word	0x0805c024

08045248 <log_backend_enable>:
	id += backend - log_backend_get(0);
 8045248:	4b09      	ldr	r3, [pc, #36]	; (8045270 <log_backend_enable+0x28>)
 804524a:	1ac3      	subs	r3, r0, r3
 804524c:	111b      	asrs	r3, r3, #4
{
 804524e:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
 8045250:	3301      	adds	r3, #1
	backend->cb->id = id;
 8045252:	6846      	ldr	r6, [r0, #4]
{
 8045254:	4604      	mov	r4, r0
 8045256:	460d      	mov	r5, r1
	log_backend_id_set(backend, id);
 8045258:	7133      	strb	r3, [r6, #4]
	backend_filter_set(backend, level);
 804525a:	4611      	mov	r1, r2
 804525c:	f7ff ffdc 	bl	8045218 <backend_filter_set>
	backend->cb->ctx = ctx;
 8045260:	6863      	ldr	r3, [r4, #4]
	backend->cb->active = true;
 8045262:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
 8045264:	601d      	str	r5, [r3, #0]
	backend->cb->active = true;
 8045266:	715a      	strb	r2, [r3, #5]
}
 8045268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
 804526c:	f7ff bd3e 	b.w	8044cec <z_log_notify_backend_enabled>
 8045270:	0805c134 	.word	0x0805c134

08045274 <log_filter_get>:
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
 8045274:	b163      	cbz	r3, 8045290 <log_filter_get+0x1c>
		if (source_id < 0) {
 8045276:	2a00      	cmp	r2, #0
 8045278:	db0f      	blt.n	804529a <log_filter_get+0x26>
	return backend->cb->id;
 804527a:	6843      	ldr	r3, [r0, #4]
		return LOG_FILTER_SLOT_GET(filters,
 804527c:	4908      	ldr	r1, [pc, #32]	; (80452a0 <log_filter_get+0x2c>)
 804527e:	7918      	ldrb	r0, [r3, #4]
 8045280:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8045284:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8045288:	40d8      	lsrs	r0, r3
 804528a:	f000 0007 	and.w	r0, r0, #7
 804528e:	4770      	bx	lr
	return __log_const_start[source_id].level;
 8045290:	4b04      	ldr	r3, [pc, #16]	; (80452a4 <log_filter_get+0x30>)
 8045292:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
	return log_compiled_level_get(source_id);
 8045296:	7910      	ldrb	r0, [r2, #4]
 8045298:	4770      	bx	lr
			return LOG_LEVEL_DBG;
 804529a:	2004      	movs	r0, #4
}
 804529c:	4770      	bx	lr
 804529e:	bf00      	nop
 80452a0:	200208c8 	.word	0x200208c8
 80452a4:	0805c024 	.word	0x0805c024

080452a8 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
 80452a8:	2320      	movs	r3, #32
 80452aa:	4902      	ldr	r1, [pc, #8]	; (80452b4 <log_msg_pool_init+0xc>)
 80452ac:	4802      	ldr	r0, [pc, #8]	; (80452b8 <log_msg_pool_init+0x10>)
 80452ae:	461a      	mov	r2, r3
 80452b0:	f014 bfe4 	b.w	805a27c <k_mem_slab_init>
 80452b4:	200446c0 	.word	0x200446c0
 80452b8:	200372bc 	.word	0x200372bc

080452bc <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
 80452bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
 80452be:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped(true);
			err = k_mem_slab_alloc(&log_msg_pool,
 80452c0:	4d0a      	ldr	r5, [pc, #40]	; (80452ec <log_msg_no_space_handle+0x30>)
	union log_msg_chunk *msg = NULL;
 80452c2:	9301      	str	r3, [sp, #4]
	return z_impl_log_process(bypass);
 80452c4:	2001      	movs	r0, #1
 80452c6:	f7ff fdb1 	bl	8044e2c <z_impl_log_process>
 80452ca:	4604      	mov	r4, r0
			z_log_dropped(true);
 80452cc:	2001      	movs	r0, #1
 80452ce:	f7ff fd1b 	bl	8044d08 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
 80452d2:	2200      	movs	r2, #0
 80452d4:	2300      	movs	r3, #0
 80452d6:	a901      	add	r1, sp, #4
 80452d8:	4628      	mov	r0, r5
 80452da:	f00c f905 	bl	80514e8 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
 80452de:	b108      	cbz	r0, 80452e4 <log_msg_no_space_handle+0x28>
 80452e0:	2c00      	cmp	r4, #0
 80452e2:	d1ef      	bne.n	80452c4 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped(false);
	}
	return msg;

}
 80452e4:	9801      	ldr	r0, [sp, #4]
 80452e6:	b003      	add	sp, #12
 80452e8:	bd30      	pop	{r4, r5, pc}
 80452ea:	bf00      	nop
 80452ec:	200372bc 	.word	0x200372bc

080452f0 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
 80452f0:	2300      	movs	r3, #0
{
 80452f2:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 80452f4:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
 80452f6:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 80452f8:	a901      	add	r1, sp, #4
 80452fa:	2300      	movs	r3, #0
 80452fc:	4805      	ldr	r0, [pc, #20]	; (8045314 <log_msg_chunk_alloc+0x24>)
 80452fe:	f00c f8f3 	bl	80514e8 <k_mem_slab_alloc>
	if (err != 0) {
 8045302:	b110      	cbz	r0, 804530a <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
 8045304:	f7ff ffda 	bl	80452bc <log_msg_no_space_handle>
 8045308:	9001      	str	r0, [sp, #4]
}
 804530a:	9801      	ldr	r0, [sp, #4]
 804530c:	b003      	add	sp, #12
 804530e:	f85d fb04 	ldr.w	pc, [sp], #4
 8045312:	bf00      	nop
 8045314:	200372bc 	.word	0x200372bc

08045318 <msg_free>:
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8045318:	7a03      	ldrb	r3, [r0, #8]
{
 804531a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (log_msg_is_std(msg) && nargs) {
 804531c:	07dc      	lsls	r4, r3, #31
{
 804531e:	b085      	sub	sp, #20
 8045320:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
 8045322:	d41e      	bmi.n	8045362 <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
 8045324:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
 8045326:	092d      	lsrs	r5, r5, #4
 8045328:	d01b      	beq.n	8045362 <msg_free+0x4a>
		uint32_t smask = 0U;
 804532a:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
 804532c:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
 804532e:	4631      	mov	r1, r6
 8045330:	9801      	ldr	r0, [sp, #4]
 8045332:	f010 ff2c 	bl	805618e <log_msg_arg_get>
 8045336:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
 8045338:	f7ff fd68 	bl	8044e0c <log_is_strdup>
 804533c:	b170      	cbz	r0, 804535c <msg_free+0x44>
				if (smask == 0U) {
 804533e:	b934      	cbnz	r4, 804534e <msg_free+0x36>
					smask = z_log_get_s_mask(
 8045340:	9b01      	ldr	r3, [sp, #4]
 8045342:	4629      	mov	r1, r5
 8045344:	6918      	ldr	r0, [r3, #16]
 8045346:	f7ff fc41 	bl	8044bcc <z_log_get_s_mask>
					if (smask == 0U) {
 804534a:	4604      	mov	r4, r0
 804534c:	b148      	cbz	r0, 8045362 <msg_free+0x4a>
				if (smask & BIT(i)) {
 804534e:	fa24 f306 	lsr.w	r3, r4, r6
 8045352:	07d9      	lsls	r1, r3, #31
 8045354:	d502      	bpl.n	804535c <msg_free+0x44>
					log_free(buf);
 8045356:	4638      	mov	r0, r7
 8045358:	f7ff fec4 	bl	80450e4 <log_free>
		for (i = 0U; i < nargs; i++) {
 804535c:	3601      	adds	r6, #1
 804535e:	42ae      	cmp	r6, r5
 8045360:	d3e5      	bcc.n	804532e <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
 8045362:	9b01      	ldr	r3, [sp, #4]
 8045364:	7a1a      	ldrb	r2, [r3, #8]
 8045366:	0792      	lsls	r2, r2, #30
 8045368:	d504      	bpl.n	8045374 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
 804536a:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 804536c:	4c08      	ldr	r4, [pc, #32]	; (8045390 <msg_free+0x78>)
 804536e:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
 8045370:	9b03      	ldr	r3, [sp, #12]
 8045372:	b92b      	cbnz	r3, 8045380 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
 8045374:	a901      	add	r1, sp, #4
 8045376:	4806      	ldr	r0, [pc, #24]	; (8045390 <msg_free+0x78>)
 8045378:	f014 ff9c 	bl	805a2b4 <k_mem_slab_free>
}
 804537c:	b005      	add	sp, #20
 804537e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
 8045380:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 8045382:	a903      	add	r1, sp, #12
 8045384:	4620      	mov	r0, r4
 8045386:	f014 ff95 	bl	805a2b4 <k_mem_slab_free>
		cont = next;
 804538a:	9503      	str	r5, [sp, #12]
 804538c:	e7f0      	b.n	8045370 <msg_free+0x58>
 804538e:	bf00      	nop
 8045390:	200372bc 	.word	0x200372bc

08045394 <log_msg_mem_get_free>:
	return slab->num_blocks - slab->num_used;
 8045394:	4b02      	ldr	r3, [pc, #8]	; (80453a0 <log_msg_mem_get_free+0xc>)
 8045396:	68d8      	ldr	r0, [r3, #12]
 8045398:	69db      	ldr	r3, [r3, #28]
}

uint32_t log_msg_mem_get_free(void)
{
	return k_mem_slab_num_free_get(&log_msg_pool);
}
 804539a:	1ac0      	subs	r0, r0, r3
 804539c:	4770      	bx	lr
 804539e:	bf00      	nop
 80453a0:	200372bc 	.word	0x200372bc

080453a4 <log_msg_mem_get_used>:

uint32_t log_msg_mem_get_used(void)
{
	return k_mem_slab_num_used_get(&log_msg_pool);
}
 80453a4:	4b01      	ldr	r3, [pc, #4]	; (80453ac <log_msg_mem_get_used+0x8>)
 80453a6:	69d8      	ldr	r0, [r3, #28]
 80453a8:	4770      	bx	lr
 80453aa:	bf00      	nop
 80453ac:	200372bc 	.word	0x200372bc

080453b0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 80453b0:	b40e      	push	{r1, r2, r3}
 80453b2:	b503      	push	{r0, r1, lr}
 80453b4:	ab03      	add	r3, sp, #12
 80453b6:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
 80453b8:	4805      	ldr	r0, [pc, #20]	; (80453d0 <print_formatted+0x20>)
{
 80453ba:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
 80453be:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 80453c0:	f7fb fa52 	bl	8040868 <cbvprintf>
	va_end(args);

	return length;
}
 80453c4:	b002      	add	sp, #8
 80453c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80453ca:	b003      	add	sp, #12
 80453cc:	4770      	bx	lr
 80453ce:	bf00      	nop
 80453d0:	080565a9 	.word	0x080565a9

080453d4 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 80453d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80453d8:	461d      	mov	r5, r3
 80453da:	9b08      	ldr	r3, [sp, #32]
 80453dc:	4617      	mov	r7, r2
 80453de:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80453e0:	06da      	lsls	r2, r3, #27
{
 80453e2:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80453e4:	d405      	bmi.n	80453f2 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 80453e6:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
 80453e8:	bf4c      	ite	mi
 80453ea:	492b      	ldrmi	r1, [pc, #172]	; (8045498 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
 80453ec:	492b      	ldrpl	r1, [pc, #172]	; (804549c <hexdump_line_print+0xc8>)
 80453ee:	f7ff ffdf 	bl	80453b0 <print_formatted>
{
 80453f2:	f04f 0800 	mov.w	r8, #0
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
 80453f6:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80454a4 <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
 80453fa:	45a8      	cmp	r8, r5
 80453fc:	db2d      	blt.n	804545a <hexdump_line_print+0x86>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80453fe:	2500      	movs	r5, #0
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
 8045400:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80454a8 <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
 8045404:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80454ac <hexdump_line_print+0xd8>
			print_formatted(output, " ");
 8045408:	f8df a098 	ldr.w	sl, [pc, #152]	; 80454a4 <hexdump_line_print+0xd0>
		if (i < length) {
 804540c:	42bd      	cmp	r5, r7
 804540e:	d232      	bcs.n	8045476 <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
 8045410:	5d72      	ldrb	r2, [r6, r5]
 8045412:	4649      	mov	r1, r9
 8045414:	4620      	mov	r0, r4
 8045416:	f7ff ffcb 	bl	80453b0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 804541a:	3501      	adds	r5, #1
 804541c:	2d10      	cmp	r5, #16
 804541e:	d123      	bne.n	8045468 <hexdump_line_print+0x94>
		}
	}

	print_formatted(output, "|");

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8045420:	2500      	movs	r5, #0
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
 8045422:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80454a4 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
 8045426:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80454b0 <hexdump_line_print+0xdc>
	print_formatted(output, "|");
 804542a:	4620      	mov	r0, r4
			print_formatted(output, "%c",
 804542c:	f8df a084 	ldr.w	sl, [pc, #132]	; 80454b4 <hexdump_line_print+0xe0>
	print_formatted(output, "|");
 8045430:	491b      	ldr	r1, [pc, #108]	; (80454a0 <hexdump_line_print+0xcc>)
 8045432:	f7ff ffbd 	bl	80453b0 <print_formatted>
		if (i < length) {
 8045436:	42af      	cmp	r7, r5
 8045438:	d929      	bls.n	804548e <hexdump_line_print+0xba>
			char c = (char)data[i];
 804543a:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
 804543c:	4651      	mov	r1, sl
 804543e:	4620      	mov	r0, r4
 8045440:	f812 3009 	ldrb.w	r3, [r2, r9]
 8045444:	f013 0f97 	tst.w	r3, #151	; 0x97
 8045448:	bf08      	it	eq
 804544a:	222e      	moveq	r2, #46	; 0x2e
 804544c:	f7ff ffb0 	bl	80453b0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8045450:	3501      	adds	r5, #1
 8045452:	2d10      	cmp	r5, #16
 8045454:	d114      	bne.n	8045480 <hexdump_line_print+0xac>
		}
	}
}
 8045456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
 804545a:	4649      	mov	r1, r9
 804545c:	4620      	mov	r0, r4
	for (int i = 0; i < prefix_offset; i++) {
 804545e:	f108 0801 	add.w	r8, r8, #1
		print_formatted(output, " ");
 8045462:	f7ff ffa5 	bl	80453b0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 8045466:	e7c8      	b.n	80453fa <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
 8045468:	076a      	lsls	r2, r5, #29
 804546a:	d1cf      	bne.n	804540c <hexdump_line_print+0x38>
			print_formatted(output, " ");
 804546c:	4651      	mov	r1, sl
 804546e:	4620      	mov	r0, r4
 8045470:	f7ff ff9e 	bl	80453b0 <print_formatted>
 8045474:	e7ca      	b.n	804540c <hexdump_line_print+0x38>
			print_formatted(output, "   ");
 8045476:	4641      	mov	r1, r8
 8045478:	4620      	mov	r0, r4
 804547a:	f7ff ff99 	bl	80453b0 <print_formatted>
 804547e:	e7cc      	b.n	804541a <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
 8045480:	076b      	lsls	r3, r5, #29
 8045482:	d1d8      	bne.n	8045436 <hexdump_line_print+0x62>
			print_formatted(output, " ");
 8045484:	4641      	mov	r1, r8
 8045486:	4620      	mov	r0, r4
 8045488:	f7ff ff92 	bl	80453b0 <print_formatted>
 804548c:	e7d3      	b.n	8045436 <hexdump_line_print+0x62>
			print_formatted(output, " ");
 804548e:	4641      	mov	r1, r8
 8045490:	4620      	mov	r0, r4
 8045492:	f7ff ff8d 	bl	80453b0 <print_formatted>
 8045496:	e7db      	b.n	8045450 <hexdump_line_print+0x7c>
 8045498:	08060044 	.word	0x08060044
 804549c:	0805fc41 	.word	0x0805fc41
 80454a0:	080627de 	.word	0x080627de
 80454a4:	08062fdc 	.word	0x08062fdc
 80454a8:	08062fda 	.word	0x08062fda
 80454ac:	0805fb26 	.word	0x0805fb26
 80454b0:	08063365 	.word	0x08063365
 80454b4:	08060696 	.word	0x08060696

080454b8 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
 80454b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
 80454bc:	f011 0602 	ands.w	r6, r1, #2
{
 80454c0:	b087      	sub	sp, #28
 80454c2:	4607      	mov	r7, r0
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 80454c4:	f001 0a01 	and.w	sl, r1, #1
{
 80454c8:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 80454cc:	f001 0508 	and.w	r5, r1, #8
{
 80454d0:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
 80454d4:	9205      	str	r2, [sp, #20]
	if (stamp) {
 80454d6:	d007      	beq.n	80454e8 <prefix_print+0x30>
	if (!format) {
 80454d8:	f011 0f44 	tst.w	r1, #68	; 0x44
 80454dc:	d139      	bne.n	8045552 <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
 80454de:	461a      	mov	r2, r3
 80454e0:	4933      	ldr	r1, [pc, #204]	; (80455b0 <prefix_print+0xf8>)
 80454e2:	f7ff ff65 	bl	80453b0 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
 80454e6:	4606      	mov	r6, r0
	if (color) {
 80454e8:	f1ba 0f00 	cmp.w	sl, #0
 80454ec:	d00a      	beq.n	8045504 <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
 80454ee:	4b31      	ldr	r3, [pc, #196]	; (80455b4 <prefix_print+0xfc>)
		print_formatted(output, "%s", log_color);
 80454f0:	4638      	mov	r0, r7
 80454f2:	4931      	ldr	r1, [pc, #196]	; (80455b8 <prefix_print+0x100>)
		const char *log_color = start && (colors[level] != NULL) ?
 80454f4:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
 80454f8:	4b30      	ldr	r3, [pc, #192]	; (80455bc <prefix_print+0x104>)
 80454fa:	2a00      	cmp	r2, #0
 80454fc:	bf08      	it	eq
 80454fe:	461a      	moveq	r2, r3
 8045500:	f7ff ff56 	bl	80453b0 <print_formatted>
	if (level_on) {
 8045504:	b13d      	cbz	r5, 8045516 <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
 8045506:	4b2e      	ldr	r3, [pc, #184]	; (80455c0 <prefix_print+0x108>)
 8045508:	4638      	mov	r0, r7
 804550a:	492e      	ldr	r1, [pc, #184]	; (80455c4 <prefix_print+0x10c>)
 804550c:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 8045510:	f7ff ff4e 	bl	80453b0 <print_formatted>
 8045514:	4605      	mov	r5, r0
	if (source_id >= 0) {
 8045516:	f1b9 0f00 	cmp.w	r9, #0
 804551a:	db16      	blt.n	804554a <prefix_print+0x92>
		total += print_formatted(output,
 804551c:	9b05      	ldr	r3, [sp, #20]
 804551e:	2b00      	cmp	r3, #0
 8045520:	d043      	beq.n	80455aa <prefix_print+0xf2>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 8045522:	2301      	movs	r3, #1
		total += print_formatted(output,
 8045524:	4c28      	ldr	r4, [pc, #160]	; (80455c8 <prefix_print+0x110>)
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 8045526:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
 804552a:	4b28      	ldr	r3, [pc, #160]	; (80455cc <prefix_print+0x114>)
 804552c:	f018 0f10 	tst.w	r8, #16
 8045530:	bf18      	it	ne
 8045532:	461c      	movne	r4, r3
 8045534:	4649      	mov	r1, r9
 8045536:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 804553a:	f7ff fe0b 	bl	8045154 <log_source_name_get>
 804553e:	4621      	mov	r1, r4
 8045540:	4602      	mov	r2, r0
 8045542:	4638      	mov	r0, r7
 8045544:	f7ff ff34 	bl	80453b0 <print_formatted>
 8045548:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
 804554a:	19a8      	adds	r0, r5, r6
 804554c:	b007      	add	sp, #28
 804554e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
 8045552:	4a1f      	ldr	r2, [pc, #124]	; (80455d0 <prefix_print+0x118>)
 8045554:	6811      	ldr	r1, [r2, #0]
 8045556:	b331      	cbz	r1, 80455a6 <prefix_print+0xee>
		timestamp /= timestamp_div;
 8045558:	4a1e      	ldr	r2, [pc, #120]	; (80455d4 <prefix_print+0x11c>)
 804555a:	f44f 6661 	mov.w	r6, #3600	; 0xe10
		ms = (remainder * 1000U) / freq;
 804555e:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		mins = seconds / 60U;
 8045562:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
		timestamp /= timestamp_div;
 8045566:	6814      	ldr	r4, [r2, #0]
 8045568:	fbb3 f3f4 	udiv	r3, r3, r4
		total_seconds = timestamp / freq;
 804556c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
 8045570:	fbb4 f2f6 	udiv	r2, r4, r6
 8045574:	fb06 4612 	mls	r6, r6, r2, r4
		remainder = timestamp % freq;
 8045578:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
 804557c:	fb0b f404 	mul.w	r4, fp, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8045580:	fbb4 fef1 	udiv	lr, r4, r1
 8045584:	fb01 441e 	mls	r4, r1, lr, r4
		mins = seconds / 60U;
 8045588:	fbb6 f3fc 	udiv	r3, r6, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 804558c:	fb0b f404 	mul.w	r4, fp, r4
			length = print_formatted(output,
 8045590:	fb0c 6613 	mls	r6, ip, r3, r6
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8045594:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
 8045598:	9600      	str	r6, [sp, #0]
 804559a:	e9cd e101 	strd	lr, r1, [sp, #4]
 804559e:	490e      	ldr	r1, [pc, #56]	; (80455d8 <prefix_print+0x120>)
 80455a0:	f7ff ff06 	bl	80453b0 <print_formatted>
 80455a4:	e79f      	b.n	80454e6 <prefix_print+0x2e>
		length = 0;
 80455a6:	4608      	mov	r0, r1
 80455a8:	e79d      	b.n	80454e6 <prefix_print+0x2e>
		total += print_formatted(output,
 80455aa:	4c07      	ldr	r4, [pc, #28]	; (80455c8 <prefix_print+0x110>)
 80455ac:	e7c2      	b.n	8045534 <prefix_print+0x7c>
 80455ae:	bf00      	nop
 80455b0:	0805fb3a 	.word	0x0805fb3a
 80455b4:	0805cc88 	.word	0x0805cc88
 80455b8:	0806018b 	.word	0x0806018b
 80455bc:	0805fb2c 	.word	0x0805fb2c
 80455c0:	0805cc9c 	.word	0x0805cc9c
 80455c4:	0805fb5f 	.word	0x0805fb5f
 80455c8:	0805fb31 	.word	0x0805fb31
 80455cc:	0805fb36 	.word	0x0805fb36
 80455d0:	200372dc 	.word	0x200372dc
 80455d4:	200372e0 	.word	0x200372e0
 80455d8:	0805fb43 	.word	0x0805fb43

080455dc <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
 80455dc:	b538      	push	{r3, r4, r5, lr}
 80455de:	460c      	mov	r4, r1
 80455e0:	4605      	mov	r5, r0
	if (color) {
 80455e2:	07e1      	lsls	r1, r4, #31
 80455e4:	d503      	bpl.n	80455ee <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
 80455e6:	4a08      	ldr	r2, [pc, #32]	; (8045608 <postfix_print+0x2c>)
 80455e8:	4908      	ldr	r1, [pc, #32]	; (804560c <postfix_print+0x30>)
 80455ea:	f7ff fee1 	bl	80453b0 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80455ee:	06e2      	lsls	r2, r4, #27
 80455f0:	d408      	bmi.n	8045604 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 80455f2:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
 80455f4:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
 80455f6:	bf4c      	ite	mi
 80455f8:	4905      	ldrmi	r1, [pc, #20]	; (8045610 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
 80455fa:	4906      	ldrpl	r1, [pc, #24]	; (8045614 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
 80455fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
 8045600:	f7ff bed6 	b.w	80453b0 <print_formatted>
}
 8045604:	bd38      	pop	{r3, r4, r5, pc}
 8045606:	bf00      	nop
 8045608:	0805fb2c 	.word	0x0805fb2c
 804560c:	0806018b 	.word	0x0806018b
 8045610:	08060044 	.word	0x08060044
 8045614:	0805fc41 	.word	0x0805fc41

08045618 <log_output_msg_process>:
	return msg->hdr.ids.level;
 8045618:	7a8b      	ldrb	r3, [r1, #10]

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
 804561a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
 804561e:	f013 0807 	ands.w	r8, r3, #7
{
 8045622:	b08a      	sub	sp, #40	; 0x28
 8045624:	4605      	mov	r5, r0
 8045626:	460e      	mov	r6, r1
 8045628:	4617      	mov	r7, r2
			0 : prefix_print(output, flags, std_msg, timestamp,
 804562a:	d022      	beq.n	8045672 <log_output_msg_process+0x5a>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 804562c:	7a0a      	ldrb	r2, [r1, #8]
 804562e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	return msg->hdr.ids.source_id;
 8045632:	8949      	ldrh	r1, [r1, #10]
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8045634:	43d2      	mvns	r2, r2
 8045636:	f3c1 1189 	ubfx	r1, r1, #6, #10
 804563a:	f002 0201 	and.w	r2, r2, #1
 804563e:	9102      	str	r1, [sp, #8]
 8045640:	4639      	mov	r1, r7
 8045642:	e9cd 8300 	strd	r8, r3, [sp]
 8045646:	68f3      	ldr	r3, [r6, #12]
 8045648:	f7ff ff36 	bl	80454b8 <prefix_print>
 804564c:	4681      	mov	r9, r0
 804564e:	7a34      	ldrb	r4, [r6, #8]
 8045650:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
 8045652:	f014 0401 	ands.w	r4, r4, #1
 8045656:	d00e      	beq.n	8045676 <log_output_msg_process+0x5e>
		std_print(msg, output);
 8045658:	4629      	mov	r1, r5
 804565a:	4630      	mov	r0, r6
 804565c:	f010 fe3a 	bl	80562d4 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
 8045660:	f1b8 0f00 	cmp.w	r8, #0
 8045664:	d02b      	beq.n	80456be <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
 8045666:	4642      	mov	r2, r8
 8045668:	4639      	mov	r1, r7
 804566a:	4628      	mov	r0, r5
 804566c:	f7ff ffb6 	bl	80455dc <postfix_print>
 8045670:	e025      	b.n	80456be <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
 8045672:	46c1      	mov	r9, r8
 8045674:	e7eb      	b.n	804564e <log_output_msg_process+0x36>
	} else if (raw_string) {
 8045676:	f1b8 0f00 	cmp.w	r8, #0
 804567a:	d126      	bne.n	80456ca <log_output_msg_process+0xb2>
	size_t offset = 0;
 804567c:	4627      	mov	r7, r4
		length = output->size;
 804567e:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
 8045680:	aa06      	add	r2, sp, #24
 8045682:	68a9      	ldr	r1, [r5, #8]
 8045684:	4630      	mov	r0, r6
		length = output->size;
 8045686:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
 8045688:	463b      	mov	r3, r7
 804568a:	f010 fe0f 	bl	80562ac <log_msg_hexdump_data_get>
		output->control_block->offset = length;
 804568e:	9a06      	ldr	r2, [sp, #24]
 8045690:	686b      	ldr	r3, [r5, #4]
 8045692:	601a      	str	r2, [r3, #0]
		if (length != 0) {
 8045694:	b13a      	cbz	r2, 80456a6 <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
 8045696:	68ab      	ldr	r3, [r5, #8]
 8045698:	4413      	add	r3, r2
 804569a:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 804569e:	f1a4 030a 	sub.w	r3, r4, #10
 80456a2:	425c      	negs	r4, r3
 80456a4:	415c      	adcs	r4, r3
		log_output_flush(output);
 80456a6:	4628      	mov	r0, r5
 80456a8:	f010 ff71 	bl	805658e <log_output_flush>
		offset += length;
 80456ac:	9b06      	ldr	r3, [sp, #24]
 80456ae:	441f      	add	r7, r3
	} while (length > 0);
 80456b0:	2b00      	cmp	r3, #0
 80456b2:	d1e4      	bne.n	804567e <log_output_msg_process+0x66>
	if (eol) {
 80456b4:	b11c      	cbz	r4, 80456be <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
 80456b6:	4914      	ldr	r1, [pc, #80]	; (8045708 <log_output_msg_process+0xf0>)
 80456b8:	4628      	mov	r0, r5
 80456ba:	f7ff fe79 	bl	80453b0 <print_formatted>
	}

	log_output_flush(output);
 80456be:	4628      	mov	r0, r5
}
 80456c0:	b00a      	add	sp, #40	; 0x28
 80456c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
 80456c6:	f010 bf62 	b.w	805658e <log_output_flush>
	print_formatted(output, "%s", log_msg_str_get(msg));
 80456ca:	4630      	mov	r0, r6
		length = sizeof(buf);
 80456cc:	f04f 0a10 	mov.w	sl, #16
	print_formatted(output, "%s", log_msg_str_get(msg));
 80456d0:	f010 fd8f 	bl	80561f2 <log_msg_str_get>
 80456d4:	490d      	ldr	r1, [pc, #52]	; (804570c <log_output_msg_process+0xf4>)
 80456d6:	4602      	mov	r2, r0
 80456d8:	4628      	mov	r0, r5
 80456da:	f7ff fe69 	bl	80453b0 <print_formatted>
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 80456de:	aa05      	add	r2, sp, #20
 80456e0:	4623      	mov	r3, r4
 80456e2:	a906      	add	r1, sp, #24
 80456e4:	4630      	mov	r0, r6
		length = sizeof(buf);
 80456e6:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 80456ea:	f010 fddf 	bl	80562ac <log_msg_hexdump_data_get>
		if (length) {
 80456ee:	9a05      	ldr	r2, [sp, #20]
 80456f0:	2a00      	cmp	r2, #0
 80456f2:	d0b8      	beq.n	8045666 <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
 80456f4:	464b      	mov	r3, r9
 80456f6:	a906      	add	r1, sp, #24
 80456f8:	4628      	mov	r0, r5
 80456fa:	9700      	str	r7, [sp, #0]
 80456fc:	f7ff fe6a 	bl	80453d4 <hexdump_line_print>
			offset += length;
 8045700:	9b05      	ldr	r3, [sp, #20]
 8045702:	441c      	add	r4, r3
		length = sizeof(buf);
 8045704:	e7eb      	b.n	80456de <log_output_msg_process+0xc6>
 8045706:	bf00      	nop
 8045708:	0805fb65 	.word	0x0805fb65
 804570c:	0806018b 	.word	0x0806018b

08045710 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8045710:	f242 730f 	movw	r3, #9999	; 0x270f
 8045714:	4a11      	ldr	r2, [pc, #68]	; (804575c <log_output_dropped_process+0x4c>)
 8045716:	428b      	cmp	r3, r1
{
 8045718:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804571a:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 804571c:	bf28      	it	cs
 804571e:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
 8045720:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8045722:	2105      	movs	r1, #5
 8045724:	4668      	mov	r0, sp
 8045726:	f00f ffaf 	bl	8055688 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 804572a:	6863      	ldr	r3, [r4, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 804572c:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 804572e:	2204      	movs	r2, #4
 8045730:	4628      	mov	r0, r5
 8045732:	685b      	ldr	r3, [r3, #4]
 8045734:	490a      	ldr	r1, [pc, #40]	; (8045760 <log_output_dropped_process+0x50>)
 8045736:	f010 fdc0 	bl	80562ba <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
 804573a:	6863      	ldr	r3, [r4, #4]
 804573c:	4632      	mov	r2, r6
 804573e:	4669      	mov	r1, sp
 8045740:	4628      	mov	r0, r5
 8045742:	685b      	ldr	r3, [r3, #4]
 8045744:	f010 fdb9 	bl	80562ba <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 8045748:	6863      	ldr	r3, [r4, #4]
 804574a:	2217      	movs	r2, #23
 804574c:	4905      	ldr	r1, [pc, #20]	; (8045764 <log_output_dropped_process+0x54>)
 804574e:	685b      	ldr	r3, [r3, #4]
 8045750:	4628      	mov	r0, r5
 8045752:	f010 fdb2 	bl	80562ba <buffer_write>
		     output->control_block->ctx);
}
 8045756:	b002      	add	sp, #8
 8045758:	bd70      	pop	{r4, r5, r6, pc}
 804575a:	bf00      	nop
 804575c:	08062722 	.word	0x08062722
 8045760:	0805fb9f 	.word	0x0805fb9f
 8045764:	0805fb87 	.word	0x0805fb87

08045768 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
 8045768:	b510      	push	{r4, lr}
	timestamp_div = 1U;
 804576a:	4a08      	ldr	r2, [pc, #32]	; (804578c <log_output_timestamp_freq_set+0x24>)
 804576c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 804576e:	2100      	movs	r1, #0
 8045770:	4c07      	ldr	r4, [pc, #28]	; (8045790 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
 8045772:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 8045774:	42a0      	cmp	r0, r4
 8045776:	d804      	bhi.n	8045782 <log_output_timestamp_freq_set+0x1a>
 8045778:	b101      	cbz	r1, 804577c <log_output_timestamp_freq_set+0x14>
 804577a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 804577c:	4b05      	ldr	r3, [pc, #20]	; (8045794 <log_output_timestamp_freq_set+0x2c>)
 804577e:	6018      	str	r0, [r3, #0]
}
 8045780:	bd10      	pop	{r4, pc}
		frequency /= 2U;
 8045782:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 8045784:	2101      	movs	r1, #1
 8045786:	005b      	lsls	r3, r3, #1
 8045788:	e7f4      	b.n	8045774 <log_output_timestamp_freq_set+0xc>
 804578a:	bf00      	nop
 804578c:	200372e0 	.word	0x200372e0
 8045790:	000f4240 	.word	0x000f4240
 8045794:	200372dc 	.word	0x200372dc

08045798 <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
 8045798:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
 804579a:	2804      	cmp	r0, #4
	entry->subcmd = &dsub_module_name;
 804579c:	4a05      	ldr	r2, [pc, #20]	; (80457b4 <severity_lvl_get+0x1c>)
	entry->handler = NULL;
 804579e:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
 80457a0:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
 80457a2:	bf98      	it	ls
 80457a4:	4b04      	ldrls	r3, [pc, #16]	; (80457b8 <severity_lvl_get+0x20>)
	entry->subcmd = &dsub_module_name;
 80457a6:	608a      	str	r2, [r1, #8]
					severity_lvls_sorted[idx] : NULL;
 80457a8:	bf98      	it	ls
 80457aa:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
 80457ae:	600b      	str	r3, [r1, #0]
}
 80457b0:	4770      	bx	lr
 80457b2:	bf00      	nop
 80457b4:	0805cccc 	.word	0x0805cccc
 80457b8:	0805ccf0 	.word	0x0805ccf0

080457bc <backend_name_get>:
	SHELL_SUBCMD_SET_END
);

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
 80457bc:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
 80457be:	4a08      	ldr	r2, [pc, #32]	; (80457e0 <backend_name_get+0x24>)
	entry->syntax  = NULL;
 80457c0:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
 80457c2:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
 80457c4:	604b      	str	r3, [r1, #4]
	entry->subcmd = &sub_log_backend;
 80457c6:	608a      	str	r2, [r1, #8]
	return __log_backends_end - __log_backends_start;
 80457c8:	4b06      	ldr	r3, [pc, #24]	; (80457e4 <backend_name_get+0x28>)
 80457ca:	4a07      	ldr	r2, [pc, #28]	; (80457e8 <backend_name_get+0x2c>)
 80457cc:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
 80457ce:	ebb0 1f22 	cmp.w	r0, r2, asr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
 80457d2:	bf3e      	ittt	cc
 80457d4:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
 80457d8:	689b      	ldrcc	r3, [r3, #8]
 80457da:	600b      	strcc	r3, [r1, #0]
	}
}
 80457dc:	4770      	bx	lr
 80457de:	bf00      	nop
 80457e0:	0805ce44 	.word	0x0805ce44
 80457e4:	0805c134 	.word	0x0805c134
 80457e8:	0805c154 	.word	0x0805c154

080457ec <cmd_log_memory_slabs>:
{
 80457ec:	b538      	push	{r3, r4, r5, lr}
 80457ee:	4604      	mov	r4, r0
	slabs_free = log_msg_mem_get_free();
 80457f0:	f7ff fdd0 	bl	8045394 <log_msg_mem_get_free>
 80457f4:	4605      	mov	r5, r0
	used = log_msg_mem_get_used();
 80457f6:	f7ff fdd5 	bl	80453a4 <log_msg_mem_get_used>
	shell_print(sh, "Blocks used:\t%d", used);
 80457fa:	4a09      	ldr	r2, [pc, #36]	; (8045820 <cmd_log_memory_slabs+0x34>)
	used = log_msg_mem_get_used();
 80457fc:	4603      	mov	r3, r0
	shell_print(sh, "Blocks used:\t%d", used);
 80457fe:	2100      	movs	r1, #0
 8045800:	4620      	mov	r0, r4
 8045802:	f011 f85c 	bl	80568be <shell_fprintf>
	shell_print(sh, "Blocks free:\t%d", slabs_free);
 8045806:	462b      	mov	r3, r5
 8045808:	4620      	mov	r0, r4
 804580a:	4a06      	ldr	r2, [pc, #24]	; (8045824 <cmd_log_memory_slabs+0x38>)
 804580c:	2100      	movs	r1, #0
 804580e:	f011 f856 	bl	80568be <shell_fprintf>
		shell_print(
 8045812:	4620      	mov	r0, r4
 8045814:	4a04      	ldr	r2, [pc, #16]	; (8045828 <cmd_log_memory_slabs+0x3c>)
 8045816:	2100      	movs	r1, #0
 8045818:	f011 f851 	bl	80568be <shell_fprintf>
}
 804581c:	2000      	movs	r0, #0
 804581e:	bd38      	pop	{r3, r4, r5, pc}
 8045820:	0805fba4 	.word	0x0805fba4
 8045824:	0805fbb5 	.word	0x0805fbb5
 8045828:	0805fbc6 	.word	0x0805fbc6

0804582c <cmd_log_backends_list>:
{
 804582c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8045830:	4b11      	ldr	r3, [pc, #68]	; (8045878 <cmd_log_backends_list+0x4c>)
 8045832:	4682      	mov	sl, r0
 8045834:	4c11      	ldr	r4, [pc, #68]	; (804587c <cmd_log_backends_list+0x50>)
	for (int i = 0; i < backend_count; i++) {
 8045836:	2500      	movs	r5, #0
		shell_fprintf(shell, SHELL_NORMAL,
 8045838:	4f11      	ldr	r7, [pc, #68]	; (8045880 <cmd_log_backends_list+0x54>)
 804583a:	1b1b      	subs	r3, r3, r4
 804583c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8045884 <cmd_log_backends_list+0x58>
 8045840:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8045888 <cmd_log_backends_list+0x5c>
 8045844:	111e      	asrs	r6, r3, #4
	for (int i = 0; i < backend_count; i++) {
 8045846:	42b5      	cmp	r5, r6
 8045848:	db03      	blt.n	8045852 <cmd_log_backends_list+0x26>
}
 804584a:	2000      	movs	r0, #0
 804584c:	b002      	add	sp, #8
 804584e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      backend->cb->active ? "enabled" : "disabled",
 8045852:	6863      	ldr	r3, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
 8045854:	4650      	mov	r0, sl
	for (int i = 0; i < backend_count; i++) {
 8045856:	3501      	adds	r5, #1
 8045858:	3410      	adds	r4, #16
		shell_fprintf(shell, SHELL_NORMAL,
 804585a:	7959      	ldrb	r1, [r3, #5]
 804585c:	791b      	ldrb	r3, [r3, #4]
 804585e:	2900      	cmp	r1, #0
 8045860:	bf14      	ite	ne
 8045862:	463a      	movne	r2, r7
 8045864:	4642      	moveq	r2, r8
 8045866:	2100      	movs	r1, #0
 8045868:	e9cd 2300 	strd	r2, r3, [sp]
 804586c:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8045870:	464a      	mov	r2, r9
 8045872:	f011 f824 	bl	80568be <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
 8045876:	e7e6      	b.n	8045846 <cmd_log_backends_list+0x1a>
 8045878:	0805c154 	.word	0x0805c154
 804587c:	0805c134 	.word	0x0805c134
 8045880:	0805fc12 	.word	0x0805fc12
 8045884:	0805fc1a 	.word	0x0805fc1a
 8045888:	0805fc23 	.word	0x0805fc23

0804588c <log_status>:
{
 804588c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8045890:	4b24      	ldr	r3, [pc, #144]	; (8045924 <log_status+0x98>)
 8045892:	b085      	sub	sp, #20
 8045894:	4c24      	ldr	r4, [pc, #144]	; (8045928 <log_status+0x9c>)
 8045896:	4605      	mov	r5, r0
 8045898:	460e      	mov	r6, r1
 804589a:	1ae4      	subs	r4, r4, r3
	return backend->cb->active;
 804589c:	684b      	ldr	r3, [r1, #4]
	if (!log_backend_is_active(backend)) {
 804589e:	795b      	ldrb	r3, [r3, #5]
 80458a0:	08e4      	lsrs	r4, r4, #3
 80458a2:	b91b      	cbnz	r3, 80458ac <log_status+0x20>
		shell_warn(shell, "Logs are halted!");
 80458a4:	4a21      	ldr	r2, [pc, #132]	; (804592c <log_status+0xa0>)
 80458a6:	2104      	movs	r1, #4
 80458a8:	f011 f809 	bl	80568be <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
 80458ac:	4b20      	ldr	r3, [pc, #128]	; (8045930 <log_status+0xa4>)
 80458ae:	2100      	movs	r1, #0
 80458b0:	4a20      	ldr	r2, [pc, #128]	; (8045934 <log_status+0xa8>)
 80458b2:	4628      	mov	r0, r5
	for (int16_t i = 0U; i < modules_cnt; i++) {
 80458b4:	f04f 0800 	mov.w	r8, #0
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
 80458b8:	f8df a080 	ldr.w	sl, [pc, #128]	; 804593c <log_status+0xb0>
 80458bc:	f8df b080 	ldr.w	fp, [pc, #128]	; 8045940 <log_status+0xb4>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
 80458c0:	f010 fffd 	bl	80568be <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
 80458c4:	4a1c      	ldr	r2, [pc, #112]	; (8045938 <log_status+0xac>)
 80458c6:	2100      	movs	r1, #0
 80458c8:	4628      	mov	r0, r5
 80458ca:	f010 fff8 	bl	80568be <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
 80458ce:	fa0f f788 	sxth.w	r7, r8
 80458d2:	f108 0801 	add.w	r8, r8, #1
 80458d6:	42a7      	cmp	r7, r4
 80458d8:	d303      	bcc.n	80458e2 <log_status+0x56>
}
 80458da:	2000      	movs	r0, #0
 80458dc:	b005      	add	sp, #20
 80458de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
 80458e2:	463a      	mov	r2, r7
 80458e4:	2301      	movs	r3, #1
 80458e6:	2100      	movs	r1, #0
 80458e8:	4630      	mov	r0, r6
 80458ea:	f7ff fcc3 	bl	8045274 <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
 80458ee:	2300      	movs	r3, #0
 80458f0:	463a      	mov	r2, r7
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
 80458f2:	4681      	mov	r9, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
 80458f4:	4619      	mov	r1, r3
 80458f6:	4630      	mov	r0, r6
 80458f8:	f7ff fcbc 	bl	8045274 <log_filter_get>
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
 80458fc:	4639      	mov	r1, r7
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
 80458fe:	9003      	str	r0, [sp, #12]
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
 8045900:	2000      	movs	r0, #0
 8045902:	f7ff fc27 	bl	8045154 <log_source_name_get>
 8045906:	9a03      	ldr	r2, [sp, #12]
 8045908:	4603      	mov	r3, r0
 804590a:	2100      	movs	r1, #0
 804590c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8045910:	4628      	mov	r0, r5
 8045912:	9201      	str	r2, [sp, #4]
 8045914:	f85a 2029 	ldr.w	r2, [sl, r9, lsl #2]
 8045918:	9200      	str	r2, [sp, #0]
 804591a:	465a      	mov	r2, fp
 804591c:	f010 ffcf 	bl	80568be <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
 8045920:	e7d5      	b.n	80458ce <log_status+0x42>
 8045922:	bf00      	nop
 8045924:	0805c024 	.word	0x0805c024
 8045928:	0805c134 	.word	0x0805c134
 804592c:	0805fc44 	.word	0x0805fc44
 8045930:	0805fc56 	.word	0x0805fc56
 8045934:	0805fc62 	.word	0x0805fc62
 8045938:	0805fc80 	.word	0x0805fc80
 804593c:	0805ccdc 	.word	0x0805ccdc
 8045940:	0805fcbd 	.word	0x0805fcbd

08045944 <module_name_get>:
	entry->handler = NULL;
 8045944:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
 8045946:	4a06      	ldr	r2, [pc, #24]	; (8045960 <module_name_get+0x1c>)
{
 8045948:	b510      	push	{r4, lr}
 804594a:	460c      	mov	r4, r1
	entry->handler = NULL;
 804594c:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
 804594e:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
 8045950:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
 8045952:	4601      	mov	r1, r0
 8045954:	4618      	mov	r0, r3
 8045956:	f7ff fbfd 	bl	8045154 <log_source_name_get>
 804595a:	6020      	str	r0, [r4, #0]
}
 804595c:	bd10      	pop	{r4, pc}
 804595e:	bf00      	nop
 8045960:	0805cccc 	.word	0x0805cccc

08045964 <shell_backend_cmd_execute>:
{
 8045964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8045968:	b085      	sub	sp, #20
 804596a:	4606      	mov	r6, r0
 804596c:	4689      	mov	r9, r1
 804596e:	4690      	mov	r8, r2
 8045970:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < log_backend_count_get(); i++) {
 8045972:	2700      	movs	r7, #0
	char const *name = argv[-1];
 8045974:	f852 3c04 	ldr.w	r3, [r2, #-4]
	return __log_backends_end - __log_backends_start;
 8045978:	4c16      	ldr	r4, [pc, #88]	; (80459d4 <shell_backend_cmd_execute+0x70>)
	size_t slen = strlen(name);
 804597a:	4618      	mov	r0, r3
 804597c:	9302      	str	r3, [sp, #8]
 804597e:	f7fa ff6b 	bl	8040858 <strlen>
 8045982:	4915      	ldr	r1, [pc, #84]	; (80459d8 <shell_backend_cmd_execute+0x74>)
 8045984:	4602      	mov	r2, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
 8045986:	46a3      	mov	fp, r4
 8045988:	1b09      	subs	r1, r1, r4
 804598a:	9b02      	ldr	r3, [sp, #8]
 804598c:	ea4f 1a21 	mov.w	sl, r1, asr #4
 8045990:	4557      	cmp	r7, sl
 8045992:	db07      	blt.n	80459a4 <shell_backend_cmd_execute+0x40>
		shell_error(shell, "Invalid backend: %s", name);
 8045994:	4a11      	ldr	r2, [pc, #68]	; (80459dc <shell_backend_cmd_execute+0x78>)
 8045996:	2102      	movs	r1, #2
 8045998:	4630      	mov	r0, r6
		return -ENOEXEC;
 804599a:	f06f 0507 	mvn.w	r5, #7
		shell_error(shell, "Invalid backend: %s", name);
 804599e:	f010 ff8e 	bl	80568be <shell_fprintf>
		return -ENOEXEC;
 80459a2:	e011      	b.n	80459c8 <shell_backend_cmd_execute+0x64>
		if (strncmp(name, backend->name, slen) == 0) {
 80459a4:	68a1      	ldr	r1, [r4, #8]
 80459a6:	4618      	mov	r0, r3
 80459a8:	9203      	str	r2, [sp, #12]
 80459aa:	3410      	adds	r4, #16
 80459ac:	9302      	str	r3, [sp, #8]
 80459ae:	f015 fb91 	bl	805b0d4 <strncmp>
 80459b2:	4605      	mov	r5, r0
 80459b4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80459b8:	b950      	cbnz	r0, 80459d0 <shell_backend_cmd_execute+0x6c>
		func(shell, backend, argc, argv);
 80459ba:	4643      	mov	r3, r8
 80459bc:	464a      	mov	r2, r9
 80459be:	eb0b 1107 	add.w	r1, fp, r7, lsl #4
 80459c2:	4630      	mov	r0, r6
 80459c4:	9c01      	ldr	r4, [sp, #4]
 80459c6:	47a0      	blx	r4
}
 80459c8:	4628      	mov	r0, r5
 80459ca:	b005      	add	sp, #20
 80459cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < log_backend_count_get(); i++) {
 80459d0:	3701      	adds	r7, #1
 80459d2:	e7dd      	b.n	8045990 <shell_backend_cmd_execute+0x2c>
 80459d4:	0805c134 	.word	0x0805c134
 80459d8:	0805c154 	.word	0x0805c154
 80459dc:	0805fcd1 	.word	0x0805fcd1

080459e0 <cmd_log_backend_status>:
{
 80459e0:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
 80459e2:	4b02      	ldr	r3, [pc, #8]	; (80459ec <cmd_log_backend_status+0xc>)
 80459e4:	f7ff ffbe 	bl	8045964 <shell_backend_cmd_execute>
}
 80459e8:	2000      	movs	r0, #0
 80459ea:	bd08      	pop	{r3, pc}
 80459ec:	0804588d 	.word	0x0804588d

080459f0 <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
 80459f0:	4b01      	ldr	r3, [pc, #4]	; (80459f8 <cmd_log_backend_halt+0x8>)
 80459f2:	f7ff bfb7 	b.w	8045964 <shell_backend_cmd_execute>
 80459f6:	bf00      	nop
 80459f8:	080565df 	.word	0x080565df

080459fc <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
 80459fc:	4b01      	ldr	r3, [pc, #4]	; (8045a04 <cmd_log_backend_go+0x8>)
 80459fe:	f7ff bfb1 	b.w	8045964 <shell_backend_cmd_execute>
 8045a02:	bf00      	nop
 8045a04:	080565e7 	.word	0x080565e7

08045a08 <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
 8045a08:	4b01      	ldr	r3, [pc, #4]	; (8045a10 <cmd_log_backend_enable+0x8>)
 8045a0a:	f7ff bfab 	b.w	8045964 <shell_backend_cmd_execute>
 8045a0e:	bf00      	nop
 8045a10:	08045b15 	.word	0x08045b15

08045a14 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
 8045a14:	4b01      	ldr	r3, [pc, #4]	; (8045a1c <cmd_log_backend_disable+0x8>)
 8045a16:	f7ff bfa5 	b.w	8045964 <shell_backend_cmd_execute>
 8045a1a:	bf00      	nop
 8045a1c:	08056639 	.word	0x08056639

08045a20 <shell_state_precheck>:
	if (shell->log_backend->control_block->state
 8045a20:	69c3      	ldr	r3, [r0, #28]
 8045a22:	68db      	ldr	r3, [r3, #12]
{
 8045a24:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
 8045a26:	791c      	ldrb	r4, [r3, #4]
 8045a28:	b92c      	cbnz	r4, 8045a36 <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
 8045a2a:	4a04      	ldr	r2, [pc, #16]	; (8045a3c <shell_state_precheck+0x1c>)
 8045a2c:	2102      	movs	r1, #2
 8045a2e:	f010 ff46 	bl	80568be <shell_fprintf>
 8045a32:	4620      	mov	r0, r4
}
 8045a34:	bd10      	pop	{r4, pc}
	return true;
 8045a36:	2001      	movs	r0, #1
 8045a38:	e7fc      	b.n	8045a34 <shell_state_precheck+0x14>
 8045a3a:	bf00      	nop
 8045a3c:	0805fce6 	.word	0x0805fce6

08045a40 <filters_set>:
{
 8045a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8045a44:	461f      	mov	r7, r3
 8045a46:	4e2d      	ldr	r6, [pc, #180]	; (8045afc <filters_set+0xbc>)
 8045a48:	4b2d      	ldr	r3, [pc, #180]	; (8045b00 <filters_set+0xc0>)
	int cnt = all ? log_sources_count() : argc;
 8045a4a:	1e15      	subs	r5, r2, #0
{
 8045a4c:	b085      	sub	sp, #20
 8045a4e:	4680      	mov	r8, r0
 8045a50:	eba6 0603 	sub.w	r6, r6, r3
	int cnt = all ? log_sources_count() : argc;
 8045a54:	bf18      	it	ne
 8045a56:	462b      	movne	r3, r5
{
 8045a58:	4689      	mov	r9, r1
 8045a5a:	ea4f 06d6 	mov.w	r6, r6, lsr #3
	int cnt = all ? log_sources_count() : argc;
 8045a5e:	bf08      	it	eq
 8045a60:	4633      	moveq	r3, r6
 8045a62:	9302      	str	r3, [sp, #8]
	if (!backend->cb->active) {
 8045a64:	684b      	ldr	r3, [r1, #4]
 8045a66:	795b      	ldrb	r3, [r3, #5]
 8045a68:	b91b      	cbnz	r3, 8045a72 <filters_set+0x32>
		shell_warn(shell, "Backend not active.");
 8045a6a:	4a26      	ldr	r2, [pc, #152]	; (8045b04 <filters_set+0xc4>)
 8045a6c:	2104      	movs	r1, #4
 8045a6e:	f010 ff26 	bl	80568be <shell_fprintf>
	for (i = 0U; i < modules_cnt; i++) {
 8045a72:	2400      	movs	r4, #0
				shell_warn(shell, "%s: level set to %s.",
 8045a74:	f8df a098 	ldr.w	sl, [pc, #152]	; 8045b10 <filters_set+0xd0>
	for (i = 0; i < cnt; i++) {
 8045a78:	9b02      	ldr	r3, [sp, #8]
 8045a7a:	429c      	cmp	r4, r3
 8045a7c:	db02      	blt.n	8045a84 <filters_set+0x44>
}
 8045a7e:	b005      	add	sp, #20
 8045a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		id = all ? i : module_id_get(argv[i]);
 8045a84:	b3bd      	cbz	r5, 8045af6 <filters_set+0xb6>
 8045a86:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
	for (i = 0U; i < modules_cnt; i++) {
 8045a8a:	2300      	movs	r3, #0
 8045a8c:	429e      	cmp	r6, r3
 8045a8e:	d107      	bne.n	8045aa0 <filters_set+0x60>
			shell_error(shell, "%s: unknown source name.", argv[i]);
 8045a90:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8045a94:	2102      	movs	r1, #2
 8045a96:	4a1c      	ldr	r2, [pc, #112]	; (8045b08 <filters_set+0xc8>)
 8045a98:	4640      	mov	r0, r8
 8045a9a:	f010 ff10 	bl	80568be <shell_fprintf>
 8045a9e:	e023      	b.n	8045ae8 <filters_set+0xa8>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
 8045aa0:	4619      	mov	r1, r3
 8045aa2:	2000      	movs	r0, #0
 8045aa4:	9303      	str	r3, [sp, #12]
 8045aa6:	f7ff fb55 	bl	8045154 <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
 8045aaa:	2240      	movs	r2, #64	; 0x40
 8045aac:	4659      	mov	r1, fp
 8045aae:	f015 fb11 	bl	805b0d4 <strncmp>
 8045ab2:	9b03      	ldr	r3, [sp, #12]
 8045ab4:	b9d0      	cbnz	r0, 8045aec <filters_set+0xac>
			return i;
 8045ab6:	461a      	mov	r2, r3
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
 8045ab8:	2100      	movs	r1, #0
 8045aba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8045abc:	b212      	sxth	r2, r2
 8045abe:	4648      	mov	r0, r9
 8045ac0:	f7ff fb56 	bl	8045170 <z_impl_log_filter_set>
			if (set_lvl != level) {
 8045ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8045ac6:	4683      	mov	fp, r0
 8045ac8:	4283      	cmp	r3, r0
 8045aca:	d00d      	beq.n	8045ae8 <filters_set+0xa8>
						CONFIG_LOG_DOMAIN_ID, i) :
 8045acc:	b985      	cbnz	r5, 8045af0 <filters_set+0xb0>
					log_source_name_get(
 8045ace:	4621      	mov	r1, r4
 8045ad0:	4628      	mov	r0, r5
 8045ad2:	f7ff fb3f 	bl	8045154 <log_source_name_get>
 8045ad6:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
 8045ad8:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
 8045adc:	2104      	movs	r1, #4
 8045ade:	4640      	mov	r0, r8
 8045ae0:	9200      	str	r2, [sp, #0]
 8045ae2:	4a0a      	ldr	r2, [pc, #40]	; (8045b0c <filters_set+0xcc>)
 8045ae4:	f010 feeb 	bl	80568be <shell_fprintf>
	for (i = 0; i < cnt; i++) {
 8045ae8:	3401      	adds	r4, #1
 8045aea:	e7c5      	b.n	8045a78 <filters_set+0x38>
	for (i = 0U; i < modules_cnt; i++) {
 8045aec:	3301      	adds	r3, #1
 8045aee:	e7cd      	b.n	8045a8c <filters_set+0x4c>
						CONFIG_LOG_DOMAIN_ID, i) :
 8045af0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8045af4:	e7f0      	b.n	8045ad8 <filters_set+0x98>
 8045af6:	4622      	mov	r2, r4
 8045af8:	e7de      	b.n	8045ab8 <filters_set+0x78>
 8045afa:	bf00      	nop
 8045afc:	0805c134 	.word	0x0805c134
 8045b00:	0805c024 	.word	0x0805c024
 8045b04:	0805fd0a 	.word	0x0805fd0a
 8045b08:	0805fd35 	.word	0x0805fd35
 8045b0c:	0805fd1f 	.word	0x0805fd1f
 8045b10:	0805ccdc 	.word	0x0805ccdc

08045b14 <log_enable>:
{
 8045b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8045b18:	4606      	mov	r6, r0
 8045b1a:	4688      	mov	r8, r1
 8045b1c:	4691      	mov	r9, r2
 8045b1e:	461d      	mov	r5, r3
	severity_level = severity_level_get(argv[1]);
 8045b20:	f8d3 b004 	ldr.w	fp, [r3, #4]
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
 8045b24:	2700      	movs	r7, #0
 8045b26:	f8df a048 	ldr.w	sl, [pc, #72]	; 8045b70 <log_enable+0x5c>
		if (strncmp(str, severity_lvls[i], 4) == 0) {
 8045b2a:	2204      	movs	r2, #4
 8045b2c:	f85a 1b04 	ldr.w	r1, [sl], #4
 8045b30:	4658      	mov	r0, fp
 8045b32:	f015 facf 	bl	805b0d4 <strncmp>
 8045b36:	4604      	mov	r4, r0
 8045b38:	b170      	cbz	r0, 8045b58 <log_enable+0x44>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
 8045b3a:	3701      	adds	r7, #1
 8045b3c:	2f05      	cmp	r7, #5
 8045b3e:	d1f4      	bne.n	8045b2a <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
 8045b40:	f06f 0407 	mvn.w	r4, #7
 8045b44:	686b      	ldr	r3, [r5, #4]
 8045b46:	4a09      	ldr	r2, [pc, #36]	; (8045b6c <log_enable+0x58>)
 8045b48:	2102      	movs	r1, #2
 8045b4a:	4630      	mov	r0, r6
 8045b4c:	f010 feb7 	bl	80568be <shell_fprintf>
}
 8045b50:	4620      	mov	r0, r4
 8045b52:	b003      	add	sp, #12
 8045b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
 8045b58:	f105 0308 	add.w	r3, r5, #8
 8045b5c:	f1a9 0202 	sub.w	r2, r9, #2
 8045b60:	4641      	mov	r1, r8
 8045b62:	4630      	mov	r0, r6
 8045b64:	9700      	str	r7, [sp, #0]
 8045b66:	f7ff ff6b 	bl	8045a40 <filters_set>
	return 0;
 8045b6a:	e7f1      	b.n	8045b50 <log_enable+0x3c>
 8045b6c:	0805fd4f 	.word	0x0805fd4f
 8045b70:	0805ccdc 	.word	0x0805ccdc

08045b74 <cmd_kernel_version>:
#include <drivers/timer/system_timer.h>
#include <kernel.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
 8045b74:	b513      	push	{r0, r1, r4, lr}
 8045b76:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
 8045b78:	f00b fe42 	bl	8051800 <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
 8045b7c:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8045b80:	0e03      	lsrs	r3, r0, #24
 8045b82:	2100      	movs	r1, #0
 8045b84:	9201      	str	r2, [sp, #4]
 8045b86:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8045b8a:	4620      	mov	r0, r4
 8045b8c:	9200      	str	r2, [sp, #0]
 8045b8e:	4a03      	ldr	r2, [pc, #12]	; (8045b9c <cmd_kernel_version+0x28>)
 8045b90:	f010 fe95 	bl	80568be <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
 8045b94:	2000      	movs	r0, #0
 8045b96:	b002      	add	sp, #8
 8045b98:	bd10      	pop	{r4, pc}
 8045b9a:	bf00      	nop
 8045b9c:	0805fefb 	.word	0x0805fefb

08045ba0 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
 8045ba0:	b510      	push	{r4, lr}
 8045ba2:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
 8045ba4:	f014 fdca 	bl	805a73c <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8045ba8:	220a      	movs	r2, #10
 8045baa:	2300      	movs	r3, #0
 8045bac:	f7fa fcc8 	bl	8040540 <__aeabi_uldivmod>
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
 8045bb0:	4a03      	ldr	r2, [pc, #12]	; (8045bc0 <cmd_kernel_uptime+0x20>)
 8045bb2:	4603      	mov	r3, r0
 8045bb4:	2100      	movs	r1, #0
 8045bb6:	4620      	mov	r0, r4
 8045bb8:	f010 fe81 	bl	80568be <shell_fprintf>
	return 0;
}
 8045bbc:	2000      	movs	r0, #0
 8045bbe:	bd10      	pop	{r4, pc}
 8045bc0:	0805ff14 	.word	0x0805ff14

08045bc4 <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
 8045bc4:	b510      	push	{r4, lr}
 8045bc6:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", sys_clock_elapsed());
 8045bc8:	f008 fcc4 	bl	804e554 <sys_clock_elapsed>
 8045bcc:	4a08      	ldr	r2, [pc, #32]	; (8045bf0 <cmd_kernel_threads+0x2c>)
 8045bce:	4603      	mov	r3, r0
 8045bd0:	2100      	movs	r1, #0
 8045bd2:	4620      	mov	r0, r4
 8045bd4:	f010 fe73 	bl	80568be <shell_fprintf>
	shell_print(shell, "Threads:");
 8045bd8:	4a06      	ldr	r2, [pc, #24]	; (8045bf4 <cmd_kernel_threads+0x30>)
 8045bda:	4620      	mov	r0, r4
 8045bdc:	2100      	movs	r1, #0
 8045bde:	f010 fe6e 	bl	80568be <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
 8045be2:	4621      	mov	r1, r4
 8045be4:	4804      	ldr	r0, [pc, #16]	; (8045bf8 <cmd_kernel_threads+0x34>)
 8045be6:	f00b fcad 	bl	8051544 <k_thread_foreach>
	return 0;
}
 8045bea:	2000      	movs	r0, #0
 8045bec:	bd10      	pop	{r4, pc}
 8045bee:	bf00      	nop
 8045bf0:	0805ff23 	.word	0x0805ff23
 8045bf4:	0805ff42 	.word	0x0805ff42
 8045bf8:	08045c61 	.word	0x08045c61

08045bfc <cmd_kernel_stacks>:
extern K_KERNEL_STACK_ARRAY_DEFINE(z_interrupt_stacks, CONFIG_MP_NUM_CPUS,
				   CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
 8045bfc:	b530      	push	{r4, r5, lr}
	uint8_t *buf;
	size_t size, unused;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	k_thread_foreach(shell_stack_dump, (void *)shell);
 8045bfe:	4601      	mov	r1, r0
{
 8045c00:	b087      	sub	sp, #28
 8045c02:	4604      	mov	r4, r0
	k_thread_foreach(shell_stack_dump, (void *)shell);
 8045c04:	4812      	ldr	r0, [pc, #72]	; (8045c50 <cmd_kernel_stacks+0x54>)
 8045c06:	f00b fc9d 	bl	8051544 <k_thread_foreach>
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);

		unused = 0;
		for (size_t i = 0; i < size; i++) {
 8045c0a:	4a12      	ldr	r2, [pc, #72]	; (8045c54 <cmd_kernel_stacks+0x58>)
		unused = 0;
 8045c0c:	2300      	movs	r3, #0
			if (buf[i] == 0xAAU) {
 8045c0e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8045c12:	29aa      	cmp	r1, #170	; 0xaa
 8045c14:	d103      	bne.n	8045c1e <cmd_kernel_stacks+0x22>
				unused++;
 8045c16:	3301      	adds	r3, #1
		for (size_t i = 0; i < size; i++) {
 8045c18:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8045c1c:	d1f7      	bne.n	8045c0e <cmd_kernel_stacks+0x12>
			} else {
				break;
			}
		}

		shell_print(shell,
 8045c1e:	f5c3 6006 	rsb	r0, r3, #2144	; 0x860
 8045c22:	2264      	movs	r2, #100	; 0x64
 8045c24:	f44f 6106 	mov.w	r1, #2144	; 0x860
 8045c28:	2500      	movs	r5, #0
 8045c2a:	4342      	muls	r2, r0
 8045c2c:	9101      	str	r1, [sp, #4]
 8045c2e:	9500      	str	r5, [sp, #0]
 8045c30:	fbb2 f2f1 	udiv	r2, r2, r1
 8045c34:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8045c38:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8045c3c:	4620      	mov	r0, r4
 8045c3e:	4b06      	ldr	r3, [pc, #24]	; (8045c58 <cmd_kernel_stacks+0x5c>)
 8045c40:	4a06      	ldr	r2, [pc, #24]	; (8045c5c <cmd_kernel_stacks+0x60>)
 8045c42:	4629      	mov	r1, r5
 8045c44:	f010 fe3b 	bl	80568be <shell_fprintf>
			      size - unused, size,
			      ((size - unused) * 100U) / size);
	}

	return 0;
}
 8045c48:	4628      	mov	r0, r5
 8045c4a:	b007      	add	sp, #28
 8045c4c:	bd30      	pop	{r4, r5, pc}
 8045c4e:	bf00      	nop
 8045c50:	08045d49 	.word	0x08045d49
 8045c54:	2003b5a0 	.word	0x2003b5a0
 8045c58:	2003b580 	.word	0x2003b580
 8045c5c:	0805ff4c 	.word	0x0805ff4c

08045c60 <shell_tdata_dump>:
{
 8045c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8045c62:	b087      	sub	sp, #28
 8045c64:	4604      	mov	r4, r0
 8045c66:	460d      	mov	r5, r1
	size_t size = thread->stack_info.size;
 8045c68:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
	tname = k_thread_name_get(thread);
 8045c6c:	f014 fb52 	bl	805a314 <k_thread_name_get>
 8045c70:	4606      	mov	r6, r0
	return z_impl_z_current_get();
 8045c72:	f00c fb31 	bl	80522d8 <z_impl_z_current_get>
	shell_print(shell, "%s%p %-10s",
 8045c76:	4b25      	ldr	r3, [pc, #148]	; (8045d0c <shell_tdata_dump+0xac>)
 8045c78:	4925      	ldr	r1, [pc, #148]	; (8045d10 <shell_tdata_dump+0xb0>)
 8045c7a:	2e00      	cmp	r6, #0
 8045c7c:	bf08      	it	eq
 8045c7e:	461e      	moveq	r6, r3
 8045c80:	4b24      	ldr	r3, [pc, #144]	; (8045d14 <shell_tdata_dump+0xb4>)
 8045c82:	4a25      	ldr	r2, [pc, #148]	; (8045d18 <shell_tdata_dump+0xb8>)
 8045c84:	4284      	cmp	r4, r0
 8045c86:	bf08      	it	eq
 8045c88:	460b      	moveq	r3, r1
 8045c8a:	4628      	mov	r0, r5
 8045c8c:	2100      	movs	r1, #0
 8045c8e:	e9cd 4600 	strd	r4, r6, [sp]
 8045c92:	f010 fe14 	bl	80568be <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %d",
 8045c96:	2100      	movs	r1, #0
 8045c98:	4628      	mov	r0, r5
 8045c9a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8045c9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8045ca2:	f994 300e 	ldrsb.w	r3, [r4, #14]
 8045ca6:	4a1d      	ldr	r2, [pc, #116]	; (8045d1c <shell_tdata_dump+0xbc>)
 8045ca8:	9300      	str	r3, [sp, #0]
 8045caa:	7b23      	ldrb	r3, [r4, #12]
 8045cac:	f010 fe07 	bl	80568be <shell_fprintf>
	shell_print(shell, "\tstate: %s, entry: %p", k_thread_state_str(thread),
 8045cb0:	4620      	mov	r0, r4
 8045cb2:	f00b fc8f 	bl	80515d4 <k_thread_state_str>
 8045cb6:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8045cba:	4606      	mov	r6, r0
 8045cbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8045cbe:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8045cc2:	4633      	mov	r3, r6
 8045cc4:	4a16      	ldr	r2, [pc, #88]	; (8045d20 <shell_tdata_dump+0xc0>)
 8045cc6:	2100      	movs	r1, #0
 8045cc8:	4628      	mov	r0, r5
 8045cca:	f010 fdf8 	bl	80568be <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
 8045cce:	a905      	add	r1, sp, #20
 8045cd0:	4620      	mov	r0, r4
 8045cd2:	f014 fb23 	bl	805a31c <z_impl_k_thread_stack_space_get>
	if (ret) {
 8045cd6:	4601      	mov	r1, r0
 8045cd8:	b138      	cbz	r0, 8045cea <shell_tdata_dump+0x8a>
		shell_print(shell,
 8045cda:	4603      	mov	r3, r0
 8045cdc:	4a11      	ldr	r2, [pc, #68]	; (8045d24 <shell_tdata_dump+0xc4>)
 8045cde:	2100      	movs	r1, #0
 8045ce0:	4628      	mov	r0, r5
 8045ce2:	f010 fdec 	bl	80568be <shell_fprintf>
}
 8045ce6:	b007      	add	sp, #28
 8045ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
 8045cea:	9a05      	ldr	r2, [sp, #20]
 8045cec:	2364      	movs	r3, #100	; 0x64
 8045cee:	1ab8      	subs	r0, r7, r2
 8045cf0:	4343      	muls	r3, r0
 8045cf2:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
 8045cf6:	e9cd 2000 	strd	r2, r0, [sp]
 8045cfa:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8045cfe:	4a0a      	ldr	r2, [pc, #40]	; (8045d28 <shell_tdata_dump+0xc8>)
 8045d00:	463b      	mov	r3, r7
 8045d02:	4628      	mov	r0, r5
 8045d04:	f010 fddb 	bl	80568be <shell_fprintf>
}
 8045d08:	e7ed      	b.n	8045ce6 <shell_tdata_dump+0x86>
 8045d0a:	bf00      	nop
 8045d0c:	0805ff92 	.word	0x0805ff92
 8045d10:	08061010 	.word	0x08061010
 8045d14:	08062fdc 	.word	0x08062fdc
 8045d18:	0805ff95 	.word	0x0805ff95
 8045d1c:	0805ffa1 	.word	0x0805ffa1
 8045d20:	0805ffcb 	.word	0x0805ffcb
 8045d24:	0805ffe2 	.word	0x0805ffe2
 8045d28:	0806000f 	.word	0x0806000f

08045d2c <cmd_kernel_cycles>:
{
 8045d2c:	b510      	push	{r4, lr}
 8045d2e:	4604      	mov	r4, r0
 8045d30:	f008 fc2e 	bl	804e590 <sys_clock_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
 8045d34:	4a03      	ldr	r2, [pc, #12]	; (8045d44 <cmd_kernel_cycles+0x18>)
 8045d36:	4603      	mov	r3, r0
 8045d38:	2100      	movs	r1, #0
 8045d3a:	4620      	mov	r0, r4
 8045d3c:	f010 fdbf 	bl	80568be <shell_fprintf>
}
 8045d40:	2000      	movs	r0, #0
 8045d42:	bd10      	pop	{r4, pc}
 8045d44:	08060046 	.word	0x08060046

08045d48 <shell_stack_dump>:
{
 8045d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8045d4a:	4604      	mov	r4, r0
 8045d4c:	b08b      	sub	sp, #44	; 0x2c
 8045d4e:	460d      	mov	r5, r1
	size_t size = thread->stack_info.size;
 8045d50:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
 8045d54:	a909      	add	r1, sp, #36	; 0x24
 8045d56:	f014 fae1 	bl	805a31c <z_impl_k_thread_stack_space_get>
	if (ret) {
 8045d5a:	b138      	cbz	r0, 8045d6c <shell_stack_dump+0x24>
		shell_print(shell,
 8045d5c:	4603      	mov	r3, r0
 8045d5e:	4a12      	ldr	r2, [pc, #72]	; (8045da8 <shell_stack_dump+0x60>)
 8045d60:	2100      	movs	r1, #0
 8045d62:	4628      	mov	r0, r5
 8045d64:	f010 fdab 	bl	80568be <shell_fprintf>
}
 8045d68:	b00b      	add	sp, #44	; 0x2c
 8045d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8045d6c:	9007      	str	r0, [sp, #28]
	tname = k_thread_name_get((struct k_thread *)thread);
 8045d6e:	4620      	mov	r0, r4
 8045d70:	f014 fad0 	bl	805a314 <k_thread_name_get>
	pcnt = ((size - unused) * 100U) / size;
 8045d74:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8045d76:	2364      	movs	r3, #100	; 0x64
	shell_print((const struct shell *)user_data,
 8045d78:	4a0c      	ldr	r2, [pc, #48]	; (8045dac <shell_stack_dump+0x64>)
	pcnt = ((size - unused) * 100U) / size;
 8045d7a:	eba6 0c07 	sub.w	ip, r6, r7
	shell_print((const struct shell *)user_data,
 8045d7e:	9907      	ldr	r1, [sp, #28]
 8045d80:	2800      	cmp	r0, #0
 8045d82:	bf18      	it	ne
 8045d84:	4602      	movne	r2, r0
 8045d86:	4628      	mov	r0, r5
	pcnt = ((size - unused) * 100U) / size;
 8045d88:	fb03 f30c 	mul.w	r3, r3, ip
 8045d8c:	fbb3 f3f6 	udiv	r3, r3, r6
	shell_print((const struct shell *)user_data,
 8045d90:	e9cd 2600 	strd	r2, r6, [sp]
 8045d94:	e9cd 6304 	strd	r6, r3, [sp, #16]
 8045d98:	4a05      	ldr	r2, [pc, #20]	; (8045db0 <shell_stack_dump+0x68>)
 8045d9a:	4623      	mov	r3, r4
 8045d9c:	e9cd 7c02 	strd	r7, ip, [sp, #8]
 8045da0:	f010 fd8d 	bl	80568be <shell_fprintf>
 8045da4:	e7e0      	b.n	8045d68 <shell_stack_dump+0x20>
 8045da6:	bf00      	nop
 8045da8:	0805ffe2 	.word	0x0805ffe2
 8045dac:	0805ff92 	.word	0x0805ff92
 8045db0:	0806005c 	.word	0x0806005c

08045db4 <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
 8045db4:	4603      	mov	r3, r0
	const char *name = dev->name;
 8045db6:	6800      	ldr	r0, [r0, #0]
{
 8045db8:	b510      	push	{r4, lr}
 8045dba:	460c      	mov	r4, r1
 8045dbc:	4611      	mov	r1, r2

	if ((name == NULL) || (name[0] == 0)) {
 8045dbe:	b108      	cbz	r0, 8045dc4 <get_device_name+0x10>
 8045dc0:	7802      	ldrb	r2, [r0, #0]
 8045dc2:	b922      	cbnz	r2, 8045dce <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
 8045dc4:	4a02      	ldr	r2, [pc, #8]	; (8045dd0 <get_device_name+0x1c>)
 8045dc6:	4620      	mov	r0, r4
 8045dc8:	f00c ffd6 	bl	8052d78 <sniprintf>
 8045dcc:	4620      	mov	r0, r4
		name = buf;
	}

	return name;
}
 8045dce:	bd10      	pop	{r4, pc}
 8045dd0:	0806015b 	.word	0x0806015b

08045dd4 <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
 8045dd4:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->shell, SHELL_NORMAL, "  requires: %s\n",
 8045dd6:	680c      	ldr	r4, [r1, #0]
 8045dd8:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
 8045ddc:	f7ff ffea 	bl	8045db4 <get_device_name>
 8045de0:	4a03      	ldr	r2, [pc, #12]	; (8045df0 <cmd_device_list_visitor+0x1c>)
 8045de2:	4603      	mov	r3, r0
 8045de4:	2100      	movs	r1, #0
 8045de6:	4620      	mov	r0, r4
 8045de8:	f010 fd69 	bl	80568be <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
 8045dec:	2000      	movs	r0, #0
 8045dee:	bd10      	pop	{r4, pc}
 8045df0:	08060160 	.word	0x08060160

08045df4 <cmd_device_list>:

static int cmd_device_list(const struct shell *shell,
			   size_t argc, char **argv)
{
 8045df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8045df8:	b08a      	sub	sp, #40	; 0x28
 8045dfa:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
	const struct device *devlist_end = devlist + devcnt;
 8045dfc:	2618      	movs	r6, #24
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
 8045dfe:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8045e80 <cmd_device_list+0x8c>
	size_t devcnt = z_device_get_all_static(&devlist);
 8045e02:	a801      	add	r0, sp, #4
		if (!device_is_ready(dev)) {
			state = "DISABLED";
 8045e04:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8045e84 <cmd_device_list+0x90>
	size_t devcnt = z_device_get_all_static(&devlist);
 8045e08:	f00b f96a 	bl	80510e0 <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
 8045e0c:	9b01      	ldr	r3, [sp, #4]
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
 8045e0e:	4a19      	ldr	r2, [pc, #100]	; (8045e74 <cmd_device_list+0x80>)
 8045e10:	2100      	movs	r1, #0
	const struct device *devlist_end = devlist + devcnt;
 8045e12:	fb06 3600 	mla	r6, r6, r0, r3
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
 8045e16:	4628      	mov	r0, r5
 8045e18:	f010 fd51 	bl	80568be <shell_fprintf>
			state = "DISABLED";
 8045e1c:	f8df a068 	ldr.w	sl, [pc, #104]	; 8045e88 <cmd_device_list+0x94>
	for (dev = devlist; dev < devlist_end; dev++) {
 8045e20:	9c01      	ldr	r4, [sp, #4]
 8045e22:	42b4      	cmp	r4, r6
 8045e24:	d303      	bcc.n	8045e2e <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
 8045e26:	2000      	movs	r0, #0
 8045e28:	b00a      	add	sp, #40	; 0x28
 8045e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const char *name = get_device_name(dev, buf, sizeof(buf));
 8045e2e:	af05      	add	r7, sp, #20
 8045e30:	2214      	movs	r2, #20
 8045e32:	4620      	mov	r0, r4
 8045e34:	4639      	mov	r1, r7
 8045e36:	f7ff ffbd 	bl	8045db4 <get_device_name>
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
 8045e3a:	4642      	mov	r2, r8
		const char *name = get_device_name(dev, buf, sizeof(buf));
 8045e3c:	4603      	mov	r3, r0
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
 8045e3e:	2100      	movs	r1, #0
 8045e40:	4628      	mov	r0, r5
 8045e42:	f010 fd3c 	bl	80568be <shell_fprintf>
 8045e46:	4620      	mov	r0, r4
 8045e48:	f014 fa05 	bl	805a256 <z_device_ready>
		shell_fprintf(shell, SHELL_NORMAL, " (%s)\n", state);
 8045e4c:	4a0a      	ldr	r2, [pc, #40]	; (8045e78 <cmd_device_list+0x84>)
 8045e4e:	2800      	cmp	r0, #0
 8045e50:	bf14      	ite	ne
 8045e52:	464b      	movne	r3, r9
 8045e54:	4653      	moveq	r3, sl
 8045e56:	2100      	movs	r1, #0
 8045e58:	4628      	mov	r0, r5
 8045e5a:	f010 fd30 	bl	80568be <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
 8045e5e:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
 8045e60:	4620      	mov	r0, r4
 8045e62:	aa02      	add	r2, sp, #8
 8045e64:	4905      	ldr	r1, [pc, #20]	; (8045e7c <cmd_device_list+0x88>)
	for (dev = devlist; dev < devlist_end; dev++) {
 8045e66:	3418      	adds	r4, #24
			struct cmd_device_list_visitor_context ctx = {
 8045e68:	9304      	str	r3, [sp, #16]
 8045e6a:	e9cd 5702 	strd	r5, r7, [sp, #8]
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
 8045e6e:	f00b f96f 	bl	8051150 <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
 8045e72:	e7d6      	b.n	8045e22 <cmd_device_list+0x2e>
 8045e74:	0806017f 	.word	0x0806017f
 8045e78:	08062211 	.word	0x08062211
 8045e7c:	08045dd5 	.word	0x08045dd5
 8045e80:	08060189 	.word	0x08060189
 8045e84:	08060170 	.word	0x08060170
 8045e88:	08060176 	.word	0x08060176

08045e8c <device_get_config_level>:
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
 8045e8c:	4b12      	ldr	r3, [pc, #72]	; (8045ed8 <device_get_config_level+0x4c>)
{
 8045e8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
 8045e92:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8045e96:	3101      	adds	r1, #1
{
 8045e98:	b087      	sub	sp, #28
 8045e9a:	4606      	mov	r6, r0
	bool devices = false;
 8045e9c:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
 8045e9e:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
 8045ea2:	f8df 9038 	ldr.w	r9, [pc, #56]	; 8045edc <device_get_config_level+0x50>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
 8045ea6:	45a0      	cmp	r8, r4
 8045ea8:	d803      	bhi.n	8045eb2 <device_get_config_level+0x26>
}
 8045eaa:	4638      	mov	r0, r7
 8045eac:	b007      	add	sp, #28
 8045eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8045eb2:	4620      	mov	r0, r4
 8045eb4:	f014 f9cf 	bl	805a256 <z_device_ready>
 8045eb8:	4605      	mov	r5, r0
 8045eba:	b158      	cbz	r0, 8045ed4 <device_get_config_level+0x48>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
 8045ebc:	2214      	movs	r2, #20
 8045ebe:	a901      	add	r1, sp, #4
 8045ec0:	4620      	mov	r0, r4
			devices = true;
 8045ec2:	462f      	mov	r7, r5
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
 8045ec4:	f7ff ff76 	bl	8045db4 <get_device_name>
 8045ec8:	464a      	mov	r2, r9
 8045eca:	4603      	mov	r3, r0
 8045ecc:	2100      	movs	r1, #0
 8045ece:	4630      	mov	r0, r6
 8045ed0:	f010 fcf5 	bl	80568be <shell_fprintf>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
 8045ed4:	3418      	adds	r4, #24
 8045ed6:	e7e6      	b.n	8045ea6 <device_get_config_level+0x1a>
 8045ed8:	0805cf54 	.word	0x0805cf54
 8045edc:	0806018e 	.word	0x0806018e

08045ee0 <cmd_device_levels>:
{
 8045ee0:	b510      	push	{r4, lr}
 8045ee2:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
 8045ee4:	4a1e      	ldr	r2, [pc, #120]	; (8045f60 <cmd_device_levels+0x80>)
 8045ee6:	2100      	movs	r1, #0
 8045ee8:	f010 fce9 	bl	80568be <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
 8045eec:	2100      	movs	r1, #0
 8045eee:	4620      	mov	r0, r4
 8045ef0:	f7ff ffcc 	bl	8045e8c <device_get_config_level>
	if (ret == false) {
 8045ef4:	4601      	mov	r1, r0
 8045ef6:	b918      	cbnz	r0, 8045f00 <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 8045ef8:	4a1a      	ldr	r2, [pc, #104]	; (8045f64 <cmd_device_levels+0x84>)
 8045efa:	4620      	mov	r0, r4
 8045efc:	f010 fcdf 	bl	80568be <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
 8045f00:	4a19      	ldr	r2, [pc, #100]	; (8045f68 <cmd_device_levels+0x88>)
 8045f02:	2100      	movs	r1, #0
 8045f04:	4620      	mov	r0, r4
 8045f06:	f010 fcda 	bl	80568be <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
 8045f0a:	2101      	movs	r1, #1
 8045f0c:	4620      	mov	r0, r4
 8045f0e:	f7ff ffbd 	bl	8045e8c <device_get_config_level>
	if (ret == false) {
 8045f12:	4601      	mov	r1, r0
 8045f14:	b918      	cbnz	r0, 8045f1e <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 8045f16:	4a13      	ldr	r2, [pc, #76]	; (8045f64 <cmd_device_levels+0x84>)
 8045f18:	4620      	mov	r0, r4
 8045f1a:	f010 fcd0 	bl	80568be <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
 8045f1e:	4a13      	ldr	r2, [pc, #76]	; (8045f6c <cmd_device_levels+0x8c>)
 8045f20:	2100      	movs	r1, #0
 8045f22:	4620      	mov	r0, r4
 8045f24:	f010 fccb 	bl	80568be <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
 8045f28:	2102      	movs	r1, #2
 8045f2a:	4620      	mov	r0, r4
 8045f2c:	f7ff ffae 	bl	8045e8c <device_get_config_level>
	if (ret == false) {
 8045f30:	4601      	mov	r1, r0
 8045f32:	b918      	cbnz	r0, 8045f3c <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 8045f34:	4a0b      	ldr	r2, [pc, #44]	; (8045f64 <cmd_device_levels+0x84>)
 8045f36:	4620      	mov	r0, r4
 8045f38:	f010 fcc1 	bl	80568be <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
 8045f3c:	4a0c      	ldr	r2, [pc, #48]	; (8045f70 <cmd_device_levels+0x90>)
 8045f3e:	2100      	movs	r1, #0
 8045f40:	4620      	mov	r0, r4
 8045f42:	f010 fcbc 	bl	80568be <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
 8045f46:	2103      	movs	r1, #3
 8045f48:	4620      	mov	r0, r4
 8045f4a:	f7ff ff9f 	bl	8045e8c <device_get_config_level>
	if (ret == false) {
 8045f4e:	4601      	mov	r1, r0
 8045f50:	b918      	cbnz	r0, 8045f5a <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 8045f52:	4a04      	ldr	r2, [pc, #16]	; (8045f64 <cmd_device_levels+0x84>)
 8045f54:	4620      	mov	r0, r4
 8045f56:	f010 fcb2 	bl	80568be <shell_fprintf>
}
 8045f5a:	2000      	movs	r0, #0
 8045f5c:	bd10      	pop	{r4, pc}
 8045f5e:	bf00      	nop
 8045f60:	08060194 	.word	0x08060194
 8045f64:	080601a3 	.word	0x080601a3
 8045f68:	080601ab 	.word	0x080601ab
 8045f6c:	080601ba 	.word	0x080601ba
 8045f70:	080601c8 	.word	0x080601c8

08045f74 <cmd_devmem>:
{
	mem_addr_t phys_addr, addr;
	uint32_t value = 0;
	uint8_t width;

	if (argc < 2 || argc > 4) {
 8045f74:	1e8b      	subs	r3, r1, #2
 8045f76:	2b02      	cmp	r3, #2
{
 8045f78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8045f7c:	4607      	mov	r7, r0
 8045f7e:	4688      	mov	r8, r1
 8045f80:	4614      	mov	r4, r2
	if (argc < 2 || argc > 4) {
 8045f82:	d837      	bhi.n	8045ff4 <cmd_devmem+0x80>
		return -EINVAL;
	}

	phys_addr = strtoul(argv[1], NULL, 16);
 8045f84:	2210      	movs	r2, #16
 8045f86:	2100      	movs	r1, #0
 8045f88:	6860      	ldr	r0, [r4, #4]
 8045f8a:	f00d f827 	bl	8052fdc <strtoul>
	shell_print(sh, "Mapped 0x%lx to 0x%lx\n", phys_addr, addr);
#else
	addr = phys_addr;
#endif /* defined(CONFIG_MMU) || defined(CONFIG_PCIE) */

	if (argc < 3) {
 8045f8e:	f1b8 0f02 	cmp.w	r8, #2
	phys_addr = strtoul(argv[1], NULL, 16);
 8045f92:	4606      	mov	r6, r0
	if (argc < 3) {
 8045f94:	d022      	beq.n	8045fdc <cmd_devmem+0x68>
		width = 32;
	} else {
		width = strtoul(argv[2], NULL, 10);
 8045f96:	220a      	movs	r2, #10
 8045f98:	2100      	movs	r1, #0
 8045f9a:	68a0      	ldr	r0, [r4, #8]
 8045f9c:	f00d f81e 	bl	8052fdc <strtoul>
 8045fa0:	b2c5      	uxtb	r5, r0
	}

	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
 8045fa2:	462b      	mov	r3, r5
 8045fa4:	4a22      	ldr	r2, [pc, #136]	; (8046030 <cmd_devmem+0xbc>)
 8045fa6:	2100      	movs	r1, #0
 8045fa8:	4638      	mov	r0, r7
 8045faa:	f010 fc88 	bl	80568be <shell_fprintf>

	if (argc <= 3) {
 8045fae:	f1b8 0f04 	cmp.w	r8, #4
 8045fb2:	d022      	beq.n	8045ffa <cmd_devmem+0x86>
	switch (width) {
 8045fb4:	2d10      	cmp	r5, #16
 8045fb6:	d013      	beq.n	8045fe0 <cmd_devmem+0x6c>
 8045fb8:	2d20      	cmp	r5, #32
 8045fba:	d014      	beq.n	8045fe6 <cmd_devmem+0x72>
 8045fbc:	2d08      	cmp	r5, #8
 8045fbe:	d114      	bne.n	8045fea <cmd_devmem+0x76>
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
 8045fc0:	7833      	ldrb	r3, [r6, #0]
 8045fc2:	b2db      	uxtb	r3, r3
		value = sys_read32(addr);
 8045fc4:	2200      	movs	r2, #0
		shell_fprintf(sh, SHELL_NORMAL, "Read value 0x%lx\n", value);
 8045fc6:	2100      	movs	r1, #0
 8045fc8:	4638      	mov	r0, r7
 8045fca:	e9cd 3200 	strd	r3, r2, [sp]
 8045fce:	4a19      	ldr	r2, [pc, #100]	; (8046034 <cmd_devmem+0xc0>)
 8045fd0:	f010 fc75 	bl	80568be <shell_fprintf>
	int err = 0;
 8045fd4:	2000      	movs	r0, #0
	value = strtoul(argv[3], NULL, 16);

	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%lx\n", value);

	return memory_write(sh, addr, width, value);
}
 8045fd6:	b002      	add	sp, #8
 8045fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		width = 32;
 8045fdc:	2520      	movs	r5, #32
 8045fde:	e7e0      	b.n	8045fa2 <cmd_devmem+0x2e>
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
 8045fe0:	8833      	ldrh	r3, [r6, #0]
 8045fe2:	b29b      	uxth	r3, r3
 8045fe4:	e7ee      	b.n	8045fc4 <cmd_devmem+0x50>
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
 8045fe6:	6833      	ldr	r3, [r6, #0]
 8045fe8:	e7ec      	b.n	8045fc4 <cmd_devmem+0x50>
		shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
 8045fea:	4a13      	ldr	r2, [pc, #76]	; (8046038 <cmd_devmem+0xc4>)
 8045fec:	2100      	movs	r1, #0
 8045fee:	4638      	mov	r0, r7
 8045ff0:	f010 fc65 	bl	80568be <shell_fprintf>
		return -EINVAL;
 8045ff4:	f06f 0015 	mvn.w	r0, #21
 8045ff8:	e7ed      	b.n	8045fd6 <cmd_devmem+0x62>
	value = strtoul(argv[3], NULL, 16);
 8045ffa:	2210      	movs	r2, #16
 8045ffc:	2100      	movs	r1, #0
 8045ffe:	68e0      	ldr	r0, [r4, #12]
 8046000:	f00c ffec 	bl	8052fdc <strtoul>
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%lx\n", value);
 8046004:	4a0d      	ldr	r2, [pc, #52]	; (804603c <cmd_devmem+0xc8>)
 8046006:	4603      	mov	r3, r0
	value = strtoul(argv[3], NULL, 16);
 8046008:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%lx\n", value);
 804600a:	2100      	movs	r1, #0
 804600c:	4638      	mov	r0, r7
 804600e:	f010 fc56 	bl	80568be <shell_fprintf>
	switch (width) {
 8046012:	2d10      	cmp	r5, #16
 8046014:	d006      	beq.n	8046024 <cmd_devmem+0xb0>
 8046016:	2d20      	cmp	r5, #32
 8046018:	d007      	beq.n	804602a <cmd_devmem+0xb6>
 804601a:	2d08      	cmp	r5, #8
 804601c:	d1e5      	bne.n	8045fea <cmd_devmem+0x76>
		sys_write8(value, addr);
 804601e:	b2e4      	uxtb	r4, r4
	*(volatile uint8_t *)addr = data;
 8046020:	7034      	strb	r4, [r6, #0]
 8046022:	e7d7      	b.n	8045fd4 <cmd_devmem+0x60>
		sys_write16(value, addr);
 8046024:	b2a4      	uxth	r4, r4
	*(volatile uint16_t *)addr = data;
 8046026:	8034      	strh	r4, [r6, #0]
 8046028:	e7d4      	b.n	8045fd4 <cmd_devmem+0x60>
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
 804602a:	6034      	str	r4, [r6, #0]
 804602c:	e7d2      	b.n	8045fd4 <cmd_devmem+0x60>
 804602e:	bf00      	nop
 8046030:	08060225 	.word	0x08060225
 8046034:	08060250 	.word	0x08060250
 8046038:	0806023a 	.word	0x0806023a
 804603c:	08060262 	.word	0x08060262

08046040 <set_bypass.isra.0>:
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
 8046040:	b570      	push	{r4, r5, r6, lr}
	if (bypass && in_use) {
 8046042:	4e0e      	ldr	r6, [pc, #56]	; (804607c <set_bypass.isra.0+0x3c>)
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
 8046044:	4604      	mov	r4, r0
	if (bypass && in_use) {
 8046046:	460d      	mov	r5, r1
 8046048:	7833      	ldrb	r3, [r6, #0]
 804604a:	b131      	cbz	r1, 804605a <set_bypass.isra.0+0x1a>
 804604c:	b12b      	cbz	r3, 804605a <set_bypass.isra.0+0x1a>
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
 804604e:	4a0c      	ldr	r2, [pc, #48]	; (8046080 <set_bypass.isra.0+0x40>)
 8046050:	2102      	movs	r1, #2
}
 8046052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
 8046056:	f010 bc32 	b.w	80568be <shell_fprintf>
	in_use = !in_use;
 804605a:	f083 0301 	eor.w	r3, r3, #1
 804605e:	7033      	strb	r3, [r6, #0]
	if (in_use) {
 8046060:	b133      	cbz	r3, 8046070 <set_bypass.isra.0+0x30>
		shell_print(sh, "Loading...\npress ctrl-x ctrl-q to escape");
 8046062:	4a08      	ldr	r2, [pc, #32]	; (8046084 <set_bypass.isra.0+0x44>)
 8046064:	2100      	movs	r1, #0
 8046066:	4620      	mov	r0, r4
 8046068:	f010 fc29 	bl	80568be <shell_fprintf>
		in_use = true;
 804606c:	2301      	movs	r3, #1
 804606e:	7033      	strb	r3, [r6, #0]
	shell_set_bypass(sh, bypass);
 8046070:	4629      	mov	r1, r5
 8046072:	4620      	mov	r0, r4
}
 8046074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_set_bypass(sh, bypass);
 8046078:	f010 bc45 	b.w	8056906 <shell_set_bypass>
 804607c:	20038f1a 	.word	0x20038f1a
 8046080:	08060277 	.word	0x08060277
 8046084:	080602b2 	.word	0x080602b2

08046088 <bypass_cb>:
{
 8046088:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
 804608a:	4c3d      	ldr	r4, [pc, #244]	; (8046180 <bypass_cb+0xf8>)
 804608c:	7823      	ldrb	r3, [r4, #0]
 804608e:	2b18      	cmp	r3, #24
 8046090:	d102      	bne.n	8046098 <bypass_cb+0x10>
 8046092:	780b      	ldrb	r3, [r1, #0]
 8046094:	2b11      	cmp	r3, #17
 8046096:	d031      	beq.n	80460fc <bypass_cb+0x74>
 8046098:	3a01      	subs	r2, #1
 804609a:	460b      	mov	r3, r1
 804609c:	1855      	adds	r5, r2, r1
		for (int i = 0; i < (len - 1); i++) {
 804609e:	429d      	cmp	r5, r3
 80460a0:	d125      	bne.n	80460ee <bypass_cb+0x66>
	tail = recv[len - 1];
 80460a2:	5c8b      	ldrb	r3, [r1, r2]
	if (is_ascii(*recv)) {
 80460a4:	780a      	ldrb	r2, [r1, #0]
	tail = recv[len - 1];
 80460a6:	7023      	strb	r3, [r4, #0]
	return (data >= 0x30 && data <= 0x39) || (data >= 0x61 && data <= 0x66) ||
 80460a8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80460ac:	4c35      	ldr	r4, [pc, #212]	; (8046184 <bypass_cb+0xfc>)
 80460ae:	2b09      	cmp	r3, #9
 80460b0:	d904      	bls.n	80460bc <bypass_cb+0x34>
	if (is_ascii(*recv)) {
 80460b2:	f022 0320 	bic.w	r3, r2, #32
 80460b6:	3b41      	subs	r3, #65	; 0x41
 80460b8:	2b05      	cmp	r3, #5
 80460ba:	d804      	bhi.n	80460c6 <bypass_cb+0x3e>
		chunk[chunk_element] = *recv;
 80460bc:	6823      	ldr	r3, [r4, #0]
 80460be:	4932      	ldr	r1, [pc, #200]	; (8046188 <bypass_cb+0x100>)
 80460c0:	54ca      	strb	r2, [r1, r3]
		chunk_element++;
 80460c2:	3301      	adds	r3, #1
 80460c4:	6023      	str	r3, [r4, #0]
	if (chunk_element == 2) {
 80460c6:	6823      	ldr	r3, [r4, #0]
 80460c8:	2b02      	cmp	r3, #2
 80460ca:	d134      	bne.n	8046136 <bypass_cb+0xae>
		byte = (uint8_t)strtoul(chunk, NULL, 16);
 80460cc:	2210      	movs	r2, #16
 80460ce:	2100      	movs	r1, #0
 80460d0:	482d      	ldr	r0, [pc, #180]	; (8046188 <bypass_cb+0x100>)
 80460d2:	f00c ff83 	bl	8052fdc <strtoul>
		*bytes = byte;
 80460d6:	4a2d      	ldr	r2, [pc, #180]	; (804618c <bypass_cb+0x104>)
		byte = (uint8_t)strtoul(chunk, NULL, 16);
 80460d8:	6813      	ldr	r3, [r2, #0]
 80460da:	f803 0b01 	strb.w	r0, [r3], #1
		bytes++;
 80460de:	6013      	str	r3, [r2, #0]
		sum++;
 80460e0:	4a2b      	ldr	r2, [pc, #172]	; (8046190 <bypass_cb+0x108>)
 80460e2:	6813      	ldr	r3, [r2, #0]
 80460e4:	3301      	adds	r3, #1
 80460e6:	6013      	str	r3, [r2, #0]
		chunk_element = 0;
 80460e8:	2300      	movs	r3, #0
 80460ea:	6023      	str	r3, [r4, #0]
 80460ec:	e023      	b.n	8046136 <bypass_cb+0xae>
			if (recv[i] == CHAR_CAN && recv[i + 1] == CHAR_DC1) {
 80460ee:	f813 6b01 	ldrb.w	r6, [r3], #1
 80460f2:	2e18      	cmp	r6, #24
 80460f4:	d1d3      	bne.n	804609e <bypass_cb+0x16>
 80460f6:	781e      	ldrb	r6, [r3, #0]
 80460f8:	2e11      	cmp	r6, #17
 80460fa:	d1d0      	bne.n	804609e <bypass_cb+0x16>
		shell_print(sh, "Number of bytes read: %d", sum);
 80460fc:	4c24      	ldr	r4, [pc, #144]	; (8046190 <bypass_cb+0x108>)
 80460fe:	2100      	movs	r1, #0
 8046100:	4a24      	ldr	r2, [pc, #144]	; (8046194 <bypass_cb+0x10c>)
 8046102:	6823      	ldr	r3, [r4, #0]
 8046104:	9001      	str	r0, [sp, #4]
 8046106:	f010 fbda 	bl	80568be <shell_fprintf>
		set_bypass(sh, NULL);
 804610a:	9801      	ldr	r0, [sp, #4]
 804610c:	2100      	movs	r1, #0
 804610e:	f7ff ff97 	bl	8046040 <set_bypass.isra.0>
		if (!littleendian) {
 8046112:	4b21      	ldr	r3, [pc, #132]	; (8046198 <bypass_cb+0x110>)
 8046114:	7818      	ldrb	r0, [r3, #0]
 8046116:	b970      	cbnz	r0, 8046136 <bypass_cb+0xae>
 8046118:	4a20      	ldr	r2, [pc, #128]	; (804619c <bypass_cb+0x114>)
 804611a:	6823      	ldr	r3, [r4, #0]
 804611c:	6811      	ldr	r1, [r2, #0]
			while (sum > 4) {
 804611e:	2b04      	cmp	r3, #4
 8046120:	dc0b      	bgt.n	804613a <bypass_cb+0xb2>
 8046122:	b108      	cbz	r0, 8046128 <bypass_cb+0xa0>
 8046124:	6011      	str	r1, [r2, #0]
 8046126:	6023      	str	r3, [r4, #0]
			if (sum % 4 == 0) {
 8046128:	f013 0103 	ands.w	r1, r3, #3
 804612c:	d10c      	bne.n	8046148 <bypass_cb+0xc0>
				*data = __bswap_32(*data);
 804612e:	6812      	ldr	r2, [r2, #0]
 8046130:	6813      	ldr	r3, [r2, #0]
 8046132:	ba1b      	rev	r3, r3
				*data = __bswap_16(*data);
 8046134:	6013      	str	r3, [r2, #0]
}
 8046136:	b002      	add	sp, #8
 8046138:	bd70      	pop	{r4, r5, r6, pc}
				*data = __bswap_32(*data);
 804613a:	6808      	ldr	r0, [r1, #0]
 804613c:	3b04      	subs	r3, #4
 804613e:	ba00      	rev	r0, r0
 8046140:	f841 0b04 	str.w	r0, [r1], #4
				data++;
 8046144:	2001      	movs	r0, #1
 8046146:	e7ea      	b.n	804611e <bypass_cb+0x96>
			} else if (sum % 4 == 2) {
 8046148:	425b      	negs	r3, r3
 804614a:	f003 0303 	and.w	r3, r3, #3
 804614e:	bf58      	it	pl
 8046150:	4259      	negpl	r1, r3
 8046152:	2902      	cmp	r1, #2
 8046154:	d104      	bne.n	8046160 <bypass_cb+0xd8>
				*data = __bswap_16(*data);
 8046156:	6812      	ldr	r2, [r2, #0]
 8046158:	8813      	ldrh	r3, [r2, #0]
 804615a:	ba5b      	rev16	r3, r3
 804615c:	b29b      	uxth	r3, r3
 804615e:	e7e9      	b.n	8046134 <bypass_cb+0xac>
			} else if (sum % 4 == 3) {
 8046160:	2903      	cmp	r1, #3
 8046162:	d1e8      	bne.n	8046136 <bypass_cb+0xae>
				*data = __bswap_24(*data);
 8046164:	6810      	ldr	r0, [r2, #0]
 8046166:	6802      	ldr	r2, [r0, #0]
 8046168:	0411      	lsls	r1, r2, #16
 804616a:	f3c2 4307 	ubfx	r3, r2, #16, #8
 804616e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8046172:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8046176:	430b      	orrs	r3, r1
 8046178:	4313      	orrs	r3, r2
 804617a:	6003      	str	r3, [r0, #0]
 804617c:	e7db      	b.n	8046136 <bypass_cb+0xae>
 804617e:	bf00      	nop
 8046180:	20038f1c 	.word	0x20038f1c
 8046184:	200372e8 	.word	0x200372e8
 8046188:	20038f18 	.word	0x20038f18
 804618c:	200372e4 	.word	0x200372e4
 8046190:	200372f0 	.word	0x200372f0
 8046194:	080602dc 	.word	0x080602dc
 8046198:	20038f1b 	.word	0x20038f1b
 804619c:	200372ec 	.word	0x200372ec

080461a0 <cmd_load>:
{
 80461a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	littleendian = false;
 80461a4:	2300      	movs	r3, #0
{
 80461a6:	460d      	mov	r5, r1
	chunk_element = 0;
 80461a8:	492d      	ldr	r1, [pc, #180]	; (8046260 <cmd_load+0xc0>)
{
 80461aa:	4606      	mov	r6, r0
	littleendian = false;
 80461ac:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8046274 <cmd_load+0xd4>
 80461b0:	4614      	mov	r4, r2
	chunk_element = 0;
 80461b2:	600b      	str	r3, [r1, #0]
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
 80461b4:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8046278 <cmd_load+0xd8>
	sum = 0;
 80461b8:	492a      	ldr	r1, [pc, #168]	; (8046264 <cmd_load+0xc4>)
		if (!strncmp(arg, "-e", 2)) {
 80461ba:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 804627c <cmd_load+0xdc>
			shell_print(sh, "Unknown option \"%s\"", arg);
 80461be:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8046280 <cmd_load+0xe0>
	littleendian = false;
 80461c2:	f888 3000 	strb.w	r3, [r8]
	sum = 0;
 80461c6:	600b      	str	r3, [r1, #0]
	while (argc >= 2) {
 80461c8:	2d01      	cmp	r5, #1
 80461ca:	4627      	mov	r7, r4
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
 80461cc:	f854 3f04 	ldr.w	r3, [r4, #4]!
	while (argc >= 2) {
 80461d0:	d924      	bls.n	804621c <cmd_load+0x7c>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
 80461d2:	4618      	mov	r0, r3
 80461d4:	2202      	movs	r2, #2
 80461d6:	4649      	mov	r1, r9
 80461d8:	9301      	str	r3, [sp, #4]
 80461da:	f014 ff7b 	bl	805b0d4 <strncmp>
 80461de:	9b01      	ldr	r3, [sp, #4]
 80461e0:	b990      	cbnz	r0, 8046208 <cmd_load+0x68>
 80461e2:	6822      	ldr	r2, [r4, #0]
 80461e4:	7892      	ldrb	r2, [r2, #2]
 80461e6:	3a00      	subs	r2, #0
 80461e8:	bf18      	it	ne
 80461ea:	2201      	movne	r2, #1
 80461ec:	4413      	add	r3, r2
		if (!strncmp(arg, "-e", 2)) {
 80461ee:	4651      	mov	r1, sl
 80461f0:	2202      	movs	r2, #2
 80461f2:	4618      	mov	r0, r3
 80461f4:	9301      	str	r3, [sp, #4]
 80461f6:	f014 ff6d 	bl	805b0d4 <strncmp>
 80461fa:	9b01      	ldr	r3, [sp, #4]
 80461fc:	b930      	cbnz	r0, 804620c <cmd_load+0x6c>
			littleendian = true;
 80461fe:	2301      	movs	r3, #1
 8046200:	f888 3000 	strb.w	r3, [r8]
		argc--;
 8046204:	3d01      	subs	r5, #1
 8046206:	e7df      	b.n	80461c8 <cmd_load+0x28>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
 8046208:	2200      	movs	r2, #0
 804620a:	e7ef      	b.n	80461ec <cmd_load+0x4c>
		} else if (!strcmp(arg, "--")) {
 804620c:	4618      	mov	r0, r3
 804620e:	4649      	mov	r1, r9
 8046210:	9301      	str	r3, [sp, #4]
 8046212:	f7fa fb17 	bl	8040844 <strcmp>
 8046216:	9b01      	ldr	r3, [sp, #4]
 8046218:	b9b0      	cbnz	r0, 8046248 <cmd_load+0xa8>
			argv++;
 804621a:	3704      	adds	r7, #4
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
 804621c:	2200      	movs	r2, #0
 804621e:	6878      	ldr	r0, [r7, #4]
 8046220:	4611      	mov	r1, r2
 8046222:	f00c fe5f 	bl	8052ee4 <strtol>
	data = (uint32_t *)strtol(argv[1], NULL, 0);
 8046226:	2200      	movs	r2, #0
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
 8046228:	4b0f      	ldr	r3, [pc, #60]	; (8046268 <cmd_load+0xc8>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
 804622a:	4611      	mov	r1, r2
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
 804622c:	6018      	str	r0, [r3, #0]
	data = (uint32_t *)strtol(argv[1], NULL, 0);
 804622e:	6878      	ldr	r0, [r7, #4]
 8046230:	f00c fe58 	bl	8052ee4 <strtol>
 8046234:	4b0d      	ldr	r3, [pc, #52]	; (804626c <cmd_load+0xcc>)
	set_bypass(sh, bypass_cb);
 8046236:	490e      	ldr	r1, [pc, #56]	; (8046270 <cmd_load+0xd0>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
 8046238:	6018      	str	r0, [r3, #0]
	set_bypass(sh, bypass_cb);
 804623a:	4630      	mov	r0, r6
 804623c:	f7ff ff00 	bl	8046040 <set_bypass.isra.0>
}
 8046240:	2000      	movs	r0, #0
 8046242:	b003      	add	sp, #12
 8046244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (arg[0] == '-' && arg[1]) {
 8046248:	781a      	ldrb	r2, [r3, #0]
 804624a:	2a2d      	cmp	r2, #45	; 0x2d
 804624c:	d1e6      	bne.n	804621c <cmd_load+0x7c>
 804624e:	785a      	ldrb	r2, [r3, #1]
 8046250:	2a00      	cmp	r2, #0
 8046252:	d0e3      	beq.n	804621c <cmd_load+0x7c>
			shell_print(sh, "Unknown option \"%s\"", arg);
 8046254:	465a      	mov	r2, fp
 8046256:	2100      	movs	r1, #0
 8046258:	4630      	mov	r0, r6
 804625a:	f010 fb30 	bl	80568be <shell_fprintf>
 804625e:	e7d1      	b.n	8046204 <cmd_load+0x64>
 8046260:	200372e8 	.word	0x200372e8
 8046264:	200372f0 	.word	0x200372f0
 8046268:	200372e4 	.word	0x200372e4
 804626c:	200372ec 	.word	0x200372ec
 8046270:	08046089 	.word	0x08046089
 8046274:	20038f1b 	.word	0x20038f1b
 8046278:	080602f6 	.word	0x080602f6
 804627c:	080602f9 	.word	0x080602f9
 8046280:	080602fc 	.word	0x080602fc

08046284 <shell_internal_help_print>:
{
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
 8046284:	6881      	ldr	r1, [r0, #8]
{
 8046286:	b510      	push	{r4, lr}
 8046288:	4604      	mov	r4, r0
	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
 804628a:	3108      	adds	r1, #8
 804628c:	f001 fb9a 	bl	80479c4 <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
 8046290:	4a03      	ldr	r2, [pc, #12]	; (80462a0 <shell_internal_help_print+0x1c>)
 8046292:	68a1      	ldr	r1, [r4, #8]
 8046294:	4620      	mov	r0, r4
 8046296:	3108      	adds	r1, #8
				  "Subcommands:\n");
}
 8046298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
 804629c:	f001 bb1a 	b.w	80478d4 <z_shell_help_subcmd_print>
 80462a0:	0806039e 	.word	0x0806039e

080462a4 <z_cursor_next_line_move.isra.0>:
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void z_cursor_next_line_move(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
 80462a4:	4901      	ldr	r1, [pc, #4]	; (80462ac <z_cursor_next_line_move.isra.0+0x8>)
 80462a6:	f010 ba3f 	b.w	8056728 <z_shell_raw_fprintf>
 80462aa:	bf00      	nop
 80462ac:	08060044 	.word	0x08060044

080462b0 <history_handle>:

	z_shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
 80462b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80462b2:	4604      	mov	r4, r0
	return ret;
}

static inline bool z_flag_history_exit_get(const struct shell *shell)
{
	return shell->ctx->internal.flags.history_exit == 1;
 80462b4:	6880      	ldr	r0, [r0, #8]
 80462b6:	460d      	mov	r5, r1
 80462b8:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (z_flag_history_exit_get(shell)) {
 80462bc:	061b      	lsls	r3, r3, #24
 80462be:	d505      	bpl.n	80462cc <history_handle+0x1c>
		z_flag_history_exit_set(shell, false);
 80462c0:	2100      	movs	r1, #0
 80462c2:	f010 fa72 	bl	80567aa <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(shell->history);
 80462c6:	68e0      	ldr	r0, [r4, #12]
 80462c8:	f010 fed5 	bl	8057076 <z_shell_history_mode_exit>
 *
 * @return True if in browsing mode.
 */
static inline bool z_shell_history_active(struct shell_history *history)
{
	return (history->current) ? true : false;
 80462cc:	68e3      	ldr	r3, [r4, #12]
	}

	/* Backup command if history is entered */
	if (!z_shell_history_active(shell->history)) {
 80462ce:	68db      	ldr	r3, [r3, #12]
 80462d0:	b963      	cbnz	r3, 80462ec <history_handle+0x3c>
		if (up) {
 80462d2:	b39d      	cbz	r5, 804633c <history_handle+0x8c>
			uint16_t cmd_len = z_shell_strlen(shell->ctx->cmd_buff);
 80462d4:	68a0      	ldr	r0, [r4, #8]
 80462d6:	3042      	adds	r0, #66	; 0x42
 80462d8:	f010 fa20 	bl	805671c <z_shell_strlen>

			if (cmd_len) {
 80462dc:	68a3      	ldr	r3, [r4, #8]
 80462de:	b378      	cbz	r0, 8046340 <history_handle+0x90>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
 80462e0:	f103 0142 	add.w	r1, r3, #66	; 0x42
 80462e4:	f503 70a1 	add.w	r0, r3, #322	; 0x142
 80462e8:	f014 feec 	bl	805b0c4 <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = z_shell_history_get(shell->history, up,
					   shell->ctx->cmd_buff, &len);
 80462ec:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(shell->history, up,
 80462ee:	f10d 0306 	add.w	r3, sp, #6
 80462f2:	4629      	mov	r1, r5
 80462f4:	68e0      	ldr	r0, [r4, #12]
 80462f6:	3242      	adds	r2, #66	; 0x42
 80462f8:	f010 fec0 	bl	805707c <z_shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
 80462fc:	b958      	cbnz	r0, 8046316 <history_handle+0x66>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
 80462fe:	68a0      	ldr	r0, [r4, #8]
 8046300:	f500 71a1 	add.w	r1, r0, #322	; 0x142
 8046304:	3042      	adds	r0, #66	; 0x42
 8046306:	f014 fedd 	bl	805b0c4 <strcpy>
		len = z_shell_strlen(shell->ctx->cmd_buff);
 804630a:	68a0      	ldr	r0, [r4, #8]
 804630c:	3042      	adds	r0, #66	; 0x42
 804630e:	f010 fa05 	bl	805671c <z_shell_strlen>
 8046312:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	z_shell_op_cursor_home_move(shell);
 8046316:	4620      	mov	r0, r4
 8046318:	f010 fc9a 	bl	8056c50 <z_shell_op_cursor_home_move>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
 804631c:	4a0a      	ldr	r2, [pc, #40]	; (8046348 <history_handle+0x98>)
 804631e:	490b      	ldr	r1, [pc, #44]	; (804634c <history_handle+0x9c>)
 8046320:	6960      	ldr	r0, [r4, #20]
 8046322:	f010 fa01 	bl	8056728 <z_shell_raw_fprintf>
	z_clear_eos(shell);
	z_shell_print_cmd(shell);
 8046326:	4620      	mov	r0, r4
 8046328:	f001 f844 	bl	80473b4 <z_shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
 804632c:	68a3      	ldr	r3, [r4, #8]
 804632e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
	shell->ctx->cmd_buff_len = len;
	z_shell_op_cond_next_line(shell);
 8046332:	4620      	mov	r0, r4
	shell->ctx->cmd_buff_pos = len;
 8046334:	87da      	strh	r2, [r3, #62]	; 0x3e
	shell->ctx->cmd_buff_len = len;
 8046336:	879a      	strh	r2, [r3, #60]	; 0x3c
	z_shell_op_cond_next_line(shell);
 8046338:	f010 fc33 	bl	8056ba2 <z_shell_op_cond_next_line>
}
 804633c:	b003      	add	sp, #12
 804633e:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
 8046340:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
 8046344:	e7d2      	b.n	80462ec <history_handle+0x3c>
 8046346:	bf00      	nop
 8046348:	08060685 	.word	0x08060685
 804634c:	0806018b 	.word	0x0806018b

08046350 <execute>:
 * the command handler without any preprocessing.
 * Because of that feature, command buffer is processed argument by argument and
 * decision on further processing is based on currently processed command.
 */
static int execute(const struct shell *shell)
{
 8046350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *parent = selected_cmd_get(shell);
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
 8046354:	2300      	movs	r3, #0
{
 8046356:	b09f      	sub	sp, #124	; 0x7c
 8046358:	4604      	mov	r4, r0
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
 804635a:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char quote;
	const char **argvp;
	char *cmd_buf = shell->ctx->cmd_buff;
 804635e:	6883      	ldr	r3, [r0, #8]
 8046360:	3342      	adds	r3, #66	; 0x42
 8046362:	9303      	str	r3, [sp, #12]
	bool has_last_handler = false;

	z_shell_op_cursor_end_move(shell);
 8046364:	f010 fc7a 	bl	8056c5c <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(shell)) {
 8046368:	4620      	mov	r0, r4
 804636a:	f010 fc04 	bl	8056b76 <z_shell_cursor_in_empty_line>
 804636e:	b910      	cbnz	r0, 8046376 <execute+0x26>
		z_cursor_next_line_move(shell);
 8046370:	6960      	ldr	r0, [r4, #20]
 8046372:	f7ff ff97 	bl	80462a4 <z_cursor_next_line_move.isra.0>
__ssp_bos_icheck3(memset, void *, int)
 8046376:	68a0      	ldr	r0, [r4, #8]
 8046378:	2214      	movs	r2, #20
 804637a:	2100      	movs	r1, #0
		argvp = &argv[1];
		active_cmd_prepare(parent, &shell->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
	} else {
		help_entry.help = NULL;
 804637c:	2600      	movs	r6, #0
 804637e:	3008      	adds	r0, #8
	size_t argc = 0, args_left = SIZE_MAX;
 8046380:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8046384:	f014 fd62 	bl	805ae4c <memset>
		z_shell_cmd_trim(shell);
 8046388:	4620      	mov	r0, r4
 804638a:	f000 ff77 	bl	804727c <z_shell_cmd_trim>
		history_put(shell, shell->ctx->cmd_buff,
 804638e:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(shell->history, line, length);
 8046390:	68e0      	ldr	r0, [r4, #12]
	size_t cmd_with_handler_lvl = 0;
 8046392:	46b1      	mov	r9, r6
	z_shell_history_put(shell->history, line, length);
 8046394:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
		z_shell_wildcard_prepare(shell);
 8046396:	46b2      	mov	sl, r6
	z_shell_history_put(shell->history, line, length);
 8046398:	3142      	adds	r1, #66	; 0x42
		z_shell_wildcard_prepare(shell);
 804639a:	af11      	add	r7, sp, #68	; 0x44
 804639c:	4635      	mov	r5, r6
 804639e:	46b3      	mov	fp, r6
	z_shell_history_put(shell->history, line, length);
 80463a0:	f010 fea3 	bl	80570ea <z_shell_history_put>
		z_shell_wildcard_prepare(shell);
 80463a4:	4620      	mov	r0, r4
 80463a6:	f011 f862 	bl	805746e <z_shell_wildcard_prepare>
 80463aa:	9602      	str	r6, [sp, #8]
		argvp = &argv[0];
	}

	/* Below loop is analyzing subcommands of found root command. */
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
 80463ac:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80463b0:	2a01      	cmp	r2, #1
 80463b2:	f000 80d6 	beq.w	8046562 <execute+0x212>
 80463b6:	2b0b      	cmp	r3, #11
 80463b8:	f240 80ae 	bls.w	8046518 <execute+0x1c8>
			cmd_lvl++;
		}

	}

	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
 80463bc:	9906      	ldr	r1, [sp, #24]
 80463be:	2902      	cmp	r1, #2
 80463c0:	f040 80ae 	bne.w	8046520 <execute+0x1d0>
		/* argc == 2 indicates that when command string was parsed
		 * there was more characters remaining. It means that number of
		 * arguments exceeds the limit.
		 */
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
 80463c4:	4b89      	ldr	r3, [pc, #548]	; (80465ec <execute+0x29c>)
 80463c6:	4a8a      	ldr	r2, [pc, #552]	; (80465f0 <execute+0x2a0>)
 80463c8:	e015      	b.n	80463f6 <execute+0xa6>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
 80463ca:	2302      	movs	r3, #2
 80463cc:	9a03      	ldr	r2, [sp, #12]
 80463ce:	4639      	mov	r1, r7
 80463d0:	a806      	add	r0, sp, #24
 80463d2:	f000 fe39 	bl	8047048 <z_shell_make_argv>
		cmd_buf = (char *)argvp[1];
 80463d6:	687b      	ldr	r3, [r7, #4]
 80463d8:	9303      	str	r3, [sp, #12]
		if (argc == 0) {
 80463da:	9b06      	ldr	r3, [sp, #24]
 80463dc:	b92b      	cbnz	r3, 80463ea <execute+0x9a>
			return -ENOEXEC;
 80463de:	f06f 0507 	mvn.w	r5, #7
	/* terminate arguments with NULL */
	argv[cmd_lvl] = NULL;
	/* Executing the deepest found handler. */
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
 80463e2:	4628      	mov	r0, r5
 80463e4:	b01f      	add	sp, #124	; 0x7c
 80463e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((argc == 1) && (quote != 0)) {
 80463ea:	2b01      	cmp	r3, #1
 80463ec:	d107      	bne.n	80463fe <execute+0xae>
 80463ee:	b130      	cbz	r0, 80463fe <execute+0xae>
			z_shell_fprintf(shell, SHELL_ERROR,
 80463f0:	4603      	mov	r3, r0
 80463f2:	4a80      	ldr	r2, [pc, #512]	; (80465f4 <execute+0x2a4>)
 80463f4:	2102      	movs	r1, #2
 80463f6:	4620      	mov	r0, r4
 80463f8:	f010 fcd9 	bl	8056dae <z_shell_fprintf>
 80463fc:	e7ef      	b.n	80463de <execute+0x8e>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
 80463fe:	9b05      	ldr	r3, [sp, #20]
 8046400:	b34b      	cbz	r3, 8046456 <execute+0x106>
		    z_shell_help_request(argvp[0])) {
 8046402:	6838      	ldr	r0, [r7, #0]
 8046404:	f001 fb02 	bl	8047a0c <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
 8046408:	b198      	cbz	r0, 8046432 <execute+0xe2>
			if (help_entry.help) {
 804640a:	b166      	cbz	r6, 8046426 <execute+0xd6>
				shell->ctx->active_cmd = help_entry;
 804640c:	68a5      	ldr	r5, [r4, #8]
 804640e:	960d      	str	r6, [sp, #52]	; 0x34
 8046410:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
 8046412:	ae0c      	add	r6, sp, #48	; 0x30
 8046414:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8046416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8046418:	6833      	ldr	r3, [r6, #0]
 804641a:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
 804641c:	4620      	mov	r0, r4
			return SHELL_CMD_HELP_PRINTED;
 804641e:	2501      	movs	r5, #1
			shell_internal_help_print(shell);
 8046420:	f7ff ff30 	bl	8046284 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
 8046424:	e7dd      	b.n	80463e2 <execute+0x92>
			z_shell_fprintf(shell, SHELL_ERROR,
 8046426:	4a74      	ldr	r2, [pc, #464]	; (80465f8 <execute+0x2a8>)
		z_shell_fprintf(shell, SHELL_ERROR,
 8046428:	2102      	movs	r1, #2
 804642a:	4620      	mov	r0, r4
 804642c:	f010 fcbf 	bl	8056dae <z_shell_fprintf>
		return false;
 8046430:	e7d5      	b.n	80463de <execute+0x8e>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
 8046432:	9b05      	ldr	r3, [sp, #20]
 8046434:	b17b      	cbz	r3, 8046456 <execute+0x106>
			status = z_shell_wildcard_process(shell, entry,
 8046436:	683a      	ldr	r2, [r7, #0]
 8046438:	4629      	mov	r1, r5
 804643a:	4620      	mov	r0, r4
 804643c:	f001 fc3c 	bl	8047cb8 <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
 8046440:	2802      	cmp	r0, #2
 8046442:	f000 808e 	beq.w	8046562 <execute+0x212>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
 8046446:	2803      	cmp	r0, #3
 8046448:	d005      	beq.n	8046456 <execute+0x106>
				++cmd_lvl;
 804644a:	9b05      	ldr	r3, [sp, #20]
 804644c:	3301      	adds	r3, #1
 804644e:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
 8046450:	2301      	movs	r3, #1
 8046452:	9302      	str	r3, [sp, #8]
				continue;
 8046454:	e7aa      	b.n	80463ac <execute+0x5c>
		if (has_last_handler == false) {
 8046456:	f1ba 0f00 	cmp.w	sl, #0
 804645a:	d105      	bne.n	8046468 <execute+0x118>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
 804645c:	aa07      	add	r2, sp, #28
 804645e:	6839      	ldr	r1, [r7, #0]
 8046460:	4658      	mov	r0, fp
 8046462:	f010 fad8 	bl	8056a16 <z_shell_find_cmd>
 8046466:	4605      	mov	r5, r0
		argvp++;
 8046468:	3704      	adds	r7, #4
		args_left--;
 804646a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (entry) {
 804646e:	2d00      	cmp	r5, #0
 8046470:	d040      	beq.n	80464f4 <execute+0x1a4>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
 8046472:	9a02      	ldr	r2, [sp, #8]
 8046474:	68eb      	ldr	r3, [r5, #12]
 8046476:	b142      	cbz	r2, 804648a <execute+0x13a>
 8046478:	b313      	cbz	r3, 80464c0 <execute+0x170>
		z_shell_op_cursor_end_move(shell);
 804647a:	4620      	mov	r0, r4
 804647c:	f010 fbee 	bl	8056c5c <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(shell);
 8046480:	4620      	mov	r0, r4
 8046482:	f010 fb8e 	bl	8056ba2 <z_shell_op_cond_next_line>
		z_shell_fprintf(shell, SHELL_ERROR,
 8046486:	4a5d      	ldr	r2, [pc, #372]	; (80465fc <execute+0x2ac>)
 8046488:	e7ce      	b.n	8046428 <execute+0xd8>
	if (entry->handler) {
 804648a:	b1cb      	cbz	r3, 80464c0 <execute+0x170>
		*active_cmd = *entry;
 804648c:	68a3      	ldr	r3, [r4, #8]
 804648e:	46ae      	mov	lr, r5
		*handler_lvl = *lvl;
 8046490:	f8dd 9014 	ldr.w	r9, [sp, #20]
		*active_cmd = *entry;
 8046494:	f103 0c08 	add.w	ip, r3, #8
 8046498:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 804649c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80464a0:	f8de 3000 	ldr.w	r3, [lr]
 80464a4:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
 80464a8:	68ab      	ldr	r3, [r5, #8]
 80464aa:	b94b      	cbnz	r3, 80464c0 <execute+0x170>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
 80464ac:	7c6b      	ldrb	r3, [r5, #17]
 80464ae:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
 80464b0:	bf01      	itttt	eq
 80464b2:	f895 8010 	ldrbeq.w	r8, [r5, #16]
			*lvl = *lvl + 1;
 80464b6:	f109 0301 	addeq.w	r3, r9, #1
			*args_left = entry->args.mandatory - 1;
 80464ba:	f108 38ff 	addeq.w	r8, r8, #4294967295	; 0xffffffff
			*lvl = *lvl + 1;
 80464be:	9305      	streq	r3, [sp, #20]
	if (entry->help) {
 80464c0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80464c4:	f1bc 0f00 	cmp.w	ip, #0
 80464c8:	d008      	beq.n	80464dc <execute+0x18c>
		*help_entry = *entry;
 80464ca:	46ae      	mov	lr, r5
 80464cc:	ae0c      	add	r6, sp, #48	; 0x30
 80464ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80464d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80464d4:	f8de 3000 	ldr.w	r3, [lr]
 80464d8:	6033      	str	r3, [r6, #0]
 80464da:	4666      	mov	r6, ip
 80464dc:	46ab      	mov	fp, r5
		if (args_left || (argc == 2)) {
 80464de:	f1b8 0f00 	cmp.w	r8, #0
 80464e2:	d103      	bne.n	80464ec <execute+0x19c>
 80464e4:	9b06      	ldr	r3, [sp, #24]
 80464e6:	2b02      	cmp	r3, #2
 80464e8:	f47f af60 	bne.w	80463ac <execute+0x5c>
			cmd_lvl++;
 80464ec:	9b05      	ldr	r3, [sp, #20]
 80464ee:	3301      	adds	r3, #1
 80464f0:	9305      	str	r3, [sp, #20]
 80464f2:	e75b      	b.n	80463ac <execute+0x5c>
			if (cmd_lvl == 0 &&
 80464f4:	9b05      	ldr	r3, [sp, #20]
 80464f6:	b963      	cbnz	r3, 8046512 <execute+0x1c2>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
 80464f8:	68a3      	ldr	r3, [r4, #8]
 80464fa:	69db      	ldr	r3, [r3, #28]
 80464fc:	b10b      	cbz	r3, 8046502 <execute+0x1b2>
				(!z_shell_in_select_mode(shell) ||
 80464fe:	68db      	ldr	r3, [r3, #12]
 8046500:	b93b      	cbnz	r3, 8046512 <execute+0x1c2>
				z_shell_fprintf(shell, SHELL_ERROR,
 8046502:	4b3f      	ldr	r3, [pc, #252]	; (8046600 <execute+0x2b0>)
 8046504:	2102      	movs	r1, #2
 8046506:	4a3f      	ldr	r2, [pc, #252]	; (8046604 <execute+0x2b4>)
 8046508:	4620      	mov	r0, r4
 804650a:	9300      	str	r3, [sp, #0]
 804650c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 804650e:	f010 fc4e 	bl	8056dae <z_shell_fprintf>
			has_last_handler = true;
 8046512:	f04f 0a01 	mov.w	sl, #1
 8046516:	e7e2      	b.n	80464de <execute+0x18e>
		&& args_left > 0) {
 8046518:	f1b8 0f00 	cmp.w	r8, #0
 804651c:	f47f af55 	bne.w	80463ca <execute+0x7a>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
 8046520:	9b02      	ldr	r3, [sp, #8]
 8046522:	b14b      	cbz	r3, 8046538 <execute+0x1e8>
		z_shell_wildcard_finalize(shell);
 8046524:	4620      	mov	r0, r4
 8046526:	f010 ffc7 	bl	80574b8 <z_shell_wildcard_finalize>
					shell->ctx->cmd_buff,
 804652a:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
 804652c:	230c      	movs	r3, #12
 804652e:	a911      	add	r1, sp, #68	; 0x44
 8046530:	3242      	adds	r2, #66	; 0x42
 8046532:	a805      	add	r0, sp, #20
 8046534:	f000 fd88 	bl	8047048 <z_shell_make_argv>
	argv[cmd_lvl] = NULL;
 8046538:	9d05      	ldr	r5, [sp, #20]
 804653a:	ab1e      	add	r3, sp, #120	; 0x78
 804653c:	2200      	movs	r2, #0
	if (shell->ctx->active_cmd.handler == NULL) {
 804653e:	68a0      	ldr	r0, [r4, #8]
	argv[cmd_lvl] = NULL;
 8046540:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8046544:	f843 2c34 	str.w	r2, [r3, #-52]
	if (shell->ctx->active_cmd.handler == NULL) {
 8046548:	6943      	ldr	r3, [r0, #20]
 804654a:	b973      	cbnz	r3, 804656a <execute+0x21a>
			if (help_entry->help == NULL) {
 804654c:	2e00      	cmp	r6, #0
 804654e:	f43f af46 	beq.w	80463de <execute+0x8e>
			if (help_entry->help != shell->ctx->active_cmd.help) {
 8046552:	68c3      	ldr	r3, [r0, #12]
 8046554:	42b3      	cmp	r3, r6
 8046556:	f43f af61 	beq.w	804641c <execute+0xcc>
				shell->ctx->active_cmd = *help_entry;
 804655a:	f100 0508 	add.w	r5, r0, #8
 804655e:	960d      	str	r6, [sp, #52]	; 0x34
 8046560:	e757      	b.n	8046412 <execute+0xc2>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
 8046562:	9b05      	ldr	r3, [sp, #20]
 8046564:	2b0b      	cmp	r3, #11
 8046566:	d9db      	bls.n	8046520 <execute+0x1d0>
 8046568:	e728      	b.n	80463bc <execute+0x6c>
	if (shell->ctx->active_cmd.args.mandatory) {
 804656a:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
 804656c:	eba5 0509 	sub.w	r5, r5, r9
	if (shell->ctx->active_cmd.args.mandatory) {
 8046570:	b1b3      	cbz	r3, 80465a0 <execute+0x250>
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
 8046572:	7e41      	ldrb	r1, [r0, #25]
				UINT16_MAX : opt8;
 8046574:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8046578:	29ff      	cmp	r1, #255	; 0xff
 804657a:	bf18      	it	ne
 804657c:	460a      	movne	r2, r1
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
 804657e:	429d      	cmp	r5, r3
 8046580:	d302      	bcc.n	8046588 <execute+0x238>
 8046582:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
 8046584:	429d      	cmp	r5, r3
 8046586:	d90b      	bls.n	80465a0 <execute+0x250>
		z_shell_fprintf(shell, SHELL_ERROR,
 8046588:	6883      	ldr	r3, [r0, #8]
 804658a:	2102      	movs	r1, #2
 804658c:	4a1e      	ldr	r2, [pc, #120]	; (8046608 <execute+0x2b8>)
 804658e:	4620      	mov	r0, r4
 8046590:	f010 fc0d 	bl	8056dae <z_shell_fprintf>
			shell_internal_help_print(shell);
 8046594:	4620      	mov	r0, r4
		return -EINVAL;
 8046596:	f06f 0515 	mvn.w	r5, #21
			shell_internal_help_print(shell);
 804659a:	f7ff fe73 	bl	8046284 <shell_internal_help_print>
	if (!ret_val) {
 804659e:	e720      	b.n	80463e2 <execute+0x92>

static inline bool z_flag_cmd_ctx_set(const struct shell *shell, bool val)
{
	bool ret;

	Z_SHELL_SET_FLAG_ATOMIC(shell, cmd_ctx, val, ret);
 80465a0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80465a4:	f500 7018 	add.w	r0, r0, #608	; 0x260
 80465a8:	f010 f883 	bl	80566b2 <atomic_or>
		k_mutex_unlock(&shell->ctx->wr_mtx);
 80465ac:	68a0      	ldr	r0, [r4, #8]
 80465ae:	f500 703d 	add.w	r0, r0, #756	; 0x2f4
 80465b2:	f010 f922 	bl	80567fa <k_mutex_unlock.isra.0>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
 80465b6:	68a3      	ldr	r3, [r4, #8]
 80465b8:	aa11      	add	r2, sp, #68	; 0x44
 80465ba:	4629      	mov	r1, r5
 80465bc:	695b      	ldr	r3, [r3, #20]
 80465be:	4620      	mov	r0, r4
 80465c0:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80465c4:	4798      	blx	r3
 80465c6:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 80465c8:	68a0      	ldr	r0, [r4, #8]
 80465ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80465ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80465d2:	f500 703d 	add.w	r0, r0, #756	; 0x2f4
 80465d6:	f010 f8b4 	bl	8056742 <k_mutex_lock.constprop.0.isra.0>
 80465da:	68a0      	ldr	r0, [r4, #8]
 80465dc:	f46f 3180 	mvn.w	r1, #65536	; 0x10000
 80465e0:	f500 7018 	add.w	r0, r0, #608	; 0x260
 80465e4:	f010 f874 	bl	80566d0 <atomic_and>
	return ret;
 80465e8:	e6fb      	b.n	80463e2 <execute+0x92>
 80465ea:	bf00      	nop
 80465ec:	08060421 	.word	0x08060421
 80465f0:	08060190 	.word	0x08060190
 80465f4:	080603ac 	.word	0x080603ac
 80465f8:	080603c0 	.word	0x080603c0
 80465fc:	080603de 	.word	0x080603de
 8046600:	0806040d 	.word	0x0806040d
 8046604:	0806071a 	.word	0x0806071a
 8046608:	08060445 	.word	0x08060445

0804660c <state_set.constprop.0>:
	shell->ctx->state = state;
 804660c:	6883      	ldr	r3, [r0, #8]
 804660e:	2202      	movs	r2, #2
static inline void state_set(const struct shell *shell, enum shell_state state)
 8046610:	b510      	push	{r4, lr}
	shell->ctx->state = state;
 8046612:	711a      	strb	r2, [r3, #4]
static inline void state_set(const struct shell *shell, enum shell_state state)
 8046614:	4604      	mov	r4, r0
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
 8046616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8046618:	b9ba      	cbnz	r2, 804664a <state_set.constprop.0+0x3e>
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
 804661a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
 804661e:	63da      	str	r2, [r3, #60]	; 0x3c
	shell->ctx->internal.flags.last_nl = val;
}

static inline bool z_flag_print_noinit_get(const struct shell *shell)
{
	return shell->ctx->internal.flags.print_noinit == 1;
 8046620:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
		if (z_flag_print_noinit_get(shell)) {
 8046624:	039b      	lsls	r3, r3, #14
 8046626:	d50b      	bpl.n	8046640 <state_set.constprop.0+0x34>
			z_shell_fprintf(shell, SHELL_WARNING, "%s",
 8046628:	2104      	movs	r1, #4
 804662a:	4b08      	ldr	r3, [pc, #32]	; (804664c <state_set.constprop.0+0x40>)
 804662c:	4a08      	ldr	r2, [pc, #32]	; (8046650 <state_set.constprop.0+0x44>)
 804662e:	f010 fbbe 	bl	8056dae <z_shell_fprintf>

static inline bool z_flag_print_noinit_set(const struct shell *shell, bool val)
{
	bool ret;

	Z_SHELL_SET_FLAG_ATOMIC(shell, print_noinit, val, ret);
 8046632:	68a0      	ldr	r0, [r4, #8]
 8046634:	f46f 3100 	mvn.w	r1, #131072	; 0x20000
 8046638:	f500 7018 	add.w	r0, r0, #608	; 0x260
 804663c:	f010 f848 	bl	80566d0 <atomic_and>
		z_shell_print_prompt_and_cmd(shell);
 8046640:	4620      	mov	r0, r4
}
 8046642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(shell);
 8046646:	f000 bfe9 	b.w	804761c <z_shell_print_prompt_and_cmd>
}
 804664a:	bd10      	pop	{r4, pc}
 804664c:	08060460 	.word	0x08060460
 8046650:	0806018b 	.word	0x0806018b

08046654 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
 8046654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8046658:	4604      	mov	r4, r0
	Z_SHELL_SET_FLAG_ATOMIC(shell, processing, val, ret);
 804665a:	6880      	ldr	r0, [r0, #8]
 804665c:	2110      	movs	r1, #16
 804665e:	f500 7018 	add.w	r0, r0, #608	; 0x260
 8046662:	ed2d 8b02 	vpush	{d8}
 8046666:	b0a9      	sub	sp, #164	; 0xa4
 8046668:	f010 f823 	bl	80566b2 <atomic_or>
	__ASSERT_NO_MSG(shell->ctx);

	/* atomically set the processing flag */
	z_flag_processing_set(shell, true);

	switch (shell->ctx->state) {
 804666c:	68a3      	ldr	r3, [r4, #8]
 804666e:	791b      	ldrb	r3, [r3, #4]
 8046670:	2b02      	cmp	r3, #2
 8046672:	d117      	bne.n	80466a4 <shell_process+0x50>
	size_t count = 0;
 8046674:	2300      	movs	r3, #0
 8046676:	9309      	str	r3, [sp, #36]	; 0x24
		shell_bypass_cb_t bypass = shell->ctx->bypass;
 8046678:	68a3      	ldr	r3, [r4, #8]
			(void)shell->iface->api->read(shell->iface, buf,
 804667a:	6860      	ldr	r0, [r4, #4]
		shell_bypass_cb_t bypass = shell->ctx->bypass;
 804667c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
			(void)shell->iface->api->read(shell->iface, buf,
 804667e:	6803      	ldr	r3, [r0, #0]
 8046680:	691d      	ldr	r5, [r3, #16]
 8046682:	ab09      	add	r3, sp, #36	; 0x24
		if (bypass) {
 8046684:	b1d6      	cbz	r6, 80466bc <shell_process+0x68>
			(void)shell->iface->api->read(shell->iface, buf,
 8046686:	2210      	movs	r2, #16
 8046688:	a91b      	add	r1, sp, #108	; 0x6c
 804668a:	47a8      	blx	r5
			if (count) {
 804668c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804668e:	b14a      	cbz	r2, 80466a4 <shell_process+0x50>
				bypass(shell, buf, count);
 8046690:	a91b      	add	r1, sp, #108	; 0x6c
 8046692:	4620      	mov	r0, r4
 8046694:	47b0      	blx	r6
				if (!(volatile shell_bypass_cb_t *)shell->ctx->bypass) {
 8046696:	68a3      	ldr	r3, [r4, #8]
 8046698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804669a:	2b00      	cmp	r3, #0
 804669c:	d1ec      	bne.n	8046678 <shell_process+0x24>
					state_set(shell, SHELL_STATE_ACTIVE);
 804669e:	4620      	mov	r0, r4
 80466a0:	f7ff ffb4 	bl	804660c <state_set.constprop.0>
 80466a4:	68a0      	ldr	r0, [r4, #8]
 80466a6:	f06f 0110 	mvn.w	r1, #16
 80466aa:	f500 7018 	add.w	r0, r0, #608	; 0x260
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(shell, false);
}
 80466ae:	b029      	add	sp, #164	; 0xa4
 80466b0:	ecbd 8b02 	vpop	{d8}
 80466b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80466b8:	f010 b80a 	b.w	80566d0 <atomic_and>
		(void)shell->iface->api->read(shell->iface, &data,
 80466bc:	2201      	movs	r2, #1
 80466be:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 80466c2:	47a8      	blx	r5
		if (count == 0) {
 80466c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80466c6:	2b00      	cmp	r3, #0
 80466c8:	d0ec      	beq.n	80466a4 <shell_process+0x50>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
 80466ca:	f99d 2023 	ldrsb.w	r2, [sp, #35]	; 0x23
		if (ascii_filter(data) != 0) {
 80466ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
 80466d2:	2a00      	cmp	r2, #0
		switch (shell->ctx->receive_state) {
 80466d4:	68a0      	ldr	r0, [r4, #8]
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
 80466d6:	dbcf      	blt.n	8046678 <shell_process+0x24>
		switch (shell->ctx->receive_state) {
 80466d8:	7942      	ldrb	r2, [r0, #5]
 80466da:	2a03      	cmp	r2, #3
 80466dc:	f200 82eb 	bhi.w	8046cb6 <shell_process+0x662>
 80466e0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80466e4:	026f0004 	.word	0x026f0004
 80466e8:	02e90286 	.word	0x02e90286
	if ((data != '\r') && (data != '\n')) {
 80466ec:	2b0d      	cmp	r3, #13
	shell->ctx->internal.flags.last_nl = val;
 80466ee:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
 80466f2:	d01b      	beq.n	804672c <shell_process+0xd8>
 80466f4:	2b0a      	cmp	r3, #10
 80466f6:	d019      	beq.n	804672c <shell_process+0xd8>
 80466f8:	f36f 220f 	bfc	r2, #8, #8
 80466fc:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
			switch (data) {
 8046700:	2b09      	cmp	r3, #9
 8046702:	d04d      	beq.n	80467a0 <shell_process+0x14c>
 8046704:	d833      	bhi.n	804676e <shell_process+0x11a>
 8046706:	2b00      	cmp	r3, #0
 8046708:	d0b6      	beq.n	8046678 <shell_process+0x24>
 804670a:	2b08      	cmp	r3, #8
 804670c:	f000 81c9 	beq.w	8046aa2 <shell_process+0x44e>
				if (isprint((int) data)) {
 8046710:	1c5a      	adds	r2, r3, #1
 8046712:	49b6      	ldr	r1, [pc, #728]	; (80469ec <shell_process+0x398>)
 8046714:	b2d2      	uxtb	r2, r2
 8046716:	5c52      	ldrb	r2, [r2, r1]
 8046718:	f012 0f97 	tst.w	r2, #151	; 0x97
 804671c:	f000 81cd 	beq.w	8046aba <shell_process+0x466>
					z_flag_history_exit_set(shell, true);
 8046720:	2101      	movs	r1, #1
 8046722:	f010 f842 	bl	80567aa <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(shell, data);
 8046726:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 804672a:	e0e3      	b.n	80468f4 <shell_process+0x2a0>
	if ((z_flag_last_nl_get(shell) == 0U) ||
 804672c:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
 8046730:	d005      	beq.n	804673e <shell_process+0xea>
	return shell->ctx->internal.flags.last_nl;
 8046732:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
 8046736:	f3c2 2207 	ubfx	r2, r2, #8, #8
 804673a:	4293      	cmp	r3, r2
 804673c:	d1e0      	bne.n	8046700 <shell_process+0xac>
	shell->ctx->internal.flags.last_nl = val;
 804673e:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
				if (!shell->ctx->cmd_buff_len) {
 8046742:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
 8046744:	f363 220f 	bfi	r2, r3, #8, #8
 8046748:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
 804674c:	b959      	cbnz	r1, 8046766 <shell_process+0x112>
	z_flag_history_exit_set(shell, false);
 804674e:	f010 f82c 	bl	80567aa <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(shell->history);
 8046752:	68e0      	ldr	r0, [r4, #12]
 8046754:	f010 fc8f 	bl	8057076 <z_shell_history_mode_exit>
					z_cursor_next_line_move(shell);
 8046758:	6960      	ldr	r0, [r4, #20]
 804675a:	f7ff fda3 	bl	80462a4 <z_cursor_next_line_move.isra.0>
		state_set(shell, SHELL_STATE_ACTIVE);
 804675e:	4620      	mov	r0, r4
 8046760:	f7ff ff54 	bl	804660c <state_set.constprop.0>
		break;
 8046764:	e788      	b.n	8046678 <shell_process+0x24>
					(void)execute(shell);
 8046766:	4620      	mov	r0, r4
 8046768:	f7ff fdf2 	bl	8046350 <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
 804676c:	e7f7      	b.n	804675e <shell_process+0x10a>
 804676e:	2b1b      	cmp	r3, #27
 8046770:	d013      	beq.n	804679a <shell_process+0x146>
 8046772:	2b7f      	cmp	r3, #127	; 0x7f
 8046774:	d1cc      	bne.n	8046710 <shell_process+0xbc>
	return shell->ctx->internal.flags.echo == 1;
 8046776:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
 804677a:	075e      	lsls	r6, r3, #29
 804677c:	f57f af7c 	bpl.w	8046678 <shell_process+0x24>
					z_flag_history_exit_set(shell, true);
 8046780:	2101      	movs	r1, #1
 8046782:	f010 f812 	bl	80567aa <z_flag_history_exit_set.isra.0>
	return shell->ctx->internal.flags.mode_delete == 1;
 8046786:	68a3      	ldr	r3, [r4, #8]
 8046788:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
					if (z_flag_mode_delete_get(shell)) {
 804678c:	065d      	lsls	r5, r3, #25
 804678e:	f100 8190 	bmi.w	8046ab2 <shell_process+0x45e>
		z_shell_op_char_delete(shell);
 8046792:	4620      	mov	r0, r4
 8046794:	f010 fb4b 	bl	8056e2e <z_shell_op_char_delete>
		break;
 8046798:	e76e      	b.n	8046678 <shell_process+0x24>
	shell->ctx->receive_state = state;
 804679a:	2301      	movs	r3, #1
 804679c:	7143      	strb	r3, [r0, #5]
}
 804679e:	e76b      	b.n	8046678 <shell_process+0x24>
	return shell->ctx->internal.flags.echo == 1;
 80467a0:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell) &&
 80467a4:	0759      	lsls	r1, r3, #29
 80467a6:	f57f af67 	bpl.w	8046678 <shell_process+0x24>
					z_flag_history_exit_set(shell, true);
 80467aa:	2101      	movs	r1, #1
 80467ac:	f00f fffd 	bl	80567aa <z_flag_history_exit_set.isra.0>
			shell->ctx->cmd_buff_len;
 80467b0:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
 80467b2:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 80467b4:	2bff      	cmp	r3, #255	; 0xff
 80467b6:	f43f af5f 	beq.w	8046678 <shell_process+0x24>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80467ba:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 80467bc:	f100 0142 	add.w	r1, r0, #66	; 0x42
 80467c0:	f500 70a1 	add.w	r0, r0, #322	; 0x142
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
 80467c4:	2500      	movs	r5, #0
 80467c6:	f014 fb06 	bl	805add6 <memcpy>
 80467ca:	68a2      	ldr	r2, [r4, #8]
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
 80467cc:	a91b      	add	r1, sp, #108	; 0x6c
 80467ce:	a80b      	add	r0, sp, #44	; 0x2c
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
 80467d0:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 80467d2:	4413      	add	r3, r2
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
 80467d4:	f502 72a1 	add.w	r2, r2, #322	; 0x142
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
 80467d8:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
 80467dc:	230c      	movs	r3, #12
 80467de:	f000 fc33 	bl	8047048 <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
 80467e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80467e4:	290c      	cmp	r1, #12
 80467e6:	f63f af47 	bhi.w	8046678 <shell_process+0x24>
	(*argv)[*argc] = NULL;
 80467ea:	ab28      	add	r3, sp, #160	; 0xa0
 80467ec:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80467f0:	f843 5c34 	str.w	r5, [r3, #-52]
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
 80467f4:	b151      	cbz	r1, 804680c <shell_process+0x1b8>
	int space = isspace((int)shell->ctx->cmd_buff[
 80467f6:	68a3      	ldr	r3, [r4, #8]
 80467f8:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80467fa:	4413      	add	r3, r2
 80467fc:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8046800:	4b7b      	ldr	r3, [pc, #492]	; (80469f0 <shell_process+0x39c>)
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
 8046802:	5cd3      	ldrb	r3, [r2, r3]
 8046804:	071a      	lsls	r2, r3, #28
 8046806:	d451      	bmi.n	80468ac <shell_process+0x258>
 8046808:	2901      	cmp	r1, #1
 804680a:	d14e      	bne.n	80468aa <shell_process+0x256>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
 804680c:	2500      	movs	r5, #0
 804680e:	950a      	str	r5, [sp, #40]	; 0x28
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
 8046810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8046812:	aa28      	add	r2, sp, #160	; 0xa0
	*cnt = 0;
 8046814:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
 8046816:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	size_t first = 0;
 804681a:	46b0      	mov	r8, r6
	size_t idx = 0;
 804681c:	4637      	mov	r7, r6
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
 804681e:	f853 ac34 	ldr.w	sl, [r3, #-52]
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
 8046822:	4650      	mov	r0, sl
 8046824:	f00f ff7a 	bl	805671c <z_shell_strlen>
 8046828:	4681      	mov	r9, r0
	*longest = 0U;
 804682a:	9603      	str	r6, [sp, #12]
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
 804682c:	aa16      	add	r2, sp, #88	; 0x58
 804682e:	4639      	mov	r1, r7
 8046830:	4628      	mov	r0, r5
 8046832:	f000 fcc5 	bl	80471c0 <z_shell_cmd_get>
 8046836:	4683      	mov	fp, r0
 8046838:	2800      	cmp	r0, #0
 804683a:	d143      	bne.n	80468c4 <shell_process+0x270>
	if (cnt == 1) {
 804683c:	2e01      	cmp	r6, #1
 804683e:	d162      	bne.n	8046906 <shell_process+0x2b2>
		autocomplete(shell, cmd, argv[arg_idx], first);
 8046840:	aa28      	add	r2, sp, #160	; 0xa0
 8046842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8046844:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
 8046848:	f853 0c34 	ldr.w	r0, [r3, #-52]
 804684c:	f00f ff66 	bl	805671c <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
 8046850:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
 8046852:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
 8046854:	4641      	mov	r1, r8
 8046856:	3208      	adds	r2, #8
 8046858:	4628      	mov	r0, r5
 804685a:	f000 fcb1 	bl	80471c0 <z_shell_cmd_get>
 804685e:	4605      	mov	r5, r0
	cmd_len = z_shell_strlen(match->syntax);
 8046860:	6800      	ldr	r0, [r0, #0]
 8046862:	f00f ff5b 	bl	805671c <z_shell_strlen>
	if (cmd_len != arg_len) {
 8046866:	4286      	cmp	r6, r0
 8046868:	d006      	beq.n	8046878 <shell_process+0x224>
		z_shell_op_completion_insert(shell,
 804686a:	1b82      	subs	r2, r0, r6
 804686c:	6829      	ldr	r1, [r5, #0]
 804686e:	4620      	mov	r0, r4
 8046870:	b292      	uxth	r2, r2
 8046872:	4431      	add	r1, r6
 8046874:	f010 fad9 	bl	8056e2a <z_shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
 8046878:	68a0      	ldr	r0, [r4, #8]
 804687a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 804687c:	4403      	add	r3, r0
 804687e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8046882:	4b5b      	ldr	r3, [pc, #364]	; (80469f0 <shell_process+0x39c>)
 8046884:	5cd1      	ldrb	r1, [r2, r3]
 8046886:	f011 0108 	ands.w	r1, r1, #8
 804688a:	d137      	bne.n	80468fc <shell_process+0x2a8>
	return shell->ctx->internal.flags.insert_mode == 1;
 804688c:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		if (z_flag_insert_mode_get(shell)) {
 8046890:	07db      	lsls	r3, r3, #31
 8046892:	d52e      	bpl.n	80468f2 <shell_process+0x29e>
			z_flag_insert_mode_set(shell, false);
 8046894:	f00f ffa2 	bl	80567dc <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(shell, ' ');
 8046898:	2120      	movs	r1, #32
 804689a:	4620      	mov	r0, r4
 804689c:	f000 fe8a 	bl	80475b4 <z_shell_op_char_insert>
			z_flag_insert_mode_set(shell, true);
 80468a0:	2101      	movs	r1, #1
 80468a2:	68a0      	ldr	r0, [r4, #8]
				z_flag_insert_mode_set(shell, !status);
 80468a4:	f00f ff9a 	bl	80567dc <z_flag_insert_mode_set.isra.0>
				break;
 80468a8:	e6e6      	b.n	8046678 <shell_process+0x24>
	search_argc = space ? *argc : *argc - 1;
 80468aa:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(shell), search_argc,
 80468ac:	2000      	movs	r0, #0
 80468ae:	ab0c      	add	r3, sp, #48	; 0x30
 80468b0:	aa1b      	add	r2, sp, #108	; 0x6c
 80468b2:	9300      	str	r3, [sp, #0]
 80468b4:	ab0a      	add	r3, sp, #40	; 0x28
 80468b6:	9001      	str	r0, [sp, #4]
 80468b8:	f010 f8d9 	bl	8056a6e <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
 80468bc:	4605      	mov	r5, r0
 80468be:	2800      	cmp	r0, #0
 80468c0:	d1a6      	bne.n	8046810 <shell_process+0x1bc>
 80468c2:	e6d9      	b.n	8046678 <shell_process+0x24>
	return (strncmp(candidate, str, len) == 0) ? true : false;
 80468c4:	464a      	mov	r2, r9
 80468c6:	4651      	mov	r1, sl
 80468c8:	f8db 0000 	ldr.w	r0, [fp]
 80468cc:	f014 fc02 	bl	805b0d4 <strncmp>
		if (is_candidate) {
 80468d0:	b968      	cbnz	r0, 80468ee <shell_process+0x29a>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
 80468d2:	f8db 0000 	ldr.w	r0, [fp]
 80468d6:	f7f9 ffbf 	bl	8040858 <strlen>
 80468da:	9b03      	ldr	r3, [sp, #12]
 80468dc:	4283      	cmp	r3, r0
 80468de:	bf38      	it	cc
 80468e0:	4603      	movcc	r3, r0
				*first_idx = idx;
 80468e2:	2e00      	cmp	r6, #0
 80468e4:	bf08      	it	eq
 80468e6:	46b8      	moveq	r8, r7
			(*cnt)++;
 80468e8:	3601      	adds	r6, #1
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
 80468ea:	b29b      	uxth	r3, r3
 80468ec:	9303      	str	r3, [sp, #12]
		idx++;
 80468ee:	3701      	adds	r7, #1
 80468f0:	e79c      	b.n	804682c <shell_process+0x1d8>
			z_shell_op_char_insert(shell, ' ');
 80468f2:	2120      	movs	r1, #32
					z_shell_op_char_insert(shell, data);
 80468f4:	4620      	mov	r0, r4
 80468f6:	f000 fe5d 	bl	80475b4 <z_shell_op_char_insert>
 80468fa:	e6bd      	b.n	8046678 <shell_process+0x24>
		z_shell_op_cursor_move(shell, 1);
 80468fc:	2101      	movs	r1, #1
 80468fe:	4620      	mov	r0, r4
 8046900:	f010 f982 	bl	8056c08 <z_shell_op_cursor_move>
 8046904:	e6b8      	b.n	8046678 <shell_process+0x24>
	} else if (cnt > 1) {
 8046906:	f67f aeb7 	bls.w	8046678 <shell_process+0x24>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
 804690a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 804690c:	aa28      	add	r2, sp, #160	; 0xa0
		shell->ctx->vt100_ctx.printed_cmd = 0;
 804690e:	46c1      	mov	r9, r8
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
 8046910:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8046914:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t str_len = z_shell_strlen(str);
 8046918:	4650      	mov	r0, sl
 804691a:	f00f feff 	bl	805671c <z_shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
 804691e:	68a3      	ldr	r3, [r4, #8]
	size_t str_len = z_shell_strlen(str);
 8046920:	ee08 0a90 	vmov	s17, r0
		shell->ctx->vt100_ctx.printed_cmd = 0;
 8046924:	9604      	str	r6, [sp, #16]
 8046926:	f8a3 b030 	strh.w	fp, [r3, #48]	; 0x30
	longest_option += z_shell_strlen(tab);
 804692a:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 80469f4 <shell_process+0x3a0>
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
 804692e:	68a2      	ldr	r2, [r4, #8]
 8046930:	4649      	mov	r1, r9
 8046932:	4628      	mov	r0, r5
		idx++;
 8046934:	f109 0901 	add.w	r9, r9, #1
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
 8046938:	3208      	adds	r2, #8
 804693a:	f000 fc41 	bl	80471c0 <z_shell_cmd_get>
 804693e:	4607      	mov	r7, r0
		if (str && match->syntax &&
 8046940:	f1ba 0f00 	cmp.w	sl, #0
 8046944:	d158      	bne.n	80469f8 <shell_process+0x3a4>
		tab_item_print(shell, match->syntax, longest);
 8046946:	683f      	ldr	r7, [r7, #0]
	if (option == NULL) {
 8046948:	2f00      	cmp	r7, #0
 804694a:	d160      	bne.n	8046a0e <shell_process+0x3ba>
		shell->ctx->vt100_ctx.printed_cmd = 0;
 804694c:	68a2      	ldr	r2, [r4, #8]
 804694e:	8617      	strh	r7, [r2, #48]	; 0x30
	while (cnt) {
 8046950:	9b04      	ldr	r3, [sp, #16]
 8046952:	3b01      	subs	r3, #1
 8046954:	9304      	str	r3, [sp, #16]
 8046956:	d1ea      	bne.n	804692e <shell_process+0x2da>
	z_cursor_next_line_move(shell);
 8046958:	6960      	ldr	r0, [r4, #20]
	size_t idx = first + 1;
 804695a:	f108 0901 	add.w	r9, r8, #1
	z_cursor_next_line_move(shell);
 804695e:	f7ff fca1 	bl	80462a4 <z_cursor_next_line_move.isra.0>
	z_shell_print_prompt_and_cmd(shell);
 8046962:	4620      	mov	r0, r4
 8046964:	f000 fe5a 	bl	804761c <z_shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
 8046968:	aa28      	add	r2, sp, #160	; 0xa0
 804696a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 804696c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
 8046970:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8046974:	f00f fed2 	bl	805671c <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
 8046978:	4641      	mov	r1, r8
 804697a:	aa11      	add	r2, sp, #68	; 0x44
	uint16_t arg_len = z_shell_strlen(arg);
 804697c:	4607      	mov	r7, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
 804697e:	4628      	mov	r0, r5
 8046980:	f000 fc1e 	bl	80471c0 <z_shell_cmd_get>
 8046984:	4680      	mov	r8, r0
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 8046986:	68a0      	ldr	r0, [r4, #8]
 8046988:	22ff      	movs	r2, #255	; 0xff
 804698a:	f8d8 1000 	ldr.w	r1, [r8]
 804698e:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 8046992:	f014 fbb3 	bl	805b0fc <strncpy>
	*str = match->syntax;
 8046996:	f8d8 a000 	ldr.w	sl, [r8]
	uint16_t common = UINT16_MAX;
 804699a:	f64f 78ff 	movw	r8, #65535	; 0xffff
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
 804699e:	aa16      	add	r2, sp, #88	; 0x58
 80469a0:	4649      	mov	r1, r9
 80469a2:	4628      	mov	r0, r5
 80469a4:	f109 0b01 	add.w	fp, r9, #1
 80469a8:	f000 fc0a 	bl	80471c0 <z_shell_cmd_get>
		if (match2 == NULL) {
 80469ac:	2800      	cmp	r0, #0
 80469ae:	d06b      	beq.n	8046a88 <shell_process+0x434>
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
 80469b0:	68a3      	ldr	r3, [r4, #8]
	size_t common = 0;
 80469b2:	2200      	movs	r2, #0
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
 80469b4:	6800      	ldr	r0, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 80469b6:	f503 73a1 	add.w	r3, r3, #322	; 0x142
 80469ba:	f813 cb01 	ldrb.w	ip, [r3], #1
 80469be:	5c81      	ldrb	r1, [r0, r2]
 80469c0:	4561      	cmp	r1, ip
 80469c2:	d105      	bne.n	80469d0 <shell_process+0x37c>
 80469c4:	b121      	cbz	r1, 80469d0 <shell_process+0x37c>
		common++;
 80469c6:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 80469c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80469cc:	428a      	cmp	r2, r1
 80469ce:	d1f4      	bne.n	80469ba <shell_process+0x366>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
 80469d0:	b10f      	cbz	r7, 80469d6 <shell_process+0x382>
 80469d2:	42ba      	cmp	r2, r7
 80469d4:	db08      	blt.n	80469e8 <shell_process+0x394>
			common = (curr_common < common) ? curr_common : common;
 80469d6:	4542      	cmp	r2, r8
			--cnt;
 80469d8:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
			common = (curr_common < common) ? curr_common : common;
 80469dc:	bfa8      	it	ge
 80469de:	4642      	movge	r2, r8
	while (cnt > 1) {
 80469e0:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
 80469e2:	fa1f f882 	uxth.w	r8, r2
	while (cnt > 1) {
 80469e6:	d04f      	beq.n	8046a88 <shell_process+0x434>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
 80469e8:	46d9      	mov	r9, fp
 80469ea:	e7d8      	b.n	804699e <shell_process+0x34a>
 80469ec:	08063364 	.word	0x08063364
 80469f0:	08063365 	.word	0x08063365
 80469f4:	08062fdb 	.word	0x08062fdb
		if (str && match->syntax &&
 80469f8:	6800      	ldr	r0, [r0, #0]
 80469fa:	2800      	cmp	r0, #0
 80469fc:	d0a3      	beq.n	8046946 <shell_process+0x2f2>
	return (strncmp(candidate, str, len) == 0) ? true : false;
 80469fe:	ee18 2a90 	vmov	r2, s17
 8046a02:	4651      	mov	r1, sl
 8046a04:	f014 fb66 	bl	805b0d4 <strncmp>
		if (str && match->syntax &&
 8046a08:	2800      	cmp	r0, #0
 8046a0a:	d09c      	beq.n	8046946 <shell_process+0x2f2>
 8046a0c:	e78f      	b.n	804692e <shell_process+0x2da>
	longest_option += z_shell_strlen(tab);
 8046a0e:	4658      	mov	r0, fp
 8046a10:	f00f fe84 	bl	805671c <z_shell_strlen>
 8046a14:	9b03      	ldr	r3, [sp, #12]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
 8046a16:	68a1      	ldr	r1, [r4, #8]
	longest_option += z_shell_strlen(tab);
 8046a18:	4418      	add	r0, r3
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
 8046a1a:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
	longest_option += z_shell_strlen(tab);
 8046a1c:	b282      	uxth	r2, r0
			- z_shell_strlen(tab)) / longest_option;
 8046a1e:	4658      	mov	r0, fp
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
 8046a20:	9306      	str	r3, [sp, #24]
	longest_option += z_shell_strlen(tab);
 8046a22:	9207      	str	r2, [sp, #28]
			- z_shell_strlen(tab)) / longest_option;
 8046a24:	f00f fe7a 	bl	805671c <z_shell_strlen>
 8046a28:	9005      	str	r0, [sp, #20]
	diff = longest_option - z_shell_strlen(option);
 8046a2a:	4638      	mov	r0, r7
 8046a2c:	f00f fe76 	bl	805671c <z_shell_strlen>
 8046a30:	9a07      	ldr	r2, [sp, #28]
 8046a32:	1a10      	subs	r0, r2, r0
 8046a34:	b283      	uxth	r3, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 8046a36:	68a0      	ldr	r0, [r4, #8]
	diff = longest_option - z_shell_strlen(option);
 8046a38:	ee08 3a10 	vmov	s16, r3
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 8046a3c:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
			- z_shell_strlen(tab)) / longest_option;
 8046a40:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 8046a44:	f10c 0e01 	add.w	lr, ip, #1
			- z_shell_strlen(tab)) / longest_option;
 8046a48:	1a59      	subs	r1, r3, r1
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 8046a4a:	f8a0 e030 	strh.w	lr, [r0, #48]	; 0x30
			- z_shell_strlen(tab)) / longest_option;
 8046a4e:	fb91 f2f2 	sdiv	r2, r1, r2
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 8046a52:	b292      	uxth	r2, r2
 8046a54:	fbbc f1f2 	udiv	r1, ip, r2
 8046a58:	fb02 c211 	mls	r2, r2, r1, ip
 8046a5c:	b292      	uxth	r2, r2
 8046a5e:	b962      	cbnz	r2, 8046a7a <shell_process+0x426>
		z_shell_fprintf(shell, SHELL_OPTION, "\n%s%s", tab, option);
 8046a60:	465b      	mov	r3, fp
 8046a62:	4a96      	ldr	r2, [pc, #600]	; (8046cbc <shell_process+0x668>)
 8046a64:	2107      	movs	r1, #7
 8046a66:	4620      	mov	r0, r4
 8046a68:	9700      	str	r7, [sp, #0]
 8046a6a:	f010 f9a0 	bl	8056dae <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(shell, diff);
 8046a6e:	ee18 1a10 	vmov	r1, s16
 8046a72:	4620      	mov	r0, r4
 8046a74:	f000 fc54 	bl	8047320 <z_shell_op_cursor_horiz_move>
 8046a78:	e76a      	b.n	8046950 <shell_process+0x2fc>
		z_shell_fprintf(shell, SHELL_OPTION, "%s", option);
 8046a7a:	463b      	mov	r3, r7
 8046a7c:	4a90      	ldr	r2, [pc, #576]	; (8046cc0 <shell_process+0x66c>)
 8046a7e:	2107      	movs	r1, #7
 8046a80:	4620      	mov	r0, r4
 8046a82:	f010 f994 	bl	8056dae <z_shell_fprintf>
 8046a86:	e7f2      	b.n	8046a6e <shell_process+0x41a>
	if (common) {
 8046a88:	f1b8 0f00 	cmp.w	r8, #0
 8046a8c:	f43f adf4 	beq.w	8046678 <shell_process+0x24>
		z_shell_op_completion_insert(shell, &completion[arg_len],
 8046a90:	eba8 0207 	sub.w	r2, r8, r7
 8046a94:	eb0a 0107 	add.w	r1, sl, r7
 8046a98:	4620      	mov	r0, r4
 8046a9a:	b292      	uxth	r2, r2
 8046a9c:	f010 f9c5 	bl	8056e2a <z_shell_op_completion_insert>
 8046aa0:	e5ea      	b.n	8046678 <shell_process+0x24>
	return shell->ctx->internal.flags.echo == 1;
 8046aa2:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
 8046aa6:	075f      	lsls	r7, r3, #29
 8046aa8:	f57f ade6 	bpl.w	8046678 <shell_process+0x24>
					z_flag_history_exit_set(shell, true);
 8046aac:	2101      	movs	r1, #1
 8046aae:	f00f fe7c 	bl	80567aa <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(shell);
 8046ab2:	4620      	mov	r0, r4
 8046ab4:	f010 f9d6 	bl	8056e64 <z_shell_op_char_backspace>
 8046ab8:	e5de      	b.n	8046678 <shell_process+0x24>
 8046aba:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
				} else if (z_flag_echo_get(shell)) {
 8046abe:	0750      	lsls	r0, r2, #29
 8046ac0:	f57f adda 	bpl.w	8046678 <shell_process+0x24>
	switch (data) {
 8046ac4:	3b01      	subs	r3, #1
 8046ac6:	2b16      	cmp	r3, #22
 8046ac8:	f63f add6 	bhi.w	8046678 <shell_process+0x24>
 8046acc:	a201      	add	r2, pc, #4	; (adr r2, 8046ad4 <shell_process+0x480>)
 8046ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046ad2:	bf00      	nop
 8046ad4:	08046c8d 	.word	0x08046c8d
 8046ad8:	08046b31 	.word	0x08046b31
 8046adc:	08046b39 	.word	0x08046b39
 8046ae0:	08046793 	.word	0x08046793
 8046ae4:	08046c81 	.word	0x08046c81
 8046ae8:	08046b57 	.word	0x08046b57
 8046aec:	08046679 	.word	0x08046679
 8046af0:	08046679 	.word	0x08046679
 8046af4:	08046679 	.word	0x08046679
 8046af8:	08046679 	.word	0x08046679
 8046afc:	08046b5f 	.word	0x08046b5f
 8046b00:	08046b67 	.word	0x08046b67
 8046b04:	08046679 	.word	0x08046679
 8046b08:	08046b83 	.word	0x08046b83
 8046b0c:	08046679 	.word	0x08046679
 8046b10:	08046b8d 	.word	0x08046b8d
 8046b14:	08046679 	.word	0x08046679
 8046b18:	08046679 	.word	0x08046679
 8046b1c:	08046679 	.word	0x08046679
 8046b20:	08046679 	.word	0x08046679
 8046b24:	08046b91 	.word	0x08046b91
 8046b28:	08046679 	.word	0x08046679
 8046b2c:	08046bb3 	.word	0x08046bb3
		z_shell_op_left_arrow(shell);
 8046b30:	4620      	mov	r0, r4
 8046b32:	f010 f89a 	bl	8056c6a <z_shell_op_left_arrow>
		break;
 8046b36:	e59f      	b.n	8046678 <shell_process+0x24>
		z_shell_op_cursor_end_move(shell);
 8046b38:	4620      	mov	r0, r4
 8046b3a:	f010 f88f 	bl	8056c5c <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(shell)) {
 8046b3e:	4620      	mov	r0, r4
 8046b40:	f010 f819 	bl	8056b76 <z_shell_cursor_in_empty_line>
 8046b44:	b910      	cbnz	r0, 8046b4c <shell_process+0x4f8>
			z_cursor_next_line_move(shell);
 8046b46:	6960      	ldr	r0, [r4, #20]
 8046b48:	f7ff fbac 	bl	80462a4 <z_cursor_next_line_move.isra.0>
		z_flag_history_exit_set(shell, true);
 8046b4c:	2101      	movs	r1, #1
 8046b4e:	68a0      	ldr	r0, [r4, #8]
 8046b50:	f00f fe2b 	bl	80567aa <z_flag_history_exit_set.isra.0>
 8046b54:	e603      	b.n	804675e <shell_process+0x10a>
		z_shell_op_right_arrow(shell);
 8046b56:	4620      	mov	r0, r4
 8046b58:	f010 f88f 	bl	8056c7a <z_shell_op_right_arrow>
		break;
 8046b5c:	e58c      	b.n	8046678 <shell_process+0x24>
		z_shell_op_delete_from_cursor(shell);
 8046b5e:	4620      	mov	r0, r4
 8046b60:	f010 f894 	bl	8056c8c <z_shell_op_delete_from_cursor>
		break;
 8046b64:	e588      	b.n	8046678 <shell_process+0x24>
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
 8046b66:	6960      	ldr	r0, [r4, #20]
 8046b68:	4a56      	ldr	r2, [pc, #344]	; (8046cc4 <shell_process+0x670>)
 8046b6a:	4955      	ldr	r1, [pc, #340]	; (8046cc0 <shell_process+0x66c>)
 8046b6c:	f00f fddc 	bl	8056728 <z_shell_raw_fprintf>
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
 8046b70:	6960      	ldr	r0, [r4, #20]
 8046b72:	4a55      	ldr	r2, [pc, #340]	; (8046cc8 <shell_process+0x674>)
 8046b74:	4952      	ldr	r1, [pc, #328]	; (8046cc0 <shell_process+0x66c>)
 8046b76:	f00f fdd7 	bl	8056728 <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(shell);
 8046b7a:	4620      	mov	r0, r4
 8046b7c:	f000 fd4e 	bl	804761c <z_shell_print_prompt_and_cmd>
		break;
 8046b80:	e57a      	b.n	8046678 <shell_process+0x24>
		history_handle(shell, false);
 8046b82:	2100      	movs	r1, #0
		history_handle(shell, true);
 8046b84:	4620      	mov	r0, r4
 8046b86:	f7ff fb93 	bl	80462b0 <history_handle>
		break;
 8046b8a:	e575      	b.n	8046678 <shell_process+0x24>
		history_handle(shell, true);
 8046b8c:	2101      	movs	r1, #1
 8046b8e:	e7f9      	b.n	8046b84 <shell_process+0x530>
		z_shell_op_cursor_home_move(shell);
 8046b90:	4620      	mov	r0, r4
 8046b92:	f010 f85d 	bl	8056c50 <z_shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
 8046b96:	68a0      	ldr	r0, [r4, #8]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
 8046b98:	2300      	movs	r3, #0
		z_flag_history_exit_set(shell, true);
 8046b9a:	2101      	movs	r1, #1
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
 8046b9c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
 8046ba0:	63c3      	str	r3, [r0, #60]	; 0x3c
		z_flag_history_exit_set(shell, true);
 8046ba2:	f00f fe02 	bl	80567aa <z_flag_history_exit_set.isra.0>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
 8046ba6:	4a49      	ldr	r2, [pc, #292]	; (8046ccc <shell_process+0x678>)
 8046ba8:	4945      	ldr	r1, [pc, #276]	; (8046cc0 <shell_process+0x66c>)
 8046baa:	6960      	ldr	r0, [r4, #20]
 8046bac:	f00f fdbc 	bl	8056728 <z_shell_raw_fprintf>
}
 8046bb0:	e562      	b.n	8046678 <shell_process+0x24>
		z_shell_op_word_remove(shell);
 8046bb2:	4620      	mov	r0, r4
 8046bb4:	f000 fc68 	bl	8047488 <z_shell_op_word_remove>
		z_flag_history_exit_set(shell, true);
 8046bb8:	2101      	movs	r1, #1
 8046bba:	68a0      	ldr	r0, [r4, #8]
 8046bbc:	f00f fdf5 	bl	80567aa <z_flag_history_exit_set.isra.0>
		break;
 8046bc0:	e55a      	b.n	8046678 <shell_process+0x24>
			if (data == '[') {
 8046bc2:	2b5b      	cmp	r3, #91	; 0x5b
 8046bc4:	d101      	bne.n	8046bca <shell_process+0x576>
	shell->ctx->receive_state = state;
 8046bc6:	2302      	movs	r3, #2
 8046bc8:	e5e8      	b.n	804679c <shell_process+0x148>
	return shell->ctx->internal.flags.echo == 1;
 8046bca:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			} else if (z_flag_echo_get(shell)) {
 8046bce:	0751      	lsls	r1, r2, #29
 8046bd0:	d506      	bpl.n	8046be0 <shell_process+0x58c>
	if (data == SHELL_VT100_ASCII_ALT_B) {
 8046bd2:	2b62      	cmp	r3, #98	; 0x62
 8046bd4:	d108      	bne.n	8046be8 <shell_process+0x594>
		z_shell_op_cursor_word_move(shell, -1);
 8046bd6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		z_shell_op_cursor_word_move(shell, 1);
 8046bda:	4620      	mov	r0, r4
 8046bdc:	f000 fbb0 	bl	8047340 <z_shell_op_cursor_word_move>
	shell->ctx->receive_state = state;
 8046be0:	68a3      	ldr	r3, [r4, #8]
 8046be2:	2200      	movs	r2, #0
 8046be4:	715a      	strb	r2, [r3, #5]
}
 8046be6:	e547      	b.n	8046678 <shell_process+0x24>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
 8046be8:	2b66      	cmp	r3, #102	; 0x66
 8046bea:	d1f9      	bne.n	8046be0 <shell_process+0x58c>
		z_shell_op_cursor_word_move(shell, 1);
 8046bec:	2101      	movs	r1, #1
 8046bee:	e7f4      	b.n	8046bda <shell_process+0x586>
	shell->ctx->receive_state = state;
 8046bf0:	2200      	movs	r2, #0
 8046bf2:	7142      	strb	r2, [r0, #5]
 8046bf4:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			if (!z_flag_echo_get(shell)) {
 8046bf8:	0752      	lsls	r2, r2, #29
 8046bfa:	f57f ad3d 	bpl.w	8046678 <shell_process+0x24>
			switch (data) {
 8046bfe:	3b31      	subs	r3, #49	; 0x31
 8046c00:	2b1b      	cmp	r3, #27
 8046c02:	f63f ad39 	bhi.w	8046678 <shell_process+0x24>
 8046c06:	a201      	add	r2, pc, #4	; (adr r2, 8046c0c <shell_process+0x5b8>)
 8046c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046c0c:	08046c89 	.word	0x08046c89
 8046c10:	08046c95 	.word	0x08046c95
 8046c14:	08046ca7 	.word	0x08046ca7
 8046c18:	08046c7d 	.word	0x08046c7d
 8046c1c:	08046679 	.word	0x08046679
 8046c20:	08046679 	.word	0x08046679
 8046c24:	08046679 	.word	0x08046679
 8046c28:	08046679 	.word	0x08046679
 8046c2c:	08046679 	.word	0x08046679
 8046c30:	08046679 	.word	0x08046679
 8046c34:	08046679 	.word	0x08046679
 8046c38:	08046679 	.word	0x08046679
 8046c3c:	08046679 	.word	0x08046679
 8046c40:	08046679 	.word	0x08046679
 8046c44:	08046679 	.word	0x08046679
 8046c48:	08046679 	.word	0x08046679
 8046c4c:	08046b8d 	.word	0x08046b8d
 8046c50:	08046b83 	.word	0x08046b83
 8046c54:	08046b57 	.word	0x08046b57
 8046c58:	08046b31 	.word	0x08046b31
 8046c5c:	08046679 	.word	0x08046679
 8046c60:	08046c81 	.word	0x08046c81
 8046c64:	08046679 	.word	0x08046679
 8046c68:	08046c8d 	.word	0x08046c8d
 8046c6c:	08046679 	.word	0x08046679
 8046c70:	08046679 	.word	0x08046679
 8046c74:	08046679 	.word	0x08046679
 8046c78:	08046c99 	.word	0x08046c99
	shell->ctx->receive_state = state;
 8046c7c:	2303      	movs	r3, #3
 8046c7e:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_end_move(shell);
 8046c80:	4620      	mov	r0, r4
 8046c82:	f00f ffeb 	bl	8056c5c <z_shell_op_cursor_end_move>
		break;
 8046c86:	e4f7      	b.n	8046678 <shell_process+0x24>
	shell->ctx->receive_state = state;
 8046c88:	2303      	movs	r3, #3
 8046c8a:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_home_move(shell);
 8046c8c:	4620      	mov	r0, r4
 8046c8e:	f00f ffdf 	bl	8056c50 <z_shell_op_cursor_home_move>
		break;
 8046c92:	e4f1      	b.n	8046678 <shell_process+0x24>
	shell->ctx->receive_state = state;
 8046c94:	2303      	movs	r3, #3
 8046c96:	7143      	strb	r3, [r0, #5]
	return shell->ctx->internal.flags.insert_mode == 1;
 8046c98:	f8d0 1260 	ldr.w	r1, [r0, #608]	; 0x260
 8046c9c:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(shell, !status);
 8046ca0:	f081 0101 	eor.w	r1, r1, #1
 8046ca4:	e5fe      	b.n	80468a4 <shell_process+0x250>
	shell->ctx->receive_state = state;
 8046ca6:	2303      	movs	r3, #3
 8046ca8:	7143      	strb	r3, [r0, #5]
	return shell->ctx->internal.flags.echo == 1;
 8046caa:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
 8046cae:	075b      	lsls	r3, r3, #29
 8046cb0:	f57f ace2 	bpl.w	8046678 <shell_process+0x24>
 8046cb4:	e56d      	b.n	8046792 <shell_process+0x13e>
	shell->ctx->receive_state = state;
 8046cb6:	2300      	movs	r3, #0
 8046cb8:	e570      	b.n	804679c <shell_process+0x148>
 8046cba:	bf00      	nop
 8046cbc:	080604a4 	.word	0x080604a4
 8046cc0:	0806018b 	.word	0x0806018b
 8046cc4:	0806068e 	.word	0x0806068e
 8046cc8:	08060689 	.word	0x08060689
 8046ccc:	08060685 	.word	0x08060685

08046cd0 <shell_init>:
{
 8046cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8046cd4:	4604      	mov	r4, r0
	if (shell->ctx->tid) {
 8046cd6:	6880      	ldr	r0, [r0, #8]
{
 8046cd8:	460f      	mov	r7, r1
 8046cda:	b089      	sub	sp, #36	; 0x24
	if (shell->ctx->tid) {
 8046cdc:	f8d0 1308 	ldr.w	r1, [r0, #776]	; 0x308
{
 8046ce0:	4690      	mov	r8, r2
 8046ce2:	461e      	mov	r6, r3
	if (shell->ctx->tid) {
 8046ce4:	2900      	cmp	r1, #0
 8046ce6:	d174      	bne.n	8046dd2 <shell_init+0x102>
__ssp_bos_icheck3(memset, void *, int)
 8046ce8:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8046cec:	f014 f8ae 	bl	805ae4c <memset>
	shell->ctx->prompt = shell->default_prompt;
 8046cf0:	68a3      	ldr	r3, [r4, #8]
 8046cf2:	6822      	ldr	r2, [r4, #0]
	z_shell_history_init(shell->history);
 8046cf4:	68e0      	ldr	r0, [r4, #12]
	shell->ctx->prompt = shell->default_prompt;
 8046cf6:	601a      	str	r2, [r3, #0]
	z_shell_history_init(shell->history);
 8046cf8:	f010 fa62 	bl	80571c0 <z_shell_history_init>
	k_mutex_init(&shell->ctx->wr_mtx);
 8046cfc:	68a0      	ldr	r0, [r4, #8]
 8046cfe:	f500 703d 	add.w	r0, r0, #756	; 0x2f4
	return z_impl_k_mutex_init(mutex);
 8046d02:	f44f 7929 	mov.w	r9, #676	; 0x2a4
 8046d06:	f44f 7519 	mov.w	r5, #612	; 0x264
 8046d0a:	f013 fb78 	bl	805a3fe <z_impl_k_mutex_init>
		k_poll_signal_init(&shell->ctx->signals[i]);
 8046d0e:	68a0      	ldr	r0, [r4, #8]
 8046d10:	4428      	add	r0, r5
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
 8046d12:	f013 fec3 	bl	805aa9c <z_impl_k_poll_signal_init>
		k_poll_event_init(&shell->ctx->events[i],
 8046d16:	68a0      	ldr	r0, [r4, #8]
 8046d18:	2200      	movs	r2, #0
 8046d1a:	2101      	movs	r1, #1
 8046d1c:	1943      	adds	r3, r0, r5
	for (int i = 0; i < SHELL_SIGNALS; i++) {
 8046d1e:	3510      	adds	r5, #16
		k_poll_event_init(&shell->ctx->events[i],
 8046d20:	4448      	add	r0, r9
	for (int i = 0; i < SHELL_SIGNALS; i++) {
 8046d22:	f109 0914 	add.w	r9, r9, #20
		k_poll_event_init(&shell->ctx->events[i],
 8046d26:	f013 fe9c 	bl	805aa62 <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
 8046d2a:	f5b5 7f29 	cmp.w	r5, #676	; 0x2a4
 8046d2e:	d1ee      	bne.n	8046d0e <shell_init+0x3e>
		shell->stats->log_lost_cnt = 0;
 8046d30:	69a3      	ldr	r3, [r4, #24]
 8046d32:	2200      	movs	r2, #0
	Z_SHELL_SET_FLAG_ATOMIC(shell, tx_rdy, val, ret);
 8046d34:	68a0      	ldr	r0, [r4, #8]
 8046d36:	2120      	movs	r1, #32
 8046d38:	601a      	str	r2, [r3, #0]
 8046d3a:	f500 7018 	add.w	r0, r0, #608	; 0x260
 8046d3e:	f00f fcb8 	bl	80566b2 <atomic_or>
	Z_SHELL_SET_FLAG_ATOMIC(shell, echo, val, ret);
 8046d42:	68a0      	ldr	r0, [r4, #8]
 8046d44:	2104      	movs	r1, #4
 8046d46:	f500 7018 	add.w	r0, r0, #608	; 0x260
 8046d4a:	f00f fcb2 	bl	80566b2 <atomic_or>
	Z_SHELL_SET_FLAG_ATOMIC(shell, obscure, val, ret);
 8046d4e:	68a0      	ldr	r0, [r4, #8]
 8046d50:	f06f 0108 	mvn.w	r1, #8
 8046d54:	f500 7018 	add.w	r0, r0, #608	; 0x260
 8046d58:	f00f fcba 	bl	80566d0 <atomic_and>
	Z_SHELL_SET_FLAG_ATOMIC(shell, mode_delete, val, ret);
 8046d5c:	68a0      	ldr	r0, [r4, #8]
 8046d5e:	2140      	movs	r1, #64	; 0x40
 8046d60:	f500 7018 	add.w	r0, r0, #608	; 0x260
 8046d64:	f00f fca5 	bl	80566b2 <atomic_or>
	shell->ctx->vt100_ctx.cons.terminal_wid =
 8046d68:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->vt100_ctx.cons.terminal_hei =
 8046d6a:	4a1b      	ldr	r2, [pc, #108]	; (8046dd8 <shell_init+0x108>)
	shell->ctx->vt100_ctx.cons.name_len = z_shell_strlen(shell->ctx->prompt);
 8046d6c:	6818      	ldr	r0, [r3, #0]
	shell->ctx->vt100_ctx.cons.terminal_hei =
 8046d6e:	629a      	str	r2, [r3, #40]	; 0x28
	shell->ctx->vt100_ctx.cons.name_len = z_shell_strlen(shell->ctx->prompt);
 8046d70:	f00f fcd4 	bl	805671c <z_shell_strlen>
 8046d74:	68a3      	ldr	r3, [r4, #8]
	z_flag_use_colors_set(shell, IS_ENABLED(CONFIG_SHELL_VT100_COLORS) && use_colors);
 8046d76:	4641      	mov	r1, r8
	shell->ctx->vt100_ctx.cons.name_len = z_shell_strlen(shell->ctx->prompt);
 8046d78:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	z_flag_use_colors_set(shell, IS_ENABLED(CONFIG_SHELL_VT100_COLORS) && use_colors);
 8046d7c:	4618      	mov	r0, r3
 8046d7e:	f00f fd1e 	bl	80567be <z_flag_use_colors_set.isra.0>
	int ret = shell->iface->api->init(shell->iface, p_config,
 8046d82:	6860      	ldr	r0, [r4, #4]
 8046d84:	4a15      	ldr	r2, [pc, #84]	; (8046ddc <shell_init+0x10c>)
 8046d86:	4639      	mov	r1, r7
 8046d88:	6803      	ldr	r3, [r0, #0]
 8046d8a:	681d      	ldr	r5, [r3, #0]
 8046d8c:	4623      	mov	r3, r4
 8046d8e:	47a8      	blx	r5
	if (ret == 0) {
 8046d90:	4605      	mov	r5, r0
 8046d92:	b9d0      	cbnz	r0, 8046dca <shell_init+0xfa>
	shell->ctx->state = state;
 8046d94:	68a3      	ldr	r3, [r4, #8]
 8046d96:	2201      	movs	r2, #1
 8046d98:	711a      	strb	r2, [r3, #4]
	k_tid_t tid = k_thread_create(shell->thread,
 8046d9a:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8046d9e:	2200      	movs	r2, #0
 8046da0:	2300      	movs	r3, #0
 8046da2:	9504      	str	r5, [sp, #16]
 8046da4:	9400      	str	r4, [sp, #0]
 8046da6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8046daa:	230e      	movs	r3, #14
 8046dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8046db0:	9303      	str	r3, [sp, #12]
 8046db2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8046db4:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8046db8:	4b09      	ldr	r3, [pc, #36]	; (8046de0 <shell_init+0x110>)
 8046dba:	f00a fcab 	bl	8051714 <z_impl_k_thread_create>
	shell->ctx->tid = tid;
 8046dbe:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
 8046dc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
	shell->ctx->tid = tid;
 8046dc2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	return z_impl_k_thread_name_set(thread, str);
 8046dc6:	f00a fbf5 	bl	80515b4 <z_impl_k_thread_name_set>
}
 8046dca:	4628      	mov	r0, r5
 8046dcc:	b009      	add	sp, #36	; 0x24
 8046dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
 8046dd2:	f06f 0577 	mvn.w	r5, #119	; 0x77
 8046dd6:	e7f8      	b.n	8046dca <shell_init+0xfa>
 8046dd8:	00500018 	.word	0x00500018
 8046ddc:	08056747 	.word	0x08056747
 8046de0:	08046e31 	.word	0x08046e31

08046de4 <shell_start>:
{
 8046de4:	b510      	push	{r4, lr}
 8046de6:	4604      	mov	r4, r0
	return shell->ctx->state;
 8046de8:	6880      	ldr	r0, [r0, #8]
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
 8046dea:	7903      	ldrb	r3, [r0, #4]
 8046dec:	2b01      	cmp	r3, #1
 8046dee:	d119      	bne.n	8046e24 <shell_start+0x40>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8046df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8046df4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8046df8:	f500 703d 	add.w	r0, r0, #756	; 0x2f4
 8046dfc:	f00f fca1 	bl	8056742 <k_mutex_lock.constprop.0.isra.0>
		z_shell_vt100_color_set(shell, SHELL_NORMAL);
 8046e00:	2100      	movs	r1, #0
 8046e02:	4620      	mov	r0, r4
 8046e04:	f000 fade 	bl	80473c4 <z_shell_vt100_color_set>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
 8046e08:	4908      	ldr	r1, [pc, #32]	; (8046e2c <shell_start+0x48>)
 8046e0a:	6960      	ldr	r0, [r4, #20]
 8046e0c:	f00f fc8c 	bl	8056728 <z_shell_raw_fprintf>
	state_set(shell, SHELL_STATE_ACTIVE);
 8046e10:	4620      	mov	r0, r4
 8046e12:	f7ff fbfb 	bl	804660c <state_set.constprop.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
 8046e16:	68a0      	ldr	r0, [r4, #8]
 8046e18:	f500 703d 	add.w	r0, r0, #756	; 0x2f4
 8046e1c:	f00f fced 	bl	80567fa <k_mutex_unlock.isra.0>
	return 0;
 8046e20:	2000      	movs	r0, #0
}
 8046e22:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 8046e24:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8046e28:	e7fb      	b.n	8046e22 <shell_start+0x3e>
 8046e2a:	bf00      	nop
 8046e2c:	08060043 	.word	0x08060043

08046e30 <shell_thread>:
{
 8046e30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8046e34:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
 8046e36:	6840      	ldr	r0, [r0, #4]
{
 8046e38:	460d      	mov	r5, r1
	err = shell->iface->api->enable(shell->iface, false);
 8046e3a:	2100      	movs	r1, #0
 8046e3c:	6803      	ldr	r3, [r0, #0]
{
 8046e3e:	9201      	str	r2, [sp, #4]
	err = shell->iface->api->enable(shell->iface, false);
 8046e40:	689b      	ldr	r3, [r3, #8]
 8046e42:	4798      	blx	r3
	if (err != 0) {
 8046e44:	2800      	cmp	r0, #0
 8046e46:	d14d      	bne.n	8046ee4 <shell_thread+0xb4>
	if (IS_ENABLED(CONFIG_SHELL_LOG_BACKEND) && log_backend
 8046e48:	b125      	cbz	r5, 8046e54 <shell_thread+0x24>
		z_shell_log_backend_enable(shell->log_backend, (void *)shell,
 8046e4a:	9a01      	ldr	r2, [sp, #4]
 8046e4c:	4621      	mov	r1, r4
 8046e4e:	69e0      	ldr	r0, [r4, #28]
 8046e50:	f010 fa61 	bl	8057316 <z_shell_log_backend_enable>
	err = shell_start(shell);
 8046e54:	4620      	mov	r0, r4
 8046e56:	f7ff ffc5 	bl	8046de4 <shell_start>
	if (err != 0) {
 8046e5a:	2800      	cmp	r0, #0
 8046e5c:	d142      	bne.n	8046ee4 <shell_thread+0xb4>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
 8046e5e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8046ef8 <shell_thread+0xc8>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
 8046e62:	4f22      	ldr	r7, [pc, #136]	; (8046eec <shell_thread+0xbc>)
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
 8046e64:	4e22      	ldr	r6, [pc, #136]	; (8046ef0 <shell_thread+0xc0>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
 8046e66:	68a0      	ldr	r0, [r4, #8]
 8046e68:	f500 7029 	add.w	r0, r0, #676	; 0x2a4
	return z_impl_k_poll(events, num_events, timeout);
 8046e6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8046e70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8046e74:	2103      	movs	r1, #3
 8046e76:	f00b fcab 	bl	80527d0 <z_impl_k_poll>
		if (err != 0) {
 8046e7a:	4605      	mov	r5, r0
 8046e7c:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8046e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8046e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8046e86:	f500 703d 	add.w	r0, r0, #756	; 0x2f4
		if (err != 0) {
 8046e8a:	b17d      	cbz	r5, 8046eac <shell_thread+0x7c>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8046e8c:	f00f fc59 	bl	8056742 <k_mutex_lock.constprop.0.isra.0>
			z_shell_fprintf(shell, SHELL_ERROR,
 8046e90:	4620      	mov	r0, r4
 8046e92:	462b      	mov	r3, r5
 8046e94:	4a17      	ldr	r2, [pc, #92]	; (8046ef4 <shell_thread+0xc4>)
 8046e96:	2102      	movs	r1, #2
 8046e98:	f00f ff89 	bl	8056dae <z_shell_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
 8046e9c:	68a0      	ldr	r0, [r4, #8]
 8046e9e:	f500 703d 	add.w	r0, r0, #756	; 0x2f4
}
 8046ea2:	b002      	add	sp, #8
 8046ea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
 8046ea8:	f00f bca7 	b.w	80567fa <k_mutex_unlock.isra.0>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8046eac:	f00f fc49 	bl	8056742 <k_mutex_lock.constprop.0.isra.0>
		if (shell->iface->api->update) {
 8046eb0:	6860      	ldr	r0, [r4, #4]
 8046eb2:	6803      	ldr	r3, [r0, #0]
 8046eb4:	695b      	ldr	r3, [r3, #20]
 8046eb6:	b103      	cbz	r3, 8046eba <shell_thread+0x8a>
			shell->iface->api->update(shell->iface);
 8046eb8:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
 8046eba:	4642      	mov	r2, r8
 8046ebc:	4620      	mov	r0, r4
 8046ebe:	2102      	movs	r1, #2
 8046ec0:	f00f fc15 	bl	80566ee <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
 8046ec4:	463a      	mov	r2, r7
 8046ec6:	4620      	mov	r0, r4
 8046ec8:	2100      	movs	r1, #0
 8046eca:	f00f fc10 	bl	80566ee <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
 8046ece:	4620      	mov	r0, r4
 8046ed0:	4632      	mov	r2, r6
 8046ed2:	2101      	movs	r1, #1
 8046ed4:	f00f fc0b 	bl	80566ee <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
 8046ed8:	68a0      	ldr	r0, [r4, #8]
 8046eda:	f500 703d 	add.w	r0, r0, #756	; 0x2f4
 8046ede:	f00f fc8c 	bl	80567fa <k_mutex_unlock.isra.0>
 8046ee2:	e7c0      	b.n	8046e66 <shell_thread+0x36>
}
 8046ee4:	b002      	add	sp, #8
 8046ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8046eea:	bf00      	nop
 8046eec:	08046655 	.word	0x08046655
 8046ef0:	080567ff 	.word	0x080567ff
 8046ef4:	080604aa 	.word	0x080604aa
 8046ef8:	0805675b 	.word	0x0805675b

08046efc <cmd_help>:
{
	sh->ctx->bypass = bypass;
}

static int cmd_help(const struct shell *shell, size_t argc, char **argv)
{
 8046efc:	b510      	push	{r4, lr}
 8046efe:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(shell, "Please press the <Tab> button to see all available "
 8046f00:	4a0c      	ldr	r2, [pc, #48]	; (8046f34 <cmd_help+0x38>)
 8046f02:	2100      	movs	r1, #0
 8046f04:	f00f fcdb 	bl	80568be <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(shell,
 8046f08:	4620      	mov	r0, r4
 8046f0a:	4a0b      	ldr	r2, [pc, #44]	; (8046f38 <cmd_help+0x3c>)
 8046f0c:	2100      	movs	r1, #0
 8046f0e:	f00f fcd6 	bl	80568be <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(shell,
 8046f12:	4620      	mov	r0, r4
 8046f14:	4a09      	ldr	r2, [pc, #36]	; (8046f3c <cmd_help+0x40>)
 8046f16:	2100      	movs	r1, #0
 8046f18:	f00f fcd1 	bl	80568be <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(shell,
 8046f1c:	4620      	mov	r0, r4
 8046f1e:	4a08      	ldr	r2, [pc, #32]	; (8046f40 <cmd_help+0x44>)
 8046f20:	2100      	movs	r1, #0
 8046f22:	f00f fccc 	bl	80568be <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(shell, NULL,
 8046f26:	4620      	mov	r0, r4
 8046f28:	4a06      	ldr	r2, [pc, #24]	; (8046f44 <cmd_help+0x48>)
 8046f2a:	2100      	movs	r1, #0
 8046f2c:	f000 fcd2 	bl	80478d4 <z_shell_help_subcmd_print>
			shell_print(shell, "  %s", entry->syntax);
		}
	}

	return 0;
}
 8046f30:	2000      	movs	r0, #0
 8046f32:	bd10      	pop	{r4, pc}
 8046f34:	080604c1 	.word	0x080604c1
 8046f38:	080604ff 	.word	0x080604ff
 8046f3c:	0806055e 	.word	0x0806055e
 8046f40:	080605b2 	.word	0x080605b2
 8046f44:	0806064c 	.word	0x0806064c

08046f48 <shell_hexdump_line>:
{
 8046f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
 8046f4c:	2500      	movs	r5, #0
			shell_fprintf(shell, SHELL_NORMAL, "   ");
 8046f4e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 804700c <shell_hexdump_line+0xc4>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
 8046f52:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8047010 <shell_hexdump_line+0xc8>
{
 8046f56:	4616      	mov	r6, r2
			shell_fprintf(shell, SHELL_NORMAL, " ");
 8046f58:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8047014 <shell_hexdump_line+0xcc>
{
 8046f5c:	461f      	mov	r7, r3
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
 8046f5e:	4a28      	ldr	r2, [pc, #160]	; (8047000 <shell_hexdump_line+0xb8>)
 8046f60:	460b      	mov	r3, r1
 8046f62:	2100      	movs	r1, #0
{
 8046f64:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
 8046f66:	f00f fcaa 	bl	80568be <shell_fprintf>
		if (i < len) {
 8046f6a:	42af      	cmp	r7, r5
 8046f6c:	d934      	bls.n	8046fd8 <shell_hexdump_line+0x90>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
 8046f6e:	5d73      	ldrb	r3, [r6, r5]
 8046f70:	464a      	mov	r2, r9
 8046f72:	2100      	movs	r1, #0
 8046f74:	4620      	mov	r0, r4
 8046f76:	f00f fca2 	bl	80568be <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
 8046f7a:	3501      	adds	r5, #1
 8046f7c:	2d10      	cmp	r5, #16
 8046f7e:	d123      	bne.n	8046fc8 <shell_hexdump_line+0x80>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
 8046f80:	2500      	movs	r5, #0
			shell_fprintf(shell, SHELL_NORMAL, " ");
 8046f82:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8047014 <shell_hexdump_line+0xcc>
				      isprint((int)c) ? c : '.');
 8046f86:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8047018 <shell_hexdump_line+0xd0>
	shell_fprintf(shell, SHELL_NORMAL, "|");
 8046f8a:	2100      	movs	r1, #0
			shell_fprintf(shell, SHELL_NORMAL, "%c",
 8046f8c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 804701c <shell_hexdump_line+0xd4>
	shell_fprintf(shell, SHELL_NORMAL, "|");
 8046f90:	4620      	mov	r0, r4
 8046f92:	4a1c      	ldr	r2, [pc, #112]	; (8047004 <shell_hexdump_line+0xbc>)
 8046f94:	f00f fc93 	bl	80568be <shell_fprintf>
		if (i < len) {
 8046f98:	42bd      	cmp	r5, r7
 8046f9a:	d22b      	bcs.n	8046ff4 <shell_hexdump_line+0xac>
			char c = data[i];
 8046f9c:	5d73      	ldrb	r3, [r6, r5]
			shell_fprintf(shell, SHELL_NORMAL, "%c",
 8046f9e:	2100      	movs	r1, #0
 8046fa0:	4620      	mov	r0, r4
 8046fa2:	f813 2009 	ldrb.w	r2, [r3, r9]
 8046fa6:	f012 0f97 	tst.w	r2, #151	; 0x97
 8046faa:	4652      	mov	r2, sl
 8046fac:	bf08      	it	eq
 8046fae:	232e      	moveq	r3, #46	; 0x2e
 8046fb0:	f00f fc85 	bl	80568be <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
 8046fb4:	3501      	adds	r5, #1
 8046fb6:	2d10      	cmp	r5, #16
 8046fb8:	d114      	bne.n	8046fe4 <shell_hexdump_line+0x9c>
	shell_print(shell, "|");
 8046fba:	4620      	mov	r0, r4
 8046fbc:	4a12      	ldr	r2, [pc, #72]	; (8047008 <shell_hexdump_line+0xc0>)
 8046fbe:	2100      	movs	r1, #0
}
 8046fc0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	shell_print(shell, "|");
 8046fc4:	f00f bc7b 	b.w	80568be <shell_fprintf>
		if (i > 0 && !(i % 8)) {
 8046fc8:	f015 0107 	ands.w	r1, r5, #7
 8046fcc:	d1cd      	bne.n	8046f6a <shell_hexdump_line+0x22>
			shell_fprintf(shell, SHELL_NORMAL, " ");
 8046fce:	4652      	mov	r2, sl
 8046fd0:	4620      	mov	r0, r4
 8046fd2:	f00f fc74 	bl	80568be <shell_fprintf>
 8046fd6:	e7c8      	b.n	8046f6a <shell_hexdump_line+0x22>
			shell_fprintf(shell, SHELL_NORMAL, "   ");
 8046fd8:	4642      	mov	r2, r8
 8046fda:	2100      	movs	r1, #0
 8046fdc:	4620      	mov	r0, r4
 8046fde:	f00f fc6e 	bl	80568be <shell_fprintf>
 8046fe2:	e7ca      	b.n	8046f7a <shell_hexdump_line+0x32>
		if (i > 0 && !(i % 8)) {
 8046fe4:	f015 0107 	ands.w	r1, r5, #7
 8046fe8:	d1d6      	bne.n	8046f98 <shell_hexdump_line+0x50>
			shell_fprintf(shell, SHELL_NORMAL, " ");
 8046fea:	4642      	mov	r2, r8
 8046fec:	4620      	mov	r0, r4
 8046fee:	f00f fc66 	bl	80568be <shell_fprintf>
 8046ff2:	e7d1      	b.n	8046f98 <shell_hexdump_line+0x50>
			shell_fprintf(shell, SHELL_NORMAL, " ");
 8046ff4:	4642      	mov	r2, r8
 8046ff6:	2100      	movs	r1, #0
 8046ff8:	4620      	mov	r0, r4
 8046ffa:	f00f fc60 	bl	80568be <shell_fprintf>
 8046ffe:	e7d9      	b.n	8046fb4 <shell_hexdump_line+0x6c>
 8047000:	08060662 	.word	0x08060662
 8047004:	080627de 	.word	0x080627de
 8047008:	08060669 	.word	0x08060669
 804700c:	08062fda 	.word	0x08062fda
 8047010:	0805fb26 	.word	0x0805fb26
 8047014:	08062fdc 	.word	0x08062fdc
 8047018:	08063365 	.word	0x08063365
 804701c:	08060696 	.word	0x08060696

08047020 <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
 8047020:	b510      	push	{r4, lr}
 8047022:	4604      	mov	r4, r0
 8047024:	4613      	mov	r3, r2
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);
 8047026:	460a      	mov	r2, r1
 8047028:	4601      	mov	r1, r0
 804702a:	4806      	ldr	r0, [pc, #24]	; (8047044 <z_shell_fprintf_fmt+0x24>)
 804702c:	f7f9 fc1c 	bl	8040868 <cbvprintf>

	if (sh_fprintf->ctrl_blk->autoflush) {
 8047030:	6923      	ldr	r3, [r4, #16]
 8047032:	791b      	ldrb	r3, [r3, #4]
 8047034:	b123      	cbz	r3, 8047040 <z_shell_fprintf_fmt+0x20>
		z_shell_fprintf_buffer_flush(sh_fprintf);
 8047036:	4620      	mov	r0, r4
	}
}
 8047038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
 804703c:	f00f bc66 	b.w	805690c <z_shell_fprintf_buffer_flush>
}
 8047040:	bd10      	pop	{r4, pc}
 8047042:	bf00      	nop
 8047044:	08056925 	.word	0x08056925

08047048 <z_shell_make_argv>:
}


char z_shell_make_argv(size_t *argc, const char **argv, char *cmd,
		       uint8_t max_argc)
{
 8047048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804704c:	461f      	mov	r7, r3
	char quote = 0;
	char c;

	*argc = 0;
 804704e:	2300      	movs	r3, #0
{
 8047050:	4605      	mov	r5, r0
 8047052:	460e      	mov	r6, r1
 8047054:	4614      	mov	r4, r2
	char quote = 0;
 8047056:	469a      	mov	sl, r3
		c = *cmd;
		if (c == '\0') {
			break;
		}

		if (isspace((int) c)) {
 8047058:	f8df 8160 	ldr.w	r8, [pc, #352]	; 80471bc <z_shell_make_argv+0x174>
	char quote = 0;
 804705c:	4699      	mov	r9, r3
	*argc = 0;
 804705e:	6003      	str	r3, [r0, #0]
		c = *cmd;
 8047060:	7823      	ldrb	r3, [r4, #0]
		if (c == '\0') {
 8047062:	2b00      	cmp	r3, #0
 8047064:	f000 80a5 	beq.w	80471b2 <z_shell_make_argv+0x16a>
		if (isspace((int) c)) {
 8047068:	f813 3008 	ldrb.w	r3, [r3, r8]
 804706c:	f013 0308 	ands.w	r3, r3, #8
 8047070:	d002      	beq.n	8047078 <z_shell_make_argv+0x30>
			*cmd++ = '\0';
 8047072:	f804 9b01 	strb.w	r9, [r4], #1
			continue;
 8047076:	e7f3      	b.n	8047060 <z_shell_make_argv+0x18>
		}

		argv[(*argc)++] = cmd;
 8047078:	6829      	ldr	r1, [r5, #0]
 804707a:	1c4a      	adds	r2, r1, #1
		if (*argc == max_argc) {
 804707c:	42ba      	cmp	r2, r7
		argv[(*argc)++] = cmd;
 804707e:	602a      	str	r2, [r5, #0]
 8047080:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
		if (*argc == max_argc) {
 8047084:	f000 8095 	beq.w	80471b2 <z_shell_make_argv+0x16a>
	char quote = 0;
 8047088:	469a      	mov	sl, r3
		c = *cmd;
 804708a:	f894 b000 	ldrb.w	fp, [r4]
		if (c == '\0') {
 804708e:	f1bb 0f00 	cmp.w	fp, #0
 8047092:	d0e5      	beq.n	8047060 <z_shell_make_argv+0x18>
		if (!quote) {
 8047094:	f1ba 0f00 	cmp.w	sl, #0
 8047098:	d177      	bne.n	804718a <z_shell_make_argv+0x142>
			switch (c) {
 804709a:	f1bb 0f27 	cmp.w	fp, #39	; 0x27
 804709e:	d005      	beq.n	80470ac <z_shell_make_argv+0x64>
 80470a0:	f1bb 0f5c 	cmp.w	fp, #92	; 0x5c
 80470a4:	d079      	beq.n	804719a <z_shell_make_argv+0x152>
 80470a6:	f1bb 0f22 	cmp.w	fp, #34	; 0x22
 80470aa:	d167      	bne.n	804717c <z_shell_make_argv+0x134>
				memmove(cmd, cmd + 1,
 80470ac:	4620      	mov	r0, r4
				continue;
 80470ae:	46da      	mov	sl, fp
				memmove(cmd, cmd + 1,
 80470b0:	f00f fc54 	bl	805695c <z_shell_strlen>
__ssp_bos_icheck3(memmove, void *, const void *)
 80470b4:	1c61      	adds	r1, r4, #1
 80470b6:	4602      	mov	r2, r0
 80470b8:	4620      	mov	r0, r4
 80470ba:	f013 fead 	bl	805ae18 <memmove>
				continue;
 80470be:	e7e4      	b.n	804708a <z_shell_make_argv+0x42>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
 80470c0:	4620      	mov	r0, r4
			quote = 0;
 80470c2:	f04f 0a00 	mov.w	sl, #0
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
 80470c6:	f00f fc49 	bl	805695c <z_shell_strlen>
 80470ca:	1c61      	adds	r1, r4, #1
 80470cc:	4602      	mov	r2, r0
 80470ce:	4620      	mov	r0, r4
 80470d0:	f013 fea2 	bl	805ae18 <memmove>
			continue;
 80470d4:	e7d9      	b.n	804708a <z_shell_make_argv+0x42>
			if (t == '0') {
 80470d6:	2930      	cmp	r1, #48	; 0x30
 80470d8:	d126      	bne.n	8047128 <z_shell_make_argv+0xe0>
				uint8_t v = 0U;
 80470da:	f04f 0b00 	mov.w	fp, #0
 80470de:	2302      	movs	r3, #2
					t = *(cmd + i);
 80470e0:	5ce1      	ldrb	r1, [r4, r3]
 80470e2:	b2da      	uxtb	r2, r3
					if (t >= '0' && t <= '7') {
 80470e4:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 80470e8:	fa5f fc80 	uxtb.w	ip, r0
 80470ec:	f1bc 0f07 	cmp.w	ip, #7
 80470f0:	d818      	bhi.n	8047124 <z_shell_make_argv+0xdc>
				for (i = 2U; i < (2 + 3); i++) {
 80470f2:	3301      	adds	r3, #1
						v = (v << 3) | (t - '0');
 80470f4:	ea40 0bcb 	orr.w	fp, r0, fp, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
 80470f8:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
 80470fa:	fa5f fb8b 	uxtb.w	fp, fp
				for (i = 2U; i < (2 + 3); i++) {
 80470fe:	d1ef      	bne.n	80470e0 <z_shell_make_argv+0x98>
 8047100:	461a      	mov	r2, r3
					memmove(cmd, cmd + (i - 1),
 8047102:	1e51      	subs	r1, r2, #1
 8047104:	4620      	mov	r0, r4
 8047106:	9201      	str	r2, [sp, #4]
 8047108:	4421      	add	r1, r4
 804710a:	9100      	str	r1, [sp, #0]
 804710c:	f00f fc26 	bl	805695c <z_shell_strlen>
 8047110:	9a01      	ldr	r2, [sp, #4]
 8047112:	3002      	adds	r0, #2
 8047114:	9900      	ldr	r1, [sp, #0]
 8047116:	1a82      	subs	r2, r0, r2
 8047118:	4620      	mov	r0, r4
 804711a:	f013 fe7d 	bl	805ae18 <memmove>
					*cmd++ = v;
 804711e:	f804 bb01 	strb.w	fp, [r4], #1
					continue;
 8047122:	e7b2      	b.n	804708a <z_shell_make_argv+0x42>
				if (i > 2) {
 8047124:	2a02      	cmp	r2, #2
 8047126:	d1ec      	bne.n	8047102 <z_shell_make_argv+0xba>
			if (t == 'x') {
 8047128:	2978      	cmp	r1, #120	; 0x78
 804712a:	d12c      	bne.n	8047186 <z_shell_make_argv+0x13e>
				uint8_t v = 0U;
 804712c:	f04f 0b00 	mov.w	fp, #0
 8047130:	2302      	movs	r3, #2
					t = *(cmd + i);
 8047132:	5ce2      	ldrb	r2, [r4, r3]
 8047134:	b2d8      	uxtb	r0, r3
					if (t >= '0' && t <= '9') {
 8047136:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 804713a:	fa5f fc81 	uxtb.w	ip, r1
 804713e:	f1bc 0f09 	cmp.w	ip, #9
 8047142:	d809      	bhi.n	8047158 <z_shell_make_argv+0x110>
						v = (v << 4) | (t - '0');
 8047144:	ea41 120b 	orr.w	r2, r1, fp, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
 8047148:	2b03      	cmp	r3, #3
						v = (v << 4) | (t - 'A' + 10);
 804714a:	fa5f fb82 	uxtb.w	fp, r2
				for (i = 2U; i < (2 + 2); i++) {
 804714e:	d101      	bne.n	8047154 <z_shell_make_argv+0x10c>
 8047150:	2204      	movs	r2, #4
 8047152:	e7d6      	b.n	8047102 <z_shell_make_argv+0xba>
 8047154:	2303      	movs	r3, #3
 8047156:	e7ec      	b.n	8047132 <z_shell_make_argv+0xea>
					} else if ((t >= 'a') &&
 8047158:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 804715c:	2905      	cmp	r1, #5
 804715e:	d803      	bhi.n	8047168 <z_shell_make_argv+0x120>
						v = (v << 4) | (t - 'a' + 10);
 8047160:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
 8047162:	ea42 120b 	orr.w	r2, r2, fp, lsl #4
 8047166:	e7ef      	b.n	8047148 <z_shell_make_argv+0x100>
					} else if ((t >= 'A') && (t <= 'F')) {
 8047168:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 804716c:	2905      	cmp	r1, #5
 804716e:	d801      	bhi.n	8047174 <z_shell_make_argv+0x12c>
						v = (v << 4) | (t - 'A' + 10);
 8047170:	3a37      	subs	r2, #55	; 0x37
 8047172:	e7f6      	b.n	8047162 <z_shell_make_argv+0x11a>
				if (i > 2) {
 8047174:	2802      	cmp	r0, #2
 8047176:	d006      	beq.n	8047186 <z_shell_make_argv+0x13e>
 8047178:	2203      	movs	r2, #3
 804717a:	e7c2      	b.n	8047102 <z_shell_make_argv+0xba>
		if (!quote && isspace((int) c)) {
 804717c:	f818 300b 	ldrb.w	r3, [r8, fp]
 8047180:	071b      	lsls	r3, r3, #28
 8047182:	f53f af6d 	bmi.w	8047060 <z_shell_make_argv+0x18>
		cmd += 1;
 8047186:	3401      	adds	r4, #1
 8047188:	e77f      	b.n	804708a <z_shell_make_argv+0x42>
		if (quote == c) {
 804718a:	45d3      	cmp	fp, sl
 804718c:	d098      	beq.n	80470c0 <z_shell_make_argv+0x78>
		if (quote && c == '\\') {
 804718e:	f1bb 0f5c 	cmp.w	fp, #92	; 0x5c
 8047192:	d1f8      	bne.n	8047186 <z_shell_make_argv+0x13e>
			char t = *(cmd + 1);
 8047194:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
 8047196:	458a      	cmp	sl, r1
 8047198:	d19d      	bne.n	80470d6 <z_shell_make_argv+0x8e>
				memmove(cmd, cmd + 1,
 804719a:	f104 0b01 	add.w	fp, r4, #1
 804719e:	4620      	mov	r0, r4
 80471a0:	f00f fbdc 	bl	805695c <z_shell_strlen>
 80471a4:	4602      	mov	r2, r0
 80471a6:	4659      	mov	r1, fp
 80471a8:	4620      	mov	r0, r4
 80471aa:	f013 fe35 	bl	805ae18 <memmove>
				continue;
 80471ae:	465c      	mov	r4, fp
 80471b0:	e76b      	b.n	804708a <z_shell_make_argv+0x42>
		}
		quote = make_argv(&cmd, c);
	} while (true);

	return quote;
}
 80471b2:	4650      	mov	r0, sl
 80471b4:	b003      	add	sp, #12
 80471b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80471ba:	bf00      	nop
 80471bc:	08063365 	.word	0x08063365

080471c0 <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
 80471c0:	b510      	push	{r4, lr}
 80471c2:	460b      	mov	r3, r1
 80471c4:	4614      	mov	r4, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
 80471c6:	b950      	cbnz	r0, 80471de <z_shell_cmd_get+0x1e>
	return ((uint8_t *)__shell_root_cmds_end -
 80471c8:	490e      	ldr	r1, [pc, #56]	; (8047204 <z_shell_cmd_get+0x44>)
 80471ca:	4a0f      	ldr	r2, [pc, #60]	; (8047208 <z_shell_cmd_get+0x48>)
 80471cc:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->u.entry : NULL;
 80471ce:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 80471d2:	d20f      	bcs.n	80471f4 <z_shell_cmd_get+0x34>
 80471d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80471d8:	684c      	ldr	r4, [r1, #4]
			}
		}
	}

	return res;
}
 80471da:	4620      	mov	r0, r4
 80471dc:	bd10      	pop	{r4, pc}
	if (parent->subcmd) {
 80471de:	6881      	ldr	r1, [r0, #8]
 80471e0:	b141      	cbz	r1, 80471f4 <z_shell_cmd_get+0x34>
			parent->subcmd->u.dynamic_get(idx, dloc);
 80471e2:	684a      	ldr	r2, [r1, #4]
		if (parent->subcmd->is_dynamic) {
 80471e4:	7809      	ldrb	r1, [r1, #0]
 80471e6:	b139      	cbz	r1, 80471f8 <z_shell_cmd_get+0x38>
			parent->subcmd->u.dynamic_get(idx, dloc);
 80471e8:	4618      	mov	r0, r3
 80471ea:	4621      	mov	r1, r4
 80471ec:	4790      	blx	r2
			if (dloc->syntax != NULL) {
 80471ee:	6823      	ldr	r3, [r4, #0]
 80471f0:	2b00      	cmp	r3, #0
 80471f2:	d1f2      	bne.n	80471da <z_shell_cmd_get+0x1a>
	const struct shell_static_entry *res = NULL;
 80471f4:	2400      	movs	r4, #0
 80471f6:	e7f0      	b.n	80471da <z_shell_cmd_get+0x1a>
			if (parent->subcmd->u.entry[idx].syntax != NULL) {
 80471f8:	2014      	movs	r0, #20
 80471fa:	4343      	muls	r3, r0
 80471fc:	18d4      	adds	r4, r2, r3
 80471fe:	58d3      	ldr	r3, [r2, r3]
 8047200:	e7f6      	b.n	80471f0 <z_shell_cmd_get+0x30>
 8047202:	bf00      	nop
 8047204:	0805c184 	.word	0x0805c184
 8047208:	0805c254 	.word	0x0805c254

0804720c <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
 804720c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8047210:	4606      	mov	r6, r0
	uint16_t len = z_shell_strlen(str);
 8047212:	f00f fba3 	bl	805695c <z_shell_strlen>
 8047216:	4605      	mov	r5, r0
	uint16_t shift = 0U;

	if (!str) {
 8047218:	bb4e      	cbnz	r6, 804726e <z_shell_spaces_trim+0x62>

				break;
			}
		}
	}
}
 804721a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
 804721e:	b14c      	cbz	r4, 8047234 <z_shell_spaces_trim+0x28>
					memmove(&str[i + 1],
 8047220:	1c6a      	adds	r2, r5, #1
					len -= shift;
 8047222:	1b2d      	subs	r5, r5, r4
					memmove(&str[i + 1],
 8047224:	b29b      	uxth	r3, r3
 8047226:	3001      	adds	r0, #1
					len -= shift;
 8047228:	b2ad      	uxth	r5, r5
					shift = 0U;
 804722a:	464c      	mov	r4, r9
 804722c:	1ad2      	subs	r2, r2, r3
 804722e:	4430      	add	r0, r6
 8047230:	f013 fdf2 	bl	805ae18 <memmove>
	for (uint16_t i = 0; i < len - 1; i++) {
 8047234:	3701      	adds	r7, #1
 8047236:	b2bb      	uxth	r3, r7
 8047238:	1e6a      	subs	r2, r5, #1
 804723a:	4293      	cmp	r3, r2
 804723c:	4618      	mov	r0, r3
 804723e:	daec      	bge.n	804721a <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
 8047240:	5c32      	ldrb	r2, [r6, r0]
 8047242:	f812 2008 	ldrb.w	r2, [r2, r8]
 8047246:	0712      	lsls	r2, r2, #28
 8047248:	d5f4      	bpl.n	8047234 <z_shell_spaces_trim+0x28>
			for (uint16_t j = i + 1; j < len; j++) {
 804724a:	3301      	adds	r3, #1
 804724c:	b29b      	uxth	r3, r3
 804724e:	b29a      	uxth	r2, r3
 8047250:	4295      	cmp	r5, r2
 8047252:	d9ef      	bls.n	8047234 <z_shell_spaces_trim+0x28>
				if (isspace((int)str[j])) {
 8047254:	5cf2      	ldrb	r2, [r6, r3]
 8047256:	18f1      	adds	r1, r6, r3
 8047258:	f103 0c01 	add.w	ip, r3, #1
 804725c:	f818 2002 	ldrb.w	r2, [r8, r2]
 8047260:	f012 0908 	ands.w	r9, r2, #8
 8047264:	d0db      	beq.n	804721e <z_shell_spaces_trim+0x12>
					shift++;
 8047266:	3401      	adds	r4, #1
 8047268:	4663      	mov	r3, ip
 804726a:	b2a4      	uxth	r4, r4
			for (uint16_t j = i + 1; j < len; j++) {
 804726c:	e7ef      	b.n	804724e <z_shell_spaces_trim+0x42>
 804726e:	2700      	movs	r7, #0
		if (isspace((int)str[i])) {
 8047270:	f8df 8004 	ldr.w	r8, [pc, #4]	; 8047278 <z_shell_spaces_trim+0x6c>
	uint16_t shift = 0U;
 8047274:	463c      	mov	r4, r7
 8047276:	e7de      	b.n	8047236 <z_shell_spaces_trim+0x2a>
 8047278:	08063365 	.word	0x08063365

0804727c <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *shell)
{
 804727c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
 804727e:	6884      	ldr	r4, [r0, #8]
{
 8047280:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
 8047282:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8047286:	b953      	cbnz	r3, 804729e <z_shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
 8047288:	68ab      	ldr	r3, [r5, #8]
 804728a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 804728c:	87da      	strh	r2, [r3, #62]	; 0x3e
}
 804728e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
 8047290:	3a01      	subs	r2, #1
 8047292:	b292      	uxth	r2, r2
 8047294:	87a2      	strh	r2, [r4, #60]	; 0x3c
		if (*buff_len == 0U) {
 8047296:	b92a      	cbnz	r2, 80472a4 <z_shell_cmd_trim+0x28>
			buff[0] = '\0';
 8047298:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			return;
 804729c:	e7f4      	b.n	8047288 <z_shell_cmd_trim+0xc>
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
 804729e:	f104 0042 	add.w	r0, r4, #66	; 0x42
	while (isspace((int) buff[*buff_len - 1U])) {
 80472a2:	4e0f      	ldr	r6, [pc, #60]	; (80472e0 <z_shell_cmd_trim+0x64>)
 80472a4:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80472a6:	1883      	adds	r3, r0, r2
 80472a8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80472ac:	5d9b      	ldrb	r3, [r3, r6]
 80472ae:	f013 0308 	ands.w	r3, r3, #8
 80472b2:	d1ed      	bne.n	8047290 <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
 80472b4:	5483      	strb	r3, [r0, r2]
	while (isspace((int) buff[i++])) {
 80472b6:	b29f      	uxth	r7, r3
 80472b8:	fa10 f183 	uxtah	r1, r0, r3
 80472bc:	3301      	adds	r3, #1
 80472be:	f810 c007 	ldrb.w	ip, [r0, r7]
 80472c2:	f816 c00c 	ldrb.w	ip, [r6, ip]
 80472c6:	f01c 0f08 	tst.w	ip, #8
 80472ca:	d1f4      	bne.n	80472b6 <z_shell_cmd_trim+0x3a>
	if (--i > 0) {
 80472cc:	2f00      	cmp	r7, #0
 80472ce:	d0db      	beq.n	8047288 <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
 80472d0:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
 80472d2:	1c73      	adds	r3, r6, #1
		*buff_len = *buff_len - i;
 80472d4:	1bf6      	subs	r6, r6, r7
 80472d6:	1bda      	subs	r2, r3, r7
 80472d8:	f013 fd9e 	bl	805ae18 <memmove>
 80472dc:	87a6      	strh	r6, [r4, #60]	; 0x3c
 80472de:	e7d3      	b.n	8047288 <z_shell_cmd_trim+0xc>
 80472e0:	08063365 	.word	0x08063365

080472e4 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
 80472e4:	4901      	ldr	r1, [pc, #4]	; (80472ec <z_cursor_next_line_move.isra.0+0x8>)
 80472e6:	f00f bc23 	b.w	8056b30 <z_shell_raw_fprintf>
 80472ea:	bf00      	nop
 80472ec:	08060044 	.word	0x08060044

080472f0 <z_clear_eos.isra.0>:
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
 80472f0:	4a01      	ldr	r2, [pc, #4]	; (80472f8 <z_clear_eos.isra.0+0x8>)
 80472f2:	4902      	ldr	r1, [pc, #8]	; (80472fc <z_clear_eos.isra.0+0xc>)
 80472f4:	f00f bc1c 	b.w	8056b30 <z_shell_raw_fprintf>
 80472f8:	080606a0 	.word	0x080606a0
 80472fc:	0806018b 	.word	0x0806018b

08047300 <z_shell_op_cursor_vert_move>:
#include <ctype.h>
#include "shell_ops.h"

void z_shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	if (delta != 0) {
 8047300:	b159      	cbz	r1, 804731a <z_shell_op_cursor_vert_move+0x1a>
		z_shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
 8047302:	2900      	cmp	r1, #0
 8047304:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 8047308:	6940      	ldr	r0, [r0, #20]
 804730a:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 804730e:	bfcc      	ite	gt
 8047310:	2341      	movgt	r3, #65	; 0x41
 8047312:	2342      	movle	r3, #66	; 0x42
 8047314:	4901      	ldr	r1, [pc, #4]	; (804731c <z_shell_op_cursor_vert_move+0x1c>)
 8047316:	f00f bc0b 	b.w	8056b30 <z_shell_raw_fprintf>
				    delta > 0 ? delta : -delta,
				    delta > 0 ? 'A' : 'B');
	}
}
 804731a:	4770      	bx	lr
 804731c:	08060692 	.word	0x08060692

08047320 <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	if (delta != 0) {
 8047320:	b159      	cbz	r1, 804733a <z_shell_op_cursor_horiz_move+0x1a>
		z_shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
 8047322:	2900      	cmp	r1, #0
 8047324:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 8047328:	6940      	ldr	r0, [r0, #20]
 804732a:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 804732e:	bfcc      	ite	gt
 8047330:	2343      	movgt	r3, #67	; 0x43
 8047332:	2344      	movle	r3, #68	; 0x44
 8047334:	4901      	ldr	r1, [pc, #4]	; (804733c <z_shell_op_cursor_horiz_move+0x1c>)
 8047336:	f00f bbfb 	b.w	8056b30 <z_shell_raw_fprintf>
				    delta > 0 ? delta : -delta,
				    delta > 0 ? 'C' : 'D');
	}
}
 804733a:	4770      	bx	lr
 804733c:	08060692 	.word	0x08060692

08047340 <z_shell_op_cursor_word_move>:
void z_shell_op_cursor_word_move(const struct shell *shell, int16_t val)
{
	int16_t shift;
	int16_t sign;

	if (val < 0) {
 8047340:	2900      	cmp	r1, #0
{
 8047342:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8047346:	4606      	mov	r6, r0
	if (val < 0) {
 8047348:	da2f      	bge.n	80473aa <z_shell_op_cursor_word_move+0x6a>
		val = -val;
 804734a:	4249      	negs	r1, r1
		sign = -1;
 804734c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		val = -val;
 8047350:	b209      	sxth	r1, r1
		sign = -1;
 8047352:	b28c      	uxth	r4, r1
		if (isalnum((int)str[idx]) != 0) {
 8047354:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80473b0 <z_shell_op_cursor_word_move+0x70>
 8047358:	b2af      	uxth	r7, r5
 804735a:	e01e      	b.n	804739a <z_shell_op_cursor_word_move+0x5a>
	} else {
		sign = 1;
	}

	while (val--) {
		shift = shift_calc(shell->ctx->cmd_buff,
 804735c:	68b3      	ldr	r3, [r6, #8]
	bool found = false;
 804735e:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
 8047360:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8047362:	f103 0c42 	add.w	ip, r3, #66	; 0x42
 8047366:	f8b3 e03c 	ldrh.w	lr, [r3, #60]	; 0x3c
 804736a:	4613      	mov	r3, r2
		idx = pos + ret * sign;
 804736c:	1a99      	subs	r1, r3, r2
 804736e:	b209      	sxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
 8047370:	b913      	cbnz	r3, 8047378 <z_shell_op_cursor_word_move+0x38>
 8047372:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8047376:	d00b      	beq.n	8047390 <z_shell_op_cursor_word_move+0x50>
 8047378:	459e      	cmp	lr, r3
 804737a:	d101      	bne.n	8047380 <z_shell_op_cursor_word_move+0x40>
		    ((idx == len) && (sign > 0))) {
 804737c:	2d01      	cmp	r5, #1
 804737e:	d007      	beq.n	8047390 <z_shell_op_cursor_word_move+0x50>
		if (isalnum((int)str[idx]) != 0) {
 8047380:	f81c 9003 	ldrb.w	r9, [ip, r3]
 8047384:	f819 9008 	ldrb.w	r9, [r9, r8]
 8047388:	f019 0f07 	tst.w	r9, #7
 804738c:	d109      	bne.n	80473a2 <z_shell_op_cursor_word_move+0x62>
			if (found) {
 804738e:	b148      	cbz	r0, 80473a4 <z_shell_op_cursor_word_move+0x64>
				   shell->ctx->cmd_buff_pos,
				   shell->ctx->cmd_buff_len, sign);
		z_shell_op_cursor_move(shell, sign * shift);
 8047390:	3c01      	subs	r4, #1
 8047392:	4630      	mov	r0, r6
 8047394:	f00f fc38 	bl	8056c08 <z_shell_op_cursor_move>
 8047398:	b2a4      	uxth	r4, r4
	while (val--) {
 804739a:	2c00      	cmp	r4, #0
 804739c:	d1de      	bne.n	804735c <z_shell_op_cursor_word_move+0x1c>
	}
}
 804739e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
 80473a2:	2001      	movs	r0, #1
	while (1) {
 80473a4:	443b      	add	r3, r7
 80473a6:	b29b      	uxth	r3, r3
		idx = pos + ret * sign;
 80473a8:	e7e0      	b.n	804736c <z_shell_op_cursor_word_move+0x2c>
		sign = 1;
 80473aa:	2501      	movs	r5, #1
 80473ac:	e7d1      	b.n	8047352 <z_shell_op_cursor_word_move+0x12>
 80473ae:	bf00      	nop
 80473b0:	08063365 	.word	0x08063365

080473b4 <z_shell_print_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
 80473b4:	6882      	ldr	r2, [r0, #8]
 80473b6:	4902      	ldr	r1, [pc, #8]	; (80473c0 <z_shell_print_cmd+0xc>)
 80473b8:	3242      	adds	r2, #66	; 0x42
 80473ba:	6940      	ldr	r0, [r0, #20]
 80473bc:	f00f bbb8 	b.w	8056b30 <z_shell_raw_fprintf>
 80473c0:	0806018b 	.word	0x0806018b

080473c4 <z_shell_vt100_color_set>:

void z_shell_vt100_color_set(const struct shell *shell,
			     enum shell_vt100_color color)
{

	if (shell->ctx->vt100_ctx.col.col == color) {
 80473c4:	6883      	ldr	r3, [r0, #8]
{
 80473c6:	b507      	push	{r0, r1, r2, lr}
	if (shell->ctx->vt100_ctx.col.col == color) {
 80473c8:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80473cc:	428a      	cmp	r2, r1
 80473ce:	d01f      	beq.n	8047410 <z_shell_vt100_color_set+0x4c>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
 80473d0:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
 80473d4:	b1f9      	cbz	r1, 8047416 <z_shell_vt100_color_set+0x52>

		uint8_t cmd[] = SHELL_VT100_COLOR(color - 1);
 80473d6:	231b      	movs	r3, #27
 80473d8:	312f      	adds	r1, #47	; 0x2f

		z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 80473da:	466a      	mov	r2, sp
 80473dc:	6940      	ldr	r0, [r0, #20]
		uint8_t cmd[] = SHELL_VT100_COLOR(color - 1);
 80473de:	f88d 3000 	strb.w	r3, [sp]
 80473e2:	235b      	movs	r3, #91	; 0x5b
 80473e4:	f88d 1005 	strb.w	r1, [sp, #5]
 80473e8:	f88d 3001 	strb.w	r3, [sp, #1]
 80473ec:	2331      	movs	r3, #49	; 0x31
		z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 80473ee:	490e      	ldr	r1, [pc, #56]	; (8047428 <z_shell_vt100_color_set+0x64>)
		uint8_t cmd[] = SHELL_VT100_COLOR(color - 1);
 80473f0:	f88d 3002 	strb.w	r3, [sp, #2]
 80473f4:	233b      	movs	r3, #59	; 0x3b
 80473f6:	f88d 3003 	strb.w	r3, [sp, #3]
 80473fa:	2333      	movs	r3, #51	; 0x33
 80473fc:	f88d 3004 	strb.w	r3, [sp, #4]
 8047400:	236d      	movs	r3, #109	; 0x6d
 8047402:	f88d 3006 	strb.w	r3, [sp, #6]
 8047406:	2300      	movs	r3, #0
 8047408:	f88d 3007 	strb.w	r3, [sp, #7]
		z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 804740c:	f00f fb90 	bl	8056b30 <z_shell_raw_fprintf>
	} else {
		static const uint8_t cmd[] = SHELL_VT100_MODESOFF;

		z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
	}
}
 8047410:	b003      	add	sp, #12
 8047412:	f85d fb04 	ldr.w	pc, [sp], #4
		z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 8047416:	4a05      	ldr	r2, [pc, #20]	; (804742c <z_shell_vt100_color_set+0x68>)
 8047418:	4903      	ldr	r1, [pc, #12]	; (8047428 <z_shell_vt100_color_set+0x64>)
 804741a:	6940      	ldr	r0, [r0, #20]
}
 804741c:	b003      	add	sp, #12
 804741e:	f85d eb04 	ldr.w	lr, [sp], #4
		z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 8047422:	f00f bb85 	b.w	8056b30 <z_shell_raw_fprintf>
 8047426:	bf00      	nop
 8047428:	0806018b 	.word	0x0806018b
 804742c:	08060699 	.word	0x08060699

08047430 <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *shell,
				       const struct shell_vt100_colors *color)
{
 8047430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8047432:	460d      	mov	r5, r1
	z_shell_vt100_color_set(shell, color->col);
 8047434:	7809      	ldrb	r1, [r1, #0]
{
 8047436:	4604      	mov	r4, r0
	z_shell_vt100_color_set(shell, color->col);
 8047438:	f7ff ffc4 	bl	80473c4 <z_shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
 804743c:	786b      	ldrb	r3, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
 804743e:	b1f3      	cbz	r3, 804747e <z_shell_vt100_colors_restore+0x4e>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
 8047440:	68a2      	ldr	r2, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
 8047442:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
 8047446:	4299      	cmp	r1, r3
 8047448:	d019      	beq.n	804747e <z_shell_vt100_colors_restore+0x4e>
	uint8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
 804744a:	211b      	movs	r1, #27
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
 804744c:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 8047450:	466a      	mov	r2, sp
 8047452:	6960      	ldr	r0, [r4, #20]
	uint8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
 8047454:	f88d 1000 	strb.w	r1, [sp]
 8047458:	215b      	movs	r1, #91	; 0x5b
 804745a:	f88d 1001 	strb.w	r1, [sp, #1]
 804745e:	2134      	movs	r1, #52	; 0x34
 8047460:	f88d 1002 	strb.w	r1, [sp, #2]
 8047464:	f103 012f 	add.w	r1, r3, #47	; 0x2f
 8047468:	f88d 1003 	strb.w	r1, [sp, #3]
 804746c:	216d      	movs	r1, #109	; 0x6d
 804746e:	f88d 1004 	strb.w	r1, [sp, #4]
 8047472:	2100      	movs	r1, #0
 8047474:	f88d 1005 	strb.w	r1, [sp, #5]
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 8047478:	4902      	ldr	r1, [pc, #8]	; (8047484 <z_shell_vt100_colors_restore+0x54>)
 804747a:	f00f fb59 	bl	8056b30 <z_shell_raw_fprintf>
}
 804747e:	b003      	add	sp, #12
 8047480:	bd30      	pop	{r4, r5, pc}
 8047482:	bf00      	nop
 8047484:	0806018b 	.word	0x0806018b

08047488 <z_shell_op_word_remove>:
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 8047488:	6883      	ldr	r3, [r0, #8]
{
 804748a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((shell->ctx->cmd_buff_len == 0) ||
 804748c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
 804748e:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
 8047490:	2a00      	cmp	r2, #0
 8047492:	d048      	beq.n	8047526 <z_shell_op_word_remove+0x9e>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 8047494:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if ((shell->ctx->cmd_buff_len == 0) ||
 8047496:	2800      	cmp	r0, #0
 8047498:	d045      	beq.n	8047526 <z_shell_op_word_remove+0x9e>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 804749a:	3041      	adds	r0, #65	; 0x41
	char *str_start = &shell->ctx->cmd_buff[0];
 804749c:	f103 0642 	add.w	r6, r3, #66	; 0x42
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 80474a0:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
 80474a2:	4603      	mov	r3, r0
 80474a4:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
 80474a6:	42b3      	cmp	r3, r6
 80474a8:	4619      	mov	r1, r3
 80474aa:	b2a4      	uxth	r4, r4
 80474ac:	d30d      	bcc.n	80474ca <z_shell_op_word_remove+0x42>
 80474ae:	f811 7901 	ldrb.w	r7, [r1], #-1
 80474b2:	2f20      	cmp	r7, #32
 80474b4:	d035      	beq.n	8047522 <z_shell_op_word_remove+0x9a>
 80474b6:	4619      	mov	r1, r3
 80474b8:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
 80474ba:	7808      	ldrb	r0, [r1, #0]
 80474bc:	2820      	cmp	r0, #32
 80474be:	d004      	beq.n	80474ca <z_shell_op_word_remove+0x42>
		++chars_to_delete;
 80474c0:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
 80474c2:	429e      	cmp	r6, r3
		--str;
 80474c4:	4619      	mov	r1, r3
		++chars_to_delete;
 80474c6:	b2a4      	uxth	r4, r4
	while ((str >= str_start) && (*str != ' ')) {
 80474c8:	d9f5      	bls.n	80474b6 <z_shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
 80474ca:	1c4b      	adds	r3, r1, #1
 80474cc:	1c60      	adds	r0, r4, #1
 80474ce:	1b12      	subs	r2, r2, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 80474d0:	2600      	movs	r6, #0
 80474d2:	4401      	add	r1, r0
 80474d4:	4618      	mov	r0, r3
 80474d6:	9301      	str	r3, [sp, #4]
 80474d8:	f013 fc9e 	bl	805ae18 <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
 80474dc:	68a9      	ldr	r1, [r5, #8]
	z_shell_op_cursor_move(shell, -chars_to_delete);
 80474de:	4628      	mov	r0, r5
	shell->ctx->cmd_buff_len -= chars_to_delete;
 80474e0:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
 80474e2:	1b12      	subs	r2, r2, r4
 80474e4:	b292      	uxth	r2, r2
 80474e6:	878a      	strh	r2, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 80474e8:	440a      	add	r2, r1
	z_shell_op_cursor_move(shell, -chars_to_delete);
 80474ea:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 80474ec:	f882 6042 	strb.w	r6, [r2, #66]	; 0x42
	z_shell_op_cursor_move(shell, -chars_to_delete);
 80474f0:	b209      	sxth	r1, r1
 80474f2:	f00f fb89 	bl	8056c08 <z_shell_op_cursor_move>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
 80474f6:	6968      	ldr	r0, [r5, #20]
 80474f8:	4a0c      	ldr	r2, [pc, #48]	; (804752c <z_shell_op_word_remove+0xa4>)
 80474fa:	490d      	ldr	r1, [pc, #52]	; (8047530 <z_shell_op_word_remove+0xa8>)
 80474fc:	f00f fb18 	bl	8056b30 <z_shell_raw_fprintf>
	z_shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
 8047500:	4631      	mov	r1, r6
 8047502:	9b01      	ldr	r3, [sp, #4]
 8047504:	4628      	mov	r0, r5
 8047506:	4a0a      	ldr	r2, [pc, #40]	; (8047530 <z_shell_op_word_remove+0xa8>)
 8047508:	f00f fc51 	bl	8056dae <z_shell_fprintf>
	z_clear_eos(shell);
 804750c:	6968      	ldr	r0, [r5, #20]
 804750e:	f7ff feef 	bl	80472f0 <z_clear_eos.isra.0>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
 8047512:	4a08      	ldr	r2, [pc, #32]	; (8047534 <z_shell_op_word_remove+0xac>)
 8047514:	4906      	ldr	r1, [pc, #24]	; (8047530 <z_shell_op_word_remove+0xa8>)
 8047516:	6968      	ldr	r0, [r5, #20]
}
 8047518:	b003      	add	sp, #12
 804751a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 804751e:	f00f bb07 	b.w	8056b30 <z_shell_raw_fprintf>
 8047522:	460b      	mov	r3, r1
 8047524:	e7be      	b.n	80474a4 <z_shell_op_word_remove+0x1c>
 8047526:	b003      	add	sp, #12
 8047528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804752a:	bf00      	nop
 804752c:	080606a4 	.word	0x080606a4
 8047530:	0806018b 	.word	0x0806018b
 8047534:	0806069d 	.word	0x0806069d

08047538 <reprint_from_cursor>:
{
 8047538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804753c:	4604      	mov	r4, r0
 804753e:	460d      	mov	r5, r1
	if (data_removed) {
 8047540:	4617      	mov	r7, r2
 8047542:	b112      	cbz	r2, 804754a <reprint_from_cursor+0x12>
		z_clear_eos(shell);
 8047544:	6940      	ldr	r0, [r0, #20]
 8047546:	f7ff fed3 	bl	80472f0 <z_clear_eos.isra.0>
	return shell->ctx->internal.flags.obscure == 1;
 804754a:	68a3      	ldr	r3, [r4, #8]
 804754c:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
 8047550:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 8047552:	f3c2 01c0 	ubfx	r1, r2, #3, #1
	if (z_flag_obscure_get(shell)) {
 8047556:	0712      	lsls	r2, r2, #28
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
 8047558:	f100 0042 	add.w	r0, r0, #66	; 0x42
 804755c:	4403      	add	r3, r0
	if (z_flag_obscure_get(shell)) {
 804755e:	d51f      	bpl.n	80475a0 <reprint_from_cursor+0x68>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
 8047560:	4618      	mov	r0, r3
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
 8047562:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80475b0 <reprint_from_cursor+0x78>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
 8047566:	f7f9 f977 	bl	8040858 <strlen>
 804756a:	4606      	mov	r6, r0
		while (len--) {
 804756c:	b996      	cbnz	r6, 8047594 <reprint_from_cursor+0x5c>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
 804756e:	68a3      	ldr	r3, [r4, #8]
	if (full_line_cmd(shell)) {
 8047570:	4620      	mov	r0, r4
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
 8047572:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8047574:	87da      	strh	r2, [r3, #62]	; 0x3e
	if (full_line_cmd(shell)) {
 8047576:	f00f fae8 	bl	8056b4a <full_line_cmd>
 804757a:	b120      	cbz	r0, 8047586 <reprint_from_cursor+0x4e>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
 804757c:	b107      	cbz	r7, 8047580 <reprint_from_cursor+0x48>
 804757e:	b115      	cbz	r5, 8047586 <reprint_from_cursor+0x4e>
			z_cursor_next_line_move(shell);
 8047580:	6960      	ldr	r0, [r4, #20]
 8047582:	f7ff feaf 	bl	80472e4 <z_cursor_next_line_move.isra.0>
	z_shell_op_cursor_move(shell, -diff);
 8047586:	4269      	negs	r1, r5
 8047588:	4620      	mov	r0, r4
 804758a:	b209      	sxth	r1, r1
}
 804758c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(shell, -diff);
 8047590:	f00f bb3a 	b.w	8056c08 <z_shell_op_cursor_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
 8047594:	4641      	mov	r1, r8
 8047596:	6960      	ldr	r0, [r4, #20]
 8047598:	3e01      	subs	r6, #1
 804759a:	f00f fac9 	bl	8056b30 <z_shell_raw_fprintf>
 804759e:	e7e5      	b.n	804756c <reprint_from_cursor+0x34>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s",
 80475a0:	4a02      	ldr	r2, [pc, #8]	; (80475ac <reprint_from_cursor+0x74>)
 80475a2:	4620      	mov	r0, r4
 80475a4:	f00f fc03 	bl	8056dae <z_shell_fprintf>
 80475a8:	e7e1      	b.n	804756e <reprint_from_cursor+0x36>
 80475aa:	bf00      	nop
 80475ac:	0806018b 	.word	0x0806018b
 80475b0:	08061010 	.word	0x08061010

080475b4 <z_shell_op_char_insert>:
	if (shell->ctx->internal.flags.insert_mode &&
 80475b4:	6883      	ldr	r3, [r0, #8]
{
 80475b6:	b513      	push	{r0, r1, r4, lr}
 80475b8:	f88d 1007 	strb.w	r1, [sp, #7]
 80475bc:	4604      	mov	r4, r0
	if (shell->ctx->internal.flags.insert_mode &&
 80475be:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 80475c2:	07d0      	lsls	r0, r2, #31
 80475c4:	d521      	bpl.n	804760a <z_shell_op_char_insert+0x56>
		(shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
 80475c6:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
	if (shell->ctx->internal.flags.insert_mode &&
 80475c8:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80475ca:	428a      	cmp	r2, r1
 80475cc:	d01d      	beq.n	804760a <z_shell_op_char_insert+0x56>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
 80475ce:	1c48      	adds	r0, r1, #1
		char_replace(shell, data);
 80475d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
 80475d4:	4419      	add	r1, r3
 80475d6:	87d8      	strh	r0, [r3, #62]	; 0x3e
 80475d8:	f881 2042 	strb.w	r2, [r1, #66]	; 0x42
	return shell->ctx->internal.flags.echo == 1;
 80475dc:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
 80475e0:	0749      	lsls	r1, r1, #29
 80475e2:	d510      	bpl.n	8047606 <z_shell_op_char_insert+0x52>
	return shell->ctx->internal.flags.obscure == 1;
 80475e4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
 80475e8:	6960      	ldr	r0, [r4, #20]
		data = '*';
 80475ea:	f013 0f08 	tst.w	r3, #8
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
 80475ee:	490a      	ldr	r1, [pc, #40]	; (8047618 <z_shell_op_char_insert+0x64>)
 80475f0:	bf18      	it	ne
 80475f2:	222a      	movne	r2, #42	; 0x2a
 80475f4:	f00f fa9c 	bl	8056b30 <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell)) {
 80475f8:	4620      	mov	r0, r4
 80475fa:	f00f fabc 	bl	8056b76 <z_shell_cursor_in_empty_line>
 80475fe:	b110      	cbz	r0, 8047606 <z_shell_op_char_insert+0x52>
		z_cursor_next_line_move(shell);
 8047600:	6960      	ldr	r0, [r4, #20]
 8047602:	f7ff fe6f 	bl	80472e4 <z_cursor_next_line_move.isra.0>
}
 8047606:	b002      	add	sp, #8
 8047608:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
 804760a:	2201      	movs	r2, #1
 804760c:	f10d 0107 	add.w	r1, sp, #7
 8047610:	4620      	mov	r0, r4
 8047612:	f00f fbd9 	bl	8056dc8 <data_insert>
}
 8047616:	e7f6      	b.n	8047606 <z_shell_op_char_insert+0x52>
 8047618:	08060696 	.word	0x08060696

0804761c <z_shell_print_prompt_and_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
 804761c:	6883      	ldr	r3, [r0, #8]
 804761e:	2103      	movs	r1, #3
 8047620:	4a09      	ldr	r2, [pc, #36]	; (8047648 <z_shell_print_prompt_and_cmd+0x2c>)
 8047622:	681b      	ldr	r3, [r3, #0]
{
 8047624:	b510      	push	{r4, lr}
 8047626:	4604      	mov	r4, r0
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
 8047628:	f00f fbc1 	bl	8056dae <z_shell_fprintf>
	return shell->ctx->internal.flags.echo == 1;
 804762c:	68a3      	ldr	r3, [r4, #8]
 804762e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (z_flag_echo_get(shell)) {
 8047632:	075b      	lsls	r3, r3, #29
 8047634:	d507      	bpl.n	8047646 <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(shell);
 8047636:	4620      	mov	r0, r4
 8047638:	f7ff febc 	bl	80473b4 <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(shell);
 804763c:	4620      	mov	r0, r4
}
 804763e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(shell);
 8047642:	f00f babe 	b.w	8056bc2 <z_shell_op_cursor_position_synchronize>
}
 8047646:	bd10      	pop	{r4, pc}
 8047648:	0806018b 	.word	0x0806018b

0804764c <init>:

static int init(const struct shell_transport *transport,
		const void *config,
		shell_transport_handler_t evt_handler,
		void *context)
{
 804764c:	b510      	push	{r4, lr}
 804764e:	460c      	mov	r4, r1
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
 8047650:	6841      	ldr	r1, [r0, #4]

	sh_uart->ctrl_blk->dev = (const struct device *)config;
 8047652:	6808      	ldr	r0, [r1, #0]
	sh_uart->ctrl_blk->handler = evt_handler;
	sh_uart->ctrl_blk->context = context;
 8047654:	6083      	str	r3, [r0, #8]
	sh_uart->ctrl_blk->handler = evt_handler;
 8047656:	e9c0 4200 	strd	r4, r2, [r0]
	ring_buf_reset(sh_uart->tx_ringbuf);
 804765a:	6888      	ldr	r0, [r1, #8]
	sh_uart->ctrl_blk->tx_busy = 0;
 804765c:	2200      	movs	r2, #0
	ring_buf_reset(sh_uart->tx_ringbuf);
 804765e:	f00f fc38 	bl	8056ed2 <ring_buf_reset>
	ring_buf_reset(sh_uart->rx_ringbuf);
 8047662:	68c8      	ldr	r0, [r1, #12]
 8047664:	f00f fc35 	bl	8056ed2 <ring_buf_reset>
	sh_uart->ctrl_blk->tx_busy = 0;
 8047668:	680b      	ldr	r3, [r1, #0]
 804766a:	60da      	str	r2, [r3, #12]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
 804766c:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
 804766e:	b12b      	cbz	r3, 804767c <init+0x30>
 8047670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8047672:	b11b      	cbz	r3, 804767c <init+0x30>
		api->irq_callback_set(dev, cb, user_data);
 8047674:	460a      	mov	r2, r1
 8047676:	4620      	mov	r0, r4
 8047678:	4904      	ldr	r1, [pc, #16]	; (804768c <init+0x40>)
 804767a:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
 804767c:	68a3      	ldr	r3, [r4, #8]
 804767e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047680:	b10b      	cbz	r3, 8047686 <init+0x3a>
		api->irq_rx_enable(dev);
 8047682:	4620      	mov	r0, r4
 8047684:	4798      	blx	r3
		k_timer_user_data_set(sh_uart->timer, (void *)sh_uart);
		k_timer_start(sh_uart->timer, RX_POLL_PERIOD, RX_POLL_PERIOD);
	}

	return 0;
}
 8047686:	2000      	movs	r0, #0
 8047688:	bd10      	pop	{r4, pc}
 804768a:	bf00      	nop
 804768c:	080476c1 	.word	0x080476c1

08047690 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
 8047690:	b507      	push	{r0, r1, r2, lr}
 8047692:	4809      	ldr	r0, [pc, #36]	; (80476b8 <enable_shell_uart+0x28>)
 8047694:	f012 fddf 	bl	805a256 <z_device_ready>
 8047698:	b158      	cbz	r0, 80476b2 <enable_shell_uart+0x22>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, true, log_backend, level);
 804769a:	2304      	movs	r3, #4
 804769c:	4906      	ldr	r1, [pc, #24]	; (80476b8 <enable_shell_uart+0x28>)
 804769e:	4807      	ldr	r0, [pc, #28]	; (80476bc <enable_shell_uart+0x2c>)
 80476a0:	9300      	str	r3, [sp, #0]
 80476a2:	2301      	movs	r3, #1
 80476a4:	461a      	mov	r2, r3
 80476a6:	f7ff fb13 	bl	8046cd0 <shell_init>

	return 0;
 80476aa:	2000      	movs	r0, #0
}
 80476ac:	b003      	add	sp, #12
 80476ae:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENODEV;
 80476b2:	f06f 0012 	mvn.w	r0, #18
 80476b6:	e7f9      	b.n	80476ac <enable_shell_uart+0x1c>
 80476b8:	0805b9ac 	.word	0x0805b9ac
 80476bc:	0805c154 	.word	0x0805c154

080476c0 <uart_callback>:
{
 80476c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80476c4:	4683      	mov	fp, r0
 80476c6:	460d      	mov	r5, r1
	if (api->irq_update == NULL) {
 80476c8:	6883      	ldr	r3, [r0, #8]
 80476ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80476cc:	b103      	cbz	r3, 80476d0 <uart_callback+0x10>
	return api->irq_update(dev);
 80476ce:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
 80476d0:	f8db 3008 	ldr.w	r3, [fp, #8]
 80476d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80476d6:	bb8b      	cbnz	r3, 804773c <uart_callback+0x7c>
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
 80476d8:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80477d8 <uart_callback+0x118>
 80476dc:	f04f 0800 	mov.w	r8, #0
 80476e0:	4e3c      	ldr	r6, [pc, #240]	; (80477d4 <uart_callback+0x114>)
			LOG_WRN("RX ring buffer full.");
 80476e2:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80477dc <uart_callback+0x11c>
 80476e6:	eba9 0606 	sub.w	r6, r9, r6
 80476ea:	08b6      	lsrs	r6, r6, #2
 80476ec:	01b6      	lsls	r6, r6, #6
 80476ee:	f046 0602 	orr.w	r6, r6, #2
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
 80476f2:	68e8      	ldr	r0, [r5, #12]
 80476f4:	a901      	add	r1, sp, #4
 80476f6:	6902      	ldr	r2, [r0, #16]
 80476f8:	f00e fa49 	bl	8055b8e <ring_buf_put_claim>
		if (len > 0) {
 80476fc:	4607      	mov	r7, r0
 80476fe:	2800      	cmp	r0, #0
 8047700:	d034      	beq.n	804776c <uart_callback+0xac>
	if (api->fifo_read == NULL) {
 8047702:	f8db 3008 	ldr.w	r3, [fp, #8]
			rd_len = uart_fifo_read(dev, data, len);
 8047706:	9901      	ldr	r1, [sp, #4]
 8047708:	699b      	ldr	r3, [r3, #24]
 804770a:	b363      	cbz	r3, 8047766 <uart_callback+0xa6>
	return api->fifo_read(dev, rx_data, size);
 804770c:	4602      	mov	r2, r0
 804770e:	4658      	mov	r0, fp
 8047710:	4798      	blx	r3
 8047712:	4604      	mov	r4, r0
				new_data = true;
 8047714:	2c00      	cmp	r4, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
 8047716:	68e8      	ldr	r0, [r5, #12]
 8047718:	4621      	mov	r1, r4
				new_data = true;
 804771a:	bf18      	it	ne
 804771c:	f04f 0801 	movne.w	r8, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
 8047720:	f00e fa51 	bl	8055bc6 <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
 8047724:	b10c      	cbz	r4, 804772a <uart_callback+0x6a>
 8047726:	42a7      	cmp	r7, r4
 8047728:	d0e3      	beq.n	80476f2 <uart_callback+0x32>
	if (new_data) {
 804772a:	f1b8 0f00 	cmp.w	r8, #0
 804772e:	d009      	beq.n	8047744 <uart_callback+0x84>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
 8047730:	682b      	ldr	r3, [r5, #0]
 8047732:	2000      	movs	r0, #0
 8047734:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8047738:	4790      	blx	r2
}
 804773a:	e003      	b.n	8047744 <uart_callback+0x84>
	return api->irq_rx_ready(dev);
 804773c:	4658      	mov	r0, fp
 804773e:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
 8047740:	2800      	cmp	r0, #0
 8047742:	d1c9      	bne.n	80476d8 <uart_callback+0x18>
	if (api->irq_tx_ready == NULL) {
 8047744:	f8db 3008 	ldr.w	r3, [fp, #8]
 8047748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804774a:	bb33      	cbnz	r3, 804779a <uart_callback+0xda>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
 804774c:	68a8      	ldr	r0, [r5, #8]
 804774e:	a901      	add	r1, sp, #4
 8047750:	6902      	ldr	r2, [r0, #16]
 8047752:	f00e fa71 	bl	8055c38 <ring_buf_get_claim>
	if (len) {
 8047756:	4604      	mov	r4, r0
 8047758:	bb30      	cbnz	r0, 80477a8 <uart_callback+0xe8>
		uart_irq_tx_disable(dev);
 804775a:	4658      	mov	r0, fp
 804775c:	f00f fb93 	bl	8056e86 <uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
 8047760:	682b      	ldr	r3, [r5, #0]
 8047762:	60dc      	str	r4, [r3, #12]
 8047764:	e02c      	b.n	80477c0 <uart_callback+0x100>
		return -ENOSYS;
 8047766:	f06f 0457 	mvn.w	r4, #87	; 0x57
 804776a:	e7d3      	b.n	8047714 <uart_callback+0x54>
			LOG_WRN("RX ring buffer full.");
 804776c:	f8d9 3000 	ldr.w	r3, [r9]
 8047770:	f013 0f06 	tst.w	r3, #6
 8047774:	d003      	beq.n	804777e <uart_callback+0xbe>
 8047776:	4631      	mov	r1, r6
 8047778:	4650      	mov	r0, sl
 804777a:	f00e fc34 	bl	8055fe6 <log_0>
	if (api->fifo_read == NULL) {
 804777e:	f8db 3008 	ldr.w	r3, [fp, #8]
 8047782:	699b      	ldr	r3, [r3, #24]
 8047784:	b133      	cbz	r3, 8047794 <uart_callback+0xd4>
	return api->fifo_read(dev, rx_data, size);
 8047786:	2201      	movs	r2, #1
 8047788:	f10d 0103 	add.w	r1, sp, #3
 804778c:	4658      	mov	r0, fp
 804778e:	4798      	blx	r3
			rd_len = uart_fifo_read(dev, &dummy, 1);
 8047790:	4604      	mov	r4, r0
 8047792:	e7c7      	b.n	8047724 <uart_callback+0x64>
		return -ENOSYS;
 8047794:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8047798:	e7fa      	b.n	8047790 <uart_callback+0xd0>
	return api->irq_tx_ready(dev);
 804779a:	4658      	mov	r0, fp
 804779c:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
 804779e:	2800      	cmp	r0, #0
 80477a0:	d1d4      	bne.n	804774c <uart_callback+0x8c>
}
 80477a2:	b003      	add	sp, #12
 80477a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (api->fifo_fill == NULL) {
 80477a8:	f8db 3008 	ldr.w	r3, [fp, #8]
		len = uart_fifo_fill(dev, data, len);
 80477ac:	9901      	ldr	r1, [sp, #4]
 80477ae:	695b      	ldr	r3, [r3, #20]
 80477b0:	b163      	cbz	r3, 80477cc <uart_callback+0x10c>
	return api->fifo_fill(dev, tx_data, size);
 80477b2:	4602      	mov	r2, r0
 80477b4:	4658      	mov	r0, fp
 80477b6:	4798      	blx	r3
 80477b8:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
 80477ba:	68a8      	ldr	r0, [r5, #8]
 80477bc:	f00e fa67 	bl	8055c8e <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
 80477c0:	682b      	ldr	r3, [r5, #0]
 80477c2:	2001      	movs	r0, #1
 80477c4:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 80477c8:	4790      	blx	r2
}
 80477ca:	e7ea      	b.n	80477a2 <uart_callback+0xe2>
		return -ENOSYS;
 80477cc:	f06f 0157 	mvn.w	r1, #87	; 0x57
 80477d0:	e7f3      	b.n	80477ba <uart_callback+0xfa>
 80477d2:	bf00      	nop
 80477d4:	200208c8 	.word	0x200208c8
 80477d8:	20020934 	.word	0x20020934
 80477dc:	080606a7 	.word	0x080606a7

080477e0 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
 80477e0:	4901      	ldr	r1, [pc, #4]	; (80477e8 <z_cursor_next_line_move.isra.0+0x8>)
 80477e2:	f00f bbb2 	b.w	8056f4a <z_shell_raw_fprintf>
 80477e6:	bf00      	nop
 80477e8:	08060044 	.word	0x08060044

080477ec <formatted_text_print.constprop.0>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
 80477ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80477f0:	4604      	mov	r4, r0
 80477f2:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
 80477f4:	460e      	mov	r6, r1
 80477f6:	2900      	cmp	r1, #0
 80477f8:	d067      	beq.n	80478ca <formatted_text_print.constprop.0+0xde>
 80477fa:	2500      	movs	r5, #0
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
 80477fc:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80478d0 <formatted_text_print.constprop.0+0xe4>
 8047800:	5d73      	ldrb	r3, [r6, r5]
 8047802:	f813 3009 	ldrb.w	r3, [r3, r9]
 8047806:	071a      	lsls	r2, r3, #28
 8047808:	d41e      	bmi.n	8047848 <formatted_text_print.constprop.0+0x5c>
	return str == NULL ? 0U : (uint16_t)strlen(str);
 804780a:	4630      	mov	r0, r6
 804780c:	eb06 0a05 	add.w	sl, r6, r5
 8047810:	f7f9 f822 	bl	8040858 <strlen>
		size_t idx = 0;

		length = z_shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
 8047814:	68a3      	ldr	r3, [r4, #8]
		length = z_shell_strlen(str) - offset;
 8047816:	b280      	uxth	r0, r0
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
 8047818:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
 804781a:	1b40      	subs	r0, r0, r5
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
 804781c:	eba2 0308 	sub.w	r3, r2, r8
		if (length <=
 8047820:	4298      	cmp	r0, r3
 8047822:	d913      	bls.n	804784c <formatted_text_print.constprop.0+0x60>
 8047824:	4651      	mov	r1, sl
		size_t idx = 0;
 8047826:	2700      	movs	r7, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
 8047828:	f811 0b01 	ldrb.w	r0, [r1], #1
 804782c:	f819 c000 	ldrb.w	ip, [r9, r0]
 8047830:	f01c 0f08 	tst.w	ip, #8
 8047834:	d002      	beq.n	804783c <formatted_text_print.constprop.0+0x50>
				length = idx;
				if (*(str + offset + idx) == '\n') {
 8047836:	280a      	cmp	r0, #10
 8047838:	d02f      	beq.n	804789a <formatted_text_print.constprop.0+0xae>
 804783a:	463b      	mov	r3, r7
					break;
				}
			}

			if ((idx + terminal_offset) >=
 804783c:	eb08 0007 	add.w	r0, r8, r7
 8047840:	4282      	cmp	r2, r0
 8047842:	d929      	bls.n	8047898 <formatted_text_print.constprop.0+0xac>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
 8047844:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
 8047846:	e7ef      	b.n	8047828 <formatted_text_print.constprop.0+0x3c>
		++offset;
 8047848:	3501      	adds	r5, #1
 804784a:	e7d9      	b.n	8047800 <formatted_text_print.constprop.0+0x14>
 804784c:	4653      	mov	r3, sl
			for (idx = 0; idx < length; idx++) {
 804784e:	2700      	movs	r7, #0
 8047850:	42b8      	cmp	r0, r7
 8047852:	d016      	beq.n	8047882 <formatted_text_print.constprop.0+0x96>
				if (*(str + offset + idx) == '\n') {
 8047854:	f813 2b01 	ldrb.w	r2, [r3], #1
 8047858:	eb05 0907 	add.w	r9, r5, r7
 804785c:	2a0a      	cmp	r2, #10
 804785e:	d119      	bne.n	8047894 <formatted_text_print.constprop.0+0xa8>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
 8047860:	6960      	ldr	r0, [r4, #20]
					offset += idx + 1;
 8047862:	f109 0501 	add.w	r5, r9, #1
 8047866:	f00f f851 	bl	805690c <z_shell_fprintf_buffer_flush>
					z_shell_write(shell, str + offset, idx);
 804786a:	4651      	mov	r1, sl
 804786c:	463a      	mov	r2, r7
 804786e:	4620      	mov	r0, r4
 8047870:	f00f fa30 	bl	8056cd4 <z_shell_write>
					z_cursor_next_line_move(shell);
 8047874:	6960      	ldr	r0, [r4, #20]
 8047876:	f7ff ffb3 	bl	80477e0 <z_cursor_next_line_move.isra.0>
					z_shell_op_cursor_horiz_move(shell,
 804787a:	4641      	mov	r1, r8
 804787c:	4620      	mov	r0, r4
 804787e:	f7ff fd4f 	bl	8047320 <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, str + offset);
 8047882:	6960      	ldr	r0, [r4, #20]
 8047884:	1971      	adds	r1, r6, r5
 8047886:	f00f fb60 	bl	8056f4a <z_shell_raw_fprintf>

		z_cursor_next_line_move(shell);
		z_shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	z_cursor_next_line_move(shell);
 804788a:	6960      	ldr	r0, [r4, #20]
}
 804788c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_cursor_next_line_move(shell);
 8047890:	f7ff bfa6 	b.w	80477e0 <z_cursor_next_line_move.isra.0>
			for (idx = 0; idx < length; idx++) {
 8047894:	3701      	adds	r7, #1
 8047896:	e7db      	b.n	8047850 <formatted_text_print.constprop.0+0x64>
 8047898:	461f      	mov	r7, r3
 804789a:	6960      	ldr	r0, [r4, #20]
		offset += length;
 804789c:	443d      	add	r5, r7
 804789e:	f00f f835 	bl	805690c <z_shell_fprintf_buffer_flush>
		z_shell_write(shell, str + offset, length);
 80478a2:	463a      	mov	r2, r7
 80478a4:	4651      	mov	r1, sl
 80478a6:	4620      	mov	r0, r4
 80478a8:	f00f fa14 	bl	8056cd4 <z_shell_write>
		while (isspace((int) (*(str + offset)))) {
 80478ac:	5d73      	ldrb	r3, [r6, r5]
 80478ae:	f819 3003 	ldrb.w	r3, [r9, r3]
 80478b2:	071b      	lsls	r3, r3, #28
 80478b4:	d407      	bmi.n	80478c6 <formatted_text_print.constprop.0+0xda>
		z_cursor_next_line_move(shell);
 80478b6:	6960      	ldr	r0, [r4, #20]
 80478b8:	f7ff ff92 	bl	80477e0 <z_cursor_next_line_move.isra.0>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
 80478bc:	4641      	mov	r1, r8
 80478be:	4620      	mov	r0, r4
 80478c0:	f7ff fd2e 	bl	8047320 <z_shell_op_cursor_horiz_move>
	while (true) {
 80478c4:	e7a1      	b.n	804780a <formatted_text_print.constprop.0+0x1e>
			++offset;
 80478c6:	3501      	adds	r5, #1
 80478c8:	e7f0      	b.n	80478ac <formatted_text_print.constprop.0+0xc0>
}
 80478ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80478ce:	bf00      	nop
 80478d0:	08063365 	.word	0x08063365

080478d4 <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *shell,
			       const struct shell_static_entry *parent,
			       const char *description)
{
 80478d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80478d8:	460f      	mov	r7, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
 80478da:	2100      	movs	r1, #0
{
 80478dc:	b08d      	sub	sp, #52	; 0x34
 80478de:	4604      	mov	r4, r0
 80478e0:	4616      	mov	r6, r2
	uint16_t longest = 0U;
 80478e2:	460d      	mov	r5, r1

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
 80478e4:	aa07      	add	r2, sp, #28
 80478e6:	4638      	mov	r0, r7
 80478e8:	f101 0801 	add.w	r8, r1, #1
 80478ec:	f7ff fc68 	bl	80471c0 <z_shell_cmd_get>
 80478f0:	4601      	mov	r1, r0
 80478f2:	b9b0      	cbnz	r0, 8047922 <z_shell_help_subcmd_print+0x4e>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
 80478f4:	b195      	cbz	r5, 804791c <z_shell_help_subcmd_print+0x48>
		return;
	}

	if (description != NULL) {
 80478f6:	b11e      	cbz	r6, 8047900 <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, description);
 80478f8:	4632      	mov	r2, r6
 80478fa:	4620      	mov	r0, r4
 80478fc:	f00f fa57 	bl	8056dae <z_shell_fprintf>
		for (uint16_t i = 0; i < tmp; i++) {
 8047900:	2100      	movs	r1, #0
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8047902:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80479b8 <z_shell_help_subcmd_print+0xe4>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", tabulator,
 8047906:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 80479bc <z_shell_help_subcmd_print+0xe8>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s:", tabulator);
 804790a:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 80479c0 <z_shell_help_subcmd_print+0xec>
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
 804790e:	1c4b      	adds	r3, r1, #1
 8047910:	aa07      	add	r2, sp, #28
 8047912:	4638      	mov	r0, r7
 8047914:	9302      	str	r3, [sp, #8]
 8047916:	f7ff fc53 	bl	80471c0 <z_shell_cmd_get>
 804791a:	b960      	cbnz	r0, 8047936 <z_shell_help_subcmd_print+0x62>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
 804791c:	b00d      	add	sp, #52	; 0x34
 804791e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
 8047922:	6808      	ldr	r0, [r1, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
 8047924:	b110      	cbz	r0, 804792c <z_shell_help_subcmd_print+0x58>
 8047926:	f7f8 ff97 	bl	8040858 <strlen>
 804792a:	b280      	uxth	r0, r0
 804792c:	4285      	cmp	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
 804792e:	4641      	mov	r1, r8
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
 8047930:	bf38      	it	cc
 8047932:	4605      	movcc	r5, r0
 8047934:	e7d6      	b.n	80478e4 <z_shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
 8047936:	e9d0 6900 	ldrd	r6, r9, [r0]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 804793a:	4640      	mov	r0, r8
 804793c:	f7f8 ff8c 	bl	8040858 <strlen>
 8047940:	9003      	str	r0, [sp, #12]
	if ((item_name == NULL) || (item_name[0] == '\0')) {
 8047942:	b316      	cbz	r6, 804798a <z_shell_help_subcmd_print+0xb6>
 8047944:	7832      	ldrb	r2, [r6, #0]
 8047946:	b302      	cbz	r2, 804798a <z_shell_help_subcmd_print+0xb6>
		uint16_t tmp = item_name_width - strlen(item_name);
 8047948:	4630      	mov	r0, r6
 804794a:	f7f8 ff85 	bl	8040858 <strlen>
 804794e:	1a28      	subs	r0, r5, r0
		char space = ' ';
 8047950:	2220      	movs	r2, #32
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", tabulator,
 8047952:	2100      	movs	r1, #0
		uint16_t tmp = item_name_width - strlen(item_name);
 8047954:	b283      	uxth	r3, r0
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", tabulator,
 8047956:	9600      	str	r6, [sp, #0]
		char space = ' ';
 8047958:	f88d 201b 	strb.w	r2, [sp, #27]
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", tabulator,
 804795c:	4620      	mov	r0, r4
		uint16_t tmp = item_name_width - strlen(item_name);
 804795e:	9304      	str	r3, [sp, #16]
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", tabulator,
 8047960:	4652      	mov	r2, sl
 8047962:	4643      	mov	r3, r8
 8047964:	f00f fa23 	bl	8056dae <z_shell_fprintf>
		for (uint16_t i = 0; i < tmp; i++) {
 8047968:	2300      	movs	r3, #0
 804796a:	b29a      	uxth	r2, r3
 804796c:	9904      	ldr	r1, [sp, #16]
 804796e:	428a      	cmp	r2, r1
 8047970:	d30d      	bcc.n	804798e <z_shell_help_subcmd_print+0xba>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s:", tabulator);
 8047972:	4643      	mov	r3, r8
 8047974:	465a      	mov	r2, fp
 8047976:	2100      	movs	r1, #0
 8047978:	4620      	mov	r0, r4
 804797a:	f00f fa18 	bl	8056dae <z_shell_fprintf>
	if (item_help == NULL) {
 804797e:	f1b9 0f00 	cmp.w	r9, #0
 8047982:	d10e      	bne.n	80479a2 <z_shell_help_subcmd_print+0xce>
		z_cursor_next_line_move(shell);
 8047984:	6960      	ldr	r0, [r4, #20]
 8047986:	f7ff ff2b 	bl	80477e0 <z_cursor_next_line_move.isra.0>
		for (uint16_t i = 0; i < tmp; i++) {
 804798a:	9902      	ldr	r1, [sp, #8]
 804798c:	e7bf      	b.n	804790e <z_shell_help_subcmd_print+0x3a>
			z_shell_write(shell, &space, 1);
 804798e:	2201      	movs	r2, #1
 8047990:	f10d 011b 	add.w	r1, sp, #27
 8047994:	4620      	mov	r0, r4
 8047996:	9305      	str	r3, [sp, #20]
 8047998:	f00f f99c 	bl	8056cd4 <z_shell_write>
		for (uint16_t i = 0; i < tmp; i++) {
 804799c:	9b05      	ldr	r3, [sp, #20]
 804799e:	3301      	adds	r3, #1
 80479a0:	e7e3      	b.n	804796a <z_shell_help_subcmd_print+0x96>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 80479a2:	1c6a      	adds	r2, r5, #1
 80479a4:	9b03      	ldr	r3, [sp, #12]
	formatted_text_print(shell, item_help, offset, false);
 80479a6:	4649      	mov	r1, r9
 80479a8:	4620      	mov	r0, r4
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 80479aa:	eb02 0243 	add.w	r2, r2, r3, lsl #1
	formatted_text_print(shell, item_help, offset, false);
 80479ae:	b292      	uxth	r2, r2
 80479b0:	f7ff ff1c 	bl	80477ec <formatted_text_print.constprop.0>
 80479b4:	e7e9      	b.n	804798a <z_shell_help_subcmd_print+0xb6>
 80479b6:	bf00      	nop
 80479b8:	080606fb 	.word	0x080606fb
 80479bc:	080604a5 	.word	0x080604a5
 80479c0:	080606e9 	.word	0x080606e9

080479c4 <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *shell,
			    const struct shell_static_entry *cmd)
{
 80479c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80479c6:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
 80479c8:	6808      	ldr	r0, [r1, #0]
{
 80479ca:	460d      	mov	r5, r1
 80479cc:	b1b8      	cbz	r0, 80479fe <z_shell_help_cmd_print+0x3a>
 80479ce:	f7f8 ff43 	bl	8040858 <strlen>
 80479d2:	b284      	uxth	r4, r0
 80479d4:	4f0b      	ldr	r7, [pc, #44]	; (8047a04 <z_shell_help_cmd_print+0x40>)
 80479d6:	4638      	mov	r0, r7
 80479d8:	f7f8 ff3e 	bl	8040858 <strlen>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
 80479dc:	4404      	add	r4, r0

	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
 80479de:	682b      	ldr	r3, [r5, #0]
 80479e0:	4630      	mov	r0, r6
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
 80479e2:	b2a4      	uxth	r4, r4
	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
 80479e4:	4a08      	ldr	r2, [pc, #32]	; (8047a08 <z_shell_help_cmd_print+0x44>)
 80479e6:	2100      	movs	r1, #0
 80479e8:	9700      	str	r7, [sp, #0]
 80479ea:	f00f f9e0 	bl	8056dae <z_shell_fprintf>

	formatted_text_print(shell, cmd->help, field_width, false);
 80479ee:	4622      	mov	r2, r4
 80479f0:	6869      	ldr	r1, [r5, #4]
 80479f2:	4630      	mov	r0, r6
}
 80479f4:	b003      	add	sp, #12
 80479f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
 80479fa:	f7ff bef7 	b.w	80477ec <formatted_text_print.constprop.0>
 80479fe:	4604      	mov	r4, r0
 8047a00:	e7e8      	b.n	80479d4 <z_shell_help_cmd_print+0x10>
 8047a02:	bf00      	nop
 8047a04:	080606f7 	.word	0x080606f7
 8047a08:	080604a5 	.word	0x080604a5

08047a0c <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
 8047a0c:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
 8047a0e:	4907      	ldr	r1, [pc, #28]	; (8047a2c <z_shell_help_request+0x20>)
{
 8047a10:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
 8047a12:	f7f8 ff17 	bl	8040844 <strcmp>
 8047a16:	b138      	cbz	r0, 8047a28 <z_shell_help_request+0x1c>
 8047a18:	4905      	ldr	r1, [pc, #20]	; (8047a30 <z_shell_help_request+0x24>)
 8047a1a:	4620      	mov	r0, r4
 8047a1c:	f7f8 ff12 	bl	8040844 <strcmp>
 8047a20:	fab0 f080 	clz	r0, r0
 8047a24:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
 8047a26:	bd10      	pop	{r4, pc}
		return true;
 8047a28:	2001      	movs	r0, #1
 8047a2a:	e7fc      	b.n	8047a26 <z_shell_help_request+0x1a>
 8047a2c:	080606ed 	.word	0x080606ed
 8047a30:	080606f0 	.word	0x080606f0

08047a34 <cmd_clear>:
	return ret_val;
}

#ifdef CONFIG_SHELL_VT100_COMMANDS
static int cmd_clear(const struct shell *shell, size_t argc, char **argv)
{
 8047a34:	b510      	push	{r4, lr}
 8047a36:	4604      	mov	r4, r0
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
 8047a38:	4905      	ldr	r1, [pc, #20]	; (8047a50 <cmd_clear+0x1c>)
 8047a3a:	4a06      	ldr	r2, [pc, #24]	; (8047a54 <cmd_clear+0x20>)
 8047a3c:	6940      	ldr	r0, [r0, #20]
 8047a3e:	f00f fa95 	bl	8056f6c <z_shell_raw_fprintf>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
 8047a42:	6960      	ldr	r0, [r4, #20]
 8047a44:	4a04      	ldr	r2, [pc, #16]	; (8047a58 <cmd_clear+0x24>)
 8047a46:	4902      	ldr	r1, [pc, #8]	; (8047a50 <cmd_clear+0x1c>)
 8047a48:	f00f fa90 	bl	8056f6c <z_shell_raw_fprintf>

	return 0;
}
 8047a4c:	2000      	movs	r0, #0
 8047a4e:	bd10      	pop	{r4, pc}
 8047a50:	0806018b 	.word	0x0806018b
 8047a54:	08060b4a 	.word	0x08060b4a
 8047a58:	08060b45 	.word	0x08060b45

08047a5c <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
 8047a5c:	b510      	push	{r4, lr}
 8047a5e:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
 8047a60:	4a04      	ldr	r2, [pc, #16]	; (8047a74 <cmd_resize_default+0x18>)
 8047a62:	4905      	ldr	r1, [pc, #20]	; (8047a78 <cmd_resize_default+0x1c>)
 8047a64:	6940      	ldr	r0, [r0, #20]
 8047a66:	f00f fa81 	bl	8056f6c <z_shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
 8047a6a:	68a3      	ldr	r3, [r4, #8]
 8047a6c:	4a03      	ldr	r2, [pc, #12]	; (8047a7c <cmd_resize_default+0x20>)

	return 0;
}
 8047a6e:	2000      	movs	r0, #0
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
 8047a70:	629a      	str	r2, [r3, #40]	; 0x28
}
 8047a72:	bd10      	pop	{r4, pc}
 8047a74:	08060b39 	.word	0x08060b39
 8047a78:	0806018b 	.word	0x0806018b
 8047a7c:	00500018 	.word	0x00500018

08047a80 <cmd_shell_stats_show>:
{
 8047a80:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %u", shell->stats->log_lost_cnt);
 8047a82:	6983      	ldr	r3, [r0, #24]
 8047a84:	2100      	movs	r1, #0
 8047a86:	4a03      	ldr	r2, [pc, #12]	; (8047a94 <cmd_shell_stats_show+0x14>)
 8047a88:	681b      	ldr	r3, [r3, #0]
 8047a8a:	f00e ff18 	bl	80568be <shell_fprintf>
}
 8047a8e:	2000      	movs	r0, #0
 8047a90:	bd08      	pop	{r3, pc}
 8047a92:	bf00      	nop
 8047a94:	080606fe 	.word	0x080606fe

08047a98 <cmd_history>:
{
 8047a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8047a9a:	4604      	mov	r4, r0
 8047a9c:	b085      	sub	sp, #20
	size_t i = 0;
 8047a9e:	2500      	movs	r5, #0
			shell_print(shell, "[%3d] %s",
 8047aa0:	4f0e      	ldr	r7, [pc, #56]	; (8047adc <cmd_history+0x44>)
				    shell->ctx->temp_buff, &len);
 8047aa2:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(shell->history, true,
 8047aa4:	f10d 030e 	add.w	r3, sp, #14
 8047aa8:	2101      	movs	r1, #1
 8047aaa:	68e0      	ldr	r0, [r4, #12]
 8047aac:	f502 72a1 	add.w	r2, r2, #322	; 0x142
 8047ab0:	f00f fae4 	bl	805707c <z_shell_history_get>
		if (len) {
 8047ab4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8047ab8:	68a3      	ldr	r3, [r4, #8]
 8047aba:	b158      	cbz	r0, 8047ad4 <cmd_history+0x3c>
			shell_print(shell, "[%3d] %s",
 8047abc:	f503 73a1 	add.w	r3, r3, #322	; 0x142
 8047ac0:	1c6e      	adds	r6, r5, #1
 8047ac2:	463a      	mov	r2, r7
 8047ac4:	2100      	movs	r1, #0
 8047ac6:	9300      	str	r3, [sp, #0]
 8047ac8:	4620      	mov	r0, r4
 8047aca:	462b      	mov	r3, r5
 8047acc:	4635      	mov	r5, r6
 8047ace:	f00e fef6 	bl	80568be <shell_fprintf>
		z_shell_history_get(shell->history, true,
 8047ad2:	e7e6      	b.n	8047aa2 <cmd_history+0xa>
	shell->ctx->temp_buff[0] = '\0';
 8047ad4:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
}
 8047ad8:	b005      	add	sp, #20
 8047ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8047adc:	0806070d 	.word	0x0806070d

08047ae0 <cmd_echo>:
	if (argc == 2) {
 8047ae0:	2902      	cmp	r1, #2
{
 8047ae2:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
 8047ae4:	d10c      	bne.n	8047b00 <cmd_echo+0x20>
		shell_error(shell, "%s:%s%s", argv[0],
 8047ae6:	6853      	ldr	r3, [r2, #4]
 8047ae8:	9301      	str	r3, [sp, #4]
 8047aea:	4b0d      	ldr	r3, [pc, #52]	; (8047b20 <cmd_echo+0x40>)
 8047aec:	9300      	str	r3, [sp, #0]
 8047aee:	6813      	ldr	r3, [r2, #0]
 8047af0:	4a0c      	ldr	r2, [pc, #48]	; (8047b24 <cmd_echo+0x44>)
 8047af2:	f00e fee4 	bl	80568be <shell_fprintf>
 8047af6:	f06f 0015 	mvn.w	r0, #21
}
 8047afa:	b003      	add	sp, #12
 8047afc:	f85d fb04 	ldr.w	pc, [sp], #4
	return shell->ctx->internal.flags.echo == 1;
 8047b00:	6883      	ldr	r3, [r0, #8]
	shell_print(shell, "Echo status: %s",
 8047b02:	2100      	movs	r1, #0
 8047b04:	4a08      	ldr	r2, [pc, #32]	; (8047b28 <cmd_echo+0x48>)
 8047b06:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8047b0a:	f013 0f04 	tst.w	r3, #4
 8047b0e:	4b07      	ldr	r3, [pc, #28]	; (8047b2c <cmd_echo+0x4c>)
 8047b10:	bf18      	it	ne
 8047b12:	4613      	movne	r3, r2
 8047b14:	4a06      	ldr	r2, [pc, #24]	; (8047b30 <cmd_echo+0x50>)
 8047b16:	f00e fed2 	bl	80568be <shell_fprintf>
	return 0;
 8047b1a:	2000      	movs	r0, #0
 8047b1c:	e7ed      	b.n	8047afa <cmd_echo+0x1a>
 8047b1e:	bf00      	nop
 8047b20:	08060720 	.word	0x08060720
 8047b24:	08060717 	.word	0x08060717
 8047b28:	0805f149 	.word	0x0805f149
 8047b2c:	0805ebda 	.word	0x0805ebda
 8047b30:	08060735 	.word	0x08060735

08047b34 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
	int err;

	if (argc != 1) {
 8047b34:	2901      	cmp	r1, #1
{
 8047b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8047b38:	4605      	mov	r5, r0
 8047b3a:	b085      	sub	sp, #20
	if (argc != 1) {
 8047b3c:	d00d      	beq.n	8047b5a <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
 8047b3e:	6853      	ldr	r3, [r2, #4]
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
 8047b40:	f06f 0415 	mvn.w	r4, #21
		shell_error(shell, "%s:%s%s", argv[0],
 8047b44:	2102      	movs	r1, #2
 8047b46:	9301      	str	r3, [sp, #4]
 8047b48:	4b53      	ldr	r3, [pc, #332]	; (8047c98 <cmd_resize+0x164>)
 8047b4a:	9300      	str	r3, [sp, #0]
 8047b4c:	6813      	ldr	r3, [r2, #0]
 8047b4e:	4a53      	ldr	r2, [pc, #332]	; (8047c9c <cmd_resize+0x168>)
 8047b50:	f00e feb5 	bl	80568be <shell_fprintf>
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
 8047b54:	4620      	mov	r0, r4
 8047b56:	b005      	add	sp, #20
 8047b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
 8047b5a:	4a51      	ldr	r2, [pc, #324]	; (8047ca0 <cmd_resize+0x16c>)
	char c = 0;
 8047b5c:	2400      	movs	r4, #0
 8047b5e:	4951      	ldr	r1, [pc, #324]	; (8047ca4 <cmd_resize+0x170>)
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
 8047b60:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8047b64:	6940      	ldr	r0, [r0, #20]
 8047b66:	f00f fa01 	bl	8056f6c <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
 8047b6a:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
 8047b6e:	4628      	mov	r0, r5
 8047b70:	f7ff fbc6 	bl	8047300 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
 8047b74:	21fa      	movs	r1, #250	; 0xfa
 8047b76:	4628      	mov	r0, r5
 8047b78:	f7ff fbd2 	bl	8047320 <z_shell_op_cursor_horiz_move>
__ssp_bos_icheck3(memset, void *, int)
 8047b7c:	68a8      	ldr	r0, [r5, #8]
 8047b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8047b82:	4621      	mov	r1, r4
 8047b84:	f500 70a1 	add.w	r0, r0, #322	; 0x142
	char c = 0;
 8047b88:	f88d 400b 	strb.w	r4, [sp, #11]
 8047b8c:	f013 f95e 	bl	805ae4c <memset>
	z_shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
 8047b90:	4945      	ldr	r1, [pc, #276]	; (8047ca8 <cmd_resize+0x174>)
 8047b92:	6968      	ldr	r0, [r5, #20]
 8047b94:	f00f f9ea 	bl	8056f6c <z_shell_raw_fprintf>
 8047b98:	6968      	ldr	r0, [r5, #20]
 8047b9a:	f00e feb7 	bl	805690c <z_shell_fprintf_buffer_flush>
			(void)shell->iface->api->read(shell->iface, &c,
 8047b9e:	6868      	ldr	r0, [r5, #4]
 8047ba0:	2201      	movs	r2, #1
 8047ba2:	f10d 010b 	add.w	r1, sp, #11
 8047ba6:	6803      	ldr	r3, [r0, #0]
 8047ba8:	691f      	ldr	r7, [r3, #16]
 8047baa:	ab03      	add	r3, sp, #12
 8047bac:	47b8      	blx	r7
			if (cnt == 0) {
 8047bae:	9b03      	ldr	r3, [sp, #12]
 8047bb0:	b953      	cbnz	r3, 8047bc8 <cmd_resize+0x94>
	for (uint16_t i = 0; i < 1000; i++) {
 8047bb2:	3e01      	subs	r6, #1
	z_impl_k_busy_wait(usec_to_wait);
 8047bb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8047bb8:	f00a fd5c 	bl	8052674 <z_impl_k_busy_wait>
 8047bbc:	b2b6      	uxth	r6, r6
 8047bbe:	2e00      	cmp	r6, #0
 8047bc0:	d1ed      	bne.n	8047b9e <cmd_resize+0x6a>
		ret_val = -ENOTSUP;
 8047bc2:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8047bc6:	e033      	b.n	8047c30 <cmd_resize+0xfc>
			if ((c != SHELL_VT100_ASCII_ESC) &&
 8047bc8:	f89d 300b 	ldrb.w	r3, [sp, #11]
			    (shell->ctx->temp_buff[0] !=
 8047bcc:	68a9      	ldr	r1, [r5, #8]
			if ((c != SHELL_VT100_ASCII_ESC) &&
 8047bce:	2b1b      	cmp	r3, #27
 8047bd0:	d056      	beq.n	8047c80 <cmd_resize+0x14c>
 8047bd2:	f891 2142 	ldrb.w	r2, [r1, #322]	; 0x142
 8047bd6:	2a1b      	cmp	r2, #27
 8047bd8:	d1e1      	bne.n	8047b9e <cmd_resize+0x6a>
			if (c == 'R') { /* End of response from the terminal. */
 8047bda:	2b52      	cmp	r3, #82	; 0x52
 8047bdc:	d150      	bne.n	8047c80 <cmd_resize+0x14c>
				shell->ctx->temp_buff[buff_idx] = '\0';
 8047bde:	440c      	add	r4, r1
 8047be0:	2300      	movs	r3, #0
 8047be2:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
				if (shell->ctx->temp_buff[1] != '[') {
 8047be6:	f891 2143 	ldrb.w	r2, [r1, #323]	; 0x143
 8047bea:	2a5b      	cmp	r2, #91	; 0x5b
 8047bec:	d150      	bne.n	8047c90 <cmd_resize+0x15c>
 8047bee:	f501 74a2 	add.w	r4, r1, #324	; 0x144
	*y = 0U;
 8047bf2:	461f      	mov	r7, r3
				buff_idx = 2U;
 8047bf4:	2602      	movs	r6, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
 8047bf6:	f814 0b01 	ldrb.w	r0, [r4], #1
 8047bfa:	4632      	mov	r2, r6
					(shell->ctx->temp_buff[buff_idx++] -
 8047bfc:	3601      	adds	r6, #1
				while (shell->ctx->temp_buff[buff_idx] != ';') {
 8047bfe:	283b      	cmp	r0, #59	; 0x3b
					(shell->ctx->temp_buff[buff_idx++] -
 8047c00:	b2b6      	uxth	r6, r6
				while (shell->ctx->temp_buff[buff_idx] != ';') {
 8047c02:	d127      	bne.n	8047c54 <cmd_resize+0x120>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 8047c04:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8047c08:	d0db      	beq.n	8047bc2 <cmd_resize+0x8e>
 8047c0a:	f202 1243 	addw	r2, r2, #323	; 0x143
	*x = 0U;
 8047c0e:	2300      	movs	r3, #0
 8047c10:	fa11 f282 	uxtah	r2, r1, r2
				while (shell->ctx->temp_buff[buff_idx]
 8047c14:	f812 4b01 	ldrb.w	r4, [r2], #1
 8047c18:	bb3c      	cbnz	r4, 8047c6a <cmd_resize+0x136>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
 8047c1a:	2bfa      	cmp	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
 8047c1c:	f881 4142 	strb.w	r4, [r1, #322]	; 0x142
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
 8047c20:	bf28      	it	cs
 8047c22:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
 8047c24:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
 8047c26:	854b      	strh	r3, [r1, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
 8047c28:	463b      	mov	r3, r7
 8047c2a:	bf28      	it	cs
 8047c2c:	23fa      	movcs	r3, #250	; 0xfa
 8047c2e:	850b      	strh	r3, [r1, #40]	; 0x28
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
 8047c30:	4a1e      	ldr	r2, [pc, #120]	; (8047cac <cmd_resize+0x178>)
 8047c32:	491c      	ldr	r1, [pc, #112]	; (8047ca4 <cmd_resize+0x170>)
 8047c34:	6968      	ldr	r0, [r5, #20]
 8047c36:	f00f f999 	bl	8056f6c <z_shell_raw_fprintf>
	if (err != 0) {
 8047c3a:	2c00      	cmp	r4, #0
 8047c3c:	d08a      	beq.n	8047b54 <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
 8047c3e:	68ab      	ldr	r3, [r5, #8]
		shell_warn(shell, "No response from the terminal, assumed 80x24"
 8047c40:	2104      	movs	r1, #4
		shell->ctx->vt100_ctx.cons.terminal_hei =
 8047c42:	4a1b      	ldr	r2, [pc, #108]	; (8047cb0 <cmd_resize+0x17c>)
		shell_warn(shell, "No response from the terminal, assumed 80x24"
 8047c44:	4628      	mov	r0, r5
 8047c46:	f06f 0407 	mvn.w	r4, #7
		shell->ctx->vt100_ctx.cons.terminal_hei =
 8047c4a:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
 8047c4c:	4a19      	ldr	r2, [pc, #100]	; (8047cb4 <cmd_resize+0x180>)
 8047c4e:	f00e fe36 	bl	80568be <shell_fprintf>
		return -ENOEXEC;
 8047c52:	e77f      	b.n	8047b54 <cmd_resize+0x20>
					*y = *y * 10U +
 8047c54:	eb07 0387 	add.w	r3, r7, r7, lsl #2
					if (buff_idx >=
 8047c58:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
 8047c5c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8047c60:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8047c64:	b29f      	uxth	r7, r3
					if (buff_idx >=
 8047c66:	d1c6      	bne.n	8047bf6 <cmd_resize+0xc2>
 8047c68:	e7ab      	b.n	8047bc2 <cmd_resize+0x8e>
					*x = *x * 10U +
 8047c6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
 8047c6e:	3601      	adds	r6, #1
					*x = *x * 10U +
 8047c70:	eb04 0443 	add.w	r4, r4, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
 8047c74:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
 8047c76:	3c30      	subs	r4, #48	; 0x30
					if (buff_idx >=
 8047c78:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
 8047c7a:	b2a3      	uxth	r3, r4
					if (buff_idx >=
 8047c7c:	d9ca      	bls.n	8047c14 <cmd_resize+0xe0>
 8047c7e:	e7a0      	b.n	8047bc2 <cmd_resize+0x8e>
			shell->ctx->temp_buff[buff_idx] = c;
 8047c80:	190a      	adds	r2, r1, r4
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
 8047c82:	3401      	adds	r4, #1
 8047c84:	b2a4      	uxth	r4, r4
			shell->ctx->temp_buff[buff_idx] = c;
 8047c86:	f882 3142 	strb.w	r3, [r2, #322]	; 0x142
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
 8047c8a:	2c09      	cmp	r4, #9
 8047c8c:	d987      	bls.n	8047b9e <cmd_resize+0x6a>
				shell->ctx->temp_buff[0] = 0;
 8047c8e:	2300      	movs	r3, #0
 8047c90:	f881 3142 	strb.w	r3, [r1, #322]	; 0x142
				return -ENOMEM;
 8047c94:	e795      	b.n	8047bc2 <cmd_resize+0x8e>
 8047c96:	bf00      	nop
 8047c98:	08060720 	.word	0x08060720
 8047c9c:	08060717 	.word	0x08060717
 8047ca0:	08060b42 	.word	0x08060b42
 8047ca4:	0806018b 	.word	0x0806018b
 8047ca8:	08060b4e 	.word	0x08060b4e
 8047cac:	08060b3f 	.word	0x08060b3f
 8047cb0:	00500018 	.word	0x00500018
 8047cb4:	08060746 	.word	0x08060746

08047cb8 <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
 8047cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8047cbc:	4607      	mov	r7, r0
 8047cbe:	b089      	sub	sp, #36	; 0x24
 8047cc0:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
 8047cc2:	4689      	mov	r9, r1
 8047cc4:	b921      	cbnz	r1, 8047cd0 <z_shell_wildcard_process+0x18>
		return ret_val;
 8047cc6:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
 8047cc8:	4620      	mov	r0, r4
 8047cca:	b009      	add	sp, #36	; 0x24
 8047ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
 8047cd0:	4610      	mov	r0, r2
 8047cd2:	f00f fbb8 	bl	8057446 <z_shell_has_wildcard>
 8047cd6:	2800      	cmp	r0, #0
 8047cd8:	d0f5      	beq.n	8047cc6 <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
 8047cda:	f04f 0800 	mov.w	r8, #0
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
 8047cde:	2402      	movs	r4, #2
	size_t cmd_idx = 0;
 8047ce0:	4641      	mov	r1, r8
 8047ce2:	e026      	b.n	8047d32 <z_shell_wildcard_process+0x7a>
	return str == NULL ? 0U : (uint16_t)strlen(str);
 8047ce4:	465c      	mov	r4, fp
 8047ce6:	e03e      	b.n	8047d66 <z_shell_wildcard_process+0xae>
	completion_addr = strstr(buff, pattern);
 8047ce8:	4629      	mov	r1, r5
 8047cea:	f50a 70a1 	add.w	r0, sl, #322	; 0x142
 8047cee:	f013 fa38 	bl	805b162 <strstr>
	if (!completion_addr) {
 8047cf2:	4606      	mov	r6, r0
 8047cf4:	2800      	cmp	r0, #0
 8047cf6:	d050      	beq.n	8047d9a <z_shell_wildcard_process+0xe2>
 8047cf8:	f7f8 fdae 	bl	8040858 <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
 8047cfc:	f104 0c01 	add.w	ip, r4, #1
 8047d00:	b280      	uxth	r0, r0
__ssp_bos_icheck3(memmove, void *, const void *)
 8047d02:	4631      	mov	r1, r6
			cnt++;
 8047d04:	f108 0801 	add.w	r8, r8, #1
 8047d08:	1c42      	adds	r2, r0, #1
 8047d0a:	eb06 000c 	add.w	r0, r6, ip
 8047d0e:	f013 f883 	bl	805ae18 <memmove>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8047d12:	4622      	mov	r2, r4
 8047d14:	4659      	mov	r1, fp
 8047d16:	4630      	mov	r0, r6
 8047d18:	f013 f85d 	bl	805add6 <memcpy>
	completion_addr[cmd_len] = ' ';
 8047d1c:	f04f 0320 	mov.w	r3, #32
 8047d20:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
 8047d22:	f8ba 0040 	ldrh.w	r0, [sl, #64]	; 0x40
 8047d26:	4404      	add	r4, r0
 8047d28:	3401      	adds	r4, #1
 8047d2a:	f8aa 4040 	strh.w	r4, [sl, #64]	; 0x40
			ret_val = command_add(shell->ctx->temp_buff,
 8047d2e:	2400      	movs	r4, #0
 8047d30:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
 8047d32:	1c4b      	adds	r3, r1, #1
 8047d34:	aa03      	add	r2, sp, #12
 8047d36:	4648      	mov	r0, r9
 8047d38:	9301      	str	r3, [sp, #4]
 8047d3a:	f7ff fa41 	bl	80471c0 <z_shell_cmd_get>
 8047d3e:	4606      	mov	r6, r0
 8047d40:	b1f8      	cbz	r0, 8047d82 <z_shell_wildcard_process+0xca>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
 8047d42:	2200      	movs	r2, #0
 8047d44:	6831      	ldr	r1, [r6, #0]
 8047d46:	4628      	mov	r0, r5
 8047d48:	f00e f90b 	bl	8055f62 <fnmatch>
 8047d4c:	2800      	cmp	r0, #0
 8047d4e:	d1ef      	bne.n	8047d30 <z_shell_wildcard_process+0x78>
			ret_val = command_add(shell->ctx->temp_buff,
 8047d50:	f8d6 b000 	ldr.w	fp, [r6]
 8047d54:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8047d58:	f1bb 0f00 	cmp.w	fp, #0
 8047d5c:	d0c2      	beq.n	8047ce4 <z_shell_wildcard_process+0x2c>
 8047d5e:	4658      	mov	r0, fp
 8047d60:	f7f8 fd7a 	bl	8040858 <strlen>
 8047d64:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
 8047d66:	f8ba 2040 	ldrh.w	r2, [sl, #64]	; 0x40
 8047d6a:	3201      	adds	r2, #1
 8047d6c:	4422      	add	r2, r4
 8047d6e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8047d72:	ddb9      	ble.n	8047ce8 <z_shell_wildcard_process+0x30>
			ret_val = command_add(shell->ctx->temp_buff,
 8047d74:	2401      	movs	r4, #1
				z_shell_fprintf(shell, SHELL_WARNING,
 8047d76:	462b      	mov	r3, r5
 8047d78:	4a09      	ldr	r2, [pc, #36]	; (8047da0 <z_shell_wildcard_process+0xe8>)
 8047d7a:	2104      	movs	r1, #4
 8047d7c:	4638      	mov	r0, r7
 8047d7e:	f00f f816 	bl	8056dae <z_shell_fprintf>
	if (cnt > 0) {
 8047d82:	f1b8 0f00 	cmp.w	r8, #0
 8047d86:	d09f      	beq.n	8047cc8 <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(shell->ctx->temp_buff,
 8047d88:	68b8      	ldr	r0, [r7, #8]
 8047d8a:	462a      	mov	r2, r5
 8047d8c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8047d90:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 8047d94:	f00e fe18 	bl	80569c8 <z_shell_pattern_remove>
	return ret_val;
 8047d98:	e796      	b.n	8047cc8 <z_shell_wildcard_process+0x10>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
 8047d9a:	2402      	movs	r4, #2
 8047d9c:	e7f1      	b.n	8047d82 <z_shell_wildcard_process+0xca>
 8047d9e:	bf00      	nop
 8047da0:	08060b53 	.word	0x08060b53

08047da4 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
 8047da4:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
 8047da6:	4c04      	ldr	r4, [pc, #16]	; (8047db8 <__do_init_array_aux+0x14>)
 8047da8:	4d04      	ldr	r5, [pc, #16]	; (8047dbc <__do_init_array_aux+0x18>)
 8047daa:	42ac      	cmp	r4, r5
 8047dac:	d300      	bcc.n	8047db0 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
	}
}
 8047dae:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
 8047db0:	f854 3b04 	ldr.w	r3, [r4], #4
 8047db4:	4798      	blx	r3
		func++) {
 8047db6:	e7f8      	b.n	8047daa <__do_init_array_aux+0x6>
 8047db8:	0805bff4 	.word	0x0805bff4
 8047dbc:	0805c024 	.word	0x0805c024

08047dc0 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
 8047dc0:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 8047dc2:	4c05      	ldr	r4, [pc, #20]	; (8047dd8 <__do_global_ctors_aux+0x18>)
 8047dc4:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
 8047dc6:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8047dca:	b905      	cbnz	r5, 8047dce <__do_global_ctors_aux+0xe>
		__CTOR_LIST__[nCtors--]();
	}
}
 8047dcc:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
 8047dce:	f854 3904 	ldr.w	r3, [r4], #-4
 8047dd2:	3d01      	subs	r5, #1
 8047dd4:	4798      	blx	r3
 8047dd6:	e7f8      	b.n	8047dca <__do_global_ctors_aux+0xa>
 8047dd8:	0805bfec 	.word	0x0805bfec

08047ddc <disk_init>:
	k_mutex_unlock(&mutex);
	return rc;
}

static int disk_init(const struct device *dev)
{
 8047ddc:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
 8047dde:	4804      	ldr	r0, [pc, #16]	; (8047df0 <disk_init+0x14>)
 8047de0:	f012 fb0d 	bl	805a3fe <z_impl_k_mutex_init>
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8047de4:	4b03      	ldr	r3, [pc, #12]	; (8047df4 <disk_init+0x18>)
	ARG_UNUSED(dev);

	k_mutex_init(&mutex);
	sys_dlist_init(&disk_access_list);
	return 0;
}
 8047de6:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
 8047de8:	e9c3 3300 	strd	r3, r3, [r3]
 8047dec:	bd08      	pop	{r3, pc}
 8047dee:	bf00      	nop
 8047df0:	20037640 	.word	0x20037640
 8047df4:	20037638 	.word	0x20037638

08047df8 <disk_access_get_di>:
{
 8047df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8047dfa:	4606      	mov	r6, r0
	size_t name_len = strlen(name);
 8047dfc:	f7f8 fd2c 	bl	8040858 <strlen>
 8047e00:	4605      	mov	r5, r0
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8047e02:	4f12      	ldr	r7, [pc, #72]	; (8047e4c <disk_access_get_di+0x54>)
	return z_impl_k_mutex_lock(mutex, timeout);
 8047e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8047e08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8047e0c:	4810      	ldr	r0, [pc, #64]	; (8047e50 <disk_access_get_di+0x58>)
 8047e0e:	f009 fdab 	bl	8051968 <z_impl_k_mutex_lock>
 8047e12:	683c      	ldr	r4, [r7, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8047e14:	42bc      	cmp	r4, r7
 8047e16:	d10e      	bne.n	8047e36 <disk_access_get_di+0x3e>
	struct disk_info *disk = NULL, *itr;
 8047e18:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
 8047e1a:	480d      	ldr	r0, [pc, #52]	; (8047e50 <disk_access_get_di+0x58>)
 8047e1c:	f009 fe1e 	bl	8051a5c <z_impl_k_mutex_unlock>
}
 8047e20:	4620      	mov	r0, r4
 8047e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (strlen(itr->name) != name_len) {
 8047e24:	68a0      	ldr	r0, [r4, #8]
 8047e26:	f7f8 fd17 	bl	8040858 <strlen>
 8047e2a:	42a8      	cmp	r0, r5
 8047e2c:	d006      	beq.n	8047e3c <disk_access_get_di+0x44>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8047e2e:	687b      	ldr	r3, [r7, #4]
 8047e30:	429c      	cmp	r4, r3
 8047e32:	d0f1      	beq.n	8047e18 <disk_access_get_di+0x20>
 8047e34:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&disk_access_list, node) {
 8047e36:	2c00      	cmp	r4, #0
 8047e38:	d1f4      	bne.n	8047e24 <disk_access_get_di+0x2c>
 8047e3a:	e7ed      	b.n	8047e18 <disk_access_get_di+0x20>
		if (strncmp(name, itr->name, name_len) == 0) {
 8047e3c:	462a      	mov	r2, r5
 8047e3e:	68a1      	ldr	r1, [r4, #8]
 8047e40:	4630      	mov	r0, r6
 8047e42:	f013 f947 	bl	805b0d4 <strncmp>
 8047e46:	2800      	cmp	r0, #0
 8047e48:	d1f1      	bne.n	8047e2e <disk_access_get_di+0x36>
 8047e4a:	e7e6      	b.n	8047e1a <disk_access_get_di+0x22>
 8047e4c:	20037638 	.word	0x20037638
 8047e50:	20037640 	.word	0x20037640

08047e54 <disk_access_register>:
{
 8047e54:	b538      	push	{r3, r4, r5, lr}
 8047e56:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 8047e58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8047e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8047e60:	4818      	ldr	r0, [pc, #96]	; (8047ec4 <disk_access_register+0x70>)
 8047e62:	f009 fd81 	bl	8051968 <z_impl_k_mutex_lock>
	if ((disk == NULL) || (disk->name == NULL)) {
 8047e66:	b10d      	cbz	r5, 8047e6c <disk_access_register+0x18>
 8047e68:	68a8      	ldr	r0, [r5, #8]
 8047e6a:	b9a0      	cbnz	r0, 8047e96 <disk_access_register+0x42>
		LOG_ERR("invalid disk interface!!");
 8047e6c:	4916      	ldr	r1, [pc, #88]	; (8047ec8 <disk_access_register+0x74>)
 8047e6e:	680b      	ldr	r3, [r1, #0]
 8047e70:	075a      	lsls	r2, r3, #29
 8047e72:	d106      	bne.n	8047e82 <disk_access_register+0x2e>
		rc = -EINVAL;
 8047e74:	f06f 0415 	mvn.w	r4, #21
	return z_impl_k_mutex_unlock(mutex);
 8047e78:	4812      	ldr	r0, [pc, #72]	; (8047ec4 <disk_access_register+0x70>)
 8047e7a:	f009 fdef 	bl	8051a5c <z_impl_k_mutex_unlock>
}
 8047e7e:	4620      	mov	r0, r4
 8047e80:	bd38      	pop	{r3, r4, r5, pc}
 8047e82:	4b12      	ldr	r3, [pc, #72]	; (8047ecc <disk_access_register+0x78>)
		LOG_ERR("invalid disk interface!!");
 8047e84:	4812      	ldr	r0, [pc, #72]	; (8047ed0 <disk_access_register+0x7c>)
 8047e86:	1ac9      	subs	r1, r1, r3
 8047e88:	0889      	lsrs	r1, r1, #2
 8047e8a:	0189      	lsls	r1, r1, #6
 8047e8c:	f041 0101 	orr.w	r1, r1, #1
 8047e90:	f00e f8a9 	bl	8055fe6 <log_0>
 8047e94:	e7ee      	b.n	8047e74 <disk_access_register+0x20>
	if (disk_access_get_di(disk->name) != NULL) {
 8047e96:	f7ff ffaf 	bl	8047df8 <disk_access_get_di>
 8047e9a:	4604      	mov	r4, r0
 8047e9c:	b158      	cbz	r0, 8047eb6 <disk_access_register+0x62>
		LOG_ERR("disk interface already registered!!");
 8047e9e:	490a      	ldr	r1, [pc, #40]	; (8047ec8 <disk_access_register+0x74>)
 8047ea0:	680b      	ldr	r3, [r1, #0]
 8047ea2:	075b      	lsls	r3, r3, #29
 8047ea4:	d0e6      	beq.n	8047e74 <disk_access_register+0x20>
 8047ea6:	4b09      	ldr	r3, [pc, #36]	; (8047ecc <disk_access_register+0x78>)
 8047ea8:	480a      	ldr	r0, [pc, #40]	; (8047ed4 <disk_access_register+0x80>)
 8047eaa:	1ac9      	subs	r1, r1, r3
 8047eac:	0889      	lsrs	r1, r1, #2
 8047eae:	0189      	lsls	r1, r1, #6
 8047eb0:	f041 0101 	orr.w	r1, r1, #1
 8047eb4:	e7ec      	b.n	8047e90 <disk_access_register+0x3c>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
 8047eb6:	4b08      	ldr	r3, [pc, #32]	; (8047ed8 <disk_access_register+0x84>)
 8047eb8:	685a      	ldr	r2, [r3, #4]

	node->next = list;
	node->prev = tail;
 8047eba:	e9c5 3200 	strd	r3, r2, [r5]

	tail->next = node;
 8047ebe:	6015      	str	r5, [r2, #0]
	list->tail = node;
 8047ec0:	605d      	str	r5, [r3, #4]
}
 8047ec2:	e7d9      	b.n	8047e78 <disk_access_register+0x24>
 8047ec4:	20037640 	.word	0x20037640
 8047ec8:	200208e4 	.word	0x200208e4
 8047ecc:	200208c8 	.word	0x200208c8
 8047ed0:	08060ba5 	.word	0x08060ba5
 8047ed4:	08060bbe 	.word	0x08060bbe
 8047ed8:	20037638 	.word	0x20037638

08047edc <stm32_pin_configure>:
static int stm32_pin_configure(uint32_t pin, uint32_t func, uint32_t altf)
{
	const struct device *port_device;
	int ret = 0;

	if (STM32_PORT(pin) >= STM32_PORTS_MAX) {
 8047edc:	28af      	cmp	r0, #175	; 0xaf
{
 8047ede:	4613      	mov	r3, r2
 8047ee0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8047ee2:	460e      	mov	r6, r1
 8047ee4:	4604      	mov	r4, r0
	if (STM32_PORT(pin) >= STM32_PORTS_MAX) {
 8047ee6:	ea4f 1110 	mov.w	r1, r0, lsr #4
 8047eea:	d816      	bhi.n	8047f1a <stm32_pin_configure+0x3e>
		return -EINVAL;
	}

	port_device = gpio_ports[STM32_PORT(pin)];
 8047eec:	4a0c      	ldr	r2, [pc, #48]	; (8047f20 <stm32_pin_configure+0x44>)
 8047eee:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]

	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8047ef2:	b91d      	cbnz	r5, 8047efc <stm32_pin_configure+0x20>
		return -ENODEV;
 8047ef4:	f06f 0012 	mvn.w	r0, #18
#ifdef CONFIG_PM_DEVICE_RUNTIME
	ret = pm_device_put(port_device);
#endif

	return ret;
}
 8047ef8:	b002      	add	sp, #8
 8047efa:	bd70      	pop	{r4, r5, r6, pc}
 8047efc:	9301      	str	r3, [sp, #4]
 8047efe:	4628      	mov	r0, r5
 8047f00:	f012 f9a9 	bl	805a256 <z_device_ready>
 8047f04:	2800      	cmp	r0, #0
 8047f06:	d0f5      	beq.n	8047ef4 <stm32_pin_configure+0x18>
	gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8047f08:	4628      	mov	r0, r5
 8047f0a:	9b01      	ldr	r3, [sp, #4]
 8047f0c:	4632      	mov	r2, r6
 8047f0e:	f004 010f 	and.w	r1, r4, #15
 8047f12:	f00f fec1 	bl	8057c98 <gpio_stm32_configure>
	return ret;
 8047f16:	2000      	movs	r0, #0
 8047f18:	e7ee      	b.n	8047ef8 <stm32_pin_configure+0x1c>
		return -EINVAL;
 8047f1a:	f06f 0015 	mvn.w	r0, #21
 8047f1e:	e7eb      	b.n	8047ef8 <stm32_pin_configure+0x1c>
 8047f20:	0805d284 	.word	0x0805d284

08047f24 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8047f24:	4901      	ldr	r1, [pc, #4]	; (8047f2c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8047f26:	2210      	movs	r2, #16
	str	r2, [r1]
 8047f28:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8047f2a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8047f2c:	e000ed10 	.word	0xe000ed10

08047f30 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8047f30:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8047f32:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8047f34:	f380 8811 	msr	BASEPRI, r0
	isb
 8047f38:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8047f3c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8047f40:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8047f42:	b662      	cpsie	i
	isb
 8047f44:	f3bf 8f6f 	isb	sy

	bx	lr
 8047f48:	4770      	bx	lr
 8047f4a:	bf00      	nop

08047f4c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8047f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8047f50:	4681      	mov	r9, r0
 8047f52:	b08b      	sub	sp, #44	; 0x2c

	if (esf != NULL) {
 8047f54:	460c      	mov	r4, r1
 8047f56:	2900      	cmp	r1, #0
 8047f58:	d06e      	beq.n	8048038 <z_arm_fatal_error+0xec>
 8047f5a:	4e3b      	ldr	r6, [pc, #236]	; (8048048 <z_arm_fatal_error+0xfc>)
 8047f5c:	4d3b      	ldr	r5, [pc, #236]	; (804804c <z_arm_fatal_error+0x100>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8047f5e:	6833      	ldr	r3, [r6, #0]
 8047f60:	1b75      	subs	r5, r6, r5
 8047f62:	075a      	lsls	r2, r3, #29
 8047f64:	ea4f 0595 	mov.w	r5, r5, lsr #2
 8047f68:	d01d      	beq.n	8047fa6 <z_arm_fatal_error+0x5a>
 8047f6a:	01af      	lsls	r7, r5, #6
 8047f6c:	4838      	ldr	r0, [pc, #224]	; (8048050 <z_arm_fatal_error+0x104>)
 8047f6e:	f047 0701 	orr.w	r7, r7, #1
 8047f72:	f8ad 7000 	strh.w	r7, [sp]
 8047f76:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
 8047f7a:	6809      	ldr	r1, [r1, #0]
 8047f7c:	f00e f872 	bl	8056064 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8047f80:	6833      	ldr	r3, [r6, #0]
 8047f82:	075b      	lsls	r3, r3, #29
 8047f84:	d00f      	beq.n	8047fa6 <z_arm_fatal_error+0x5a>
 8047f86:	f8ad 7000 	strh.w	r7, [sp]
 8047f8a:	4832      	ldr	r0, [pc, #200]	; (8048054 <z_arm_fatal_error+0x108>)
 8047f8c:	68e1      	ldr	r1, [r4, #12]
 8047f8e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8047f92:	f00e f867 	bl	8056064 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8047f96:	6833      	ldr	r3, [r6, #0]
 8047f98:	0758      	lsls	r0, r3, #29
 8047f9a:	d004      	beq.n	8047fa6 <z_arm_fatal_error+0x5a>
 8047f9c:	463a      	mov	r2, r7
 8047f9e:	69e1      	ldr	r1, [r4, #28]
 8047fa0:	482d      	ldr	r0, [pc, #180]	; (8048058 <z_arm_fatal_error+0x10c>)
 8047fa2:	f00e f82f 	bl	8056004 <log_1>
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
 8047fa6:	ea4f 1a85 	mov.w	sl, r5, lsl #6
 8047faa:	46a0      	mov	r8, r4
{
 8047fac:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
 8047fae:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8048064 <z_arm_fatal_error+0x118>
 8047fb2:	f04a 0a01 	orr.w	sl, sl, #1
 8047fb6:	6833      	ldr	r3, [r6, #0]
 8047fb8:	0759      	lsls	r1, r3, #29
 8047fba:	d025      	beq.n	8048008 <z_arm_fatal_error+0xbc>
 8047fbc:	edd8 7a08 	vldr	s15, [r8, #32]
 8047fc0:	1c7b      	adds	r3, r7, #1
 8047fc2:	2208      	movs	r2, #8
 8047fc4:	4658      	mov	r0, fp
 8047fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8047fca:	9304      	str	r3, [sp, #16]
 8047fcc:	1cbb      	adds	r3, r7, #2
 8047fce:	eb0d 0102 	add.w	r1, sp, r2
 8047fd2:	9702      	str	r7, [sp, #8]
 8047fd4:	edcd 7a03 	vstr	s15, [sp, #12]
 8047fd8:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
 8047fdc:	9306      	str	r3, [sp, #24]
 8047fde:	1cfb      	adds	r3, r7, #3
 8047fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8047fe4:	9308      	str	r3, [sp, #32]
 8047fe6:	4653      	mov	r3, sl
 8047fe8:	edcd 7a05 	vstr	s15, [sp, #20]
 8047fec:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
 8047ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8047ff4:	edcd 7a07 	vstr	s15, [sp, #28]
 8047ff8:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
 8047ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8048000:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 8048004:	f00e f84d 	bl	80560a2 <log_n>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
 8048008:	3704      	adds	r7, #4
 804800a:	f108 0810 	add.w	r8, r8, #16
 804800e:	2f10      	cmp	r7, #16
 8048010:	d1d1      	bne.n	8047fb6 <z_arm_fatal_error+0x6a>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
 8048012:	6833      	ldr	r3, [r6, #0]
 8048014:	075a      	lsls	r2, r3, #29
 8048016:	d00f      	beq.n	8048038 <z_arm_fatal_error+0xec>
 8048018:	01ad      	lsls	r5, r5, #6
 804801a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 804801c:	480f      	ldr	r0, [pc, #60]	; (804805c <z_arm_fatal_error+0x110>)
 804801e:	f045 0501 	orr.w	r5, r5, #1
 8048022:	462a      	mov	r2, r5
 8048024:	f00d ffee 	bl	8056004 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8048028:	6833      	ldr	r3, [r6, #0]
 804802a:	075b      	lsls	r3, r3, #29
 804802c:	d004      	beq.n	8048038 <z_arm_fatal_error+0xec>
 804802e:	462a      	mov	r2, r5
 8048030:	69a1      	ldr	r1, [r4, #24]
 8048032:	480b      	ldr	r0, [pc, #44]	; (8048060 <z_arm_fatal_error+0x114>)
 8048034:	f00d ffe6 	bl	8056004 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8048038:	4621      	mov	r1, r4
 804803a:	4648      	mov	r0, r9
}
 804803c:	b00b      	add	sp, #44	; 0x2c
 804803e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_fatal_error(reason, esf);
 8048042:	f009 b8e1 	b.w	8051208 <z_fatal_error>
 8048046:	bf00      	nop
 8048048:	20020920 	.word	0x20020920
 804804c:	200208c8 	.word	0x200208c8
 8048050:	08060be7 	.word	0x08060be7
 8048054:	08060c16 	.word	0x08060c16
 8048058:	08060c45 	.word	0x08060c45
 804805c:	08060c97 	.word	0x08060c97
 8048060:	08060ca6 	.word	0x08060ca6
 8048064:	08060c54 	.word	0x08060c54

08048068 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8048068:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 804806a:	2b00      	cmp	r3, #0
 804806c:	db08      	blt.n	8048080 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 804806e:	2201      	movs	r2, #1
 8048070:	f000 001f 	and.w	r0, r0, #31
 8048074:	095b      	lsrs	r3, r3, #5
 8048076:	fa02 f000 	lsl.w	r0, r2, r0
 804807a:	4a02      	ldr	r2, [pc, #8]	; (8048084 <arch_irq_enable+0x1c>)
 804807c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8048080:	4770      	bx	lr
 8048082:	bf00      	nop
 8048084:	e000e100 	.word	0xe000e100

08048088 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8048088:	b243      	sxtb	r3, r0
		prio += _IRQ_PRIO_OFFSET;
 804808a:	3101      	adds	r1, #1
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 804808c:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804808e:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8048092:	b2c9      	uxtb	r1, r1
  if ((int32_t)(IRQn) >= 0)
 8048094:	db06      	blt.n	80480a4 <z_arm_irq_priority_set+0x1c>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8048096:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 804809a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 804809e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 80480a2:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80480a4:	f000 000f 	and.w	r0, r0, #15
 80480a8:	4b01      	ldr	r3, [pc, #4]	; (80480b0 <z_arm_irq_priority_set+0x28>)
 80480aa:	5419      	strb	r1, [r3, r0]
}
 80480ac:	4770      	bx	lr
 80480ae:	bf00      	nop
 80480b0:	e000ed14 	.word	0xe000ed14

080480b4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 80480b4:	bf30      	wfi
    b z_SysNmiOnReset
 80480b6:	f7ff bffd 	b.w	80480b4 <z_SysNmiOnReset>
 80480ba:	bf00      	nop

080480bc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 80480bc:	4a14      	ldr	r2, [pc, #80]	; (8048110 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 80480be:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 80480c0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80480c4:	4b13      	ldr	r3, [pc, #76]	; (8048114 <z_arm_prep_c+0x58>)
 80480c6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80480c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80480cc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 80480d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80480d4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80480d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
 80480dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80480e0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80480e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 80480e8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80480ec:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
 80480f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80480f4:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 80480f8:	2300      	movs	r3, #0
 80480fa:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 80480fe:	f009 f94d 	bl	805139c <z_bss_zero>
	z_data_copy();
 8048102:	f00a f957 	bl	80523b4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8048106:	f000 fc5b 	bl	80489c0 <z_arm_interrupt_init>
	z_cstart();
 804810a:	f009 f95f 	bl	80513cc <z_cstart>
 804810e:	bf00      	nop
 8048110:	08040200 	.word	0x08040200
 8048114:	e000ed00 	.word	0xe000ed00

08048118 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8048118:	4a0a      	ldr	r2, [pc, #40]	; (8048144 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
 804811a:	490b      	ldr	r1, [pc, #44]	; (8048148 <arch_swap+0x30>)
	_current->arch.basepri = key;
 804811c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 804811e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
 8048120:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
 8048124:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8048128:	4908      	ldr	r1, [pc, #32]	; (804814c <arch_swap+0x34>)
 804812a:	684b      	ldr	r3, [r1, #4]
 804812c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8048130:	604b      	str	r3, [r1, #4]
 8048132:	2300      	movs	r3, #0
 8048134:	f383 8811 	msr	BASEPRI, r3
 8048138:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 804813c:	6893      	ldr	r3, [r2, #8]
}
 804813e:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 8048142:	4770      	bx	lr
 8048144:	20038cc0 	.word	0x20038cc0
 8048148:	0805e1c0 	.word	0x0805e1c0
 804814c:	e000ed00 	.word	0xe000ed00

08048150 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8048150:	4922      	ldr	r1, [pc, #136]	; (80481dc <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8048152:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
 8048154:	f882 e0f5 	strb.w	lr, [r2, #245]	; 0xf5
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8048158:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 804815c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 804815e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8048162:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
 8048166:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
 804816a:	d103      	bne.n	8048174 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
 804816c:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
    vstmia r0, {s16-s31}
 8048170:	ec80 8a10 	vstmia	r0, {s16-s31}

08048174 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8048174:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8048176:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 804817a:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 804817e:	4f18      	ldr	r7, [pc, #96]	; (80481e0 <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8048180:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8048184:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8048186:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8048188:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
 804818a:	f992 e0f5 	ldrsb.w	lr, [r2, #245]	; 0xf5

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 804818e:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
 8048192:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8048194:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8048198:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
 804819c:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
 80481a0:	d003      	beq.n	80481aa <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
 80481a2:	2300      	movs	r3, #0
    vmsr fpscr, r3
 80481a4:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
 80481a8:	e003      	b.n	80481b2 <in_fp_endif>

080481aa <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
 80481aa:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
    vldmia r0, {s16-s31}
 80481ae:	ec90 8a10 	vldmia	r0, {s16-s31}

080481b2 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
 80481b2:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
 80481b6:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
 80481ba:	f383 8814 	msr	CONTROL, r3
    isb
 80481be:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 80481c2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 80481c4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 80481c6:	f000 fd01 	bl	8048bcc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 80481ca:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 80481ce:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 80481d2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 80481d6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 80481da:	4770      	bx	lr
    ldr r1, =_kernel
 80481dc:	20038cc0 	.word	0x20038cc0
    ldr v4, =_SCS_ICSR
 80481e0:	e000ed04 	.word	0xe000ed04

080481e4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 80481e4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 80481e8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 80481ea:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 80481ee:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 80481f2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 80481f4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 80481f8:	2902      	cmp	r1, #2
    beq _oops
 80481fa:	d0ff      	beq.n	80481fc <_oops>

080481fc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 80481fc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 80481fe:	f00f f9f1 	bl	80575e4 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8048202:	bd01      	pop	{r0, pc}

08048204 <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 8048204:	7b01      	ldrb	r1, [r0, #12]
{
 8048206:	b510      	push	{r4, lr}
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 8048208:	f011 0402 	ands.w	r4, r1, #2
 804820c:	d009      	beq.n	8048222 <arch_new_thread+0x1e>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
 804820e:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
 8048212:	3160      	adds	r1, #96	; 0x60
 8048214:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
 8048218:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
 804821c:	3960      	subs	r1, #96	; 0x60
 804821e:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8048222:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8048226:	3a20      	subs	r2, #32
	iframe->a2 = (uint32_t)p1;
 8048228:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
 804822a:	490e      	ldr	r1, [pc, #56]	; (8048264 <arch_new_thread+0x60>)
	iframe->a2 = (uint32_t)p1;
 804822c:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
 804822e:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
 8048230:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
 8048234:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
 8048236:	9b04      	ldr	r3, [sp, #16]
	iframe->pc &= 0xfffffffe;
 8048238:	6191      	str	r1, [r2, #24]
	iframe->a4 = (uint32_t)p3;
 804823a:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 804823c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8048240:	61d3      	str	r3, [r2, #28]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8048242:	2300      	movs	r3, #0
	thread->callee_saved.psp = (uint32_t)iframe;
 8048244:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8048246:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
 804824a:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 804824e:	b91c      	cbnz	r4, 8048258 <arch_new_thread+0x54>
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
 8048250:	23fd      	movs	r3, #253	; 0xfd
 8048252:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8048256:	bd10      	pop	{r4, pc}
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 8048258:	f64f 5308 	movw	r3, #64776	; 0xfd08
 804825c:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
}
 8048260:	e7f9      	b.n	8048256 <arch_new_thread+0x52>
 8048262:	bf00      	nop
 8048264:	080556a3 	.word	0x080556a3

08048268 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * Adjust the MPU stack guard size together with the FPU
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
 8048268:	b530      	push	{r4, r5, lr}
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 804826a:	7b01      	ldrb	r1, [r0, #12]
		if ((thread->arch.mode &
 804826c:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 8048270:	f011 0f02 	tst.w	r1, #2
 8048274:	4a1a      	ldr	r2, [pc, #104]	; (80482e0 <z_arm_mpu_stack_guard_and_fpu_adjust+0x78>)
		if ((thread->arch.mode &
 8048276:	f003 0508 	and.w	r5, r3, #8
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 804827a:	d103      	bne.n	8048284 <z_arm_mpu_stack_guard_and_fpu_adjust+0x1c>
 804827c:	f890 40f5 	ldrb.w	r4, [r0, #245]	; 0xf5
 8048280:	06e4      	lsls	r4, r4, #27
 8048282:	d417      	bmi.n	80482b4 <z_arm_mpu_stack_guard_and_fpu_adjust+0x4c>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
 8048284:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8048286:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
 804828a:	6354      	str	r4, [r2, #52]	; 0x34
		if ((thread->arch.mode &
 804828c:	b96d      	cbnz	r5, 80482aa <z_arm_mpu_stack_guard_and_fpu_adjust+0x42>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 804828e:	f043 0308 	orr.w	r3, r3, #8
 8048292:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
				thread->stack_info.start +=
 8048296:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 804829a:	3360      	adds	r3, #96	; 0x60
 804829c:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
				thread->stack_info.size -=
 80482a0:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 80482a4:	3b60      	subs	r3, #96	; 0x60
 80482a6:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
 80482aa:	f041 0102 	orr.w	r1, r1, #2
 80482ae:	7301      	strb	r1, [r0, #12]

		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
 80482b0:	2080      	movs	r0, #128	; 0x80
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
}
 80482b2:	bd30      	pop	{r4, r5, pc}
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
 80482b4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80482b6:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
 80482ba:	6351      	str	r1, [r2, #52]	; 0x34
		if ((thread->arch.mode &
 80482bc:	b16d      	cbz	r5, 80482da <z_arm_mpu_stack_guard_and_fpu_adjust+0x72>
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 80482be:	f023 0308 	bic.w	r3, r3, #8
 80482c2:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
				thread->stack_info.start -=
 80482c6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 80482ca:	3b60      	subs	r3, #96	; 0x60
 80482cc:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
				thread->stack_info.size +=
 80482d0:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 80482d4:	3360      	adds	r3, #96	; 0x60
 80482d6:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	return MPU_GUARD_ALIGN_AND_SIZE;
 80482da:	2020      	movs	r0, #32
 80482dc:	e7e9      	b.n	80482b2 <z_arm_mpu_stack_guard_and_fpu_adjust+0x4a>
 80482de:	bf00      	nop
 80482e0:	e000ef00 	.word	0xe000ef00

080482e4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 80482e4:	4b0d      	ldr	r3, [pc, #52]	; (804831c <z_check_thread_stack_fail+0x38>)
{
 80482e6:	4602      	mov	r2, r0
	const struct k_thread *thread = _current;
 80482e8:	6898      	ldr	r0, [r3, #8]
{
 80482ea:	b510      	push	{r4, lr}

	if (thread == NULL) {
 80482ec:	b198      	cbz	r0, 8048316 <z_check_thread_stack_fail+0x32>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
 80482ee:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 80482f2:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
 80482f6:	f013 0f08 	tst.w	r3, #8
 80482fa:	bf14      	ite	ne
 80482fc:	2480      	movne	r4, #128	; 0x80
 80482fe:	2420      	moveq	r4, #32
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8048300:	f112 0f16 	cmn.w	r2, #22
 8048304:	d004      	beq.n	8048310 <z_check_thread_stack_fail+0x2c>
 8048306:	1b03      	subs	r3, r0, r4
 8048308:	4293      	cmp	r3, r2
 804830a:	d805      	bhi.n	8048318 <z_check_thread_stack_fail+0x34>
 804830c:	4282      	cmp	r2, r0
 804830e:	d203      	bcs.n	8048318 <z_check_thread_stack_fail+0x34>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8048310:	4281      	cmp	r1, r0
 8048312:	bf28      	it	cs
 8048314:	2000      	movcs	r0, #0
}
 8048316:	bd10      	pop	{r4, pc}
	return 0;
 8048318:	2000      	movs	r0, #0
 804831a:	e7fc      	b.n	8048316 <z_check_thread_stack_fail+0x32>
 804831c:	20038cc0 	.word	0x20038cc0

08048320 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8048320:	4614      	mov	r4, r2
 8048322:	460d      	mov	r5, r1
 8048324:	2200      	movs	r2, #0
 8048326:	b508      	push	{r3, lr}
 8048328:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 804832c:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8048330:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8048334:	f382 8814 	msr	CONTROL, r2
  __ASM volatile ("isb 0xF":::"memory");
 8048338:	f3bf 8f6f 	isb	sy
 804833c:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8048340:	4a08      	ldr	r2, [pc, #32]	; (8048364 <arch_switch_to_main_thread+0x44>)
 8048342:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8048344:	f000 fc42 	bl	8048bcc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8048348:	4620      	mov	r0, r4
 804834a:	f385 8809 	msr	PSP, r5
 804834e:	2100      	movs	r1, #0
 8048350:	b663      	cpsie	if
 8048352:	f381 8811 	msr	BASEPRI, r1
 8048356:	f3bf 8f6f 	isb	sy
 804835a:	2200      	movs	r2, #0
 804835c:	2300      	movs	r3, #0
 804835e:	f00d f9a0 	bl	80556a2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8048362:	bf00      	nop
 8048364:	20038cc0 	.word	0x20038cc0

08048368 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8048368:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 804836a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 804836e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8048372:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8048376:	4904      	ldr	r1, [pc, #16]	; (8048388 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8048378:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 804837a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 804837c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 804837e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8048382:	4902      	ldr	r1, [pc, #8]	; (804838c <_isr_wrapper+0x24>)
	bx r1
 8048384:	4708      	bx	r1
 8048386:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8048388:	0805bc7c 	.word	0x0805bc7c
	ldr r1, =z_arm_int_exit
 804838c:	08048391 	.word	0x08048391

08048390 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8048390:	4b04      	ldr	r3, [pc, #16]	; (80483a4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8048392:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8048394:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8048396:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8048398:	d003      	beq.n	80483a2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 804839a:	4903      	ldr	r1, [pc, #12]	; (80483a8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 804839c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 80483a0:	600a      	str	r2, [r1, #0]

080483a2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 80483a2:	4770      	bx	lr
	ldr r3, =_kernel
 80483a4:	20038cc0 	.word	0x20038cc0
	ldr r1, =_SCS_ICSR
 80483a8:	e000ed04 	.word	0xe000ed04

080483ac <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 80483ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
 80483b0:	4c4d      	ldr	r4, [pc, #308]	; (80484e8 <mem_manage_fault+0x13c>)
{
 80483b2:	4688      	mov	r8, r1
 80483b4:	4607      	mov	r7, r0
 80483b6:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 80483b8:	6823      	ldr	r3, [r4, #0]
 80483ba:	0759      	lsls	r1, r3, #29
 80483bc:	d008      	beq.n	80483d0 <mem_manage_fault+0x24>
 80483be:	494b      	ldr	r1, [pc, #300]	; (80484ec <mem_manage_fault+0x140>)
 80483c0:	484b      	ldr	r0, [pc, #300]	; (80484f0 <mem_manage_fault+0x144>)
 80483c2:	1a61      	subs	r1, r4, r1
 80483c4:	0889      	lsrs	r1, r1, #2
 80483c6:	0189      	lsls	r1, r1, #6
 80483c8:	f041 0101 	orr.w	r1, r1, #1
 80483cc:	f00d fe0b 	bl	8055fe6 <log_0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80483d0:	4b48      	ldr	r3, [pc, #288]	; (80484f4 <mem_manage_fault+0x148>)
 80483d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80483d4:	06da      	lsls	r2, r3, #27
 80483d6:	d50b      	bpl.n	80483f0 <mem_manage_fault+0x44>
		PR_FAULT_INFO("  Stacking error (context area might be"
 80483d8:	6823      	ldr	r3, [r4, #0]
 80483da:	075b      	lsls	r3, r3, #29
 80483dc:	d008      	beq.n	80483f0 <mem_manage_fault+0x44>
 80483de:	4943      	ldr	r1, [pc, #268]	; (80484ec <mem_manage_fault+0x140>)
 80483e0:	4845      	ldr	r0, [pc, #276]	; (80484f8 <mem_manage_fault+0x14c>)
 80483e2:	1a61      	subs	r1, r4, r1
 80483e4:	0889      	lsrs	r1, r1, #2
 80483e6:	0189      	lsls	r1, r1, #6
 80483e8:	f041 0101 	orr.w	r1, r1, #1
 80483ec:	f00d fdfb 	bl	8055fe6 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 80483f0:	4b40      	ldr	r3, [pc, #256]	; (80484f4 <mem_manage_fault+0x148>)
 80483f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80483f4:	071e      	lsls	r6, r3, #28
 80483f6:	d50b      	bpl.n	8048410 <mem_manage_fault+0x64>
		PR_FAULT_INFO("  Unstacking error");
 80483f8:	6823      	ldr	r3, [r4, #0]
 80483fa:	0758      	lsls	r0, r3, #29
 80483fc:	d008      	beq.n	8048410 <mem_manage_fault+0x64>
 80483fe:	493b      	ldr	r1, [pc, #236]	; (80484ec <mem_manage_fault+0x140>)
 8048400:	483e      	ldr	r0, [pc, #248]	; (80484fc <mem_manage_fault+0x150>)
 8048402:	1a61      	subs	r1, r4, r1
 8048404:	0889      	lsrs	r1, r1, #2
 8048406:	0189      	lsls	r1, r1, #6
 8048408:	f041 0101 	orr.w	r1, r1, #1
 804840c:	f00d fdeb 	bl	8055fe6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8048410:	4b38      	ldr	r3, [pc, #224]	; (80484f4 <mem_manage_fault+0x148>)
 8048412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8048414:	0799      	lsls	r1, r3, #30
 8048416:	d432      	bmi.n	804847e <mem_manage_fault+0xd2>
	uint32_t mmfar = -EINVAL;
 8048418:	f06f 0615 	mvn.w	r6, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 804841c:	4b35      	ldr	r3, [pc, #212]	; (80484f4 <mem_manage_fault+0x148>)
 804841e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8048420:	07d9      	lsls	r1, r3, #31
 8048422:	d50b      	bpl.n	804843c <mem_manage_fault+0x90>
		PR_FAULT_INFO("  Instruction Access Violation");
 8048424:	6823      	ldr	r3, [r4, #0]
 8048426:	075a      	lsls	r2, r3, #29
 8048428:	d008      	beq.n	804843c <mem_manage_fault+0x90>
 804842a:	4b30      	ldr	r3, [pc, #192]	; (80484ec <mem_manage_fault+0x140>)
 804842c:	4834      	ldr	r0, [pc, #208]	; (8048500 <mem_manage_fault+0x154>)
 804842e:	1ae3      	subs	r3, r4, r3
 8048430:	089b      	lsrs	r3, r3, #2
 8048432:	019b      	lsls	r3, r3, #6
 8048434:	f043 0101 	orr.w	r1, r3, #1
 8048438:	f00d fdd5 	bl	8055fe6 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 804843c:	4b2d      	ldr	r3, [pc, #180]	; (80484f4 <mem_manage_fault+0x148>)
 804843e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8048440:	069b      	lsls	r3, r3, #26
 8048442:	d50b      	bpl.n	804845c <mem_manage_fault+0xb0>
		PR_FAULT_INFO(
 8048444:	6823      	ldr	r3, [r4, #0]
 8048446:	0758      	lsls	r0, r3, #29
 8048448:	d008      	beq.n	804845c <mem_manage_fault+0xb0>
 804844a:	4928      	ldr	r1, [pc, #160]	; (80484ec <mem_manage_fault+0x140>)
 804844c:	482d      	ldr	r0, [pc, #180]	; (8048504 <mem_manage_fault+0x158>)
 804844e:	1a64      	subs	r4, r4, r1
 8048450:	08a4      	lsrs	r4, r4, #2
 8048452:	01a4      	lsls	r4, r4, #6
 8048454:	f044 0101 	orr.w	r1, r4, #1
 8048458:	f00d fdc5 	bl	8055fe6 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 804845c:	4b25      	ldr	r3, [pc, #148]	; (80484f4 <mem_manage_fault+0x148>)
 804845e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8048460:	06d1      	lsls	r1, r2, #27
 8048462:	d433      	bmi.n	80484cc <mem_manage_fault+0x120>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8048464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8048466:	0792      	lsls	r2, r2, #30
 8048468:	d430      	bmi.n	80484cc <mem_manage_fault+0x120>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 804846a:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 804846c:	4a21      	ldr	r2, [pc, #132]	; (80484f4 <mem_manage_fault+0x148>)
 804846e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8048470:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8048474:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 8048476:	2300      	movs	r3, #0
 8048478:	702b      	strb	r3, [r5, #0]

	return reason;
}
 804847a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
 804847e:	6823      	ldr	r3, [r4, #0]
 8048480:	075a      	lsls	r2, r3, #29
 8048482:	d008      	beq.n	8048496 <mem_manage_fault+0xea>
 8048484:	4919      	ldr	r1, [pc, #100]	; (80484ec <mem_manage_fault+0x140>)
 8048486:	4820      	ldr	r0, [pc, #128]	; (8048508 <mem_manage_fault+0x15c>)
 8048488:	1a61      	subs	r1, r4, r1
 804848a:	0889      	lsrs	r1, r1, #2
 804848c:	0189      	lsls	r1, r1, #6
 804848e:	f041 0101 	orr.w	r1, r1, #1
 8048492:	f00d fda8 	bl	8055fe6 <log_0>
		uint32_t temp = SCB->MMFAR;
 8048496:	4b17      	ldr	r3, [pc, #92]	; (80484f4 <mem_manage_fault+0x148>)
 8048498:	6b5e      	ldr	r6, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 804849a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804849c:	061b      	lsls	r3, r3, #24
 804849e:	d5bb      	bpl.n	8048418 <mem_manage_fault+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 80484a0:	6823      	ldr	r3, [r4, #0]
 80484a2:	0758      	lsls	r0, r3, #29
 80484a4:	d009      	beq.n	80484ba <mem_manage_fault+0x10e>
 80484a6:	4a11      	ldr	r2, [pc, #68]	; (80484ec <mem_manage_fault+0x140>)
 80484a8:	4631      	mov	r1, r6
 80484aa:	4818      	ldr	r0, [pc, #96]	; (804850c <mem_manage_fault+0x160>)
 80484ac:	1aa2      	subs	r2, r4, r2
 80484ae:	0892      	lsrs	r2, r2, #2
 80484b0:	0192      	lsls	r2, r2, #6
 80484b2:	f042 0201 	orr.w	r2, r2, #1
 80484b6:	f00d fda5 	bl	8056004 <log_1>
			if (from_hard_fault != 0) {
 80484ba:	f1b8 0f00 	cmp.w	r8, #0
 80484be:	d0ad      	beq.n	804841c <mem_manage_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 80484c0:	4a0c      	ldr	r2, [pc, #48]	; (80484f4 <mem_manage_fault+0x148>)
 80484c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80484c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80484c8:	6293      	str	r3, [r2, #40]	; 0x28
 80484ca:	e7a7      	b.n	804841c <mem_manage_fault+0x70>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 80484cc:	685b      	ldr	r3, [r3, #4]
 80484ce:	051b      	lsls	r3, r3, #20
 80484d0:	d5cb      	bpl.n	804846a <mem_manage_fault+0xbe>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 80484d2:	4639      	mov	r1, r7
 80484d4:	4630      	mov	r0, r6
 80484d6:	f7ff ff05 	bl	80482e4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 80484da:	2800      	cmp	r0, #0
 80484dc:	d0c5      	beq.n	804846a <mem_manage_fault+0xbe>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80484de:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 80484e2:	2002      	movs	r0, #2
 80484e4:	e7c2      	b.n	804846c <mem_manage_fault+0xc0>
 80484e6:	bf00      	nop
 80484e8:	20020920 	.word	0x20020920
 80484ec:	200208c8 	.word	0x200208c8
 80484f0:	08060cd4 	.word	0x08060cd4
 80484f4:	e000ed00 	.word	0xe000ed00
 80484f8:	08060cea 	.word	0x08060cea
 80484fc:	08060d1d 	.word	0x08060d1d
 8048500:	08060d5e 	.word	0x08060d5e
 8048504:	08060d7d 	.word	0x08060d7d
 8048508:	08060d30 	.word	0x08060d30
 804850c:	08060d48 	.word	0x08060d48

08048510 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
 8048510:	b510      	push	{r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 8048512:	4c3b      	ldr	r4, [pc, #236]	; (8048600 <usage_fault.constprop.0+0xf0>)
 8048514:	6823      	ldr	r3, [r4, #0]
 8048516:	075b      	lsls	r3, r3, #29
 8048518:	d008      	beq.n	804852c <usage_fault.constprop.0+0x1c>
 804851a:	493a      	ldr	r1, [pc, #232]	; (8048604 <usage_fault.constprop.0+0xf4>)
 804851c:	483a      	ldr	r0, [pc, #232]	; (8048608 <usage_fault.constprop.0+0xf8>)
 804851e:	1a61      	subs	r1, r4, r1
 8048520:	0889      	lsrs	r1, r1, #2
 8048522:	0189      	lsls	r1, r1, #6
 8048524:	f041 0101 	orr.w	r1, r1, #1
 8048528:	f00d fd5d 	bl	8055fe6 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 804852c:	4b37      	ldr	r3, [pc, #220]	; (804860c <usage_fault.constprop.0+0xfc>)
 804852e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8048530:	0198      	lsls	r0, r3, #6
 8048532:	d50b      	bpl.n	804854c <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Division by zero");
 8048534:	6823      	ldr	r3, [r4, #0]
 8048536:	0759      	lsls	r1, r3, #29
 8048538:	d008      	beq.n	804854c <usage_fault.constprop.0+0x3c>
 804853a:	4932      	ldr	r1, [pc, #200]	; (8048604 <usage_fault.constprop.0+0xf4>)
 804853c:	4834      	ldr	r0, [pc, #208]	; (8048610 <usage_fault.constprop.0+0x100>)
 804853e:	1a61      	subs	r1, r4, r1
 8048540:	0889      	lsrs	r1, r1, #2
 8048542:	0189      	lsls	r1, r1, #6
 8048544:	f041 0101 	orr.w	r1, r1, #1
 8048548:	f00d fd4d 	bl	8055fe6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 804854c:	4b2f      	ldr	r3, [pc, #188]	; (804860c <usage_fault.constprop.0+0xfc>)
 804854e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8048550:	01da      	lsls	r2, r3, #7
 8048552:	d50b      	bpl.n	804856c <usage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unaligned memory access");
 8048554:	6823      	ldr	r3, [r4, #0]
 8048556:	075b      	lsls	r3, r3, #29
 8048558:	d008      	beq.n	804856c <usage_fault.constprop.0+0x5c>
 804855a:	492a      	ldr	r1, [pc, #168]	; (8048604 <usage_fault.constprop.0+0xf4>)
 804855c:	482d      	ldr	r0, [pc, #180]	; (8048614 <usage_fault.constprop.0+0x104>)
 804855e:	1a61      	subs	r1, r4, r1
 8048560:	0889      	lsrs	r1, r1, #2
 8048562:	0189      	lsls	r1, r1, #6
 8048564:	f041 0101 	orr.w	r1, r1, #1
 8048568:	f00d fd3d 	bl	8055fe6 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 804856c:	4b27      	ldr	r3, [pc, #156]	; (804860c <usage_fault.constprop.0+0xfc>)
 804856e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8048570:	0318      	lsls	r0, r3, #12
 8048572:	d50b      	bpl.n	804858c <usage_fault.constprop.0+0x7c>
		PR_FAULT_INFO("  No coprocessor instructions");
 8048574:	6823      	ldr	r3, [r4, #0]
 8048576:	0759      	lsls	r1, r3, #29
 8048578:	d008      	beq.n	804858c <usage_fault.constprop.0+0x7c>
 804857a:	4922      	ldr	r1, [pc, #136]	; (8048604 <usage_fault.constprop.0+0xf4>)
 804857c:	4826      	ldr	r0, [pc, #152]	; (8048618 <usage_fault.constprop.0+0x108>)
 804857e:	1a61      	subs	r1, r4, r1
 8048580:	0889      	lsrs	r1, r1, #2
 8048582:	0189      	lsls	r1, r1, #6
 8048584:	f041 0101 	orr.w	r1, r1, #1
 8048588:	f00d fd2d 	bl	8055fe6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 804858c:	4b1f      	ldr	r3, [pc, #124]	; (804860c <usage_fault.constprop.0+0xfc>)
 804858e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8048590:	035a      	lsls	r2, r3, #13
 8048592:	d50b      	bpl.n	80485ac <usage_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8048594:	6823      	ldr	r3, [r4, #0]
 8048596:	075b      	lsls	r3, r3, #29
 8048598:	d008      	beq.n	80485ac <usage_fault.constprop.0+0x9c>
 804859a:	491a      	ldr	r1, [pc, #104]	; (8048604 <usage_fault.constprop.0+0xf4>)
 804859c:	481f      	ldr	r0, [pc, #124]	; (804861c <usage_fault.constprop.0+0x10c>)
 804859e:	1a61      	subs	r1, r4, r1
 80485a0:	0889      	lsrs	r1, r1, #2
 80485a2:	0189      	lsls	r1, r1, #6
 80485a4:	f041 0101 	orr.w	r1, r1, #1
 80485a8:	f00d fd1d 	bl	8055fe6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 80485ac:	4b17      	ldr	r3, [pc, #92]	; (804860c <usage_fault.constprop.0+0xfc>)
 80485ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80485b0:	0398      	lsls	r0, r3, #14
 80485b2:	d50b      	bpl.n	80485cc <usage_fault.constprop.0+0xbc>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 80485b4:	6823      	ldr	r3, [r4, #0]
 80485b6:	0759      	lsls	r1, r3, #29
 80485b8:	d008      	beq.n	80485cc <usage_fault.constprop.0+0xbc>
 80485ba:	4912      	ldr	r1, [pc, #72]	; (8048604 <usage_fault.constprop.0+0xf4>)
 80485bc:	4818      	ldr	r0, [pc, #96]	; (8048620 <usage_fault.constprop.0+0x110>)
 80485be:	1a61      	subs	r1, r4, r1
 80485c0:	0889      	lsrs	r1, r1, #2
 80485c2:	0189      	lsls	r1, r1, #6
 80485c4:	f041 0101 	orr.w	r1, r1, #1
 80485c8:	f00d fd0d 	bl	8055fe6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 80485cc:	4b0f      	ldr	r3, [pc, #60]	; (804860c <usage_fault.constprop.0+0xfc>)
 80485ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80485d0:	03da      	lsls	r2, r3, #15
 80485d2:	d50b      	bpl.n	80485ec <usage_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 80485d4:	6823      	ldr	r3, [r4, #0]
 80485d6:	075b      	lsls	r3, r3, #29
 80485d8:	d008      	beq.n	80485ec <usage_fault.constprop.0+0xdc>
 80485da:	490a      	ldr	r1, [pc, #40]	; (8048604 <usage_fault.constprop.0+0xf4>)
 80485dc:	4811      	ldr	r0, [pc, #68]	; (8048624 <usage_fault.constprop.0+0x114>)
 80485de:	1a61      	subs	r1, r4, r1
 80485e0:	0889      	lsrs	r1, r1, #2
 80485e2:	0189      	lsls	r1, r1, #6
 80485e4:	f041 0101 	orr.w	r1, r1, #1
 80485e8:	f00d fcfd 	bl	8055fe6 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 80485ec:	4a07      	ldr	r2, [pc, #28]	; (804860c <usage_fault.constprop.0+0xfc>)

	return reason;
}
 80485ee:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 80485f0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80485f2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80485f6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80485fa:	6293      	str	r3, [r2, #40]	; 0x28
}
 80485fc:	bd10      	pop	{r4, pc}
 80485fe:	bf00      	nop
 8048600:	20020920 	.word	0x20020920
 8048604:	200208c8 	.word	0x200208c8
 8048608:	08060dac 	.word	0x08060dac
 804860c:	e000ed00 	.word	0xe000ed00
 8048610:	08060dc4 	.word	0x08060dc4
 8048614:	08060dd7 	.word	0x08060dd7
 8048618:	08060df1 	.word	0x08060df1
 804861c:	08060e0f 	.word	0x08060e0f
 8048620:	08060e34 	.word	0x08060e34
 8048624:	08060e4e 	.word	0x08060e4e

08048628 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8048628:	b570      	push	{r4, r5, r6, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
 804862a:	4c46      	ldr	r4, [pc, #280]	; (8048744 <bus_fault.constprop.0+0x11c>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 804862c:	460d      	mov	r5, r1
 804862e:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
 8048630:	6823      	ldr	r3, [r4, #0]
 8048632:	0759      	lsls	r1, r3, #29
 8048634:	d008      	beq.n	8048648 <bus_fault.constprop.0+0x20>
 8048636:	4944      	ldr	r1, [pc, #272]	; (8048748 <bus_fault.constprop.0+0x120>)
 8048638:	4844      	ldr	r0, [pc, #272]	; (804874c <bus_fault.constprop.0+0x124>)
 804863a:	1a61      	subs	r1, r4, r1
 804863c:	0889      	lsrs	r1, r1, #2
 804863e:	0189      	lsls	r1, r1, #6
 8048640:	f041 0101 	orr.w	r1, r1, #1
 8048644:	f00d fccf 	bl	8055fe6 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8048648:	4b41      	ldr	r3, [pc, #260]	; (8048750 <bus_fault.constprop.0+0x128>)
 804864a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804864c:	04da      	lsls	r2, r3, #19
 804864e:	d50b      	bpl.n	8048668 <bus_fault.constprop.0+0x40>
		PR_FAULT_INFO("  Stacking error");
 8048650:	6823      	ldr	r3, [r4, #0]
 8048652:	075b      	lsls	r3, r3, #29
 8048654:	d008      	beq.n	8048668 <bus_fault.constprop.0+0x40>
 8048656:	493c      	ldr	r1, [pc, #240]	; (8048748 <bus_fault.constprop.0+0x120>)
 8048658:	483e      	ldr	r0, [pc, #248]	; (8048754 <bus_fault.constprop.0+0x12c>)
 804865a:	1a61      	subs	r1, r4, r1
 804865c:	0889      	lsrs	r1, r1, #2
 804865e:	0189      	lsls	r1, r1, #6
 8048660:	f041 0101 	orr.w	r1, r1, #1
 8048664:	f00d fcbf 	bl	8055fe6 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8048668:	4b39      	ldr	r3, [pc, #228]	; (8048750 <bus_fault.constprop.0+0x128>)
 804866a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804866c:	0518      	lsls	r0, r3, #20
 804866e:	d50b      	bpl.n	8048688 <bus_fault.constprop.0+0x60>
		PR_FAULT_INFO("  Unstacking error");
 8048670:	6823      	ldr	r3, [r4, #0]
 8048672:	0759      	lsls	r1, r3, #29
 8048674:	d008      	beq.n	8048688 <bus_fault.constprop.0+0x60>
 8048676:	4934      	ldr	r1, [pc, #208]	; (8048748 <bus_fault.constprop.0+0x120>)
 8048678:	4837      	ldr	r0, [pc, #220]	; (8048758 <bus_fault.constprop.0+0x130>)
 804867a:	1a61      	subs	r1, r4, r1
 804867c:	0889      	lsrs	r1, r1, #2
 804867e:	0189      	lsls	r1, r1, #6
 8048680:	f041 0101 	orr.w	r1, r1, #1
 8048684:	f00d fcaf 	bl	8055fe6 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8048688:	4b31      	ldr	r3, [pc, #196]	; (8048750 <bus_fault.constprop.0+0x128>)
 804868a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804868c:	059a      	lsls	r2, r3, #22
 804868e:	d522      	bpl.n	80486d6 <bus_fault.constprop.0+0xae>
		PR_FAULT_INFO("  Precise data bus error");
 8048690:	6823      	ldr	r3, [r4, #0]
 8048692:	075b      	lsls	r3, r3, #29
 8048694:	d008      	beq.n	80486a8 <bus_fault.constprop.0+0x80>
 8048696:	492c      	ldr	r1, [pc, #176]	; (8048748 <bus_fault.constprop.0+0x120>)
 8048698:	4830      	ldr	r0, [pc, #192]	; (804875c <bus_fault.constprop.0+0x134>)
 804869a:	1a61      	subs	r1, r4, r1
 804869c:	0889      	lsrs	r1, r1, #2
 804869e:	0189      	lsls	r1, r1, #6
 80486a0:	f041 0101 	orr.w	r1, r1, #1
 80486a4:	f00d fc9f 	bl	8055fe6 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
 80486a8:	4b29      	ldr	r3, [pc, #164]	; (8048750 <bus_fault.constprop.0+0x128>)
 80486aa:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 80486ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80486ae:	0418      	lsls	r0, r3, #16
 80486b0:	d511      	bpl.n	80486d6 <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 80486b2:	6823      	ldr	r3, [r4, #0]
 80486b4:	075a      	lsls	r2, r3, #29
 80486b6:	d008      	beq.n	80486ca <bus_fault.constprop.0+0xa2>
 80486b8:	4a23      	ldr	r2, [pc, #140]	; (8048748 <bus_fault.constprop.0+0x120>)
 80486ba:	4829      	ldr	r0, [pc, #164]	; (8048760 <bus_fault.constprop.0+0x138>)
 80486bc:	1aa2      	subs	r2, r4, r2
 80486be:	0892      	lsrs	r2, r2, #2
 80486c0:	0192      	lsls	r2, r2, #6
 80486c2:	f042 0201 	orr.w	r2, r2, #1
 80486c6:	f00d fc9d 	bl	8056004 <log_1>
			if (from_hard_fault != 0) {
 80486ca:	b126      	cbz	r6, 80486d6 <bus_fault.constprop.0+0xae>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 80486cc:	4a20      	ldr	r2, [pc, #128]	; (8048750 <bus_fault.constprop.0+0x128>)
 80486ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80486d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80486d4:	6293      	str	r3, [r2, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 80486d6:	4b1e      	ldr	r3, [pc, #120]	; (8048750 <bus_fault.constprop.0+0x128>)
 80486d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80486da:	055b      	lsls	r3, r3, #21
 80486dc:	d50b      	bpl.n	80486f6 <bus_fault.constprop.0+0xce>
		PR_FAULT_INFO("  Imprecise data bus error");
 80486de:	6823      	ldr	r3, [r4, #0]
 80486e0:	075e      	lsls	r6, r3, #29
 80486e2:	d008      	beq.n	80486f6 <bus_fault.constprop.0+0xce>
 80486e4:	4918      	ldr	r1, [pc, #96]	; (8048748 <bus_fault.constprop.0+0x120>)
 80486e6:	481f      	ldr	r0, [pc, #124]	; (8048764 <bus_fault.constprop.0+0x13c>)
 80486e8:	1a61      	subs	r1, r4, r1
 80486ea:	0889      	lsrs	r1, r1, #2
 80486ec:	0189      	lsls	r1, r1, #6
 80486ee:	f041 0101 	orr.w	r1, r1, #1
 80486f2:	f00d fc78 	bl	8055fe6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 80486f6:	4b16      	ldr	r3, [pc, #88]	; (8048750 <bus_fault.constprop.0+0x128>)
 80486f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80486fa:	05d0      	lsls	r0, r2, #23
 80486fc:	d513      	bpl.n	8048726 <bus_fault.constprop.0+0xfe>
		PR_FAULT_INFO("  Instruction bus error");
 80486fe:	6823      	ldr	r3, [r4, #0]
 8048700:	0759      	lsls	r1, r3, #29
 8048702:	d008      	beq.n	8048716 <bus_fault.constprop.0+0xee>
 8048704:	4910      	ldr	r1, [pc, #64]	; (8048748 <bus_fault.constprop.0+0x120>)
 8048706:	4818      	ldr	r0, [pc, #96]	; (8048768 <bus_fault.constprop.0+0x140>)
 8048708:	1a64      	subs	r4, r4, r1
 804870a:	08a4      	lsrs	r4, r4, #2
 804870c:	01a4      	lsls	r4, r4, #6
 804870e:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8048712:	f00d fc68 	bl	8055fe6 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8048716:	4a0e      	ldr	r2, [pc, #56]	; (8048750 <bus_fault.constprop.0+0x128>)
	*recoverable = memory_fault_recoverable(esf, true);
 8048718:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 804871a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 804871c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8048720:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8048722:	7028      	strb	r0, [r5, #0]
}
 8048724:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8048726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8048728:	049a      	lsls	r2, r3, #18
 804872a:	d5f4      	bpl.n	8048716 <bus_fault.constprop.0+0xee>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 804872c:	6823      	ldr	r3, [r4, #0]
 804872e:	075b      	lsls	r3, r3, #29
 8048730:	d0f1      	beq.n	8048716 <bus_fault.constprop.0+0xee>
 8048732:	4905      	ldr	r1, [pc, #20]	; (8048748 <bus_fault.constprop.0+0x120>)
 8048734:	480d      	ldr	r0, [pc, #52]	; (804876c <bus_fault.constprop.0+0x144>)
 8048736:	1a64      	subs	r4, r4, r1
 8048738:	08a4      	lsrs	r4, r4, #2
 804873a:	01a4      	lsls	r4, r4, #6
 804873c:	f044 0101 	orr.w	r1, r4, #1
 8048740:	e7e7      	b.n	8048712 <bus_fault.constprop.0+0xea>
 8048742:	bf00      	nop
 8048744:	20020920 	.word	0x20020920
 8048748:	200208c8 	.word	0x200208c8
 804874c:	08060e79 	.word	0x08060e79
 8048750:	e000ed00 	.word	0xe000ed00
 8048754:	08060e8f 	.word	0x08060e8f
 8048758:	08060d1d 	.word	0x08060d1d
 804875c:	08060ea0 	.word	0x08060ea0
 8048760:	08060eb9 	.word	0x08060eb9
 8048764:	08060ece 	.word	0x08060ece
 8048768:	08060ee9 	.word	0x08060ee9
 804876c:	08060d7d 	.word	0x08060d7d

08048770 <z_arm_fault>:
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8048770:	4b7d      	ldr	r3, [pc, #500]	; (8048968 <z_arm_fault+0x1f8>)
{
 8048772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8048776:	685d      	ldr	r5, [r3, #4]
{
 8048778:	b09c      	sub	sp, #112	; 0x70
 804877a:	2700      	movs	r7, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 804877c:	f3c5 0408 	ubfx	r4, r5, #0, #9
 8048780:	f387 8811 	msr	BASEPRI, r7
 8048784:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8048788:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 804878c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8048790:	d111      	bne.n	80487b6 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8048792:	f002 030c 	and.w	r3, r2, #12
 8048796:	2b08      	cmp	r3, #8
 8048798:	d10f      	bne.n	80487ba <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 804879a:	4974      	ldr	r1, [pc, #464]	; (804896c <z_arm_fault+0x1fc>)
 804879c:	680b      	ldr	r3, [r1, #0]
 804879e:	f013 0307 	ands.w	r3, r3, #7
 80487a2:	d01d      	beq.n	80487e0 <z_arm_fault+0x70>
 80487a4:	4b72      	ldr	r3, [pc, #456]	; (8048970 <z_arm_fault+0x200>)
 80487a6:	4873      	ldr	r0, [pc, #460]	; (8048974 <z_arm_fault+0x204>)
 80487a8:	1ac9      	subs	r1, r1, r3
 80487aa:	0889      	lsrs	r1, r1, #2
 80487ac:	0189      	lsls	r1, r1, #6
 80487ae:	f041 0101 	orr.w	r1, r1, #1
 80487b2:	f00d fc18 	bl	8055fe6 <log_0>
		return NULL;
 80487b6:	463e      	mov	r6, r7
 80487b8:	e004      	b.n	80487c4 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80487ba:	0716      	lsls	r6, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 80487bc:	bf4e      	itee	mi
 80487be:	460e      	movmi	r6, r1
			ptr_esf = (z_arch_esf_t *)msp;
 80487c0:	4606      	movpl	r6, r0
			*nested_exc = true;
 80487c2:	2701      	movpl	r7, #1
	*recoverable = false;
 80487c4:	2300      	movs	r3, #0
 80487c6:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
 80487ca:	1ee3      	subs	r3, r4, #3
 80487cc:	2b09      	cmp	r3, #9
 80487ce:	f200 80ad 	bhi.w	804892c <z_arm_fault+0x1bc>
 80487d2:	e8df f003 	tbb	[pc, r3]
 80487d6:	9607      	.short	0x9607
 80487d8:	abab939a 	.word	0xabab939a
 80487dc:	9eababab 	.word	0x9eababab
	*nested_exc = false;
 80487e0:	461f      	mov	r7, r3
 80487e2:	e7e8      	b.n	80487b6 <z_arm_fault+0x46>
	PR_FAULT_INFO("***** HARD FAULT *****");
 80487e4:	4d61      	ldr	r5, [pc, #388]	; (804896c <z_arm_fault+0x1fc>)
 80487e6:	682b      	ldr	r3, [r5, #0]
 80487e8:	075c      	lsls	r4, r3, #29
 80487ea:	d008      	beq.n	80487fe <z_arm_fault+0x8e>
 80487ec:	4960      	ldr	r1, [pc, #384]	; (8048970 <z_arm_fault+0x200>)
 80487ee:	4862      	ldr	r0, [pc, #392]	; (8048978 <z_arm_fault+0x208>)
 80487f0:	1a69      	subs	r1, r5, r1
 80487f2:	0889      	lsrs	r1, r1, #2
 80487f4:	0189      	lsls	r1, r1, #6
 80487f6:	f041 0101 	orr.w	r1, r1, #1
 80487fa:	f00d fbf4 	bl	8055fe6 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80487fe:	4b5a      	ldr	r3, [pc, #360]	; (8048968 <z_arm_fault+0x1f8>)
	*recoverable = false;
 8048800:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8048804:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
 8048806:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 804880a:	f014 0402 	ands.w	r4, r4, #2
 804880e:	d00e      	beq.n	804882e <z_arm_fault+0xbe>
		PR_EXC("  Bus fault on vector table read");
 8048810:	682b      	ldr	r3, [r5, #0]
 8048812:	0758      	lsls	r0, r3, #29
 8048814:	d101      	bne.n	804881a <z_arm_fault+0xaa>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8048816:	2400      	movs	r4, #0
 8048818:	e018      	b.n	804884c <z_arm_fault+0xdc>
 804881a:	4955      	ldr	r1, [pc, #340]	; (8048970 <z_arm_fault+0x200>)
		PR_EXC("  Bus fault on vector table read");
 804881c:	4857      	ldr	r0, [pc, #348]	; (804897c <z_arm_fault+0x20c>)
 804881e:	1a69      	subs	r1, r5, r1
 8048820:	0889      	lsrs	r1, r1, #2
 8048822:	0189      	lsls	r1, r1, #6
 8048824:	f041 0101 	orr.w	r1, r1, #1
	PR_FAULT_INFO(
 8048828:	f00d fbdd 	bl	8055fe6 <log_0>
 804882c:	e7f3      	b.n	8048816 <z_arm_fault+0xa6>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 804882e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8048830:	2a00      	cmp	r2, #0
 8048832:	da25      	bge.n	8048880 <z_arm_fault+0x110>
		PR_EXC("  Debug event");
 8048834:	682b      	ldr	r3, [r5, #0]
 8048836:	0759      	lsls	r1, r3, #29
 8048838:	d0ed      	beq.n	8048816 <z_arm_fault+0xa6>
 804883a:	494d      	ldr	r1, [pc, #308]	; (8048970 <z_arm_fault+0x200>)
 804883c:	4850      	ldr	r0, [pc, #320]	; (8048980 <z_arm_fault+0x210>)
 804883e:	1a69      	subs	r1, r5, r1
 8048840:	0889      	lsrs	r1, r1, #2
 8048842:	0189      	lsls	r1, r1, #6
 8048844:	f041 0101 	orr.w	r1, r1, #1
 8048848:	f00d fbcd 	bl	8055fe6 <log_0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 804884c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8048850:	b99b      	cbnz	r3, 804887a <z_arm_fault+0x10a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8048852:	2268      	movs	r2, #104	; 0x68
 8048854:	4631      	mov	r1, r6
 8048856:	a802      	add	r0, sp, #8
 8048858:	f012 fabd 	bl	805add6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 804885c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804885e:	2f00      	cmp	r7, #0
 8048860:	d07c      	beq.n	804895c <z_arm_fault+0x1ec>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8048862:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8048866:	b922      	cbnz	r2, 8048872 <z_arm_fault+0x102>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8048868:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 804886c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8048870:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 8048872:	a902      	add	r1, sp, #8
 8048874:	4620      	mov	r0, r4
 8048876:	f7ff fb69 	bl	8047f4c <z_arm_fatal_error>
}
 804887a:	b01c      	add	sp, #112	; 0x70
 804887c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8048880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8048882:	005a      	lsls	r2, r3, #1
 8048884:	d5c7      	bpl.n	8048816 <z_arm_fault+0xa6>
		PR_EXC("  Fault escalation (see below)");
 8048886:	682b      	ldr	r3, [r5, #0]
 8048888:	075b      	lsls	r3, r3, #29
 804888a:	d008      	beq.n	804889e <z_arm_fault+0x12e>
 804888c:	4938      	ldr	r1, [pc, #224]	; (8048970 <z_arm_fault+0x200>)
 804888e:	483d      	ldr	r0, [pc, #244]	; (8048984 <z_arm_fault+0x214>)
 8048890:	1a69      	subs	r1, r5, r1
 8048892:	0889      	lsrs	r1, r1, #2
 8048894:	0189      	lsls	r1, r1, #6
 8048896:	f041 0101 	orr.w	r1, r1, #1
 804889a:	f00d fba4 	bl	8055fe6 <log_0>
	uint16_t fault_insn = *(ret_addr - 1);
 804889e:	69b3      	ldr	r3, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 80488a0:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 80488a4:	f64d 7302 	movw	r3, #57090	; 0xdf02
 80488a8:	429a      	cmp	r2, r3
 80488aa:	d00b      	beq.n	80488c4 <z_arm_fault+0x154>
		} else if (SCB_MMFSR != 0) {
 80488ac:	4b2e      	ldr	r3, [pc, #184]	; (8048968 <z_arm_fault+0x1f8>)
 80488ae:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80488b2:	b1b2      	cbz	r2, 80488e2 <z_arm_fault+0x172>
			reason = mem_manage_fault(esf, 1, recoverable);
 80488b4:	f10d 0207 	add.w	r2, sp, #7
 80488b8:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 80488ba:	4630      	mov	r0, r6
 80488bc:	f7ff fd76 	bl	80483ac <mem_manage_fault>
 80488c0:	4604      	mov	r4, r0
		break;
 80488c2:	e7c3      	b.n	804884c <z_arm_fault+0xdc>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 80488c4:	682b      	ldr	r3, [r5, #0]
 80488c6:	075c      	lsls	r4, r3, #29
 80488c8:	d009      	beq.n	80488de <z_arm_fault+0x16e>
 80488ca:	4a29      	ldr	r2, [pc, #164]	; (8048970 <z_arm_fault+0x200>)
 80488cc:	6831      	ldr	r1, [r6, #0]
 80488ce:	1aaa      	subs	r2, r5, r2
 80488d0:	482d      	ldr	r0, [pc, #180]	; (8048988 <z_arm_fault+0x218>)
 80488d2:	0892      	lsrs	r2, r2, #2
 80488d4:	0192      	lsls	r2, r2, #6
 80488d6:	f042 0201 	orr.w	r2, r2, #1
 80488da:	f00d fb93 	bl	8056004 <log_1>
			reason = esf->basic.r0;
 80488de:	6834      	ldr	r4, [r6, #0]
 80488e0:	e7b4      	b.n	804884c <z_arm_fault+0xdc>
		} else if (SCB_BFSR != 0) {
 80488e2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80488e6:	b12a      	cbz	r2, 80488f4 <z_arm_fault+0x184>
			reason = bus_fault(esf, 1, recoverable);
 80488e8:	f10d 0107 	add.w	r1, sp, #7
 80488ec:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 80488ee:	f7ff fe9b 	bl	8048628 <bus_fault.constprop.0>
 80488f2:	e7e5      	b.n	80488c0 <z_arm_fault+0x150>
		} else if (SCB_UFSR != 0) {
 80488f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80488f6:	b29b      	uxth	r3, r3
 80488f8:	2b00      	cmp	r3, #0
 80488fa:	d08c      	beq.n	8048816 <z_arm_fault+0xa6>
		reason = usage_fault(esf);
 80488fc:	f7ff fe08 	bl	8048510 <usage_fault.constprop.0>
 8048900:	e7de      	b.n	80488c0 <z_arm_fault+0x150>
		reason = mem_manage_fault(esf, 0, recoverable);
 8048902:	f10d 0207 	add.w	r2, sp, #7
 8048906:	2100      	movs	r1, #0
 8048908:	e7d7      	b.n	80488ba <z_arm_fault+0x14a>
		reason = bus_fault(esf, 0, recoverable);
 804890a:	f10d 0107 	add.w	r1, sp, #7
 804890e:	2000      	movs	r0, #0
 8048910:	e7ed      	b.n	80488ee <z_arm_fault+0x17e>
	PR_FAULT_INFO(
 8048912:	4916      	ldr	r1, [pc, #88]	; (804896c <z_arm_fault+0x1fc>)
 8048914:	680b      	ldr	r3, [r1, #0]
 8048916:	0758      	lsls	r0, r3, #29
 8048918:	f43f af7d 	beq.w	8048816 <z_arm_fault+0xa6>
 804891c:	4b14      	ldr	r3, [pc, #80]	; (8048970 <z_arm_fault+0x200>)
 804891e:	481b      	ldr	r0, [pc, #108]	; (804898c <z_arm_fault+0x21c>)
 8048920:	1ac9      	subs	r1, r1, r3
 8048922:	0889      	lsrs	r1, r1, #2
 8048924:	0189      	lsls	r1, r1, #6
 8048926:	f041 0101 	orr.w	r1, r1, #1
 804892a:	e77d      	b.n	8048828 <z_arm_fault+0xb8>
	PR_FAULT_INFO("***** %s %d) *****",
 804892c:	4b0f      	ldr	r3, [pc, #60]	; (804896c <z_arm_fault+0x1fc>)
 804892e:	681a      	ldr	r2, [r3, #0]
 8048930:	0752      	lsls	r2, r2, #29
 8048932:	f43f af70 	beq.w	8048816 <z_arm_fault+0xa6>
 8048936:	4a0e      	ldr	r2, [pc, #56]	; (8048970 <z_arm_fault+0x200>)
 8048938:	f415 7ff8 	tst.w	r5, #496	; 0x1f0
 804893c:	4814      	ldr	r0, [pc, #80]	; (8048990 <z_arm_fault+0x220>)
 804893e:	eba3 0302 	sub.w	r3, r3, r2
 8048942:	4914      	ldr	r1, [pc, #80]	; (8048994 <z_arm_fault+0x224>)
 8048944:	f1a4 0210 	sub.w	r2, r4, #16
 8048948:	bf18      	it	ne
 804894a:	4601      	movne	r1, r0
 804894c:	089b      	lsrs	r3, r3, #2
 804894e:	4812      	ldr	r0, [pc, #72]	; (8048998 <z_arm_fault+0x228>)
 8048950:	019b      	lsls	r3, r3, #6
 8048952:	f043 0301 	orr.w	r3, r3, #1
 8048956:	f00d fb6c 	bl	8056032 <log_2>
 804895a:	e75c      	b.n	8048816 <z_arm_fault+0xa6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 804895c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8048960:	f023 0301 	bic.w	r3, r3, #1
 8048964:	e784      	b.n	8048870 <z_arm_fault+0x100>
 8048966:	bf00      	nop
 8048968:	e000ed00 	.word	0xe000ed00
 804896c:	20020920 	.word	0x20020920
 8048970:	200208c8 	.word	0x200208c8
 8048974:	08060f01 	.word	0x08060f01
 8048978:	08060f2c 	.word	0x08060f2c
 804897c:	08060f43 	.word	0x08060f43
 8048980:	08060f64 	.word	0x08060f64
 8048984:	08060f72 	.word	0x08060f72
 8048988:	08060f91 	.word	0x08060f91
 804898c:	08060fad 	.word	0x08060fad
 8048990:	08060fe6 	.word	0x08060fe6
 8048994:	08060fd1 	.word	0x08060fd1
 8048998:	08060fff 	.word	0x08060fff

0804899c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 804899c:	4a02      	ldr	r2, [pc, #8]	; (80489a8 <z_arm_fault_init+0xc>)
 804899e:	6953      	ldr	r3, [r2, #20]
 80489a0:	f043 0310 	orr.w	r3, r3, #16
 80489a4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 80489a6:	4770      	bx	lr
 80489a8:	e000ed00 	.word	0xe000ed00

080489ac <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 80489ac:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 80489b0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 80489b4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 80489b6:	4672      	mov	r2, lr
	bl z_arm_fault
 80489b8:	f7ff feda 	bl	8048770 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80489bc:	bd01      	pop	{r0, pc}
 80489be:	bf00      	nop

080489c0 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80489c0:	2300      	movs	r3, #0
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80489c2:	4804      	ldr	r0, [pc, #16]	; (80489d4 <z_arm_interrupt_init+0x14>)
 80489c4:	2110      	movs	r1, #16
 80489c6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80489c8:	3301      	adds	r3, #1
 80489ca:	2b6e      	cmp	r3, #110	; 0x6e
 80489cc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 80489d0:	d1f9      	bne.n	80489c6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 80489d2:	4770      	bx	lr
 80489d4:	e000e100 	.word	0xe000e100

080489d8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
 80489d8:	2000      	movs	r0, #0
    msr CONTROL, r0
 80489da:	f380 8814 	msr	CONTROL, r0
    isb
 80489de:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
 80489e2:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
 80489e4:	4911      	ldr	r1, [pc, #68]	; (8048a2c <__start+0x54>)
    str r0, [r1]
 80489e6:	6008      	str	r0, [r1, #0]
    dsb
 80489e8:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
 80489ec:	4810      	ldr	r0, [pc, #64]	; (8048a30 <__start+0x58>)
    msr msp, r0
 80489ee:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
 80489f2:	f000 f845 	bl	8048a80 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80489f6:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80489f8:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
 80489fc:	480d      	ldr	r0, [pc, #52]	; (8048a34 <__start+0x5c>)
    ldr r1, =0xaa
 80489fe:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8048a02:	f44f 6202 	mov.w	r2, #2080	; 0x820
    bl memset
 8048a06:	f012 fa21 	bl	805ae4c <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8048a0a:	480a      	ldr	r0, [pc, #40]	; (8048a34 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8048a0c:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8048a10:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8048a12:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8048a16:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8048a1a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8048a1c:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8048a1e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8048a22:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8048a26:	f7ff fb49 	bl	80480bc <z_arm_prep_c>
 8048a2a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
 8048a2c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
 8048a30:	2003b380 	.word	0x2003b380
    ldr r0, =z_interrupt_stacks
 8048a34:	2003b580 	.word	0x2003b580

08048a38 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
 8048a38:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8048a3c:	4905      	ldr	r1, [pc, #20]	; (8048a54 <sys_arch_reboot+0x1c>)
 8048a3e:	4b06      	ldr	r3, [pc, #24]	; (8048a58 <sys_arch_reboot+0x20>)
 8048a40:	68ca      	ldr	r2, [r1, #12]
 8048a42:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8048a46:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8048a48:	60cb      	str	r3, [r1, #12]
 8048a4a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8048a4e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8048a50:	e7fd      	b.n	8048a4e <sys_arch_reboot+0x16>
 8048a52:	bf00      	nop
 8048a54:	e000ed00 	.word	0xe000ed00
 8048a58:	05fa0004 	.word	0x05fa0004

08048a5c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
 8048a5c:	4907      	ldr	r1, [pc, #28]	; (8048a7c <z_arm_clear_arm_mpu_config+0x20>)

	for (i = 0; i < num_regions; i++) {
 8048a5e:	2300      	movs	r3, #0
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
 8048a60:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
 8048a64:	4618      	mov	r0, r3
	int num_regions =
 8048a66:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
 8048a6a:	4293      	cmp	r3, r2
 8048a6c:	d100      	bne.n	8048a70 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
 8048a6e:	4770      	bx	lr
  MPU->RNR = rnr;
 8048a70:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
	for (i = 0; i < num_regions; i++) {
 8048a74:	3301      	adds	r3, #1
  MPU->RASR = 0U;
 8048a76:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
 8048a7a:	e7f6      	b.n	8048a6a <z_arm_clear_arm_mpu_config+0xe>
 8048a7c:	e000ed00 	.word	0xe000ed00

08048a80 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
 8048a80:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8048a82:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 8048a84:	2400      	movs	r4, #0
 8048a86:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
 8048a8a:	f7ff ffe7 	bl	8048a5c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
 8048a8e:	4b3e      	ldr	r3, [pc, #248]	; (8048b88 <z_arm_init_arch_hw_at_boot+0x108>)
 8048a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8048a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8048a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8048a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8048aa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8048aa4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8048aa8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8048aac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8048ab0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
 8048ab4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8048ab8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 8048abc:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
 8048ac0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 8048ac4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
 8048ac8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
 8048acc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
 8048ad0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	/* Reset D-Cache settings. If the D-Cache was enabled,
	 * SCB_DisableDCache() takes care of cleaning and invalidating it.
	 * If it was already disabled, just call SCB_InvalidateDCache() to
	 * reset it to a known clean state.
	 */
	if (SCB->CCR & SCB_CCR_DC_Msk) {
 8048ad4:	4a2d      	ldr	r2, [pc, #180]	; (8048b8c <z_arm_init_arch_hw_at_boot+0x10c>)
 8048ad6:	6953      	ldr	r3, [r2, #20]
 8048ad8:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8048adc:	d039      	beq.n	8048b52 <z_arm_init_arch_hw_at_boot+0xd2>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8048ade:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8048ae2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 8048ae6:	6953      	ldr	r3, [r2, #20]
 8048ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8048aec:	6153      	str	r3, [r2, #20]
 8048aee:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8048af2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8048af6:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8048afa:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8048afe:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8048b02:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8048b04:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8048b08:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8048b0a:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8048b0e:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8048b10:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8048b14:	d2f9      	bcs.n	8048b0a <z_arm_init_arch_hw_at_boot+0x8a>
    } while(sets-- != 0U);
 8048b16:	3b20      	subs	r3, #32
 8048b18:	f113 0f20 	cmn.w	r3, #32
 8048b1c:	d1f2      	bne.n	8048b04 <z_arm_init_arch_hw_at_boot+0x84>
 8048b1e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8048b22:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 8048b26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8048b2a:	f3bf 8f6f 	isb	sy
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8048b2e:	4b17      	ldr	r3, [pc, #92]	; (8048b8c <z_arm_init_arch_hw_at_boot+0x10c>)
 8048b30:	695a      	ldr	r2, [r3, #20]
 8048b32:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8048b36:	615a      	str	r2, [r3, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8048b38:	2200      	movs	r2, #0
 8048b3a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8048b3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8048b42:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 8048b46:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
 8048b48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8048b4c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
 8048b50:	bd70      	pop	{r4, r5, r6, pc}
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8048b52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8048b56:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8048b5a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8048b5e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8048b62:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8048b66:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8048b6a:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8048b6c:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8048b70:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8048b72:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8048b76:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8048b78:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8048b7c:	d2f9      	bcs.n	8048b72 <z_arm_init_arch_hw_at_boot+0xf2>
    } while(sets-- != 0U);
 8048b7e:	3b20      	subs	r3, #32
 8048b80:	f113 0f20 	cmn.w	r3, #32
 8048b84:	d1f2      	bne.n	8048b6c <z_arm_init_arch_hw_at_boot+0xec>
 8048b86:	e7ca      	b.n	8048b1e <z_arm_init_arch_hw_at_boot+0x9e>
 8048b88:	e000e100 	.word	0xe000e100
 8048b8c:	e000ed00 	.word	0xe000ed00

08048b90 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8048b90:	4b06      	ldr	r3, [pc, #24]	; (8048bac <z_impl_k_thread_abort+0x1c>)
 8048b92:	689b      	ldr	r3, [r3, #8]
 8048b94:	4283      	cmp	r3, r0
 8048b96:	d107      	bne.n	8048ba8 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8048b98:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8048b9c:	b123      	cbz	r3, 8048ba8 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8048b9e:	4a04      	ldr	r2, [pc, #16]	; (8048bb0 <z_impl_k_thread_abort+0x20>)
 8048ba0:	6853      	ldr	r3, [r2, #4]
 8048ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8048ba6:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
 8048ba8:	f009 bb9c 	b.w	80522e4 <z_thread_abort>
 8048bac:	20038cc0 	.word	0x20038cc0
 8048bb0:	e000ed00 	.word	0xe000ed00

08048bb4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8048bb4:	4b02      	ldr	r3, [pc, #8]	; (8048bc0 <z_arm_configure_static_mpu_regions+0xc>)
 8048bb6:	2101      	movs	r1, #1
 8048bb8:	4a02      	ldr	r2, [pc, #8]	; (8048bc4 <z_arm_configure_static_mpu_regions+0x10>)
 8048bba:	4803      	ldr	r0, [pc, #12]	; (8048bc8 <z_arm_configure_static_mpu_regions+0x14>)
 8048bbc:	f000 b89a 	b.w	8048cf4 <arm_core_mpu_configure_static_mpu_regions>
 8048bc0:	20080000 	.word	0x20080000
 8048bc4:	20020000 	.word	0x20020000
 8048bc8:	0805d2b0 	.word	0x0805d2b0

08048bcc <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8048bcc:	b510      	push	{r4, lr}
 8048bce:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
 8048bd0:	f7ff fb4a 	bl	8048268 <z_arm_mpu_stack_guard_and_fpu_adjust>
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8048bd4:	4b06      	ldr	r3, [pc, #24]	; (8048bf0 <z_arm_configure_dynamic_mpu_regions+0x24>)

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8048bd6:	2101      	movs	r1, #1
		guard_start = thread->stack_info.start - guard_size;
 8048bd8:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8048bdc:	1a12      	subs	r2, r2, r0
	dynamic_regions[region_num].size = guard_size;
 8048bde:	e9c3 2000 	strd	r2, r0, [r3]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8048be2:	4a04      	ldr	r2, [pc, #16]	; (8048bf4 <z_arm_configure_dynamic_mpu_regions+0x28>)
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8048be4:	4618      	mov	r0, r3
						   region_num);
}
 8048be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8048bea:	609a      	str	r2, [r3, #8]
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8048bec:	f000 b88c 	b.w	8048d08 <arm_core_mpu_configure_dynamic_mpu_regions>
 8048bf0:	20037654 	.word	0x20037654
 8048bf4:	150b0000 	.word	0x150b0000

08048bf8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8048bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8048bfa:	460e      	mov	r6, r1
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8048bfc:	4f2d      	ldr	r7, [pc, #180]	; (8048cb4 <mpu_configure_regions+0xbc>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8048bfe:	2100      	movs	r1, #0
 8048c00:	42b1      	cmp	r1, r6
 8048c02:	db01      	blt.n	8048c08 <mpu_configure_regions+0x10>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 8048c04:	4610      	mov	r0, r2
 8048c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
 8048c08:	6844      	ldr	r4, [r0, #4]
 8048c0a:	2c00      	cmp	r4, #0
 8048c0c:	d04e      	beq.n	8048cac <mpu_configure_regions+0xb4>
		if (do_sanity_check &&
 8048c0e:	b1c3      	cbz	r3, 8048c42 <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8048c10:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8048c14:	ea14 0f0c 	tst.w	r4, ip
 8048c18:	d00d      	beq.n	8048c36 <mpu_configure_regions+0x3e>
			LOG_ERR("Partition %u: sanity check failed.", i);
 8048c1a:	4a27      	ldr	r2, [pc, #156]	; (8048cb8 <mpu_configure_regions+0xc0>)
 8048c1c:	6813      	ldr	r3, [r2, #0]
 8048c1e:	0758      	lsls	r0, r3, #29
 8048c20:	d026      	beq.n	8048c70 <mpu_configure_regions+0x78>
 8048c22:	4b26      	ldr	r3, [pc, #152]	; (8048cbc <mpu_configure_regions+0xc4>)
 8048c24:	4826      	ldr	r0, [pc, #152]	; (8048cc0 <mpu_configure_regions+0xc8>)
 8048c26:	1ad2      	subs	r2, r2, r3
 8048c28:	0892      	lsrs	r2, r2, #2
 8048c2a:	0192      	lsls	r2, r2, #6
 8048c2c:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8048c30:	f00d f9e8 	bl	8056004 <log_1>
		if (reg_index == -EINVAL) {
 8048c34:	e01c      	b.n	8048c70 <mpu_configure_regions+0x78>
		&&
 8048c36:	2c1f      	cmp	r4, #31
 8048c38:	d9ef      	bls.n	8048c1a <mpu_configure_regions+0x22>
		((part->start & (part->size - 1U)) == 0U);
 8048c3a:	6805      	ldr	r5, [r0, #0]
		&&
 8048c3c:	ea1c 0f05 	tst.w	ip, r5
 8048c40:	d1eb      	bne.n	8048c1a <mpu_configure_regions+0x22>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 8048c42:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8048c44:	b2d5      	uxtb	r5, r2
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8048c46:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
 8048c4a:	6802      	ldr	r2, [r0, #0]
	if (size <= 32U) {
 8048c4c:	d913      	bls.n	8048c76 <mpu_configure_regions+0x7e>
	if (size > (1UL << 31)) {
 8048c4e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8048c52:	d812      	bhi.n	8048c7a <mpu_configure_regions+0x82>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8048c54:	3c01      	subs	r4, #1
 8048c56:	fab4 f484 	clz	r4, r4
 8048c5a:	f1c4 041f 	rsb	r4, r4, #31
 8048c5e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 8048c60:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8048c62:	ea4c 0404 	orr.w	r4, ip, r4
 8048c66:	d913      	bls.n	8048c90 <mpu_configure_regions+0x98>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8048c68:	4a13      	ldr	r2, [pc, #76]	; (8048cb8 <mpu_configure_regions+0xc0>)
 8048c6a:	6813      	ldr	r3, [r2, #0]
 8048c6c:	075b      	lsls	r3, r3, #29
 8048c6e:	d106      	bne.n	8048c7e <mpu_configure_regions+0x86>
			return -EINVAL;
 8048c70:	f06f 0215 	mvn.w	r2, #21
 8048c74:	e7c6      	b.n	8048c04 <mpu_configure_regions+0xc>
		return REGION_32B;
 8048c76:	2408      	movs	r4, #8
 8048c78:	e7f2      	b.n	8048c60 <mpu_configure_regions+0x68>
		return REGION_4G;
 8048c7a:	243e      	movs	r4, #62	; 0x3e
 8048c7c:	e7f0      	b.n	8048c60 <mpu_configure_regions+0x68>
 8048c7e:	4b0f      	ldr	r3, [pc, #60]	; (8048cbc <mpu_configure_regions+0xc4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8048c80:	4629      	mov	r1, r5
 8048c82:	4810      	ldr	r0, [pc, #64]	; (8048cc4 <mpu_configure_regions+0xcc>)
 8048c84:	1ad2      	subs	r2, r2, r3
 8048c86:	0892      	lsrs	r2, r2, #2
 8048c88:	0192      	lsls	r2, r2, #6
 8048c8a:	f042 0201 	orr.w	r2, r2, #1
 8048c8e:	e7cf      	b.n	8048c30 <mpu_configure_regions+0x38>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8048c90:	f022 021f 	bic.w	r2, r2, #31
 8048c94:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8048c98:	f044 0401 	orr.w	r4, r4, #1
				| MPU_RBAR_VALID_Msk | index;
 8048c9c:	432a      	orrs	r2, r5
 8048c9e:	f042 0210 	orr.w	r2, r2, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8048ca2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
		reg_index++;
 8048ca6:	1c6a      	adds	r2, r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8048ca8:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 8048cac:	3101      	adds	r1, #1
 8048cae:	300c      	adds	r0, #12
 8048cb0:	e7a6      	b.n	8048c00 <mpu_configure_regions+0x8>
 8048cb2:	bf00      	nop
 8048cb4:	e000ed00 	.word	0xe000ed00
 8048cb8:	2002091c 	.word	0x2002091c
 8048cbc:	200208c8 	.word	0x200208c8
 8048cc0:	08061016 	.word	0x08061016
 8048cc4:	08061039 	.word	0x08061039

08048cc8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8048cc8:	4b04      	ldr	r3, [pc, #16]	; (8048cdc <arm_core_mpu_enable+0x14>)
 8048cca:	2205      	movs	r2, #5
 8048ccc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8048cd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8048cd4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8048cd8:	4770      	bx	lr
 8048cda:	bf00      	nop
 8048cdc:	e000ed00 	.word	0xe000ed00

08048ce0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8048ce0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8048ce4:	4b02      	ldr	r3, [pc, #8]	; (8048cf0 <arm_core_mpu_disable+0x10>)
 8048ce6:	2200      	movs	r2, #0
 8048ce8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8048cec:	4770      	bx	lr
 8048cee:	bf00      	nop
 8048cf0:	e000ed00 	.word	0xe000ed00

08048cf4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8048cf4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8048cf6:	4c03      	ldr	r4, [pc, #12]	; (8048d04 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8048cf8:	2301      	movs	r3, #1
 8048cfa:	7822      	ldrb	r2, [r4, #0]
 8048cfc:	f7ff ff7c 	bl	8048bf8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8048d00:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 8048d02:	bd10      	pop	{r4, pc}
 8048d04:	20038f3b 	.word	0x20038f3b

08048d08 <arm_core_mpu_configure_dynamic_mpu_regions>:

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8048d08:	4a09      	ldr	r2, [pc, #36]	; (8048d30 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8048d0a:	b508      	push	{r3, lr}
 8048d0c:	2300      	movs	r3, #0
 8048d0e:	7812      	ldrb	r2, [r2, #0]
 8048d10:	f7ff ff72 	bl	8048bf8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8048d14:	f110 0f16 	cmn.w	r0, #22
 8048d18:	d003      	beq.n	8048d22 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
 8048d1a:	4b06      	ldr	r3, [pc, #24]	; (8048d34 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
 8048d1c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8048d1e:	2807      	cmp	r0, #7
 8048d20:	dd00      	ble.n	8048d24 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8048d22:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 8048d24:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
 8048d28:	3001      	adds	r0, #1
  MPU->RASR = 0U;
 8048d2a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8048d2e:	e7f6      	b.n	8048d1e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 8048d30:	20038f3b 	.word	0x20038f3b
 8048d34:	e000ed00 	.word	0xe000ed00

08048d38 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8048d38:	4914      	ldr	r1, [pc, #80]	; (8048d8c <z_arm_mpu_init+0x54>)
 8048d3a:	6808      	ldr	r0, [r1, #0]
 8048d3c:	2808      	cmp	r0, #8
{
 8048d3e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8048d40:	d821      	bhi.n	8048d86 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8048d42:	f7ff ffcd 	bl	8048ce0 <arm_core_mpu_disable>
 8048d46:	4c12      	ldr	r4, [pc, #72]	; (8048d90 <z_arm_mpu_init+0x58>)
 8048d48:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8048d4a:	2200      	movs	r2, #0
 8048d4c:	4290      	cmp	r0, r2
 8048d4e:	f101 010c 	add.w	r1, r1, #12
 8048d52:	d105      	bne.n	8048d60 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8048d54:	4b0f      	ldr	r3, [pc, #60]	; (8048d94 <z_arm_mpu_init+0x5c>)
 8048d56:	7018      	strb	r0, [r3, #0]
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8048d58:	2000      	movs	r0, #0
	arm_core_mpu_enable();
 8048d5a:	f7ff ffb5 	bl	8048cc8 <arm_core_mpu_enable>
}
 8048d5e:	bd10      	pop	{r4, pc}
 8048d60:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8048d64:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8048d68:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8048d6c:	4313      	orrs	r3, r2
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8048d6e:	3201      	adds	r2, #1
 8048d70:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8048d74:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8048d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8048d7c:	f043 0301 	orr.w	r3, r3, #1
 8048d80:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8048d84:	e7e2      	b.n	8048d4c <z_arm_mpu_init+0x14>
		return -1;
 8048d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8048d8a:	e7e8      	b.n	8048d5e <z_arm_mpu_init+0x26>
 8048d8c:	0805d2bc 	.word	0x0805d2bc
 8048d90:	e000ed00 	.word	0xe000ed00
 8048d94:	20038f3b 	.word	0x20038f3b

08048d98 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8048d98:	4b01      	ldr	r3, [pc, #4]	; (8048da0 <__stdout_hook_install+0x8>)
 8048d9a:	6018      	str	r0, [r3, #0]
}
 8048d9c:	4770      	bx	lr
 8048d9e:	bf00      	nop
 8048da0:	2002013c 	.word	0x2002013c

08048da4 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 8048da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8048da6:	4606      	mov	r6, r0
 8048da8:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
 8048daa:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
 8048dac:	4f06      	ldr	r7, [pc, #24]	; (8048dc8 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
 8048dae:	42ac      	cmp	r4, r5
 8048db0:	da08      	bge.n	8048dc4 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
 8048db2:	683b      	ldr	r3, [r7, #0]
 8048db4:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 8048db6:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
 8048db8:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
 8048dba:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 8048dbe:	d001      	beq.n	8048dc4 <z_impl_zephyr_read_stdin+0x20>
 8048dc0:	280d      	cmp	r0, #13
 8048dc2:	d1f4      	bne.n	8048dae <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
 8048dc4:	4620      	mov	r0, r4
 8048dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8048dc8:	20020138 	.word	0x20020138

08048dcc <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 8048dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8048dce:	460d      	mov	r5, r1
 8048dd0:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 8048dd2:	f1c0 0401 	rsb	r4, r0, #1
 8048dd6:	4f08      	ldr	r7, [pc, #32]	; (8048df8 <z_impl_zephyr_write_stdout+0x2c>)
 8048dd8:	19a3      	adds	r3, r4, r6
 8048dda:	429d      	cmp	r5, r3
 8048ddc:	dc01      	bgt.n	8048de2 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
 8048dde:	4628      	mov	r0, r5
 8048de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
 8048de2:	7873      	ldrb	r3, [r6, #1]
 8048de4:	2b0a      	cmp	r3, #10
 8048de6:	d102      	bne.n	8048dee <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
 8048de8:	683b      	ldr	r3, [r7, #0]
 8048dea:	200d      	movs	r0, #13
 8048dec:	4798      	blx	r3
		_stdout_hook(*(buf + i));
 8048dee:	683b      	ldr	r3, [r7, #0]
 8048df0:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8048df4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8048df6:	e7ef      	b.n	8048dd8 <z_impl_zephyr_write_stdout+0xc>
 8048df8:	2002013c 	.word	0x2002013c

08048dfc <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 8048dfc:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 8048dfe:	2105      	movs	r1, #5
 8048e00:	4801      	ldr	r0, [pc, #4]	; (8048e08 <_exit+0xc>)
 8048e02:	f7ff ffe3 	bl	8048dcc <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
 8048e06:	e7fe      	b.n	8048e06 <_exit+0xa>
 8048e08:	0806105f 	.word	0x0806105f

08048e0c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 8048e0c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 8048e0e:	4c07      	ldr	r4, [pc, #28]	; (8048e2c <_sbrk+0x20>)
 8048e10:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 8048e12:	18c2      	adds	r2, r0, r3
 8048e14:	4806      	ldr	r0, [pc, #24]	; (8048e30 <_sbrk+0x24>)
 8048e16:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
 8048e1a:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
 8048e1e:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
 8048e20:	bf36      	itet	cc
 8048e22:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
 8048e24:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
		heap_sz += count;
 8048e28:	6022      	strcc	r2, [r4, #0]
	}

	return ret;
}
 8048e2a:	bd10      	pop	{r4, pc}
 8048e2c:	20037660 	.word	0x20037660
 8048e30:	20044eb8 	.word	0x20044eb8

08048e34 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
 8048e34:	b508      	push	{r3, lr}
 8048e36:	211d      	movs	r1, #29
 8048e38:	4804      	ldr	r0, [pc, #16]	; (8048e4c <__chk_fail+0x18>)
 8048e3a:	f7ff ffc7 	bl	8048dcc <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
 8048e3e:	4040      	eors	r0, r0
 8048e40:	f380 8811 	msr	BASEPRI, r0
 8048e44:	f04f 0003 	mov.w	r0, #3
 8048e48:	df02      	svc	2
	CODE_UNREACHABLE;
 8048e4a:	bf00      	nop
 8048e4c:	08061065 	.word	0x08061065

08048e50 <registry_find>:
static struct registry_entry *registry_find(int type)
{
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
		struct registry_entry *ep = &registry[i];

		if ((ep->fstp != NULL) && (ep->type == type)) {
 8048e50:	4b08      	ldr	r3, [pc, #32]	; (8048e74 <registry_find+0x24>)
{
 8048e52:	4602      	mov	r2, r0
		if ((ep->fstp != NULL) && (ep->type == type)) {
 8048e54:	6859      	ldr	r1, [r3, #4]
 8048e56:	b111      	cbz	r1, 8048e5e <registry_find+0xe>
 8048e58:	6819      	ldr	r1, [r3, #0]
 8048e5a:	4288      	cmp	r0, r1
 8048e5c:	d007      	beq.n	8048e6e <registry_find+0x1e>
 8048e5e:	68d8      	ldr	r0, [r3, #12]
 8048e60:	b130      	cbz	r0, 8048e70 <registry_find+0x20>
 8048e62:	6899      	ldr	r1, [r3, #8]
		struct registry_entry *ep = &registry[i];
 8048e64:	4804      	ldr	r0, [pc, #16]	; (8048e78 <registry_find+0x28>)
 8048e66:	428a      	cmp	r2, r1
 8048e68:	bf18      	it	ne
 8048e6a:	2000      	movne	r0, #0
 8048e6c:	4770      	bx	lr
 8048e6e:	4618      	mov	r0, r3
			return ep;
		}
	}
	return NULL;
}
 8048e70:	4770      	bx	lr
 8048e72:	bf00      	nop
 8048e74:	20037680 	.word	0x20037680
 8048e78:	20037688 	.word	0x20037688

08048e7c <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
 8048e7c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
 8048e7e:	4804      	ldr	r0, [pc, #16]	; (8048e90 <fs_init+0x14>)
 8048e80:	f011 fabd 	bl	805a3fe <z_impl_k_mutex_init>
	list->head = (sys_dnode_t *)list;
 8048e84:	4b03      	ldr	r3, [pc, #12]	; (8048e94 <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
 8048e86:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
 8048e88:	e9c3 3300 	strd	r3, r3, [r3]
 8048e8c:	bd08      	pop	{r3, pc}
 8048e8e:	bf00      	nop
 8048e90:	2003766c 	.word	0x2003766c
 8048e94:	20037664 	.word	0x20037664

08048e98 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
 8048e98:	4602      	mov	r2, r0
 8048e9a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 8048e9c:	4801      	ldr	r0, [pc, #4]	; (8048ea4 <k_mutex_lock.constprop.0.isra.0+0xc>)
 8048e9e:	f008 bd63 	b.w	8051968 <z_impl_k_mutex_lock>
 8048ea2:	bf00      	nop
 8048ea4:	2003766c 	.word	0x2003766c

08048ea8 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 8048ea8:	4801      	ldr	r0, [pc, #4]	; (8048eb0 <k_mutex_unlock.constprop.0.isra.0+0x8>)
 8048eaa:	f008 bdd7 	b.w	8051a5c <z_impl_k_mutex_unlock>
 8048eae:	bf00      	nop
 8048eb0:	2003766c 	.word	0x2003766c

08048eb4 <fs_get_mnt_point>:
{
 8048eb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8048eb8:	4682      	mov	sl, r0
	size_t len, name_len = strlen(name);
 8048eba:	4608      	mov	r0, r1
{
 8048ebc:	4688      	mov	r8, r1
 8048ebe:	4615      	mov	r5, r2
	size_t len, name_len = strlen(name);
 8048ec0:	f7f7 fcca 	bl	8040858 <strlen>
	k_mutex_lock(&mutex, K_FOREVER);
 8048ec4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	size_t len, name_len = strlen(name);
 8048ec8:	4683      	mov	fp, r0
	k_mutex_lock(&mutex, K_FOREVER);
 8048eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8048ece:	f7ff ffe3 	bl	8048e98 <k_mutex_lock.constprop.0.isra.0>
	return list->head == list;
 8048ed2:	4b1a      	ldr	r3, [pc, #104]	; (8048f3c <fs_get_mnt_point+0x88>)
	return (node == list->tail) ? NULL : node->next;
 8048ed4:	f04f 0900 	mov.w	r9, #0
	return list->head == list;
 8048ed8:	681c      	ldr	r4, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
 8048eda:	464f      	mov	r7, r9
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8048edc:	429c      	cmp	r4, r3
 8048ede:	bf08      	it	eq
 8048ee0:	2400      	moveq	r4, #0
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
 8048ee2:	b954      	cbnz	r4, 8048efa <fs_get_mnt_point+0x46>
	k_mutex_unlock(&mutex);
 8048ee4:	f7ff ffe0 	bl	8048ea8 <k_mutex_unlock.constprop.0.isra.0>
	if (mnt_p == NULL) {
 8048ee8:	b317      	cbz	r7, 8048f30 <fs_get_mnt_point+0x7c>
	*mnt_pntp = mnt_p;
 8048eea:	f8ca 7000 	str.w	r7, [sl]
	if (match_len)
 8048eee:	b315      	cbz	r5, 8048f36 <fs_get_mnt_point+0x82>
		*match_len = mnt_p->mountp_len;
 8048ef0:	69bb      	ldr	r3, [r7, #24]
	return 0;
 8048ef2:	2000      	movs	r0, #0
		*match_len = mnt_p->mountp_len;
 8048ef4:	602b      	str	r3, [r5, #0]
}
 8048ef6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		len = itr->mountp_len;
 8048efa:	69a6      	ldr	r6, [r4, #24]
		if ((len < longest_match) || (len > name_len)) {
 8048efc:	45b1      	cmp	r9, r6
 8048efe:	d812      	bhi.n	8048f26 <fs_get_mnt_point+0x72>
 8048f00:	45b3      	cmp	fp, r6
 8048f02:	d310      	bcc.n	8048f26 <fs_get_mnt_point+0x72>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
 8048f04:	2e01      	cmp	r6, #1
 8048f06:	d904      	bls.n	8048f12 <fs_get_mnt_point+0x5e>
 8048f08:	f818 2006 	ldrb.w	r2, [r8, r6]
 8048f0c:	2a2f      	cmp	r2, #47	; 0x2f
 8048f0e:	d000      	beq.n	8048f12 <fs_get_mnt_point+0x5e>
 8048f10:	b94a      	cbnz	r2, 8048f26 <fs_get_mnt_point+0x72>
		if (strncmp(name, itr->mnt_point, len) == 0) {
 8048f12:	4632      	mov	r2, r6
 8048f14:	68e1      	ldr	r1, [r4, #12]
 8048f16:	4640      	mov	r0, r8
 8048f18:	f012 f8dc 	bl	805b0d4 <strncmp>
 8048f1c:	2800      	cmp	r0, #0
 8048f1e:	4b07      	ldr	r3, [pc, #28]	; (8048f3c <fs_get_mnt_point+0x88>)
 8048f20:	bf04      	itt	eq
 8048f22:	46b1      	moveq	r9, r6
 8048f24:	4627      	moveq	r7, r4
	return (node == list->tail) ? NULL : node->next;
 8048f26:	685a      	ldr	r2, [r3, #4]
 8048f28:	4294      	cmp	r4, r2
 8048f2a:	d0db      	beq.n	8048ee4 <fs_get_mnt_point+0x30>
 8048f2c:	6824      	ldr	r4, [r4, #0]
 8048f2e:	e7d8      	b.n	8048ee2 <fs_get_mnt_point+0x2e>
		return -ENOENT;
 8048f30:	f06f 0001 	mvn.w	r0, #1
 8048f34:	e7df      	b.n	8048ef6 <fs_get_mnt_point+0x42>
	return 0;
 8048f36:	4628      	mov	r0, r5
 8048f38:	e7dd      	b.n	8048ef6 <fs_get_mnt_point+0x42>
 8048f3a:	bf00      	nop
 8048f3c:	20037664 	.word	0x20037664

08048f40 <fs_open>:
{
 8048f40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8048f42:	4605      	mov	r5, r0
 8048f44:	4616      	mov	r6, r2
	zfp->flags = flags;
 8048f46:	7202      	strb	r2, [r0, #8]
	if ((file_name == NULL) ||
 8048f48:	b979      	cbnz	r1, 8048f6a <fs_open+0x2a>
		LOG_ERR("invalid file name!!");
 8048f4a:	492f      	ldr	r1, [pc, #188]	; (8049008 <fs_open+0xc8>)
 8048f4c:	680b      	ldr	r3, [r1, #0]
 8048f4e:	075c      	lsls	r4, r3, #29
 8048f50:	d008      	beq.n	8048f64 <fs_open+0x24>
 8048f52:	4b2e      	ldr	r3, [pc, #184]	; (804900c <fs_open+0xcc>)
 8048f54:	482e      	ldr	r0, [pc, #184]	; (8049010 <fs_open+0xd0>)
 8048f56:	1ac9      	subs	r1, r1, r3
 8048f58:	0889      	lsrs	r1, r1, #2
 8048f5a:	0189      	lsls	r1, r1, #6
 8048f5c:	f041 0101 	orr.w	r1, r1, #1
 8048f60:	f00d f841 	bl	8055fe6 <log_0>
		return -EINVAL;
 8048f64:	f06f 0415 	mvn.w	r4, #21
 8048f68:	e020      	b.n	8048fac <fs_open+0x6c>
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
 8048f6a:	4608      	mov	r0, r1
 8048f6c:	9101      	str	r1, [sp, #4]
 8048f6e:	f7f7 fc73 	bl	8040858 <strlen>
	if ((file_name == NULL) ||
 8048f72:	2801      	cmp	r0, #1
 8048f74:	d9e9      	bls.n	8048f4a <fs_open+0xa>
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
 8048f76:	9901      	ldr	r1, [sp, #4]
 8048f78:	780b      	ldrb	r3, [r1, #0]
 8048f7a:	2b2f      	cmp	r3, #47	; 0x2f
 8048f7c:	d1e5      	bne.n	8048f4a <fs_open+0xa>
	if (zfp->mp != NULL) {
 8048f7e:	686a      	ldr	r2, [r5, #4]
 8048f80:	2a00      	cmp	r2, #0
 8048f82:	d138      	bne.n	8048ff6 <fs_open+0xb6>
	rc = fs_get_mnt_point(&mp, file_name, NULL);
 8048f84:	a803      	add	r0, sp, #12
 8048f86:	9101      	str	r1, [sp, #4]
 8048f88:	f7ff ff94 	bl	8048eb4 <fs_get_mnt_point>
	if (rc < 0) {
 8048f8c:	1e04      	subs	r4, r0, #0
 8048f8e:	9901      	ldr	r1, [sp, #4]
 8048f90:	da0f      	bge.n	8048fb2 <fs_open+0x72>
		LOG_ERR("mount point not found!!");
 8048f92:	491d      	ldr	r1, [pc, #116]	; (8049008 <fs_open+0xc8>)
 8048f94:	680b      	ldr	r3, [r1, #0]
 8048f96:	0758      	lsls	r0, r3, #29
 8048f98:	d008      	beq.n	8048fac <fs_open+0x6c>
 8048f9a:	4b1c      	ldr	r3, [pc, #112]	; (804900c <fs_open+0xcc>)
 8048f9c:	481d      	ldr	r0, [pc, #116]	; (8049014 <fs_open+0xd4>)
 8048f9e:	1ac9      	subs	r1, r1, r3
 8048fa0:	0889      	lsrs	r1, r1, #2
 8048fa2:	0189      	lsls	r1, r1, #6
 8048fa4:	f041 0101 	orr.w	r1, r1, #1
 8048fa8:	f00d f81d 	bl	8055fe6 <log_0>
}
 8048fac:	4620      	mov	r0, r4
 8048fae:	b004      	add	sp, #16
 8048fb0:	bd70      	pop	{r4, r5, r6, pc}
	if (((mp->flags & FS_MOUNT_FLAG_READ_ONLY) != 0) &&
 8048fb2:	9b03      	ldr	r3, [sp, #12]
 8048fb4:	f893 2020 	ldrb.w	r2, [r3, #32]
 8048fb8:	0792      	lsls	r2, r2, #30
 8048fba:	d502      	bpl.n	8048fc2 <fs_open+0x82>
 8048fbc:	f016 0f12 	tst.w	r6, #18
 8048fc0:	d11c      	bne.n	8048ffc <fs_open+0xbc>
	CHECKIF(mp->fs->open == NULL) {
 8048fc2:	69da      	ldr	r2, [r3, #28]
 8048fc4:	6814      	ldr	r4, [r2, #0]
 8048fc6:	b1e4      	cbz	r4, 8049002 <fs_open+0xc2>
	rc = mp->fs->open(zfp, file_name, flags);
 8048fc8:	4632      	mov	r2, r6
 8048fca:	4628      	mov	r0, r5
	zfp->mp = mp;
 8048fcc:	606b      	str	r3, [r5, #4]
	rc = mp->fs->open(zfp, file_name, flags);
 8048fce:	47a0      	blx	r4
	if (rc < 0) {
 8048fd0:	1e04      	subs	r4, r0, #0
 8048fd2:	daeb      	bge.n	8048fac <fs_open+0x6c>
		LOG_ERR("file open error (%d)", rc);
 8048fd4:	4a0c      	ldr	r2, [pc, #48]	; (8049008 <fs_open+0xc8>)
 8048fd6:	6813      	ldr	r3, [r2, #0]
 8048fd8:	075b      	lsls	r3, r3, #29
 8048fda:	d009      	beq.n	8048ff0 <fs_open+0xb0>
 8048fdc:	4b0b      	ldr	r3, [pc, #44]	; (804900c <fs_open+0xcc>)
 8048fde:	4621      	mov	r1, r4
 8048fe0:	480d      	ldr	r0, [pc, #52]	; (8049018 <fs_open+0xd8>)
 8048fe2:	1ad2      	subs	r2, r2, r3
 8048fe4:	0892      	lsrs	r2, r2, #2
 8048fe6:	0192      	lsls	r2, r2, #6
 8048fe8:	f042 0201 	orr.w	r2, r2, #1
 8048fec:	f00d f80a 	bl	8056004 <log_1>
		zfp->mp = NULL;
 8048ff0:	2300      	movs	r3, #0
 8048ff2:	606b      	str	r3, [r5, #4]
		return rc;
 8048ff4:	e7da      	b.n	8048fac <fs_open+0x6c>
		return -EBUSY;
 8048ff6:	f06f 040f 	mvn.w	r4, #15
 8048ffa:	e7d7      	b.n	8048fac <fs_open+0x6c>
		return -EROFS;
 8048ffc:	f06f 041d 	mvn.w	r4, #29
 8049000:	e7d4      	b.n	8048fac <fs_open+0x6c>
		return -ENOTSUP;
 8049002:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8049006:	e7d1      	b.n	8048fac <fs_open+0x6c>
 8049008:	200208ec 	.word	0x200208ec
 804900c:	200208c8 	.word	0x200208c8
 8049010:	08061092 	.word	0x08061092
 8049014:	080610a6 	.word	0x080610a6
 8049018:	080610be 	.word	0x080610be

0804901c <fs_close>:
{
 804901c:	b538      	push	{r3, r4, r5, lr}
	if (zfp->mp == NULL) {
 804901e:	6844      	ldr	r4, [r0, #4]
{
 8049020:	4605      	mov	r5, r0
	if (zfp->mp == NULL) {
 8049022:	b19c      	cbz	r4, 804904c <fs_close+0x30>
	CHECKIF(zfp->mp->fs->close == NULL) {
 8049024:	69e3      	ldr	r3, [r4, #28]
 8049026:	69db      	ldr	r3, [r3, #28]
 8049028:	b1ab      	cbz	r3, 8049056 <fs_close+0x3a>
	rc = zfp->mp->fs->close(zfp);
 804902a:	4798      	blx	r3
	if (rc < 0) {
 804902c:	1e04      	subs	r4, r0, #0
 804902e:	da0f      	bge.n	8049050 <fs_close+0x34>
		LOG_ERR("file close error (%d)", rc);
 8049030:	4a0a      	ldr	r2, [pc, #40]	; (804905c <fs_close+0x40>)
 8049032:	6813      	ldr	r3, [r2, #0]
 8049034:	075b      	lsls	r3, r3, #29
 8049036:	d009      	beq.n	804904c <fs_close+0x30>
 8049038:	4b09      	ldr	r3, [pc, #36]	; (8049060 <fs_close+0x44>)
 804903a:	4621      	mov	r1, r4
 804903c:	4809      	ldr	r0, [pc, #36]	; (8049064 <fs_close+0x48>)
 804903e:	1ad2      	subs	r2, r2, r3
 8049040:	0892      	lsrs	r2, r2, #2
 8049042:	0192      	lsls	r2, r2, #6
 8049044:	f042 0201 	orr.w	r2, r2, #1
 8049048:	f00c ffdc 	bl	8056004 <log_1>
}
 804904c:	4620      	mov	r0, r4
 804904e:	bd38      	pop	{r3, r4, r5, pc}
	zfp->mp = NULL;
 8049050:	2300      	movs	r3, #0
 8049052:	606b      	str	r3, [r5, #4]
	return rc;
 8049054:	e7fa      	b.n	804904c <fs_close+0x30>
		return -ENOTSUP;
 8049056:	f06f 0485 	mvn.w	r4, #133	; 0x85
 804905a:	e7f7      	b.n	804904c <fs_close+0x30>
 804905c:	200208ec 	.word	0x200208ec
 8049060:	200208c8 	.word	0x200208c8
 8049064:	080610d3 	.word	0x080610d3

08049068 <fs_read>:
	if (zfp->mp == NULL) {
 8049068:	6843      	ldr	r3, [r0, #4]
{
 804906a:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
 804906c:	b1ab      	cbz	r3, 804909a <fs_read+0x32>
	CHECKIF(zfp->mp->fs->read == NULL) {
 804906e:	69db      	ldr	r3, [r3, #28]
 8049070:	685b      	ldr	r3, [r3, #4]
 8049072:	b1ab      	cbz	r3, 80490a0 <fs_read+0x38>
	rc = zfp->mp->fs->read(zfp, ptr, size);
 8049074:	4798      	blx	r3
	if (rc < 0) {
 8049076:	1e04      	subs	r4, r0, #0
 8049078:	da0d      	bge.n	8049096 <fs_read+0x2e>
		LOG_ERR("file read error (%d)", rc);
 804907a:	4a0b      	ldr	r2, [pc, #44]	; (80490a8 <fs_read+0x40>)
 804907c:	6813      	ldr	r3, [r2, #0]
 804907e:	075b      	lsls	r3, r3, #29
 8049080:	d009      	beq.n	8049096 <fs_read+0x2e>
 8049082:	4b0a      	ldr	r3, [pc, #40]	; (80490ac <fs_read+0x44>)
 8049084:	4621      	mov	r1, r4
 8049086:	480a      	ldr	r0, [pc, #40]	; (80490b0 <fs_read+0x48>)
 8049088:	1ad2      	subs	r2, r2, r3
 804908a:	0892      	lsrs	r2, r2, #2
 804908c:	0192      	lsls	r2, r2, #6
 804908e:	f042 0201 	orr.w	r2, r2, #1
 8049092:	f00c ffb7 	bl	8056004 <log_1>
}
 8049096:	4620      	mov	r0, r4
 8049098:	bd10      	pop	{r4, pc}
		return -EBADF;
 804909a:	f06f 0408 	mvn.w	r4, #8
 804909e:	e7fa      	b.n	8049096 <fs_read+0x2e>
		return -ENOTSUP;
 80490a0:	f06f 0485 	mvn.w	r4, #133	; 0x85
 80490a4:	e7f7      	b.n	8049096 <fs_read+0x2e>
 80490a6:	bf00      	nop
 80490a8:	200208ec 	.word	0x200208ec
 80490ac:	200208c8 	.word	0x200208c8
 80490b0:	080610e9 	.word	0x080610e9

080490b4 <fs_write>:
	if (zfp->mp == NULL) {
 80490b4:	6843      	ldr	r3, [r0, #4]
{
 80490b6:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
 80490b8:	b1ab      	cbz	r3, 80490e6 <fs_write+0x32>
	CHECKIF(zfp->mp->fs->write == NULL) {
 80490ba:	69db      	ldr	r3, [r3, #28]
 80490bc:	689b      	ldr	r3, [r3, #8]
 80490be:	b1ab      	cbz	r3, 80490ec <fs_write+0x38>
	rc = zfp->mp->fs->write(zfp, ptr, size);
 80490c0:	4798      	blx	r3
	if (rc < 0) {
 80490c2:	1e04      	subs	r4, r0, #0
 80490c4:	da0d      	bge.n	80490e2 <fs_write+0x2e>
		LOG_ERR("file write error (%d)", rc);
 80490c6:	4a0b      	ldr	r2, [pc, #44]	; (80490f4 <fs_write+0x40>)
 80490c8:	6813      	ldr	r3, [r2, #0]
 80490ca:	075b      	lsls	r3, r3, #29
 80490cc:	d009      	beq.n	80490e2 <fs_write+0x2e>
 80490ce:	4b0a      	ldr	r3, [pc, #40]	; (80490f8 <fs_write+0x44>)
 80490d0:	4621      	mov	r1, r4
 80490d2:	480a      	ldr	r0, [pc, #40]	; (80490fc <fs_write+0x48>)
 80490d4:	1ad2      	subs	r2, r2, r3
 80490d6:	0892      	lsrs	r2, r2, #2
 80490d8:	0192      	lsls	r2, r2, #6
 80490da:	f042 0201 	orr.w	r2, r2, #1
 80490de:	f00c ff91 	bl	8056004 <log_1>
}
 80490e2:	4620      	mov	r0, r4
 80490e4:	bd10      	pop	{r4, pc}
		return -EBADF;
 80490e6:	f06f 0408 	mvn.w	r4, #8
 80490ea:	e7fa      	b.n	80490e2 <fs_write+0x2e>
		return -ENOTSUP;
 80490ec:	f06f 0485 	mvn.w	r4, #133	; 0x85
 80490f0:	e7f7      	b.n	80490e2 <fs_write+0x2e>
 80490f2:	bf00      	nop
 80490f4:	200208ec 	.word	0x200208ec
 80490f8:	200208c8 	.word	0x200208c8
 80490fc:	080610fe 	.word	0x080610fe

08049100 <fs_seek>:
	if (zfp->mp == NULL) {
 8049100:	6843      	ldr	r3, [r0, #4]
{
 8049102:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
 8049104:	b1ab      	cbz	r3, 8049132 <fs_seek+0x32>
	CHECKIF(zfp->mp->fs->lseek == NULL) {
 8049106:	69db      	ldr	r3, [r3, #28]
 8049108:	68db      	ldr	r3, [r3, #12]
 804910a:	b1ab      	cbz	r3, 8049138 <fs_seek+0x38>
	rc = zfp->mp->fs->lseek(zfp, offset, whence);
 804910c:	4798      	blx	r3
	if (rc < 0) {
 804910e:	1e04      	subs	r4, r0, #0
 8049110:	da0d      	bge.n	804912e <fs_seek+0x2e>
		LOG_ERR("file seek error (%d)", rc);
 8049112:	4a0b      	ldr	r2, [pc, #44]	; (8049140 <fs_seek+0x40>)
 8049114:	6813      	ldr	r3, [r2, #0]
 8049116:	075b      	lsls	r3, r3, #29
 8049118:	d009      	beq.n	804912e <fs_seek+0x2e>
 804911a:	4b0a      	ldr	r3, [pc, #40]	; (8049144 <fs_seek+0x44>)
 804911c:	4621      	mov	r1, r4
 804911e:	480a      	ldr	r0, [pc, #40]	; (8049148 <fs_seek+0x48>)
 8049120:	1ad2      	subs	r2, r2, r3
 8049122:	0892      	lsrs	r2, r2, #2
 8049124:	0192      	lsls	r2, r2, #6
 8049126:	f042 0201 	orr.w	r2, r2, #1
 804912a:	f00c ff6b 	bl	8056004 <log_1>
}
 804912e:	4620      	mov	r0, r4
 8049130:	bd10      	pop	{r4, pc}
		return -EBADF;
 8049132:	f06f 0408 	mvn.w	r4, #8
 8049136:	e7fa      	b.n	804912e <fs_seek+0x2e>
		return -ENOTSUP;
 8049138:	f06f 0485 	mvn.w	r4, #133	; 0x85
 804913c:	e7f7      	b.n	804912e <fs_seek+0x2e>
 804913e:	bf00      	nop
 8049140:	200208ec 	.word	0x200208ec
 8049144:	200208c8 	.word	0x200208c8
 8049148:	08061114 	.word	0x08061114

0804914c <fs_truncate>:
	if (zfp->mp == NULL) {
 804914c:	6843      	ldr	r3, [r0, #4]
{
 804914e:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
 8049150:	b1ab      	cbz	r3, 804917e <fs_truncate+0x32>
	CHECKIF(zfp->mp->fs->truncate == NULL) {
 8049152:	69db      	ldr	r3, [r3, #28]
 8049154:	695b      	ldr	r3, [r3, #20]
 8049156:	b1ab      	cbz	r3, 8049184 <fs_truncate+0x38>
	rc = zfp->mp->fs->truncate(zfp, length);
 8049158:	4798      	blx	r3
	if (rc < 0) {
 804915a:	1e04      	subs	r4, r0, #0
 804915c:	da0d      	bge.n	804917a <fs_truncate+0x2e>
		LOG_ERR("file truncate error (%d)", rc);
 804915e:	4a0b      	ldr	r2, [pc, #44]	; (804918c <fs_truncate+0x40>)
 8049160:	6813      	ldr	r3, [r2, #0]
 8049162:	075b      	lsls	r3, r3, #29
 8049164:	d009      	beq.n	804917a <fs_truncate+0x2e>
 8049166:	4b0a      	ldr	r3, [pc, #40]	; (8049190 <fs_truncate+0x44>)
 8049168:	4621      	mov	r1, r4
 804916a:	480a      	ldr	r0, [pc, #40]	; (8049194 <fs_truncate+0x48>)
 804916c:	1ad2      	subs	r2, r2, r3
 804916e:	0892      	lsrs	r2, r2, #2
 8049170:	0192      	lsls	r2, r2, #6
 8049172:	f042 0201 	orr.w	r2, r2, #1
 8049176:	f00c ff45 	bl	8056004 <log_1>
}
 804917a:	4620      	mov	r0, r4
 804917c:	bd10      	pop	{r4, pc}
		return -EBADF;
 804917e:	f06f 0408 	mvn.w	r4, #8
 8049182:	e7fa      	b.n	804917a <fs_truncate+0x2e>
		return -ENOTSUP;
 8049184:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8049188:	e7f7      	b.n	804917a <fs_truncate+0x2e>
 804918a:	bf00      	nop
 804918c:	200208ec 	.word	0x200208ec
 8049190:	200208c8 	.word	0x200208c8
 8049194:	08061129 	.word	0x08061129

08049198 <fs_opendir>:
{
 8049198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 804919a:	4605      	mov	r5, r0
	if ((abs_path == NULL) ||
 804919c:	460e      	mov	r6, r1
 804919e:	b979      	cbnz	r1, 80491c0 <fs_opendir+0x28>
		LOG_ERR("invalid file name!!");
 80491a0:	4936      	ldr	r1, [pc, #216]	; (804927c <fs_opendir+0xe4>)
 80491a2:	680b      	ldr	r3, [r1, #0]
 80491a4:	0758      	lsls	r0, r3, #29
 80491a6:	d008      	beq.n	80491ba <fs_opendir+0x22>
 80491a8:	4b35      	ldr	r3, [pc, #212]	; (8049280 <fs_opendir+0xe8>)
 80491aa:	4836      	ldr	r0, [pc, #216]	; (8049284 <fs_opendir+0xec>)
 80491ac:	1ac9      	subs	r1, r1, r3
 80491ae:	0889      	lsrs	r1, r1, #2
 80491b0:	0189      	lsls	r1, r1, #6
 80491b2:	f041 0101 	orr.w	r1, r1, #1
 80491b6:	f00c ff16 	bl	8055fe6 <log_0>
		return -EINVAL;
 80491ba:	f06f 0415 	mvn.w	r4, #21
 80491be:	e023      	b.n	8049208 <fs_opendir+0x70>
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
 80491c0:	4608      	mov	r0, r1
 80491c2:	f7f7 fb49 	bl	8040858 <strlen>
	if ((abs_path == NULL) ||
 80491c6:	2800      	cmp	r0, #0
 80491c8:	d0ea      	beq.n	80491a0 <fs_opendir+0x8>
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
 80491ca:	7833      	ldrb	r3, [r6, #0]
 80491cc:	2b2f      	cmp	r3, #47	; 0x2f
 80491ce:	d1e7      	bne.n	80491a0 <fs_opendir+0x8>
	if (zdp->mp != NULL || zdp->dirp != NULL) {
 80491d0:	686b      	ldr	r3, [r5, #4]
 80491d2:	2b00      	cmp	r3, #0
 80491d4:	d14b      	bne.n	804926e <fs_opendir+0xd6>
 80491d6:	682f      	ldr	r7, [r5, #0]
 80491d8:	2f00      	cmp	r7, #0
 80491da:	d148      	bne.n	804926e <fs_opendir+0xd6>
	if (strcmp(abs_path, "/") == 0) {
 80491dc:	492a      	ldr	r1, [pc, #168]	; (8049288 <fs_opendir+0xf0>)
 80491de:	4630      	mov	r0, r6
 80491e0:	f7f7 fb30 	bl	8040844 <strcmp>
 80491e4:	4604      	mov	r4, r0
 80491e6:	b990      	cbnz	r0, 804920e <fs_opendir+0x76>
		k_mutex_lock(&mutex, K_FOREVER);
 80491e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80491ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80491f0:	f7ff fe52 	bl	8048e98 <k_mutex_lock.constprop.0.isra.0>
	return list->head == list;
 80491f4:	4a25      	ldr	r2, [pc, #148]	; (804928c <fs_opendir+0xf4>)
		zdp->mp = NULL;
 80491f6:	606c      	str	r4, [r5, #4]
 80491f8:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80491fa:	4293      	cmp	r3, r2
 80491fc:	bf14      	ite	ne
 80491fe:	461f      	movne	r7, r3
 8049200:	4627      	moveq	r7, r4
		zdp->dirp = sys_dlist_peek_head(&fs_mnt_list);
 8049202:	602f      	str	r7, [r5, #0]
		k_mutex_unlock(&mutex);
 8049204:	f7ff fe50 	bl	8048ea8 <k_mutex_unlock.constprop.0.isra.0>
}
 8049208:	4620      	mov	r0, r4
 804920a:	b003      	add	sp, #12
 804920c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
 804920e:	463a      	mov	r2, r7
 8049210:	4631      	mov	r1, r6
 8049212:	a801      	add	r0, sp, #4
 8049214:	f7ff fe4e 	bl	8048eb4 <fs_get_mnt_point>
	if (rc < 0) {
 8049218:	1e04      	subs	r4, r0, #0
 804921a:	da0d      	bge.n	8049238 <fs_opendir+0xa0>
		LOG_ERR("mount point not found!!");
 804921c:	4917      	ldr	r1, [pc, #92]	; (804927c <fs_opendir+0xe4>)
 804921e:	680b      	ldr	r3, [r1, #0]
 8049220:	075a      	lsls	r2, r3, #29
 8049222:	d0f1      	beq.n	8049208 <fs_opendir+0x70>
 8049224:	4b16      	ldr	r3, [pc, #88]	; (8049280 <fs_opendir+0xe8>)
 8049226:	481a      	ldr	r0, [pc, #104]	; (8049290 <fs_opendir+0xf8>)
 8049228:	1ac9      	subs	r1, r1, r3
 804922a:	0889      	lsrs	r1, r1, #2
 804922c:	0189      	lsls	r1, r1, #6
 804922e:	f041 0101 	orr.w	r1, r1, #1
 8049232:	f00c fed8 	bl	8055fe6 <log_0>
 8049236:	e7e7      	b.n	8049208 <fs_opendir+0x70>
	CHECKIF(mp->fs->opendir == NULL) {
 8049238:	9a01      	ldr	r2, [sp, #4]
 804923a:	69d3      	ldr	r3, [r2, #28]
 804923c:	6a1b      	ldr	r3, [r3, #32]
 804923e:	b1cb      	cbz	r3, 8049274 <fs_opendir+0xdc>
	rc = zdp->mp->fs->opendir(zdp, abs_path);
 8049240:	4631      	mov	r1, r6
 8049242:	4628      	mov	r0, r5
	zdp->mp = mp;
 8049244:	606a      	str	r2, [r5, #4]
	rc = zdp->mp->fs->opendir(zdp, abs_path);
 8049246:	4798      	blx	r3
	if (rc < 0) {
 8049248:	1e04      	subs	r4, r0, #0
 804924a:	dadd      	bge.n	8049208 <fs_opendir+0x70>
		LOG_ERR("directory open error (%d)", rc);
 804924c:	4a0b      	ldr	r2, [pc, #44]	; (804927c <fs_opendir+0xe4>)
 804924e:	6813      	ldr	r3, [r2, #0]
 8049250:	075b      	lsls	r3, r3, #29
		zdp->dirp = NULL;
 8049252:	e9c5 7700 	strd	r7, r7, [r5]
		LOG_ERR("directory open error (%d)", rc);
 8049256:	d0d7      	beq.n	8049208 <fs_opendir+0x70>
 8049258:	4b09      	ldr	r3, [pc, #36]	; (8049280 <fs_opendir+0xe8>)
 804925a:	4621      	mov	r1, r4
 804925c:	480d      	ldr	r0, [pc, #52]	; (8049294 <fs_opendir+0xfc>)
 804925e:	1ad2      	subs	r2, r2, r3
 8049260:	0892      	lsrs	r2, r2, #2
 8049262:	0192      	lsls	r2, r2, #6
 8049264:	f042 0201 	orr.w	r2, r2, #1
 8049268:	f00c fecc 	bl	8056004 <log_1>
 804926c:	e7cc      	b.n	8049208 <fs_opendir+0x70>
		return -EBUSY;
 804926e:	f06f 040f 	mvn.w	r4, #15
 8049272:	e7c9      	b.n	8049208 <fs_opendir+0x70>
		return -ENOTSUP;
 8049274:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8049278:	e7c6      	b.n	8049208 <fs_opendir+0x70>
 804927a:	bf00      	nop
 804927c:	200208ec 	.word	0x200208ec
 8049280:	200208c8 	.word	0x200208c8
 8049284:	08061092 	.word	0x08061092
 8049288:	08061142 	.word	0x08061142
 804928c:	20037664 	.word	0x20037664
 8049290:	080610a6 	.word	0x080610a6
 8049294:	08061144 	.word	0x08061144

08049298 <fs_readdir>:
{
 8049298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (zdp->mp) {
 804929c:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 80492a0:	4606      	mov	r6, r0
 80492a2:	460f      	mov	r7, r1
	if (zdp->mp) {
 80492a4:	f1b8 0f00 	cmp.w	r8, #0
 80492a8:	d023      	beq.n	80492f2 <fs_readdir+0x5a>
		CHECKIF(zdp->mp->fs->readdir == NULL) {
 80492aa:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80492ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80492b0:	2b00      	cmp	r3, #0
 80492b2:	d057      	beq.n	8049364 <fs_readdir+0xcc>
			if ((strcmp(entry->name, ".") != 0)
 80492b4:	1c4d      	adds	r5, r1, #1
 80492b6:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80493a0 <fs_readdir+0x108>
			rc = zdp->mp->fs->readdir(zdp, entry);
 80492ba:	6873      	ldr	r3, [r6, #4]
 80492bc:	4639      	mov	r1, r7
 80492be:	4630      	mov	r0, r6
 80492c0:	69db      	ldr	r3, [r3, #28]
 80492c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80492c4:	4798      	blx	r3
			if (rc < 0) {
 80492c6:	1e04      	subs	r4, r0, #0
 80492c8:	db52      	blt.n	8049370 <fs_readdir+0xd8>
			if (entry->name[0] == 0) {
 80492ca:	787b      	ldrb	r3, [r7, #1]
 80492cc:	b173      	cbz	r3, 80492ec <fs_readdir+0x54>
			if (entry->type != FS_DIR_ENTRY_DIR) {
 80492ce:	783b      	ldrb	r3, [r7, #0]
 80492d0:	2b01      	cmp	r3, #1
 80492d2:	d10b      	bne.n	80492ec <fs_readdir+0x54>
			if ((strcmp(entry->name, ".") != 0)
 80492d4:	4641      	mov	r1, r8
 80492d6:	4628      	mov	r0, r5
 80492d8:	f7f7 fab4 	bl	8040844 <strcmp>
 80492dc:	2800      	cmp	r0, #0
 80492de:	d0ec      	beq.n	80492ba <fs_readdir+0x22>
			    && (strcmp(entry->name, "..") != 0)) {
 80492e0:	492b      	ldr	r1, [pc, #172]	; (8049390 <fs_readdir+0xf8>)
 80492e2:	4628      	mov	r0, r5
 80492e4:	f7f7 faae 	bl	8040844 <strcmp>
 80492e8:	2800      	cmp	r0, #0
 80492ea:	d0e6      	beq.n	80492ba <fs_readdir+0x22>
}
 80492ec:	4620      	mov	r0, r4
 80492ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (zdp->dirp == NULL) {
 80492f2:	6804      	ldr	r4, [r0, #0]
 80492f4:	b90c      	cbnz	r4, 80492fa <fs_readdir+0x62>
		entry->name[0] = 0;
 80492f6:	704c      	strb	r4, [r1, #1]
		return 0;
 80492f8:	e7f8      	b.n	80492ec <fs_readdir+0x54>
	return list->head == list;
 80492fa:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80493a4 <fs_readdir+0x10c>
	k_mutex_lock(&mutex, K_FOREVER);
 80492fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8049302:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8049306:	f7ff fdc7 	bl	8048e98 <k_mutex_lock.constprop.0.isra.0>
 804930a:	f8d9 5000 	ldr.w	r5, [r9]
	return (node == list->tail) ? NULL : node->next;
 804930e:	f8d9 3004 	ldr.w	r3, [r9, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8049312:	454d      	cmp	r5, r9
 8049314:	bf08      	it	eq
 8049316:	2500      	moveq	r5, #0
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
 8049318:	b915      	cbnz	r5, 8049320 <fs_readdir+0x88>
	sys_dnode_t *node, *next = NULL;
 804931a:	46a8      	mov	r8, r5
	bool found = false;
 804931c:	2400      	movs	r4, #0
 804931e:	e016      	b.n	804934e <fs_readdir+0xb6>
		if (node == zdp->dirp) {
 8049320:	6832      	ldr	r2, [r6, #0]
 8049322:	4295      	cmp	r5, r2
 8049324:	d11a      	bne.n	804935c <fs_readdir+0xc4>
			entry->type = FS_DIR_ENTRY_DIR;
 8049326:	2401      	movs	r4, #1
 8049328:	4638      	mov	r0, r7
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 804932a:	22ff      	movs	r2, #255	; 0xff
 804932c:	f800 4b01 	strb.w	r4, [r0], #1
			strncpy(entry->name, mnt->mnt_point + 1,
 8049330:	68e9      	ldr	r1, [r5, #12]
 8049332:	4421      	add	r1, r4
 8049334:	f011 fee2 	bl	805b0fc <strncpy>
			entry->name[sizeof(entry->name) - 1] = 0;
 8049338:	2300      	movs	r3, #0
 804933a:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
			entry->size = 0;
 804933e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	return (node == list->tail) ? NULL : node->next;
 8049342:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8049346:	429d      	cmp	r5, r3
 8049348:	d001      	beq.n	804934e <fs_readdir+0xb6>
 804934a:	f8d5 8000 	ldr.w	r8, [r5]
	k_mutex_unlock(&mutex);
 804934e:	f7ff fdab 	bl	8048ea8 <k_mutex_unlock.constprop.0.isra.0>
	if (!found) {
 8049352:	b154      	cbz	r4, 804936a <fs_readdir+0xd2>
	return 0;
 8049354:	2400      	movs	r4, #0
	zdp->dirp = next;
 8049356:	f8c6 8000 	str.w	r8, [r6]
	return 0;
 804935a:	e7c7      	b.n	80492ec <fs_readdir+0x54>
 804935c:	429d      	cmp	r5, r3
 804935e:	d0dd      	beq.n	804931c <fs_readdir+0x84>
 8049360:	682d      	ldr	r5, [r5, #0]
 8049362:	e7d9      	b.n	8049318 <fs_readdir+0x80>
			return  -ENOTSUP;
 8049364:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8049368:	e7c0      	b.n	80492ec <fs_readdir+0x54>
		return -ENOENT;
 804936a:	f06f 0401 	mvn.w	r4, #1
 804936e:	e7bd      	b.n	80492ec <fs_readdir+0x54>
			LOG_ERR("directory read error (%d)", rc);
 8049370:	4a08      	ldr	r2, [pc, #32]	; (8049394 <fs_readdir+0xfc>)
 8049372:	6813      	ldr	r3, [r2, #0]
 8049374:	075b      	lsls	r3, r3, #29
 8049376:	d0b9      	beq.n	80492ec <fs_readdir+0x54>
 8049378:	4b07      	ldr	r3, [pc, #28]	; (8049398 <fs_readdir+0x100>)
 804937a:	4621      	mov	r1, r4
 804937c:	4807      	ldr	r0, [pc, #28]	; (804939c <fs_readdir+0x104>)
 804937e:	1ad2      	subs	r2, r2, r3
 8049380:	0892      	lsrs	r2, r2, #2
 8049382:	0192      	lsls	r2, r2, #6
 8049384:	f042 0201 	orr.w	r2, r2, #1
 8049388:	f00c fe3c 	bl	8056004 <log_1>
 804938c:	e7ae      	b.n	80492ec <fs_readdir+0x54>
 804938e:	bf00      	nop
 8049390:	0806115e 	.word	0x0806115e
 8049394:	200208ec 	.word	0x200208ec
 8049398:	200208c8 	.word	0x200208c8
 804939c:	08061161 	.word	0x08061161
 80493a0:	08062f67 	.word	0x08062f67
 80493a4:	20037664 	.word	0x20037664

080493a8 <fs_closedir>:
{
 80493a8:	b538      	push	{r3, r4, r5, lr}
	if (zdp->mp == NULL) {
 80493aa:	6844      	ldr	r4, [r0, #4]
{
 80493ac:	4605      	mov	r5, r0
	if (zdp->mp == NULL) {
 80493ae:	b914      	cbnz	r4, 80493b6 <fs_closedir+0xe>
		zdp->dirp = NULL;
 80493b0:	6004      	str	r4, [r0, #0]
}
 80493b2:	4620      	mov	r0, r4
 80493b4:	bd38      	pop	{r3, r4, r5, pc}
	CHECKIF(zdp->mp->fs->closedir == NULL) {
 80493b6:	69e3      	ldr	r3, [r4, #28]
 80493b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80493ba:	b1ab      	cbz	r3, 80493e8 <fs_closedir+0x40>
	rc = zdp->mp->fs->closedir(zdp);
 80493bc:	4798      	blx	r3
	if (rc < 0) {
 80493be:	1e04      	subs	r4, r0, #0
 80493c0:	da0e      	bge.n	80493e0 <fs_closedir+0x38>
		LOG_ERR("directory close error (%d)", rc);
 80493c2:	4a0b      	ldr	r2, [pc, #44]	; (80493f0 <fs_closedir+0x48>)
 80493c4:	6813      	ldr	r3, [r2, #0]
 80493c6:	075b      	lsls	r3, r3, #29
 80493c8:	d0f3      	beq.n	80493b2 <fs_closedir+0xa>
 80493ca:	4b0a      	ldr	r3, [pc, #40]	; (80493f4 <fs_closedir+0x4c>)
 80493cc:	4621      	mov	r1, r4
 80493ce:	480a      	ldr	r0, [pc, #40]	; (80493f8 <fs_closedir+0x50>)
 80493d0:	1ad2      	subs	r2, r2, r3
 80493d2:	0892      	lsrs	r2, r2, #2
 80493d4:	0192      	lsls	r2, r2, #6
 80493d6:	f042 0201 	orr.w	r2, r2, #1
 80493da:	f00c fe13 	bl	8056004 <log_1>
 80493de:	e7e8      	b.n	80493b2 <fs_closedir+0xa>
	zdp->mp = NULL;
 80493e0:	2300      	movs	r3, #0
	zdp->dirp = NULL;
 80493e2:	e9c5 3300 	strd	r3, r3, [r5]
	return rc;
 80493e6:	e7e4      	b.n	80493b2 <fs_closedir+0xa>
		return -ENOTSUP;
 80493e8:	f06f 0485 	mvn.w	r4, #133	; 0x85
 80493ec:	e7e1      	b.n	80493b2 <fs_closedir+0xa>
 80493ee:	bf00      	nop
 80493f0:	200208ec 	.word	0x200208ec
 80493f4:	200208c8 	.word	0x200208c8
 80493f8:	0806117b 	.word	0x0806117b

080493fc <fs_mkdir>:
{
 80493fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((abs_path == NULL) ||
 80493fe:	4605      	mov	r5, r0
 8049400:	b978      	cbnz	r0, 8049422 <fs_mkdir+0x26>
		LOG_ERR("invalid file name!!");
 8049402:	4927      	ldr	r1, [pc, #156]	; (80494a0 <fs_mkdir+0xa4>)
 8049404:	680b      	ldr	r3, [r1, #0]
 8049406:	075c      	lsls	r4, r3, #29
 8049408:	d008      	beq.n	804941c <fs_mkdir+0x20>
 804940a:	4b26      	ldr	r3, [pc, #152]	; (80494a4 <fs_mkdir+0xa8>)
 804940c:	4826      	ldr	r0, [pc, #152]	; (80494a8 <fs_mkdir+0xac>)
 804940e:	1ac9      	subs	r1, r1, r3
 8049410:	0889      	lsrs	r1, r1, #2
 8049412:	0189      	lsls	r1, r1, #6
 8049414:	f041 0101 	orr.w	r1, r1, #1
 8049418:	f00c fde5 	bl	8055fe6 <log_0>
		return -EINVAL;
 804941c:	f06f 0415 	mvn.w	r4, #21
 8049420:	e01a      	b.n	8049458 <fs_mkdir+0x5c>
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
 8049422:	f7f7 fa19 	bl	8040858 <strlen>
	if ((abs_path == NULL) ||
 8049426:	2801      	cmp	r0, #1
 8049428:	d9eb      	bls.n	8049402 <fs_mkdir+0x6>
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
 804942a:	782b      	ldrb	r3, [r5, #0]
 804942c:	2b2f      	cmp	r3, #47	; 0x2f
 804942e:	d1e8      	bne.n	8049402 <fs_mkdir+0x6>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
 8049430:	2200      	movs	r2, #0
 8049432:	4629      	mov	r1, r5
 8049434:	a801      	add	r0, sp, #4
 8049436:	f7ff fd3d 	bl	8048eb4 <fs_get_mnt_point>
	if (rc < 0) {
 804943a:	1e04      	subs	r4, r0, #0
 804943c:	da0f      	bge.n	804945e <fs_mkdir+0x62>
		LOG_ERR("mount point not found!!");
 804943e:	4918      	ldr	r1, [pc, #96]	; (80494a0 <fs_mkdir+0xa4>)
 8049440:	680b      	ldr	r3, [r1, #0]
 8049442:	0758      	lsls	r0, r3, #29
 8049444:	d008      	beq.n	8049458 <fs_mkdir+0x5c>
 8049446:	4b17      	ldr	r3, [pc, #92]	; (80494a4 <fs_mkdir+0xa8>)
 8049448:	4818      	ldr	r0, [pc, #96]	; (80494ac <fs_mkdir+0xb0>)
 804944a:	1ac9      	subs	r1, r1, r3
 804944c:	0889      	lsrs	r1, r1, #2
 804944e:	0189      	lsls	r1, r1, #6
 8049450:	f041 0101 	orr.w	r1, r1, #1
 8049454:	f00c fdc7 	bl	8055fe6 <log_0>
}
 8049458:	4620      	mov	r0, r4
 804945a:	b003      	add	sp, #12
 804945c:	bd30      	pop	{r4, r5, pc}
	if (mp->flags & FS_MOUNT_FLAG_READ_ONLY) {
 804945e:	9801      	ldr	r0, [sp, #4]
 8049460:	f890 3020 	ldrb.w	r3, [r0, #32]
 8049464:	079a      	lsls	r2, r3, #30
 8049466:	d415      	bmi.n	8049494 <fs_mkdir+0x98>
	CHECKIF(mp->fs->mkdir == NULL) {
 8049468:	69c3      	ldr	r3, [r0, #28]
 804946a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804946c:	b1ab      	cbz	r3, 804949a <fs_mkdir+0x9e>
	rc = mp->fs->mkdir(mp, abs_path);
 804946e:	4629      	mov	r1, r5
 8049470:	4798      	blx	r3
	if (rc < 0) {
 8049472:	1e04      	subs	r4, r0, #0
 8049474:	daf0      	bge.n	8049458 <fs_mkdir+0x5c>
		LOG_ERR("failed to create directory (%d)", rc);
 8049476:	4a0a      	ldr	r2, [pc, #40]	; (80494a0 <fs_mkdir+0xa4>)
 8049478:	6813      	ldr	r3, [r2, #0]
 804947a:	075b      	lsls	r3, r3, #29
 804947c:	d0ec      	beq.n	8049458 <fs_mkdir+0x5c>
 804947e:	4b09      	ldr	r3, [pc, #36]	; (80494a4 <fs_mkdir+0xa8>)
 8049480:	4621      	mov	r1, r4
 8049482:	480b      	ldr	r0, [pc, #44]	; (80494b0 <fs_mkdir+0xb4>)
 8049484:	1ad2      	subs	r2, r2, r3
 8049486:	0892      	lsrs	r2, r2, #2
 8049488:	0192      	lsls	r2, r2, #6
 804948a:	f042 0201 	orr.w	r2, r2, #1
 804948e:	f00c fdb9 	bl	8056004 <log_1>
 8049492:	e7e1      	b.n	8049458 <fs_mkdir+0x5c>
		return -EROFS;
 8049494:	f06f 041d 	mvn.w	r4, #29
 8049498:	e7de      	b.n	8049458 <fs_mkdir+0x5c>
		return -ENOTSUP;
 804949a:	f06f 0485 	mvn.w	r4, #133	; 0x85
 804949e:	e7db      	b.n	8049458 <fs_mkdir+0x5c>
 80494a0:	200208ec 	.word	0x200208ec
 80494a4:	200208c8 	.word	0x200208c8
 80494a8:	08061092 	.word	0x08061092
 80494ac:	080610a6 	.word	0x080610a6
 80494b0:	08061196 	.word	0x08061196

080494b4 <fs_unlink>:
{
 80494b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((abs_path == NULL) ||
 80494b6:	4605      	mov	r5, r0
 80494b8:	b978      	cbnz	r0, 80494da <fs_unlink+0x26>
		LOG_ERR("invalid file name!!");
 80494ba:	4927      	ldr	r1, [pc, #156]	; (8049558 <fs_unlink+0xa4>)
 80494bc:	680b      	ldr	r3, [r1, #0]
 80494be:	075c      	lsls	r4, r3, #29
 80494c0:	d008      	beq.n	80494d4 <fs_unlink+0x20>
 80494c2:	4b26      	ldr	r3, [pc, #152]	; (804955c <fs_unlink+0xa8>)
 80494c4:	4826      	ldr	r0, [pc, #152]	; (8049560 <fs_unlink+0xac>)
 80494c6:	1ac9      	subs	r1, r1, r3
 80494c8:	0889      	lsrs	r1, r1, #2
 80494ca:	0189      	lsls	r1, r1, #6
 80494cc:	f041 0101 	orr.w	r1, r1, #1
 80494d0:	f00c fd89 	bl	8055fe6 <log_0>
		return -EINVAL;
 80494d4:	f06f 0415 	mvn.w	r4, #21
 80494d8:	e01a      	b.n	8049510 <fs_unlink+0x5c>
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
 80494da:	f7f7 f9bd 	bl	8040858 <strlen>
	if ((abs_path == NULL) ||
 80494de:	2801      	cmp	r0, #1
 80494e0:	d9eb      	bls.n	80494ba <fs_unlink+0x6>
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
 80494e2:	782b      	ldrb	r3, [r5, #0]
 80494e4:	2b2f      	cmp	r3, #47	; 0x2f
 80494e6:	d1e8      	bne.n	80494ba <fs_unlink+0x6>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
 80494e8:	2200      	movs	r2, #0
 80494ea:	4629      	mov	r1, r5
 80494ec:	a801      	add	r0, sp, #4
 80494ee:	f7ff fce1 	bl	8048eb4 <fs_get_mnt_point>
	if (rc < 0) {
 80494f2:	1e04      	subs	r4, r0, #0
 80494f4:	da0f      	bge.n	8049516 <fs_unlink+0x62>
		LOG_ERR("mount point not found!!");
 80494f6:	4918      	ldr	r1, [pc, #96]	; (8049558 <fs_unlink+0xa4>)
 80494f8:	680b      	ldr	r3, [r1, #0]
 80494fa:	0758      	lsls	r0, r3, #29
 80494fc:	d008      	beq.n	8049510 <fs_unlink+0x5c>
 80494fe:	4b17      	ldr	r3, [pc, #92]	; (804955c <fs_unlink+0xa8>)
 8049500:	4818      	ldr	r0, [pc, #96]	; (8049564 <fs_unlink+0xb0>)
 8049502:	1ac9      	subs	r1, r1, r3
 8049504:	0889      	lsrs	r1, r1, #2
 8049506:	0189      	lsls	r1, r1, #6
 8049508:	f041 0101 	orr.w	r1, r1, #1
 804950c:	f00c fd6b 	bl	8055fe6 <log_0>
}
 8049510:	4620      	mov	r0, r4
 8049512:	b003      	add	sp, #12
 8049514:	bd30      	pop	{r4, r5, pc}
	if (mp->flags & FS_MOUNT_FLAG_READ_ONLY) {
 8049516:	9801      	ldr	r0, [sp, #4]
 8049518:	f890 3020 	ldrb.w	r3, [r0, #32]
 804951c:	079a      	lsls	r2, r3, #30
 804951e:	d415      	bmi.n	804954c <fs_unlink+0x98>
	CHECKIF(mp->fs->unlink == NULL) {
 8049520:	69c3      	ldr	r3, [r0, #28]
 8049522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8049524:	b1ab      	cbz	r3, 8049552 <fs_unlink+0x9e>
	rc = mp->fs->unlink(mp, abs_path);
 8049526:	4629      	mov	r1, r5
 8049528:	4798      	blx	r3
	if (rc < 0) {
 804952a:	1e04      	subs	r4, r0, #0
 804952c:	daf0      	bge.n	8049510 <fs_unlink+0x5c>
		LOG_ERR("failed to unlink path (%d)", rc);
 804952e:	4a0a      	ldr	r2, [pc, #40]	; (8049558 <fs_unlink+0xa4>)
 8049530:	6813      	ldr	r3, [r2, #0]
 8049532:	075b      	lsls	r3, r3, #29
 8049534:	d0ec      	beq.n	8049510 <fs_unlink+0x5c>
 8049536:	4b09      	ldr	r3, [pc, #36]	; (804955c <fs_unlink+0xa8>)
 8049538:	4621      	mov	r1, r4
 804953a:	480b      	ldr	r0, [pc, #44]	; (8049568 <fs_unlink+0xb4>)
 804953c:	1ad2      	subs	r2, r2, r3
 804953e:	0892      	lsrs	r2, r2, #2
 8049540:	0192      	lsls	r2, r2, #6
 8049542:	f042 0201 	orr.w	r2, r2, #1
 8049546:	f00c fd5d 	bl	8056004 <log_1>
 804954a:	e7e1      	b.n	8049510 <fs_unlink+0x5c>
		return -EROFS;
 804954c:	f06f 041d 	mvn.w	r4, #29
 8049550:	e7de      	b.n	8049510 <fs_unlink+0x5c>
		return -ENOTSUP;
 8049552:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8049556:	e7db      	b.n	8049510 <fs_unlink+0x5c>
 8049558:	200208ec 	.word	0x200208ec
 804955c:	200208c8 	.word	0x200208c8
 8049560:	08061092 	.word	0x08061092
 8049564:	080610a6 	.word	0x080610a6
 8049568:	080611b6 	.word	0x080611b6

0804956c <fs_stat>:
{
 804956c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804956e:	460e      	mov	r6, r1
	if ((abs_path == NULL) ||
 8049570:	4605      	mov	r5, r0
 8049572:	b978      	cbnz	r0, 8049594 <fs_stat+0x28>
		LOG_ERR("invalid file name!!");
 8049574:	4925      	ldr	r1, [pc, #148]	; (804960c <fs_stat+0xa0>)
 8049576:	680b      	ldr	r3, [r1, #0]
 8049578:	075c      	lsls	r4, r3, #29
 804957a:	d008      	beq.n	804958e <fs_stat+0x22>
 804957c:	4b24      	ldr	r3, [pc, #144]	; (8049610 <fs_stat+0xa4>)
 804957e:	4825      	ldr	r0, [pc, #148]	; (8049614 <fs_stat+0xa8>)
 8049580:	1ac9      	subs	r1, r1, r3
 8049582:	0889      	lsrs	r1, r1, #2
 8049584:	0189      	lsls	r1, r1, #6
 8049586:	f041 0101 	orr.w	r1, r1, #1
 804958a:	f00c fd2c 	bl	8055fe6 <log_0>
		return -EINVAL;
 804958e:	f06f 0415 	mvn.w	r4, #21
 8049592:	e01a      	b.n	80495ca <fs_stat+0x5e>
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
 8049594:	f7f7 f960 	bl	8040858 <strlen>
	if ((abs_path == NULL) ||
 8049598:	2801      	cmp	r0, #1
 804959a:	d9eb      	bls.n	8049574 <fs_stat+0x8>
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
 804959c:	782b      	ldrb	r3, [r5, #0]
 804959e:	2b2f      	cmp	r3, #47	; 0x2f
 80495a0:	d1e8      	bne.n	8049574 <fs_stat+0x8>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
 80495a2:	2200      	movs	r2, #0
 80495a4:	4629      	mov	r1, r5
 80495a6:	a801      	add	r0, sp, #4
 80495a8:	f7ff fc84 	bl	8048eb4 <fs_get_mnt_point>
	if (rc < 0) {
 80495ac:	1e04      	subs	r4, r0, #0
 80495ae:	da0f      	bge.n	80495d0 <fs_stat+0x64>
		LOG_ERR("mount point not found!!");
 80495b0:	4916      	ldr	r1, [pc, #88]	; (804960c <fs_stat+0xa0>)
 80495b2:	680b      	ldr	r3, [r1, #0]
 80495b4:	0758      	lsls	r0, r3, #29
 80495b6:	d008      	beq.n	80495ca <fs_stat+0x5e>
 80495b8:	4b15      	ldr	r3, [pc, #84]	; (8049610 <fs_stat+0xa4>)
 80495ba:	4817      	ldr	r0, [pc, #92]	; (8049618 <fs_stat+0xac>)
 80495bc:	1ac9      	subs	r1, r1, r3
 80495be:	0889      	lsrs	r1, r1, #2
 80495c0:	0189      	lsls	r1, r1, #6
 80495c2:	f041 0101 	orr.w	r1, r1, #1
 80495c6:	f00c fd0e 	bl	8055fe6 <log_0>
}
 80495ca:	4620      	mov	r0, r4
 80495cc:	b002      	add	sp, #8
 80495ce:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(mp->fs->stat == NULL) {
 80495d0:	9801      	ldr	r0, [sp, #4]
 80495d2:	69c3      	ldr	r3, [r0, #28]
 80495d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80495d6:	b1b3      	cbz	r3, 8049606 <fs_stat+0x9a>
	rc = mp->fs->stat(mp, abs_path, entry);
 80495d8:	4632      	mov	r2, r6
 80495da:	4629      	mov	r1, r5
 80495dc:	4798      	blx	r3
	if (rc == -ENOENT) {
 80495de:	1c82      	adds	r2, r0, #2
	rc = mp->fs->stat(mp, abs_path, entry);
 80495e0:	4604      	mov	r4, r0
	if (rc == -ENOENT) {
 80495e2:	d0f2      	beq.n	80495ca <fs_stat+0x5e>
	} else if (rc < 0) {
 80495e4:	2800      	cmp	r0, #0
 80495e6:	daf0      	bge.n	80495ca <fs_stat+0x5e>
		LOG_ERR("failed get file or dir stat (%d)", rc);
 80495e8:	4a08      	ldr	r2, [pc, #32]	; (804960c <fs_stat+0xa0>)
 80495ea:	6813      	ldr	r3, [r2, #0]
 80495ec:	075b      	lsls	r3, r3, #29
 80495ee:	d0ec      	beq.n	80495ca <fs_stat+0x5e>
 80495f0:	4b07      	ldr	r3, [pc, #28]	; (8049610 <fs_stat+0xa4>)
 80495f2:	4601      	mov	r1, r0
 80495f4:	4809      	ldr	r0, [pc, #36]	; (804961c <fs_stat+0xb0>)
 80495f6:	1ad2      	subs	r2, r2, r3
 80495f8:	0892      	lsrs	r2, r2, #2
 80495fa:	0192      	lsls	r2, r2, #6
 80495fc:	f042 0201 	orr.w	r2, r2, #1
 8049600:	f00c fd00 	bl	8056004 <log_1>
 8049604:	e7e1      	b.n	80495ca <fs_stat+0x5e>
		return -ENOTSUP;
 8049606:	f06f 0485 	mvn.w	r4, #133	; 0x85
 804960a:	e7de      	b.n	80495ca <fs_stat+0x5e>
 804960c:	200208ec 	.word	0x200208ec
 8049610:	200208c8 	.word	0x200208c8
 8049614:	08061092 	.word	0x08061092
 8049618:	080610a6 	.word	0x080610a6
 804961c:	080611d1 	.word	0x080611d1

08049620 <fs_statvfs>:
{
 8049620:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8049622:	460e      	mov	r6, r1
	if ((abs_path == NULL) ||
 8049624:	4605      	mov	r5, r0
 8049626:	b978      	cbnz	r0, 8049648 <fs_statvfs+0x28>
		LOG_ERR("invalid file name!!");
 8049628:	4923      	ldr	r1, [pc, #140]	; (80496b8 <fs_statvfs+0x98>)
 804962a:	680b      	ldr	r3, [r1, #0]
 804962c:	0758      	lsls	r0, r3, #29
 804962e:	d008      	beq.n	8049642 <fs_statvfs+0x22>
 8049630:	4b22      	ldr	r3, [pc, #136]	; (80496bc <fs_statvfs+0x9c>)
 8049632:	4823      	ldr	r0, [pc, #140]	; (80496c0 <fs_statvfs+0xa0>)
 8049634:	1ac9      	subs	r1, r1, r3
 8049636:	0889      	lsrs	r1, r1, #2
 8049638:	0189      	lsls	r1, r1, #6
 804963a:	f041 0101 	orr.w	r1, r1, #1
 804963e:	f00c fcd2 	bl	8055fe6 <log_0>
		return -EINVAL;
 8049642:	f06f 0415 	mvn.w	r4, #21
 8049646:	e01a      	b.n	804967e <fs_statvfs+0x5e>
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
 8049648:	f7f7 f906 	bl	8040858 <strlen>
	if ((abs_path == NULL) ||
 804964c:	2801      	cmp	r0, #1
 804964e:	d9eb      	bls.n	8049628 <fs_statvfs+0x8>
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
 8049650:	782b      	ldrb	r3, [r5, #0]
 8049652:	2b2f      	cmp	r3, #47	; 0x2f
 8049654:	d1e8      	bne.n	8049628 <fs_statvfs+0x8>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
 8049656:	2200      	movs	r2, #0
 8049658:	4629      	mov	r1, r5
 804965a:	a801      	add	r0, sp, #4
 804965c:	f7ff fc2a 	bl	8048eb4 <fs_get_mnt_point>
	if (rc < 0) {
 8049660:	1e04      	subs	r4, r0, #0
 8049662:	da0f      	bge.n	8049684 <fs_statvfs+0x64>
		LOG_ERR("mount point not found!!");
 8049664:	4914      	ldr	r1, [pc, #80]	; (80496b8 <fs_statvfs+0x98>)
 8049666:	680b      	ldr	r3, [r1, #0]
 8049668:	075a      	lsls	r2, r3, #29
 804966a:	d008      	beq.n	804967e <fs_statvfs+0x5e>
 804966c:	4b13      	ldr	r3, [pc, #76]	; (80496bc <fs_statvfs+0x9c>)
 804966e:	4815      	ldr	r0, [pc, #84]	; (80496c4 <fs_statvfs+0xa4>)
 8049670:	1ac9      	subs	r1, r1, r3
 8049672:	0889      	lsrs	r1, r1, #2
 8049674:	0189      	lsls	r1, r1, #6
 8049676:	f041 0101 	orr.w	r1, r1, #1
 804967a:	f00c fcb4 	bl	8055fe6 <log_0>
}
 804967e:	4620      	mov	r0, r4
 8049680:	b002      	add	sp, #8
 8049682:	bd70      	pop	{r4, r5, r6, pc}
	if (mp->fs->statvfs != NULL) {
 8049684:	9801      	ldr	r0, [sp, #4]
 8049686:	69c3      	ldr	r3, [r0, #28]
 8049688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804968a:	2b00      	cmp	r3, #0
 804968c:	d0f7      	beq.n	804967e <fs_statvfs+0x5e>
		rc = mp->fs->statvfs(mp, abs_path, stat);
 804968e:	4632      	mov	r2, r6
 8049690:	4629      	mov	r1, r5
 8049692:	4798      	blx	r3
		if (rc < 0) {
 8049694:	1e04      	subs	r4, r0, #0
 8049696:	daf2      	bge.n	804967e <fs_statvfs+0x5e>
			LOG_ERR("failed get file or dir stat (%d)", rc);
 8049698:	4a07      	ldr	r2, [pc, #28]	; (80496b8 <fs_statvfs+0x98>)
 804969a:	6813      	ldr	r3, [r2, #0]
 804969c:	075b      	lsls	r3, r3, #29
 804969e:	d0ee      	beq.n	804967e <fs_statvfs+0x5e>
 80496a0:	4b06      	ldr	r3, [pc, #24]	; (80496bc <fs_statvfs+0x9c>)
 80496a2:	4621      	mov	r1, r4
 80496a4:	4808      	ldr	r0, [pc, #32]	; (80496c8 <fs_statvfs+0xa8>)
 80496a6:	1ad2      	subs	r2, r2, r3
 80496a8:	0892      	lsrs	r2, r2, #2
 80496aa:	0192      	lsls	r2, r2, #6
 80496ac:	f042 0201 	orr.w	r2, r2, #1
 80496b0:	f00c fca8 	bl	8056004 <log_1>
 80496b4:	e7e3      	b.n	804967e <fs_statvfs+0x5e>
 80496b6:	bf00      	nop
 80496b8:	200208ec 	.word	0x200208ec
 80496bc:	200208c8 	.word	0x200208c8
 80496c0:	08061092 	.word	0x08061092
 80496c4:	080610a6 	.word	0x080610a6
 80496c8:	080611d1 	.word	0x080611d1

080496cc <fs_mount>:
{
 80496cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((mp == NULL) || (mp->mnt_point == NULL)) {
 80496d0:	4604      	mov	r4, r0
 80496d2:	b108      	cbz	r0, 80496d8 <fs_mount+0xc>
 80496d4:	68c0      	ldr	r0, [r0, #12]
 80496d6:	b998      	cbnz	r0, 8049700 <fs_mount+0x34>
		LOG_ERR("mount point not initialized!!");
 80496d8:	495b      	ldr	r1, [pc, #364]	; (8049848 <fs_mount+0x17c>)
 80496da:	680b      	ldr	r3, [r1, #0]
 80496dc:	075f      	lsls	r7, r3, #29
 80496de:	d105      	bne.n	80496ec <fs_mount+0x20>
		return -EINVAL;
 80496e0:	f06f 0515 	mvn.w	r5, #21
}
 80496e4:	4628      	mov	r0, r5
 80496e6:	b002      	add	sp, #8
 80496e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80496ec:	4b57      	ldr	r3, [pc, #348]	; (804984c <fs_mount+0x180>)
		LOG_ERR("mount point not initialized!!");
 80496ee:	4858      	ldr	r0, [pc, #352]	; (8049850 <fs_mount+0x184>)
 80496f0:	1ac9      	subs	r1, r1, r3
 80496f2:	0889      	lsrs	r1, r1, #2
 80496f4:	0189      	lsls	r1, r1, #6
 80496f6:	f041 0101 	orr.w	r1, r1, #1
 80496fa:	f00c fc74 	bl	8055fe6 <log_0>
 80496fe:	e7ef      	b.n	80496e0 <fs_mount+0x14>
	len = strlen(mp->mnt_point);
 8049700:	f7f7 f8aa 	bl	8040858 <strlen>
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
 8049704:	2801      	cmp	r0, #1
	len = strlen(mp->mnt_point);
 8049706:	4607      	mov	r7, r0
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
 8049708:	d903      	bls.n	8049712 <fs_mount+0x46>
 804970a:	68e3      	ldr	r3, [r4, #12]
 804970c:	781b      	ldrb	r3, [r3, #0]
 804970e:	2b2f      	cmp	r3, #47	; 0x2f
 8049710:	d00b      	beq.n	804972a <fs_mount+0x5e>
		LOG_ERR("invalid mount point!!");
 8049712:	494d      	ldr	r1, [pc, #308]	; (8049848 <fs_mount+0x17c>)
 8049714:	680b      	ldr	r3, [r1, #0]
 8049716:	075e      	lsls	r6, r3, #29
 8049718:	d0e2      	beq.n	80496e0 <fs_mount+0x14>
 804971a:	4b4c      	ldr	r3, [pc, #304]	; (804984c <fs_mount+0x180>)
 804971c:	484d      	ldr	r0, [pc, #308]	; (8049854 <fs_mount+0x188>)
 804971e:	1ac9      	subs	r1, r1, r3
 8049720:	0889      	lsrs	r1, r1, #2
 8049722:	0189      	lsls	r1, r1, #6
 8049724:	f041 0101 	orr.w	r1, r1, #1
 8049728:	e7e7      	b.n	80496fa <fs_mount+0x2e>
	return list->head == list;
 804972a:	4e4b      	ldr	r6, [pc, #300]	; (8049858 <fs_mount+0x18c>)
	k_mutex_lock(&mutex, K_FOREVER);
 804972c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8049730:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8049734:	f7ff fbb0 	bl	8048e98 <k_mutex_lock.constprop.0.isra.0>
 8049738:	6835      	ldr	r5, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 804973a:	42b5      	cmp	r5, r6
 804973c:	d11b      	bne.n	8049776 <fs_mount+0xaa>
	fs = fs_type_get(mp->type);
 804973e:	68a1      	ldr	r1, [r4, #8]
	struct registry_entry *ep = registry_find(type);
 8049740:	4608      	mov	r0, r1
 8049742:	9101      	str	r1, [sp, #4]
 8049744:	f7ff fb84 	bl	8048e50 <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
 8049748:	9901      	ldr	r1, [sp, #4]
 804974a:	2800      	cmp	r0, #0
 804974c:	d12f      	bne.n	80497ae <fs_mount+0xe2>
		LOG_ERR("requested file system type not registered!!");
 804974e:	493e      	ldr	r1, [pc, #248]	; (8049848 <fs_mount+0x17c>)
 8049750:	680b      	ldr	r3, [r1, #0]
 8049752:	075c      	lsls	r4, r3, #29
 8049754:	d008      	beq.n	8049768 <fs_mount+0x9c>
 8049756:	4b3d      	ldr	r3, [pc, #244]	; (804984c <fs_mount+0x180>)
 8049758:	4840      	ldr	r0, [pc, #256]	; (804985c <fs_mount+0x190>)
 804975a:	1ac9      	subs	r1, r1, r3
 804975c:	0889      	lsrs	r1, r1, #2
 804975e:	0189      	lsls	r1, r1, #6
 8049760:	f041 0101 	orr.w	r1, r1, #1
 8049764:	f00c fc3f 	bl	8055fe6 <log_0>
		rc = -ENOENT;
 8049768:	f06f 0501 	mvn.w	r5, #1
 804976c:	e061      	b.n	8049832 <fs_mount+0x166>
	return (node == list->tail) ? NULL : node->next;
 804976e:	6873      	ldr	r3, [r6, #4]
 8049770:	429d      	cmp	r5, r3
 8049772:	d0e4      	beq.n	804973e <fs_mount+0x72>
 8049774:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
 8049776:	2d00      	cmp	r5, #0
 8049778:	d0e1      	beq.n	804973e <fs_mount+0x72>
		if (len != itr->mountp_len) {
 804977a:	69ab      	ldr	r3, [r5, #24]
 804977c:	42bb      	cmp	r3, r7
 804977e:	d1f6      	bne.n	804976e <fs_mount+0xa2>
		if (strncmp(mp->mnt_point, itr->mnt_point, len) == 0) {
 8049780:	463a      	mov	r2, r7
 8049782:	68e9      	ldr	r1, [r5, #12]
 8049784:	68e0      	ldr	r0, [r4, #12]
 8049786:	f011 fca5 	bl	805b0d4 <strncmp>
 804978a:	2800      	cmp	r0, #0
 804978c:	d1ef      	bne.n	804976e <fs_mount+0xa2>
			LOG_ERR("mount point already exists!!");
 804978e:	492e      	ldr	r1, [pc, #184]	; (8049848 <fs_mount+0x17c>)
 8049790:	680b      	ldr	r3, [r1, #0]
 8049792:	075d      	lsls	r5, r3, #29
 8049794:	d008      	beq.n	80497a8 <fs_mount+0xdc>
 8049796:	4b2d      	ldr	r3, [pc, #180]	; (804984c <fs_mount+0x180>)
 8049798:	4831      	ldr	r0, [pc, #196]	; (8049860 <fs_mount+0x194>)
 804979a:	1ac9      	subs	r1, r1, r3
 804979c:	0889      	lsrs	r1, r1, #2
 804979e:	0189      	lsls	r1, r1, #6
 80497a0:	f041 0101 	orr.w	r1, r1, #1
 80497a4:	f00c fc1f 	bl	8055fe6 <log_0>
			rc = -EBUSY;
 80497a8:	f06f 050f 	mvn.w	r5, #15
 80497ac:	e041      	b.n	8049832 <fs_mount+0x166>
	return (ep != NULL) ? ep->fstp : NULL;
 80497ae:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (fs == NULL) {
 80497b2:	f1b8 0f00 	cmp.w	r8, #0
 80497b6:	d0ca      	beq.n	804974e <fs_mount+0x82>
	CHECKIF(fs->mount == NULL) {
 80497b8:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 80497bc:	b97b      	cbnz	r3, 80497de <fs_mount+0x112>
		LOG_ERR("fs type %d does not support mounting", mp->type);
 80497be:	4a22      	ldr	r2, [pc, #136]	; (8049848 <fs_mount+0x17c>)
 80497c0:	6813      	ldr	r3, [r2, #0]
 80497c2:	0758      	lsls	r0, r3, #29
 80497c4:	d008      	beq.n	80497d8 <fs_mount+0x10c>
 80497c6:	4b21      	ldr	r3, [pc, #132]	; (804984c <fs_mount+0x180>)
 80497c8:	4826      	ldr	r0, [pc, #152]	; (8049864 <fs_mount+0x198>)
 80497ca:	1ad2      	subs	r2, r2, r3
 80497cc:	0892      	lsrs	r2, r2, #2
 80497ce:	0192      	lsls	r2, r2, #6
 80497d0:	f042 0201 	orr.w	r2, r2, #1
 80497d4:	f00c fc16 	bl	8056004 <log_1>
		rc = -ENOTSUP;
 80497d8:	f06f 0585 	mvn.w	r5, #133	; 0x85
 80497dc:	e029      	b.n	8049832 <fs_mount+0x166>
	if (fs->unmount == NULL) {
 80497de:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 80497e2:	b993      	cbnz	r3, 804980a <fs_mount+0x13e>
		LOG_WRN("mount path %s is not unmountable",
 80497e4:	4b18      	ldr	r3, [pc, #96]	; (8049848 <fs_mount+0x17c>)
 80497e6:	681a      	ldr	r2, [r3, #0]
 80497e8:	f012 0f06 	tst.w	r2, #6
 80497ec:	d00d      	beq.n	804980a <fs_mount+0x13e>
 80497ee:	4d17      	ldr	r5, [pc, #92]	; (804984c <fs_mount+0x180>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
 80497f0:	68e0      	ldr	r0, [r4, #12]
 80497f2:	1b5d      	subs	r5, r3, r5
 80497f4:	f7fb fad2 	bl	8044d9c <z_log_strdup>
 80497f8:	4601      	mov	r1, r0
 80497fa:	481b      	ldr	r0, [pc, #108]	; (8049868 <fs_mount+0x19c>)
 80497fc:	08ad      	lsrs	r5, r5, #2
 80497fe:	01ad      	lsls	r5, r5, #6
 8049800:	f045 0502 	orr.w	r5, r5, #2
 8049804:	462a      	mov	r2, r5
 8049806:	f00c fbfd 	bl	8056004 <log_1>
	rc = fs->mount(mp);
 804980a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 804980e:	4620      	mov	r0, r4
 8049810:	4798      	blx	r3
	if (rc < 0) {
 8049812:	1e05      	subs	r5, r0, #0
 8049814:	da10      	bge.n	8049838 <fs_mount+0x16c>
		LOG_ERR("fs mount error (%d)", rc);
 8049816:	4a0c      	ldr	r2, [pc, #48]	; (8049848 <fs_mount+0x17c>)
 8049818:	6813      	ldr	r3, [r2, #0]
 804981a:	075b      	lsls	r3, r3, #29
 804981c:	d009      	beq.n	8049832 <fs_mount+0x166>
 804981e:	4b0b      	ldr	r3, [pc, #44]	; (804984c <fs_mount+0x180>)
 8049820:	4629      	mov	r1, r5
 8049822:	4812      	ldr	r0, [pc, #72]	; (804986c <fs_mount+0x1a0>)
 8049824:	1ad2      	subs	r2, r2, r3
 8049826:	0892      	lsrs	r2, r2, #2
 8049828:	0192      	lsls	r2, r2, #6
 804982a:	f042 0201 	orr.w	r2, r2, #1
 804982e:	f00c fbe9 	bl	8056004 <log_1>
	k_mutex_unlock(&mutex);
 8049832:	f7ff fb39 	bl	8048ea8 <k_mutex_unlock.constprop.0.isra.0>
	return rc;
 8049836:	e755      	b.n	80496e4 <fs_mount+0x18>
	sys_dnode_t *const tail = list->tail;
 8049838:	6873      	ldr	r3, [r6, #4]
	mp->fs = fs;
 804983a:	e9c4 7806 	strd	r7, r8, [r4, #24]
	node->prev = tail;
 804983e:	e9c4 6300 	strd	r6, r3, [r4]
	tail->next = node;
 8049842:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8049844:	6074      	str	r4, [r6, #4]
}
 8049846:	e7f4      	b.n	8049832 <fs_mount+0x166>
 8049848:	200208ec 	.word	0x200208ec
 804984c:	200208c8 	.word	0x200208c8
 8049850:	080611f2 	.word	0x080611f2
 8049854:	08061210 	.word	0x08061210
 8049858:	20037664 	.word	0x20037664
 804985c:	08061243 	.word	0x08061243
 8049860:	08061226 	.word	0x08061226
 8049864:	0806126f 	.word	0x0806126f
 8049868:	08061294 	.word	0x08061294
 804986c:	080612b5 	.word	0x080612b5

08049870 <fs_register>:
{
 8049870:	b538      	push	{r3, r4, r5, lr}
 8049872:	4604      	mov	r4, r0
 8049874:	460d      	mov	r5, r1
	k_mutex_lock(&mutex, K_FOREVER);
 8049876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 804987a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 804987e:	f7ff fb0b 	bl	8048e98 <k_mutex_lock.constprop.0.isra.0>
	struct registry_entry *ep = registry_find(type);
 8049882:	4620      	mov	r0, r4
 8049884:	f7ff fae4 	bl	8048e50 <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
 8049888:	b108      	cbz	r0, 804988e <fs_register+0x1e>
	if (fs_type_get(type) != NULL) {
 804988a:	6843      	ldr	r3, [r0, #4]
 804988c:	b97b      	cbnz	r3, 80498ae <fs_register+0x3e>
		if (ep->fstp == NULL) {
 804988e:	4b0b      	ldr	r3, [pc, #44]	; (80498bc <fs_register+0x4c>)
 8049890:	685a      	ldr	r2, [r3, #4]
 8049892:	b112      	cbz	r2, 804989a <fs_register+0x2a>
 8049894:	68da      	ldr	r2, [r3, #12]
 8049896:	b96a      	cbnz	r2, 80498b4 <fs_register+0x44>
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
 8049898:	2201      	movs	r2, #1
			ep->type = type;
 804989a:	f843 4032 	str.w	r4, [r3, r2, lsl #3]
			ep->fstp = fstp;
 804989e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
			rv = 0;
 80498a2:	2400      	movs	r4, #0
			ep->fstp = fstp;
 80498a4:	605d      	str	r5, [r3, #4]
	k_mutex_unlock(&mutex);
 80498a6:	f7ff faff 	bl	8048ea8 <k_mutex_unlock.constprop.0.isra.0>
}
 80498aa:	4620      	mov	r0, r4
 80498ac:	bd38      	pop	{r3, r4, r5, pc}
		rc = -EALREADY;
 80498ae:	f06f 0477 	mvn.w	r4, #119	; 0x77
 80498b2:	e7f8      	b.n	80498a6 <fs_register+0x36>
	int rv = -ENOSPC;
 80498b4:	f06f 041b 	mvn.w	r4, #27
 80498b8:	e7f5      	b.n	80498a6 <fs_register+0x36>
 80498ba:	bf00      	nop
 80498bc:	20037680 	.word	0x20037680

080498c0 <translate_error>:
K_MEM_SLAB_DEFINE(fatfs_filep_pool, sizeof(FIL),
			CONFIG_FS_FATFS_NUM_FILES, 4);

static int translate_error(int error)
{
	switch (error) {
 80498c0:	2813      	cmp	r0, #19
 80498c2:	bf9a      	itte	ls
 80498c4:	4b02      	ldrls	r3, [pc, #8]	; (80498d0 <translate_error+0x10>)
 80498c6:	5618      	ldrsbls	r0, [r3, r0]
{
 80498c8:	f06f 0004 	mvnhi.w	r0, #4
	case FR_NOT_READY:
		return -EIO;
	}

	return -EIO;
}
 80498cc:	4770      	bx	lr
 80498ce:	bf00      	nop
 80498d0:	080612c9 	.word	0x080612c9

080498d4 <fatfs_init>:

static int fatfs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return fs_register(FS_FATFS, &fatfs_fs);
 80498d4:	4901      	ldr	r1, [pc, #4]	; (80498dc <fatfs_init+0x8>)
 80498d6:	2000      	movs	r0, #0
 80498d8:	f7ff bfca 	b.w	8049870 <fs_register>
 80498dc:	0805d2dc 	.word	0x0805d2dc

080498e0 <fatfs_mount>:
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
 80498e0:	68c1      	ldr	r1, [r0, #12]
 80498e2:	2201      	movs	r2, #1
{
 80498e4:	b530      	push	{r4, r5, lr}
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
 80498e6:	4411      	add	r1, r2
{
 80498e8:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 80498ec:	4604      	mov	r4, r0
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
 80498ee:	6900      	ldr	r0, [r0, #16]
 80498f0:	f005 fbcc 	bl	804f08c <f_mount>
	if (res == FR_NO_FILESYSTEM &&
 80498f4:	280d      	cmp	r0, #13
 80498f6:	d119      	bne.n	804992c <fatfs_mount+0x4c>
	    (mountp->flags & FS_MOUNT_FLAG_READ_ONLY) != 0) {
 80498f8:	f894 3020 	ldrb.w	r3, [r4, #32]
	if (res == FR_NO_FILESYSTEM &&
 80498fc:	079a      	lsls	r2, r3, #30
 80498fe:	d41b      	bmi.n	8049938 <fatfs_mount+0x58>
	if (res == FR_NO_FILESYSTEM &&
 8049900:	07db      	lsls	r3, r3, #31
 8049902:	d413      	bmi.n	804992c <fatfs_mount+0x4c>
		MKFS_PARM mkfs_opt = {
 8049904:	4b0f      	ldr	r3, [pc, #60]	; (8049944 <fatfs_mount+0x64>)
 8049906:	466d      	mov	r5, sp
 8049908:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 804990a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		res = f_mkfs(&mountp->mnt_point[1], &mkfs_opt, work, sizeof(work));
 804990e:	68e0      	ldr	r0, [r4, #12]
 8049910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8049914:	aa04      	add	r2, sp, #16
 8049916:	4629      	mov	r1, r5
 8049918:	3001      	adds	r0, #1
 804991a:	f005 fbdb 	bl	804f0d4 <f_mkfs>
		if (res == FR_OK) {
 804991e:	b928      	cbnz	r0, 804992c <fatfs_mount+0x4c>
					&mountp->mnt_point[1], 1);
 8049920:	68e1      	ldr	r1, [r4, #12]
			res = f_mount((FATFS *)mountp->fs_data,
 8049922:	2201      	movs	r2, #1
 8049924:	6920      	ldr	r0, [r4, #16]
 8049926:	4411      	add	r1, r2
 8049928:	f005 fbb0 	bl	804f08c <f_mount>
}
 804992c:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 8049930:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return translate_error(res);
 8049934:	f7ff bfc4 	b.w	80498c0 <translate_error>
}
 8049938:	f06f 001d 	mvn.w	r0, #29
 804993c:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 8049940:	bd30      	pop	{r4, r5, pc}
 8049942:	bf00      	nop
 8049944:	0805c418 	.word	0x0805c418

08049948 <fatfs_closedir>:
{
 8049948:	b538      	push	{r3, r4, r5, lr}
 804994a:	4604      	mov	r4, r0
	res = f_closedir(zdp->dirp);
 804994c:	6800      	ldr	r0, [r0, #0]
 804994e:	f00f ffd2 	bl	80598f6 <f_closedir>
 8049952:	4605      	mov	r5, r0
	k_mem_slab_free(&fatfs_dirp_pool, &zdp->dirp);
 8049954:	4621      	mov	r1, r4
 8049956:	4804      	ldr	r0, [pc, #16]	; (8049968 <fatfs_closedir+0x20>)
 8049958:	f010 fcac 	bl	805a2b4 <k_mem_slab_free>
	return translate_error(res);
 804995c:	4628      	mov	r0, r5
}
 804995e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return translate_error(res);
 8049962:	f7ff bfad 	b.w	80498c0 <translate_error>
 8049966:	bf00      	nop
 8049968:	20020950 	.word	0x20020950

0804996c <fatfs_close>:
{
 804996c:	b538      	push	{r3, r4, r5, lr}
 804996e:	4604      	mov	r4, r0
	res = f_close(zfp->filep);
 8049970:	6800      	ldr	r0, [r0, #0]
 8049972:	f00f fefc 	bl	805976e <f_close>
 8049976:	4605      	mov	r5, r0
	k_mem_slab_free(&fatfs_filep_pool, &zfp->filep);
 8049978:	4621      	mov	r1, r4
 804997a:	4805      	ldr	r0, [pc, #20]	; (8049990 <fatfs_close+0x24>)
 804997c:	f010 fc9a 	bl	805a2b4 <k_mem_slab_free>
	zfp->filep = NULL;
 8049980:	2300      	movs	r3, #0
	return translate_error(res);
 8049982:	4628      	mov	r0, r5
	zfp->filep = NULL;
 8049984:	6023      	str	r3, [r4, #0]
}
 8049986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return translate_error(res);
 804998a:	f7ff bf99 	b.w	80498c0 <translate_error>
 804998e:	bf00      	nop
 8049990:	20020970 	.word	0x20020970

08049994 <fatfs_opendir>:
{
 8049994:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (k_mem_slab_alloc(&fatfs_dirp_pool, &ptr, K_NO_WAIT) == 0) {
 8049996:	2200      	movs	r2, #0
{
 8049998:	4606      	mov	r6, r0
 804999a:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&fatfs_dirp_pool, &ptr, K_NO_WAIT) == 0) {
 804999c:	2300      	movs	r3, #0
 804999e:	a901      	add	r1, sp, #4
 80499a0:	480f      	ldr	r0, [pc, #60]	; (80499e0 <fatfs_opendir+0x4c>)
 80499a2:	f007 fda1 	bl	80514e8 <k_mem_slab_alloc>
 80499a6:	4604      	mov	r4, r0
 80499a8:	b9b0      	cbnz	r0, 80499d8 <fatfs_opendir+0x44>
__ssp_bos_icheck3(memset, void *, int)
 80499aa:	4601      	mov	r1, r0
 80499ac:	2230      	movs	r2, #48	; 0x30
 80499ae:	9801      	ldr	r0, [sp, #4]
 80499b0:	f011 fa4c 	bl	805ae4c <memset>
		zdp->dirp = ptr;
 80499b4:	9801      	ldr	r0, [sp, #4]
	res = f_opendir(zdp->dirp, &path[1]);
 80499b6:	1c69      	adds	r1, r5, #1
		zdp->dirp = ptr;
 80499b8:	6030      	str	r0, [r6, #0]
	res = f_opendir(zdp->dirp, &path[1]);
 80499ba:	f00f ff68 	bl	805988e <f_opendir>
	if (res != FR_OK) {
 80499be:	4605      	mov	r5, r0
 80499c0:	b120      	cbz	r0, 80499cc <fatfs_opendir+0x38>
		k_mem_slab_free(&fatfs_dirp_pool, &ptr);
 80499c2:	a901      	add	r1, sp, #4
 80499c4:	4806      	ldr	r0, [pc, #24]	; (80499e0 <fatfs_opendir+0x4c>)
 80499c6:	f010 fc75 	bl	805a2b4 <k_mem_slab_free>
		zdp->dirp = NULL;
 80499ca:	6034      	str	r4, [r6, #0]
	return translate_error(res);
 80499cc:	4628      	mov	r0, r5
}
 80499ce:	b002      	add	sp, #8
 80499d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return translate_error(res);
 80499d4:	f7ff bf74 	b.w	80498c0 <translate_error>
}
 80499d8:	f06f 000b 	mvn.w	r0, #11
 80499dc:	b002      	add	sp, #8
 80499de:	bd70      	pop	{r4, r5, r6, pc}
 80499e0:	20020950 	.word	0x20020950

080499e4 <fatfs_open>:
{
 80499e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
 80499e6:	2300      	movs	r3, #0
{
 80499e8:	4606      	mov	r6, r0
 80499ea:	460d      	mov	r5, r1
 80499ec:	4617      	mov	r7, r2
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
 80499ee:	a901      	add	r1, sp, #4
 80499f0:	2200      	movs	r2, #0
 80499f2:	4811      	ldr	r0, [pc, #68]	; (8049a38 <fatfs_open+0x54>)
 80499f4:	f007 fd78 	bl	80514e8 <k_mem_slab_alloc>
 80499f8:	4604      	mov	r4, r0
 80499fa:	b9c0      	cbnz	r0, 8049a2e <fatfs_open+0x4a>
 80499fc:	4601      	mov	r1, r0
 80499fe:	2228      	movs	r2, #40	; 0x28
 8049a00:	9801      	ldr	r0, [sp, #4]
 8049a02:	f011 fa23 	bl	805ae4c <memset>
		zfp->filep = ptr;
 8049a06:	9801      	ldr	r0, [sp, #4]
	res = f_open(zfp->filep, &file_name[1], fs_mode);
 8049a08:	1c69      	adds	r1, r5, #1
 8049a0a:	f007 0213 	and.w	r2, r7, #19
		zfp->filep = ptr;
 8049a0e:	6030      	str	r0, [r6, #0]
	res = f_open(zfp->filep, &file_name[1], fs_mode);
 8049a10:	f00f fc52 	bl	80592b8 <f_open>
	if (res != FR_OK) {
 8049a14:	4605      	mov	r5, r0
 8049a16:	b120      	cbz	r0, 8049a22 <fatfs_open+0x3e>
		k_mem_slab_free(&fatfs_filep_pool, &ptr);
 8049a18:	a901      	add	r1, sp, #4
 8049a1a:	4807      	ldr	r0, [pc, #28]	; (8049a38 <fatfs_open+0x54>)
 8049a1c:	f010 fc4a 	bl	805a2b4 <k_mem_slab_free>
		zfp->filep = NULL;
 8049a20:	6034      	str	r4, [r6, #0]
	return translate_error(res);
 8049a22:	4628      	mov	r0, r5
}
 8049a24:	b003      	add	sp, #12
 8049a26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return translate_error(res);
 8049a2a:	f7ff bf49 	b.w	80498c0 <translate_error>
}
 8049a2e:	f06f 000b 	mvn.w	r0, #11
 8049a32:	b003      	add	sp, #12
 8049a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8049a36:	bf00      	nop
 8049a38:	20020970 	.word	0x20020970

08049a3c <cmd_pwd>:

	return 0;
}

static int cmd_pwd(const struct shell *shell, size_t argc, char **argv)
{
 8049a3c:	b508      	push	{r3, lr}
	shell_print(shell, "%s", cwd);
 8049a3e:	4a03      	ldr	r2, [pc, #12]	; (8049a4c <cmd_pwd+0x10>)
 8049a40:	2100      	movs	r1, #0
 8049a42:	4b03      	ldr	r3, [pc, #12]	; (8049a50 <cmd_pwd+0x14>)
 8049a44:	f00c ff3b 	bl	80568be <shell_fprintf>

	return 0;
}
 8049a48:	2000      	movs	r0, #0
 8049a4a:	bd08      	pop	{r3, pc}
 8049a4c:	08060190 	.word	0x08060190
 8049a50:	20020768 	.word	0x20020768

08049a54 <cmd_mount_fat>:
}
#endif

#if defined(CONFIG_FAT_FILESYSTEM_ELM)
static int cmd_mount_fat(const struct shell *shell, size_t argc, char **argv)
{
 8049a54:	b573      	push	{r0, r1, r4, r5, r6, lr}
	char *mntpt;
	int res;

	mntpt = mntpt_prepare(argv[1]);
 8049a56:	6851      	ldr	r1, [r2, #4]
{
 8049a58:	4605      	mov	r5, r0
	cpy_mntpt = k_malloc(strlen(mntpt) + 1);
 8049a5a:	4608      	mov	r0, r1
 8049a5c:	9101      	str	r1, [sp, #4]
 8049a5e:	f7f6 fefb 	bl	8040858 <strlen>
 8049a62:	3001      	adds	r0, #1
 8049a64:	f011 f83a 	bl	805aadc <k_malloc>
	if (cpy_mntpt) {
 8049a68:	4604      	mov	r4, r0
 8049a6a:	b1d8      	cbz	r0, 8049aa4 <cmd_mount_fat+0x50>
		shell_error(shell,
			    "Failed to allocate  buffer for mount point");
		return -ENOEXEC;
	}

	fatfs_mnt.mnt_point = (const char *)mntpt;
 8049a6c:	4e10      	ldr	r6, [pc, #64]	; (8049ab0 <cmd_mount_fat+0x5c>)
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
 8049a6e:	9901      	ldr	r1, [sp, #4]
 8049a70:	f011 fb28 	bl	805b0c4 <strcpy>
	res = fs_mount(&fatfs_mnt);
 8049a74:	4630      	mov	r0, r6
	fatfs_mnt.mnt_point = (const char *)mntpt;
 8049a76:	60f4      	str	r4, [r6, #12]
	res = fs_mount(&fatfs_mnt);
 8049a78:	f7ff fe28 	bl	80496cc <fs_mount>
	if (res != 0) {
 8049a7c:	4604      	mov	r4, r0
 8049a7e:	b140      	cbz	r0, 8049a92 <cmd_mount_fat+0x3e>
		shell_error(shell,
 8049a80:	4603      	mov	r3, r0
 8049a82:	4a0c      	ldr	r2, [pc, #48]	; (8049ab4 <cmd_mount_fat+0x60>)
 8049a84:	2102      	movs	r1, #2
 8049a86:	4628      	mov	r0, r5
 8049a88:	f00c ff19 	bl	80568be <shell_fprintf>
		return -ENOEXEC;
 8049a8c:	f06f 0407 	mvn.w	r4, #7
 8049a90:	e005      	b.n	8049a9e <cmd_mount_fat+0x4a>
			"Error mounting fat fs.Error Code [%d]", res);
		return -ENOEXEC;
	}

	shell_print(shell, "Successfully mounted fat fs:%s",
 8049a92:	4601      	mov	r1, r0
 8049a94:	68f3      	ldr	r3, [r6, #12]
 8049a96:	4a08      	ldr	r2, [pc, #32]	; (8049ab8 <cmd_mount_fat+0x64>)
 8049a98:	4628      	mov	r0, r5
 8049a9a:	f00c ff10 	bl	80568be <shell_fprintf>
			fatfs_mnt.mnt_point);

	return 0;
}
 8049a9e:	4620      	mov	r0, r4
 8049aa0:	b002      	add	sp, #8
 8049aa2:	bd70      	pop	{r4, r5, r6, pc}
		shell_error(shell,
 8049aa4:	4a05      	ldr	r2, [pc, #20]	; (8049abc <cmd_mount_fat+0x68>)
 8049aa6:	2102      	movs	r1, #2
 8049aa8:	4628      	mov	r0, r5
 8049aaa:	f00c ff08 	bl	80568be <shell_fprintf>
 8049aae:	e7ed      	b.n	8049a8c <cmd_mount_fat+0x38>
 8049ab0:	20020140 	.word	0x20020140
 8049ab4:	080612dd 	.word	0x080612dd
 8049ab8:	08061304 	.word	0x08061304
 8049abc:	08061324 	.word	0x08061324

08049ac0 <create_abs_path.constprop.0>:
static void create_abs_path(const char *name, char *path, size_t len)
 8049ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (name[0] == '/') {
 8049ac2:	7803      	ldrb	r3, [r0, #0]
static void create_abs_path(const char *name, char *path, size_t len)
 8049ac4:	4606      	mov	r6, r0
 8049ac6:	460c      	mov	r4, r1
	if (name[0] == '/') {
 8049ac8:	2b2f      	cmp	r3, #47	; 0x2f
 8049aca:	d108      	bne.n	8049ade <create_abs_path.constprop.0+0x1e>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 8049acc:	4601      	mov	r1, r0
 8049ace:	2280      	movs	r2, #128	; 0x80
 8049ad0:	4620      	mov	r0, r4
 8049ad2:	f011 fb13 	bl	805b0fc <strncpy>
		path[len - 1] = '\0';
 8049ad6:	2300      	movs	r3, #0
 8049ad8:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
}
 8049adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cwd[1] == '\0') {
 8049ade:	4914      	ldr	r1, [pc, #80]	; (8049b30 <create_abs_path.constprop.0+0x70>)
 8049ae0:	784d      	ldrb	r5, [r1, #1]
 8049ae2:	b955      	cbnz	r5, 8049afa <create_abs_path.constprop.0+0x3a>
			*path++ = '/';
 8049ae4:	4620      	mov	r0, r4
 8049ae6:	232f      	movs	r3, #47	; 0x2f
 8049ae8:	227f      	movs	r2, #127	; 0x7f
 8049aea:	4631      	mov	r1, r6
 8049aec:	f800 3b01 	strb.w	r3, [r0], #1
 8049af0:	f011 fb04 	bl	805b0fc <strncpy>
			path[len - 1] = '\0';
 8049af4:	f884 507f 	strb.w	r5, [r4, #127]	; 0x7f
 8049af8:	e7f0      	b.n	8049adc <create_abs_path.constprop.0+0x1c>
			path[len - 1] = '\0';
 8049afa:	2700      	movs	r7, #0
 8049afc:	2280      	movs	r2, #128	; 0x80
 8049afe:	4620      	mov	r0, r4
 8049b00:	f011 fafc 	bl	805b0fc <strncpy>
			size_t plen = strlen(path);
 8049b04:	4620      	mov	r0, r4
			path[len - 1] = '\0';
 8049b06:	f884 707f 	strb.w	r7, [r4, #127]	; 0x7f
			size_t plen = strlen(path);
 8049b0a:	f7f6 fea5 	bl	8040858 <strlen>
			if (plen < len) {
 8049b0e:	287f      	cmp	r0, #127	; 0x7f
			size_t plen = strlen(path);
 8049b10:	4605      	mov	r5, r0
			if (plen < len) {
 8049b12:	d8e3      	bhi.n	8049adc <create_abs_path.constprop.0+0x1c>
				path += plen;
 8049b14:	1823      	adds	r3, r4, r0
				*path++ = '/';
 8049b16:	222f      	movs	r2, #47	; 0x2f
				path[len - 1] = '\0';
 8049b18:	f1c5 057e 	rsb	r5, r5, #126	; 0x7e
 8049b1c:	4631      	mov	r1, r6
				*path++ = '/';
 8049b1e:	3301      	adds	r3, #1
 8049b20:	5422      	strb	r2, [r4, r0]
 8049b22:	f1c0 027f 	rsb	r2, r0, #127	; 0x7f
 8049b26:	4618      	mov	r0, r3
 8049b28:	f011 fae8 	bl	805b0fc <strncpy>
				path[len - 1] = '\0';
 8049b2c:	5547      	strb	r7, [r0, r5]
}
 8049b2e:	e7d5      	b.n	8049adc <create_abs_path.constprop.0+0x1c>
 8049b30:	20020768 	.word	0x20020768

08049b34 <cmd_cd>:
	if (argc < 2) {
 8049b34:	2901      	cmp	r1, #1
{
 8049b36:	b570      	push	{r4, r5, r6, lr}
 8049b38:	4605      	mov	r5, r0
 8049b3a:	b0e2      	sub	sp, #392	; 0x188
 8049b3c:	4616      	mov	r6, r2
	if (argc < 2) {
 8049b3e:	d807      	bhi.n	8049b50 <cmd_cd+0x1c>
		return 0;
 8049b40:	2400      	movs	r4, #0
		strcpy(cwd, "/");
 8049b42:	491d      	ldr	r1, [pc, #116]	; (8049bb8 <cmd_cd+0x84>)
 8049b44:	481d      	ldr	r0, [pc, #116]	; (8049bbc <cmd_cd+0x88>)
 8049b46:	f011 fabd 	bl	805b0c4 <strcpy>
}
 8049b4a:	4620      	mov	r0, r4
 8049b4c:	b062      	add	sp, #392	; 0x188
 8049b4e:	bd70      	pop	{r4, r5, r6, pc}
	if (strcmp(argv[1], "..") == 0) {
 8049b50:	491b      	ldr	r1, [pc, #108]	; (8049bc0 <cmd_cd+0x8c>)
 8049b52:	6850      	ldr	r0, [r2, #4]
 8049b54:	f7f6 fe76 	bl	8040844 <strcmp>
 8049b58:	4604      	mov	r4, r0
 8049b5a:	b950      	cbnz	r0, 8049b72 <cmd_cd+0x3e>
		char *prev = strrchr(cwd, '/');
 8049b5c:	4d17      	ldr	r5, [pc, #92]	; (8049bbc <cmd_cd+0x88>)
 8049b5e:	212f      	movs	r1, #47	; 0x2f
 8049b60:	4628      	mov	r0, r5
 8049b62:	f011 faea 	bl	805b13a <strrchr>
		if (!prev || prev == cwd) {
 8049b66:	2800      	cmp	r0, #0
 8049b68:	d0ea      	beq.n	8049b40 <cmd_cd+0xc>
 8049b6a:	42a8      	cmp	r0, r5
 8049b6c:	d0e8      	beq.n	8049b40 <cmd_cd+0xc>
			*prev = '\0';
 8049b6e:	7004      	strb	r4, [r0, #0]
 8049b70:	e7eb      	b.n	8049b4a <cmd_cd+0x16>
	create_abs_path(argv[1], path, sizeof(path));
 8049b72:	4669      	mov	r1, sp
 8049b74:	6870      	ldr	r0, [r6, #4]
 8049b76:	f7ff ffa3 	bl	8049ac0 <create_abs_path.constprop.0>
	err = fs_stat(path, &entry);
 8049b7a:	a920      	add	r1, sp, #128	; 0x80
 8049b7c:	4668      	mov	r0, sp
 8049b7e:	f7ff fcf5 	bl	804956c <fs_stat>
	if (err) {
 8049b82:	4604      	mov	r4, r0
 8049b84:	b140      	cbz	r0, 8049b98 <cmd_cd+0x64>
		shell_error(shell, "%s doesn't exist", path);
 8049b86:	466b      	mov	r3, sp
 8049b88:	4a0e      	ldr	r2, [pc, #56]	; (8049bc4 <cmd_cd+0x90>)
		shell_error(shell, "%s is not a directory", path);
 8049b8a:	2102      	movs	r1, #2
 8049b8c:	4628      	mov	r0, r5
		return -ENOEXEC;
 8049b8e:	f06f 0407 	mvn.w	r4, #7
		shell_error(shell, "%s is not a directory", path);
 8049b92:	f00c fe94 	bl	80568be <shell_fprintf>
		return -ENOEXEC;
 8049b96:	e7d8      	b.n	8049b4a <cmd_cd+0x16>
	if (entry.type != FS_DIR_ENTRY_DIR) {
 8049b98:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 8049b9c:	2b01      	cmp	r3, #1
 8049b9e:	d002      	beq.n	8049ba6 <cmd_cd+0x72>
		shell_error(shell, "%s is not a directory", path);
 8049ba0:	466b      	mov	r3, sp
 8049ba2:	4a09      	ldr	r2, [pc, #36]	; (8049bc8 <cmd_cd+0x94>)
 8049ba4:	e7f1      	b.n	8049b8a <cmd_cd+0x56>
	strncpy(cwd, path, sizeof(cwd));
 8049ba6:	4b05      	ldr	r3, [pc, #20]	; (8049bbc <cmd_cd+0x88>)
 8049ba8:	227f      	movs	r2, #127	; 0x7f
 8049baa:	4669      	mov	r1, sp
 8049bac:	4618      	mov	r0, r3
 8049bae:	f011 faa5 	bl	805b0fc <strncpy>
	cwd[sizeof(cwd) - 1] = '\0';
 8049bb2:	f880 407f 	strb.w	r4, [r0, #127]	; 0x7f
	return 0;
 8049bb6:	e7c8      	b.n	8049b4a <cmd_cd+0x16>
 8049bb8:	08061142 	.word	0x08061142
 8049bbc:	20020768 	.word	0x20020768
 8049bc0:	0806115e 	.word	0x0806115e
 8049bc4:	08061350 	.word	0x08061350
 8049bc8:	08061362 	.word	0x08061362

08049bcc <cmd_ls>:
	if (argc < 2) {
 8049bcc:	2901      	cmp	r1, #1
{
 8049bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8049bd2:	4605      	mov	r5, r0
 8049bd4:	b0e6      	sub	sp, #408	; 0x198
	if (argc < 2) {
 8049bd6:	d823      	bhi.n	8049c20 <cmd_ls+0x54>
		strncpy(path, cwd, sizeof(path));
 8049bd8:	227f      	movs	r2, #127	; 0x7f
 8049bda:	4923      	ldr	r1, [pc, #140]	; (8049c68 <cmd_ls+0x9c>)
 8049bdc:	a804      	add	r0, sp, #16
 8049bde:	f011 fa8d 	bl	805b0fc <strncpy>
		path[sizeof(path) - 1] = '\0';
 8049be2:	2300      	movs	r3, #0
 8049be4:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 * @param zdp Pointer to file object
 *
 */
static inline void fs_dir_t_init(struct fs_dir_t *zdp)
{
	*zdp = (struct fs_dir_t){ 0 };
 8049be8:	2300      	movs	r3, #0
	err = fs_opendir(&dir, path);
 8049bea:	a904      	add	r1, sp, #16
 8049bec:	a802      	add	r0, sp, #8
 8049bee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8049bf2:	f7ff fad1 	bl	8049198 <fs_opendir>
	if (err) {
 8049bf6:	4604      	mov	r4, r0
 8049bf8:	b9b8      	cbnz	r0, 8049c2a <cmd_ls+0x5e>
		shell_print(shell, "%s%s", entry.name,
 8049bfa:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8049c7c <cmd_ls+0xb0>
 8049bfe:	4f1b      	ldr	r7, [pc, #108]	; (8049c6c <cmd_ls+0xa0>)
 8049c00:	4e1b      	ldr	r6, [pc, #108]	; (8049c70 <cmd_ls+0xa4>)
		err = fs_readdir(&dir, &entry);
 8049c02:	a924      	add	r1, sp, #144	; 0x90
 8049c04:	a802      	add	r0, sp, #8
 8049c06:	f7ff fb47 	bl	8049298 <fs_readdir>
		if (err) {
 8049c0a:	4601      	mov	r1, r0
 8049c0c:	b1d0      	cbz	r0, 8049c44 <cmd_ls+0x78>
			shell_error(shell, "Unable to read directory");
 8049c0e:	4a19      	ldr	r2, [pc, #100]	; (8049c74 <cmd_ls+0xa8>)
 8049c10:	2102      	movs	r1, #2
 8049c12:	4628      	mov	r0, r5
 8049c14:	f00c fe53 	bl	80568be <shell_fprintf>
	fs_closedir(&dir);
 8049c18:	a802      	add	r0, sp, #8
 8049c1a:	f7ff fbc5 	bl	80493a8 <fs_closedir>
	return 0;
 8049c1e:	e00d      	b.n	8049c3c <cmd_ls+0x70>
		create_abs_path(argv[1], path, sizeof(path));
 8049c20:	a904      	add	r1, sp, #16
 8049c22:	6850      	ldr	r0, [r2, #4]
 8049c24:	f7ff ff4c 	bl	8049ac0 <create_abs_path.constprop.0>
 8049c28:	e7de      	b.n	8049be8 <cmd_ls+0x1c>
		return -ENOEXEC;
 8049c2a:	f06f 0407 	mvn.w	r4, #7
		shell_error(shell, "Unable to open %s (err %d)", path, err);
 8049c2e:	9000      	str	r0, [sp, #0]
 8049c30:	ab04      	add	r3, sp, #16
 8049c32:	4a11      	ldr	r2, [pc, #68]	; (8049c78 <cmd_ls+0xac>)
 8049c34:	2102      	movs	r1, #2
 8049c36:	4628      	mov	r0, r5
 8049c38:	f00c fe41 	bl	80568be <shell_fprintf>
}
 8049c3c:	4620      	mov	r0, r4
 8049c3e:	b066      	add	sp, #408	; 0x198
 8049c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (entry.name[0] == '\0') {
 8049c44:	f89d 3091 	ldrb.w	r3, [sp, #145]	; 0x91
 8049c48:	2b00      	cmp	r3, #0
 8049c4a:	d0e5      	beq.n	8049c18 <cmd_ls+0x4c>
		shell_print(shell, "%s%s", entry.name,
 8049c4c:	f89d 2090 	ldrb.w	r2, [sp, #144]	; 0x90
 8049c50:	4628      	mov	r0, r5
 8049c52:	2a01      	cmp	r2, #1
 8049c54:	bf0c      	ite	eq
 8049c56:	4643      	moveq	r3, r8
 8049c58:	463b      	movne	r3, r7
 8049c5a:	4632      	mov	r2, r6
 8049c5c:	9300      	str	r3, [sp, #0]
 8049c5e:	f10d 0391 	add.w	r3, sp, #145	; 0x91
 8049c62:	f00c fe2c 	bl	80568be <shell_fprintf>
	while (1) {
 8049c66:	e7cc      	b.n	8049c02 <cmd_ls+0x36>
 8049c68:	20020768 	.word	0x20020768
 8049c6c:	08060045 	.word	0x08060045
 8049c70:	0806071a 	.word	0x0806071a
 8049c74:	08061395 	.word	0x08061395
 8049c78:	08061379 	.word	0x08061379
 8049c7c:	08061142 	.word	0x08061142

08049c80 <cmd_mkdir>:
{
 8049c80:	b510      	push	{r4, lr}
 8049c82:	b0a0      	sub	sp, #128	; 0x80
 8049c84:	4604      	mov	r4, r0
	create_abs_path(argv[1], path, sizeof(path));
 8049c86:	6850      	ldr	r0, [r2, #4]
 8049c88:	4669      	mov	r1, sp
 8049c8a:	f7ff ff19 	bl	8049ac0 <create_abs_path.constprop.0>
	err = fs_mkdir(path);
 8049c8e:	4668      	mov	r0, sp
 8049c90:	f7ff fbb4 	bl	80493fc <fs_mkdir>
	if (err) {
 8049c94:	b138      	cbz	r0, 8049ca6 <cmd_mkdir+0x26>
		shell_error(shell, "Error creating dir[%d]", err);
 8049c96:	4603      	mov	r3, r0
 8049c98:	4a04      	ldr	r2, [pc, #16]	; (8049cac <cmd_mkdir+0x2c>)
 8049c9a:	4620      	mov	r0, r4
 8049c9c:	2102      	movs	r1, #2
 8049c9e:	f00c fe0e 	bl	80568be <shell_fprintf>
		err = -ENOEXEC;
 8049ca2:	f06f 0007 	mvn.w	r0, #7
}
 8049ca6:	b020      	add	sp, #128	; 0x80
 8049ca8:	bd10      	pop	{r4, pc}
 8049caa:	bf00      	nop
 8049cac:	080613af 	.word	0x080613af

08049cb0 <cmd_read>:
{
 8049cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049cb4:	b0ef      	sub	sp, #444	; 0x1bc
 8049cb6:	460f      	mov	r7, r1
 8049cb8:	4604      	mov	r4, r0
	create_abs_path(argv[1], path, sizeof(path));
 8049cba:	6850      	ldr	r0, [r2, #4]
 8049cbc:	a90c      	add	r1, sp, #48	; 0x30
{
 8049cbe:	4615      	mov	r5, r2
	create_abs_path(argv[1], path, sizeof(path));
 8049cc0:	f7ff fefe 	bl	8049ac0 <create_abs_path.constprop.0>
	if (argc > 2) {
 8049cc4:	2f02      	cmp	r7, #2
 8049cc6:	d91d      	bls.n	8049d04 <cmd_read+0x54>
		count = strtol(argv[2], NULL, 0);
 8049cc8:	2200      	movs	r2, #0
 8049cca:	68a8      	ldr	r0, [r5, #8]
 8049ccc:	4611      	mov	r1, r2
 8049cce:	f009 f909 	bl	8052ee4 <strtol>
			count = INT_MAX;
 8049cd2:	1e06      	subs	r6, r0, #0
 8049cd4:	bfd8      	it	le
 8049cd6:	f06f 4600 	mvnle.w	r6, #2147483648	; 0x80000000
	if (argc > 3) {
 8049cda:	2f03      	cmp	r7, #3
 8049cdc:	d014      	beq.n	8049d08 <cmd_read+0x58>
		offset = strtol(argv[3], NULL, 0);
 8049cde:	2200      	movs	r2, #0
 8049ce0:	68e8      	ldr	r0, [r5, #12]
 8049ce2:	4611      	mov	r1, r2
 8049ce4:	f009 f8fe 	bl	8052ee4 <strtol>
 8049ce8:	4607      	mov	r7, r0
	err = fs_stat(path, &dirent);
 8049cea:	a92c      	add	r1, sp, #176	; 0xb0
 8049cec:	a80c      	add	r0, sp, #48	; 0x30
 8049cee:	f7ff fc3d 	bl	804956c <fs_stat>
	if (err) {
 8049cf2:	b158      	cbz	r0, 8049d0c <cmd_read+0x5c>
		shell_error(shell, "Failed to obtain file %s (err: %d)",
 8049cf4:	ab0c      	add	r3, sp, #48	; 0x30
 8049cf6:	4a4d      	ldr	r2, [pc, #308]	; (8049e2c <cmd_read+0x17c>)
 8049cf8:	9000      	str	r0, [sp, #0]
		shell_error(shell, "Failed to open %s (%d)", path, err);
 8049cfa:	2102      	movs	r1, #2
 8049cfc:	4620      	mov	r0, r4
 8049cfe:	f00c fdde 	bl	80568be <shell_fprintf>
		return -ENOEXEC;
 8049d02:	e00c      	b.n	8049d1e <cmd_read+0x6e>
		count = INT_MAX;
 8049d04:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
		offset = 0;
 8049d08:	2700      	movs	r7, #0
 8049d0a:	e7ee      	b.n	8049cea <cmd_read+0x3a>
	if (dirent.type != FS_DIR_ENTRY_FILE) {
 8049d0c:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 8049d10:	b159      	cbz	r1, 8049d2a <cmd_read+0x7a>
		shell_error(shell, "Note a file %s", path);
 8049d12:	ab0c      	add	r3, sp, #48	; 0x30
 8049d14:	4a46      	ldr	r2, [pc, #280]	; (8049e30 <cmd_read+0x180>)
 8049d16:	2102      	movs	r1, #2
 8049d18:	4620      	mov	r0, r4
 8049d1a:	f00c fdd0 	bl	80568be <shell_fprintf>
			return -ENOEXEC;
 8049d1e:	f06f 0507 	mvn.w	r5, #7
}
 8049d22:	4628      	mov	r0, r5
 8049d24:	b06f      	add	sp, #444	; 0x1bc
 8049d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	shell_print(shell, "File size: %zd", dirent.size);
 8049d2a:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
 8049d2c:	4620      	mov	r0, r4
 8049d2e:	4a41      	ldr	r2, [pc, #260]	; (8049e34 <cmd_read+0x184>)
 8049d30:	f00c fdc5 	bl	80568be <shell_fprintf>
	fs_file_t_init(&file);
 8049d34:	a805      	add	r0, sp, #20
	err = fs_open(&file, path, FS_O_READ);
 8049d36:	2201      	movs	r2, #1
 8049d38:	a90c      	add	r1, sp, #48	; 0x30
	fs_file_t_init(&file);
 8049d3a:	f00d fda6 	bl	805788a <fs_file_t_init>
	err = fs_open(&file, path, FS_O_READ);
 8049d3e:	f7ff f8ff 	bl	8048f40 <fs_open>
	if (err) {
 8049d42:	4605      	mov	r5, r0
 8049d44:	b118      	cbz	r0, 8049d4e <cmd_read+0x9e>
		shell_error(shell, "Failed to open %s (%d)", path, err);
 8049d46:	ab0c      	add	r3, sp, #48	; 0x30
 8049d48:	4a3b      	ldr	r2, [pc, #236]	; (8049e38 <cmd_read+0x188>)
 8049d4a:	9000      	str	r0, [sp, #0]
 8049d4c:	e7d5      	b.n	8049cfa <cmd_read+0x4a>
	if (offset > 0) {
 8049d4e:	2f00      	cmp	r7, #0
 8049d50:	dd10      	ble.n	8049d74 <cmd_read+0xc4>
		err = fs_seek(&file, offset, FS_SEEK_SET);
 8049d52:	4602      	mov	r2, r0
 8049d54:	4639      	mov	r1, r7
 8049d56:	a805      	add	r0, sp, #20
 8049d58:	f7ff f9d2 	bl	8049100 <fs_seek>
		if (err) {
 8049d5c:	b150      	cbz	r0, 8049d74 <cmd_read+0xc4>
			shell_error(shell, "Failed to seek %s (%d)",
 8049d5e:	9000      	str	r0, [sp, #0]
 8049d60:	ab0c      	add	r3, sp, #48	; 0x30
 8049d62:	4620      	mov	r0, r4
 8049d64:	4a35      	ldr	r2, [pc, #212]	; (8049e3c <cmd_read+0x18c>)
 8049d66:	2102      	movs	r1, #2
 8049d68:	f00c fda9 	bl	80568be <shell_fprintf>
			fs_close(&file);
 8049d6c:	a805      	add	r0, sp, #20
 8049d6e:	f7ff f955 	bl	804901c <fs_close>
 8049d72:	e7d4      	b.n	8049d1e <cmd_read+0x6e>
		read = fs_read(&file, buf, MIN(count, sizeof(buf)));
 8049d74:	2e10      	cmp	r6, #16
 8049d76:	4632      	mov	r2, r6
 8049d78:	a908      	add	r1, sp, #32
 8049d7a:	a805      	add	r0, sp, #20
 8049d7c:	bf28      	it	cs
 8049d7e:	2210      	movcs	r2, #16
 8049d80:	f7ff f972 	bl	8049068 <fs_read>
		if (read <= 0) {
 8049d84:	f1b0 0a00 	subs.w	sl, r0, #0
 8049d88:	dd42      	ble.n	8049e10 <cmd_read+0x160>
		shell_fprintf(shell, SHELL_NORMAL, "%08X  ", offset);
 8049d8a:	f10d 0920 	add.w	r9, sp, #32
		for (i = 0; i < read; i++) {
 8049d8e:	f04f 0800 	mov.w	r8, #0
		shell_fprintf(shell, SHELL_NORMAL, "%08X  ", offset);
 8049d92:	463b      	mov	r3, r7
 8049d94:	4a2a      	ldr	r2, [pc, #168]	; (8049e40 <cmd_read+0x190>)
 8049d96:	46cb      	mov	fp, r9
 8049d98:	2100      	movs	r1, #0
 8049d9a:	4620      	mov	r0, r4
 8049d9c:	f00c fd8f 	bl	80568be <shell_fprintf>
			shell_fprintf(shell, SHELL_NORMAL, "%02X ", buf[i]);
 8049da0:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8049da4:	2100      	movs	r1, #0
 8049da6:	4a27      	ldr	r2, [pc, #156]	; (8049e44 <cmd_read+0x194>)
 8049da8:	4620      	mov	r0, r4
 8049daa:	f00c fd88 	bl	80568be <shell_fprintf>
		for (i = 0; i < read; i++) {
 8049dae:	f8cd 800c 	str.w	r8, [sp, #12]
 8049db2:	f108 0801 	add.w	r8, r8, #1
 8049db6:	45c2      	cmp	sl, r8
 8049db8:	d1f2      	bne.n	8049da0 <cmd_read+0xf0>
 8049dba:	46c2      	mov	sl, r8
		for (; i < sizeof(buf); i++) {
 8049dbc:	f1ba 0f10 	cmp.w	sl, #16
 8049dc0:	d12a      	bne.n	8049e18 <cmd_read+0x168>
		shell_fprintf(shell, SHELL_NORMAL, "%*c", i*3, ' ');
 8049dc2:	2320      	movs	r3, #32
		for (i = 0; i < read; i++) {
 8049dc4:	f04f 0a00 	mov.w	sl, #0
			shell_fprintf(shell, SHELL_NORMAL, "%c", buf[i] < 32 ||
 8049dc8:	f8df b088 	ldr.w	fp, [pc, #136]	; 8049e54 <cmd_read+0x1a4>
		shell_fprintf(shell, SHELL_NORMAL, "%*c", i*3, ' ');
 8049dcc:	4620      	mov	r0, r4
 8049dce:	9300      	str	r3, [sp, #0]
 8049dd0:	2300      	movs	r3, #0
 8049dd2:	4a1d      	ldr	r2, [pc, #116]	; (8049e48 <cmd_read+0x198>)
 8049dd4:	4619      	mov	r1, r3
 8049dd6:	f00c fd72 	bl	80568be <shell_fprintf>
			shell_fprintf(shell, SHELL_NORMAL, "%c", buf[i] < 32 ||
 8049dda:	f819 3b01 	ldrb.w	r3, [r9], #1
 8049dde:	2100      	movs	r1, #0
 8049de0:	4620      	mov	r0, r4
 8049de2:	f1a3 0220 	sub.w	r2, r3, #32
 8049de6:	2a5f      	cmp	r2, #95	; 0x5f
 8049de8:	465a      	mov	r2, fp
 8049dea:	bf88      	it	hi
 8049dec:	232e      	movhi	r3, #46	; 0x2e
 8049dee:	f00c fd66 	bl	80568be <shell_fprintf>
		for (i = 0; i < read; i++) {
 8049df2:	9a03      	ldr	r2, [sp, #12]
 8049df4:	f10a 0301 	add.w	r3, sl, #1
 8049df8:	4552      	cmp	r2, sl
 8049dfa:	d115      	bne.n	8049e28 <cmd_read+0x178>
		count -= read;
 8049dfc:	eba6 0608 	sub.w	r6, r6, r8
		shell_print(shell, "");
 8049e00:	4a12      	ldr	r2, [pc, #72]	; (8049e4c <cmd_read+0x19c>)
 8049e02:	2100      	movs	r1, #0
 8049e04:	4620      	mov	r0, r4
 8049e06:	f00c fd5a 	bl	80568be <shell_fprintf>
	while (count > 0) {
 8049e0a:	2e00      	cmp	r6, #0
		offset += read;
 8049e0c:	4447      	add	r7, r8
	while (count > 0) {
 8049e0e:	dcb1      	bgt.n	8049d74 <cmd_read+0xc4>
	fs_close(&file);
 8049e10:	a805      	add	r0, sp, #20
 8049e12:	f7ff f903 	bl	804901c <fs_close>
	return 0;
 8049e16:	e784      	b.n	8049d22 <cmd_read+0x72>
			shell_fprintf(shell, SHELL_NORMAL, "   ");
 8049e18:	4a0d      	ldr	r2, [pc, #52]	; (8049e50 <cmd_read+0x1a0>)
 8049e1a:	2100      	movs	r1, #0
 8049e1c:	4620      	mov	r0, r4
		for (; i < sizeof(buf); i++) {
 8049e1e:	f10a 0a01 	add.w	sl, sl, #1
			shell_fprintf(shell, SHELL_NORMAL, "   ");
 8049e22:	f00c fd4c 	bl	80568be <shell_fprintf>
		for (; i < sizeof(buf); i++) {
 8049e26:	e7c9      	b.n	8049dbc <cmd_read+0x10c>
 8049e28:	469a      	mov	sl, r3
 8049e2a:	e7d6      	b.n	8049dda <cmd_read+0x12a>
 8049e2c:	080613c7 	.word	0x080613c7
 8049e30:	080613eb 	.word	0x080613eb
 8049e34:	080613fb 	.word	0x080613fb
 8049e38:	0806140b 	.word	0x0806140b
 8049e3c:	08061423 	.word	0x08061423
 8049e40:	0806143b 	.word	0x0806143b
 8049e44:	08061442 	.word	0x08061442
 8049e48:	08061448 	.word	0x08061448
 8049e4c:	08060044 	.word	0x08060044
 8049e50:	08062fda 	.word	0x08062fda
 8049e54:	08060696 	.word	0x08060696

08049e58 <cmd_cat>:
{
 8049e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049e5c:	b0fb      	sub	sp, #492	; 0x1ec
 8049e5e:	4617      	mov	r7, r2
	for (size_t i = 1; i < argc; ++i) {
 8049e60:	2601      	movs	r6, #1
				shell_fprintf(shell, SHELL_NORMAL, "%c", buf[j]);
 8049e62:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8049f28 <cmd_cat+0xd0>
			shell_error(shell, "Failed to read from file %s (err: %d)",
 8049e66:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8049f2c <cmd_cat+0xd4>
{
 8049e6a:	4604      	mov	r4, r0
	fs_file_t_init(&file);
 8049e6c:	a805      	add	r0, sp, #20
{
 8049e6e:	9103      	str	r1, [sp, #12]
	fs_file_t_init(&file);
 8049e70:	f00d fd0b 	bl	805788a <fs_file_t_init>
	for (size_t i = 1; i < argc; ++i) {
 8049e74:	9b03      	ldr	r3, [sp, #12]
 8049e76:	429e      	cmp	r6, r3
 8049e78:	d303      	bcc.n	8049e82 <cmd_cat+0x2a>
}
 8049e7a:	2000      	movs	r0, #0
 8049e7c:	b07b      	add	sp, #492	; 0x1ec
 8049e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		create_abs_path(argv[i], path, sizeof(path));
 8049e82:	a918      	add	r1, sp, #96	; 0x60
 8049e84:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 8049e88:	f7ff fe1a 	bl	8049ac0 <create_abs_path.constprop.0>
		err = fs_stat(path, &dirent);
 8049e8c:	a938      	add	r1, sp, #224	; 0xe0
 8049e8e:	a818      	add	r0, sp, #96	; 0x60
 8049e90:	f7ff fb6c 	bl	804956c <fs_stat>
		if (err < 0) {
 8049e94:	2800      	cmp	r0, #0
 8049e96:	da07      	bge.n	8049ea8 <cmd_cat+0x50>
			shell_error(shell, "Failed to obtain file %s (err: %d)",
 8049e98:	ab18      	add	r3, sp, #96	; 0x60
 8049e9a:	4a20      	ldr	r2, [pc, #128]	; (8049f1c <cmd_cat+0xc4>)
 8049e9c:	9000      	str	r0, [sp, #0]
			shell_error(shell, "Failed to open %s (%d)", path, err);
 8049e9e:	2102      	movs	r1, #2
 8049ea0:	4620      	mov	r0, r4
 8049ea2:	f00c fd0c 	bl	80568be <shell_fprintf>
			continue;
 8049ea6:	e008      	b.n	8049eba <cmd_cat+0x62>
		if (dirent.type != FS_DIR_ENTRY_FILE) {
 8049ea8:	f89d 30e0 	ldrb.w	r3, [sp, #224]	; 0xe0
 8049eac:	b13b      	cbz	r3, 8049ebe <cmd_cat+0x66>
			shell_error(shell, "Note a file %s", path);
 8049eae:	ab18      	add	r3, sp, #96	; 0x60
 8049eb0:	4a1b      	ldr	r2, [pc, #108]	; (8049f20 <cmd_cat+0xc8>)
 8049eb2:	2102      	movs	r1, #2
 8049eb4:	4620      	mov	r0, r4
 8049eb6:	f00c fd02 	bl	80568be <shell_fprintf>
	for (size_t i = 1; i < argc; ++i) {
 8049eba:	3601      	adds	r6, #1
 8049ebc:	e7da      	b.n	8049e74 <cmd_cat+0x1c>
		err = fs_open(&file, path, FS_O_READ);
 8049ebe:	2201      	movs	r2, #1
 8049ec0:	a918      	add	r1, sp, #96	; 0x60
 8049ec2:	a805      	add	r0, sp, #20
 8049ec4:	f7ff f83c 	bl	8048f40 <fs_open>
		if (err < 0) {
 8049ec8:	2800      	cmp	r0, #0
 8049eca:	da03      	bge.n	8049ed4 <cmd_cat+0x7c>
			shell_error(shell, "Failed to open %s (%d)", path, err);
 8049ecc:	ab18      	add	r3, sp, #96	; 0x60
 8049ece:	4a15      	ldr	r2, [pc, #84]	; (8049f24 <cmd_cat+0xcc>)
 8049ed0:	9000      	str	r0, [sp, #0]
 8049ed2:	e7e4      	b.n	8049e9e <cmd_cat+0x46>
			read = fs_read(&file, buf, sizeof(buf));
 8049ed4:	2240      	movs	r2, #64	; 0x40
 8049ed6:	a908      	add	r1, sp, #32
 8049ed8:	a805      	add	r0, sp, #20
 8049eda:	f7ff f8c5 	bl	8049068 <fs_read>
			if (read <= 0) {
 8049ede:	1e05      	subs	r5, r0, #0
 8049ee0:	dd0f      	ble.n	8049f02 <cmd_cat+0xaa>
 8049ee2:	f10d 0920 	add.w	r9, sp, #32
			for (int j = 0; j < read; j++) {
 8049ee6:	f04f 0800 	mov.w	r8, #0
 8049eea:	f108 0801 	add.w	r8, r8, #1
				shell_fprintf(shell, SHELL_NORMAL, "%c", buf[j]);
 8049eee:	f819 3b01 	ldrb.w	r3, [r9], #1
 8049ef2:	4652      	mov	r2, sl
 8049ef4:	2100      	movs	r1, #0
 8049ef6:	4620      	mov	r0, r4
 8049ef8:	f00c fce1 	bl	80568be <shell_fprintf>
			for (int j = 0; j < read; j++) {
 8049efc:	4545      	cmp	r5, r8
 8049efe:	d1f4      	bne.n	8049eea <cmd_cat+0x92>
 8049f00:	e7e8      	b.n	8049ed4 <cmd_cat+0x7c>
		if (read < 0) {
 8049f02:	d006      	beq.n	8049f12 <cmd_cat+0xba>
			shell_error(shell, "Failed to read from file %s (err: %d)",
 8049f04:	ab18      	add	r3, sp, #96	; 0x60
 8049f06:	465a      	mov	r2, fp
 8049f08:	2102      	movs	r1, #2
 8049f0a:	4620      	mov	r0, r4
 8049f0c:	9500      	str	r5, [sp, #0]
 8049f0e:	f00c fcd6 	bl	80568be <shell_fprintf>
		fs_close(&file);
 8049f12:	a805      	add	r0, sp, #20
 8049f14:	f7ff f882 	bl	804901c <fs_close>
 8049f18:	e7cf      	b.n	8049eba <cmd_cat+0x62>
 8049f1a:	bf00      	nop
 8049f1c:	080613c7 	.word	0x080613c7
 8049f20:	080613eb 	.word	0x080613eb
 8049f24:	0806140b 	.word	0x0806140b
 8049f28:	08060696 	.word	0x08060696
 8049f2c:	0806144c 	.word	0x0806144c

08049f30 <cmd_rm>:
{
 8049f30:	b510      	push	{r4, lr}
 8049f32:	b0a2      	sub	sp, #136	; 0x88
 8049f34:	4604      	mov	r4, r0
	create_abs_path(argv[1], path, sizeof(path));
 8049f36:	6850      	ldr	r0, [r2, #4]
 8049f38:	a902      	add	r1, sp, #8
 8049f3a:	f7ff fdc1 	bl	8049ac0 <create_abs_path.constprop.0>
	err = fs_unlink(path);
 8049f3e:	a802      	add	r0, sp, #8
 8049f40:	f7ff fab8 	bl	80494b4 <fs_unlink>
	if (err) {
 8049f44:	b140      	cbz	r0, 8049f58 <cmd_rm+0x28>
		shell_error(shell, "Failed to remove %s (%d)", path, err);
 8049f46:	9000      	str	r0, [sp, #0]
 8049f48:	ab02      	add	r3, sp, #8
 8049f4a:	4620      	mov	r0, r4
 8049f4c:	4a03      	ldr	r2, [pc, #12]	; (8049f5c <cmd_rm+0x2c>)
 8049f4e:	2102      	movs	r1, #2
 8049f50:	f00c fcb5 	bl	80568be <shell_fprintf>
		err = -ENOEXEC;
 8049f54:	f06f 0007 	mvn.w	r0, #7
}
 8049f58:	b022      	add	sp, #136	; 0x88
 8049f5a:	bd10      	pop	{r4, pc}
 8049f5c:	08061473 	.word	0x08061473

08049f60 <cmd_statvfs>:
{
 8049f60:	b510      	push	{r4, lr}
 8049f62:	b0a8      	sub	sp, #160	; 0xa0
 8049f64:	4604      	mov	r4, r0
	create_abs_path(argv[1], path, sizeof(path));
 8049f66:	6850      	ldr	r0, [r2, #4]
 8049f68:	a908      	add	r1, sp, #32
 8049f6a:	f7ff fda9 	bl	8049ac0 <create_abs_path.constprop.0>
	err = fs_statvfs(path, &stat);
 8049f6e:	a904      	add	r1, sp, #16
 8049f70:	a808      	add	r0, sp, #32
 8049f72:	f7ff fb55 	bl	8049620 <fs_statvfs>
	if (err < 0) {
 8049f76:	2800      	cmp	r0, #0
 8049f78:	da0a      	bge.n	8049f90 <cmd_statvfs+0x30>
		shell_error(shell, "Failed to statvfs %s (%d)", path, err);
 8049f7a:	9000      	str	r0, [sp, #0]
 8049f7c:	ab08      	add	r3, sp, #32
 8049f7e:	4620      	mov	r0, r4
 8049f80:	4a0a      	ldr	r2, [pc, #40]	; (8049fac <cmd_statvfs+0x4c>)
 8049f82:	2102      	movs	r1, #2
 8049f84:	f00c fc9b 	bl	80568be <shell_fprintf>
		return -ENOEXEC;
 8049f88:	f06f 0007 	mvn.w	r0, #7
}
 8049f8c:	b028      	add	sp, #160	; 0xa0
 8049f8e:	bd10      	pop	{r4, pc}
	shell_fprintf(shell, SHELL_NORMAL,
 8049f90:	9b07      	ldr	r3, [sp, #28]
 8049f92:	4620      	mov	r0, r4
 8049f94:	4a06      	ldr	r2, [pc, #24]	; (8049fb0 <cmd_statvfs+0x50>)
 8049f96:	2100      	movs	r1, #0
 8049f98:	9302      	str	r3, [sp, #8]
 8049f9a:	9b06      	ldr	r3, [sp, #24]
 8049f9c:	9301      	str	r3, [sp, #4]
 8049f9e:	9b05      	ldr	r3, [sp, #20]
 8049fa0:	9300      	str	r3, [sp, #0]
 8049fa2:	9b04      	ldr	r3, [sp, #16]
 8049fa4:	f00c fc8b 	bl	80568be <shell_fprintf>
	return 0;
 8049fa8:	2000      	movs	r0, #0
 8049faa:	e7ef      	b.n	8049f8c <cmd_statvfs+0x2c>
 8049fac:	0806148d 	.word	0x0806148d
 8049fb0:	080614a8 	.word	0x080614a8

08049fb4 <cmd_trunc>:
{
 8049fb4:	b570      	push	{r4, r5, r6, lr}
 8049fb6:	b0a6      	sub	sp, #152	; 0x98
 8049fb8:	460e      	mov	r6, r1
 8049fba:	4605      	mov	r5, r0
	create_abs_path(argv[1], path, sizeof(path));
 8049fbc:	6850      	ldr	r0, [r2, #4]
 8049fbe:	a906      	add	r1, sp, #24
{
 8049fc0:	4614      	mov	r4, r2
	create_abs_path(argv[1], path, sizeof(path));
 8049fc2:	f7ff fd7d 	bl	8049ac0 <create_abs_path.constprop.0>
	if (argc > 2) {
 8049fc6:	2e02      	cmp	r6, #2
 8049fc8:	d919      	bls.n	8049ffe <cmd_trunc+0x4a>
		length = strtol(argv[2], NULL, 0);
 8049fca:	2200      	movs	r2, #0
 8049fcc:	68a0      	ldr	r0, [r4, #8]
 8049fce:	4611      	mov	r1, r2
 8049fd0:	f008 ff88 	bl	8052ee4 <strtol>
 8049fd4:	4604      	mov	r4, r0
	fs_file_t_init(&file);
 8049fd6:	a803      	add	r0, sp, #12
	err = fs_open(&file, path, FS_O_WRITE);
 8049fd8:	2202      	movs	r2, #2
 8049fda:	a906      	add	r1, sp, #24
	fs_file_t_init(&file);
 8049fdc:	f00d fc55 	bl	805788a <fs_file_t_init>
	err = fs_open(&file, path, FS_O_WRITE);
 8049fe0:	f7fe ffae 	bl	8048f40 <fs_open>
	if (err) {
 8049fe4:	b168      	cbz	r0, 804a002 <cmd_trunc+0x4e>
		return -ENOEXEC;;
 8049fe6:	f06f 0407 	mvn.w	r4, #7
		shell_error(shell, "Failed to open %s (%d)", path, err);
 8049fea:	9000      	str	r0, [sp, #0]
 8049fec:	ab06      	add	r3, sp, #24
 8049fee:	4a0e      	ldr	r2, [pc, #56]	; (804a028 <cmd_trunc+0x74>)
 8049ff0:	2102      	movs	r1, #2
 8049ff2:	4628      	mov	r0, r5
 8049ff4:	f00c fc63 	bl	80568be <shell_fprintf>
}
 8049ff8:	4620      	mov	r0, r4
 8049ffa:	b026      	add	sp, #152	; 0x98
 8049ffc:	bd70      	pop	{r4, r5, r6, pc}
		length = 0;
 8049ffe:	2400      	movs	r4, #0
 804a000:	e7e9      	b.n	8049fd6 <cmd_trunc+0x22>
	err = fs_truncate(&file, length);
 804a002:	4621      	mov	r1, r4
 804a004:	a803      	add	r0, sp, #12
 804a006:	f7ff f8a1 	bl	804914c <fs_truncate>
	if (err) {
 804a00a:	4604      	mov	r4, r0
 804a00c:	b140      	cbz	r0, 804a020 <cmd_trunc+0x6c>
		err = -ENOEXEC;
 804a00e:	f06f 0407 	mvn.w	r4, #7
		shell_error(shell, "Failed to truncate %s (%d)", path, err);
 804a012:	9000      	str	r0, [sp, #0]
 804a014:	ab06      	add	r3, sp, #24
 804a016:	4a05      	ldr	r2, [pc, #20]	; (804a02c <cmd_trunc+0x78>)
 804a018:	2102      	movs	r1, #2
 804a01a:	4628      	mov	r0, r5
 804a01c:	f00c fc4f 	bl	80568be <shell_fprintf>
	fs_close(&file);
 804a020:	a803      	add	r0, sp, #12
 804a022:	f7fe fffb 	bl	804901c <fs_close>
	return err;
 804a026:	e7e7      	b.n	8049ff8 <cmd_trunc+0x44>
 804a028:	0806140b 	.word	0x0806140b
 804a02c:	080614d6 	.word	0x080614d6

0804a030 <cmd_write>:
{
 804a030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804a034:	b0b7      	sub	sp, #220	; 0xdc
 804a036:	4615      	mov	r5, r2
 804a038:	4607      	mov	r7, r0
 804a03a:	4688      	mov	r8, r1
	create_abs_path(argv[1], path, sizeof(path));
 804a03c:	6850      	ldr	r0, [r2, #4]
 804a03e:	a916      	add	r1, sp, #88	; 0x58
 804a040:	f7ff fd3e 	bl	8049ac0 <create_abs_path.constprop.0>
	if (!strcmp(argv[2], "-o")) {
 804a044:	4935      	ldr	r1, [pc, #212]	; (804a11c <cmd_write+0xec>)
 804a046:	68a8      	ldr	r0, [r5, #8]
 804a048:	f7f6 fbfc 	bl	8040844 <strcmp>
 804a04c:	4602      	mov	r2, r0
 804a04e:	bb20      	cbnz	r0, 804a09a <cmd_write+0x6a>
		if (argc < 4) {
 804a050:	f1b8 0f03 	cmp.w	r8, #3
 804a054:	d80a      	bhi.n	804a06c <cmd_write+0x3c>
			shell_error(shell, "Missing argument");
 804a056:	4a32      	ldr	r2, [pc, #200]	; (804a120 <cmd_write+0xf0>)
 804a058:	2102      	movs	r1, #2
 804a05a:	4638      	mov	r0, r7
 804a05c:	f00c fc2f 	bl	80568be <shell_fprintf>
				return -ENOEXEC;
 804a060:	f06f 0407 	mvn.w	r4, #7
}
 804a064:	4620      	mov	r0, r4
 804a066:	b037      	add	sp, #220	; 0xdc
 804a068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		offset = strtol(argv[3], NULL, 0);
 804a06c:	4601      	mov	r1, r0
 804a06e:	68e8      	ldr	r0, [r5, #12]
 804a070:	f008 ff38 	bl	8052ee4 <strtol>
		arg_offset = 4;
 804a074:	2604      	movs	r6, #4
		offset = strtol(argv[3], NULL, 0);
 804a076:	4604      	mov	r4, r0
	fs_file_t_init(&file);
 804a078:	a803      	add	r0, sp, #12
	err = fs_open(&file, path, FS_O_CREATE | FS_O_WRITE);
 804a07a:	a916      	add	r1, sp, #88	; 0x58
 804a07c:	2212      	movs	r2, #18
	fs_file_t_init(&file);
 804a07e:	f00d fc04 	bl	805788a <fs_file_t_init>
	err = fs_open(&file, path, FS_O_CREATE | FS_O_WRITE);
 804a082:	f7fe ff5d 	bl	8048f40 <fs_open>
	if (err) {
 804a086:	4601      	mov	r1, r0
 804a088:	b158      	cbz	r0, 804a0a2 <cmd_write+0x72>
		shell_error(shell, "Failed to open %s (%d)", path, err);
 804a08a:	9000      	str	r0, [sp, #0]
 804a08c:	ab16      	add	r3, sp, #88	; 0x58
 804a08e:	4a25      	ldr	r2, [pc, #148]	; (804a124 <cmd_write+0xf4>)
 804a090:	2102      	movs	r1, #2
 804a092:	4638      	mov	r0, r7
 804a094:	f00c fc13 	bl	80568be <shell_fprintf>
		return -ENOEXEC;
 804a098:	e7e2      	b.n	804a060 <cmd_write+0x30>
	off_t offset = -1;
 804a09a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		arg_offset = 2;
 804a09e:	2602      	movs	r6, #2
 804a0a0:	e7ea      	b.n	804a078 <cmd_write+0x48>
	if (offset < 0) {
 804a0a2:	2c00      	cmp	r4, #0
		err = fs_seek(&file, offset, FS_SEEK_SET);
 804a0a4:	bfa6      	itte	ge
 804a0a6:	4602      	movge	r2, r0
 804a0a8:	4621      	movge	r1, r4
		err = fs_seek(&file, 0, FS_SEEK_END);
 804a0aa:	2202      	movlt	r2, #2
		err = fs_seek(&file, offset, FS_SEEK_SET);
 804a0ac:	a803      	add	r0, sp, #12
 804a0ae:	f7ff f827 	bl	8049100 <fs_seek>
 804a0b2:	4604      	mov	r4, r0
	if (err) {
 804a0b4:	b940      	cbnz	r0, 804a0c8 <cmd_write+0x98>
 804a0b6:	eb05 0586 	add.w	r5, r5, r6, lsl #2
	buf_len = 0U;
 804a0ba:	4681      	mov	r9, r0
	while (arg_offset < argc) {
 804a0bc:	45b0      	cmp	r8, r6
 804a0be:	d80e      	bhi.n	804a0de <cmd_write+0xae>
	fs_close(&file);
 804a0c0:	a803      	add	r0, sp, #12
 804a0c2:	f7fe ffab 	bl	804901c <fs_close>
	return 0;
 804a0c6:	e7cd      	b.n	804a064 <cmd_write+0x34>
		shell_error(shell, "Failed to seek %s (%d)", path, err);
 804a0c8:	ab16      	add	r3, sp, #88	; 0x58
 804a0ca:	4a17      	ldr	r2, [pc, #92]	; (804a128 <cmd_write+0xf8>)
 804a0cc:	9000      	str	r0, [sp, #0]
				shell_error(shell, "Failed to write %s (%d)",
 804a0ce:	4638      	mov	r0, r7
 804a0d0:	2102      	movs	r1, #2
 804a0d2:	f00c fbf4 	bl	80568be <shell_fprintf>
				fs_close(&file);
 804a0d6:	a803      	add	r0, sp, #12
 804a0d8:	f7fe ffa0 	bl	804901c <fs_close>
 804a0dc:	e7c0      	b.n	804a060 <cmd_write+0x30>
		buf[buf_len++] = strtol(argv[arg_offset++], NULL, 16);
 804a0de:	2210      	movs	r2, #16
 804a0e0:	2100      	movs	r1, #0
 804a0e2:	f855 0b04 	ldr.w	r0, [r5], #4
 804a0e6:	3601      	adds	r6, #1
 804a0e8:	f008 fefc 	bl	8052ee4 <strtol>
 804a0ec:	f109 0201 	add.w	r2, r9, #1
 804a0f0:	ab36      	add	r3, sp, #216	; 0xd8
 804a0f2:	b2d2      	uxtb	r2, r2
 804a0f4:	4499      	add	r9, r3
		if ((buf_len == BUF_CNT) || (arg_offset == argc)) {
 804a0f6:	2a40      	cmp	r2, #64	; 0x40
		buf[buf_len++] = strtol(argv[arg_offset++], NULL, 16);
 804a0f8:	f809 0cc0 	strb.w	r0, [r9, #-192]
		if ((buf_len == BUF_CNT) || (arg_offset == argc)) {
 804a0fc:	d001      	beq.n	804a102 <cmd_write+0xd2>
 804a0fe:	45b0      	cmp	r8, r6
 804a100:	d10a      	bne.n	804a118 <cmd_write+0xe8>
			err = fs_write(&file, buf, buf_len);
 804a102:	a906      	add	r1, sp, #24
 804a104:	a803      	add	r0, sp, #12
 804a106:	f7fe ffd5 	bl	80490b4 <fs_write>
			if (err < 0) {
 804a10a:	2800      	cmp	r0, #0
 804a10c:	da03      	bge.n	804a116 <cmd_write+0xe6>
				shell_error(shell, "Failed to write %s (%d)",
 804a10e:	ab16      	add	r3, sp, #88	; 0x58
 804a110:	4a06      	ldr	r2, [pc, #24]	; (804a12c <cmd_write+0xfc>)
 804a112:	9000      	str	r0, [sp, #0]
 804a114:	e7db      	b.n	804a0ce <cmd_write+0x9e>
			buf_len = 0U;
 804a116:	2200      	movs	r2, #0
 804a118:	4691      	mov	r9, r2
 804a11a:	e7cf      	b.n	804a0bc <cmd_write+0x8c>
 804a11c:	080614f2 	.word	0x080614f2
 804a120:	080614f5 	.word	0x080614f5
 804a124:	0806140b 	.word	0x0806140b
 804a128:	08061423 	.word	0x08061423
 804a12c:	08061507 	.word	0x08061507

0804a130 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 804a130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804a134:	4604      	mov	r4, r0
 804a136:	460e      	mov	r6, r1
 804a138:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 804a13a:	f04f 0801 	mov.w	r8, #1
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 804a13e:	4f0b      	ldr	r7, [pc, #44]	; (804a16c <__stm32_exti_isr.isra.0+0x3c>)
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 804a140:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 804a144:	42b4      	cmp	r4, r6
 804a146:	db01      	blt.n	804a14c <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 804a148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 804a14c:	fa08 f304 	lsl.w	r3, r8, r4
 804a150:	697a      	ldr	r2, [r7, #20]
		if (stm32_exti_is_pending(line)) {
 804a152:	ea33 0202 	bics.w	r2, r3, r2
 804a156:	d107      	bne.n	804a168 <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 804a158:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 804a15a:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 804a15e:	b11b      	cbz	r3, 804a168 <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 804a160:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 804a164:	4620      	mov	r0, r4
 804a166:	4798      	blx	r3
	for (line = min; line < max; line++) {
 804a168:	3401      	adds	r4, #1
 804a16a:	e7eb      	b.n	804a144 <__stm32_exti_isr.isra.0+0x14>
 804a16c:	40013c00 	.word	0x40013c00

0804a170 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR, ExtiLine);
 804a170:	4a04      	ldr	r2, [pc, #16]	; (804a184 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 804a172:	2301      	movs	r3, #1
 804a174:	6811      	ldr	r1, [r2, #0]
 804a176:	4083      	lsls	r3, r0
 804a178:	430b      	orrs	r3, r1
 804a17a:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 804a17c:	4b02      	ldr	r3, [pc, #8]	; (804a188 <stm32_exti_enable+0x18>)
 804a17e:	5618      	ldrsb	r0, [r3, r0]
 804a180:	f7fd bf72 	b.w	8048068 <arch_irq_enable>
 804a184:	40013c00 	.word	0x40013c00
 804a188:	080616c7 	.word	0x080616c7

0804a18c <stm32_exti_disable>:
	if (line < 32) {
 804a18c:	281f      	cmp	r0, #31
 804a18e:	dc07      	bgt.n	804a1a0 <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 804a190:	4904      	ldr	r1, [pc, #16]	; (804a1a4 <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 804a192:	2201      	movs	r2, #1
 804a194:	680b      	ldr	r3, [r1, #0]
 804a196:	fa02 f000 	lsl.w	r0, r2, r0
 804a19a:	ea23 0000 	bic.w	r0, r3, r0
 804a19e:	6008      	str	r0, [r1, #0]
}
 804a1a0:	4770      	bx	lr
 804a1a2:	bf00      	nop
 804a1a4:	40013c00 	.word	0x40013c00

0804a1a8 <stm32_exti_trigger>:
	switch (trigger) {
 804a1a8:	2903      	cmp	r1, #3
 804a1aa:	d80f      	bhi.n	804a1cc <stm32_exti_trigger+0x24>
 804a1ac:	e8df f001 	tbb	[pc, r1]
 804a1b0:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 804a1b4:	4b15      	ldr	r3, [pc, #84]	; (804a20c <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 804a1b6:	2201      	movs	r2, #1
 804a1b8:	6899      	ldr	r1, [r3, #8]
 804a1ba:	fa02 f000 	lsl.w	r0, r2, r0
 804a1be:	ea21 0100 	bic.w	r1, r1, r0
 804a1c2:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 804a1c4:	68da      	ldr	r2, [r3, #12]
 804a1c6:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 804a1ca:	60d8      	str	r0, [r3, #12]
}
 804a1cc:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 804a1ce:	2301      	movs	r3, #1
 804a1d0:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 804a1d4:	4b0d      	ldr	r3, [pc, #52]	; (804a20c <stm32_exti_trigger+0x64>)
 804a1d6:	689a      	ldr	r2, [r3, #8]
 804a1d8:	4302      	orrs	r2, r0
 804a1da:	609a      	str	r2, [r3, #8]
 804a1dc:	e7f2      	b.n	804a1c4 <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 804a1de:	2301      	movs	r3, #1
 804a1e0:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 804a1e4:	4b09      	ldr	r3, [pc, #36]	; (804a20c <stm32_exti_trigger+0x64>)
 804a1e6:	68da      	ldr	r2, [r3, #12]
 804a1e8:	4302      	orrs	r2, r0
 804a1ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 804a1ec:	689a      	ldr	r2, [r3, #8]
 804a1ee:	ea22 0000 	bic.w	r0, r2, r0
 804a1f2:	6098      	str	r0, [r3, #8]
}
 804a1f4:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 804a1f6:	2301      	movs	r3, #1
 804a1f8:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 804a1fc:	4b03      	ldr	r3, [pc, #12]	; (804a20c <stm32_exti_trigger+0x64>)
 804a1fe:	689a      	ldr	r2, [r3, #8]
 804a200:	4302      	orrs	r2, r0
 804a202:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 804a204:	68da      	ldr	r2, [r3, #12]
 804a206:	4310      	orrs	r0, r2
 804a208:	e7df      	b.n	804a1ca <stm32_exti_trigger+0x22>
 804a20a:	bf00      	nop
 804a20c:	40013c00 	.word	0x40013c00

0804a210 <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 804a210:	b510      	push	{r4, lr}
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 804a212:	4c07      	ldr	r4, [pc, #28]	; (804a230 <stm32_exti_set_callback+0x20>)
 804a214:	f854 3030 	ldr.w	r3, [r4, r0, lsl #3]
 804a218:	b933      	cbnz	r3, 804a228 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 804a21a:	f844 1030 	str.w	r1, [r4, r0, lsl #3]
	data->cb[line].data = arg;
 804a21e:	eb04 04c0 	add.w	r4, r4, r0, lsl #3

	return 0;
 804a222:	4618      	mov	r0, r3
	data->cb[line].data = arg;
 804a224:	6062      	str	r2, [r4, #4]
}
 804a226:	bd10      	pop	{r4, pc}
		return -EBUSY;
 804a228:	f06f 000f 	mvn.w	r0, #15
 804a22c:	e7fb      	b.n	804a226 <stm32_exti_set_callback+0x16>
 804a22e:	bf00      	nop
 804a230:	200378c4 	.word	0x200378c4

0804a234 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 804a234:	4b03      	ldr	r3, [pc, #12]	; (804a244 <stm32_exti_unset_callback+0x10>)
 804a236:	2200      	movs	r2, #0
 804a238:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 804a23c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 804a240:	605a      	str	r2, [r3, #4]
}
 804a242:	4770      	bx	lr
 804a244:	200378c4 	.word	0x200378c4

0804a248 <stm32_sdmmc_access_write>:
}

static int stm32_sdmmc_access_write(struct disk_info *disk,
				    const uint8_t *data_buf,
				    uint32_t start_sector, uint32_t num_sector)
{
 804a248:	b513      	push	{r0, r1, r4, lr}
	const struct device *dev = disk->dev;
	struct stm32_sdmmc_priv *priv = dev->data;
 804a24a:	6900      	ldr	r0, [r0, #16]
	int err;

	err = HAL_SD_WriteBlocks(&priv->hsd, (uint8_t *)data_buf, start_sector,
 804a24c:	6904      	ldr	r4, [r0, #16]
 804a24e:	f247 5030 	movw	r0, #30000	; 0x7530
 804a252:	9000      	str	r0, [sp, #0]
 804a254:	4620      	mov	r0, r4
 804a256:	f005 fc97 	bl	804fb88 <HAL_SD_WriteBlocks>
				 num_sector, 30000);
	if (err != HAL_OK) {
 804a25a:	4601      	mov	r1, r0
 804a25c:	b178      	cbz	r0, 804a27e <stm32_sdmmc_access_write+0x36>
		LOG_ERR("sd write block failed %d", err);
 804a25e:	4a0c      	ldr	r2, [pc, #48]	; (804a290 <stm32_sdmmc_access_write+0x48>)
 804a260:	6813      	ldr	r3, [r2, #0]
 804a262:	075b      	lsls	r3, r3, #29
 804a264:	d008      	beq.n	804a278 <stm32_sdmmc_access_write+0x30>
 804a266:	4b0b      	ldr	r3, [pc, #44]	; (804a294 <stm32_sdmmc_access_write+0x4c>)
 804a268:	480b      	ldr	r0, [pc, #44]	; (804a298 <stm32_sdmmc_access_write+0x50>)
 804a26a:	1ad2      	subs	r2, r2, r3
 804a26c:	0892      	lsrs	r2, r2, #2
 804a26e:	0192      	lsls	r2, r2, #6
 804a270:	f042 0201 	orr.w	r2, r2, #1
 804a274:	f00b fec6 	bl	8056004 <log_1>
		return -EIO;
 804a278:	f06f 0004 	mvn.w	r0, #4
 804a27c:	e005      	b.n	804a28a <stm32_sdmmc_access_write+0x42>
	}
	while (HAL_SD_GetCardState(&priv->hsd) != HAL_SD_CARD_TRANSFER)
 804a27e:	4620      	mov	r0, r4
 804a280:	f00f fdc6 	bl	8059e10 <HAL_SD_GetCardState>
 804a284:	2804      	cmp	r0, #4
 804a286:	d1fa      	bne.n	804a27e <stm32_sdmmc_access_write+0x36>
		;

	return 0;
 804a288:	2000      	movs	r0, #0
}
 804a28a:	b002      	add	sp, #8
 804a28c:	bd10      	pop	{r4, pc}
 804a28e:	bf00      	nop
 804a290:	2002093c 	.word	0x2002093c
 804a294:	200208c8 	.word	0x200208c8
 804a298:	080616df 	.word	0x080616df

0804a29c <stm32_sdmmc_access_read>:
{
 804a29c:	b513      	push	{r0, r1, r4, lr}
	struct stm32_sdmmc_priv *priv = dev->data;
 804a29e:	6900      	ldr	r0, [r0, #16]
	err = HAL_SD_ReadBlocks(&priv->hsd, data_buf, start_sector,
 804a2a0:	6904      	ldr	r4, [r0, #16]
 804a2a2:	f247 5030 	movw	r0, #30000	; 0x7530
 804a2a6:	9000      	str	r0, [sp, #0]
 804a2a8:	4620      	mov	r0, r4
 804a2aa:	f005 fb71 	bl	804f990 <HAL_SD_ReadBlocks>
	if (err != HAL_OK) {
 804a2ae:	4601      	mov	r1, r0
 804a2b0:	b178      	cbz	r0, 804a2d2 <stm32_sdmmc_access_read+0x36>
		LOG_ERR("sd read block failed %d", err);
 804a2b2:	4a0c      	ldr	r2, [pc, #48]	; (804a2e4 <stm32_sdmmc_access_read+0x48>)
 804a2b4:	6813      	ldr	r3, [r2, #0]
 804a2b6:	075b      	lsls	r3, r3, #29
 804a2b8:	d008      	beq.n	804a2cc <stm32_sdmmc_access_read+0x30>
 804a2ba:	4b0b      	ldr	r3, [pc, #44]	; (804a2e8 <stm32_sdmmc_access_read+0x4c>)
 804a2bc:	480b      	ldr	r0, [pc, #44]	; (804a2ec <stm32_sdmmc_access_read+0x50>)
 804a2be:	1ad2      	subs	r2, r2, r3
 804a2c0:	0892      	lsrs	r2, r2, #2
 804a2c2:	0192      	lsls	r2, r2, #6
 804a2c4:	f042 0201 	orr.w	r2, r2, #1
 804a2c8:	f00b fe9c 	bl	8056004 <log_1>
		return -EIO;
 804a2cc:	f06f 0004 	mvn.w	r0, #4
 804a2d0:	e005      	b.n	804a2de <stm32_sdmmc_access_read+0x42>
	while (HAL_SD_GetCardState(&priv->hsd) != HAL_SD_CARD_TRANSFER)
 804a2d2:	4620      	mov	r0, r4
 804a2d4:	f00f fd9c 	bl	8059e10 <HAL_SD_GetCardState>
 804a2d8:	2804      	cmp	r0, #4
 804a2da:	d1fa      	bne.n	804a2d2 <stm32_sdmmc_access_read+0x36>
	return 0;
 804a2dc:	2000      	movs	r0, #0
}
 804a2de:	b002      	add	sp, #8
 804a2e0:	bd10      	pop	{r4, pc}
 804a2e2:	bf00      	nop
 804a2e4:	2002093c 	.word	0x2002093c
 804a2e8:	200208c8 	.word	0x200208c8
 804a2ec:	080616f8 	.word	0x080616f8

0804a2f0 <stm32_sdmmc_card_present.part.0>:
/*
 * Check if the card is present or not. If no card detect gpio is set, assume
 * the card is present. If reading the gpio fails for some reason, assume the
 * card is there.
 */
static bool stm32_sdmmc_card_present(struct stm32_sdmmc_priv *priv)
 804a2f0:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (!priv->cd.name) {
		return true;
	}

	err = gpio_pin_get(priv->cd.port, priv->cd.pin);
 804a2f2:	e9d0 342a 	ldrd	r3, r4, [r0, #168]	; 0xa8
	const struct gpio_driver_data *const data =
 804a2f6:	691d      	ldr	r5, [r3, #16]
	return api->port_get_raw(port, value);
 804a2f8:	689a      	ldr	r2, [r3, #8]
 804a2fa:	a901      	add	r1, sp, #4
 804a2fc:	4618      	mov	r0, r3
 804a2fe:	6852      	ldr	r2, [r2, #4]
 804a300:	4790      	blx	r2
	if (ret == 0) {
 804a302:	1e01      	subs	r1, r0, #0
 804a304:	d10e      	bne.n	804a324 <stm32_sdmmc_card_present.part.0+0x34>
		*value ^= data->invert;
 804a306:	682b      	ldr	r3, [r5, #0]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 804a308:	b2e4      	uxtb	r4, r4
		*value ^= data->invert;
 804a30a:	9a01      	ldr	r2, [sp, #4]
 804a30c:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 804a30e:	2301      	movs	r3, #1
 804a310:	40a3      	lsls	r3, r4
 804a312:	421a      	tst	r2, r3
 804a314:	bf14      	ite	ne
 804a316:	2101      	movne	r1, #1
 804a318:	2100      	moveq	r1, #0
	if (err < 0) {
		LOG_WRN("reading card detect failed %d", err);
		return true;
	}
	return err;
 804a31a:	1e08      	subs	r0, r1, #0
 804a31c:	bf18      	it	ne
 804a31e:	2001      	movne	r0, #1
}
 804a320:	b003      	add	sp, #12
 804a322:	bd30      	pop	{r4, r5, pc}
	if (err < 0) {
 804a324:	daf9      	bge.n	804a31a <stm32_sdmmc_card_present.part.0+0x2a>
		LOG_WRN("reading card detect failed %d", err);
 804a326:	4a08      	ldr	r2, [pc, #32]	; (804a348 <stm32_sdmmc_card_present.part.0+0x58>)
 804a328:	6813      	ldr	r3, [r2, #0]
 804a32a:	f013 0f06 	tst.w	r3, #6
 804a32e:	d008      	beq.n	804a342 <stm32_sdmmc_card_present.part.0+0x52>
 804a330:	4b06      	ldr	r3, [pc, #24]	; (804a34c <stm32_sdmmc_card_present.part.0+0x5c>)
 804a332:	4807      	ldr	r0, [pc, #28]	; (804a350 <stm32_sdmmc_card_present.part.0+0x60>)
 804a334:	1ad2      	subs	r2, r2, r3
 804a336:	0892      	lsrs	r2, r2, #2
 804a338:	0192      	lsls	r2, r2, #6
 804a33a:	f042 0202 	orr.w	r2, r2, #2
 804a33e:	f00b fe61 	bl	8056004 <log_1>
		return true;
 804a342:	2001      	movs	r0, #1
 804a344:	e7ec      	b.n	804a320 <stm32_sdmmc_card_present.part.0+0x30>
 804a346:	bf00      	nop
 804a348:	2002093c 	.word	0x2002093c
 804a34c:	200208c8 	.word	0x200208c8
 804a350:	08061710 	.word	0x08061710

0804a354 <stm32_sdmmc_access_init>:
	struct stm32_sdmmc_priv *priv = dev->data;
 804a354:	6903      	ldr	r3, [r0, #16]
{
 804a356:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct stm32_sdmmc_priv *priv = dev->data;
 804a358:	691d      	ldr	r5, [r3, #16]
	if (priv->status == DISK_STATUS_OK) {
 804a35a:	f8d5 4084 	ldr.w	r4, [r5, #132]	; 0x84
 804a35e:	2c00      	cmp	r4, #0
 804a360:	d033      	beq.n	804a3ca <stm32_sdmmc_access_init+0x76>
	if (priv->status == DISK_STATUS_NOMEDIA) {
 804a362:	2c02      	cmp	r4, #2
 804a364:	d037      	beq.n	804a3d6 <stm32_sdmmc_access_init+0x82>
	return clock_control_on(clock, (clock_control_subsys_t *)&priv->pclken);
 804a366:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
 804a36a:	9101      	str	r1, [sp, #4]
 804a36c:	4c1b      	ldr	r4, [pc, #108]	; (804a3dc <stm32_sdmmc_access_init+0x88>)
 804a36e:	4620      	mov	r0, r4
 804a370:	f00f ff71 	bl	805a256 <z_device_ready>
 804a374:	b1d0      	cbz	r0, 804a3ac <stm32_sdmmc_access_init+0x58>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 804a376:	68a3      	ldr	r3, [r4, #8]
 804a378:	4620      	mov	r0, r4
 804a37a:	9901      	ldr	r1, [sp, #4]
 804a37c:	681b      	ldr	r3, [r3, #0]
 804a37e:	4798      	blx	r3
	if (err) {
 804a380:	4604      	mov	r4, r0
 804a382:	b9a8      	cbnz	r0, 804a3b0 <stm32_sdmmc_access_init+0x5c>
	err = HAL_SD_Init(&priv->hsd);
 804a384:	4628      	mov	r0, r5
 804a386:	f00f fd16 	bl	8059db6 <HAL_SD_Init>
	if (err != HAL_OK) {
 804a38a:	b308      	cbz	r0, 804a3d0 <stm32_sdmmc_access_init+0x7c>
		LOG_ERR("failed to init stm32_sdmmc");
 804a38c:	4914      	ldr	r1, [pc, #80]	; (804a3e0 <stm32_sdmmc_access_init+0x8c>)
 804a38e:	680b      	ldr	r3, [r1, #0]
 804a390:	075b      	lsls	r3, r3, #29
 804a392:	d008      	beq.n	804a3a6 <stm32_sdmmc_access_init+0x52>
 804a394:	4b13      	ldr	r3, [pc, #76]	; (804a3e4 <stm32_sdmmc_access_init+0x90>)
 804a396:	4814      	ldr	r0, [pc, #80]	; (804a3e8 <stm32_sdmmc_access_init+0x94>)
 804a398:	1ac9      	subs	r1, r1, r3
 804a39a:	0889      	lsrs	r1, r1, #2
 804a39c:	0189      	lsls	r1, r1, #6
 804a39e:	f041 0101 	orr.w	r1, r1, #1
 804a3a2:	f00b fe20 	bl	8055fe6 <log_0>
		return -EIO;
 804a3a6:	f06f 0404 	mvn.w	r4, #4
 804a3aa:	e00e      	b.n	804a3ca <stm32_sdmmc_access_init+0x76>
 804a3ac:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("failed to init clocks");
 804a3b0:	490b      	ldr	r1, [pc, #44]	; (804a3e0 <stm32_sdmmc_access_init+0x8c>)
 804a3b2:	680b      	ldr	r3, [r1, #0]
 804a3b4:	075a      	lsls	r2, r3, #29
 804a3b6:	d008      	beq.n	804a3ca <stm32_sdmmc_access_init+0x76>
 804a3b8:	4b0a      	ldr	r3, [pc, #40]	; (804a3e4 <stm32_sdmmc_access_init+0x90>)
 804a3ba:	480c      	ldr	r0, [pc, #48]	; (804a3ec <stm32_sdmmc_access_init+0x98>)
 804a3bc:	1ac9      	subs	r1, r1, r3
 804a3be:	0889      	lsrs	r1, r1, #2
 804a3c0:	0189      	lsls	r1, r1, #6
 804a3c2:	f041 0101 	orr.w	r1, r1, #1
 804a3c6:	f00b fe0e 	bl	8055fe6 <log_0>
}
 804a3ca:	4620      	mov	r0, r4
 804a3cc:	b003      	add	sp, #12
 804a3ce:	bd30      	pop	{r4, r5, pc}
	priv->status = DISK_STATUS_OK;
 804a3d0:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
	return 0;
 804a3d4:	e7f9      	b.n	804a3ca <stm32_sdmmc_access_init+0x76>
		return -ENODEV;
 804a3d6:	f06f 0412 	mvn.w	r4, #18
 804a3da:	e7f6      	b.n	804a3ca <stm32_sdmmc_access_init+0x76>
 804a3dc:	0805b844 	.word	0x0805b844
 804a3e0:	2002093c 	.word	0x2002093c
 804a3e4:	200208c8 	.word	0x200208c8
 804a3e8:	08061744 	.word	0x08061744
 804a3ec:	0806172e 	.word	0x0806172e

0804a3f0 <stm32_sdmmc_cd_handler>:
	if (!priv->cd.name) {
 804a3f0:	69c3      	ldr	r3, [r0, #28]

static void stm32_sdmmc_cd_handler(struct k_work *item)
{
 804a3f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 804a3f4:	4604      	mov	r4, r0
	if (!priv->cd.name) {
 804a3f6:	b923      	cbnz	r3, 804a402 <stm32_sdmmc_cd_handler+0x12>
						     struct stm32_sdmmc_priv,
						     work);

	if (stm32_sdmmc_card_present(priv)) {
		LOG_DBG("card inserted");
		priv->status = DISK_STATUS_UNINIT;
 804a3f8:	2301      	movs	r3, #1
	} else {
		LOG_DBG("card removed");
		stm32_sdmmc_access_deinit(priv);
		priv->status = DISK_STATUS_NOMEDIA;
 804a3fa:	f844 3c04 	str.w	r3, [r4, #-4]
	}
}
 804a3fe:	b003      	add	sp, #12
 804a400:	bd30      	pop	{r4, r5, pc}
	struct stm32_sdmmc_priv *priv = CONTAINER_OF(item,
 804a402:	f1a0 0588 	sub.w	r5, r0, #136	; 0x88
 804a406:	4628      	mov	r0, r5
 804a408:	f7ff ff72 	bl	804a2f0 <stm32_sdmmc_card_present.part.0>
	if (stm32_sdmmc_card_present(priv)) {
 804a40c:	2800      	cmp	r0, #0
 804a40e:	d1f3      	bne.n	804a3f8 <stm32_sdmmc_cd_handler+0x8>
	HAL_SD_DeInit(&priv->hsd);
 804a410:	4628      	mov	r0, r5
 804a412:	f00f fcbd 	bl	8059d90 <HAL_SD_DeInit>
				 (clock_control_subsys_t *)&priv->pclken);
 804a416:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 804a41a:	9101      	str	r1, [sp, #4]
 804a41c:	4d05      	ldr	r5, [pc, #20]	; (804a434 <stm32_sdmmc_cd_handler+0x44>)
 804a41e:	4628      	mov	r0, r5
 804a420:	f00f ff19 	bl	805a256 <z_device_ready>
 804a424:	b120      	cbz	r0, 804a430 <stm32_sdmmc_cd_handler+0x40>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 804a426:	68ab      	ldr	r3, [r5, #8]
 804a428:	4628      	mov	r0, r5
 804a42a:	9901      	ldr	r1, [sp, #4]
 804a42c:	685b      	ldr	r3, [r3, #4]
 804a42e:	4798      	blx	r3
		priv->status = DISK_STATUS_NOMEDIA;
 804a430:	2302      	movs	r3, #2
 804a432:	e7e2      	b.n	804a3fa <stm32_sdmmc_cd_handler+0xa>
 804a434:	0805b844 	.word	0x0805b844

0804a438 <disk_stm32_sdmmc_init>:
	gpio_pin_configure(priv->pe.port, priv->pe.pin, GPIO_DISCONNECTED);
	return 0;
}

static int disk_stm32_sdmmc_init(const struct device *dev)
{
 804a438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct stm32_sdmmc_priv *priv = dev->data;
 804a43a:	6904      	ldr	r4, [r0, #16]
{
 804a43c:	4606      	mov	r6, r0
	int err;

	k_work_init(&priv->work, stm32_sdmmc_cd_handler);
 804a43e:	4953      	ldr	r1, [pc, #332]	; (804a58c <disk_stm32_sdmmc_init+0x154>)
 804a440:	f104 0088 	add.w	r0, r4, #136	; 0x88
 804a444:	f010 f805 	bl	805a452 <k_work_init>

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(priv->pinctrl.list,
 804a448:	6822      	ldr	r2, [r4, #0]
 804a44a:	e9d4 0133 	ldrd	r0, r1, [r4, #204]	; 0xcc
 804a44e:	f00d f8aa 	bl	80575a6 <stm32_dt_pinctrl_configure>
					 priv->pinctrl.len,
					 (uint32_t)priv->hsd.Instance);
	if (err < 0) {
 804a452:	1e05      	subs	r5, r0, #0
 804a454:	db41      	blt.n	804a4da <disk_stm32_sdmmc_init+0xa2>
	if (!priv->cd.name) {
 804a456:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 804a45a:	2800      	cmp	r0, #0
 804a45c:	d03f      	beq.n	804a4de <disk_stm32_sdmmc_init+0xa6>
 804a45e:	f006 fe4d 	bl	80510fc <z_impl_device_get_binding>
	priv->cd.port = device_get_binding(priv->cd.name);
 804a462:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
	if (!priv->cd.port) {
 804a466:	2800      	cmp	r0, #0
 804a468:	f000 8089 	beq.w	804a57e <disk_stm32_sdmmc_init+0x146>
			   1 << priv->cd.pin);
 804a46c:	2201      	movs	r2, #1
 804a46e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 804a472:	6883      	ldr	r3, [r0, #8]
	gpio_init_callback(&priv->cd_cb, stm32_sdmmc_cd_callback,
 804a474:	f104 0798 	add.w	r7, r4, #152	; 0x98
			   1 << priv->cd.pin);
 804a478:	fa02 f101 	lsl.w	r1, r2, r1
	callback->handler = handler;
 804a47c:	4d44      	ldr	r5, [pc, #272]	; (804a590 <disk_stm32_sdmmc_init+0x158>)
	if (api->manage_callback == NULL) {
 804a47e:	69db      	ldr	r3, [r3, #28]
	callback->pin_mask = pin_mask;
 804a480:	e9c4 5127 	strd	r5, r1, [r4, #156]	; 0x9c
	if (api->manage_callback == NULL) {
 804a484:	2b00      	cmp	r3, #0
 804a486:	d07d      	beq.n	804a584 <disk_stm32_sdmmc_init+0x14c>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 804a488:	4639      	mov	r1, r7
 804a48a:	4798      	blx	r3
	if (err) {
 804a48c:	4605      	mov	r5, r0
 804a48e:	bb20      	cbnz	r0, 804a4da <disk_stm32_sdmmc_init+0xa2>
	err = gpio_pin_configure(priv->cd.port, priv->cd.pin,
 804a490:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 804a494:	f894 10ac 	ldrb.w	r1, [r4, #172]	; 0xac
 804a498:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 804a49c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 804a4a0:	f00d fa73 	bl	805798a <gpio_pin_configure>
	if (err) {
 804a4a4:	4605      	mov	r5, r0
 804a4a6:	b998      	cbnz	r0, 804a4d0 <disk_stm32_sdmmc_init+0x98>
	err = gpio_pin_interrupt_configure(priv->cd.port, priv->cd.pin,
 804a4a8:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 804a4ac:	f894 10ac 	ldrb.w	r1, [r4, #172]	; 0xac
	return api->pin_interrupt_configure(port, pin, mode, trig);
 804a4b0:	6883      	ldr	r3, [r0, #8]
 804a4b2:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 804a4b6:	699d      	ldr	r5, [r3, #24]
 804a4b8:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 804a4bc:	47a8      	blx	r5
	if (err) {
 804a4be:	4605      	mov	r5, r0
 804a4c0:	b168      	cbz	r0, 804a4de <disk_stm32_sdmmc_init+0xa6>
	gpio_pin_configure(priv->cd.port, priv->cd.pin, GPIO_DISCONNECTED);
 804a4c2:	2200      	movs	r2, #0
 804a4c4:	f894 10ac 	ldrb.w	r1, [r4, #172]	; 0xac
 804a4c8:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 804a4cc:	f00d fa5d 	bl	805798a <gpio_pin_configure>
	gpio_remove_callback(priv->cd.port, &priv->cd_cb);
 804a4d0:	4639      	mov	r1, r7
	gpio_remove_callback(priv->cd.port, &priv->cd_cb);
 804a4d2:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 804a4d6:	f00d faa2 	bl	8057a1e <gpio_remove_callback.isra.0>
err_pwr:
	stm32_sdmmc_pwr_uninit(priv);
err_card_detect:
	stm32_sdmmc_card_detect_uninit(priv);
	return err;
}
 804a4da:	4628      	mov	r0, r5
 804a4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!priv->pe.name) {
 804a4de:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 804a4e2:	b1a0      	cbz	r0, 804a50e <disk_stm32_sdmmc_init+0xd6>
 804a4e4:	f006 fe0a 	bl	80510fc <z_impl_device_get_binding>
	priv->pe.port = device_get_binding(priv->pe.name);
 804a4e8:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (!priv->pe.port) {
 804a4ec:	2800      	cmp	r0, #0
 804a4ee:	d043      	beq.n	804a578 <disk_stm32_sdmmc_init+0x140>
	err = gpio_pin_configure(priv->pe.port, priv->pe.pin,
 804a4f0:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
 804a4f4:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
 804a4f8:	f442 52d0 	orr.w	r2, r2, #6656	; 0x1a00
 804a4fc:	f00d fa45 	bl	805798a <gpio_pin_configure>
	if (err) {
 804a500:	4605      	mov	r5, r0
 804a502:	b9f8      	cbnz	r0, 804a544 <disk_stm32_sdmmc_init+0x10c>
	return z_impl_k_sleep(timeout);
 804a504:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 804a508:	2100      	movs	r1, #0
 804a50a:	f007 fecd 	bl	80522a8 <z_impl_k_sleep>
	if (!priv->cd.name) {
 804a50e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 804a512:	b11b      	cbz	r3, 804a51c <disk_stm32_sdmmc_init+0xe4>
 804a514:	4620      	mov	r0, r4
 804a516:	f7ff feeb 	bl	804a2f0 <stm32_sdmmc_card_present.part.0>
	if (stm32_sdmmc_card_present(priv)) {
 804a51a:	b358      	cbz	r0, 804a574 <disk_stm32_sdmmc_init+0x13c>
		priv->status = DISK_STATUS_UNINIT;
 804a51c:	2301      	movs	r3, #1
	stm32_sdmmc_info.dev = dev;
 804a51e:	481d      	ldr	r0, [pc, #116]	; (804a594 <disk_stm32_sdmmc_init+0x15c>)
 804a520:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 804a524:	6106      	str	r6, [r0, #16]
	err = disk_access_register(&stm32_sdmmc_info);
 804a526:	f7fd fc95 	bl	8047e54 <disk_access_register>
	if (err) {
 804a52a:	4605      	mov	r5, r0
 804a52c:	2800      	cmp	r0, #0
 804a52e:	d0d4      	beq.n	804a4da <disk_stm32_sdmmc_init+0xa2>
	if (!priv->pe.name) {
 804a530:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 804a534:	b133      	cbz	r3, 804a544 <disk_stm32_sdmmc_init+0x10c>
	gpio_pin_configure(priv->pe.port, priv->pe.pin, GPIO_DISCONNECTED);
 804a536:	2200      	movs	r2, #0
 804a538:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
 804a53c:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 804a540:	f00d fa23 	bl	805798a <gpio_pin_configure>
	if (!priv->cd.name) {
 804a544:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 804a548:	2b00      	cmp	r3, #0
 804a54a:	d0c6      	beq.n	804a4da <disk_stm32_sdmmc_init+0xa2>
	gpio_pin_interrupt_configure(priv->cd.port, priv->cd.pin,
 804a54c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 804a550:	f894 10ac 	ldrb.w	r1, [r4, #172]	; 0xac
 804a554:	6883      	ldr	r3, [r0, #8]
 804a556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 804a55a:	699e      	ldr	r6, [r3, #24]
 804a55c:	2300      	movs	r3, #0
 804a55e:	47b0      	blx	r6
	gpio_pin_configure(priv->cd.port, priv->cd.pin, GPIO_DISCONNECTED);
 804a560:	f894 10ac 	ldrb.w	r1, [r4, #172]	; 0xac
 804a564:	2200      	movs	r2, #0
 804a566:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 804a56a:	f00d fa0e 	bl	805798a <gpio_pin_configure>
	gpio_remove_callback(priv->cd.port, &priv->cd_cb);
 804a56e:	f104 0198 	add.w	r1, r4, #152	; 0x98
 804a572:	e7ae      	b.n	804a4d2 <disk_stm32_sdmmc_init+0x9a>
		priv->status = DISK_STATUS_NOMEDIA;
 804a574:	2302      	movs	r3, #2
 804a576:	e7d2      	b.n	804a51e <disk_stm32_sdmmc_init+0xe6>
		return -ENODEV;
 804a578:	f06f 0512 	mvn.w	r5, #18
 804a57c:	e7e2      	b.n	804a544 <disk_stm32_sdmmc_init+0x10c>
		return -ENODEV;
 804a57e:	f06f 0512 	mvn.w	r5, #18
 804a582:	e7aa      	b.n	804a4da <disk_stm32_sdmmc_init+0xa2>
		return -ENOTSUP;
 804a584:	f06f 0585 	mvn.w	r5, #133	; 0x85
 804a588:	e7a7      	b.n	804a4da <disk_stm32_sdmmc_init+0xa2>
 804a58a:	bf00      	nop
 804a58c:	0804a3f1 	.word	0x0804a3f1
 804a590:	08057a17 	.word	0x08057a17
 804a594:	20020164 	.word	0x20020164

0804a598 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
 804a598:	2811      	cmp	r0, #17
 804a59a:	d80e      	bhi.n	804a5ba <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
 804a59c:	4a08      	ldr	r2, [pc, #32]	; (804a5c0 <adc_gain_invert+0x28>)
 804a59e:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
 804a5a2:	b153      	cbz	r3, 804a5ba <adc_gain_invert+0x22>
 804a5a4:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 804a5a8:	7842      	ldrb	r2, [r0, #1]
 804a5aa:	b132      	cbz	r2, 804a5ba <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
 804a5ac:	6808      	ldr	r0, [r1, #0]
 804a5ae:	4343      	muls	r3, r0
			rv = 0;
 804a5b0:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
 804a5b2:	fb93 f3f2 	sdiv	r3, r3, r2
 804a5b6:	600b      	str	r3, [r1, #0]
			rv = 0;
 804a5b8:	4770      	bx	lr
	int rv = -EINVAL;
 804a5ba:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
 804a5be:	4770      	bx	lr
 804a5c0:	0806176a 	.word	0x0806176a

0804a5c4 <get_adc>:
} adc_list[] = {
	FOR_EACH(ADC_HDL_LIST_ENTRY, (,), INIT_MACRO())
};

static struct adc_hdl *get_adc(const char *device_label)
{
 804a5c4:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(adc_list); i++) {
		if (!strcmp(device_label, adc_list[i].device_label)) {
 804a5c6:	4c09      	ldr	r4, [pc, #36]	; (804a5ec <get_adc+0x28>)
{
 804a5c8:	4605      	mov	r5, r0
		if (!strcmp(device_label, adc_list[i].device_label)) {
 804a5ca:	6821      	ldr	r1, [r4, #0]
 804a5cc:	f7f6 f93a 	bl	8040844 <strcmp>
 804a5d0:	b128      	cbz	r0, 804a5de <get_adc+0x1a>
 804a5d2:	68e1      	ldr	r1, [r4, #12]
 804a5d4:	4628      	mov	r0, r5
 804a5d6:	f7f6 f935 	bl	8040844 <strcmp>
 804a5da:	b920      	cbnz	r0, 804a5e6 <get_adc+0x22>
	for (int i = 0; i < ARRAY_SIZE(adc_list); i++) {
 804a5dc:	2001      	movs	r0, #1
			return &adc_list[i];
 804a5de:	230c      	movs	r3, #12
 804a5e0:	fb03 4000 	mla	r0, r3, r0, r4
	}

	/* This will never happen because ADC was prompted by shell */
	__ASSERT_NO_MSG(false);
	return NULL;
}
 804a5e4:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
 804a5e6:	2000      	movs	r0, #0
 804a5e8:	e7fc      	b.n	804a5e4 <get_adc+0x20>
 804a5ea:	bf00      	nop
 804a5ec:	2002024c 	.word	0x2002024c

0804a5f0 <cmd_adc_print>:

	return retval;
}

static int cmd_adc_print(const struct shell *shell, size_t argc, char **argv)
{
 804a5f0:	b510      	push	{r4, lr}
 804a5f2:	4604      	mov	r4, r0
 804a5f4:	b086      	sub	sp, #24
	/* -1 index of ADC label name */
	struct adc_hdl *adc = get_adc(argv[-1]);
 804a5f6:	f852 0c04 	ldr.w	r0, [r2, #-4]
 804a5fa:	f7ff ffe3 	bl	804a5c4 <get_adc>

	shell_print(shell, "%s:\n"
 804a5fe:	7a82      	ldrb	r2, [r0, #10]
 804a600:	2100      	movs	r1, #0
 804a602:	9204      	str	r2, [sp, #16]
 804a604:	7a02      	ldrb	r2, [r0, #8]
 804a606:	f002 021f 	and.w	r2, r2, #31
 804a60a:	9203      	str	r2, [sp, #12]
 804a60c:	88c2      	ldrh	r2, [r0, #6]
 804a60e:	9202      	str	r2, [sp, #8]
 804a610:	4a05      	ldr	r2, [pc, #20]	; (804a628 <cmd_adc_print+0x38>)
 804a612:	9201      	str	r2, [sp, #4]
 804a614:	4a05      	ldr	r2, [pc, #20]	; (804a62c <cmd_adc_print+0x3c>)
 804a616:	9200      	str	r2, [sp, #0]
 804a618:	4a05      	ldr	r2, [pc, #20]	; (804a630 <cmd_adc_print+0x40>)
 804a61a:	6803      	ldr	r3, [r0, #0]
 804a61c:	4620      	mov	r0, r4
 804a61e:	f00c f94e 	bl	80568be <shell_fprintf>
			   chosen_reference,
			   adc->channel_config.acquisition_time,
			   adc->channel_config.channel_id,
			   adc->resolution);
	return 0;
}
 804a622:	2000      	movs	r0, #0
 804a624:	b006      	add	sp, #24
 804a626:	bd10      	pop	{r4, pc}
 804a628:	200207fd 	.word	0x200207fd
 804a62c:	200207e8 	.word	0x200207e8
 804a630:	0806178e 	.word	0x0806178e

0804a634 <cmd_adc_reso>:
{
 804a634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804a636:	4606      	mov	r6, r0
	struct adc_hdl *adc = get_adc(argv[-1]);
 804a638:	f852 0c04 	ldr.w	r0, [r2, #-4]
{
 804a63c:	4617      	mov	r7, r2
	struct adc_hdl *adc = get_adc(argv[-1]);
 804a63e:	f7ff ffc1 	bl	804a5c4 <get_adc>
 804a642:	4604      	mov	r4, r0
	adc_dev = device_get_binding(adc->device_label);
 804a644:	6800      	ldr	r0, [r0, #0]
 804a646:	f006 fd59 	bl	80510fc <z_impl_device_get_binding>
	if (adc_dev == NULL) {
 804a64a:	4605      	mov	r5, r0
 804a64c:	b938      	cbnz	r0, 804a65e <cmd_adc_reso+0x2a>
		shell_error(shell, "ADC device not found");
 804a64e:	4630      	mov	r0, r6
 804a650:	4a0f      	ldr	r2, [pc, #60]	; (804a690 <cmd_adc_reso+0x5c>)
 804a652:	2102      	movs	r1, #2
 804a654:	f00c f933 	bl	80568be <shell_fprintf>
		return -ENODEV;
 804a658:	f06f 0012 	mvn.w	r0, #18
}
 804a65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!isdigit((unsigned char)argv[1][0])) {
 804a65e:	6878      	ldr	r0, [r7, #4]
 804a660:	4b0c      	ldr	r3, [pc, #48]	; (804a694 <cmd_adc_reso+0x60>)
 804a662:	7802      	ldrb	r2, [r0, #0]
 804a664:	5cd3      	ldrb	r3, [r2, r3]
 804a666:	075b      	lsls	r3, r3, #29
 804a668:	d407      	bmi.n	804a67a <cmd_adc_reso+0x46>
		shell_error(shell, "<resolution> must be digits");
 804a66a:	4630      	mov	r0, r6
 804a66c:	4a0a      	ldr	r2, [pc, #40]	; (804a698 <cmd_adc_reso+0x64>)
 804a66e:	2102      	movs	r1, #2
 804a670:	f00c f925 	bl	80568be <shell_fprintf>
		return -EINVAL;
 804a674:	f06f 0015 	mvn.w	r0, #21
 804a678:	e7f0      	b.n	804a65c <cmd_adc_reso+0x28>
	adc->resolution = (uint8_t)strtol(argv[1], NULL, 10);
 804a67a:	2100      	movs	r1, #0
 804a67c:	220a      	movs	r2, #10
 804a67e:	f008 fc31 	bl	8052ee4 <strtol>
	retval = adc_channel_setup(adc_dev, &adc->channel_config);
 804a682:	1d21      	adds	r1, r4, #4
	adc->resolution = (uint8_t)strtol(argv[1], NULL, 10);
 804a684:	72a0      	strb	r0, [r4, #10]
	retval = adc_channel_setup(adc_dev, &adc->channel_config);
 804a686:	4628      	mov	r0, r5
}
 804a688:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	retval = adc_channel_setup(adc_dev, &adc->channel_config);
 804a68c:	f00d b9cd 	b.w	8057a2a <adc_channel_setup>
 804a690:	080617dd 	.word	0x080617dd
 804a694:	08063365 	.word	0x08063365
 804a698:	080617f3 	.word	0x080617f3

0804a69c <cmd_adc_dev_get>:
);

static void cmd_adc_dev_get(size_t idx, struct shell_static_entry *entry)
{
	/* -1 because the last element in the list is a "list terminator" */
	if (idx < ARRAY_SIZE(adc_list) - 1) {
 804a69c:	b940      	cbnz	r0, 804a6b0 <cmd_adc_dev_get+0x14>
		entry->syntax  = adc_list[idx].device_label;
 804a69e:	4b06      	ldr	r3, [pc, #24]	; (804a6b8 <cmd_adc_dev_get+0x1c>)
		entry->handler = NULL;
 804a6a0:	60c8      	str	r0, [r1, #12]
		entry->syntax  = adc_list[idx].device_label;
 804a6a2:	681b      	ldr	r3, [r3, #0]
 804a6a4:	600b      	str	r3, [r1, #0]
		entry->subcmd  = &sub_adc_cmds;
 804a6a6:	4b05      	ldr	r3, [pc, #20]	; (804a6bc <cmd_adc_dev_get+0x20>)
 804a6a8:	608b      	str	r3, [r1, #8]
		entry->help    = "Select subcommand for ADC property label.\n";
 804a6aa:	4b05      	ldr	r3, [pc, #20]	; (804a6c0 <cmd_adc_dev_get+0x24>)
 804a6ac:	604b      	str	r3, [r1, #4]
	} else {
		entry->syntax  = NULL;
	}
}
 804a6ae:	4770      	bx	lr
		entry->syntax  = NULL;
 804a6b0:	2300      	movs	r3, #0
 804a6b2:	600b      	str	r3, [r1, #0]
}
 804a6b4:	4770      	bx	lr
 804a6b6:	bf00      	nop
 804a6b8:	2002024c 	.word	0x2002024c
 804a6bc:	0805d774 	.word	0x0805d774
 804a6c0:	08061810 	.word	0x08061810

0804a6c4 <cmd_adc_gain.constprop.0>:
static int cmd_adc_gain(const struct shell *shell, size_t argc, char **argv,
 804a6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804a6c8:	4616      	mov	r6, r2
 804a6ca:	4680      	mov	r8, r0
	struct adc_hdl *adc = get_adc(argv[-2]);
 804a6cc:	f851 0c08 	ldr.w	r0, [r1, #-8]
static int cmd_adc_gain(const struct shell *shell, size_t argc, char **argv,
 804a6d0:	460c      	mov	r4, r1
	enum adc_gain gain = (enum adc_gain)data;
 804a6d2:	b2f6      	uxtb	r6, r6
	struct adc_hdl *adc = get_adc(argv[-2]);
 804a6d4:	f7ff ff76 	bl	804a5c4 <get_adc>
 804a6d8:	4605      	mov	r5, r0
	adc_dev = device_get_binding(adc->device_label);
 804a6da:	6800      	ldr	r0, [r0, #0]
 804a6dc:	f006 fd0e 	bl	80510fc <z_impl_device_get_binding>
	if (adc_dev == NULL) {
 804a6e0:	4607      	mov	r7, r0
 804a6e2:	b1e0      	cbz	r0, 804a71e <cmd_adc_gain.constprop.0+0x5a>
	adc->channel_config.gain = gain;
 804a6e4:	712e      	strb	r6, [r5, #4]
	int len = strlen(argv[0]) > CHOSEN_STR_LEN ? CHOSEN_STR_LEN
 804a6e6:	6820      	ldr	r0, [r4, #0]
 804a6e8:	f7f6 f8b6 	bl	8040858 <strlen>
						   : strlen(argv[0]);
 804a6ec:	2814      	cmp	r0, #20
 804a6ee:	d814      	bhi.n	804a71a <cmd_adc_gain.constprop.0+0x56>
 804a6f0:	6820      	ldr	r0, [r4, #0]
 804a6f2:	f7f6 f8b1 	bl	8040858 <strlen>
 804a6f6:	4606      	mov	r6, r0
	memcpy(chosen_gain, argv[0], len);
 804a6f8:	f8df 8038 	ldr.w	r8, [pc, #56]	; 804a734 <cmd_adc_gain.constprop.0+0x70>
 804a6fc:	2315      	movs	r3, #21
 804a6fe:	6821      	ldr	r1, [r4, #0]
 804a700:	4632      	mov	r2, r6
 804a702:	4640      	mov	r0, r8
 804a704:	f010 fb75 	bl	805adf2 <__memcpy_chk>
	chosen_gain[len] = '\0';
 804a708:	2300      	movs	r3, #0
	retval = adc_channel_setup(adc_dev, &adc->channel_config);
 804a70a:	1d29      	adds	r1, r5, #4
 804a70c:	4638      	mov	r0, r7
	chosen_gain[len] = '\0';
 804a70e:	f808 3006 	strb.w	r3, [r8, r6]
}
 804a712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	retval = adc_channel_setup(adc_dev, &adc->channel_config);
 804a716:	f00d b988 	b.w	8057a2a <adc_channel_setup>
						   : strlen(argv[0]);
 804a71a:	2614      	movs	r6, #20
 804a71c:	e7ec      	b.n	804a6f8 <cmd_adc_gain.constprop.0+0x34>
		shell_error(shell, "ADC device not found");
 804a71e:	4640      	mov	r0, r8
 804a720:	4a03      	ldr	r2, [pc, #12]	; (804a730 <cmd_adc_gain.constprop.0+0x6c>)
 804a722:	2102      	movs	r1, #2
 804a724:	f00c f8cb 	bl	80568be <shell_fprintf>
}
 804a728:	f06f 0012 	mvn.w	r0, #18
 804a72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804a730:	080617dd 	.word	0x080617dd
 804a734:	200207e8 	.word	0x200207e8

0804a738 <cmd_adc_ref.constprop.0>:
static int cmd_adc_ref(const struct shell *shell, size_t argc, char **argv,
 804a738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804a73c:	4616      	mov	r6, r2
 804a73e:	4607      	mov	r7, r0
	struct adc_hdl *adc = get_adc(argv[-2]);
 804a740:	f851 0c08 	ldr.w	r0, [r1, #-8]
static int cmd_adc_ref(const struct shell *shell, size_t argc, char **argv,
 804a744:	460c      	mov	r4, r1
	enum adc_reference reference = (enum adc_reference)data;
 804a746:	b2f6      	uxtb	r6, r6
	struct adc_hdl *adc = get_adc(argv[-2]);
 804a748:	f7ff ff3c 	bl	804a5c4 <get_adc>
 804a74c:	4605      	mov	r5, r0
	adc_dev = device_get_binding(adc->device_label);
 804a74e:	6800      	ldr	r0, [r0, #0]
 804a750:	f006 fcd4 	bl	80510fc <z_impl_device_get_binding>
	if (adc_dev == NULL) {
 804a754:	4680      	mov	r8, r0
 804a756:	b1e0      	cbz	r0, 804a792 <cmd_adc_ref.constprop.0+0x5a>
	int len = strlen(argv[0]) > CHOSEN_STR_LEN ? CHOSEN_STR_LEN
 804a758:	6820      	ldr	r0, [r4, #0]
 804a75a:	f7f6 f87d 	bl	8040858 <strlen>
						   : strlen(argv[0]);
 804a75e:	2814      	cmp	r0, #20
 804a760:	d815      	bhi.n	804a78e <cmd_adc_ref.constprop.0+0x56>
 804a762:	6820      	ldr	r0, [r4, #0]
 804a764:	f7f6 f878 	bl	8040858 <strlen>
 804a768:	4607      	mov	r7, r0
	memcpy(chosen_reference, argv[0], len);
 804a76a:	f8df 903c 	ldr.w	r9, [pc, #60]	; 804a7a8 <cmd_adc_ref.constprop.0+0x70>
 804a76e:	2315      	movs	r3, #21
 804a770:	6821      	ldr	r1, [r4, #0]
 804a772:	463a      	mov	r2, r7
 804a774:	4648      	mov	r0, r9
 804a776:	f010 fb3c 	bl	805adf2 <__memcpy_chk>
	chosen_reference[len] = '\0';
 804a77a:	2300      	movs	r3, #0
	retval = adc_channel_setup(adc_dev, &adc->channel_config);
 804a77c:	1d29      	adds	r1, r5, #4
 804a77e:	4640      	mov	r0, r8
	chosen_reference[len] = '\0';
 804a780:	f809 3007 	strb.w	r3, [r9, r7]
	adc->channel_config.reference = reference;
 804a784:	716e      	strb	r6, [r5, #5]
}
 804a786:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	retval = adc_channel_setup(adc_dev, &adc->channel_config);
 804a78a:	f00d b94e 	b.w	8057a2a <adc_channel_setup>
						   : strlen(argv[0]);
 804a78e:	2714      	movs	r7, #20
 804a790:	e7eb      	b.n	804a76a <cmd_adc_ref.constprop.0+0x32>
		shell_error(shell, "ADC device not found");
 804a792:	4638      	mov	r0, r7
 804a794:	4a03      	ldr	r2, [pc, #12]	; (804a7a4 <cmd_adc_ref.constprop.0+0x6c>)
 804a796:	2102      	movs	r1, #2
 804a798:	f00c f891 	bl	80568be <shell_fprintf>
}
 804a79c:	f06f 0012 	mvn.w	r0, #18
 804a7a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804a7a4:	080617dd 	.word	0x080617dd
 804a7a8:	200207fd 	.word	0x200207fd

0804a7ac <cmd_adc_acq>:
{
 804a7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804a7ae:	4604      	mov	r4, r0
	struct adc_hdl *adc = get_adc(argv[-1]);
 804a7b0:	f852 0c04 	ldr.w	r0, [r2, #-4]
{
 804a7b4:	4617      	mov	r7, r2
	struct adc_hdl *adc = get_adc(argv[-1]);
 804a7b6:	f7ff ff05 	bl	804a5c4 <get_adc>
 804a7ba:	4605      	mov	r5, r0
	adc_dev = device_get_binding(adc->device_label);
 804a7bc:	6800      	ldr	r0, [r0, #0]
 804a7be:	f006 fc9d 	bl	80510fc <z_impl_device_get_binding>
	if (adc_dev == NULL) {
 804a7c2:	4606      	mov	r6, r0
 804a7c4:	b938      	cbnz	r0, 804a7d6 <cmd_adc_acq+0x2a>
		shell_error(shell, "ADC device not found");
 804a7c6:	4620      	mov	r0, r4
 804a7c8:	4a21      	ldr	r2, [pc, #132]	; (804a850 <cmd_adc_acq+0xa4>)
 804a7ca:	2102      	movs	r1, #2
 804a7cc:	f00c f877 	bl	80568be <shell_fprintf>
		return -ENODEV;
 804a7d0:	f06f 0012 	mvn.w	r0, #18
}
 804a7d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!isdigit((unsigned char)argv[1][0])) {
 804a7d6:	6878      	ldr	r0, [r7, #4]
 804a7d8:	4b1e      	ldr	r3, [pc, #120]	; (804a854 <cmd_adc_acq+0xa8>)
 804a7da:	7802      	ldrb	r2, [r0, #0]
 804a7dc:	5cd3      	ldrb	r3, [r2, r3]
 804a7de:	075b      	lsls	r3, r3, #29
 804a7e0:	d407      	bmi.n	804a7f2 <cmd_adc_acq+0x46>
		shell_error(shell, "<time> must be digits");
 804a7e2:	4620      	mov	r0, r4
 804a7e4:	4a1c      	ldr	r2, [pc, #112]	; (804a858 <cmd_adc_acq+0xac>)
 804a7e6:	2102      	movs	r1, #2
 804a7e8:	f00c f869 	bl	80568be <shell_fprintf>
		return -EINVAL;
 804a7ec:	f06f 0015 	mvn.w	r0, #21
 804a7f0:	e7f0      	b.n	804a7d4 <cmd_adc_acq+0x28>
	acq_time = (uint16_t)strtol(argv[1], NULL, 10);
 804a7f2:	2100      	movs	r1, #0
 804a7f4:	220a      	movs	r2, #10
 804a7f6:	f008 fb75 	bl	8052ee4 <strtol>
	if (!strcmp(argv[2], "us")) {
 804a7fa:	4918      	ldr	r1, [pc, #96]	; (804a85c <cmd_adc_acq+0xb0>)
	acq_time = (uint16_t)strtol(argv[1], NULL, 10);
 804a7fc:	b284      	uxth	r4, r0
	if (!strcmp(argv[2], "us")) {
 804a7fe:	68b8      	ldr	r0, [r7, #8]
 804a800:	f7f6 f820 	bl	8040844 <strcmp>
 804a804:	b950      	cbnz	r0, 804a81c <cmd_adc_acq+0x70>
			ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, acq_time);
 804a806:	f3c4 040d 	ubfx	r4, r4, #0, #14
 804a80a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
		adc->channel_config.acquisition_time =
 804a80e:	80ec      	strh	r4, [r5, #6]
	retval = adc_channel_setup(adc_dev, &adc->channel_config);
 804a810:	1d29      	adds	r1, r5, #4
 804a812:	4630      	mov	r0, r6
}
 804a814:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	retval = adc_channel_setup(adc_dev, &adc->channel_config);
 804a818:	f00d b907 	b.w	8057a2a <adc_channel_setup>
	} else if (!strcmp(argv[2], "ns")) {
 804a81c:	4910      	ldr	r1, [pc, #64]	; (804a860 <cmd_adc_acq+0xb4>)
 804a81e:	68b8      	ldr	r0, [r7, #8]
 804a820:	f7f6 f810 	bl	8040844 <strcmp>
 804a824:	b930      	cbnz	r0, 804a834 <cmd_adc_acq+0x88>
			ADC_ACQ_TIME(ADC_ACQ_TIME_NANOSECONDS, acq_time);
 804a826:	f3c4 040d 	ubfx	r4, r4, #0, #14
 804a82a:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 804a82e:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 804a832:	e7ec      	b.n	804a80e <cmd_adc_acq+0x62>
	} else if (!strcmp(argv[2], "ticks")) {
 804a834:	490b      	ldr	r1, [pc, #44]	; (804a864 <cmd_adc_acq+0xb8>)
 804a836:	68b8      	ldr	r0, [r7, #8]
 804a838:	f7f6 f804 	bl	8040844 <strcmp>
 804a83c:	b920      	cbnz	r0, 804a848 <cmd_adc_acq+0x9c>
			ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, acq_time);
 804a83e:	ea6f 4484 	mvn.w	r4, r4, lsl #18
 804a842:	ea6f 4494 	mvn.w	r4, r4, lsr #18
 804a846:	e7e2      	b.n	804a80e <cmd_adc_acq+0x62>
		adc->channel_config.acquisition_time =
 804a848:	2300      	movs	r3, #0
 804a84a:	80eb      	strh	r3, [r5, #6]
 804a84c:	e7e0      	b.n	804a810 <cmd_adc_acq+0x64>
 804a84e:	bf00      	nop
 804a850:	080617dd 	.word	0x080617dd
 804a854:	08063365 	.word	0x08063365
 804a858:	0806183b 	.word	0x0806183b
 804a85c:	08061d5b 	.word	0x08061d5b
 804a860:	08060e0c 	.word	0x08060e0c
 804a864:	08061852 	.word	0x08061852

0804a868 <cmd_adc_ch_id>:
{
 804a868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804a86a:	4606      	mov	r6, r0
	struct adc_hdl *adc = get_adc(argv[-2]);
 804a86c:	f852 0c08 	ldr.w	r0, [r2, #-8]
{
 804a870:	4617      	mov	r7, r2
	struct adc_hdl *adc = get_adc(argv[-2]);
 804a872:	f7ff fea7 	bl	804a5c4 <get_adc>
 804a876:	4604      	mov	r4, r0
	adc_dev = device_get_binding(adc->device_label);
 804a878:	6800      	ldr	r0, [r0, #0]
 804a87a:	f006 fc3f 	bl	80510fc <z_impl_device_get_binding>
	if (adc_dev == NULL) {
 804a87e:	4605      	mov	r5, r0
 804a880:	b938      	cbnz	r0, 804a892 <cmd_adc_ch_id+0x2a>
		shell_error(shell, "ADC device not found");
 804a882:	4630      	mov	r0, r6
 804a884:	4a11      	ldr	r2, [pc, #68]	; (804a8cc <cmd_adc_ch_id+0x64>)
 804a886:	2102      	movs	r1, #2
 804a888:	f00c f819 	bl	80568be <shell_fprintf>
		return -ENODEV;
 804a88c:	f06f 0012 	mvn.w	r0, #18
}
 804a890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!isdigit((unsigned char)argv[1][0])) {
 804a892:	6878      	ldr	r0, [r7, #4]
 804a894:	4b0e      	ldr	r3, [pc, #56]	; (804a8d0 <cmd_adc_ch_id+0x68>)
 804a896:	7802      	ldrb	r2, [r0, #0]
 804a898:	5cd3      	ldrb	r3, [r2, r3]
 804a89a:	075b      	lsls	r3, r3, #29
 804a89c:	d407      	bmi.n	804a8ae <cmd_adc_ch_id+0x46>
		shell_error(shell, "<channel> must be digits");
 804a89e:	4630      	mov	r0, r6
 804a8a0:	4a0c      	ldr	r2, [pc, #48]	; (804a8d4 <cmd_adc_ch_id+0x6c>)
 804a8a2:	2102      	movs	r1, #2
 804a8a4:	f00c f80b 	bl	80568be <shell_fprintf>
		return -EINVAL;
 804a8a8:	f06f 0015 	mvn.w	r0, #21
 804a8ac:	e7f0      	b.n	804a890 <cmd_adc_ch_id+0x28>
	adc->channel_config.channel_id = (uint8_t)strtol(argv[1], NULL, 10);
 804a8ae:	2100      	movs	r1, #0
 804a8b0:	220a      	movs	r2, #10
 804a8b2:	f008 fb17 	bl	8052ee4 <strtol>
 804a8b6:	7a23      	ldrb	r3, [r4, #8]
	retval = adc_channel_setup(adc_dev, &adc->channel_config);
 804a8b8:	1d21      	adds	r1, r4, #4
	adc->channel_config.channel_id = (uint8_t)strtol(argv[1], NULL, 10);
 804a8ba:	f360 0304 	bfi	r3, r0, #0, #5
	retval = adc_channel_setup(adc_dev, &adc->channel_config);
 804a8be:	4628      	mov	r0, r5
	adc->channel_config.channel_id = (uint8_t)strtol(argv[1], NULL, 10);
 804a8c0:	7223      	strb	r3, [r4, #8]
}
 804a8c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	retval = adc_channel_setup(adc_dev, &adc->channel_config);
 804a8c6:	f00d b8b0 	b.w	8057a2a <adc_channel_setup>
 804a8ca:	bf00      	nop
 804a8cc:	080617dd 	.word	0x080617dd
 804a8d0:	08063365 	.word	0x08063365
 804a8d4:	08061858 	.word	0x08061858

0804a8d8 <cmd_adc_read>:
{
 804a8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 804a8da:	4614      	mov	r4, r2
 804a8dc:	b087      	sub	sp, #28
	uint8_t adc_channel_id = strtol(argv[1], NULL, 10);
 804a8de:	220a      	movs	r2, #10
 804a8e0:	2100      	movs	r1, #0
{
 804a8e2:	4607      	mov	r7, r0
	uint8_t adc_channel_id = strtol(argv[1], NULL, 10);
 804a8e4:	6860      	ldr	r0, [r4, #4]
 804a8e6:	f008 fafd 	bl	8052ee4 <strtol>
 804a8ea:	4605      	mov	r5, r0
	struct adc_hdl *adc = get_adc(argv[-1]);
 804a8ec:	f854 0c04 	ldr.w	r0, [r4, #-4]
 804a8f0:	f7ff fe68 	bl	804a5c4 <get_adc>
 804a8f4:	4604      	mov	r4, r0
	adc_dev = device_get_binding(adc->device_label);
 804a8f6:	6800      	ldr	r0, [r0, #0]
 804a8f8:	f006 fc00 	bl	80510fc <z_impl_device_get_binding>
	if (adc_dev == NULL) {
 804a8fc:	4606      	mov	r6, r0
 804a8fe:	b948      	cbnz	r0, 804a914 <cmd_adc_read+0x3c>
		return -ENODEV;
 804a900:	f06f 0412 	mvn.w	r4, #18
		shell_error(shell, "adc device not found");
 804a904:	4a16      	ldr	r2, [pc, #88]	; (804a960 <cmd_adc_read+0x88>)
 804a906:	2102      	movs	r1, #2
 804a908:	4638      	mov	r0, r7
 804a90a:	f00b ffd8 	bl	80568be <shell_fprintf>
}
 804a90e:	4620      	mov	r0, r4
 804a910:	b007      	add	sp, #28
 804a912:	bdf0      	pop	{r4, r5, r6, r7, pc}
	adc->channel_config.channel_id = adc_channel_id;
 804a914:	7a23      	ldrb	r3, [r4, #8]
	const struct adc_sequence sequence = {
 804a916:	2214      	movs	r2, #20
 804a918:	2100      	movs	r1, #0
 804a91a:	a801      	add	r0, sp, #4
	adc->channel_config.channel_id = adc_channel_id;
 804a91c:	f365 0304 	bfi	r3, r5, #0, #5
		.channels	= BIT(adc->channel_config.channel_id),
 804a920:	f005 051f 	and.w	r5, r5, #31
	adc->channel_config.channel_id = adc_channel_id;
 804a924:	7223      	strb	r3, [r4, #8]
	const struct adc_sequence sequence = {
 804a926:	f010 fa91 	bl	805ae4c <memset>
		.channels	= BIT(adc->channel_config.channel_id),
 804a92a:	2001      	movs	r0, #1
	const struct adc_sequence sequence = {
 804a92c:	2302      	movs	r3, #2
 804a92e:	f8cd d00c 	str.w	sp, [sp, #12]
		.channels	= BIT(adc->channel_config.channel_id),
 804a932:	fa00 f505 	lsl.w	r5, r0, r5
	const struct adc_sequence sequence = {
 804a936:	9304      	str	r3, [sp, #16]
 804a938:	7aa3      	ldrb	r3, [r4, #10]
 804a93a:	9502      	str	r5, [sp, #8]
 804a93c:	f88d 3014 	strb.w	r3, [sp, #20]
	return api->read(dev, sequence);
 804a940:	68b3      	ldr	r3, [r6, #8]
 804a942:	a901      	add	r1, sp, #4
 804a944:	4630      	mov	r0, r6
 804a946:	685b      	ldr	r3, [r3, #4]
 804a948:	4798      	blx	r3
	if (retval >= 0) {
 804a94a:	1e04      	subs	r4, r0, #0
 804a94c:	dbdf      	blt.n	804a90e <cmd_adc_read+0x36>
		shell_print(shell, "read: %i", m_sample_buffer[0]);
 804a94e:	f8bd 3000 	ldrh.w	r3, [sp]
 804a952:	2100      	movs	r1, #0
 804a954:	4a03      	ldr	r2, [pc, #12]	; (804a964 <cmd_adc_read+0x8c>)
 804a956:	4638      	mov	r0, r7
 804a958:	f00b ffb1 	bl	80568be <shell_fprintf>
 804a95c:	e7d7      	b.n	804a90e <cmd_adc_read+0x36>
 804a95e:	bf00      	nop
 804a960:	08061872 	.word	0x08061872
 804a964:	08061888 	.word	0x08061888

0804a968 <adc_stm32_read>:
	LOG_DBG("ISR triggered.");
}

static int adc_stm32_read(const struct device *dev,
			  const struct adc_sequence *sequence)
{
 804a968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

static inline void adc_context_lock(struct adc_context *ctx,
				    bool asynchronous,
				    struct k_poll_signal *signal)
{
	k_sem_take(&ctx->lock, K_FOREVER);
 804a96a:	6906      	ldr	r6, [r0, #16]
 804a96c:	4607      	mov	r7, r0
 804a96e:	460d      	mov	r5, r1
 804a970:	3640      	adds	r6, #64	; 0x40
	return z_impl_k_sem_take(sem, timeout);
 804a972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804a976:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804a97a:	4630      	mov	r0, r6
 804a97c:	f007 f8d8 	bl	8051b30 <z_impl_k_sem_take>
	switch (sequence->resolution) {
 804a980:	7c2b      	ldrb	r3, [r5, #16]
 804a982:	3b06      	subs	r3, #6
 804a984:	2b06      	cmp	r3, #6
 804a986:	d805      	bhi.n	804a994 <adc_stm32_read+0x2c>
 804a988:	e8df f003 	tbb	[pc, r3]
 804a98c:	04140414 	.word	0x04140414
 804a990:	0414      	.short	0x0414
 804a992:	14          	.byte	0x14
 804a993:	00          	.byte	0x00
		LOG_ERR("Invalid resolution");
 804a994:	496f      	ldr	r1, [pc, #444]	; (804ab54 <adc_stm32_read+0x1ec>)
 804a996:	680b      	ldr	r3, [r1, #0]
 804a998:	075d      	lsls	r5, r3, #29
 804a99a:	d008      	beq.n	804a9ae <adc_stm32_read+0x46>
 804a99c:	4b6e      	ldr	r3, [pc, #440]	; (804ab58 <adc_stm32_read+0x1f0>)
 804a99e:	486f      	ldr	r0, [pc, #444]	; (804ab5c <adc_stm32_read+0x1f4>)
 804a9a0:	1ac9      	subs	r1, r1, r3
 804a9a2:	0889      	lsrs	r1, r1, #2
 804a9a4:	0189      	lsls	r1, r1, #6
 804a9a6:	f041 0101 	orr.w	r1, r1, #1
 804a9aa:	f00b fb1c 	bl	8055fe6 <log_0>
		return -EINVAL;
 804a9ae:	f06f 0415 	mvn.w	r4, #21
 804a9b2:	e011      	b.n	804a9d8 <adc_stm32_read+0x70>
	uint32_t channels = sequence->channels;
 804a9b4:	6869      	ldr	r1, [r5, #4]
	if (channels > BIT(index)) {
 804a9b6:	2201      	movs	r2, #1
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
 804a9b8:	2900      	cmp	r1, #0
 804a9ba:	fa91 f3a1 	rbit	r3, r1
 804a9be:	fab3 f383 	clz	r3, r3
	uint8_t index = find_lsb_set(channels) - 1;
 804a9c2:	bf08      	it	eq
 804a9c4:	23ff      	moveq	r3, #255	; 0xff
	if (channels > BIT(index)) {
 804a9c6:	409a      	lsls	r2, r3
 804a9c8:	4291      	cmp	r1, r2
 804a9ca:	d915      	bls.n	804a9f8 <adc_stm32_read+0x90>
		LOG_ERR("Only single channel supported");
 804a9cc:	4961      	ldr	r1, [pc, #388]	; (804ab54 <adc_stm32_read+0x1ec>)
 804a9ce:	680b      	ldr	r3, [r1, #0]
 804a9d0:	075c      	lsls	r4, r3, #29
 804a9d2:	d107      	bne.n	804a9e4 <adc_stm32_read+0x7c>
		return -ENOTSUP;
 804a9d4:	f06f 0485 	mvn.w	r4, #133	; 0x85
	z_impl_k_sem_give(sem);
 804a9d8:	4630      	mov	r0, r6
 804a9da:	f007 f883 	bl	8051ae4 <z_impl_k_sem_give>
	adc_context_lock(&data->ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&data->ctx, error);

	return error;
}
 804a9de:	4620      	mov	r0, r4
 804a9e0:	b003      	add	sp, #12
 804a9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804a9e4:	4b5c      	ldr	r3, [pc, #368]	; (804ab58 <adc_stm32_read+0x1f0>)
		LOG_ERR("Only single channel supported");
 804a9e6:	485e      	ldr	r0, [pc, #376]	; (804ab60 <adc_stm32_read+0x1f8>)
 804a9e8:	1ac9      	subs	r1, r1, r3
 804a9ea:	0889      	lsrs	r1, r1, #2
 804a9ec:	0189      	lsls	r1, r1, #6
 804a9ee:	f041 0101 	orr.w	r1, r1, #1
 804a9f2:	f00b faf8 	bl	8055fe6 <log_0>
 804a9f6:	e7ed      	b.n	804a9d4 <adc_stm32_read+0x6c>
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 804a9f8:	687a      	ldr	r2, [r7, #4]
	uint32_t channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL(index);
 804a9fa:	2b09      	cmp	r3, #9
	struct adc_stm32_data *data = dev->data;
 804a9fc:	693c      	ldr	r4, [r7, #16]
{
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 804a9fe:	f44f 7700 	mov.w	r7, #512	; 0x200
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 804aa02:	6810      	ldr	r0, [r2, #0]
	data->buffer = sequence->buffer;
 804aa04:	68aa      	ldr	r2, [r5, #8]
 804aa06:	f100 012c 	add.w	r1, r0, #44	; 0x2c
 804aa0a:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
	uint32_t channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL(index);
 804aa0e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 804aa12:	bf8a      	itet	hi
 804aa14:	3a1e      	subhi	r2, #30
 804aa16:	ea43 5302 	orrls.w	r3, r3, r2, lsl #20
 804aa1a:	ea43 5302 	orrhi.w	r3, r3, r2, lsl #20
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804aa1e:	f44f 7240 	mov.w	r2, #768	; 0x300
 804aa22:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 804aa26:	fab2 f282 	clz	r2, r2
 804aa2a:	bf98      	it	ls
 804aa2c:	f043 7300 	orrls.w	r3, r3, #33554432	; 0x2000000
 804aa30:	40d7      	lsrs	r7, r2

  MODIFY_REG(*preg,
 804aa32:	f003 031f 	and.w	r3, r3, #31
 804aa36:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 804aa3a:	f022 021f 	bic.w	r2, r2, #31
 804aa3e:	4313      	orrs	r3, r2
 804aa40:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 804aa44:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 804aa46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 804aa4a:	62c3      	str	r3, [r0, #44]	; 0x2c
	data->channel_count = 1;
 804aa4c:	2301      	movs	r3, #1
 804aa4e:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
	if (sequence->options) {
 804aa52:	682b      	ldr	r3, [r5, #0]
 804aa54:	b1bb      	cbz	r3, 804aa86 <adc_stm32_read+0x11e>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
 804aa56:	899a      	ldrh	r2, [r3, #12]
 804aa58:	3201      	adds	r2, #1
 804aa5a:	0052      	lsls	r2, r2, #1
	if (sequence->buffer_size < needed_buffer_size) {
 804aa5c:	68e9      	ldr	r1, [r5, #12]
 804aa5e:	4291      	cmp	r1, r2
 804aa60:	d313      	bcc.n	804aa8a <adc_stm32_read+0x122>
  MODIFY_REG(ADCx->CR1, ADC_CR1_RES, Resolution);
 804aa62:	6843      	ldr	r3, [r0, #4]
 804aa64:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 804aa68:	6043      	str	r3, [r0, #4]
	if (sequence->oversampling) {
 804aa6a:	7c6b      	ldrb	r3, [r5, #17]
 804aa6c:	b1eb      	cbz	r3, 804aaaa <adc_stm32_read+0x142>
		LOG_ERR("Oversampling not supported");
 804aa6e:	4939      	ldr	r1, [pc, #228]	; (804ab54 <adc_stm32_read+0x1ec>)
 804aa70:	680b      	ldr	r3, [r1, #0]
 804aa72:	075a      	lsls	r2, r3, #29
 804aa74:	d0ae      	beq.n	804a9d4 <adc_stm32_read+0x6c>
 804aa76:	4b38      	ldr	r3, [pc, #224]	; (804ab58 <adc_stm32_read+0x1f0>)
 804aa78:	483a      	ldr	r0, [pc, #232]	; (804ab64 <adc_stm32_read+0x1fc>)
 804aa7a:	1ac9      	subs	r1, r1, r3
 804aa7c:	0889      	lsrs	r1, r1, #2
 804aa7e:	0189      	lsls	r1, r1, #6
 804aa80:	f041 0101 	orr.w	r1, r1, #1
 804aa84:	e7b5      	b.n	804a9f2 <adc_stm32_read+0x8a>
	needed_buffer_size = active_channels * sizeof(uint16_t);
 804aa86:	2202      	movs	r2, #2
 804aa88:	e7e8      	b.n	804aa5c <adc_stm32_read+0xf4>
		LOG_ERR("Provided buffer is too small (%u/%u)",
 804aa8a:	4b32      	ldr	r3, [pc, #200]	; (804ab54 <adc_stm32_read+0x1ec>)
 804aa8c:	6818      	ldr	r0, [r3, #0]
 804aa8e:	0740      	lsls	r0, r0, #29
 804aa90:	d008      	beq.n	804aaa4 <adc_stm32_read+0x13c>
 804aa92:	4831      	ldr	r0, [pc, #196]	; (804ab58 <adc_stm32_read+0x1f0>)
 804aa94:	1a1b      	subs	r3, r3, r0
 804aa96:	4834      	ldr	r0, [pc, #208]	; (804ab68 <adc_stm32_read+0x200>)
 804aa98:	089b      	lsrs	r3, r3, #2
 804aa9a:	019b      	lsls	r3, r3, #6
 804aa9c:	f043 0301 	orr.w	r3, r3, #1
 804aaa0:	f00b fac7 	bl	8056032 <log_2>
		return -ENOMEM;
 804aaa4:	f06f 040b 	mvn.w	r4, #11
 804aaa8:	e796      	b.n	804a9d8 <adc_stm32_read+0x70>
	if (sequence->calibrate) {
 804aaaa:	f895 e012 	ldrb.w	lr, [r5, #18]
 804aaae:	f1be 0f00 	cmp.w	lr, #0
 804aab2:	d00b      	beq.n	804aacc <adc_stm32_read+0x164>
		LOG_ERR("Calibration not supported");
 804aab4:	4927      	ldr	r1, [pc, #156]	; (804ab54 <adc_stm32_read+0x1ec>)
 804aab6:	680b      	ldr	r3, [r1, #0]
 804aab8:	075b      	lsls	r3, r3, #29
 804aaba:	d08b      	beq.n	804a9d4 <adc_stm32_read+0x6c>
 804aabc:	4b26      	ldr	r3, [pc, #152]	; (804ab58 <adc_stm32_read+0x1f0>)
 804aabe:	482b      	ldr	r0, [pc, #172]	; (804ab6c <adc_stm32_read+0x204>)
 804aac0:	1ac9      	subs	r1, r1, r3
 804aac2:	0889      	lsrs	r1, r1, #2
 804aac4:	0189      	lsls	r1, r1, #6
 804aac6:	f041 0101 	orr.w	r1, r1, #1
 804aaca:	e792      	b.n	804a9f2 <adc_stm32_read+0x8a>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOCS(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 804aacc:	6843      	ldr	r3, [r0, #4]
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
 804aace:	46ac      	mov	ip, r5
 804aad0:	f104 0774 	add.w	r7, r4, #116	; 0x74
 804aad4:	f043 0320 	orr.w	r3, r3, #32
 804aad8:	6043      	str	r3, [r0, #4]
 804aada:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 804aade:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 804aae0:	f8dc 3000 	ldr.w	r3, [ip]
 804aae4:	603b      	str	r3, [r7, #0]
	ctx->status = 0;

	if (sequence->options) {
 804aae6:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
 804aae8:	f8c4 e070 	str.w	lr, [r4, #112]	; 0x70
	if (sequence->options) {
 804aaec:	b36b      	cbz	r3, 804ab4a <adc_stm32_read+0x1e2>
		ctx->options = *sequence->options;
 804aaee:	f104 0588 	add.w	r5, r4, #136	; 0x88
 804aaf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 804aaf4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
 804aaf8:	6765      	str	r5, [r4, #116]	; 0x74
		ctx->sampling_index = 0U;
 804aafa:	f8a4 e098 	strh.w	lr, [r4, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
 804aafe:	b320      	cbz	r0, 804ab4a <adc_stm32_read+0x1e2>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 804ab00:	f3bf 8f5b 	dmb	ish
 804ab04:	e854 3f00 	ldrex	r3, [r4]
 804ab08:	e844 e200 	strex	r2, lr, [r4]
 804ab0c:	2a00      	cmp	r2, #0
 804ab0e:	d1f9      	bne.n	804ab04 <adc_stm32_read+0x19c>
 804ab10:	f3bf 8f5b 	dmb	ish
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
 804ab14:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 804ab18:	2264      	movs	r2, #100	; 0x64
 804ab1a:	2300      	movs	r3, #0
		t += off;
 804ab1c:	3063      	adds	r0, #99	; 0x63
			return t / ((uint64_t)from_hz / to_hz);
 804ab1e:	f14e 0100 	adc.w	r1, lr, #0
 804ab22:	f7f5 fd0d 	bl	8040540 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
 804ab26:	2200      	movs	r2, #0
 804ab28:	2300      	movs	r3, #0
 804ab2a:	e9cd 0100 	strd	r0, r1, [sp]
 804ab2e:	f104 0008 	add.w	r0, r4, #8
 804ab32:	f007 fdff 	bl	8052734 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
 804ab36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804ab3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 804ab3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804ab42:	f006 fff5 	bl	8051b30 <z_impl_k_sem_take>
	return ctx->status;
 804ab46:	6f24      	ldr	r4, [r4, #112]	; 0x70
	return adc_context_wait_for_completion(&data->ctx);
 804ab48:	e746      	b.n	804a9d8 <adc_stm32_read+0x70>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
 804ab4a:	4620      	mov	r0, r4
 804ab4c:	f00c ffcf 	bl	8057aee <adc_context_start_sampling>
 804ab50:	e7f1      	b.n	804ab36 <adc_stm32_read+0x1ce>
 804ab52:	bf00      	nop
 804ab54:	200208d8 	.word	0x200208d8
 804ab58:	200208c8 	.word	0x200208c8
 804ab5c:	08061aa5 	.word	0x08061aa5
 804ab60:	08061ab8 	.word	0x08061ab8
 804ab64:	08061afb 	.word	0x08061afb
 804ab68:	08061ad6 	.word	0x08061ad6
 804ab6c:	08061b16 	.word	0x08061b16

0804ab70 <adc_stm32_channel_setup>:
#endif
}

static int adc_stm32_channel_setup(const struct device *dev,
				   const struct adc_channel_cfg *channel_cfg)
{
 804ab70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 defined(CONFIG_SOC_SERIES_STM32L0X)
	struct adc_stm32_data *data = dev->data;
#endif
	int acq_time_index;

	if (channel_cfg->channel_id >= STM32_CHANNEL_COUNT) {
 804ab72:	790b      	ldrb	r3, [r1, #4]
{
 804ab74:	460c      	mov	r4, r1
	if (channel_cfg->channel_id >= STM32_CHANNEL_COUNT) {
 804ab76:	f003 011f 	and.w	r1, r3, #31
 804ab7a:	2913      	cmp	r1, #19
 804ab7c:	d90f      	bls.n	804ab9e <adc_stm32_channel_setup+0x2e>
		LOG_ERR("Channel %d is not valid", channel_cfg->channel_id);
 804ab7e:	4a56      	ldr	r2, [pc, #344]	; (804acd8 <adc_stm32_channel_setup+0x168>)
 804ab80:	6813      	ldr	r3, [r2, #0]
 804ab82:	075f      	lsls	r7, r3, #29
 804ab84:	d008      	beq.n	804ab98 <adc_stm32_channel_setup+0x28>
 804ab86:	4b55      	ldr	r3, [pc, #340]	; (804acdc <adc_stm32_channel_setup+0x16c>)
 804ab88:	4855      	ldr	r0, [pc, #340]	; (804ace0 <adc_stm32_channel_setup+0x170>)
 804ab8a:	1ad2      	subs	r2, r2, r3
 804ab8c:	0892      	lsrs	r2, r2, #2
 804ab8e:	0192      	lsls	r2, r2, #6
 804ab90:	f042 0201 	orr.w	r2, r2, #1
 804ab94:	f00b fa36 	bl	8056004 <log_1>
		return -EINVAL;
 804ab98:	f06f 0015 	mvn.w	r0, #21
 804ab9c:	e09a      	b.n	804acd4 <adc_stm32_channel_setup+0x164>
	}

	acq_time_index = adc_stm32_check_acq_time(
 804ab9e:	8865      	ldrh	r5, [r4, #2]
	if (acq_time == ADC_ACQ_TIME_MAX) {
 804aba0:	f643 72ff 	movw	r2, #16383	; 0x3fff
 804aba4:	4295      	cmp	r5, r2
 804aba6:	d019      	beq.n	804abdc <adc_stm32_channel_setup+0x6c>
 804aba8:	4f4e      	ldr	r7, [pc, #312]	; (804ace4 <adc_stm32_channel_setup+0x174>)
	for (int i = 0; i < 8; i++) {
 804abaa:	2200      	movs	r2, #0
		if (acq_time == ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS,
 804abac:	f837 6b02 	ldrh.w	r6, [r7], #2
 804abb0:	f446 4640 	orr.w	r6, r6, #49152	; 0xc000
 804abb4:	42b5      	cmp	r5, r6
 804abb6:	d012      	beq.n	804abde <adc_stm32_channel_setup+0x6e>
	for (int i = 0; i < 8; i++) {
 804abb8:	3201      	adds	r2, #1
 804abba:	2a08      	cmp	r2, #8
 804abbc:	d1f6      	bne.n	804abac <adc_stm32_channel_setup+0x3c>
	if (acq_time == ADC_ACQ_TIME_DEFAULT) {
 804abbe:	b1e5      	cbz	r5, 804abfa <adc_stm32_channel_setup+0x8a>
	LOG_ERR("Conversion time not supportted.");
 804abc0:	4945      	ldr	r1, [pc, #276]	; (804acd8 <adc_stm32_channel_setup+0x168>)
 804abc2:	680b      	ldr	r3, [r1, #0]
 804abc4:	075e      	lsls	r6, r3, #29
 804abc6:	d0e7      	beq.n	804ab98 <adc_stm32_channel_setup+0x28>
 804abc8:	4b44      	ldr	r3, [pc, #272]	; (804acdc <adc_stm32_channel_setup+0x16c>)
 804abca:	4847      	ldr	r0, [pc, #284]	; (804ace8 <adc_stm32_channel_setup+0x178>)
 804abcc:	1ac9      	subs	r1, r1, r3
 804abce:	0889      	lsrs	r1, r1, #2
 804abd0:	0189      	lsls	r1, r1, #6
 804abd2:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid channel gain");
		return -EINVAL;
	}

	if (channel_cfg->reference != ADC_REF_INTERNAL) {
		LOG_ERR("Invalid channel reference");
 804abd6:	f00b fa06 	bl	8055fe6 <log_0>
 804abda:	e7dd      	b.n	804ab98 <adc_stm32_channel_setup+0x28>
		return ARRAY_SIZE(acq_time_tbl) - 1;
 804abdc:	2207      	movs	r2, #7
	if (channel_cfg->differential) {
 804abde:	069d      	lsls	r5, r3, #26
 804abe0:	d50d      	bpl.n	804abfe <adc_stm32_channel_setup+0x8e>
		LOG_ERR("Differential channels are not supported");
 804abe2:	493d      	ldr	r1, [pc, #244]	; (804acd8 <adc_stm32_channel_setup+0x168>)
 804abe4:	680b      	ldr	r3, [r1, #0]
 804abe6:	0758      	lsls	r0, r3, #29
 804abe8:	d0d6      	beq.n	804ab98 <adc_stm32_channel_setup+0x28>
 804abea:	4b3c      	ldr	r3, [pc, #240]	; (804acdc <adc_stm32_channel_setup+0x16c>)
 804abec:	483f      	ldr	r0, [pc, #252]	; (804acec <adc_stm32_channel_setup+0x17c>)
 804abee:	1ac9      	subs	r1, r1, r3
 804abf0:	0889      	lsrs	r1, r1, #2
 804abf2:	0189      	lsls	r1, r1, #6
 804abf4:	f041 0101 	orr.w	r1, r1, #1
 804abf8:	e7ed      	b.n	804abd6 <adc_stm32_channel_setup+0x66>
		return 0;
 804abfa:	462a      	mov	r2, r5
 804abfc:	e7ef      	b.n	804abde <adc_stm32_channel_setup+0x6e>
	if (channel_cfg->gain != ADC_GAIN_1) {
 804abfe:	7825      	ldrb	r5, [r4, #0]
 804ac00:	2d06      	cmp	r5, #6
 804ac02:	d00b      	beq.n	804ac1c <adc_stm32_channel_setup+0xac>
		LOG_ERR("Invalid channel gain");
 804ac04:	4934      	ldr	r1, [pc, #208]	; (804acd8 <adc_stm32_channel_setup+0x168>)
 804ac06:	680b      	ldr	r3, [r1, #0]
 804ac08:	075a      	lsls	r2, r3, #29
 804ac0a:	d0c5      	beq.n	804ab98 <adc_stm32_channel_setup+0x28>
 804ac0c:	4b33      	ldr	r3, [pc, #204]	; (804acdc <adc_stm32_channel_setup+0x16c>)
 804ac0e:	4838      	ldr	r0, [pc, #224]	; (804acf0 <adc_stm32_channel_setup+0x180>)
 804ac10:	1ac9      	subs	r1, r1, r3
 804ac12:	0889      	lsrs	r1, r1, #2
 804ac14:	0189      	lsls	r1, r1, #6
 804ac16:	f041 0101 	orr.w	r1, r1, #1
 804ac1a:	e7dc      	b.n	804abd6 <adc_stm32_channel_setup+0x66>
	if (channel_cfg->reference != ADC_REF_INTERNAL) {
 804ac1c:	7864      	ldrb	r4, [r4, #1]
 804ac1e:	2c04      	cmp	r4, #4
 804ac20:	d00b      	beq.n	804ac3a <adc_stm32_channel_setup+0xca>
		LOG_ERR("Invalid channel reference");
 804ac22:	492d      	ldr	r1, [pc, #180]	; (804acd8 <adc_stm32_channel_setup+0x168>)
 804ac24:	680b      	ldr	r3, [r1, #0]
 804ac26:	075b      	lsls	r3, r3, #29
 804ac28:	d0b6      	beq.n	804ab98 <adc_stm32_channel_setup+0x28>
 804ac2a:	4b2c      	ldr	r3, [pc, #176]	; (804acdc <adc_stm32_channel_setup+0x16c>)
 804ac2c:	4831      	ldr	r0, [pc, #196]	; (804acf4 <adc_stm32_channel_setup+0x184>)
 804ac2e:	1ac9      	subs	r1, r1, r3
 804ac30:	0889      	lsrs	r1, r1, #2
 804ac32:	0189      	lsls	r1, r1, #6
 804ac34:	f041 0101 	orr.w	r1, r1, #1
 804ac38:	e7cd      	b.n	804abd6 <adc_stm32_channel_setup+0x66>
		return -EINVAL;
	}

	if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(ADC_CHANNEL_TEMPSENSOR) == channel_cfg->channel_id) {
 804ac3a:	f003 031f 	and.w	r3, r3, #31
 804ac3e:	2b12      	cmp	r3, #18
 804ac40:	d10b      	bne.n	804ac5a <adc_stm32_channel_setup+0xea>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_TSVREFE | ADC_CCR_VBATE));
 804ac42:	4c2d      	ldr	r4, [pc, #180]	; (804acf8 <adc_stm32_channel_setup+0x188>)
 804ac44:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_TSVREFE | ADC_CCR_VBATE, PathInternal);
 804ac46:	6865      	ldr	r5, [r4, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_TSVREFE | ADC_CCR_VBATE));
 804ac48:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_TSVREFE | ADC_CCR_VBATE, PathInternal);
 804ac4c:	f425 0540 	bic.w	r5, r5, #12582912	; 0xc00000
 804ac50:	432b      	orrs	r3, r5
 804ac52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 804ac56:	6063      	str	r3, [r4, #4]
}
 804ac58:	e001      	b.n	804ac5e <adc_stm32_channel_setup+0xee>
		adc_stm32_set_common_path(dev, LL_ADC_PATH_INTERNAL_TEMPSENSOR);
	} else if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(ADC_CHANNEL_VREFINT) == channel_cfg->channel_id) {
 804ac5a:	2b11      	cmp	r3, #17
 804ac5c:	d0f1      	beq.n	804ac42 <adc_stm32_channel_setup+0xd2>
	ADC_TypeDef *adc = config->base;
 804ac5e:	6843      	ldr	r3, [r0, #4]
	LL_ADC_SetChannelSamplingTime(adc,
 804ac60:	2909      	cmp	r1, #9
  MODIFY_REG(*preg,
 804ac62:	f04f 0607 	mov.w	r6, #7
	ADC_TypeDef *adc = config->base;
 804ac66:	681c      	ldr	r4, [r3, #0]
		__LL_ADC_DECIMAL_NB_TO_CHANNEL(id),
 804ac68:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 804ac6c:	bf94      	ite	ls
 804ac6e:	ea41 5103 	orrls.w	r1, r1, r3, lsl #20
 804ac72:	3b1e      	subhi	r3, #30
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 804ac74:	f104 040c 	add.w	r4, r4, #12
	LL_ADC_SetChannelSamplingTime(adc,
 804ac78:	bf8c      	ite	hi
 804ac7a:	ea41 5103 	orrhi.w	r1, r1, r3, lsl #20
 804ac7e:	f041 7100 	orrls.w	r1, r1, #33554432	; 0x2000000
 804ac82:	4b1e      	ldr	r3, [pc, #120]	; (804acfc <adc_stm32_channel_setup+0x18c>)
 804ac84:	f001 7500 	and.w	r5, r1, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 804ac88:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 804ac8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804ac90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 804ac94:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 804ac98:	fab3 f383 	clz	r3, r3
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 804ac9c:	40dd      	lsrs	r5, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804ac9e:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 804aca2:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 804aca6:	fab3 f383 	clz	r3, r3
  MODIFY_REG(*preg,
 804acaa:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 804acae:	fa21 f303 	lsr.w	r3, r1, r3
 804acb2:	fa06 f303 	lsl.w	r3, r6, r3
 804acb6:	ea20 0303 	bic.w	r3, r0, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804acba:	f04f 70f8 	mov.w	r0, #32505856	; 0x1f00000
 804acbe:	fa90 f0a0 	rbit	r0, r0
  return __builtin_clz(value);
 804acc2:	fab0 f080 	clz	r0, r0
 804acc6:	40c1      	lsrs	r1, r0
	adc_stm32_setup_speed(dev, channel_cfg->channel_id,
				  acq_time_index);

	LOG_DBG("Channel setup succeeded!");

	return 0;
 804acc8:	2000      	movs	r0, #0
 804acca:	fa02 f101 	lsl.w	r1, r2, r1
 804acce:	4319      	orrs	r1, r3
 804acd0:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
}
 804acd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804acd6:	bf00      	nop
 804acd8:	200208d8 	.word	0x200208d8
 804acdc:	200208c8 	.word	0x200208c8
 804ace0:	08061b30 	.word	0x08061b30
 804ace4:	0805e2c0 	.word	0x0805e2c0
 804ace8:	08061b48 	.word	0x08061b48
 804acec:	08061b68 	.word	0x08061b68
 804acf0:	08061b90 	.word	0x08061b90
 804acf4:	08061ba5 	.word	0x08061ba5
 804acf8:	40012300 	.word	0x40012300
 804acfc:	0805d7f0 	.word	0x0805d7f0

0804ad00 <adc_stm32_init>:

static int adc_stm32_init(const struct device *dev)
{
 804ad00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct adc_stm32_data *data = dev->data;
	const struct adc_stm32_cfg *config = dev->config;
 804ad04:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct adc_stm32_data *data = dev->data;
 804ad08:	6906      	ldr	r6, [r0, #16]
	const struct device *clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 804ad0a:	4645      	mov	r5, r8
 804ad0c:	f855 7b08 	ldr.w	r7, [r5], #8
	int err;

	LOG_DBG("Initializing....");

	data->dev = dev;
 804ad10:	f8c6 00a0 	str.w	r0, [r6, #160]	; 0xa0
 804ad14:	4c1c      	ldr	r4, [pc, #112]	; (804ad88 <adc_stm32_init+0x88>)
 804ad16:	4620      	mov	r0, r4
 804ad18:	f00f fa9d 	bl	805a256 <z_device_ready>
 804ad1c:	b920      	cbnz	r0, 804ad28 <adc_stm32_init+0x28>
	data->acq_time_index = -1;
#endif

	if (clock_control_on(clk,
		(clock_control_subsys_t *) &config->pclken) != 0) {
		return -EIO;
 804ad1e:	f06f 0404 	mvn.w	r4, #4
	}
#endif
	adc_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 804ad22:	4620      	mov	r0, r4
 804ad24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return api->on(dev, sys);
 804ad28:	68a3      	ldr	r3, [r4, #8]
 804ad2a:	4629      	mov	r1, r5
 804ad2c:	4620      	mov	r0, r4
 804ad2e:	681b      	ldr	r3, [r3, #0]
 804ad30:	4798      	blx	r3
	if (clock_control_on(clk,
 804ad32:	4605      	mov	r5, r0
 804ad34:	2800      	cmp	r0, #0
 804ad36:	d1f2      	bne.n	804ad1e <adc_stm32_init+0x1e>
	err = stm32_dt_pinctrl_configure(config->pinctrl,
 804ad38:	f8d8 2000 	ldr.w	r2, [r8]
 804ad3c:	e9d8 0104 	ldrd	r0, r1, [r8, #16]
 804ad40:	f00c fc31 	bl	80575a6 <stm32_dt_pinctrl_configure>
	if (err < 0) {
 804ad44:	1e04      	subs	r4, r0, #0
 804ad46:	da0e      	bge.n	804ad66 <adc_stm32_init+0x66>
		LOG_ERR("ADC pinctrl setup failed (%d)", err);
 804ad48:	4a10      	ldr	r2, [pc, #64]	; (804ad8c <adc_stm32_init+0x8c>)
 804ad4a:	6813      	ldr	r3, [r2, #0]
 804ad4c:	075b      	lsls	r3, r3, #29
 804ad4e:	d0e8      	beq.n	804ad22 <adc_stm32_init+0x22>
 804ad50:	4b0f      	ldr	r3, [pc, #60]	; (804ad90 <adc_stm32_init+0x90>)
 804ad52:	4621      	mov	r1, r4
 804ad54:	480f      	ldr	r0, [pc, #60]	; (804ad94 <adc_stm32_init+0x94>)
 804ad56:	1ad2      	subs	r2, r2, r3
 804ad58:	0892      	lsrs	r2, r2, #2
 804ad5a:	0192      	lsls	r2, r2, #6
 804ad5c:	f042 0201 	orr.w	r2, r2, #1
 804ad60:	f00b f950 	bl	8056004 <log_1>
 804ad64:	e7dd      	b.n	804ad22 <adc_stm32_init+0x22>
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 804ad66:	68bb      	ldr	r3, [r7, #8]
 804ad68:	f043 0301 	orr.w	r3, r3, #1
 804ad6c:	60bb      	str	r3, [r7, #8]
	config->irq_cfg_func();
 804ad6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 804ad72:	4798      	blx	r3
	if (!k_sem_count_get(&ctx->lock)) {
 804ad74:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 804ad76:	b924      	cbnz	r4, 804ad82 <adc_stm32_init+0x82>
	z_impl_k_sem_give(sem);
 804ad78:	f106 0040 	add.w	r0, r6, #64	; 0x40
 804ad7c:	f006 feb2 	bl	8051ae4 <z_impl_k_sem_give>
}
 804ad80:	e7cf      	b.n	804ad22 <adc_stm32_init+0x22>
	return 0;
 804ad82:	462c      	mov	r4, r5
 804ad84:	e7cd      	b.n	804ad22 <adc_stm32_init+0x22>
 804ad86:	bf00      	nop
 804ad88:	0805b844 	.word	0x0805b844
 804ad8c:	200208d8 	.word	0x200208d8
 804ad90:	200208c8 	.word	0x200208c8
 804ad94:	08061bbf 	.word	0x08061bbf

0804ad98 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 804ad98:	680b      	ldr	r3, [r1, #0]
{
 804ad9a:	b086      	sub	sp, #24
 804ad9c:	2b06      	cmp	r3, #6
 804ad9e:	d839      	bhi.n	804ae14 <stm32_clock_control_on+0x7c>
 804ada0:	e8df f003 	tbb	[pc, r3]
 804ada4:	2e241004 	.word	0x2e241004
 804ada8:	3838      	.short	0x3838
 804adaa:	1a          	.byte	0x1a
 804adab:	00          	.byte	0x00
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 804adac:	4a1b      	ldr	r2, [pc, #108]	; (804ae1c <stm32_clock_control_on+0x84>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 804adae:	684b      	ldr	r3, [r1, #4]
 804adb0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 804adb2:	4319      	orrs	r1, r3
 804adb4:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 804adb6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 804adb8:	4013      	ands	r3, r2
 804adba:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 804adbc:	9b01      	ldr	r3, [sp, #4]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 804adbe:	2000      	movs	r0, #0
}
 804adc0:	b006      	add	sp, #24
 804adc2:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 804adc4:	4a15      	ldr	r2, [pc, #84]	; (804ae1c <stm32_clock_control_on+0x84>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 804adc6:	684b      	ldr	r3, [r1, #4]
 804adc8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 804adca:	4319      	orrs	r1, r3
 804adcc:	6351      	str	r1, [r2, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 804adce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 804add0:	4013      	ands	r3, r2
 804add2:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 804add4:	9b02      	ldr	r3, [sp, #8]
 804add6:	e7f2      	b.n	804adbe <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 804add8:	4a10      	ldr	r2, [pc, #64]	; (804ae1c <stm32_clock_control_on+0x84>)
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 804adda:	684b      	ldr	r3, [r1, #4]
 804addc:	6b91      	ldr	r1, [r2, #56]	; 0x38
 804adde:	4319      	orrs	r1, r3
 804ade0:	6391      	str	r1, [r2, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 804ade2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 804ade4:	4013      	ands	r3, r2
 804ade6:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 804ade8:	9b03      	ldr	r3, [sp, #12]
 804adea:	e7e8      	b.n	804adbe <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 804adec:	4a0b      	ldr	r2, [pc, #44]	; (804ae1c <stm32_clock_control_on+0x84>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 804adee:	684b      	ldr	r3, [r1, #4]
 804adf0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 804adf2:	4319      	orrs	r1, r3
 804adf4:	6411      	str	r1, [r2, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 804adf6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 804adf8:	4013      	ands	r3, r2
 804adfa:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 804adfc:	9b04      	ldr	r3, [sp, #16]
 804adfe:	e7de      	b.n	804adbe <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 804ae00:	4a06      	ldr	r2, [pc, #24]	; (804ae1c <stm32_clock_control_on+0x84>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 804ae02:	684b      	ldr	r3, [r1, #4]
 804ae04:	6c51      	ldr	r1, [r2, #68]	; 0x44
 804ae06:	4319      	orrs	r1, r3
 804ae08:	6451      	str	r1, [r2, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 804ae0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 804ae0c:	4013      	ands	r3, r2
 804ae0e:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 804ae10:	9b05      	ldr	r3, [sp, #20]
 804ae12:	e7d4      	b.n	804adbe <stm32_clock_control_on+0x26>
	switch (pclken->bus) {
 804ae14:	f06f 0085 	mvn.w	r0, #133	; 0x85
 804ae18:	e7d2      	b.n	804adc0 <stm32_clock_control_on+0x28>
 804ae1a:	bf00      	nop
 804ae1c:	40023800 	.word	0x40023800

0804ae20 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 804ae20:	680b      	ldr	r3, [r1, #0]
 804ae22:	2b06      	cmp	r3, #6
 804ae24:	d829      	bhi.n	804ae7a <stm32_clock_control_off+0x5a>
 804ae26:	e8df f003 	tbb	[pc, r3]
 804ae2a:	0c04      	.short	0x0c04
 804ae2c:	2828211a 	.word	0x2828211a
 804ae30:	13          	.byte	0x13
 804ae31:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 804ae32:	4a13      	ldr	r2, [pc, #76]	; (804ae80 <stm32_clock_control_off+0x60>)
 804ae34:	6849      	ldr	r1, [r1, #4]
 804ae36:	6b13      	ldr	r3, [r2, #48]	; 0x30
 804ae38:	ea23 0301 	bic.w	r3, r3, r1
 804ae3c:	6313      	str	r3, [r2, #48]	; 0x30
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 804ae3e:	2000      	movs	r0, #0
}
 804ae40:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 804ae42:	4a0f      	ldr	r2, [pc, #60]	; (804ae80 <stm32_clock_control_off+0x60>)
 804ae44:	6849      	ldr	r1, [r1, #4]
 804ae46:	6b53      	ldr	r3, [r2, #52]	; 0x34
 804ae48:	ea23 0301 	bic.w	r3, r3, r1
 804ae4c:	6353      	str	r3, [r2, #52]	; 0x34
 804ae4e:	e7f6      	b.n	804ae3e <stm32_clock_control_off+0x1e>
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 804ae50:	4a0b      	ldr	r2, [pc, #44]	; (804ae80 <stm32_clock_control_off+0x60>)
 804ae52:	6849      	ldr	r1, [r1, #4]
 804ae54:	6b93      	ldr	r3, [r2, #56]	; 0x38
 804ae56:	ea23 0301 	bic.w	r3, r3, r1
 804ae5a:	6393      	str	r3, [r2, #56]	; 0x38
 804ae5c:	e7ef      	b.n	804ae3e <stm32_clock_control_off+0x1e>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 804ae5e:	4a08      	ldr	r2, [pc, #32]	; (804ae80 <stm32_clock_control_off+0x60>)
 804ae60:	6849      	ldr	r1, [r1, #4]
 804ae62:	6c13      	ldr	r3, [r2, #64]	; 0x40
 804ae64:	ea23 0301 	bic.w	r3, r3, r1
 804ae68:	6413      	str	r3, [r2, #64]	; 0x40
 804ae6a:	e7e8      	b.n	804ae3e <stm32_clock_control_off+0x1e>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 804ae6c:	4a04      	ldr	r2, [pc, #16]	; (804ae80 <stm32_clock_control_off+0x60>)
 804ae6e:	6849      	ldr	r1, [r1, #4]
 804ae70:	6c53      	ldr	r3, [r2, #68]	; 0x44
 804ae72:	ea23 0301 	bic.w	r3, r3, r1
 804ae76:	6453      	str	r3, [r2, #68]	; 0x44
 804ae78:	e7e1      	b.n	804ae3e <stm32_clock_control_off+0x1e>
	switch (pclken->bus) {
 804ae7a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 804ae7e:	4770      	bx	lr
 804ae80:	40023800 	.word	0x40023800

0804ae84 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 804ae84:	4b09      	ldr	r3, [pc, #36]	; (804aeac <stm32_clock_control_get_subsys_rate+0x28>)
 804ae86:	6809      	ldr	r1, [r1, #0]
 804ae88:	681b      	ldr	r3, [r3, #0]
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 804ae8a:	2906      	cmp	r1, #6
 804ae8c:	d80b      	bhi.n	804aea6 <stm32_clock_control_get_subsys_rate+0x22>
 804ae8e:	e8df f001 	tbb	[pc, r1]
 804ae92:	0505      	.short	0x0505
 804ae94:	0a0a0804 	.word	0x0a0a0804
 804ae98:	05          	.byte	0x05
 804ae99:	00          	.byte	0x00
	return clock / prescaler;
 804ae9a:	089b      	lsrs	r3, r3, #2
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 804ae9c:	2000      	movs	r0, #0
		*rate = apb1_clock;
 804ae9e:	6013      	str	r3, [r2, #0]
		break;
 804aea0:	4770      	bx	lr
	return clock / prescaler;
 804aea2:	085b      	lsrs	r3, r3, #1
 804aea4:	e7fa      	b.n	804ae9c <stm32_clock_control_get_subsys_rate+0x18>
	switch (pclken->bus) {
 804aea6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 804aeaa:	4770      	bx	lr
 804aeac:	20020584 	.word	0x20020584

0804aeb0 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 804aeb0:	b510      	push	{r4, lr}
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 804aeb2:	2000      	movs	r0, #0
{
 804aeb4:	b086      	sub	sp, #24
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 804aeb6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 804aeba:	e9cd 0300 	strd	r0, r3, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 804aebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804aec2:	9302      	str	r3, [sp, #8]
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 804aec4:	f000 f84c 	bl	804af60 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 804aec8:	a803      	add	r0, sp, #12
 804aeca:	f00c fe7d 	bl	8057bc8 <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 804aece:	4b21      	ldr	r3, [pc, #132]	; (804af54 <stm32_clock_control_init+0xa4>)
 804aed0:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 804aed2:	0794      	lsls	r4, r2, #30
 804aed4:	d406      	bmi.n	804aee4 <stm32_clock_control_init+0x34>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 804aed6:	681a      	ldr	r2, [r3, #0]
 804aed8:	f042 0201 	orr.w	r2, r2, #1
 804aedc:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 804aede:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 804aee0:	0791      	lsls	r1, r2, #30
 804aee2:	d5fc      	bpl.n	804aede <stm32_clock_control_init+0x2e>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 804aee4:	4b1b      	ldr	r3, [pc, #108]	; (804af54 <stm32_clock_control_init+0xa4>)
 804aee6:	689a      	ldr	r2, [r3, #8]
 804aee8:	f022 0203 	bic.w	r2, r2, #3
 804aeec:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 804aeee:	689a      	ldr	r2, [r3, #8]
 804aef0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 804aef4:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 804aef6:	689a      	ldr	r2, [r3, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 804aef8:	f012 0f0c 	tst.w	r2, #12
 804aefc:	d1fb      	bne.n	804aef6 <stm32_clock_control_init+0x46>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 804aefe:	681a      	ldr	r2, [r3, #0]
 804af00:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 804af04:	601a      	str	r2, [r3, #0]
  * @rmtoll CR1    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_ODEN);
 804af06:	4b14      	ldr	r3, [pc, #80]	; (804af58 <stm32_clock_control_init+0xa8>)
 804af08:	681a      	ldr	r2, [r3, #0]
 804af0a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 804af0e:	601a      	str	r2, [r3, #0]
  * @rmtoll CSR1   ODRDY       LL_PWR_IsActiveFlag_OD
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_OD(void)
{
  return (READ_BIT(PWR->CSR1, PWR_CSR1_ODRDY) == (PWR_CSR1_ODRDY));
 804af10:	685a      	ldr	r2, [r3, #4]

#ifdef CONFIG_SOC_SERIES_STM32F7X
	 /* Assuming we stay on Power Scale default value: Power Scale 1 */
	 if (CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC > 180000000) {
		 LL_PWR_EnableOverDriveMode();
		 while (LL_PWR_IsActiveFlag_OD() != 1) {
 804af12:	03d2      	lsls	r2, r2, #15
 804af14:	d5fc      	bpl.n	804af10 <stm32_clock_control_init+0x60>
  SET_BIT(PWR->CR1, PWR_CR1_ODSWEN);
 804af16:	681a      	ldr	r2, [r3, #0]
 804af18:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 804af1c:	601a      	str	r2, [r3, #0]
  * @rmtoll CSR1   ODSWRDY       LL_PWR_IsActiveFlag_ODSW
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_ODSW(void)
{
  return (READ_BIT(PWR->CSR1, PWR_CSR1_ODSWRDY) == (PWR_CSR1_ODSWRDY));
 804af1e:	4a0e      	ldr	r2, [pc, #56]	; (804af58 <stm32_clock_control_init+0xa8>)
 804af20:	6853      	ldr	r3, [r2, #4]
		 /* Wait for OverDrive mode ready */
		 }
		 LL_PWR_EnableOverDriveSwitching();
		 while (LL_PWR_IsActiveFlag_ODSW() != 1) {
 804af22:	039b      	lsls	r3, r3, #14
 804af24:	d5fc      	bpl.n	804af20 <stm32_clock_control_init+0x70>
		 }
	 }
#endif

#if STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 804af26:	4c0b      	ldr	r4, [pc, #44]	; (804af54 <stm32_clock_control_init+0xa4>)
		LL_RCC_HSE_EnableDiv2();
	}
#endif

	/* Switch to PLL with HSE as clock source */
	LL_PLL_ConfigSystemClock_HSE(
 804af28:	aa03      	add	r2, sp, #12
 804af2a:	2101      	movs	r1, #1
 804af2c:	480b      	ldr	r0, [pc, #44]	; (804af5c <stm32_clock_control_init+0xac>)
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 804af2e:	6863      	ldr	r3, [r4, #4]
 804af30:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 804af34:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 804af38:	6063      	str	r3, [r4, #4]
	LL_PLL_ConfigSystemClock_HSE(
 804af3a:	466b      	mov	r3, sp
 804af3c:	f005 fd16 	bl	805096c <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 804af40:	6823      	ldr	r3, [r4, #0]
 804af42:	f023 0301 	bic.w	r3, r3, #1
 804af46:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 804af48:	f00c fe46 	bl	8057bd8 <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 804af4c:	2000      	movs	r0, #0
 804af4e:	b006      	add	sp, #24
 804af50:	bd10      	pop	{r4, pc}
 804af52:	bf00      	nop
 804af54:	40023800 	.word	0x40023800
 804af58:	40007000 	.word	0x40007000
 804af5c:	007a1200 	.word	0x007a1200

0804af60 <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR, Periphs);
 804af60:	4b06      	ldr	r3, [pc, #24]	; (804af7c <config_enable_default_clocks+0x1c>)

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 804af62:	b082      	sub	sp, #8
 804af64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804af66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 804af6a:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 804af6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804af6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804af72:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 804af74:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 804af76:	b002      	add	sp, #8
 804af78:	4770      	bx	lr
 804af7a:	bf00      	nop
 804af7c:	40023800 	.word	0x40023800

0804af80 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 804af80:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 804af82:	4808      	ldr	r0, [pc, #32]	; (804afa4 <uart_console_init+0x24>)
 804af84:	4b08      	ldr	r3, [pc, #32]	; (804afa8 <uart_console_init+0x28>)
 804af86:	6018      	str	r0, [r3, #0]
 804af88:	f00f f965 	bl	805a256 <z_device_ready>
 804af8c:	b138      	cbz	r0, 804af9e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
 804af8e:	4807      	ldr	r0, [pc, #28]	; (804afac <uart_console_init+0x2c>)
 804af90:	f7fd ff02 	bl	8048d98 <__stdout_hook_install>
	__printk_hook_install(console_out);
 804af94:	4805      	ldr	r0, [pc, #20]	; (804afac <uart_console_init+0x2c>)
 804af96:	f7f9 fcd5 	bl	8044944 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 804af9a:	2000      	movs	r0, #0
}
 804af9c:	bd08      	pop	{r3, pc}
		return -ENODEV;
 804af9e:	f06f 0012 	mvn.w	r0, #18
 804afa2:	e7fb      	b.n	804af9c <uart_console_init+0x1c>
 804afa4:	0805b9ac 	.word	0x0805b9ac
 804afa8:	20037984 	.word	0x20037984
 804afac:	0804afb1 	.word	0x0804afb1

0804afb0 <console_out>:
	if ('\n' == c) {
 804afb0:	280a      	cmp	r0, #10
{
 804afb2:	b538      	push	{r3, r4, r5, lr}
 804afb4:	4604      	mov	r4, r0
 804afb6:	4d07      	ldr	r5, [pc, #28]	; (804afd4 <console_out+0x24>)
	if ('\n' == c) {
 804afb8:	d104      	bne.n	804afc4 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 804afba:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
 804afbc:	6883      	ldr	r3, [r0, #8]
 804afbe:	210d      	movs	r1, #13
 804afc0:	685b      	ldr	r3, [r3, #4]
 804afc2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 804afc4:	6828      	ldr	r0, [r5, #0]
 804afc6:	6883      	ldr	r3, [r0, #8]
 804afc8:	b2e1      	uxtb	r1, r4
 804afca:	685b      	ldr	r3, [r3, #4]
 804afcc:	4798      	blx	r3
}
 804afce:	4620      	mov	r0, r4
 804afd0:	bd38      	pop	{r3, r4, r5, pc}
 804afd2:	bf00      	nop
 804afd4:	20037984 	.word	0x20037984

0804afd8 <clock_control_on.constprop.0>:
static inline int clock_control_on(const struct device *dev,
 804afd8:	b513      	push	{r0, r1, r4, lr}
 804afda:	9001      	str	r0, [sp, #4]
 804afdc:	4c08      	ldr	r4, [pc, #32]	; (804b000 <clock_control_on.constprop.0+0x28>)
 804afde:	4620      	mov	r0, r4
 804afe0:	f00f f939 	bl	805a256 <z_device_ready>
 804afe4:	b138      	cbz	r0, 804aff6 <clock_control_on.constprop.0+0x1e>
	return api->on(dev, sys);
 804afe6:	68a3      	ldr	r3, [r4, #8]
 804afe8:	4620      	mov	r0, r4
 804afea:	9901      	ldr	r1, [sp, #4]
 804afec:	681b      	ldr	r3, [r3, #0]
}
 804afee:	b002      	add	sp, #8
 804aff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->on(dev, sys);
 804aff4:	4718      	bx	r3
}
 804aff6:	f06f 0012 	mvn.w	r0, #18
 804affa:	b002      	add	sp, #8
 804affc:	bd10      	pop	{r4, pc}
 804affe:	bf00      	nop
 804b000:	0805b844 	.word	0x0805b844

0804b004 <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 804b004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 804b006:	460c      	mov	r4, r1
 804b008:	4611      	mov	r1, r2
 804b00a:	461e      	mov	r6, r3
	const struct gpio_stm32_config *cfg = dev->config;
 804b00c:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 804b00e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
	struct gpio_stm32_data *data = dev->data;
 804b012:	6902      	ldr	r2, [r0, #16]
	if (mode == GPIO_INT_MODE_DISABLED) {
 804b014:	d123      	bne.n	804b05e <gpio_stm32_pin_interrupt_configure+0x5a>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 804b016:	f004 0303 	and.w	r3, r4, #3
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 804b01a:	4937      	ldr	r1, [pc, #220]	; (804b0f8 <gpio_stm32_pin_interrupt_configure+0xf4>)
 804b01c:	3304      	adds	r3, #4
 804b01e:	009a      	lsls	r2, r3, #2
 804b020:	230f      	movs	r3, #15
 804b022:	4093      	lsls	r3, r2
 804b024:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
 804b028:	b2da      	uxtb	r2, r3
 804b02a:	3202      	adds	r2, #2
 804b02c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 804b030:	0c19      	lsrs	r1, r3, #16
 804b032:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804b036:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 804b03a:	fab2 f282 	clz	r2, r2
 804b03e:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 804b040:	68ba      	ldr	r2, [r7, #8]
 804b042:	429a      	cmp	r2, r3
 804b044:	d109      	bne.n	804b05a <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 804b046:	4620      	mov	r0, r4
 804b048:	f7ff f8a0 	bl	804a18c <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 804b04c:	4620      	mov	r0, r4
 804b04e:	f7ff f8f1 	bl	804a234 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 804b052:	2100      	movs	r1, #0
 804b054:	4620      	mov	r0, r4
 804b056:	f7ff f8a7 	bl	804a1a8 <stm32_exti_trigger>
	int err = 0;
 804b05a:	2500      	movs	r5, #0
 804b05c:	e03e      	b.n	804b0dc <gpio_stm32_pin_interrupt_configure+0xd8>
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 804b05e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 804b062:	d042      	beq.n	804b0ea <gpio_stm32_pin_interrupt_configure+0xe6>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 804b064:	4925      	ldr	r1, [pc, #148]	; (804b0fc <gpio_stm32_pin_interrupt_configure+0xf8>)
 804b066:	4620      	mov	r0, r4
 804b068:	f7ff f8d2 	bl	804a210 <stm32_exti_set_callback>
 804b06c:	4605      	mov	r5, r0
 804b06e:	2800      	cmp	r0, #0
 804b070:	d13e      	bne.n	804b0f0 <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 804b072:	4a23      	ldr	r2, [pc, #140]	; (804b100 <gpio_stm32_pin_interrupt_configure+0xfc>)
 804b074:	466b      	mov	r3, sp
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 804b076:	68bf      	ldr	r7, [r7, #8]
	struct stm32_pclken pclken = {
 804b078:	e892 0003 	ldmia.w	r2, {r0, r1}
 804b07c:	e883 0003 	stmia.w	r3, {r0, r1}
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
 804b080:	4618      	mov	r0, r3
 804b082:	f7ff ffa9 	bl	804afd8 <clock_control_on.constprop.0>
	if (ret != 0) {
 804b086:	b9c0      	cbnz	r0, 804b0ba <gpio_stm32_pin_interrupt_configure+0xb6>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 804b088:	f004 0103 	and.w	r1, r4, #3
 804b08c:	3104      	adds	r1, #4
 804b08e:	008b      	lsls	r3, r1, #2
 804b090:	210f      	movs	r1, #15
 804b092:	4099      	lsls	r1, r3
 804b094:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 804b098:	b2ca      	uxtb	r2, r1
 804b09a:	0c0b      	lsrs	r3, r1, #16
 804b09c:	0092      	lsls	r2, r2, #2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804b09e:	fa93 f3a3 	rbit	r3, r3
 804b0a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
  return __builtin_clz(value);
 804b0a6:	fab3 f383 	clz	r3, r3
 804b0aa:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 804b0ae:	409f      	lsls	r7, r3
 804b0b0:	6890      	ldr	r0, [r2, #8]
 804b0b2:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 804b0b6:	430f      	orrs	r7, r1
 804b0b8:	6097      	str	r7, [r2, #8]

	switch (trig) {
 804b0ba:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 804b0be:	d010      	beq.n	804b0e2 <gpio_stm32_pin_interrupt_configure+0xde>
 804b0c0:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
 804b0c4:	d00f      	beq.n	804b0e6 <gpio_stm32_pin_interrupt_configure+0xe2>
 804b0c6:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 804b0ca:	bf14      	ite	ne
 804b0cc:	2100      	movne	r1, #0
 804b0ce:	2102      	moveq	r1, #2
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 804b0d0:	4620      	mov	r0, r4
 804b0d2:	f7ff f869 	bl	804a1a8 <stm32_exti_trigger>

	stm32_exti_enable(pin);
 804b0d6:	4620      	mov	r0, r4
 804b0d8:	f7ff f84a 	bl	804a170 <stm32_exti_enable>

exit:
	return err;
}
 804b0dc:	4628      	mov	r0, r5
 804b0de:	b003      	add	sp, #12
 804b0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		edge = STM32_EXTI_TRIG_RISING;
 804b0e2:	2101      	movs	r1, #1
 804b0e4:	e7f4      	b.n	804b0d0 <gpio_stm32_pin_interrupt_configure+0xcc>
		edge = STM32_EXTI_TRIG_BOTH;
 804b0e6:	2103      	movs	r1, #3
 804b0e8:	e7f2      	b.n	804b0d0 <gpio_stm32_pin_interrupt_configure+0xcc>
		err = -ENOTSUP;
 804b0ea:	f06f 0585 	mvn.w	r5, #133	; 0x85
 804b0ee:	e7f5      	b.n	804b0dc <gpio_stm32_pin_interrupt_configure+0xd8>
		err = -EBUSY;
 804b0f0:	f06f 050f 	mvn.w	r5, #15
	return err;
 804b0f4:	e7f2      	b.n	804b0dc <gpio_stm32_pin_interrupt_configure+0xd8>
 804b0f6:	bf00      	nop
 804b0f8:	40013800 	.word	0x40013800
 804b0fc:	08057c71 	.word	0x08057c71
 804b100:	0805c428 	.word	0x0805c428

0804b104 <gpio_stm32_clock_request>:
{
 804b104:	b570      	push	{r4, r5, r6, lr}
					(clock_control_subsys_t *)&cfg->pclken);
 804b106:	6844      	ldr	r4, [r0, #4]
 804b108:	340c      	adds	r4, #12
	if (on) {
 804b10a:	b121      	cbz	r1, 804b116 <gpio_stm32_clock_request+0x12>
		ret = clock_control_on(clk,
 804b10c:	4620      	mov	r0, r4
}
 804b10e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ret = clock_control_on(clk,
 804b112:	f7ff bf61 	b.w	804afd8 <clock_control_on.constprop.0>
 804b116:	4d07      	ldr	r5, [pc, #28]	; (804b134 <gpio_stm32_clock_request+0x30>)
 804b118:	4628      	mov	r0, r5
 804b11a:	f00f f89c 	bl	805a256 <z_device_ready>
 804b11e:	b130      	cbz	r0, 804b12e <gpio_stm32_clock_request+0x2a>
	return api->off(dev, sys);
 804b120:	68ab      	ldr	r3, [r5, #8]
 804b122:	4621      	mov	r1, r4
 804b124:	4628      	mov	r0, r5
 804b126:	685b      	ldr	r3, [r3, #4]
}
 804b128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 804b12c:	4718      	bx	r3
 804b12e:	f06f 0012 	mvn.w	r0, #18
 804b132:	bd70      	pop	{r4, r5, r6, pc}
 804b134:	0805b844 	.word	0x0805b844

0804b138 <device_name_get>:
static void device_name_get(size_t idx, struct shell_static_entry *entry);

SHELL_DYNAMIC_CMD_CREATE(dsub_device_name, device_name_get);

static void device_name_get(size_t idx, struct shell_static_entry *entry)
{
 804b138:	b510      	push	{r4, lr}
 804b13a:	460c      	mov	r4, r1
	const struct device *dev = shell_device_lookup(idx, I2C_DEVICE_PREFIX);
 804b13c:	4905      	ldr	r1, [pc, #20]	; (804b154 <device_name_get+0x1c>)
 804b13e:	f00b fcc4 	bl	8056aca <shell_device_lookup>

	entry->syntax = (dev != NULL) ? dev->name : NULL;
 804b142:	b100      	cbz	r0, 804b146 <device_name_get+0xe>
 804b144:	6800      	ldr	r0, [r0, #0]
	entry->handler = NULL;
 804b146:	2300      	movs	r3, #0
	entry->syntax = (dev != NULL) ? dev->name : NULL;
 804b148:	6020      	str	r0, [r4, #0]
	entry->handler = NULL;
 804b14a:	60e3      	str	r3, [r4, #12]
	entry->help = NULL;
	entry->subcmd = NULL;
 804b14c:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
 804b150:	bd10      	pop	{r4, pc}
 804b152:	bf00      	nop
 804b154:	08061c34 	.word	0x08061c34

0804b158 <cmd_i2c_write_byte>:
{
 804b158:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 804b15c:	4605      	mov	r5, r0
 804b15e:	4614      	mov	r4, r2
	dev = device_get_binding(argv[1]);
 804b160:	6850      	ldr	r0, [r2, #4]
 804b162:	f005 ffcb 	bl	80510fc <z_impl_device_get_binding>
	if (!dev) {
 804b166:	4606      	mov	r6, r0
 804b168:	b950      	cbnz	r0, 804b180 <cmd_i2c_write_byte+0x28>
		shell_error(shell, "I2C: Device driver %s not found.",
 804b16a:	4628      	mov	r0, r5
 804b16c:	6863      	ldr	r3, [r4, #4]
 804b16e:	4a1c      	ldr	r2, [pc, #112]	; (804b1e0 <cmd_i2c_write_byte+0x88>)
 804b170:	2102      	movs	r1, #2
 804b172:	f00b fba4 	bl	80568be <shell_fprintf>
		return -ENODEV;
 804b176:	f06f 0012 	mvn.w	r0, #18
}
 804b17a:	b004      	add	sp, #16
 804b17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dev_addr = strtol(argv[2], NULL, 16);
 804b180:	2210      	movs	r2, #16
 804b182:	2100      	movs	r1, #0
 804b184:	68a0      	ldr	r0, [r4, #8]
 804b186:	f007 fead 	bl	8052ee4 <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
 804b18a:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
 804b18c:	4680      	mov	r8, r0
	reg_addr = strtol(argv[3], NULL, 16);
 804b18e:	2100      	movs	r1, #0
 804b190:	68e0      	ldr	r0, [r4, #12]
 804b192:	f007 fea7 	bl	8052ee4 <strtol>
 804b196:	4607      	mov	r7, r0
	out_byte = strtol(argv[4], NULL, 16);
 804b198:	2210      	movs	r2, #16
 804b19a:	2100      	movs	r1, #0
 804b19c:	6920      	ldr	r0, [r4, #16]
 804b19e:	f007 fea1 	bl	8052ee4 <strtol>
	if (i2c_reg_write_byte(dev, dev_addr, reg_addr, out_byte) < 0) {
 804b1a2:	f88d 7000 	strb.w	r7, [sp]
			    uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = (uint8_t *)buf;
	msg.len = num_bytes;
 804b1a6:	2702      	movs	r7, #2
 804b1a8:	f88d 0001 	strb.w	r0, [sp, #1]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;

	return i2c_transfer(dev, &msg, 1, addr);
 804b1ac:	fa1f f388 	uxth.w	r3, r8
 804b1b0:	2201      	movs	r2, #1
 804b1b2:	a901      	add	r1, sp, #4
 804b1b4:	4630      	mov	r0, r6
	msg.buf = (uint8_t *)buf;
 804b1b6:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
 804b1ba:	9702      	str	r7, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 804b1bc:	f88d 700c 	strb.w	r7, [sp, #12]
	return i2c_transfer(dev, &msg, 1, addr);
 804b1c0:	f00c fe38 	bl	8057e34 <i2c_transfer>
 804b1c4:	2800      	cmp	r0, #0
 804b1c6:	da08      	bge.n	804b1da <cmd_i2c_write_byte+0x82>
		shell_error(shell, "Failed to write to device: %s", argv[1]);
 804b1c8:	4628      	mov	r0, r5
 804b1ca:	6863      	ldr	r3, [r4, #4]
 804b1cc:	4a05      	ldr	r2, [pc, #20]	; (804b1e4 <cmd_i2c_write_byte+0x8c>)
 804b1ce:	4639      	mov	r1, r7
 804b1d0:	f00b fb75 	bl	80568be <shell_fprintf>
		return -EIO;
 804b1d4:	f06f 0004 	mvn.w	r0, #4
 804b1d8:	e7cf      	b.n	804b17a <cmd_i2c_write_byte+0x22>
	return 0;
 804b1da:	2000      	movs	r0, #0
 804b1dc:	e7cd      	b.n	804b17a <cmd_i2c_write_byte+0x22>
 804b1de:	bf00      	nop
 804b1e0:	08061c39 	.word	0x08061c39
 804b1e4:	08061c5b 	.word	0x08061c5b

0804b1e8 <cmd_i2c_read>:
{
 804b1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804b1ec:	4606      	mov	r6, r0
 804b1ee:	b08c      	sub	sp, #48	; 0x30
 804b1f0:	460f      	mov	r7, r1
 804b1f2:	4614      	mov	r4, r2
	dev = device_get_binding(argv[1]);
 804b1f4:	6850      	ldr	r0, [r2, #4]
 804b1f6:	f005 ff81 	bl	80510fc <z_impl_device_get_binding>
	if (!dev) {
 804b1fa:	4680      	mov	r8, r0
 804b1fc:	b950      	cbnz	r0, 804b214 <cmd_i2c_read+0x2c>
		shell_error(shell, "I2C: Device driver %s not found.", argv[1]);
 804b1fe:	4630      	mov	r0, r6
 804b200:	6863      	ldr	r3, [r4, #4]
 804b202:	4a26      	ldr	r2, [pc, #152]	; (804b29c <cmd_i2c_read+0xb4>)
 804b204:	2102      	movs	r1, #2
 804b206:	f00b fb5a 	bl	80568be <shell_fprintf>
		return -ENODEV;
 804b20a:	f06f 0012 	mvn.w	r0, #18
}
 804b20e:	b00c      	add	sp, #48	; 0x30
 804b210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	dev_addr = strtol(argv[2], NULL, 16);
 804b214:	2210      	movs	r2, #16
 804b216:	2100      	movs	r1, #0
 804b218:	68a0      	ldr	r0, [r4, #8]
 804b21a:	f007 fe63 	bl	8052ee4 <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
 804b21e:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
 804b220:	4681      	mov	r9, r0
	reg_addr = strtol(argv[3], NULL, 16);
 804b222:	2100      	movs	r1, #0
 804b224:	68e0      	ldr	r0, [r4, #12]
 804b226:	f007 fe5d 	bl	8052ee4 <strtol>
	if (argc > 4) {
 804b22a:	2f04      	cmp	r7, #4
	reg_addr = strtol(argv[3], NULL, 16);
 804b22c:	4605      	mov	r5, r0
	if (argc > 4) {
 804b22e:	d92b      	bls.n	804b288 <cmd_i2c_read+0xa0>
		num_bytes = strtol(argv[4], NULL, 16);
 804b230:	2210      	movs	r2, #16
 804b232:	2100      	movs	r1, #0
 804b234:	6920      	ldr	r0, [r4, #16]
 804b236:	f007 fe55 	bl	8052ee4 <strtol>
		if (num_bytes > MAX_I2C_BYTES)
 804b23a:	2810      	cmp	r0, #16
 804b23c:	bfa8      	it	ge
 804b23e:	2010      	movge	r0, #16
 804b240:	4607      	mov	r7, r0
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
 804b242:	f10d 0307 	add.w	r3, sp, #7
	if (i2c_burst_read(dev, dev_addr, reg_addr, buf, num_bytes) < 0) {
 804b246:	f88d 5007 	strb.w	r5, [sp, #7]
	msg[0].len = num_write;
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
 804b24a:	f10d 0a08 	add.w	sl, sp, #8
	msg[0].flags = I2C_MSG_WRITE;
 804b24e:	2500      	movs	r5, #0
	msg[0].buf = (uint8_t *)write_buf;
 804b250:	9306      	str	r3, [sp, #24]
	msg[0].len = num_write;
 804b252:	2301      	movs	r3, #1
	msg[1].len = num_read;
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;

	return i2c_transfer(dev, msg, 2, addr);
 804b254:	2202      	movs	r2, #2
 804b256:	a906      	add	r1, sp, #24
	msg[0].len = num_write;
 804b258:	9307      	str	r3, [sp, #28]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 804b25a:	2307      	movs	r3, #7
	return i2c_transfer(dev, msg, 2, addr);
 804b25c:	4640      	mov	r0, r8
	msg[0].flags = I2C_MSG_WRITE;
 804b25e:	f88d 5020 	strb.w	r5, [sp, #32]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 804b262:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	return i2c_transfer(dev, msg, 2, addr);
 804b266:	fa1f f389 	uxth.w	r3, r9
	msg[1].len = num_read;
 804b26a:	e9cd a709 	strd	sl, r7, [sp, #36]	; 0x24
	return i2c_transfer(dev, msg, 2, addr);
 804b26e:	f00c fde1 	bl	8057e34 <i2c_transfer>
 804b272:	42a8      	cmp	r0, r5
 804b274:	da0a      	bge.n	804b28c <cmd_i2c_read+0xa4>
		shell_error(shell, "Failed to read from device: %s", argv[1]);
 804b276:	4630      	mov	r0, r6
 804b278:	6863      	ldr	r3, [r4, #4]
 804b27a:	4a09      	ldr	r2, [pc, #36]	; (804b2a0 <cmd_i2c_read+0xb8>)
 804b27c:	2102      	movs	r1, #2
 804b27e:	f00b fb1e 	bl	80568be <shell_fprintf>
		return -EIO;
 804b282:	f06f 0004 	mvn.w	r0, #4
 804b286:	e7c2      	b.n	804b20e <cmd_i2c_read+0x26>
		num_bytes = MAX_I2C_BYTES;
 804b288:	2710      	movs	r7, #16
 804b28a:	e7da      	b.n	804b242 <cmd_i2c_read+0x5a>
	shell_hexdump(shell, buf, num_bytes);
 804b28c:	4630      	mov	r0, r6
 804b28e:	463a      	mov	r2, r7
 804b290:	4651      	mov	r1, sl
 804b292:	f00b fb21 	bl	80568d8 <shell_hexdump>
	return 0;
 804b296:	4628      	mov	r0, r5
 804b298:	e7b9      	b.n	804b20e <cmd_i2c_read+0x26>
 804b29a:	bf00      	nop
 804b29c:	08061c39 	.word	0x08061c39
 804b2a0:	08061c7a 	.word	0x08061c7a

0804b2a4 <cmd_i2c_scan>:
{
 804b2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804b2a8:	4604      	mov	r4, r0
 804b2aa:	b087      	sub	sp, #28
 804b2ac:	4690      	mov	r8, r2
	dev = device_get_binding(argv[1]);
 804b2ae:	6850      	ldr	r0, [r2, #4]
 804b2b0:	f005 ff24 	bl	80510fc <z_impl_device_get_binding>
	if (!dev) {
 804b2b4:	4681      	mov	r9, r0
 804b2b6:	b958      	cbnz	r0, 804b2d0 <cmd_i2c_scan+0x2c>
		shell_error(shell, "I2C: Device driver %s not found.",
 804b2b8:	4620      	mov	r0, r4
 804b2ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 804b2be:	4a2b      	ldr	r2, [pc, #172]	; (804b36c <cmd_i2c_scan+0xc8>)
 804b2c0:	2102      	movs	r1, #2
 804b2c2:	f00b fafc 	bl	80568be <shell_fprintf>
		return -ENODEV;
 804b2c6:	f06f 0012 	mvn.w	r0, #18
}
 804b2ca:	b007      	add	sp, #28
 804b2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	shell_print(shell,
 804b2d0:	2600      	movs	r6, #0
 804b2d2:	4a27      	ldr	r2, [pc, #156]	; (804b370 <cmd_i2c_scan+0xcc>)
 804b2d4:	2100      	movs	r1, #0
 804b2d6:	4620      	mov	r0, r4
	uint8_t cnt = 0, first = 0x04, last = 0x77;
 804b2d8:	4637      	mov	r7, r6
	shell_print(shell,
 804b2da:	f00b faf0 	bl	80568be <shell_fprintf>
		shell_fprintf(shell, SHELL_NORMAL, "%02x: ", i);
 804b2de:	4635      	mov	r5, r6
				shell_fprintf(shell, SHELL_NORMAL,
 804b2e0:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 804b384 <cmd_i2c_scan+0xe0>
				shell_fprintf(shell, SHELL_NORMAL, "   ");
 804b2e4:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 804b388 <cmd_i2c_scan+0xe4>
		shell_fprintf(shell, SHELL_NORMAL, "%02x: ", i);
 804b2e8:	4633      	mov	r3, r6
 804b2ea:	4a22      	ldr	r2, [pc, #136]	; (804b374 <cmd_i2c_scan+0xd0>)
 804b2ec:	2100      	movs	r1, #0
 804b2ee:	4620      	mov	r0, r4
 804b2f0:	f00b fae5 	bl	80568be <shell_fprintf>
			if (i + j < first || i + j > last) {
 804b2f4:	1f2b      	subs	r3, r5, #4
 804b2f6:	2b73      	cmp	r3, #115	; 0x73
 804b2f8:	d907      	bls.n	804b30a <cmd_i2c_scan+0x66>
				shell_fprintf(shell, SHELL_NORMAL, "   ");
 804b2fa:	465a      	mov	r2, fp
				shell_fprintf(shell, SHELL_NORMAL, "-- ");
 804b2fc:	2100      	movs	r1, #0
 804b2fe:	4620      	mov	r0, r4
 804b300:	f00b fadd 	bl	80568be <shell_fprintf>
 804b304:	e018      	b.n	804b338 <cmd_i2c_scan+0x94>
 804b306:	462e      	mov	r6, r5
 804b308:	e7e9      	b.n	804b2de <cmd_i2c_scan+0x3a>
			msgs[0].buf = &dst;
 804b30a:	f10d 030b 	add.w	r3, sp, #11
			if (i2c_transfer(dev, &msgs[0], 1, i + j) == 0) {
 804b30e:	a903      	add	r1, sp, #12
 804b310:	2201      	movs	r2, #1
 804b312:	4648      	mov	r0, r9
			msgs[0].buf = &dst;
 804b314:	9303      	str	r3, [sp, #12]
			msgs[0].len = 0U;
 804b316:	2300      	movs	r3, #0
 804b318:	9304      	str	r3, [sp, #16]
			msgs[0].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 804b31a:	2302      	movs	r3, #2
 804b31c:	f88d 3014 	strb.w	r3, [sp, #20]
			if (i2c_transfer(dev, &msgs[0], 1, i + j) == 0) {
 804b320:	b2ab      	uxth	r3, r5
 804b322:	f00c fd87 	bl	8057e34 <i2c_transfer>
 804b326:	4601      	mov	r1, r0
 804b328:	b9e8      	cbnz	r0, 804b366 <cmd_i2c_scan+0xc2>
				++cnt;
 804b32a:	3701      	adds	r7, #1
				shell_fprintf(shell, SHELL_NORMAL,
 804b32c:	462b      	mov	r3, r5
 804b32e:	4652      	mov	r2, sl
 804b330:	4620      	mov	r0, r4
				++cnt;
 804b332:	b2ff      	uxtb	r7, r7
				shell_fprintf(shell, SHELL_NORMAL,
 804b334:	f00b fac3 	bl	80568be <shell_fprintf>
		for (uint8_t j = 0; j < 16; j++) {
 804b338:	3501      	adds	r5, #1
 804b33a:	f106 0310 	add.w	r3, r6, #16
 804b33e:	429d      	cmp	r5, r3
 804b340:	d1d8      	bne.n	804b2f4 <cmd_i2c_scan+0x50>
		shell_print(shell, "");
 804b342:	4a0d      	ldr	r2, [pc, #52]	; (804b378 <cmd_i2c_scan+0xd4>)
 804b344:	2100      	movs	r1, #0
 804b346:	4620      	mov	r0, r4
 804b348:	f00b fab9 	bl	80568be <shell_fprintf>
	for (uint8_t i = 0; i <= last; i += 16) {
 804b34c:	2d80      	cmp	r5, #128	; 0x80
 804b34e:	d1da      	bne.n	804b306 <cmd_i2c_scan+0x62>
	shell_print(shell, "%u devices found on %s",
 804b350:	f8d8 3004 	ldr.w	r3, [r8, #4]
 804b354:	4620      	mov	r0, r4
 804b356:	4a09      	ldr	r2, [pc, #36]	; (804b37c <cmd_i2c_scan+0xd8>)
 804b358:	2100      	movs	r1, #0
 804b35a:	9300      	str	r3, [sp, #0]
 804b35c:	463b      	mov	r3, r7
 804b35e:	f00b faae 	bl	80568be <shell_fprintf>
	return 0;
 804b362:	2000      	movs	r0, #0
 804b364:	e7b1      	b.n	804b2ca <cmd_i2c_scan+0x26>
				shell_fprintf(shell, SHELL_NORMAL, "-- ");
 804b366:	4a06      	ldr	r2, [pc, #24]	; (804b380 <cmd_i2c_scan+0xdc>)
 804b368:	e7c8      	b.n	804b2fc <cmd_i2c_scan+0x58>
 804b36a:	bf00      	nop
 804b36c:	08061c39 	.word	0x08061c39
 804b370:	08061c9a 	.word	0x08061c9a
 804b374:	08061ccf 	.word	0x08061ccf
 804b378:	08060044 	.word	0x08060044
 804b37c:	08061cda 	.word	0x08061cda
 804b380:	08061cd6 	.word	0x08061cd6
 804b384:	0805fb26 	.word	0x0805fb26
 804b388:	08062fda 	.word	0x08062fda

0804b38c <cmd_i2c_recover>:
{
 804b38c:	b538      	push	{r3, r4, r5, lr}
 804b38e:	4605      	mov	r5, r0
 804b390:	4614      	mov	r4, r2
	dev = device_get_binding(argv[1]);
 804b392:	6850      	ldr	r0, [r2, #4]
 804b394:	f005 feb2 	bl	80510fc <z_impl_device_get_binding>
	if (!dev) {
 804b398:	b948      	cbnz	r0, 804b3ae <cmd_i2c_recover+0x22>
		shell_error(shell, "I2C: Device driver %s not found.", argv[1]);
 804b39a:	6863      	ldr	r3, [r4, #4]
 804b39c:	f06f 0412 	mvn.w	r4, #18
 804b3a0:	4a0b      	ldr	r2, [pc, #44]	; (804b3d0 <cmd_i2c_recover+0x44>)
 804b3a2:	2102      	movs	r1, #2
 804b3a4:	4628      	mov	r0, r5
 804b3a6:	f00b fa8a 	bl	80568be <shell_fprintf>
}
 804b3aa:	4620      	mov	r0, r4
 804b3ac:	bd38      	pop	{r3, r4, r5, pc}
	if (api->recover_bus == NULL) {
 804b3ae:	6883      	ldr	r3, [r0, #8]
 804b3b0:	691b      	ldr	r3, [r3, #16]
 804b3b2:	b153      	cbz	r3, 804b3ca <cmd_i2c_recover+0x3e>
	return api->recover_bus(dev);
 804b3b4:	4798      	blx	r3
	if (err) {
 804b3b6:	4604      	mov	r4, r0
 804b3b8:	2800      	cmp	r0, #0
 804b3ba:	d0f6      	beq.n	804b3aa <cmd_i2c_recover+0x1e>
		shell_error(shell, "I2C: Bus recovery failed (err %d)", err);
 804b3bc:	4623      	mov	r3, r4
 804b3be:	4a05      	ldr	r2, [pc, #20]	; (804b3d4 <cmd_i2c_recover+0x48>)
 804b3c0:	2102      	movs	r1, #2
 804b3c2:	4628      	mov	r0, r5
 804b3c4:	f00b fa7b 	bl	80568be <shell_fprintf>
		return err;
 804b3c8:	e7ef      	b.n	804b3aa <cmd_i2c_recover+0x1e>
		return -ENOSYS;
 804b3ca:	f06f 0457 	mvn.w	r4, #87	; 0x57
 804b3ce:	e7f5      	b.n	804b3bc <cmd_i2c_recover+0x30>
 804b3d0:	08061c39 	.word	0x08061c39
 804b3d4:	08061cf2 	.word	0x08061cf2

0804b3d8 <cmd_i2c_read_byte>:
{
 804b3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804b3dc:	4606      	mov	r6, r0
 804b3de:	b088      	sub	sp, #32
 804b3e0:	4615      	mov	r5, r2
	dev = device_get_binding(argv[1]);
 804b3e2:	6850      	ldr	r0, [r2, #4]
 804b3e4:	f005 fe8a 	bl	80510fc <z_impl_device_get_binding>
	if (!dev) {
 804b3e8:	4607      	mov	r7, r0
 804b3ea:	b950      	cbnz	r0, 804b402 <cmd_i2c_read_byte+0x2a>
		shell_error(shell, "I2C: Device driver %s not found.",
 804b3ec:	4630      	mov	r0, r6
 804b3ee:	686b      	ldr	r3, [r5, #4]
 804b3f0:	4a1f      	ldr	r2, [pc, #124]	; (804b470 <cmd_i2c_read_byte+0x98>)
 804b3f2:	2102      	movs	r1, #2
 804b3f4:	f00b fa63 	bl	80568be <shell_fprintf>
		return -ENODEV;
 804b3f8:	f06f 0012 	mvn.w	r0, #18
}
 804b3fc:	b008      	add	sp, #32
 804b3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dev_addr = strtol(argv[2], NULL, 16);
 804b402:	2210      	movs	r2, #16
 804b404:	2100      	movs	r1, #0
 804b406:	68a8      	ldr	r0, [r5, #8]
	msg[0].flags = I2C_MSG_WRITE;
 804b408:	2400      	movs	r4, #0
 804b40a:	f007 fd6b 	bl	8052ee4 <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
 804b40e:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
 804b410:	4680      	mov	r8, r0
	reg_addr = strtol(argv[3], NULL, 16);
 804b412:	2100      	movs	r1, #0
 804b414:	68e8      	ldr	r0, [r5, #12]
 804b416:	f007 fd65 	bl	8052ee4 <strtol>
	msg[0].buf = (uint8_t *)write_buf;
 804b41a:	f10d 0307 	add.w	r3, sp, #7
	msg[1].buf = (uint8_t *)read_buf;
 804b41e:	f10d 0206 	add.w	r2, sp, #6
	if (i2c_reg_read_byte(dev, dev_addr, reg_addr, &out) < 0) {
 804b422:	f88d 0007 	strb.w	r0, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
 804b426:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
 804b428:	2301      	movs	r3, #1
	return i2c_transfer(dev, msg, 2, addr);
 804b42a:	a902      	add	r1, sp, #8
 804b42c:	4638      	mov	r0, r7
	msg[0].len = num_write;
 804b42e:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
 804b430:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].len = num_read;
 804b434:	e9cd 2305 	strd	r2, r3, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 804b438:	2307      	movs	r3, #7
	return i2c_transfer(dev, msg, 2, addr);
 804b43a:	2202      	movs	r2, #2
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 804b43c:	f88d 301c 	strb.w	r3, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
 804b440:	fa1f f388 	uxth.w	r3, r8
 804b444:	f00c fcf6 	bl	8057e34 <i2c_transfer>
 804b448:	42a0      	cmp	r0, r4
 804b44a:	da08      	bge.n	804b45e <cmd_i2c_read_byte+0x86>
		shell_error(shell, "Failed to read from device: %s", argv[1]);
 804b44c:	4630      	mov	r0, r6
 804b44e:	686b      	ldr	r3, [r5, #4]
 804b450:	4a08      	ldr	r2, [pc, #32]	; (804b474 <cmd_i2c_read_byte+0x9c>)
 804b452:	2102      	movs	r1, #2
 804b454:	f00b fa33 	bl	80568be <shell_fprintf>
		return -EIO;
 804b458:	f06f 0004 	mvn.w	r0, #4
 804b45c:	e7ce      	b.n	804b3fc <cmd_i2c_read_byte+0x24>
	shell_print(shell, "Output: 0x%x", out);
 804b45e:	4630      	mov	r0, r6
 804b460:	f89d 3006 	ldrb.w	r3, [sp, #6]
 804b464:	4a04      	ldr	r2, [pc, #16]	; (804b478 <cmd_i2c_read_byte+0xa0>)
 804b466:	4621      	mov	r1, r4
 804b468:	f00b fa29 	bl	80568be <shell_fprintf>
	return 0;
 804b46c:	4620      	mov	r0, r4
 804b46e:	e7c5      	b.n	804b3fc <cmd_i2c_read_byte+0x24>
 804b470:	08061c39 	.word	0x08061c39
 804b474:	08061c7a 	.word	0x08061c7a
 804b478:	08061d15 	.word	0x08061d15

0804b47c <cmd_i2c_write>:
{
 804b47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804b480:	4606      	mov	r6, r0
 804b482:	b08f      	sub	sp, #60	; 0x3c
 804b484:	460c      	mov	r4, r1
 804b486:	4615      	mov	r5, r2
	dev = device_get_binding(argv[1]);
 804b488:	6850      	ldr	r0, [r2, #4]
 804b48a:	f005 fe37 	bl	80510fc <z_impl_device_get_binding>
	if (!dev) {
 804b48e:	4607      	mov	r7, r0
 804b490:	b950      	cbnz	r0, 804b4a8 <cmd_i2c_write+0x2c>
		shell_error(shell, "I2C: Device driver %s not found.", argv[1]);
 804b492:	4630      	mov	r0, r6
 804b494:	686b      	ldr	r3, [r5, #4]
 804b496:	4a28      	ldr	r2, [pc, #160]	; (804b538 <cmd_i2c_write+0xbc>)
 804b498:	2102      	movs	r1, #2
 804b49a:	f00b fa10 	bl	80568be <shell_fprintf>
		return -ENODEV;
 804b49e:	f06f 0012 	mvn.w	r0, #18
}
 804b4a2:	b00f      	add	sp, #60	; 0x3c
 804b4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dev_addr = strtol(argv[2], NULL, 16);
 804b4a8:	2210      	movs	r2, #16
 804b4aa:	2100      	movs	r1, #0
 804b4ac:	68a8      	ldr	r0, [r5, #8]
 804b4ae:	f007 fd19 	bl	8052ee4 <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
 804b4b2:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
 804b4b4:	4683      	mov	fp, r0
	reg_addr = strtol(argv[3], NULL, 16);
 804b4b6:	2100      	movs	r1, #0
 804b4b8:	68e8      	ldr	r0, [r5, #12]
 804b4ba:	f007 fd13 	bl	8052ee4 <strtol>
	if (num_bytes < 0) {
 804b4be:	3c04      	subs	r4, #4
	reg_addr = strtol(argv[3], NULL, 16);
 804b4c0:	4681      	mov	r9, r0
	if (num_bytes < 0) {
 804b4c2:	d501      	bpl.n	804b4c8 <cmd_i2c_write+0x4c>
		return 0;
 804b4c4:	2000      	movs	r0, #0
 804b4c6:	e7ec      	b.n	804b4a2 <cmd_i2c_write+0x26>
	for (i = 0; i < num_bytes; i++) {
 804b4c8:	2c10      	cmp	r4, #16
 804b4ca:	f105 080c 	add.w	r8, r5, #12
 804b4ce:	f10d 0a10 	add.w	sl, sp, #16
 804b4d2:	bfa8      	it	ge
 804b4d4:	2410      	movge	r4, #16
 804b4d6:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 804b4da:	4598      	cmp	r8, r3
 804b4dc:	d121      	bne.n	804b522 <cmd_i2c_write+0xa6>
				  const uint8_t *buf,
				  uint32_t num_bytes)
{
	struct i2c_msg msg[2];

	msg[0].buf = &start_addr;
 804b4de:	f10d 030f 	add.w	r3, sp, #15

	msg[1].buf = (uint8_t *)buf;
	msg[1].len = num_bytes;
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;

	return i2c_transfer(dev, msg, 2, dev_addr);
 804b4e2:	a908      	add	r1, sp, #32
 804b4e4:	4638      	mov	r0, r7
	if (i2c_burst_write(dev, dev_addr, reg_addr, buf, num_bytes) < 0) {
 804b4e6:	f88d 900f 	strb.w	r9, [sp, #15]
	msg[0].buf = &start_addr;
 804b4ea:	9308      	str	r3, [sp, #32]
	msg[0].len = 1U;
 804b4ec:	2301      	movs	r3, #1
 804b4ee:	9309      	str	r3, [sp, #36]	; 0x24
	msg[0].flags = I2C_MSG_WRITE;
 804b4f0:	2300      	movs	r3, #0
 804b4f2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	msg[1].buf = (uint8_t *)buf;
 804b4f6:	ab04      	add	r3, sp, #16
	msg[1].len = num_bytes;
 804b4f8:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 804b4fc:	2402      	movs	r4, #2
	return i2c_transfer(dev, msg, 2, dev_addr);
 804b4fe:	fa1f f38b 	uxth.w	r3, fp
 804b502:	4622      	mov	r2, r4
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 804b504:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
	return i2c_transfer(dev, msg, 2, dev_addr);
 804b508:	f00c fc94 	bl	8057e34 <i2c_transfer>
 804b50c:	2800      	cmp	r0, #0
 804b50e:	dad9      	bge.n	804b4c4 <cmd_i2c_write+0x48>
		shell_error(shell, "Failed to write to device: %s", argv[1]);
 804b510:	4630      	mov	r0, r6
 804b512:	686b      	ldr	r3, [r5, #4]
 804b514:	4a09      	ldr	r2, [pc, #36]	; (804b53c <cmd_i2c_write+0xc0>)
 804b516:	4621      	mov	r1, r4
 804b518:	f00b f9d1 	bl	80568be <shell_fprintf>
		return -EIO;
 804b51c:	f06f 0004 	mvn.w	r0, #4
 804b520:	e7bf      	b.n	804b4a2 <cmd_i2c_write+0x26>
		buf[i] = (uint8_t)strtol(argv[4 + i], NULL, 16);
 804b522:	2210      	movs	r2, #16
 804b524:	2100      	movs	r1, #0
 804b526:	f858 0f04 	ldr.w	r0, [r8, #4]!
 804b52a:	9301      	str	r3, [sp, #4]
 804b52c:	f007 fcda 	bl	8052ee4 <strtol>
 804b530:	9b01      	ldr	r3, [sp, #4]
 804b532:	f80a 0b01 	strb.w	r0, [sl], #1
 804b536:	e7d0      	b.n	804b4da <cmd_i2c_write+0x5e>
 804b538:	08061c39 	.word	0x08061c39
 804b53c:	08061c5b 	.word	0x08061c5b

0804b540 <msg_init>:
#define STM32_I2C_TRANSFER_TIMEOUT_MSEC  500

static inline void msg_init(const struct device *dev, struct i2c_msg *msg,
			    uint8_t *next_msg_flags, uint16_t slave,
			    uint32_t transfer)
{
 804b540:	b5f0      	push	{r4, r5, r6, r7, lr}
 804b542:	4607      	mov	r7, r0
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
	struct i2c_stm32_data *data = DEV_DATA(dev);
	I2C_TypeDef *i2c = cfg->i2c;
 804b544:	6840      	ldr	r0, [r0, #4]
  * @param  TransferSize This parameter must be a value between Min_Data=0x00 and Max_Data=0xFF.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferSize(I2C_TypeDef *I2Cx, uint32_t TransferSize)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 804b546:	684e      	ldr	r6, [r1, #4]
 804b548:	68c4      	ldr	r4, [r0, #12]
 804b54a:	0436      	lsls	r6, r6, #16
  return ((READ_BIT(I2Cx->CR2, I2C_CR2_RELOAD) == (I2C_CR2_RELOAD)) ? 1UL : 0UL);
 804b54c:	6860      	ldr	r0, [r4, #4]
 804b54e:	01c0      	lsls	r0, r0, #7
 804b550:	d505      	bpl.n	804b55e <msg_init+0x1e>
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 804b552:	6863      	ldr	r3, [r4, #4]
 804b554:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 804b558:	4333      	orrs	r3, r6
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 804b55a:	6063      	str	r3, [r4, #4]
#endif
		LL_I2C_Enable(i2c);

		LL_I2C_GenerateStartCondition(i2c);
	}
}
 804b55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (I2C_ADDR_10_BITS & data->dev_config) {
 804b55e:	6938      	ldr	r0, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 804b560:	6867      	ldr	r7, [r4, #4]
 804b562:	6b00      	ldr	r0, [r0, #48]	; 0x30
 804b564:	f010 0f01 	tst.w	r0, #1
 804b568:	481b      	ldr	r0, [pc, #108]	; (804b5d8 <msg_init+0x98>)
 804b56a:	d028      	beq.n	804b5be <msg_init+0x7e>
 804b56c:	f447 6700 	orr.w	r7, r7, #2048	; 0x800
 804b570:	6067      	str	r7, [r4, #4]
  * @param  SlaveAddr This parameter must be a value between Min_Data=0x00 and Max_Data=0x3F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetSlaveAddr(I2C_TypeDef *I2Cx, uint32_t SlaveAddr)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 804b572:	6865      	ldr	r5, [r4, #4]
 804b574:	4005      	ands	r5, r0
 804b576:	432b      	orrs	r3, r5
 804b578:	6063      	str	r3, [r4, #4]
		if (!(msg->flags & I2C_MSG_STOP) && next_msg_flags &&
 804b57a:	7a0b      	ldrb	r3, [r1, #8]
 804b57c:	0799      	lsls	r1, r3, #30
 804b57e:	d426      	bmi.n	804b5ce <msg_init+0x8e>
 804b580:	b32a      	cbz	r2, 804b5ce <msg_init+0x8e>
 804b582:	7813      	ldrb	r3, [r2, #0]
 804b584:	075b      	lsls	r3, r3, #29
 804b586:	d422      	bmi.n	804b5ce <msg_init+0x8e>
  SET_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 804b588:	6863      	ldr	r3, [r4, #4]
 804b58a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 804b58e:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 804b590:	6863      	ldr	r3, [r4, #4]
 804b592:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 804b596:	6063      	str	r3, [r4, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
 804b598:	6862      	ldr	r2, [r4, #4]
 804b59a:	9b05      	ldr	r3, [sp, #20]
 804b59c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 804b5a0:	431a      	orrs	r2, r3
 804b5a2:	6062      	str	r2, [r4, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 804b5a4:	6863      	ldr	r3, [r4, #4]
 804b5a6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 804b5aa:	4333      	orrs	r3, r6
 804b5ac:	6063      	str	r3, [r4, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 804b5ae:	6823      	ldr	r3, [r4, #0]
 804b5b0:	f043 0301 	orr.w	r3, r3, #1
 804b5b4:	6023      	str	r3, [r4, #0]
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 804b5b6:	6863      	ldr	r3, [r4, #4]
 804b5b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 804b5bc:	e7cd      	b.n	804b55a <msg_init+0x1a>
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 804b5be:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 804b5c2:	6067      	str	r7, [r4, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 804b5c4:	6865      	ldr	r5, [r4, #4]
 804b5c6:	4005      	ands	r5, r0
 804b5c8:	ea45 0343 	orr.w	r3, r5, r3, lsl #1
 804b5cc:	e7d4      	b.n	804b578 <msg_init+0x38>
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 804b5ce:	6863      	ldr	r3, [r4, #4]
 804b5d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 804b5d4:	e7db      	b.n	804b58e <msg_init+0x4e>
 804b5d6:	bf00      	nop
 804b5d8:	fffffc00 	.word	0xfffffc00

0804b5dc <stm32_i2c_configure_timing>:
	return msg_done(dev, msg->flags);
}
#endif

int stm32_i2c_configure_timing(const struct device *dev, uint32_t clock)
{
 804b5dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804b5e0:	4b55      	ldr	r3, [pc, #340]	; (804b738 <stm32_i2c_configure_timing+0x15c>)
 804b5e2:	460c      	mov	r4, r1
 804b5e4:	f8df a168 	ldr.w	sl, [pc, #360]	; 804b750 <stm32_i2c_configure_timing+0x174>
	uint32_t i2c_h_min_time, i2c_l_min_time;
	uint32_t presc = 1U;
	uint32_t timing = 0U;

	/*  Look for an adequate preset timing value */
	for (uint32_t i = 0; i < cfg->n_timings; i++) {
 804b5e8:	2500      	movs	r5, #0
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 804b5ea:	6847      	ldr	r7, [r0, #4]
 804b5ec:	ebaa 0303 	sub.w	r3, sl, r3
	struct i2c_stm32_data *data = DEV_DATA(dev);
 804b5f0:	f8d0 9010 	ldr.w	r9, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 804b5f4:	f8d7 800c 	ldr.w	r8, [r7, #12]
 804b5f8:	089b      	lsrs	r3, r3, #2
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
	case I2C_BITRATE_ULTRA:
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");
 804b5fa:	4850      	ldr	r0, [pc, #320]	; (804b73c <stm32_i2c_configure_timing+0x160>)
 804b5fc:	9300      	str	r3, [sp, #0]
	for (uint32_t i = 0; i < cfg->n_timings; i++) {
 804b5fe:	6a3b      	ldr	r3, [r7, #32]
 804b600:	42ab      	cmp	r3, r5
 804b602:	d83b      	bhi.n	804b67c <stm32_i2c_configure_timing+0xa0>
			return 0;
		}
	}

	/* No preset timing was provided, let's dynamically configure */
	switch (I2C_SPEED_GET(data->dev_config)) {
 804b604:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 804b608:	f3c3 0342 	ubfx	r3, r3, #1, #3
 804b60c:	2b01      	cmp	r3, #1
 804b60e:	f000 8082 	beq.w	804b716 <stm32_i2c_configure_timing+0x13a>
 804b612:	2b02      	cmp	r3, #2
 804b614:	f040 808c 	bne.w	804b730 <stm32_i2c_configure_timing+0x154>
 804b618:	f240 5014 	movw	r0, #1300	; 0x514
 804b61c:	f44f 7716 	mov.w	r7, #600	; 0x258
 804b620:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 804b624:	f240 1577 	movw	r5, #375	; 0x177
 804b628:	2102      	movs	r1, #2
	}

	/* Calculate period until prescaler matches */
	do {
		uint32_t t_presc = clock / presc;
		uint32_t ns_presc = NSEC_PER_SEC / t_presc;
 804b62a:	f8df c128 	ldr.w	ip, [pc, #296]	; 804b754 <stm32_i2c_configure_timing+0x178>
		uint32_t t_presc = clock / presc;
 804b62e:	1e4b      	subs	r3, r1, #1
 804b630:	fbb4 f3f3 	udiv	r3, r4, r3
		uint32_t ns_presc = NSEC_PER_SEC / t_presc;
 804b634:	fbbc f3f3 	udiv	r3, ip, r3
		uint32_t sclh = i2c_h_min_time / ns_presc;
 804b638:	fbb7 fef3 	udiv	lr, r7, r3
		uint32_t scll = i2c_l_min_time / ns_presc;
		uint32_t sdadel = i2c_hold_time_min / ns_presc;
		uint32_t scldel = i2c_setup_time_min / ns_presc;

		if ((sclh - 1) > 255 ||  (scll - 1) > 255) {
 804b63c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 804b640:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 804b644:	d870      	bhi.n	804b728 <stm32_i2c_configure_timing+0x14c>
		uint32_t scll = i2c_l_min_time / ns_presc;
 804b646:	fbb0 f9f3 	udiv	r9, r0, r3
		if ((sclh - 1) > 255 ||  (scll - 1) > 255) {
 804b64a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 804b64e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 804b652:	d869      	bhi.n	804b728 <stm32_i2c_configure_timing+0x14c>
		uint32_t sdadel = i2c_hold_time_min / ns_presc;
 804b654:	fbb5 f2f3 	udiv	r2, r5, r3
			++presc;
			continue;
		}

		if (sdadel > 15 || (scldel - 1) > 15) {
 804b658:	2a0f      	cmp	r2, #15
 804b65a:	d865      	bhi.n	804b728 <stm32_i2c_configure_timing+0x14c>
		uint32_t scldel = i2c_setup_time_min / ns_presc;
 804b65c:	fbb6 f3f3 	udiv	r3, r6, r3
		if (sdadel > 15 || (scldel - 1) > 15) {
 804b660:	3b01      	subs	r3, #1
 804b662:	2b0f      	cmp	r3, #15
 804b664:	d860      	bhi.n	804b728 <stm32_i2c_configure_timing+0x14c>
			++presc;
			continue;
		}

		timing = __LL_I2C_CONVERT_TIMINGS(presc - 1,
 804b666:	0412      	lsls	r2, r2, #16
 804b668:	3902      	subs	r1, #2
 804b66a:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 804b66e:	ea43 0309 	orr.w	r3, r3, r9
 804b672:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 804b676:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 804b67a:	e02c      	b.n	804b6d6 <stm32_i2c_configure_timing+0xfa>
		const struct i2c_config_timing *preset = &cfg->timings[i];
 804b67c:	260c      	movs	r6, #12
 804b67e:	69fb      	ldr	r3, [r7, #28]
	switch (bitrate) {
 804b680:	4a2f      	ldr	r2, [pc, #188]	; (804b740 <stm32_i2c_configure_timing+0x164>)
 804b682:	436e      	muls	r6, r5
 804b684:	eb03 0b06 	add.w	fp, r3, r6
		uint32_t speed = i2c_map_dt_bitrate(preset->i2c_speed);
 804b688:	f8db 1004 	ldr.w	r1, [fp, #4]
 804b68c:	4291      	cmp	r1, r2
 804b68e:	d034      	beq.n	804b6fa <stm32_i2c_configure_timing+0x11e>
 804b690:	d827      	bhi.n	804b6e2 <stm32_i2c_configure_timing+0x106>
 804b692:	4a2c      	ldr	r2, [pc, #176]	; (804b744 <stm32_i2c_configure_timing+0x168>)
 804b694:	4291      	cmp	r1, r2
 804b696:	d033      	beq.n	804b700 <stm32_i2c_configure_timing+0x124>
 804b698:	4a2b      	ldr	r2, [pc, #172]	; (804b748 <stm32_i2c_configure_timing+0x16c>)
 804b69a:	4291      	cmp	r1, r2
 804b69c:	d033      	beq.n	804b706 <stm32_i2c_configure_timing+0x12a>
	LOG_ERR("Invalid I2C bit rate value");
 804b69e:	f8da 1000 	ldr.w	r1, [sl]
 804b6a2:	f011 0c07 	ands.w	ip, r1, #7
 804b6a6:	d00a      	beq.n	804b6be <stm32_i2c_configure_timing+0xe2>
 804b6a8:	9301      	str	r3, [sp, #4]
 804b6aa:	9b00      	ldr	r3, [sp, #0]
 804b6ac:	0199      	lsls	r1, r3, #6
 804b6ae:	f041 0101 	orr.w	r1, r1, #1
 804b6b2:	f00a fc98 	bl	8055fe6 <log_0>

	return 0;
 804b6b6:	f04f 0c00 	mov.w	ip, #0
 804b6ba:	4820      	ldr	r0, [pc, #128]	; (804b73c <stm32_i2c_configure_timing+0x160>)
 804b6bc:	9b01      	ldr	r3, [sp, #4]
		if ((I2C_SPEED_GET(speed) == I2C_SPEED_GET(data->dev_config))
 804b6be:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
 804b6c2:	f3c1 0142 	ubfx	r1, r1, #1, #3
 804b6c6:	ea91 015c 	eors.w	r1, r1, ip, lsr #1
 804b6ca:	d122      	bne.n	804b712 <stm32_i2c_configure_timing+0x136>
		   && (preset->periph_clock == clock)) {
 804b6cc:	599b      	ldr	r3, [r3, r6]
 804b6ce:	42a3      	cmp	r3, r4
 804b6d0:	d11f      	bne.n	804b712 <stm32_i2c_configure_timing+0x136>
			LL_I2C_SetTiming(i2c, preset->timing_setting);
 804b6d2:	f8db 3008 	ldr.w	r3, [fp, #8]
		return -EINVAL;
	}

	LL_I2C_SetTiming(i2c, timing);

	return 0;
 804b6d6:	2000      	movs	r0, #0
  WRITE_REG(I2Cx->TIMINGR, Timing);
 804b6d8:	f8c8 3010 	str.w	r3, [r8, #16]
}
 804b6dc:	b003      	add	sp, #12
 804b6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (bitrate) {
 804b6e2:	4a1a      	ldr	r2, [pc, #104]	; (804b74c <stm32_i2c_configure_timing+0x170>)
 804b6e4:	4291      	cmp	r1, r2
 804b6e6:	d011      	beq.n	804b70c <stm32_i2c_configure_timing+0x130>
 804b6e8:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 804b6ec:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
 804b6f0:	4291      	cmp	r1, r2
 804b6f2:	d1d4      	bne.n	804b69e <stm32_i2c_configure_timing+0xc2>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
 804b6f4:	f04f 0c0a 	mov.w	ip, #10
 804b6f8:	e7e1      	b.n	804b6be <stm32_i2c_configure_timing+0xe2>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 804b6fa:	f04f 0c06 	mov.w	ip, #6
 804b6fe:	e7de      	b.n	804b6be <stm32_i2c_configure_timing+0xe2>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 804b700:	f04f 0c02 	mov.w	ip, #2
 804b704:	e7db      	b.n	804b6be <stm32_i2c_configure_timing+0xe2>
	switch (bitrate) {
 804b706:	f04f 0c04 	mov.w	ip, #4
 804b70a:	e7d8      	b.n	804b6be <stm32_i2c_configure_timing+0xe2>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 804b70c:	f04f 0c08 	mov.w	ip, #8
 804b710:	e7d5      	b.n	804b6be <stm32_i2c_configure_timing+0xe2>
	for (uint32_t i = 0; i < cfg->n_timings; i++) {
 804b712:	3501      	adds	r5, #1
 804b714:	e773      	b.n	804b5fe <stm32_i2c_configure_timing+0x22>
		i2c_l_min_time = 4700U;
 804b716:	f241 205c 	movw	r0, #4700	; 0x125c
		i2c_h_min_time = 4000U;
 804b71a:	f44f 677a 	mov.w	r7, #4000	; 0xfa0
		i2c_setup_time_min = 1250U;
 804b71e:	f240 46e2 	movw	r6, #1250	; 0x4e2
		i2c_hold_time_min = 500U;
 804b722:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 804b726:	e77f      	b.n	804b628 <stm32_i2c_configure_timing+0x4c>
	} while (presc < 16);
 804b728:	3101      	adds	r1, #1
 804b72a:	2911      	cmp	r1, #17
 804b72c:	f47f af7f 	bne.w	804b62e <stm32_i2c_configure_timing+0x52>
	switch (I2C_SPEED_GET(data->dev_config)) {
 804b730:	f06f 0015 	mvn.w	r0, #21
 804b734:	e7d2      	b.n	804b6dc <stm32_i2c_configure_timing+0x100>
 804b736:	bf00      	nop
 804b738:	200208c8 	.word	0x200208c8
 804b73c:	08061df5 	.word	0x08061df5
 804b740:	000f4240 	.word	0x000f4240
 804b744:	000186a0 	.word	0x000186a0
 804b748:	00061a80 	.word	0x00061a80
 804b74c:	0033e140 	.word	0x0033e140
 804b750:	200208f8 	.word	0x200208f8
 804b754:	3b9aca00 	.word	0x3b9aca00

0804b758 <i2c_stm32_runtime_configure>:
LOG_MODULE_REGISTER(i2c_ll_stm32);

#include "i2c-priv.h"

int i2c_stm32_runtime_configure(const struct device *dev, uint32_t config)
{
 804b758:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 804b75c:	460f      	mov	r7, r1
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 804b75e:	6841      	ldr	r1, [r0, #4]
	struct i2c_stm32_data *data = DEV_DATA(dev);
	I2C_TypeDef *i2c = cfg->i2c;
	uint32_t clock = 0U;
 804b760:	2200      	movs	r2, #0
{
 804b762:	4604      	mov	r4, r0
	I2C_TypeDef *i2c = cfg->i2c;
 804b764:	68ce      	ldr	r6, [r1, #12]
	 */
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
	clock = rcc_clocks.SYSCLK_Frequency;
#else
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
			(clock_control_subsys_t *) &cfg->pclken, &clock) < 0) {
 804b766:	3104      	adds	r1, #4
	struct i2c_stm32_data *data = DEV_DATA(dev);
 804b768:	f8d0 8010 	ldr.w	r8, [r0, #16]
	uint32_t clock = 0U;
 804b76c:	9203      	str	r2, [sp, #12]
			(clock_control_subsys_t *) &cfg->pclken, &clock) < 0) {
 804b76e:	9101      	str	r1, [sp, #4]
 804b770:	4d1e      	ldr	r5, [pc, #120]	; (804b7ec <i2c_stm32_runtime_configure+0x94>)
 804b772:	4628      	mov	r0, r5
 804b774:	f00e fd6f 	bl	805a256 <z_device_ready>
 804b778:	9901      	ldr	r1, [sp, #4]
 804b77a:	b978      	cbnz	r0, 804b79c <i2c_stm32_runtime_configure+0x44>
		LOG_ERR("Failed call clock_control_get_rate");
 804b77c:	491c      	ldr	r1, [pc, #112]	; (804b7f0 <i2c_stm32_runtime_configure+0x98>)
 804b77e:	680b      	ldr	r3, [r1, #0]
 804b780:	075b      	lsls	r3, r3, #29
 804b782:	d008      	beq.n	804b796 <i2c_stm32_runtime_configure+0x3e>
 804b784:	4b1b      	ldr	r3, [pc, #108]	; (804b7f4 <i2c_stm32_runtime_configure+0x9c>)
 804b786:	481c      	ldr	r0, [pc, #112]	; (804b7f8 <i2c_stm32_runtime_configure+0xa0>)
 804b788:	1ac9      	subs	r1, r1, r3
 804b78a:	0889      	lsrs	r1, r1, #2
 804b78c:	0189      	lsls	r1, r1, #6
 804b78e:	f041 0101 	orr.w	r1, r1, #1
 804b792:	f00a fc28 	bl	8055fe6 <log_0>
		return -EIO;
 804b796:	f06f 0404 	mvn.w	r4, #4
 804b79a:	e023      	b.n	804b7e4 <i2c_stm32_runtime_configure+0x8c>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 804b79c:	68ab      	ldr	r3, [r5, #8]
 804b79e:	68db      	ldr	r3, [r3, #12]
 804b7a0:	2b00      	cmp	r3, #0
 804b7a2:	d0eb      	beq.n	804b77c <i2c_stm32_runtime_configure+0x24>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 804b7a4:	aa03      	add	r2, sp, #12
 804b7a6:	4628      	mov	r0, r5
 804b7a8:	4798      	blx	r3
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 804b7aa:	2800      	cmp	r0, #0
 804b7ac:	dbe6      	blt.n	804b77c <i2c_stm32_runtime_configure+0x24>
	}

#endif /* CONFIG_SOC_SERIES_STM32F3X) || CONFIG_SOC_SERIES_STM32F0X */

	data->dev_config = config;
 804b7ae:	f8c8 7030 	str.w	r7, [r8, #48]	; 0x30

	k_sem_take(&data->bus_mutex, K_FOREVER);
 804b7b2:	f108 0818 	add.w	r8, r8, #24
	return z_impl_k_sem_take(sem, timeout);
 804b7b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804b7ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804b7be:	4640      	mov	r0, r8
 804b7c0:	f006 f9b6 	bl	8051b30 <z_impl_k_sem_take>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 804b7c4:	6833      	ldr	r3, [r6, #0]
	LL_I2C_Disable(i2c);
	LL_I2C_SetMode(i2c, LL_I2C_MODE_I2C);
	ret = stm32_i2c_configure_timing(dev, clock);
 804b7c6:	9903      	ldr	r1, [sp, #12]
 804b7c8:	4620      	mov	r0, r4
 804b7ca:	f023 0301 	bic.w	r3, r3, #1
 804b7ce:	6033      	str	r3, [r6, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 804b7d0:	6833      	ldr	r3, [r6, #0]
 804b7d2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 804b7d6:	6033      	str	r3, [r6, #0]
 804b7d8:	f7ff ff00 	bl	804b5dc <stm32_i2c_configure_timing>
 804b7dc:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
 804b7de:	4640      	mov	r0, r8
 804b7e0:	f006 f980 	bl	8051ae4 <z_impl_k_sem_give>
	k_sem_give(&data->bus_mutex);

	return ret;
}
 804b7e4:	4620      	mov	r0, r4
 804b7e6:	b004      	add	sp, #16
 804b7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804b7ec:	0805b844 	.word	0x0805b844
 804b7f0:	200208f4 	.word	0x200208f4
 804b7f4:	200208c8 	.word	0x200208c8
 804b7f8:	08061e20 	.word	0x08061e20

0804b7fc <i2c_stm32_init>:
	.slave_unregister = i2c_stm32_slave_unregister,
#endif
};

static int i2c_stm32_init(const struct device *dev)
{
 804b7fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 804b7fe:	4605      	mov	r5, r0
	const struct device *clock = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 804b800:	6846      	ldr	r6, [r0, #4]
	uint32_t bitrate_cfg;
	int ret;
	struct i2c_stm32_data *data = DEV_DATA(dev);
 804b802:	6907      	ldr	r7, [r0, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
 804b804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804b808:	2100      	movs	r1, #0
 804b80a:	4638      	mov	r0, r7
 804b80c:	f00e fdfe 	bl	805a40c <z_impl_k_sem_init>
#ifdef CONFIG_I2C_STM32_INTERRUPT
	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	cfg->irq_config_func(dev);
 804b810:	6833      	ldr	r3, [r6, #0]
 804b812:	4628      	mov	r0, r5
 804b814:	4798      	blx	r3
#endif

	/* Configure dt provided device signals when available */
	ret = stm32_dt_pinctrl_configure(cfg->pinctrl_list,
 804b816:	68f2      	ldr	r2, [r6, #12]
 804b818:	e9d6 0105 	ldrd	r0, r1, [r6, #20]
 804b81c:	f00b fec3 	bl	80575a6 <stm32_dt_pinctrl_configure>
					 cfg->pinctrl_list_size,
					 (uint32_t)cfg->i2c);
	if (ret < 0) {
 804b820:	1e04      	subs	r4, r0, #0
 804b822:	da10      	bge.n	804b846 <i2c_stm32_init+0x4a>
		LOG_ERR("I2C pinctrl setup failed (%d)", ret);
 804b824:	4a3c      	ldr	r2, [pc, #240]	; (804b918 <i2c_stm32_init+0x11c>)
 804b826:	6813      	ldr	r3, [r2, #0]
 804b828:	0759      	lsls	r1, r3, #29
 804b82a:	d009      	beq.n	804b840 <i2c_stm32_init+0x44>
 804b82c:	4b3b      	ldr	r3, [pc, #236]	; (804b91c <i2c_stm32_init+0x120>)
 804b82e:	4621      	mov	r1, r4
 804b830:	483b      	ldr	r0, [pc, #236]	; (804b920 <i2c_stm32_init+0x124>)
 804b832:	1ad2      	subs	r2, r2, r3
 804b834:	0892      	lsrs	r2, r2, #2
 804b836:	0192      	lsls	r2, r2, #6
 804b838:	f042 0201 	orr.w	r2, r2, #1
 804b83c:	f00a fbe2 	bl	8056004 <log_1>
		LOG_ERR("i2c: failure initializing");
		return ret;
	}

	return 0;
}
 804b840:	4620      	mov	r0, r4
 804b842:	b003      	add	sp, #12
 804b844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804b846:	2201      	movs	r2, #1
 804b848:	f107 0018 	add.w	r0, r7, #24
 804b84c:	4611      	mov	r1, r2
 804b84e:	f00e fddd 	bl	805a40c <z_impl_k_sem_init>
		(clock_control_subsys_t *) &cfg->pclken) != 0) {
 804b852:	1d31      	adds	r1, r6, #4
 804b854:	9101      	str	r1, [sp, #4]
 804b856:	4c33      	ldr	r4, [pc, #204]	; (804b924 <i2c_stm32_init+0x128>)
 804b858:	4620      	mov	r0, r4
 804b85a:	f00e fcfc 	bl	805a256 <z_device_ready>
 804b85e:	9901      	ldr	r1, [sp, #4]
 804b860:	b978      	cbnz	r0, 804b882 <i2c_stm32_init+0x86>
		LOG_ERR("i2c: failure enabling clock");
 804b862:	492d      	ldr	r1, [pc, #180]	; (804b918 <i2c_stm32_init+0x11c>)
 804b864:	680b      	ldr	r3, [r1, #0]
 804b866:	075a      	lsls	r2, r3, #29
 804b868:	d008      	beq.n	804b87c <i2c_stm32_init+0x80>
 804b86a:	4b2c      	ldr	r3, [pc, #176]	; (804b91c <i2c_stm32_init+0x120>)
 804b86c:	482e      	ldr	r0, [pc, #184]	; (804b928 <i2c_stm32_init+0x12c>)
 804b86e:	1ac9      	subs	r1, r1, r3
 804b870:	0889      	lsrs	r1, r1, #2
 804b872:	0189      	lsls	r1, r1, #6
 804b874:	f041 0101 	orr.w	r1, r1, #1
 804b878:	f00a fbb5 	bl	8055fe6 <log_0>
		return -EIO;
 804b87c:	f06f 0404 	mvn.w	r4, #4
 804b880:	e7de      	b.n	804b840 <i2c_stm32_init+0x44>
	return api->on(dev, sys);
 804b882:	68a3      	ldr	r3, [r4, #8]
 804b884:	4620      	mov	r0, r4
 804b886:	681b      	ldr	r3, [r3, #0]
 804b888:	4798      	blx	r3
	if (clock_control_on(clock,
 804b88a:	2800      	cmp	r0, #0
 804b88c:	d1e9      	bne.n	804b862 <i2c_stm32_init+0x66>
	bitrate_cfg = i2c_map_dt_bitrate(cfg->bitrate);
 804b88e:	6933      	ldr	r3, [r6, #16]
	switch (bitrate) {
 804b890:	4a26      	ldr	r2, [pc, #152]	; (804b92c <i2c_stm32_init+0x130>)
 804b892:	4293      	cmp	r3, r2
 804b894:	d035      	beq.n	804b902 <i2c_stm32_init+0x106>
 804b896:	d829      	bhi.n	804b8ec <i2c_stm32_init+0xf0>
 804b898:	4a25      	ldr	r2, [pc, #148]	; (804b930 <i2c_stm32_init+0x134>)
 804b89a:	4293      	cmp	r3, r2
 804b89c:	d033      	beq.n	804b906 <i2c_stm32_init+0x10a>
 804b89e:	4a25      	ldr	r2, [pc, #148]	; (804b934 <i2c_stm32_init+0x138>)
 804b8a0:	4293      	cmp	r3, r2
 804b8a2:	d032      	beq.n	804b90a <i2c_stm32_init+0x10e>
	LOG_ERR("Invalid I2C bit rate value");
 804b8a4:	4b1c      	ldr	r3, [pc, #112]	; (804b918 <i2c_stm32_init+0x11c>)
 804b8a6:	6819      	ldr	r1, [r3, #0]
 804b8a8:	f011 0107 	ands.w	r1, r1, #7
 804b8ac:	d009      	beq.n	804b8c2 <i2c_stm32_init+0xc6>
 804b8ae:	491b      	ldr	r1, [pc, #108]	; (804b91c <i2c_stm32_init+0x120>)
 804b8b0:	4821      	ldr	r0, [pc, #132]	; (804b938 <i2c_stm32_init+0x13c>)
 804b8b2:	1a59      	subs	r1, r3, r1
 804b8b4:	0889      	lsrs	r1, r1, #2
 804b8b6:	0189      	lsls	r1, r1, #6
 804b8b8:	f041 0101 	orr.w	r1, r1, #1
 804b8bc:	f00a fb93 	bl	8055fe6 <log_0>
	return 0;
 804b8c0:	2100      	movs	r1, #0
	ret = i2c_stm32_runtime_configure(dev, I2C_MODE_MASTER | bitrate_cfg);
 804b8c2:	f041 0110 	orr.w	r1, r1, #16
 804b8c6:	4628      	mov	r0, r5
 804b8c8:	f7ff ff46 	bl	804b758 <i2c_stm32_runtime_configure>
	if (ret < 0) {
 804b8cc:	1e04      	subs	r4, r0, #0
 804b8ce:	da20      	bge.n	804b912 <i2c_stm32_init+0x116>
		LOG_ERR("i2c: failure initializing");
 804b8d0:	4911      	ldr	r1, [pc, #68]	; (804b918 <i2c_stm32_init+0x11c>)
 804b8d2:	680b      	ldr	r3, [r1, #0]
 804b8d4:	075b      	lsls	r3, r3, #29
 804b8d6:	d0b3      	beq.n	804b840 <i2c_stm32_init+0x44>
 804b8d8:	4b10      	ldr	r3, [pc, #64]	; (804b91c <i2c_stm32_init+0x120>)
 804b8da:	4818      	ldr	r0, [pc, #96]	; (804b93c <i2c_stm32_init+0x140>)
 804b8dc:	1ac9      	subs	r1, r1, r3
 804b8de:	0889      	lsrs	r1, r1, #2
 804b8e0:	0189      	lsls	r1, r1, #6
 804b8e2:	f041 0101 	orr.w	r1, r1, #1
 804b8e6:	f00a fb7e 	bl	8055fe6 <log_0>
 804b8ea:	e7a9      	b.n	804b840 <i2c_stm32_init+0x44>
	switch (bitrate) {
 804b8ec:	4a14      	ldr	r2, [pc, #80]	; (804b940 <i2c_stm32_init+0x144>)
 804b8ee:	4293      	cmp	r3, r2
 804b8f0:	d00d      	beq.n	804b90e <i2c_stm32_init+0x112>
 804b8f2:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 804b8f6:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
 804b8fa:	4293      	cmp	r3, r2
 804b8fc:	d1d2      	bne.n	804b8a4 <i2c_stm32_init+0xa8>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
 804b8fe:	210a      	movs	r1, #10
 804b900:	e7df      	b.n	804b8c2 <i2c_stm32_init+0xc6>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 804b902:	2106      	movs	r1, #6
 804b904:	e7dd      	b.n	804b8c2 <i2c_stm32_init+0xc6>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 804b906:	2102      	movs	r1, #2
 804b908:	e7db      	b.n	804b8c2 <i2c_stm32_init+0xc6>
	switch (bitrate) {
 804b90a:	2104      	movs	r1, #4
 804b90c:	e7d9      	b.n	804b8c2 <i2c_stm32_init+0xc6>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 804b90e:	2108      	movs	r1, #8
 804b910:	e7d7      	b.n	804b8c2 <i2c_stm32_init+0xc6>
	return 0;
 804b912:	2400      	movs	r4, #0
 804b914:	e794      	b.n	804b840 <i2c_stm32_init+0x44>
 804b916:	bf00      	nop
 804b918:	200208f4 	.word	0x200208f4
 804b91c:	200208c8 	.word	0x200208c8
 804b920:	08061e43 	.word	0x08061e43
 804b924:	0805b844 	.word	0x0805b844
 804b928:	08061e61 	.word	0x08061e61
 804b92c:	000f4240 	.word	0x000f4240
 804b930:	000186a0 	.word	0x000186a0
 804b934:	00061a80 	.word	0x00061a80
 804b938:	08061df5 	.word	0x08061df5
 804b93c:	08061e7d 	.word	0x08061e7d
 804b940:	0033e140 	.word	0x0033e140

0804b944 <ws2812_strip_update_channels>:

static int ws2812_strip_update_channels(const struct device *dev,
					uint8_t *channels,
					size_t num_channels)
{
	LOG_ERR("update_channels not implemented");
 804b944:	4908      	ldr	r1, [pc, #32]	; (804b968 <ws2812_strip_update_channels+0x24>)
{
 804b946:	b508      	push	{r3, lr}
	LOG_ERR("update_channels not implemented");
 804b948:	680b      	ldr	r3, [r1, #0]
 804b94a:	075b      	lsls	r3, r3, #29
 804b94c:	d008      	beq.n	804b960 <ws2812_strip_update_channels+0x1c>
 804b94e:	4b07      	ldr	r3, [pc, #28]	; (804b96c <ws2812_strip_update_channels+0x28>)
 804b950:	4807      	ldr	r0, [pc, #28]	; (804b970 <ws2812_strip_update_channels+0x2c>)
 804b952:	1ac9      	subs	r1, r1, r3
 804b954:	0889      	lsrs	r1, r1, #2
 804b956:	0189      	lsls	r1, r1, #6
 804b958:	f041 0101 	orr.w	r1, r1, #1
 804b95c:	f00a fb43 	bl	8055fe6 <log_0>
	return -ENOTSUP;
}
 804b960:	f06f 0085 	mvn.w	r0, #133	; 0x85
 804b964:	bd08      	pop	{r3, pc}
 804b966:	bf00      	nop
 804b968:	2002094c 	.word	0x2002094c
 804b96c:	200208c8 	.word	0x200208c8
 804b970:	08061eb0 	.word	0x08061eb0

0804b974 <ws2812_spi_init>:

static int ws2812_spi_init(const struct device *dev)
{
 804b974:	b538      	push	{r3, r4, r5, lr}
	return dev->config;
 804b976:	6844      	ldr	r4, [r0, #4]
{
 804b978:	4605      	mov	r5, r0
 * @retval false if the SPI bus is not ready for use.
 */
static inline bool spi_is_ready(const struct spi_dt_spec *spec)
{
	/* Validate bus is ready */
	if (!device_is_ready(spec->bus)) {
 804b97a:	6820      	ldr	r0, [r4, #0]
 804b97c:	f00e fc6b 	bl	805a256 <z_device_ready>
 804b980:	b168      	cbz	r0, 804b99e <ws2812_spi_init+0x2a>
		return false;
	}
	/* Validate CS gpio port is ready, if it is used */
	if (spec->config.cs &&
 804b982:	68e3      	ldr	r3, [r4, #12]
 804b984:	b933      	cbnz	r3, 804b994 <ws2812_spi_init+0x20>
	if (!spi_is_ready(&cfg->bus)) {
		LOG_ERR("SPI device %s not ready", cfg->bus.bus->name);
		return -ENODEV;
	}

	for (i = 0; i < cfg->num_colors; i++) {
 804b986:	7ea1      	ldrb	r1, [r4, #26]
 804b988:	2300      	movs	r3, #0
 804b98a:	b2da      	uxtb	r2, r3
 804b98c:	4291      	cmp	r1, r2
 804b98e:	d818      	bhi.n	804b9c2 <ws2812_spi_init+0x4e>
				dev->name);
			return -EINVAL;
		}
	}

	return 0;
 804b990:	2000      	movs	r0, #0
}
 804b992:	bd38      	pop	{r3, r4, r5, pc}
	    !device_is_ready(spec->config.cs->gpio_dev)) {
 804b994:	6818      	ldr	r0, [r3, #0]
 804b996:	f00e fc5e 	bl	805a256 <z_device_ready>
 804b99a:	2800      	cmp	r0, #0
 804b99c:	d1f3      	bne.n	804b986 <ws2812_spi_init+0x12>
		LOG_ERR("SPI device %s not ready", cfg->bus.bus->name);
 804b99e:	4a14      	ldr	r2, [pc, #80]	; (804b9f0 <ws2812_spi_init+0x7c>)
 804b9a0:	6813      	ldr	r3, [r2, #0]
 804b9a2:	0759      	lsls	r1, r3, #29
 804b9a4:	d00a      	beq.n	804b9bc <ws2812_spi_init+0x48>
 804b9a6:	4b13      	ldr	r3, [pc, #76]	; (804b9f4 <ws2812_spi_init+0x80>)
 804b9a8:	4813      	ldr	r0, [pc, #76]	; (804b9f8 <ws2812_spi_init+0x84>)
 804b9aa:	1ad2      	subs	r2, r2, r3
 804b9ac:	6823      	ldr	r3, [r4, #0]
 804b9ae:	0892      	lsrs	r2, r2, #2
 804b9b0:	6819      	ldr	r1, [r3, #0]
 804b9b2:	0192      	lsls	r2, r2, #6
 804b9b4:	f042 0201 	orr.w	r2, r2, #1
 804b9b8:	f00a fb24 	bl	8056004 <log_1>
		return -ENODEV;
 804b9bc:	f06f 0012 	mvn.w	r0, #18
 804b9c0:	e7e7      	b.n	804b992 <ws2812_spi_init+0x1e>
		switch (cfg->color_mapping[i]) {
 804b9c2:	69e2      	ldr	r2, [r4, #28]
 804b9c4:	5cd2      	ldrb	r2, [r2, r3]
 804b9c6:	3301      	adds	r3, #1
 804b9c8:	2a03      	cmp	r2, #3
 804b9ca:	d9de      	bls.n	804b98a <ws2812_spi_init+0x16>
			LOG_ERR("%s: invalid channel to color mapping."
 804b9cc:	4a08      	ldr	r2, [pc, #32]	; (804b9f0 <ws2812_spi_init+0x7c>)
 804b9ce:	6813      	ldr	r3, [r2, #0]
 804b9d0:	075b      	lsls	r3, r3, #29
 804b9d2:	d009      	beq.n	804b9e8 <ws2812_spi_init+0x74>
 804b9d4:	4b07      	ldr	r3, [pc, #28]	; (804b9f4 <ws2812_spi_init+0x80>)
 804b9d6:	6829      	ldr	r1, [r5, #0]
 804b9d8:	1ad2      	subs	r2, r2, r3
 804b9da:	4808      	ldr	r0, [pc, #32]	; (804b9fc <ws2812_spi_init+0x88>)
 804b9dc:	0892      	lsrs	r2, r2, #2
 804b9de:	0192      	lsls	r2, r2, #6
 804b9e0:	f042 0201 	orr.w	r2, r2, #1
 804b9e4:	f00a fb0e 	bl	8056004 <log_1>
			return -EINVAL;
 804b9e8:	f06f 0015 	mvn.w	r0, #21
 804b9ec:	e7d1      	b.n	804b992 <ws2812_spi_init+0x1e>
 804b9ee:	bf00      	nop
 804b9f0:	2002094c 	.word	0x2002094c
 804b9f4:	200208c8 	.word	0x200208c8
 804b9f8:	08061ed0 	.word	0x08061ed0
 804b9fc:	08061ee8 	.word	0x08061ee8

0804ba00 <pwm_stm32_pin_set>:
{
	const struct pwm_stm32_config *cfg = dev->config;

	uint32_t channel;

	if (pwm < 1u || pwm > TIMER_MAX_CH) {
 804ba00:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 804ba04:	f1bc 0f05 	cmp.w	ip, #5
{
 804ba08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804ba0c:	4614      	mov	r4, r2
 804ba0e:	b089      	sub	sp, #36	; 0x24
 804ba10:	4698      	mov	r8, r3
	const struct pwm_stm32_config *cfg = dev->config;
 804ba12:	6847      	ldr	r7, [r0, #4]
	if (pwm < 1u || pwm > TIMER_MAX_CH) {
 804ba14:	d90f      	bls.n	804ba36 <pwm_stm32_pin_set+0x36>
		LOG_ERR("Invalid channel (%d)", pwm);
 804ba16:	4a6c      	ldr	r2, [pc, #432]	; (804bbc8 <pwm_stm32_pin_set+0x1c8>)
 804ba18:	6813      	ldr	r3, [r2, #0]
 804ba1a:	0758      	lsls	r0, r3, #29
 804ba1c:	d008      	beq.n	804ba30 <pwm_stm32_pin_set+0x30>
 804ba1e:	4b6b      	ldr	r3, [pc, #428]	; (804bbcc <pwm_stm32_pin_set+0x1cc>)
 804ba20:	486b      	ldr	r0, [pc, #428]	; (804bbd0 <pwm_stm32_pin_set+0x1d0>)
 804ba22:	1ad2      	subs	r2, r2, r3
 804ba24:	0892      	lsrs	r2, r2, #2
 804ba26:	0192      	lsls	r2, r2, #6
 804ba28:	f042 0201 	orr.w	r2, r2, #1
 804ba2c:	f00a faea 	bl	8056004 <log_1>
		return -EINVAL;
 804ba30:	f06f 0015 	mvn.w	r0, #21
 804ba34:	e056      	b.n	804bae4 <pwm_stm32_pin_set+0xe4>
	}

	if (pulse_cycles > period_cycles) {
 804ba36:	4293      	cmp	r3, r2
 804ba38:	d90d      	bls.n	804ba56 <pwm_stm32_pin_set+0x56>
		LOG_ERR("Invalid combination of pulse and period cycles");
 804ba3a:	4963      	ldr	r1, [pc, #396]	; (804bbc8 <pwm_stm32_pin_set+0x1c8>)
 804ba3c:	680b      	ldr	r3, [r1, #0]
 804ba3e:	075a      	lsls	r2, r3, #29
 804ba40:	d0f6      	beq.n	804ba30 <pwm_stm32_pin_set+0x30>
 804ba42:	4b62      	ldr	r3, [pc, #392]	; (804bbcc <pwm_stm32_pin_set+0x1cc>)
 804ba44:	4863      	ldr	r0, [pc, #396]	; (804bbd4 <pwm_stm32_pin_set+0x1d4>)
 804ba46:	1ac9      	subs	r1, r1, r3
 804ba48:	0889      	lsrs	r1, r1, #2
 804ba4a:	0189      	lsls	r1, r1, #6
 804ba4c:	f041 0101 	orr.w	r1, r1, #1
 804ba50:	f00a fac9 	bl	8055fe6 <log_0>
 804ba54:	e7ec      	b.n	804ba30 <pwm_stm32_pin_set+0x30>

	/*
	 * Non 32-bit timers count from 0 up to the value in the ARR register
	 * (16-bit). Thus period_cycles cannot be greater than UINT16_MAX + 1.
	 */
	if (!IS_TIM_32B_COUNTER_INSTANCE(cfg->timer) &&
 804ba56:	6838      	ldr	r0, [r7, #0]
 804ba58:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 804ba5c:	d006      	beq.n	804ba6c <pwm_stm32_pin_set+0x6c>
 804ba5e:	4b5e      	ldr	r3, [pc, #376]	; (804bbd8 <pwm_stm32_pin_set+0x1d8>)
 804ba60:	4298      	cmp	r0, r3
 804ba62:	d003      	beq.n	804ba6c <pwm_stm32_pin_set+0x6c>
 804ba64:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 804ba68:	f200 80ab 	bhi.w	804bbc2 <pwm_stm32_pin_set+0x1c2>
	    (period_cycles > UINT16_MAX + 1)) {
		return -ENOTSUP;
	}

	channel = ch2ll[pwm - 1u];
 804ba6c:	4b5b      	ldr	r3, [pc, #364]	; (804bbdc <pwm_stm32_pin_set+0x1dc>)
 804ba6e:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]

	if (period_cycles == 0u) {
 804ba72:	b92c      	cbnz	r4, 804ba80 <pwm_stm32_pin_set+0x80>
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  CLEAR_BIT(TIMx->CCER, Channels);
 804ba74:	6a03      	ldr	r3, [r0, #32]
 804ba76:	ea23 0305 	bic.w	r3, r3, r5
 804ba7a:	6203      	str	r3, [r0, #32]
		LL_TIM_OC_SetPolarity(cfg->timer, channel, get_polarity(flags));
		set_timer_compare[pwm - 1u](cfg->timer, pulse_cycles);
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
	}

	return 0;
 804ba7c:	2000      	movs	r0, #0
}
 804ba7e:	e031      	b.n	804bae4 <pwm_stm32_pin_set+0xe4>
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 804ba80:	6a02      	ldr	r2, [r0, #32]
 804ba82:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 804ba86:	ea02 0305 	and.w	r3, r2, r5
 804ba8a:	ea35 0202 	bics.w	r2, r5, r2
 804ba8e:	f006 0601 	and.w	r6, r6, #1
 804ba92:	d105      	bne.n	804baa0 <pwm_stm32_pin_set+0xa0>
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 804ba94:	2b01      	cmp	r3, #1
	return LL_TIM_OCPOLARITY_LOW;
 804ba96:	ea4f 0646 	mov.w	r6, r6, lsl #1
 804ba9a:	d15f      	bne.n	804bb5c <pwm_stm32_pin_set+0x15c>
 804ba9c:	2200      	movs	r2, #0
 804ba9e:	e071      	b.n	804bb84 <pwm_stm32_pin_set+0x184>
		oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 804baa0:	f04f 0901 	mov.w	r9, #1
		LL_TIM_OC_StructInit(&oc_init);
 804baa4:	4668      	mov	r0, sp
 804baa6:	f00e fb40 	bl	805a12a <LL_TIM_OC_StructInit>
		oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 804baaa:	2360      	movs	r3, #96	; 0x60
		return LL_TIM_OCPOLARITY_HIGH;
 804baac:	fa06 f609 	lsl.w	r6, r6, r9
		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 804bab0:	466a      	mov	r2, sp
 804bab2:	4629      	mov	r1, r5
 804bab4:	6838      	ldr	r0, [r7, #0]
		oc_init.CompareValue = pulse_cycles;
 804bab6:	f8cd 800c 	str.w	r8, [sp, #12]
		oc_init.OCPolarity = get_polarity(flags);
 804baba:	9604      	str	r6, [sp, #16]
		oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 804babc:	e9cd 3900 	strd	r3, r9, [sp]
		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 804bac0:	f004 fd46 	bl	8050550 <LL_TIM_OC_Init>
 804bac4:	b188      	cbz	r0, 804baea <pwm_stm32_pin_set+0xea>
			LOG_ERR("Could not initialize timer channel output");
 804bac6:	4940      	ldr	r1, [pc, #256]	; (804bbc8 <pwm_stm32_pin_set+0x1c8>)
 804bac8:	680b      	ldr	r3, [r1, #0]
 804baca:	075b      	lsls	r3, r3, #29
 804bacc:	d008      	beq.n	804bae0 <pwm_stm32_pin_set+0xe0>
 804bace:	4b3f      	ldr	r3, [pc, #252]	; (804bbcc <pwm_stm32_pin_set+0x1cc>)
 804bad0:	4843      	ldr	r0, [pc, #268]	; (804bbe0 <pwm_stm32_pin_set+0x1e0>)
 804bad2:	1ac9      	subs	r1, r1, r3
 804bad4:	0889      	lsrs	r1, r1, #2
 804bad6:	0189      	lsls	r1, r1, #6
 804bad8:	ea41 0109 	orr.w	r1, r1, r9
 804badc:	f00a fa83 	bl	8055fe6 <log_0>
			return -EIO;
 804bae0:	f06f 0004 	mvn.w	r0, #4
}
 804bae4:	b009      	add	sp, #36	; 0x24
 804bae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LL_TIM_EnableARRPreload(cfg->timer);
 804baea:	683b      	ldr	r3, [r7, #0]
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 804baec:	2d01      	cmp	r5, #1
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 804baee:	681a      	ldr	r2, [r3, #0]
 804baf0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 804baf4:	601a      	str	r2, [r3, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 804baf6:	d013      	beq.n	804bb20 <pwm_stm32_pin_set+0x120>
 804baf8:	2d04      	cmp	r5, #4
 804bafa:	d023      	beq.n	804bb44 <pwm_stm32_pin_set+0x144>
 804bafc:	2d10      	cmp	r5, #16
 804bafe:	d023      	beq.n	804bb48 <pwm_stm32_pin_set+0x148>
 804bb00:	2d40      	cmp	r5, #64	; 0x40
 804bb02:	d023      	beq.n	804bb4c <pwm_stm32_pin_set+0x14c>
 804bb04:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 804bb08:	d022      	beq.n	804bb50 <pwm_stm32_pin_set+0x150>
 804bb0a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 804bb0e:	d021      	beq.n	804bb54 <pwm_stm32_pin_set+0x154>
 804bb10:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 804bb14:	d020      	beq.n	804bb58 <pwm_stm32_pin_set+0x158>
 804bb16:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 804bb1a:	bf0c      	ite	eq
 804bb1c:	2007      	moveq	r0, #7
 804bb1e:	2008      	movne	r0, #8
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 804bb20:	4a30      	ldr	r2, [pc, #192]	; (804bbe4 <pwm_stm32_pin_set+0x1e4>)
 804bb22:	f103 0118 	add.w	r1, r3, #24
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 804bb26:	3c01      	subs	r4, #1
 804bb28:	5c15      	ldrb	r5, [r2, r0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 804bb2a:	4a2f      	ldr	r2, [pc, #188]	; (804bbe8 <pwm_stm32_pin_set+0x1e8>)
 804bb2c:	586e      	ldr	r6, [r5, r1]
 804bb2e:	5c10      	ldrb	r0, [r2, r0]
 804bb30:	2208      	movs	r2, #8
 804bb32:	4082      	lsls	r2, r0
 804bb34:	4332      	orrs	r2, r6
 804bb36:	506a      	str	r2, [r5, r1]
  WRITE_REG(TIMx->ARR, AutoReload);
 804bb38:	62dc      	str	r4, [r3, #44]	; 0x2c
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 804bb3a:	695a      	ldr	r2, [r3, #20]
 804bb3c:	f042 0201 	orr.w	r2, r2, #1
 804bb40:	615a      	str	r2, [r3, #20]
 804bb42:	e79b      	b.n	804ba7c <pwm_stm32_pin_set+0x7c>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 804bb44:	4648      	mov	r0, r9
 804bb46:	e7eb      	b.n	804bb20 <pwm_stm32_pin_set+0x120>
 804bb48:	2002      	movs	r0, #2
 804bb4a:	e7e9      	b.n	804bb20 <pwm_stm32_pin_set+0x120>
 804bb4c:	2003      	movs	r0, #3
 804bb4e:	e7e7      	b.n	804bb20 <pwm_stm32_pin_set+0x120>
 804bb50:	2004      	movs	r0, #4
 804bb52:	e7e5      	b.n	804bb20 <pwm_stm32_pin_set+0x120>
 804bb54:	2005      	movs	r0, #5
 804bb56:	e7e3      	b.n	804bb20 <pwm_stm32_pin_set+0x120>
 804bb58:	2006      	movs	r0, #6
 804bb5a:	e7e1      	b.n	804bb20 <pwm_stm32_pin_set+0x120>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 804bb5c:	2b04      	cmp	r3, #4
 804bb5e:	d024      	beq.n	804bbaa <pwm_stm32_pin_set+0x1aa>
 804bb60:	2b10      	cmp	r3, #16
 804bb62:	d024      	beq.n	804bbae <pwm_stm32_pin_set+0x1ae>
 804bb64:	2b40      	cmp	r3, #64	; 0x40
 804bb66:	d024      	beq.n	804bbb2 <pwm_stm32_pin_set+0x1b2>
 804bb68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804bb6c:	d023      	beq.n	804bbb6 <pwm_stm32_pin_set+0x1b6>
 804bb6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804bb72:	d022      	beq.n	804bbba <pwm_stm32_pin_set+0x1ba>
 804bb74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804bb78:	d021      	beq.n	804bbbe <pwm_stm32_pin_set+0x1be>
 804bb7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804bb7e:	bf0c      	ite	eq
 804bb80:	2207      	moveq	r2, #7
 804bb82:	2208      	movne	r2, #8
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 804bb84:	4919      	ldr	r1, [pc, #100]	; (804bbec <pwm_stm32_pin_set+0x1ec>)
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 804bb86:	3c01      	subs	r4, #1
 804bb88:	6a03      	ldr	r3, [r0, #32]
 804bb8a:	5c89      	ldrb	r1, [r1, r2]
 804bb8c:	2202      	movs	r2, #2
 804bb8e:	408a      	lsls	r2, r1
 804bb90:	408e      	lsls	r6, r1
		set_timer_compare[pwm - 1u](cfg->timer, pulse_cycles);
 804bb92:	4641      	mov	r1, r8
 804bb94:	ea23 0302 	bic.w	r3, r3, r2
 804bb98:	431e      	orrs	r6, r3
 804bb9a:	4b15      	ldr	r3, [pc, #84]	; (804bbf0 <pwm_stm32_pin_set+0x1f0>)
 804bb9c:	6206      	str	r6, [r0, #32]
 804bb9e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 804bba2:	4798      	blx	r3
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 804bba4:	683b      	ldr	r3, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 804bba6:	62dc      	str	r4, [r3, #44]	; 0x2c
 804bba8:	e768      	b.n	804ba7c <pwm_stm32_pin_set+0x7c>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 804bbaa:	2201      	movs	r2, #1
 804bbac:	e7ea      	b.n	804bb84 <pwm_stm32_pin_set+0x184>
 804bbae:	2202      	movs	r2, #2
 804bbb0:	e7e8      	b.n	804bb84 <pwm_stm32_pin_set+0x184>
 804bbb2:	2203      	movs	r2, #3
 804bbb4:	e7e6      	b.n	804bb84 <pwm_stm32_pin_set+0x184>
 804bbb6:	2204      	movs	r2, #4
 804bbb8:	e7e4      	b.n	804bb84 <pwm_stm32_pin_set+0x184>
 804bbba:	2205      	movs	r2, #5
 804bbbc:	e7e2      	b.n	804bb84 <pwm_stm32_pin_set+0x184>
 804bbbe:	2206      	movs	r2, #6
 804bbc0:	e7e0      	b.n	804bb84 <pwm_stm32_pin_set+0x184>
		return -ENOTSUP;
 804bbc2:	f06f 0085 	mvn.w	r0, #133	; 0x85
 804bbc6:	e78d      	b.n	804bae4 <pwm_stm32_pin_set+0xe4>
 804bbc8:	20020928 	.word	0x20020928
 804bbcc:	200208c8 	.word	0x200208c8
 804bbd0:	08061f48 	.word	0x08061f48
 804bbd4:	08061f5d 	.word	0x08061f5d
 804bbd8:	40000c00 	.word	0x40000c00
 804bbdc:	0805dad4 	.word	0x0805dad4
 804bbe0:	08061f8c 	.word	0x08061f8c
 804bbe4:	0806205f 	.word	0x0806205f
 804bbe8:	08062071 	.word	0x08062071
 804bbec:	08062068 	.word	0x08062068
 804bbf0:	0805dbe4 	.word	0x0805dbe4

0804bbf4 <pwm_stm32_init>:
	.pin_set = pwm_stm32_pin_set,
	.get_cycles_per_sec = pwm_stm32_get_cycles_per_sec,
};

static int pwm_stm32_init(const struct device *dev)
{
 804bbf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct pwm_stm32_data *data = dev->data;
	const struct pwm_stm32_config *cfg = dev->config;
 804bbf8:	6845      	ldr	r5, [r0, #4]
{
 804bbfa:	b087      	sub	sp, #28
	struct pwm_stm32_data *data = dev->data;
 804bbfc:	6907      	ldr	r7, [r0, #16]
	LL_TIM_InitTypeDef init;

	/* enable clock and store its speed */
	clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);

	r = clock_control_on(clk, (clock_control_subsys_t *)&cfg->pclken);
 804bbfe:	f105 0808 	add.w	r8, r5, #8
 804bc02:	4e4e      	ldr	r6, [pc, #312]	; (804bd3c <pwm_stm32_init+0x148>)
 804bc04:	4630      	mov	r0, r6
 804bc06:	f00e fb26 	bl	805a256 <z_device_ready>
 804bc0a:	b1d0      	cbz	r0, 804bc42 <pwm_stm32_init+0x4e>
 804bc0c:	f8d6 9008 	ldr.w	r9, [r6, #8]
 804bc10:	4641      	mov	r1, r8
 804bc12:	4630      	mov	r0, r6
 804bc14:	f8d9 3000 	ldr.w	r3, [r9]
 804bc18:	4798      	blx	r3
	if (r < 0) {
 804bc1a:	1e04      	subs	r4, r0, #0
 804bc1c:	da14      	bge.n	804bc48 <pwm_stm32_init+0x54>
		LOG_ERR("Could not initialize clock (%d)", r);
 804bc1e:	4a48      	ldr	r2, [pc, #288]	; (804bd40 <pwm_stm32_init+0x14c>)
 804bc20:	6813      	ldr	r3, [r2, #0]
 804bc22:	075d      	lsls	r5, r3, #29
 804bc24:	d009      	beq.n	804bc3a <pwm_stm32_init+0x46>
 804bc26:	4b47      	ldr	r3, [pc, #284]	; (804bd44 <pwm_stm32_init+0x150>)
 804bc28:	4621      	mov	r1, r4
 804bc2a:	4847      	ldr	r0, [pc, #284]	; (804bd48 <pwm_stm32_init+0x154>)
 804bc2c:	1ad2      	subs	r2, r2, r3
 804bc2e:	0892      	lsrs	r2, r2, #2
 804bc30:	0192      	lsls	r2, r2, #6
 804bc32:	f042 0201 	orr.w	r2, r2, #1
		return r;
	}

	r = get_tim_clk(&cfg->pclken, &data->tim_clk);
	if (r < 0) {
		LOG_ERR("Could not obtain timer clock (%d)", r);
 804bc36:	f00a f9e5 	bl	8056004 <log_1>
#endif

	LL_TIM_EnableCounter(cfg->timer);

	return 0;
}
 804bc3a:	4620      	mov	r0, r4
 804bc3c:	b007      	add	sp, #28
 804bc3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 804bc42:	f06f 0412 	mvn.w	r4, #18
 804bc46:	e7ea      	b.n	804bc1e <pwm_stm32_init+0x2a>
 804bc48:	4630      	mov	r0, r6
 804bc4a:	f00e fb04 	bl	805a256 <z_device_ready>
 804bc4e:	2800      	cmp	r0, #0
 804bc50:	d062      	beq.n	804bd18 <pwm_stm32_init+0x124>
	if (api->get_rate == NULL) {
 804bc52:	f8d9 300c 	ldr.w	r3, [r9, #12]
 804bc56:	2b00      	cmp	r3, #0
 804bc58:	d06d      	beq.n	804bd36 <pwm_stm32_init+0x142>
	return api->get_rate(dev, sys, rate);
 804bc5a:	466a      	mov	r2, sp
 804bc5c:	4641      	mov	r1, r8
 804bc5e:	4630      	mov	r0, r6
 804bc60:	4798      	blx	r3
	if (r < 0) {
 804bc62:	1e04      	subs	r4, r0, #0
 804bc64:	db5a      	blt.n	804bd1c <pwm_stm32_init+0x128>
	if (pclken->bus == STM32_CLOCK_BUS_APB1) {
 804bc66:	68ab      	ldr	r3, [r5, #8]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR1, RCC_DCKCFGR1_TIMPRE));
 804bc68:	4a38      	ldr	r2, [pc, #224]	; (804bd4c <pwm_stm32_init+0x158>)
		apb_psc = STM32_APB2_PRESCALER;
 804bc6a:	2b02      	cmp	r3, #2
 804bc6c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 804bc70:	bf0c      	ite	eq
 804bc72:	2304      	moveq	r3, #4
 804bc74:	2302      	movne	r3, #2
	if (LL_RCC_GetTIMPrescaler() == LL_RCC_TIM_PRESCALER_TWICE) {
 804bc76:	01d0      	lsls	r0, r2, #7
 804bc78:	d401      	bmi.n	804bc7e <pwm_stm32_init+0x8a>
		if (apb_psc <= 2u) {
 804bc7a:	2b02      	cmp	r3, #2
 804bc7c:	d104      	bne.n	804bc88 <pwm_stm32_init+0x94>
			LL_RCC_GetSystemClocksFreq(&clocks);
 804bc7e:	a801      	add	r0, sp, #4
 804bc80:	f00e f8da 	bl	8059e38 <LL_RCC_GetSystemClocksFreq>
			*tim_clk = clocks.HCLK_Frequency;
 804bc84:	9b02      	ldr	r3, [sp, #8]
 804bc86:	e001      	b.n	804bc8c <pwm_stm32_init+0x98>
			*tim_clk = bus_clk * 2u;
 804bc88:	9b00      	ldr	r3, [sp, #0]
 804bc8a:	005b      	lsls	r3, r3, #1
 804bc8c:	603b      	str	r3, [r7, #0]
	r = stm32_dt_pinctrl_configure(cfg->pinctrl,
 804bc8e:	682a      	ldr	r2, [r5, #0]
 804bc90:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 804bc94:	f00b fc87 	bl	80575a6 <stm32_dt_pinctrl_configure>
	if (r < 0) {
 804bc98:	1e04      	subs	r4, r0, #0
 804bc9a:	da0c      	bge.n	804bcb6 <pwm_stm32_init+0xc2>
		LOG_ERR("PWM pinctrl setup failed (%d)", r);
 804bc9c:	4a28      	ldr	r2, [pc, #160]	; (804bd40 <pwm_stm32_init+0x14c>)
 804bc9e:	6813      	ldr	r3, [r2, #0]
 804bca0:	0759      	lsls	r1, r3, #29
 804bca2:	d0ca      	beq.n	804bc3a <pwm_stm32_init+0x46>
 804bca4:	4b27      	ldr	r3, [pc, #156]	; (804bd44 <pwm_stm32_init+0x150>)
 804bca6:	4621      	mov	r1, r4
 804bca8:	4829      	ldr	r0, [pc, #164]	; (804bd50 <pwm_stm32_init+0x15c>)
 804bcaa:	1ad2      	subs	r2, r2, r3
 804bcac:	0892      	lsrs	r2, r2, #2
 804bcae:	0192      	lsls	r2, r2, #6
 804bcb0:	f042 0201 	orr.w	r2, r2, #1
 804bcb4:	e7bf      	b.n	804bc36 <pwm_stm32_init+0x42>
	LL_TIM_StructInit(&init);
 804bcb6:	a801      	add	r0, sp, #4
 804bcb8:	f00e fa2e 	bl	805a118 <LL_TIM_StructInit>
	init.Prescaler = cfg->prescaler;
 804bcbc:	686b      	ldr	r3, [r5, #4]
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 804bcbe:	a901      	add	r1, sp, #4
 804bcc0:	6828      	ldr	r0, [r5, #0]
	init.Prescaler = cfg->prescaler;
 804bcc2:	f8ad 3004 	strh.w	r3, [sp, #4]
	init.CounterMode = LL_TIM_COUNTERMODE_UP;
 804bcc6:	2300      	movs	r3, #0
	init.Autoreload = 0u;
 804bcc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
	init.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 804bccc:	9304      	str	r3, [sp, #16]
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 804bcce:	f004 fbdb 	bl	8050488 <LL_TIM_Init>
 804bcd2:	b178      	cbz	r0, 804bcf4 <pwm_stm32_init+0x100>
		LOG_ERR("Could not initialize timer");
 804bcd4:	491a      	ldr	r1, [pc, #104]	; (804bd40 <pwm_stm32_init+0x14c>)
 804bcd6:	680b      	ldr	r3, [r1, #0]
 804bcd8:	075a      	lsls	r2, r3, #29
 804bcda:	d008      	beq.n	804bcee <pwm_stm32_init+0xfa>
 804bcdc:	4b19      	ldr	r3, [pc, #100]	; (804bd44 <pwm_stm32_init+0x150>)
 804bcde:	481d      	ldr	r0, [pc, #116]	; (804bd54 <pwm_stm32_init+0x160>)
 804bce0:	1ac9      	subs	r1, r1, r3
 804bce2:	0889      	lsrs	r1, r1, #2
 804bce4:	0189      	lsls	r1, r1, #6
 804bce6:	f041 0101 	orr.w	r1, r1, #1
 804bcea:	f00a f97c 	bl	8055fe6 <log_0>
		return -EIO;
 804bcee:	f06f 0404 	mvn.w	r4, #4
 804bcf2:	e7a2      	b.n	804bc3a <pwm_stm32_init+0x46>
	if (IS_TIM_BREAK_INSTANCE(cfg->timer)) {
 804bcf4:	682b      	ldr	r3, [r5, #0]
 804bcf6:	4a18      	ldr	r2, [pc, #96]	; (804bd58 <pwm_stm32_init+0x164>)
 804bcf8:	4293      	cmp	r3, r2
 804bcfa:	d003      	beq.n	804bd04 <pwm_stm32_init+0x110>
 804bcfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804bd00:	4293      	cmp	r3, r2
 804bd02:	d103      	bne.n	804bd0c <pwm_stm32_init+0x118>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 804bd04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804bd06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 804bd0a:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 804bd0c:	681a      	ldr	r2, [r3, #0]
	return 0;
 804bd0e:	2400      	movs	r4, #0
 804bd10:	f042 0201 	orr.w	r2, r2, #1
 804bd14:	601a      	str	r2, [r3, #0]
 804bd16:	e790      	b.n	804bc3a <pwm_stm32_init+0x46>
 804bd18:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Could not obtain timer clock (%d)", r);
 804bd1c:	4a08      	ldr	r2, [pc, #32]	; (804bd40 <pwm_stm32_init+0x14c>)
 804bd1e:	6813      	ldr	r3, [r2, #0]
 804bd20:	075b      	lsls	r3, r3, #29
 804bd22:	d08a      	beq.n	804bc3a <pwm_stm32_init+0x46>
 804bd24:	4b07      	ldr	r3, [pc, #28]	; (804bd44 <pwm_stm32_init+0x150>)
 804bd26:	4621      	mov	r1, r4
 804bd28:	480c      	ldr	r0, [pc, #48]	; (804bd5c <pwm_stm32_init+0x168>)
 804bd2a:	1ad2      	subs	r2, r2, r3
 804bd2c:	0892      	lsrs	r2, r2, #2
 804bd2e:	0192      	lsls	r2, r2, #6
 804bd30:	f042 0201 	orr.w	r2, r2, #1
 804bd34:	e77f      	b.n	804bc36 <pwm_stm32_init+0x42>
		return -ENOSYS;
 804bd36:	f06f 0457 	mvn.w	r4, #87	; 0x57
 804bd3a:	e7ef      	b.n	804bd1c <pwm_stm32_init+0x128>
 804bd3c:	0805b844 	.word	0x0805b844
 804bd40:	20020928 	.word	0x20020928
 804bd44:	200208c8 	.word	0x200208c8
 804bd48:	08061fb6 	.word	0x08061fb6
 804bd4c:	40023800 	.word	0x40023800
 804bd50:	08061ff8 	.word	0x08061ff8
 804bd54:	08062016 	.word	0x08062016
 804bd58:	40010000 	.word	0x40010000
 804bd5c:	08061fd6 	.word	0x08061fd6

0804bd60 <cmd_cycles>:
{
 804bd60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804bd64:	4606      	mov	r6, r0
 804bd66:	b085      	sub	sp, #20
 804bd68:	4689      	mov	r9, r1
 804bd6a:	4614      	mov	r4, r2
	dev = device_get_binding(argv[args_indx.device]);
 804bd6c:	6850      	ldr	r0, [r2, #4]
 804bd6e:	f005 f9c5 	bl	80510fc <z_impl_device_get_binding>
	if (!dev) {
 804bd72:	4605      	mov	r5, r0
 804bd74:	b950      	cbnz	r0, 804bd8c <cmd_cycles+0x2c>
		return -EINVAL;
 804bd76:	f06f 0415 	mvn.w	r4, #21
		shell_error(shell, "PWM device not found");
 804bd7a:	4a1c      	ldr	r2, [pc, #112]	; (804bdec <cmd_cycles+0x8c>)
 804bd7c:	2102      	movs	r1, #2
 804bd7e:	4630      	mov	r0, r6
 804bd80:	f00a fd9d 	bl	80568be <shell_fprintf>
}
 804bd84:	4620      	mov	r0, r4
 804bd86:	b005      	add	sp, #20
 804bd88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	pwm = strtoul(argv[args_indx.pwm], NULL, 0);
 804bd8c:	2200      	movs	r2, #0
 804bd8e:	68a0      	ldr	r0, [r4, #8]
 804bd90:	4611      	mov	r1, r2
 804bd92:	f007 f923 	bl	8052fdc <strtoul>
	period = strtoul(argv[args_indx.period], NULL, 0);
 804bd96:	2200      	movs	r2, #0
	pwm = strtoul(argv[args_indx.pwm], NULL, 0);
 804bd98:	4607      	mov	r7, r0
	period = strtoul(argv[args_indx.period], NULL, 0);
 804bd9a:	68e0      	ldr	r0, [r4, #12]
 804bd9c:	4611      	mov	r1, r2
 804bd9e:	f007 f91d 	bl	8052fdc <strtoul>
	pulse = strtoul(argv[args_indx.pulse], NULL, 0);
 804bda2:	2200      	movs	r2, #0
	period = strtoul(argv[args_indx.period], NULL, 0);
 804bda4:	4680      	mov	r8, r0
	pulse = strtoul(argv[args_indx.pulse], NULL, 0);
 804bda6:	6920      	ldr	r0, [r4, #16]
 804bda8:	4611      	mov	r1, r2
 804bdaa:	f007 f917 	bl	8052fdc <strtoul>
	if (argc == (args_indx.flags + 1)) {
 804bdae:	f1b9 0f06 	cmp.w	r9, #6
	pulse = strtoul(argv[args_indx.pulse], NULL, 0);
 804bdb2:	4603      	mov	r3, r0
	if (argc == (args_indx.flags + 1)) {
 804bdb4:	d118      	bne.n	804bde8 <cmd_cycles+0x88>
		flags = strtoul(argv[args_indx.flags], NULL, 0);
 804bdb6:	2200      	movs	r2, #0
 804bdb8:	9003      	str	r0, [sp, #12]
 804bdba:	6960      	ldr	r0, [r4, #20]
 804bdbc:	4611      	mov	r1, r2
 804bdbe:	f007 f90d 	bl	8052fdc <strtoul>
 804bdc2:	9b03      	ldr	r3, [sp, #12]
 804bdc4:	b2c4      	uxtb	r4, r0
 804bdc6:	68aa      	ldr	r2, [r5, #8]
 804bdc8:	4639      	mov	r1, r7
 804bdca:	9400      	str	r4, [sp, #0]
 804bdcc:	4628      	mov	r0, r5
 804bdce:	6814      	ldr	r4, [r2, #0]
 804bdd0:	4642      	mov	r2, r8
 804bdd2:	47a0      	blx	r4
	if (err) {
 804bdd4:	4604      	mov	r4, r0
 804bdd6:	2800      	cmp	r0, #0
 804bdd8:	d0d4      	beq.n	804bd84 <cmd_cycles+0x24>
		shell_error(shell, "failed to setup PWM (err %d)",
 804bdda:	4603      	mov	r3, r0
 804bddc:	4a04      	ldr	r2, [pc, #16]	; (804bdf0 <cmd_cycles+0x90>)
 804bdde:	2102      	movs	r1, #2
 804bde0:	4630      	mov	r0, r6
 804bde2:	f00a fd6c 	bl	80568be <shell_fprintf>
		return err;
 804bde6:	e7cd      	b.n	804bd84 <cmd_cycles+0x24>
	pwm_flags_t flags = 0;
 804bde8:	2400      	movs	r4, #0
 804bdea:	e7ec      	b.n	804bdc6 <cmd_cycles+0x66>
 804bdec:	0806207a 	.word	0x0806207a
 804bdf0:	08062090 	.word	0x08062090

0804bdf4 <cmd_usec>:
{
 804bdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804bdf8:	4607      	mov	r7, r0
 804bdfa:	468a      	mov	sl, r1
 804bdfc:	4614      	mov	r4, r2
	dev = device_get_binding(argv[args_indx.device]);
 804bdfe:	6850      	ldr	r0, [r2, #4]
{
 804be00:	ed2d 8b02 	vpush	{d8}
 804be04:	b087      	sub	sp, #28
 804be06:	f005 f979 	bl	80510fc <z_impl_device_get_binding>
	if (!dev) {
 804be0a:	4605      	mov	r5, r0
 804be0c:	b960      	cbnz	r0, 804be28 <cmd_usec+0x34>
		return -EINVAL;
 804be0e:	f06f 0415 	mvn.w	r4, #21
		shell_error(shell, "PWM device not found");
 804be12:	4a37      	ldr	r2, [pc, #220]	; (804bef0 <cmd_usec+0xfc>)
 804be14:	2102      	movs	r1, #2
 804be16:	4638      	mov	r0, r7
 804be18:	f00a fd51 	bl	80568be <shell_fprintf>
}
 804be1c:	4620      	mov	r0, r4
 804be1e:	b007      	add	sp, #28
 804be20:	ecbd 8b02 	vpop	{d8}
 804be24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pwm = strtoul(argv[args_indx.pwm], NULL, 0);
 804be28:	2200      	movs	r2, #0
 804be2a:	68a0      	ldr	r0, [r4, #8]
 804be2c:	4611      	mov	r1, r2
 804be2e:	f007 f8d5 	bl	8052fdc <strtoul>
	period = strtoul(argv[args_indx.period], NULL, 0);
 804be32:	2200      	movs	r2, #0
	pwm = strtoul(argv[args_indx.pwm], NULL, 0);
 804be34:	4680      	mov	r8, r0
	period = strtoul(argv[args_indx.period], NULL, 0);
 804be36:	68e0      	ldr	r0, [r4, #12]
 804be38:	4611      	mov	r1, r2
 804be3a:	f007 f8cf 	bl	8052fdc <strtoul>
	pulse = strtoul(argv[args_indx.pulse], NULL, 0);
 804be3e:	2200      	movs	r2, #0
	period = strtoul(argv[args_indx.period], NULL, 0);
 804be40:	4681      	mov	r9, r0
	pulse = strtoul(argv[args_indx.pulse], NULL, 0);
 804be42:	6920      	ldr	r0, [r4, #16]
 804be44:	4611      	mov	r1, r2
 804be46:	f007 f8c9 	bl	8052fdc <strtoul>
	if (argc == (args_indx.flags + 1)) {
 804be4a:	f1ba 0f06 	cmp.w	sl, #6
	pulse = strtoul(argv[args_indx.pulse], NULL, 0);
 804be4e:	4606      	mov	r6, r0
	if (argc == (args_indx.flags + 1)) {
 804be50:	d116      	bne.n	804be80 <cmd_usec+0x8c>
		flags = strtoul(argv[args_indx.flags], NULL, 0);
 804be52:	2200      	movs	r2, #0
 804be54:	6960      	ldr	r0, [r4, #20]
 804be56:	4611      	mov	r1, r2
 804be58:	f007 f8c0 	bl	8052fdc <strtoul>
 804be5c:	b2c3      	uxtb	r3, r0
	pwm_flags_t flags = 0;
 804be5e:	9302      	str	r3, [sp, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 804be60:	68ab      	ldr	r3, [r5, #8]
 804be62:	aa04      	add	r2, sp, #16
 804be64:	4641      	mov	r1, r8
 804be66:	4628      	mov	r0, r5
 804be68:	685b      	ldr	r3, [r3, #4]
 804be6a:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 804be6c:	b150      	cbz	r0, 804be84 <cmd_usec+0x90>
		return -EIO;
 804be6e:	f06f 0404 	mvn.w	r4, #4
		shell_error(shell, "failed to setup PWM (err %d)", err);
 804be72:	4623      	mov	r3, r4
 804be74:	4a1f      	ldr	r2, [pc, #124]	; (804bef4 <cmd_usec+0x100>)
 804be76:	2102      	movs	r1, #2
 804be78:	4638      	mov	r0, r7
 804be7a:	f00a fd20 	bl	80568be <shell_fprintf>
		return err;
 804be7e:	e7cd      	b.n	804be1c <cmd_usec+0x28>
	pwm_flags_t flags = 0;
 804be80:	2300      	movs	r3, #0
 804be82:	e7ec      	b.n	804be5e <cmd_usec+0x6a>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 804be84:	e9dd 4304 	ldrd	r4, r3, [sp, #16]
	if (period_cycles >= ((uint64_t)1 << 32)) {
 804be88:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 804be8c:	4a1a      	ldr	r2, [pc, #104]	; (804bef8 <cmd_usec+0x104>)
 804be8e:	fba9 b004 	umull	fp, r0, r9, r4
 804be92:	9303      	str	r3, [sp, #12]
 804be94:	fb09 0903 	mla	r9, r9, r3, r0
 804be98:	2300      	movs	r3, #0
 804be9a:	4658      	mov	r0, fp
 804be9c:	4649      	mov	r1, r9
 804be9e:	f7f4 fb4f 	bl	8040540 <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 804bea2:	45da      	cmp	sl, fp
 804bea4:	4b15      	ldr	r3, [pc, #84]	; (804befc <cmd_usec+0x108>)
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 804bea6:	ee08 0a10 	vmov	s16, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 804beaa:	eb73 0309 	sbcs.w	r3, r3, r9
 804beae:	d202      	bcs.n	804beb6 <cmd_usec+0xc2>
		return -ENOTSUP;
 804beb0:	f06f 0485 	mvn.w	r4, #133	; 0x85
 804beb4:	e7dd      	b.n	804be72 <cmd_usec+0x7e>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 804beb6:	fba6 9404 	umull	r9, r4, r6, r4
 804beba:	9b03      	ldr	r3, [sp, #12]
 804bebc:	4a0e      	ldr	r2, [pc, #56]	; (804bef8 <cmd_usec+0x104>)
 804bebe:	fb06 4603 	mla	r6, r6, r3, r4
 804bec2:	4648      	mov	r0, r9
 804bec4:	2300      	movs	r3, #0
 804bec6:	4631      	mov	r1, r6
 804bec8:	f7f4 fb3a 	bl	8040540 <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 804becc:	45ca      	cmp	sl, r9
 804bece:	4a0b      	ldr	r2, [pc, #44]	; (804befc <cmd_usec+0x108>)
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 804bed0:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 804bed2:	41b2      	sbcs	r2, r6
 804bed4:	d3ec      	bcc.n	804beb0 <cmd_usec+0xbc>
	return api->pin_set(dev, pwm, period, pulse, flags);
 804bed6:	68aa      	ldr	r2, [r5, #8]
 804bed8:	4628      	mov	r0, r5
 804beda:	9902      	ldr	r1, [sp, #8]
 804bedc:	9100      	str	r1, [sp, #0]
 804bede:	4641      	mov	r1, r8
 804bee0:	6814      	ldr	r4, [r2, #0]
 804bee2:	ee18 2a10 	vmov	r2, s16
 804bee6:	47a0      	blx	r4
	if (err) {
 804bee8:	4604      	mov	r4, r0
 804beea:	2800      	cmp	r0, #0
 804beec:	d096      	beq.n	804be1c <cmd_usec+0x28>
 804beee:	e7c0      	b.n	804be72 <cmd_usec+0x7e>
 804bef0:	0806207a 	.word	0x0806207a
 804bef4:	08062090 	.word	0x08062090
 804bef8:	000f4240 	.word	0x000f4240
 804befc:	000f423f 	.word	0x000f423f

0804bf00 <channel_name_get>:

static void channel_name_get(size_t idx, struct shell_static_entry *entry)
{
	int cnt = 0;

	entry->syntax = NULL;
 804bf00:	2300      	movs	r3, #0
	entry->handler = NULL;
	entry->help  = NULL;
	entry->subcmd = &dsub_channel_name;
 804bf02:	4a0a      	ldr	r2, [pc, #40]	; (804bf2c <channel_name_get+0x2c>)
{
 804bf04:	b530      	push	{r4, r5, lr}
	entry->subcmd = &dsub_channel_name;
 804bf06:	608a      	str	r2, [r1, #8]
	int cnt = 0;
 804bf08:	461a      	mov	r2, r3
 804bf0a:	4c09      	ldr	r4, [pc, #36]	; (804bf30 <channel_name_get+0x30>)
	entry->syntax = NULL;
 804bf0c:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
 804bf0e:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
 804bf10:	604b      	str	r3, [r1, #4]

	for (int i = 0; i < SENSOR_CHAN_ALL; i++) {
		if (sensor_channel_name[i] != NULL) {
 804bf12:	f854 5b04 	ldr.w	r5, [r4], #4
 804bf16:	b125      	cbz	r5, 804bf22 <channel_name_get+0x22>
			if (cnt == idx) {
 804bf18:	4282      	cmp	r2, r0
 804bf1a:	d101      	bne.n	804bf20 <channel_name_get+0x20>
				entry->syntax = sensor_channel_name[i];
 804bf1c:	600d      	str	r5, [r1, #0]
				break;
			}
			cnt++;
		}
	}
}
 804bf1e:	bd30      	pop	{r4, r5, pc}
			cnt++;
 804bf20:	3201      	adds	r2, #1
	for (int i = 0; i < SENSOR_CHAN_ALL; i++) {
 804bf22:	3301      	adds	r3, #1
 804bf24:	2b39      	cmp	r3, #57	; 0x39
 804bf26:	d1f4      	bne.n	804bf12 <channel_name_get+0x12>
 804bf28:	e7f9      	b.n	804bf1e <channel_name_get+0x1e>
 804bf2a:	bf00      	nop
 804bf2c:	0805dc7c 	.word	0x0805dc7c
 804bf30:	20020278 	.word	0x20020278

0804bf34 <device_name_get>:
static void device_name_get(size_t idx, struct shell_static_entry *entry);

SHELL_DYNAMIC_CMD_CREATE(dsub_device_name, device_name_get);

static void device_name_get(size_t idx, struct shell_static_entry *entry)
{
 804bf34:	b510      	push	{r4, lr}
 804bf36:	460c      	mov	r4, r1
	const struct device *dev = shell_device_lookup(idx, NULL);
 804bf38:	2100      	movs	r1, #0
 804bf3a:	f00a fdc6 	bl	8056aca <shell_device_lookup>

	entry->syntax = (dev != NULL) ? dev->name : NULL;
 804bf3e:	b100      	cbz	r0, 804bf42 <device_name_get+0xe>
 804bf40:	6800      	ldr	r0, [r0, #0]
	entry->handler = NULL;
 804bf42:	2300      	movs	r3, #0
	entry->syntax = (dev != NULL) ? dev->name : NULL;
 804bf44:	6020      	str	r0, [r4, #0]
	entry->handler = NULL;
 804bf46:	60e3      	str	r3, [r4, #12]
	entry->help  = NULL;
 804bf48:	6063      	str	r3, [r4, #4]
	entry->subcmd = &dsub_channel_name;
 804bf4a:	4b01      	ldr	r3, [pc, #4]	; (804bf50 <device_name_get+0x1c>)
 804bf4c:	60a3      	str	r3, [r4, #8]
}
 804bf4e:	bd10      	pop	{r4, pc}
 804bf50:	0805dc7c 	.word	0x0805dc7c

0804bf54 <cmd_get_sensor>:
{
 804bf54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804bf58:	4604      	mov	r4, r0
 804bf5a:	4688      	mov	r8, r1
 804bf5c:	4616      	mov	r6, r2
	dev = device_get_binding(argv[1]);
 804bf5e:	6850      	ldr	r0, [r2, #4]
 804bf60:	f005 f8cc 	bl	80510fc <z_impl_device_get_binding>
	if (dev == NULL) {
 804bf64:	4605      	mov	r5, r0
 804bf66:	b948      	cbnz	r0, 804bf7c <cmd_get_sensor+0x28>
		shell_error(shell, "Device unknown (%s)", argv[1]);
 804bf68:	4620      	mov	r0, r4
 804bf6a:	6873      	ldr	r3, [r6, #4]
 804bf6c:	4a1d      	ldr	r2, [pc, #116]	; (804bfe4 <cmd_get_sensor+0x90>)
 804bf6e:	2102      	movs	r1, #2
 804bf70:	f00a fca5 	bl	80568be <shell_fprintf>
		return -ENODEV;
 804bf74:	f06f 0012 	mvn.w	r0, #18
}
 804bf78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
 804bf7c:	6883      	ldr	r3, [r0, #8]
 804bf7e:	2139      	movs	r1, #57	; 0x39
 804bf80:	68db      	ldr	r3, [r3, #12]
 804bf82:	4798      	blx	r3
	if (err < 0) {
 804bf84:	1e03      	subs	r3, r0, #0
 804bf86:	da04      	bge.n	804bf92 <cmd_get_sensor+0x3e>
		shell_error(shell, "Failed to read sensor: %d", err);
 804bf88:	4a17      	ldr	r2, [pc, #92]	; (804bfe8 <cmd_get_sensor+0x94>)
 804bf8a:	2102      	movs	r1, #2
 804bf8c:	4620      	mov	r0, r4
 804bf8e:	f00a fc96 	bl	80568be <shell_fprintf>
	if (argc == 2) {
 804bf92:	f1b8 0f02 	cmp.w	r8, #2
 804bf96:	d120      	bne.n	804bfda <cmd_get_sensor+0x86>
 804bf98:	4f14      	ldr	r7, [pc, #80]	; (804bfec <cmd_get_sensor+0x98>)
		for (int i = 0; i < ARRAY_SIZE(sensor_channel_name); i++) {
 804bf9a:	2600      	movs	r6, #0
			if (sensor_channel_name[i]) {
 804bf9c:	f857 2b04 	ldr.w	r2, [r7], #4
 804bfa0:	b11a      	cbz	r2, 804bfaa <cmd_get_sensor+0x56>
				handle_channel_by_name(shell, dev,
 804bfa2:	4629      	mov	r1, r5
 804bfa4:	4620      	mov	r0, r4
 804bfa6:	f7f5 fb53 	bl	8041650 <handle_channel_by_name>
		for (int i = 0; i < ARRAY_SIZE(sensor_channel_name); i++) {
 804bfaa:	3601      	adds	r6, #1
 804bfac:	2e39      	cmp	r6, #57	; 0x39
 804bfae:	d1f5      	bne.n	804bf9c <cmd_get_sensor+0x48>
	return 0;
 804bfb0:	2000      	movs	r0, #0
 804bfb2:	e7e1      	b.n	804bf78 <cmd_get_sensor+0x24>
			err = handle_channel_by_name(shell, dev, argv[i]);
 804bfb4:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
 804bfb8:	4629      	mov	r1, r5
 804bfba:	4620      	mov	r0, r4
 804bfbc:	f7f5 fb48 	bl	8041650 <handle_channel_by_name>
			if (err < 0) {
 804bfc0:	2800      	cmp	r0, #0
 804bfc2:	da06      	bge.n	804bfd2 <cmd_get_sensor+0x7e>
				shell_error(shell,
 804bfc4:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
 804bfc8:	464a      	mov	r2, r9
 804bfca:	2102      	movs	r1, #2
 804bfcc:	4620      	mov	r0, r4
 804bfce:	f00a fc76 	bl	80568be <shell_fprintf>
		for (int i = 2; i < argc; i++) {
 804bfd2:	3701      	adds	r7, #1
 804bfd4:	45b8      	cmp	r8, r7
 804bfd6:	d8ed      	bhi.n	804bfb4 <cmd_get_sensor+0x60>
 804bfd8:	e7ea      	b.n	804bfb0 <cmd_get_sensor+0x5c>
 804bfda:	2702      	movs	r7, #2
				shell_error(shell,
 804bfdc:	f8df 9010 	ldr.w	r9, [pc, #16]	; 804bff0 <cmd_get_sensor+0x9c>
 804bfe0:	e7f8      	b.n	804bfd4 <cmd_get_sensor+0x80>
 804bfe2:	bf00      	nop
 804bfe4:	08062218 	.word	0x08062218
 804bfe8:	0806222d 	.word	0x0806222d
 804bfec:	20020278 	.word	0x20020278
 804bff0:	08062248 	.word	0x08062248

0804bff4 <spi_stm32_init>:
#endif
	.release = spi_stm32_release,
};

static int spi_stm32_init(const struct device *dev)
{
 804bff4:	b570      	push	{r4, r5, r6, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 804bff6:	6906      	ldr	r6, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 804bff8:	6844      	ldr	r4, [r0, #4]
 804bffa:	4d1c      	ldr	r5, [pc, #112]	; (804c06c <spi_stm32_init+0x78>)
 804bffc:	4628      	mov	r0, r5
 804bffe:	f00e f92a 	bl	805a256 <z_device_ready>
 804c002:	b978      	cbnz	r0, 804c024 <spi_stm32_init+0x30>
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
			       (clock_control_subsys_t) &cfg->pclken) != 0) {
		LOG_ERR("Could not enable SPI clock");
 804c004:	491a      	ldr	r1, [pc, #104]	; (804c070 <spi_stm32_init+0x7c>)
 804c006:	680b      	ldr	r3, [r1, #0]
 804c008:	075a      	lsls	r2, r3, #29
 804c00a:	d008      	beq.n	804c01e <spi_stm32_init+0x2a>
 804c00c:	4b19      	ldr	r3, [pc, #100]	; (804c074 <spi_stm32_init+0x80>)
 804c00e:	481a      	ldr	r0, [pc, #104]	; (804c078 <spi_stm32_init+0x84>)
 804c010:	1ac9      	subs	r1, r1, r3
 804c012:	0889      	lsrs	r1, r1, #2
 804c014:	0189      	lsls	r1, r1, #6
 804c016:	f041 0101 	orr.w	r1, r1, #1
 804c01a:	f009 ffe4 	bl	8055fe6 <log_0>
		return -EIO;
 804c01e:	f06f 0404 	mvn.w	r4, #4
 804c022:	e01c      	b.n	804c05e <spi_stm32_init+0x6a>
	return api->on(dev, sys);
 804c024:	68ab      	ldr	r3, [r5, #8]
 804c026:	4628      	mov	r0, r5
 804c028:	4621      	mov	r1, r4
 804c02a:	681b      	ldr	r3, [r3, #0]
 804c02c:	4798      	blx	r3
	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 804c02e:	4605      	mov	r5, r0
 804c030:	2800      	cmp	r0, #0
 804c032:	d1e7      	bne.n	804c004 <spi_stm32_init+0x10>
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(cfg->pinctrl_list,
 804c034:	68a2      	ldr	r2, [r4, #8]
 804c036:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 804c03a:	f00b fab4 	bl	80575a6 <stm32_dt_pinctrl_configure>
					 cfg->pinctrl_list_size,
					 (uint32_t)cfg->spi);
	if (err < 0) {
 804c03e:	1e04      	subs	r4, r0, #0
 804c040:	da0f      	bge.n	804c062 <spi_stm32_init+0x6e>
		LOG_ERR("SPI pinctrl setup failed (%d)", err);
 804c042:	4a0b      	ldr	r2, [pc, #44]	; (804c070 <spi_stm32_init+0x7c>)
 804c044:	6813      	ldr	r3, [r2, #0]
 804c046:	075b      	lsls	r3, r3, #29
 804c048:	d009      	beq.n	804c05e <spi_stm32_init+0x6a>
 804c04a:	4b0a      	ldr	r3, [pc, #40]	; (804c074 <spi_stm32_init+0x80>)
 804c04c:	4621      	mov	r1, r4
 804c04e:	480b      	ldr	r0, [pc, #44]	; (804c07c <spi_stm32_init+0x88>)
 804c050:	1ad2      	subs	r2, r2, r3
 804c052:	0892      	lsrs	r2, r2, #2
 804c054:	0192      	lsls	r2, r2, #6
 804c056:	f042 0201 	orr.w	r2, r2, #1
 804c05a:	f009 ffd3 	bl	8056004 <log_1>
	}
#endif /* CONFIG_SPI_STM32_DMA */
	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 804c05e:	4620      	mov	r0, r4
 804c060:	bd70      	pop	{r4, r5, r6, pc}
	spi_context_unlock_unconditionally(&data->ctx);
 804c062:	4630      	mov	r0, r6
	return 0;
 804c064:	462c      	mov	r4, r5
	spi_context_unlock_unconditionally(&data->ctx);
 804c066:	f00c f980 	bl	805836a <spi_context_unlock_unconditionally>
	return 0;
 804c06a:	e7f8      	b.n	804c05e <spi_stm32_init+0x6a>
 804c06c:	0805b844 	.word	0x0805b844
 804c070:	20020938 	.word	0x20020938
 804c074:	200208c8 	.word	0x200208c8
 804c078:	08062563 	.word	0x08062563
 804c07c:	0806257e 	.word	0x0806257e

0804c080 <spi_stm32_transceive>:
{
 804c080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804c084:	461e      	mov	r6, r3
 804c086:	b08f      	sub	sp, #60	; 0x3c
	SPI_TypeDef *spi = cfg->spi;
 804c088:	6843      	ldr	r3, [r0, #4]
{
 804c08a:	460f      	mov	r7, r1
	struct spi_stm32_data *data = DEV_DATA(dev);
 804c08c:	6904      	ldr	r4, [r0, #16]
	if (!tx_bufs && !rx_bufs) {
 804c08e:	4690      	mov	r8, r2
	SPI_TypeDef *spi = cfg->spi;
 804c090:	f8d3 b008 	ldr.w	fp, [r3, #8]
{
 804c094:	9002      	str	r0, [sp, #8]
	if (!tx_bufs && !rx_bufs) {
 804c096:	b90a      	cbnz	r2, 804c09c <spi_stm32_transceive+0x1c>
 804c098:	2e00      	cmp	r6, #0
 804c09a:	d049      	beq.n	804c130 <spi_stm32_transceive+0xb0>
static inline void spi_context_lock(struct spi_context *ctx,
				    bool asynchronous,
				    struct k_poll_signal *signal,
				    const struct spi_config *spi_cfg)
{
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 804c09c:	88bb      	ldrh	r3, [r7, #4]
 804c09e:	045b      	lsls	r3, r3, #17
 804c0a0:	d44a      	bmi.n	804c138 <spi_stm32_transceive+0xb8>
	return z_impl_k_sem_take(sem, timeout);
 804c0a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804c0a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804c0aa:	f104 0008 	add.w	r0, r4, #8
 804c0ae:	f005 fd3f 	bl	8051b30 <z_impl_k_sem_take>
		(ctx->owner == spi_cfg)) {
			return;
	}

	k_sem_take(&ctx->lock, K_FOREVER);
	ctx->owner = spi_cfg;
 804c0b2:	6067      	str	r7, [r4, #4]
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 804c0b4:	9b02      	ldr	r3, [sp, #8]
	const uint32_t scaler[] = {
 804c0b6:	ad06      	add	r5, sp, #24
 804c0b8:	f8df c2fc 	ldr.w	ip, [pc, #764]	; 804c3b8 <spi_stm32_transceive+0x338>
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 804c0bc:	685b      	ldr	r3, [r3, #4]
 804c0be:	9303      	str	r3, [sp, #12]
	struct spi_stm32_data *data = DEV_DATA(dev);
 804c0c0:	9b02      	ldr	r3, [sp, #8]
 804c0c2:	f8d3 a010 	ldr.w	sl, [r3, #16]
	const uint32_t scaler[] = {
 804c0c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 804c0ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 804c0cc:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 804c0d0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (spi_context_configured(&data->ctx, config)) {
 804c0d4:	f8da 3000 	ldr.w	r3, [sl]
 804c0d8:	429f      	cmp	r7, r3
 804c0da:	f000 80d2 	beq.w	804c282 <spi_stm32_transceive+0x202>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 804c0de:	88bb      	ldrh	r3, [r7, #4]
 804c0e0:	f3c3 1345 	ubfx	r3, r3, #5, #6
 804c0e4:	2b08      	cmp	r3, #8
 804c0e6:	d002      	beq.n	804c0ee <spi_stm32_transceive+0x6e>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 804c0e8:	2b10      	cmp	r3, #16
 804c0ea:	f040 8145 	bne.w	804c378 <spi_stm32_transceive+0x2f8>
	SPI_TypeDef *spi = cfg->spi;
 804c0ee:	9b03      	ldr	r3, [sp, #12]
 804c0f0:	689d      	ldr	r5, [r3, #8]
 804c0f2:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 804c3bc <spi_stm32_transceive+0x33c>
 804c0f6:	4648      	mov	r0, r9
 804c0f8:	f00e f8ad 	bl	805a256 <z_device_ready>
 804c0fc:	bb18      	cbnz	r0, 804c146 <spi_stm32_transceive+0xc6>
		LOG_ERR("Failed call clock_control_get_rate");
 804c0fe:	49a9      	ldr	r1, [pc, #676]	; (804c3a4 <spi_stm32_transceive+0x324>)
 804c100:	680b      	ldr	r3, [r1, #0]
 804c102:	075d      	lsls	r5, r3, #29
 804c104:	d008      	beq.n	804c118 <spi_stm32_transceive+0x98>
 804c106:	4ba8      	ldr	r3, [pc, #672]	; (804c3a8 <spi_stm32_transceive+0x328>)
 804c108:	48a8      	ldr	r0, [pc, #672]	; (804c3ac <spi_stm32_transceive+0x32c>)
 804c10a:	1ac9      	subs	r1, r1, r3
 804c10c:	0889      	lsrs	r1, r1, #2
 804c10e:	0189      	lsls	r1, r1, #6
 804c110:	f041 0101 	orr.w	r1, r1, #1
 804c114:	f009 ff67 	bl	8055fe6 <log_0>
		return -EIO;
 804c118:	f06f 0604 	mvn.w	r6, #4
	if (!ctx->asynchronous || (status < 0)) {
		ctx->owner = NULL;
		k_sem_give(&ctx->lock);
	}
#else
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 804c11c:	6823      	ldr	r3, [r4, #0]
 804c11e:	889b      	ldrh	r3, [r3, #4]
 804c120:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 804c124:	d104      	bne.n	804c130 <spi_stm32_transceive+0xb0>
		ctx->owner = NULL;
 804c126:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 804c128:	f104 0008 	add.w	r0, r4, #8
 804c12c:	f005 fcda 	bl	8051ae4 <z_impl_k_sem_give>
}
 804c130:	4630      	mov	r0, r6
 804c132:	b00f      	add	sp, #60	; 0x3c
 804c134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 804c138:	6923      	ldr	r3, [r4, #16]
 804c13a:	2b00      	cmp	r3, #0
 804c13c:	d1b1      	bne.n	804c0a2 <spi_stm32_transceive+0x22>
		(k_sem_count_get(&ctx->lock) == 0) &&
 804c13e:	6863      	ldr	r3, [r4, #4]
 804c140:	429f      	cmp	r7, r3
 804c142:	d1ae      	bne.n	804c0a2 <spi_stm32_transceive+0x22>
 804c144:	e7b6      	b.n	804c0b4 <spi_stm32_transceive+0x34>
	if (api->get_rate == NULL) {
 804c146:	f8d9 3008 	ldr.w	r3, [r9, #8]
 804c14a:	68db      	ldr	r3, [r3, #12]
 804c14c:	2b00      	cmp	r3, #0
 804c14e:	d0d6      	beq.n	804c0fe <spi_stm32_transceive+0x7e>
	return api->get_rate(dev, sys, rate);
 804c150:	aa05      	add	r2, sp, #20
 804c152:	9903      	ldr	r1, [sp, #12]
 804c154:	4648      	mov	r0, r9
 804c156:	4798      	blx	r3
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 804c158:	2800      	cmp	r0, #0
 804c15a:	dbd0      	blt.n	804c0fe <spi_stm32_transceive+0x7e>
		uint32_t clk = clock >> br;
 804c15c:	9a05      	ldr	r2, [sp, #20]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 804c15e:	2301      	movs	r3, #1
		if (clk <= config->frequency) {
 804c160:	6839      	ldr	r1, [r7, #0]
		uint32_t clk = clock >> br;
 804c162:	fa22 f003 	lsr.w	r0, r2, r3
		if (clk <= config->frequency) {
 804c166:	4288      	cmp	r0, r1
 804c168:	f240 822d 	bls.w	804c5c6 <spi_stm32_transceive+0x546>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 804c16c:	3301      	adds	r3, #1
 804c16e:	2b09      	cmp	r3, #9
 804c170:	d1f7      	bne.n	804c162 <spi_stm32_transceive+0xe2>
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 804c172:	4b8c      	ldr	r3, [pc, #560]	; (804c3a4 <spi_stm32_transceive+0x324>)
 804c174:	6818      	ldr	r0, [r3, #0]
 804c176:	0740      	lsls	r0, r0, #29
 804c178:	d00c      	beq.n	804c194 <spi_stm32_transceive+0x114>
 804c17a:	488b      	ldr	r0, [pc, #556]	; (804c3a8 <spi_stm32_transceive+0x328>)
 804c17c:	1a1b      	subs	r3, r3, r0
 804c17e:	488c      	ldr	r0, [pc, #560]	; (804c3b0 <spi_stm32_transceive+0x330>)
 804c180:	089b      	lsrs	r3, r3, #2
 804c182:	019b      	lsls	r3, r3, #6
 804c184:	f043 0301 	orr.w	r3, r3, #1
 804c188:	f8ad 3000 	strh.w	r3, [sp]
 804c18c:	0a13      	lsrs	r3, r2, #8
 804c18e:	0852      	lsrs	r2, r2, #1
 804c190:	f009 ff68 	bl	8056064 <log_3>
		return -EINVAL;
 804c194:	f06f 0615 	mvn.w	r6, #21
 804c198:	e7c0      	b.n	804c11c <spi_stm32_transceive+0x9c>
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 804c19a:	682a      	ldr	r2, [r5, #0]
 804c19c:	f042 0202 	orr.w	r2, r2, #2
 804c1a0:	602a      	str	r2, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 804c1a2:	0758      	lsls	r0, r3, #29
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 804c1a4:	682a      	ldr	r2, [r5, #0]
 804c1a6:	f003 0001 	and.w	r0, r3, #1
 804c1aa:	bf4c      	ite	mi
 804c1ac:	f042 0201 	orrmi.w	r2, r2, #1
 804c1b0:	f022 0201 	bicpl.w	r2, r2, #1
	if (config->operation & SPI_TRANSFER_LSB) {
 804c1b4:	06d9      	lsls	r1, r3, #27
 804c1b6:	602a      	str	r2, [r5, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 804c1b8:	682a      	ldr	r2, [r5, #0]
 804c1ba:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 804c1be:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 804c1c0:	682a      	ldr	r2, [r5, #0]
 804c1c2:	bf4c      	ite	mi
 804c1c4:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 804c1c8:	f022 0280 	bicpl.w	r2, r2, #128	; 0x80
 804c1cc:	602a      	str	r2, [r5, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 804c1ce:	682a      	ldr	r2, [r5, #0]
 804c1d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 804c1d4:	602a      	str	r2, [r5, #0]
	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 804c1d6:	68ba      	ldr	r2, [r7, #8]
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 804c1d8:	6829      	ldr	r1, [r5, #0]
 804c1da:	b15a      	cbz	r2, 804c1f4 <spi_stm32_transceive+0x174>
 804c1dc:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 804c1e0:	6029      	str	r1, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 804c1e2:	6869      	ldr	r1, [r5, #4]
 804c1e4:	f021 0104 	bic.w	r1, r1, #4
 804c1e8:	6069      	str	r1, [r5, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 804c1ea:	b968      	cbnz	r0, 804c208 <spi_stm32_transceive+0x188>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 804c1ec:	6829      	ldr	r1, [r5, #0]
 804c1ee:	f441 7182 	orr.w	r1, r1, #260	; 0x104
 804c1f2:	e00c      	b.n	804c20e <spi_stm32_transceive+0x18e>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 804c1f4:	f421 7100 	bic.w	r1, r1, #512	; 0x200
		if (config->operation & SPI_OP_MODE_SLAVE) {
 804c1f8:	2800      	cmp	r0, #0
 804c1fa:	f000 80a5 	beq.w	804c348 <spi_stm32_transceive+0x2c8>
 804c1fe:	6029      	str	r1, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 804c200:	6869      	ldr	r1, [r5, #4]
 804c202:	f021 0104 	bic.w	r1, r1, #4
 804c206:	6069      	str	r1, [r5, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 804c208:	6829      	ldr	r1, [r5, #0]
 804c20a:	f421 7182 	bic.w	r1, r1, #260	; 0x104
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 804c20e:	f3c3 1345 	ubfx	r3, r3, #5, #6
 804c212:	6029      	str	r1, [r5, #0]
 804c214:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 804c216:	686b      	ldr	r3, [r5, #4]
 804c218:	bf0a      	itet	eq
 804c21a:	f423 6370 	biceq.w	r3, r3, #3840	; 0xf00
 804c21e:	f443 6370 	orrne.w	r3, r3, #3840	; 0xf00
 804c222:	f443 63e0 	orreq.w	r3, r3, #1792	; 0x700
 804c226:	606b      	str	r3, [r5, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 804c228:	686b      	ldr	r3, [r5, #4]
 804c22a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 804c22e:	606b      	str	r3, [r5, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 804c230:	686b      	ldr	r3, [r5, #4]
 804c232:	f023 0310 	bic.w	r3, r3, #16
 804c236:	606b      	str	r3, [r5, #4]
	data->ctx.config = config;
 804c238:	f8ca 7000 	str.w	r7, [sl]
	return GPIO_ACTIVE_LOW;
}

static inline void spi_context_cs_configure(struct spi_context *ctx)
{
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 804c23c:	2a00      	cmp	r2, #0
 804c23e:	f000 808b 	beq.w	804c358 <spi_stm32_transceive+0x2d8>
 804c242:	6810      	ldr	r0, [r2, #0]
 804c244:	2800      	cmp	r0, #0
 804c246:	f000 8087 	beq.w	804c358 <spi_stm32_transceive+0x2d8>
		/* Validate CS active levels are equivalent */
		__ASSERT(spi_context_cs_active_level(ctx) ==
			 (ctx->config->cs->gpio_dt_flags & GPIO_ACTIVE_LOW),
			 "Devicetree and spi_context CS levels are not equal");
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 804c24a:	7a11      	ldrb	r1, [r2, #8]
				   ctx->config->cs->gpio_pin,
				   ctx->config->cs->gpio_dt_flags |
 804c24c:	7a53      	ldrb	r3, [r2, #9]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 804c24e:	07da      	lsls	r2, r3, #31
	struct gpio_driver_data *data =
 804c250:	f8d0 c010 	ldr.w	ip, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 804c254:	f04f 0701 	mov.w	r7, #1
	const struct gpio_driver_api *api =
 804c258:	f8d0 e008 	ldr.w	lr, [r0, #8]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 804c25c:	bf54      	ite	pl
 804c25e:	f443 53b0 	orrpl.w	r3, r3, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 804c262:	f483 53d0 	eormi.w	r3, r3, #6656	; 0x1a00
		data->invert |= (gpio_port_pins_t)BIT(pin);
 804c266:	f8dc 5000 	ldr.w	r5, [ip]
 804c26a:	408f      	lsls	r7, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 804c26c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 804c270:	07db      	lsls	r3, r3, #31
	return api->pin_configure(port, pin, flags);
 804c272:	f8de 3000 	ldr.w	r3, [lr]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 804c276:	bf4c      	ite	mi
 804c278:	433d      	orrmi	r5, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 804c27a:	43bd      	bicpl	r5, r7
 804c27c:	f8cc 5000 	str.w	r5, [ip]
	return api->pin_configure(port, pin, flags);
 804c280:	4798      	blx	r3
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 804c282:	f1b8 0f00 	cmp.w	r8, #0
 804c286:	d17a      	bne.n	804c37e <spi_stm32_transceive+0x2fe>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 804c288:	4642      	mov	r2, r8
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 804c28a:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	ctx->tx_buf = (const uint8_t *)
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 804c28e:	f104 053c 	add.w	r5, r4, #60	; 0x3c
 804c292:	f104 0740 	add.w	r7, r4, #64	; 0x40
 804c296:	f104 0850 	add.w	r8, r4, #80	; 0x50
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 804c29a:	6422      	str	r2, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 804c29c:	2301      	movs	r3, #1
 804c29e:	4639      	mov	r1, r7
 804c2a0:	4642      	mov	r2, r8
 804c2a2:	4628      	mov	r0, r5
 804c2a4:	f00c f818 	bl	80582d8 <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
 804c2a8:	64e0      	str	r0, [r4, #76]	; 0x4c
					 &ctx->tx_len, dfs);

	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 804c2aa:	2e00      	cmp	r6, #0
 804c2ac:	d16f      	bne.n	804c38e <spi_stm32_transceive+0x30e>
 804c2ae:	6466      	str	r6, [r4, #68]	; 0x44
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 804c2b0:	64a6      	str	r6, [r4, #72]	; 0x48
	ctx->rx_buf = (uint8_t *)
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 804c2b2:	f104 0944 	add.w	r9, r4, #68	; 0x44
 804c2b6:	f104 0a48 	add.w	sl, r4, #72	; 0x48
 804c2ba:	f104 0658 	add.w	r6, r4, #88	; 0x58
 804c2be:	2301      	movs	r3, #1
 804c2c0:	4648      	mov	r0, r9
 804c2c2:	4632      	mov	r2, r6
 804c2c4:	4651      	mov	r1, sl
 804c2c6:	f00c f807 	bl	80582d8 <spi_context_get_next_buf>
					 &ctx->rx_len, dfs);

	ctx->sync_status = 0;
 804c2ca:	2300      	movs	r3, #0
	ctx->rx_buf = (uint8_t *)
 804c2cc:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->sync_status = 0;
 804c2ce:	63a3      	str	r3, [r4, #56]	; 0x38
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 804c2d0:	f8db 2008 	ldr.w	r2, [fp, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 804c2d4:	f012 0201 	ands.w	r2, r2, #1
 804c2d8:	d160      	bne.n	804c39c <spi_stm32_transceive+0x31c>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 804c2da:	f8db 3000 	ldr.w	r3, [fp]
	_spi_context_cs_control(ctx, on, false);
 804c2de:	2101      	movs	r1, #1
 804c2e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804c2e4:	f8cb 3000 	str.w	r3, [fp]
 804c2e8:	9b02      	ldr	r3, [sp, #8]
 804c2ea:	6918      	ldr	r0, [r3, #16]
 804c2ec:	f00c f818 	bl	8058320 <_spi_context_cs_control>
	uint16_t operation = data->ctx.config->operation;
 804c2f0:	6823      	ldr	r3, [r4, #0]
 804c2f2:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 804c2f4:	f013 0101 	ands.w	r1, r3, #1
 804c2f8:	f040 80d8 	bne.w	804c4ac <spi_stm32_transceive+0x42c>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 804c2fc:	f8db 2008 	ldr.w	r2, [fp, #8]
 804c300:	0790      	lsls	r0, r2, #30
 804c302:	d5fb      	bpl.n	804c2fc <spi_stm32_transceive+0x27c>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 804c304:	f3c3 1345 	ubfx	r3, r3, #5, #6
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 804c308:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 804c30a:	2b08      	cmp	r3, #8
 804c30c:	f040 80a4 	bne.w	804c458 <spi_stm32_transceive+0x3d8>
}

static ALWAYS_INLINE
bool spi_context_tx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf && ctx->tx_len);
 804c310:	b112      	cbz	r2, 804c318 <spi_stm32_transceive+0x298>
 804c312:	6d23      	ldr	r3, [r4, #80]	; 0x50
 804c314:	b103      	cbz	r3, 804c318 <spi_stm32_transceive+0x298>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 804c316:	7811      	ldrb	r1, [r2, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 804c318:	b2c9      	uxtb	r1, r1
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 804c31a:	f88b 100c 	strb.w	r1, [fp, #12]
	if (!ctx->tx_len) {
 804c31e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 804c320:	2b00      	cmp	r3, #0
 804c322:	d051      	beq.n	804c3c8 <spi_stm32_transceive+0x348>
	ctx->tx_len -= len;
 804c324:	3b01      	subs	r3, #1
 804c326:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->tx_len) {
 804c328:	2b00      	cmp	r3, #0
 804c32a:	d149      	bne.n	804c3c0 <spi_stm32_transceive+0x340>
		++ctx->current_tx;
 804c32c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 804c32e:	3308      	adds	r3, #8
 804c330:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->tx_count;
 804c332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804c334:	3b01      	subs	r3, #1
 804c336:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_tx,
 804c338:	2301      	movs	r3, #1
 804c33a:	4642      	mov	r2, r8
 804c33c:	4639      	mov	r1, r7
 804c33e:	4628      	mov	r0, r5
 804c340:	f00b ffca 	bl	80582d8 <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 804c344:	64e0      	str	r0, [r4, #76]	; 0x4c
 804c346:	e03f      	b.n	804c3c8 <spi_stm32_transceive+0x348>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 804c348:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 804c34c:	6029      	str	r1, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 804c34e:	6869      	ldr	r1, [r5, #4]
 804c350:	f041 0104 	orr.w	r1, r1, #4
 804c354:	6069      	str	r1, [r5, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 804c356:	e749      	b.n	804c1ec <spi_stm32_transceive+0x16c>
		LOG_INF("CS control inhibited (no GPIO device)");
 804c358:	4912      	ldr	r1, [pc, #72]	; (804c3a4 <spi_stm32_transceive+0x324>)
 804c35a:	680b      	ldr	r3, [r1, #0]
 804c35c:	f003 0307 	and.w	r3, r3, #7
 804c360:	2b02      	cmp	r3, #2
 804c362:	d98e      	bls.n	804c282 <spi_stm32_transceive+0x202>
 804c364:	4b10      	ldr	r3, [pc, #64]	; (804c3a8 <spi_stm32_transceive+0x328>)
 804c366:	4813      	ldr	r0, [pc, #76]	; (804c3b4 <spi_stm32_transceive+0x334>)
 804c368:	1ac9      	subs	r1, r1, r3
 804c36a:	0889      	lsrs	r1, r1, #2
 804c36c:	0189      	lsls	r1, r1, #6
 804c36e:	f041 0103 	orr.w	r1, r1, #3
 804c372:	f009 fe38 	bl	8055fe6 <log_0>
	if (ret) {
 804c376:	e784      	b.n	804c282 <spi_stm32_transceive+0x202>
		return -ENOTSUP;
 804c378:	f06f 0685 	mvn.w	r6, #133	; 0x85
 804c37c:	e6ce      	b.n	804c11c <spi_stm32_transceive+0x9c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 804c37e:	f8d8 2000 	ldr.w	r2, [r8]
 804c382:	63e2      	str	r2, [r4, #60]	; 0x3c
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 804c384:	2a00      	cmp	r2, #0
 804c386:	d082      	beq.n	804c28e <spi_stm32_transceive+0x20e>
 804c388:	f8d8 2004 	ldr.w	r2, [r8, #4]
 804c38c:	e77f      	b.n	804c28e <spi_stm32_transceive+0x20e>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 804c38e:	6833      	ldr	r3, [r6, #0]
 804c390:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 804c392:	b10b      	cbz	r3, 804c398 <spi_stm32_transceive+0x318>
 804c394:	6876      	ldr	r6, [r6, #4]
 804c396:	e78b      	b.n	804c2b0 <spi_stm32_transceive+0x230>
 804c398:	461e      	mov	r6, r3
 804c39a:	e789      	b.n	804c2b0 <spi_stm32_transceive+0x230>
  return (uint8_t)(READ_REG(SPIx->DR));
 804c39c:	f8db 300c 	ldr.w	r3, [fp, #12]
 804c3a0:	e796      	b.n	804c2d0 <spi_stm32_transceive+0x250>
 804c3a2:	bf00      	nop
 804c3a4:	20020938 	.word	0x20020938
 804c3a8:	200208c8 	.word	0x200208c8
 804c3ac:	08061e20 	.word	0x08061e20
 804c3b0:	0806259c 	.word	0x0806259c
 804c3b4:	080625cb 	.word	0x080625cb
 804c3b8:	0805c430 	.word	0x0805c430
 804c3bc:	0805b844 	.word	0x0805b844
	} else if (ctx->tx_buf) {
 804c3c0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 804c3c2:	b10b      	cbz	r3, 804c3c8 <spi_stm32_transceive+0x348>
		ctx->tx_buf += dfs * len;
 804c3c4:	3301      	adds	r3, #1
 804c3c6:	64e3      	str	r3, [r4, #76]	; 0x4c
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 804c3c8:	f8db 3008 	ldr.w	r3, [fp, #8]
	while (!ll_func_rx_is_not_empty(spi)) {
 804c3cc:	07d9      	lsls	r1, r3, #31
 804c3ce:	d5fb      	bpl.n	804c3c8 <spi_stm32_transceive+0x348>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 804c3d0:	6822      	ldr	r2, [r4, #0]
 804c3d2:	8892      	ldrh	r2, [r2, #4]
 804c3d4:	f3c2 1245 	ubfx	r2, r2, #5, #6
 804c3d8:	2a08      	cmp	r2, #8
  return (uint8_t)(READ_REG(SPIx->DR));
 804c3da:	f8db 200c 	ldr.w	r2, [fp, #12]
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 804c3de:	e9d4 3115 	ldrd	r3, r1, [r4, #84]	; 0x54
 804c3e2:	d151      	bne.n	804c488 <spi_stm32_transceive+0x408>
 804c3e4:	b10b      	cbz	r3, 804c3ea <spi_stm32_transceive+0x36a>
 804c3e6:	b101      	cbz	r1, 804c3ea <spi_stm32_transceive+0x36a>
 804c3e8:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 804c3ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 804c3ec:	b18b      	cbz	r3, 804c412 <spi_stm32_transceive+0x392>
	ctx->rx_len -= len;
 804c3ee:	3b01      	subs	r3, #1
 804c3f0:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
 804c3f2:	2b00      	cmp	r3, #0
 804c3f4:	f040 80ab 	bne.w	804c54e <spi_stm32_transceive+0x4ce>
		++ctx->current_rx;
 804c3f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 804c3fa:	3308      	adds	r3, #8
 804c3fc:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->rx_count;
 804c3fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 804c400:	3b01      	subs	r3, #1
 804c402:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_rx,
 804c404:	2301      	movs	r3, #1
 804c406:	4632      	mov	r2, r6
 804c408:	4651      	mov	r1, sl
 804c40a:	4648      	mov	r0, r9
 804c40c:	f00b ff64 	bl	80582d8 <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
 804c410:	6560      	str	r0, [r4, #84]	; 0x54
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 804c412:	f8db 2008 	ldr.w	r2, [fp, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 804c416:	f412 72b8 	ands.w	r2, r2, #368	; 0x170
 804c41a:	f000 80a5 	beq.w	804c568 <spi_stm32_transceive+0x4e8>
		LOG_ERR("%s: err=%d", __func__,
 804c41e:	4b75      	ldr	r3, [pc, #468]	; (804c5f4 <spi_stm32_transceive+0x574>)
 804c420:	6819      	ldr	r1, [r3, #0]
 804c422:	0749      	lsls	r1, r1, #29
 804c424:	d009      	beq.n	804c43a <spi_stm32_transceive+0x3ba>
 804c426:	4974      	ldr	r1, [pc, #464]	; (804c5f8 <spi_stm32_transceive+0x578>)
 804c428:	4874      	ldr	r0, [pc, #464]	; (804c5fc <spi_stm32_transceive+0x57c>)
 804c42a:	1a5b      	subs	r3, r3, r1
 804c42c:	4974      	ldr	r1, [pc, #464]	; (804c600 <spi_stm32_transceive+0x580>)
 804c42e:	089b      	lsrs	r3, r3, #2
 804c430:	019b      	lsls	r3, r3, #6
 804c432:	f043 0301 	orr.w	r3, r3, #1
 804c436:	f009 fdfc 	bl	8056032 <log_2>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 804c43a:	f8db 3008 	ldr.w	r3, [fp, #8]
 804c43e:	065b      	lsls	r3, r3, #25
 804c440:	d507      	bpl.n	804c452 <spi_stm32_transceive+0x3d2>
  tmpreg = SPIx->DR;
 804c442:	f8db 300c 	ldr.w	r3, [fp, #12]
 804c446:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 804c448:	9b05      	ldr	r3, [sp, #20]
  tmpreg = SPIx->SR;
 804c44a:	f8db 3008 	ldr.w	r3, [fp, #8]
 804c44e:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 804c450:	9b05      	ldr	r3, [sp, #20]
		return -EIO;
 804c452:	f06f 0604 	mvn.w	r6, #4
 804c456:	e090      	b.n	804c57a <spi_stm32_transceive+0x4fa>
	return !!(ctx->tx_len);
 804c458:	6d23      	ldr	r3, [r4, #80]	; 0x50
	return !!(ctx->tx_buf && ctx->tx_len);
 804c45a:	b10a      	cbz	r2, 804c460 <spi_stm32_transceive+0x3e0>
 804c45c:	b103      	cbz	r3, 804c460 <spi_stm32_transceive+0x3e0>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 804c45e:	8811      	ldrh	r1, [r2, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 804c460:	f8ab 100c 	strh.w	r1, [fp, #12]
	if (!ctx->tx_len) {
 804c464:	2b00      	cmp	r3, #0
 804c466:	d0af      	beq.n	804c3c8 <spi_stm32_transceive+0x348>
	ctx->tx_len -= len;
 804c468:	3b01      	subs	r3, #1
 804c46a:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->tx_len) {
 804c46c:	b93b      	cbnz	r3, 804c47e <spi_stm32_transceive+0x3fe>
		++ctx->current_tx;
 804c46e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 804c470:	3308      	adds	r3, #8
 804c472:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->tx_count;
 804c474:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804c476:	3b01      	subs	r3, #1
 804c478:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_tx,
 804c47a:	2302      	movs	r3, #2
 804c47c:	e75d      	b.n	804c33a <spi_stm32_transceive+0x2ba>
	} else if (ctx->tx_buf) {
 804c47e:	2a00      	cmp	r2, #0
 804c480:	d0a2      	beq.n	804c3c8 <spi_stm32_transceive+0x348>
		ctx->tx_buf += dfs * len;
 804c482:	3202      	adds	r2, #2
 804c484:	64e2      	str	r2, [r4, #76]	; 0x4c
 804c486:	e79f      	b.n	804c3c8 <spi_stm32_transceive+0x348>
	return !!(ctx->rx_buf && ctx->rx_len);
 804c488:	b10b      	cbz	r3, 804c48e <spi_stm32_transceive+0x40e>
 804c48a:	b101      	cbz	r1, 804c48e <spi_stm32_transceive+0x40e>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 804c48c:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 804c48e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 804c490:	2b00      	cmp	r3, #0
 804c492:	d0be      	beq.n	804c412 <spi_stm32_transceive+0x392>
	ctx->rx_len -= len;
 804c494:	3b01      	subs	r3, #1
 804c496:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
 804c498:	2b00      	cmp	r3, #0
 804c49a:	d15f      	bne.n	804c55c <spi_stm32_transceive+0x4dc>
		++ctx->current_rx;
 804c49c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 804c49e:	3308      	adds	r3, #8
 804c4a0:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->rx_count;
 804c4a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 804c4a4:	3b01      	subs	r3, #1
 804c4a6:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_rx,
 804c4a8:	2302      	movs	r3, #2
 804c4aa:	e7ac      	b.n	804c406 <spi_stm32_transceive+0x386>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 804c4ac:	f8db 2008 	ldr.w	r2, [fp, #8]
 804c4b0:	0792      	lsls	r2, r2, #30
 804c4b2:	d545      	bpl.n	804c540 <spi_stm32_transceive+0x4c0>
	return !!(ctx->tx_len);
 804c4b4:	6d21      	ldr	r1, [r4, #80]	; 0x50
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 804c4b6:	2900      	cmp	r1, #0
 804c4b8:	d042      	beq.n	804c540 <spi_stm32_transceive+0x4c0>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 804c4ba:	f3c3 1345 	ubfx	r3, r3, #5, #6
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 804c4be:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 804c4c0:	2b08      	cmp	r3, #8
 804c4c2:	d12c      	bne.n	804c51e <spi_stm32_transceive+0x49e>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 804c4c4:	7813      	ldrb	r3, [r2, #0]
  *spidr = TxData;
 804c4c6:	f88b 300c 	strb.w	r3, [fp, #12]
	if (!ctx->tx_len) {
 804c4ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 804c4cc:	b1a3      	cbz	r3, 804c4f8 <spi_stm32_transceive+0x478>
	ctx->tx_len -= len;
 804c4ce:	3b01      	subs	r3, #1
 804c4d0:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->tx_len) {
 804c4d2:	b96b      	cbnz	r3, 804c4f0 <spi_stm32_transceive+0x470>
		++ctx->current_tx;
 804c4d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 804c4d6:	3308      	adds	r3, #8
 804c4d8:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->tx_count;
 804c4da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804c4dc:	3b01      	subs	r3, #1
 804c4de:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_tx,
 804c4e0:	2301      	movs	r3, #1
 804c4e2:	4642      	mov	r2, r8
 804c4e4:	4639      	mov	r1, r7
 804c4e6:	4628      	mov	r0, r5
 804c4e8:	f00b fef6 	bl	80582d8 <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 804c4ec:	64e0      	str	r0, [r4, #76]	; 0x4c
 804c4ee:	e003      	b.n	804c4f8 <spi_stm32_transceive+0x478>
	} else if (ctx->tx_buf) {
 804c4f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 804c4f2:	b10b      	cbz	r3, 804c4f8 <spi_stm32_transceive+0x478>
		ctx->tx_buf += dfs * len;
 804c4f4:	3301      	adds	r3, #1
 804c4f6:	64e3      	str	r3, [r4, #76]	; 0x4c
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 804c4f8:	f8db 3008 	ldr.w	r3, [fp, #8]
	if (ll_func_rx_is_not_empty(spi) &&
 804c4fc:	07d8      	lsls	r0, r3, #31
 804c4fe:	d588      	bpl.n	804c412 <spi_stm32_transceive+0x392>
	return !!(ctx->rx_buf && ctx->rx_len);
 804c500:	6d63      	ldr	r3, [r4, #84]	; 0x54
 804c502:	2b00      	cmp	r3, #0
 804c504:	d085      	beq.n	804c412 <spi_stm32_transceive+0x392>
 804c506:	6da2      	ldr	r2, [r4, #88]	; 0x58
 804c508:	2a00      	cmp	r2, #0
 804c50a:	d082      	beq.n	804c412 <spi_stm32_transceive+0x392>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 804c50c:	6822      	ldr	r2, [r4, #0]
 804c50e:	8892      	ldrh	r2, [r2, #4]
 804c510:	f3c2 1245 	ubfx	r2, r2, #5, #6
 804c514:	2a08      	cmp	r2, #8
  return (uint8_t)(READ_REG(SPIx->DR));
 804c516:	f8db 200c 	ldr.w	r2, [fp, #12]
 804c51a:	d1b7      	bne.n	804c48c <spi_stm32_transceive+0x40c>
 804c51c:	e764      	b.n	804c3e8 <spi_stm32_transceive+0x368>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 804c51e:	8813      	ldrh	r3, [r2, #0]
	ctx->tx_len -= len;
 804c520:	3901      	subs	r1, #1
  *spidr = TxData;
 804c522:	f8ab 300c 	strh.w	r3, [fp, #12]
 804c526:	6521      	str	r1, [r4, #80]	; 0x50
	if (!ctx->tx_len) {
 804c528:	b939      	cbnz	r1, 804c53a <spi_stm32_transceive+0x4ba>
		++ctx->current_tx;
 804c52a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 804c52c:	3308      	adds	r3, #8
 804c52e:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->tx_count;
 804c530:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804c532:	3b01      	subs	r3, #1
 804c534:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_tx,
 804c536:	2302      	movs	r3, #2
 804c538:	e7d3      	b.n	804c4e2 <spi_stm32_transceive+0x462>
		ctx->tx_buf += dfs * len;
 804c53a:	3202      	adds	r2, #2
 804c53c:	64e2      	str	r2, [r4, #76]	; 0x4c
 804c53e:	e7db      	b.n	804c4f8 <spi_stm32_transceive+0x478>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 804c540:	f8db 3004 	ldr.w	r3, [fp, #4]
 804c544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 804c548:	f8cb 3004 	str.w	r3, [fp, #4]
    defined(CONFIG_SOC_SERIES_STM32H7X)
	LL_SPI_DisableIT_TXP(spi);
#else
	LL_SPI_DisableIT_TXE(spi);
#endif
}
 804c54c:	e7d4      	b.n	804c4f8 <spi_stm32_transceive+0x478>
	} else if (ctx->rx_buf) {
 804c54e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 804c550:	2b00      	cmp	r3, #0
 804c552:	f43f af5e 	beq.w	804c412 <spi_stm32_transceive+0x392>
		ctx->rx_buf += dfs * len;
 804c556:	3301      	adds	r3, #1
 804c558:	6563      	str	r3, [r4, #84]	; 0x54
 804c55a:	e75a      	b.n	804c412 <spi_stm32_transceive+0x392>
	} else if (ctx->rx_buf) {
 804c55c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 804c55e:	2b00      	cmp	r3, #0
 804c560:	f43f af57 	beq.w	804c412 <spi_stm32_transceive+0x392>
		ctx->rx_buf += dfs * len;
 804c564:	3302      	adds	r3, #2
 804c566:	e7f7      	b.n	804c558 <spi_stm32_transceive+0x4d8>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 804c568:	6d23      	ldr	r3, [r4, #80]	; 0x50
 804c56a:	2b00      	cmp	r3, #0
 804c56c:	f47f aec0 	bne.w	804c2f0 <spi_stm32_transceive+0x270>
	} while (!ret && spi_stm32_transfer_ongoing(data));
 804c570:	6da3      	ldr	r3, [r4, #88]	; 0x58
 804c572:	2b00      	cmp	r3, #0
 804c574:	f47f aebc 	bne.w	804c2f0 <spi_stm32_transceive+0x270>
		ret = spi_stm32_shift_frames(spi, data);
 804c578:	461e      	mov	r6, r3
	SPI_TypeDef *spi = cfg->spi;
 804c57a:	9b02      	ldr	r3, [sp, #8]
	_spi_context_cs_control(ctx, on, false);
 804c57c:	2200      	movs	r2, #0
 804c57e:	685b      	ldr	r3, [r3, #4]
 804c580:	4611      	mov	r1, r2
 804c582:	689d      	ldr	r5, [r3, #8]
 804c584:	9b02      	ldr	r3, [sp, #8]
 804c586:	6918      	ldr	r0, [r3, #16]
 804c588:	f00b feca 	bl	8058320 <_spi_context_cs_control>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 804c58c:	68ab      	ldr	r3, [r5, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 804c58e:	07df      	lsls	r7, r3, #31
 804c590:	d417      	bmi.n	804c5c2 <spi_stm32_transceive+0x542>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 804c592:	682b      	ldr	r3, [r5, #0]
 804c594:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 804c598:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804c59c:	d102      	bne.n	804c5a4 <spi_stm32_transceive+0x524>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 804c59e:	68ab      	ldr	r3, [r5, #8]
 804c5a0:	0618      	lsls	r0, r3, #24
 804c5a2:	d4fc      	bmi.n	804c59e <spi_stm32_transceive+0x51e>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 804c5a4:	68ab      	ldr	r3, [r5, #8]
 804c5a6:	0699      	lsls	r1, r3, #26
 804c5a8:	d506      	bpl.n	804c5b8 <spi_stm32_transceive+0x538>
  tmpreg_sr = SPIx->SR;
 804c5aa:	68ab      	ldr	r3, [r5, #8]
 804c5ac:	9306      	str	r3, [sp, #24]
  (void) tmpreg_sr;
 804c5ae:	9b06      	ldr	r3, [sp, #24]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 804c5b0:	682b      	ldr	r3, [r5, #0]
 804c5b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 804c5b6:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 804c5b8:	682b      	ldr	r3, [r5, #0]
 804c5ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 804c5be:	602b      	str	r3, [r5, #0]
}
 804c5c0:	e5ac      	b.n	804c11c <spi_stm32_transceive+0x9c>
  return (uint8_t)(READ_REG(SPIx->DR));
 804c5c2:	68eb      	ldr	r3, [r5, #12]
 804c5c4:	e7e2      	b.n	804c58c <spi_stm32_transceive+0x50c>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 804c5c6:	682a      	ldr	r2, [r5, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 804c5c8:	a90e      	add	r1, sp, #56	; 0x38
 804c5ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804c5ce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 804c5d2:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 804c5d4:	682a      	ldr	r2, [r5, #0]
 804c5d6:	f853 3c24 	ldr.w	r3, [r3, #-36]
 804c5da:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 804c5de:	4313      	orrs	r3, r2
 804c5e0:	602b      	str	r3, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 804c5e2:	88bb      	ldrh	r3, [r7, #4]
 804c5e4:	079a      	lsls	r2, r3, #30
 804c5e6:	f53f add8 	bmi.w	804c19a <spi_stm32_transceive+0x11a>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 804c5ea:	682a      	ldr	r2, [r5, #0]
 804c5ec:	f022 0202 	bic.w	r2, r2, #2
 804c5f0:	e5d6      	b.n	804c1a0 <spi_stm32_transceive+0x120>
 804c5f2:	bf00      	nop
 804c5f4:	20020938 	.word	0x20020938
 804c5f8:	200208c8 	.word	0x200208c8
 804c5fc:	080625f1 	.word	0x080625f1
 804c600:	08062627 	.word	0x08062627

0804c604 <can_work_isr_put>:
		can_work_buffer_free_next(&can_work->buf);
	}
}

static void can_work_isr_put(struct zcan_frame *frame, void *arg)
{
 804c604:	b4f0      	push	{r4, r5, r6, r7}
	uint16_t next_head = WORK_BUF_MOD_SIZE(buffer->head + 1);
 804c606:	f8b1 4054 	ldrh.w	r4, [r1, #84]	; 0x54
	if (buffer->head == WORK_BUF_FULL) {
 804c60a:	f64f 77ff 	movw	r7, #65535	; 0xffff
{
 804c60e:	460d      	mov	r5, r1
	uint16_t next_head = WORK_BUF_MOD_SIZE(buffer->head + 1);
 804c610:	1c66      	adds	r6, r4, #1
	if (buffer->head == WORK_BUF_FULL) {
 804c612:	42bc      	cmp	r4, r7
	uint16_t next_head = WORK_BUF_MOD_SIZE(buffer->head + 1);
 804c614:	f006 0603 	and.w	r6, r6, #3
	if (buffer->head == WORK_BUF_FULL) {
 804c618:	d110      	bne.n	804c63c <can_work_isr_put+0x38>
	struct zcan_work *work = (struct zcan_work *)arg;
	int ret;

	ret = can_work_buffer_put(frame, &work->buf);
	if (ret) {
		LOG_ERR("Workq buffer overflow. Msg ID: 0x%x", frame->id);
 804c61a:	4a12      	ldr	r2, [pc, #72]	; (804c664 <can_work_isr_put+0x60>)
 804c61c:	6813      	ldr	r3, [r2, #0]
 804c61e:	075b      	lsls	r3, r3, #29
 804c620:	d01e      	beq.n	804c660 <can_work_isr_put+0x5c>
 804c622:	4b11      	ldr	r3, [pc, #68]	; (804c668 <can_work_isr_put+0x64>)
 804c624:	6801      	ldr	r1, [r0, #0]
 804c626:	1ad2      	subs	r2, r2, r3
 804c628:	4810      	ldr	r0, [pc, #64]	; (804c66c <can_work_isr_put+0x68>)
 804c62a:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 804c62e:	0892      	lsrs	r2, r2, #2
 804c630:	0192      	lsls	r2, r2, #6
		return;
	}

	k_work_submit_to_queue(work->work_queue, &work->work_item);
}
 804c632:	bcf0      	pop	{r4, r5, r6, r7}
		LOG_ERR("Workq buffer overflow. Msg ID: 0x%x", frame->id);
 804c634:	f042 0201 	orr.w	r2, r2, #1
 804c638:	f009 bce4 	b.w	8056004 <log_1>
	buffer->buf[buffer->head] = *frame;
 804c63c:	eb01 1404 	add.w	r4, r1, r4, lsl #4
 804c640:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 804c642:	3414      	adds	r4, #20
 804c644:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (next_head == buffer->tail) {
 804c648:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
	k_work_submit_to_queue(work->work_queue, &work->work_item);
 804c64c:	4629      	mov	r1, r5
 804c64e:	6928      	ldr	r0, [r5, #16]
		buffer->head = WORK_BUF_FULL;
 804c650:	42b3      	cmp	r3, r6
 804c652:	bf08      	it	eq
 804c654:	463e      	moveq	r6, r7
 804c656:	f8a5 6054 	strh.w	r6, [r5, #84]	; 0x54
}
 804c65a:	bcf0      	pop	{r4, r5, r6, r7}
	k_work_submit_to_queue(work->work_queue, &work->work_item);
 804c65c:	f00d bf16 	b.w	805a48c <k_work_submit_to_queue>
}
 804c660:	bcf0      	pop	{r4, r5, r6, r7}
 804c662:	4770      	bx	lr
 804c664:	200208e0 	.word	0x200208e0
 804c668:	200208c8 	.word	0x200208c8
 804c66c:	08062639 	.word	0x08062639

0804c670 <can_attach_workq>:

int can_attach_workq(const struct device *dev, struct k_work_q *work_q,
			    struct zcan_work *work,
			    can_rx_callback_t callback, void *callback_arg,
			    const struct zcan_filter *filter)
{
 804c670:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 804c674:	4614      	mov	r4, r2
	const struct can_driver_api *api = dev->api;
 804c676:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
 804c67a:	461e      	mov	r6, r3
 804c67c:	4605      	mov	r5, r0
 804c67e:	460f      	mov	r7, r1

	k_work_init(&work->work_item, can_work_handler);
 804c680:	4610      	mov	r0, r2
 804c682:	490b      	ldr	r1, [pc, #44]	; (804c6b0 <can_attach_workq+0x40>)
{
 804c684:	e9dd 930a 	ldrd	r9, r3, [sp, #40]	; 0x28
 804c688:	9301      	str	r3, [sp, #4]
	k_work_init(&work->work_item, can_work_handler);
 804c68a:	f00d fee2 	bl	805a452 <k_work_init>
	buffer->head = 0;
 804c68e:	2200      	movs	r2, #0
	work->work_queue = work_q;
	work->cb = callback;
	work->cb_arg = callback_arg;
	can_work_buffer_init(&work->buf);

	return api->attach_isr(dev, can_work_isr_put, work, filter);
 804c690:	9b01      	ldr	r3, [sp, #4]
 804c692:	4908      	ldr	r1, [pc, #32]	; (804c6b4 <can_attach_workq+0x44>)
 804c694:	4628      	mov	r0, r5
	buffer->head = 0;
 804c696:	6562      	str	r2, [r4, #84]	; 0x54
	return api->attach_isr(dev, can_work_isr_put, work, filter);
 804c698:	4622      	mov	r2, r4
	work->work_queue = work_q;
 804c69a:	6127      	str	r7, [r4, #16]
	work->cb_arg = callback_arg;
 804c69c:	e9c4 6916 	strd	r6, r9, [r4, #88]	; 0x58
	return api->attach_isr(dev, can_work_isr_put, work, filter);
 804c6a0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 804c6a4:	46b4      	mov	ip, r6
}
 804c6a6:	b003      	add	sp, #12
 804c6a8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return api->attach_isr(dev, can_work_isr_put, work, filter);
 804c6ac:	4760      	bx	ip
 804c6ae:	bf00      	nop
 804c6b0:	08058397 	.word	0x08058397
 804c6b4:	0804c605 	.word	0x0804c605

0804c6b8 <can_calc_timing>:
	return sp_err_min == UINT16_MAX ? -EINVAL : (int)sp_err_min;
}

int can_calc_timing(const struct device *dev, struct can_timing *res,
		    uint32_t bitrate, uint16_t sample_pnt)
{
 804c6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804c6bc:	4689      	mov	r9, r1
 804c6be:	b085      	sub	sp, #20
 804c6c0:	4692      	mov	sl, r2
 804c6c2:	4698      	mov	r8, r3
	const struct can_driver_api *api = dev->api;
 804c6c4:	6887      	ldr	r7, [r0, #8]
					    uint32_t *rate)
{
	const struct can_driver_api *api =
		(const struct can_driver_api *)dev->api;

	return api->get_core_clock(dev, rate);
 804c6c6:	6883      	ldr	r3, [r0, #8]
 804c6c8:	a903      	add	r1, sp, #12
 804c6ca:	69db      	ldr	r3, [r3, #28]
 804c6cc:	4798      	blx	r3
	uint32_t core_clock;
	int ret;

	ret = can_get_core_clock(dev, &core_clock);
	if (ret != 0) {
 804c6ce:	b968      	cbnz	r0, 804c6ec <can_calc_timing+0x34>
		return ret;
	}

	return can_calc_timing_int(core_clock, res, &api->timing_min,
 804c6d0:	9b03      	ldr	r3, [sp, #12]
	if (sp >= 1000 ||
 804c6d2:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
	uint32_t ts = max->prop_seg + max->phase_seg1 + max->phase_seg2 +
 804c6d6:	8dbd      	ldrh	r5, [r7, #44]	; 0x2c
	return can_calc_timing_int(core_clock, res, &api->timing_min,
 804c6d8:	9300      	str	r3, [sp, #0]
	uint32_t ts = max->prop_seg + max->phase_seg1 + max->phase_seg2 +
 804c6da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 804c6dc:	441d      	add	r5, r3
 804c6de:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 804c6e0:	f105 0501 	add.w	r5, r5, #1
 804c6e4:	441d      	add	r5, r3
	if (sp >= 1000 ||
 804c6e6:	d304      	bcc.n	804c6f2 <can_calc_timing+0x3a>
		return -EINVAL;
 804c6e8:	f06f 0015 	mvn.w	r0, #21
				   &api->timing_max, bitrate, sample_pnt);
}
 804c6ec:	b005      	add	sp, #20
 804c6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    (!IS_ENABLED(CONFIG_CAN_FD_MODE) && bitrate > 1000000) ||
 804c6f2:	4b3c      	ldr	r3, [pc, #240]	; (804c7e4 <can_calc_timing+0x12c>)
 804c6f4:	459a      	cmp	sl, r3
 804c6f6:	d8f7      	bhi.n	804c6e8 <can_calc_timing+0x30>
	for (int prescaler = MAX(core_clock / (ts * bitrate), 1);
 804c6f8:	fb05 f50a 	mul.w	r5, r5, sl
 804c6fc:	9b00      	ldr	r3, [sp, #0]
	uint16_t sp_err_min = UINT16_MAX;
 804c6fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
	for (int prescaler = MAX(core_clock / (ts * bitrate), 1);
 804c702:	fbb3 f5f5 	udiv	r5, r3, r5
 804c706:	2d01      	cmp	r5, #1
 804c708:	bf38      	it	cc
 804c70a:	2501      	movcc	r5, #1
 804c70c:	fb05 f10a 	mul.w	r1, r5, sl
	     prescaler <= max->prescaler; ++prescaler) {
 804c710:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
	for (int prescaler = MAX(core_clock / (ts * bitrate), 1);
 804c712:	429d      	cmp	r5, r3
 804c714:	dd04      	ble.n	804c720 <can_calc_timing+0x68>
	return sp_err_min == UINT16_MAX ? -EINVAL : (int)sp_err_min;
 804c716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 804c71a:	4298      	cmp	r0, r3
 804c71c:	d1e6      	bne.n	804c6ec <can_calc_timing+0x34>
 804c71e:	e7e3      	b.n	804c6e8 <can_calc_timing+0x30>
		if (core_clock % (prescaler * bitrate)) {
 804c720:	9b00      	ldr	r3, [sp, #0]
 804c722:	fbb3 fef1 	udiv	lr, r3, r1
 804c726:	fb01 331e 	mls	r3, r1, lr, r3
 804c72a:	bb33      	cbnz	r3, 804c77a <can_calc_timing+0xc2>
	ts2 = ts - (ts * sp) / 1000;
 804c72c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 804c730:	fb08 f60e 	mul.w	r6, r8, lr
	uint16_t ts1_max = max->phase_seg1 + max->prop_seg;
 804c734:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 804c736:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 804c738:	9301      	str	r3, [sp, #4]
 804c73a:	441c      	add	r4, r3
	ts2 = ts - (ts * sp) / 1000;
 804c73c:	fa1f f38e 	uxth.w	r3, lr
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
 804c740:	f8b7 b026 	ldrh.w	fp, [r7, #38]	; 0x26
	uint16_t ts1_max = max->phase_seg1 + max->prop_seg;
 804c744:	b2a4      	uxth	r4, r4
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
 804c746:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	ts2 = ts - (ts * sp) / 1000;
 804c748:	fbb6 f6fc 	udiv	r6, r6, ip
 804c74c:	1b9e      	subs	r6, r3, r6
 804c74e:	fa1f fc86 	uxth.w	ip, r6
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
 804c752:	45dc      	cmp	ip, fp
 804c754:	d914      	bls.n	804c780 <can_calc_timing+0xc8>
 804c756:	8e3e      	ldrh	r6, [r7, #48]	; 0x30
 804c758:	4566      	cmp	r6, ip
 804c75a:	bf28      	it	cs
 804c75c:	4666      	movcs	r6, ip
	ts1 = ts - CAN_SYNC_SEG - ts2;
 804c75e:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 804c762:	ebac 0c06 	sub.w	ip, ip, r6
 804c766:	fa1f fc8c 	uxth.w	ip, ip
	if (ts1 > ts1_max) {
 804c76a:	4564      	cmp	r4, ip
 804c76c:	d20a      	bcs.n	804c784 <can_calc_timing+0xcc>
		ts2 = ts - CAN_SYNC_SEG - ts1;
 804c76e:	43e6      	mvns	r6, r4
 804c770:	441e      	add	r6, r3
		if (ts2 > max->phase_seg2) {
 804c772:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
		ts2 = ts - CAN_SYNC_SEG - ts1;
 804c774:	b2b6      	uxth	r6, r6
		if (ts2 > max->phase_seg2) {
 804c776:	42b3      	cmp	r3, r6
 804c778:	d20d      	bcs.n	804c796 <can_calc_timing+0xde>
	     prescaler <= max->prescaler; ++prescaler) {
 804c77a:	3501      	adds	r5, #1
 804c77c:	4451      	add	r1, sl
 804c77e:	e7c7      	b.n	804c710 <can_calc_timing+0x58>
 804c780:	465e      	mov	r6, fp
 804c782:	e7ec      	b.n	804c75e <can_calc_timing+0xa6>
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
 804c784:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 804c786:	4414      	add	r4, r2
 804c788:	b2a4      	uxth	r4, r4
	} else if (ts1 < ts1_min) {
 804c78a:	4564      	cmp	r4, ip
 804c78c:	d928      	bls.n	804c7e0 <can_calc_timing+0x128>
		ts2 = ts - ts1;
 804c78e:	1b1b      	subs	r3, r3, r4
 804c790:	b29e      	uxth	r6, r3
		if (ts2 < min->phase_seg2) {
 804c792:	45b3      	cmp	fp, r6
 804c794:	d8f1      	bhi.n	804c77a <can_calc_timing+0xc2>
	res->prop_seg = CLAMP(ts1 / 2, min->prop_seg, max->prop_seg);
 804c796:	ebb2 0f54 	cmp.w	r2, r4, lsr #1
 804c79a:	ea4f 0354 	mov.w	r3, r4, lsr #1
 804c79e:	d203      	bcs.n	804c7a8 <can_calc_timing+0xf0>
 804c7a0:	9a01      	ldr	r2, [sp, #4]
 804c7a2:	429a      	cmp	r2, r3
 804c7a4:	bf28      	it	cs
 804c7a6:	461a      	movcs	r2, r3
	sp_calc = (CAN_SYNC_SEG + ts1) * 1000 / ts;
 804c7a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804c7ac:	fb04 3303 	mla	r3, r4, r3, r3
 804c7b0:	fbb3 f3fe 	udiv	r3, r3, lr
	return sp_calc > sp ? sp_calc - sp : sp - sp_calc;
 804c7b4:	4598      	cmp	r8, r3
 804c7b6:	bf34      	ite	cc
 804c7b8:	eba3 0308 	subcc.w	r3, r3, r8
 804c7bc:	eba8 0303 	subcs.w	r3, r8, r3
		if (sp_err < sp_err_min) {
 804c7c0:	4298      	cmp	r0, r3
 804c7c2:	d9da      	bls.n	804c77a <can_calc_timing+0xc2>
			res->prop_seg = tmp_res.prop_seg;
 804c7c4:	f8a9 2002 	strh.w	r2, [r9, #2]
	res->phase_seg1 = ts1 - res->prop_seg;
 804c7c8:	1aa2      	subs	r2, r4, r2
			sp_err_min = sp_err;
 804c7ca:	b298      	uxth	r0, r3
			res->phase_seg2 = tmp_res.phase_seg2;
 804c7cc:	f8a9 6006 	strh.w	r6, [r9, #6]
			res->phase_seg1 = tmp_res.phase_seg1;
 804c7d0:	f8a9 2004 	strh.w	r2, [r9, #4]
			res->prescaler = (uint16_t)prescaler;
 804c7d4:	f8a9 5008 	strh.w	r5, [r9, #8]
			if (sp_err == 0) {
 804c7d8:	2b00      	cmp	r3, #0
 804c7da:	d1ce      	bne.n	804c77a <can_calc_timing+0xc2>
 804c7dc:	4618      	mov	r0, r3
	return can_calc_timing_int(core_clock, res, &api->timing_min,
 804c7de:	e785      	b.n	804c6ec <can_calc_timing+0x34>
 804c7e0:	4664      	mov	r4, ip
 804c7e2:	e7d8      	b.n	804c796 <can_calc_timing+0xde>
 804c7e4:	000f4240 	.word	0x000f4240

0804c7e8 <can_stm32_rx_isr>:
	const struct can_stm32_config *cfg;
	CAN_TypeDef *can;

	data = DEV_DATA(dev);
	cfg = DEV_CFG(dev);
	can = cfg->can;
 804c7e8:	6843      	ldr	r3, [r0, #4]
{
 804c7ea:	b530      	push	{r4, r5, lr}
	data = DEV_DATA(dev);
 804c7ec:	6905      	ldr	r5, [r0, #16]
{
 804c7ee:	b085      	sub	sp, #20
	can = cfg->can;
 804c7f0:	681c      	ldr	r4, [r3, #0]
	while (can->RF0R & CAN_RF0R_FMP0) {
 804c7f2:	68e3      	ldr	r3, [r4, #12]
 804c7f4:	0799      	lsls	r1, r3, #30
 804c7f6:	d111      	bne.n	804c81c <can_stm32_rx_isr+0x34>
	if (can->RF0R & CAN_RF0R_FOVR0) {
 804c7f8:	68e3      	ldr	r3, [r4, #12]
 804c7fa:	06da      	lsls	r2, r3, #27
 804c7fc:	d50c      	bpl.n	804c818 <can_stm32_rx_isr+0x30>
		LOG_ERR("RX FIFO Overflow");
 804c7fe:	4926      	ldr	r1, [pc, #152]	; (804c898 <can_stm32_rx_isr+0xb0>)
 804c800:	680b      	ldr	r3, [r1, #0]
 804c802:	075b      	lsls	r3, r3, #29
 804c804:	d008      	beq.n	804c818 <can_stm32_rx_isr+0x30>
 804c806:	4b25      	ldr	r3, [pc, #148]	; (804c89c <can_stm32_rx_isr+0xb4>)
 804c808:	4825      	ldr	r0, [pc, #148]	; (804c8a0 <can_stm32_rx_isr+0xb8>)
 804c80a:	1ac9      	subs	r1, r1, r3
 804c80c:	0889      	lsrs	r1, r1, #2
 804c80e:	0189      	lsls	r1, r1, #6
 804c810:	f041 0101 	orr.w	r1, r1, #1
 804c814:	f009 fbe7 	bl	8055fe6 <log_0>

	can_stm32_rx_isr_handler(can, data);
}
 804c818:	b005      	add	sp, #20
 804c81a:	bd30      	pop	{r4, r5, pc}
		filter_match_index = ((mbox->RDTR & CAN_RDT0R_FMI)
 804c81c:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
 804c820:	f3c1 2107 	ubfx	r1, r1, #8, #8
		if (filter_match_index >= CONFIG_CAN_MAX_FILTER) {
 804c824:	2904      	cmp	r1, #4
 804c826:	dce7      	bgt.n	804c7f8 <can_stm32_rx_isr+0x10>
	if (mbox->RIR & CAN_RI0R_IDE) {
 804c828:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		msg->id = mbox->RIR >> CAN_RI0R_EXID_Pos;
 804c82c:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
	if (mbox->RIR & CAN_RI0R_IDE) {
 804c830:	f013 0f04 	tst.w	r3, #4
 804c834:	9b00      	ldr	r3, [sp, #0]
		msg->id = mbox->RIR >> CAN_RI0R_EXID_Pos;
 804c836:	bf1b      	ittet	ne
 804c838:	08d2      	lsrne	r2, r2, #3
 804c83a:	f003 43c0 	andne.w	r3, r3, #1610612736	; 0x60000000
		msg->id =  mbox->RIR >> CAN_RI0R_STID_Pos;
 804c83e:	f003 43c0 	andeq.w	r3, r3, #1610612736	; 0x60000000
		msg->id = mbox->RIR >> CAN_RI0R_EXID_Pos;
 804c842:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
		msg->id =  mbox->RIR >> CAN_RI0R_STID_Pos;
 804c846:	bf0c      	ite	eq
 804c848:	ea43 5352 	orreq.w	r3, r3, r2, lsr #21
		msg->id = mbox->RIR >> CAN_RI0R_EXID_Pos;
 804c84c:	4313      	orrne	r3, r2
		msg->id =  mbox->RIR >> CAN_RI0R_STID_Pos;
 804c84e:	9300      	str	r3, [sp, #0]
	msg->rtr = mbox->RIR & CAN_RI0R_RTR ? CAN_REMOTEREQUEST : CAN_DATAFRAME;
 804c850:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 804c854:	f89d 2003 	ldrb.w	r2, [sp, #3]
 804c858:	f3c3 0340 	ubfx	r3, r3, #1, #1
 804c85c:	f363 1286 	bfi	r2, r3, #6, #1
	msg->dlc = mbox->RDTR & (CAN_RDT0R_DLC >> CAN_RDT0R_DLC_Pos);
 804c860:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 804c864:	f003 030f 	and.w	r3, r3, #15
	msg->rtr = mbox->RIR & CAN_RI0R_RTR ? CAN_REMOTEREQUEST : CAN_DATAFRAME;
 804c868:	f88d 2003 	strb.w	r2, [sp, #3]
	msg->dlc = mbox->RDTR & (CAN_RDT0R_DLC >> CAN_RDT0R_DLC_Pos);
 804c86c:	f88d 3004 	strb.w	r3, [sp, #4]
	msg->data_32[0] = mbox->RDLR;
 804c870:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 804c874:	9302      	str	r3, [sp, #8]
	msg->data_32[1] = mbox->RDHR;
 804c876:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 804c87a:	9303      	str	r3, [sp, #12]
		callback = data->rx_cb[filter_match_index];
 804c87c:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 804c880:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		if (callback) {
 804c884:	b11a      	cbz	r2, 804c88e <can_stm32_rx_isr+0xa6>
			callback(&msg, data->cb_arg[filter_match_index]);
 804c886:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 804c88a:	4668      	mov	r0, sp
 804c88c:	4790      	blx	r2
		can->RF0R |= CAN_RF0R_RFOM0;
 804c88e:	68e3      	ldr	r3, [r4, #12]
 804c890:	f043 0320 	orr.w	r3, r3, #32
 804c894:	60e3      	str	r3, [r4, #12]
 804c896:	e7ac      	b.n	804c7f2 <can_stm32_rx_isr+0xa>
 804c898:	200208e0 	.word	0x200208e0
 804c89c:	200208c8 	.word	0x200208c8
 804c8a0:	08062668 	.word	0x08062668

0804c8a4 <can_enter_init_mode>:

static int can_enter_init_mode(CAN_TypeDef *can)
{
	uint32_t start_time;

	can->MCR |= CAN_MCR_INRQ;
 804c8a4:	6803      	ldr	r3, [r0, #0]
 804c8a6:	f043 0301 	orr.w	r3, r3, #1
{
 804c8aa:	b570      	push	{r4, r5, r6, lr}
	can->MCR |= CAN_MCR_INRQ;
 804c8ac:	6003      	str	r3, [r0, #0]
{
 804c8ae:	4604      	mov	r4, r0
	start_time = k_cycle_get_32();

	while ((can->MSR & CAN_MSR_INAK) == 0U) {
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 804c8b0:	4e0a      	ldr	r6, [pc, #40]	; (804c8dc <can_enter_init_mode+0x38>)
 804c8b2:	f001 fe6d 	bl	804e590 <sys_clock_cycle_get_32>
 804c8b6:	4605      	mov	r5, r0
	while ((can->MSR & CAN_MSR_INAK) == 0U) {
 804c8b8:	6863      	ldr	r3, [r4, #4]
 804c8ba:	07db      	lsls	r3, r3, #31
 804c8bc:	d501      	bpl.n	804c8c2 <can_enter_init_mode+0x1e>
			can->MCR &= ~CAN_MCR_INRQ;
			return CAN_TIMEOUT;
		}
	}

	return 0;
 804c8be:	2000      	movs	r0, #0
 804c8c0:	e00a      	b.n	804c8d8 <can_enter_init_mode+0x34>
 804c8c2:	f001 fe65 	bl	804e590 <sys_clock_cycle_get_32>
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 804c8c6:	1b40      	subs	r0, r0, r5
 804c8c8:	42b0      	cmp	r0, r6
 804c8ca:	d9f5      	bls.n	804c8b8 <can_enter_init_mode+0x14>
			can->MCR &= ~CAN_MCR_INRQ;
 804c8cc:	6823      	ldr	r3, [r4, #0]
			return CAN_TIMEOUT;
 804c8ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			can->MCR &= ~CAN_MCR_INRQ;
 804c8d2:	f023 0301 	bic.w	r3, r3, #1
 804c8d6:	6023      	str	r3, [r4, #0]
}
 804c8d8:	bd70      	pop	{r4, r5, r6, pc}
 804c8da:	bf00      	nop
 804c8dc:	0020f580 	.word	0x0020f580

0804c8e0 <can_leave_init_mode>:

static int can_leave_init_mode(CAN_TypeDef *can)
{
	uint32_t start_time;

	can->MCR &= ~CAN_MCR_INRQ;
 804c8e0:	6803      	ldr	r3, [r0, #0]
 804c8e2:	f023 0301 	bic.w	r3, r3, #1
{
 804c8e6:	b570      	push	{r4, r5, r6, lr}
	can->MCR &= ~CAN_MCR_INRQ;
 804c8e8:	6003      	str	r3, [r0, #0]
{
 804c8ea:	4604      	mov	r4, r0
	start_time = k_cycle_get_32();

	while ((can->MSR & CAN_MSR_INAK) != 0U) {
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 804c8ec:	4e08      	ldr	r6, [pc, #32]	; (804c910 <can_leave_init_mode+0x30>)
 804c8ee:	f001 fe4f 	bl	804e590 <sys_clock_cycle_get_32>
 804c8f2:	4605      	mov	r5, r0
	while ((can->MSR & CAN_MSR_INAK) != 0U) {
 804c8f4:	6863      	ldr	r3, [r4, #4]
 804c8f6:	f013 0301 	ands.w	r3, r3, #1
 804c8fa:	d101      	bne.n	804c900 <can_leave_init_mode+0x20>
			return CAN_TIMEOUT;
		}
	}

	return 0;
 804c8fc:	4618      	mov	r0, r3
}
 804c8fe:	bd70      	pop	{r4, r5, r6, pc}
 804c900:	f001 fe46 	bl	804e590 <sys_clock_cycle_get_32>
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 804c904:	1b40      	subs	r0, r0, r5
 804c906:	42b0      	cmp	r0, r6
 804c908:	d9f4      	bls.n	804c8f4 <can_leave_init_mode+0x14>
			return CAN_TIMEOUT;
 804c90a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 804c90e:	e7f6      	b.n	804c8fe <can_leave_init_mode+0x1e>
 804c910:	0020f580 	.word	0x0020f580

0804c914 <can_stm32_set_timing>:
}

int can_stm32_set_timing(const struct device *dev,
			 const struct can_timing *timing,
			 const struct can_timing *timing_data)
{
 804c914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct can_stm32_config *cfg = DEV_CFG(dev);
	CAN_TypeDef *can = cfg->can;
 804c916:	6843      	ldr	r3, [r0, #4]
	struct can_stm32_data *data = DEV_DATA(dev);
	int ret = -EIO;

	ARG_UNUSED(timing_data);

	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 804c918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804c91c:	6904      	ldr	r4, [r0, #16]
{
 804c91e:	460e      	mov	r6, r1
	CAN_TypeDef *can = cfg->can;
 804c920:	681d      	ldr	r5, [r3, #0]
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 804c922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804c926:	4620      	mov	r0, r4
 804c928:	f00b fe29 	bl	805857e <k_mutex_lock.constprop.0.isra.0>
	ret = can_enter_init_mode(can);
 804c92c:	4628      	mov	r0, r5
 804c92e:	f7ff ffb9 	bl	804c8a4 <can_enter_init_mode>
	if (ret) {
 804c932:	4607      	mov	r7, r0
 804c934:	b188      	cbz	r0, 804c95a <can_stm32_set_timing+0x46>
		LOG_ERR("Failed to enter init mode");
 804c936:	4922      	ldr	r1, [pc, #136]	; (804c9c0 <can_stm32_set_timing+0xac>)
 804c938:	680b      	ldr	r3, [r1, #0]
 804c93a:	075a      	lsls	r2, r3, #29
 804c93c:	d008      	beq.n	804c950 <can_stm32_set_timing+0x3c>
 804c93e:	4b21      	ldr	r3, [pc, #132]	; (804c9c4 <can_stm32_set_timing+0xb0>)
 804c940:	4821      	ldr	r0, [pc, #132]	; (804c9c8 <can_stm32_set_timing+0xb4>)
 804c942:	1ac9      	subs	r1, r1, r3
 804c944:	0889      	lsrs	r1, r1, #2
 804c946:	0189      	lsls	r1, r1, #6
 804c948:	f041 0101 	orr.w	r1, r1, #1
			   (((timing->sjw - 1) << CAN_BTR_SJW_Pos) & CAN_BTR_SJW_Msk);
	}

	ret = can_leave_init_mode(can);
	if (ret) {
		LOG_ERR("Failed to leave init mode");
 804c94c:	f009 fb4b 	bl	8055fe6 <log_0>
	} else {
		ret = 0;
	}

done:
	k_mutex_unlock(&data->inst_mutex);
 804c950:	4620      	mov	r0, r4
 804c952:	f00b fe16 	bl	8058582 <k_mutex_unlock.isra.0>
	return ret;
}
 804c956:	4638      	mov	r0, r7
 804c958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	     (((timing->prescaler  - 1) << CAN_BTR_BRP_Pos) & CAN_BTR_BRP_Msk);
 804c95a:	8933      	ldrh	r3, [r6, #8]
	can->BTR = (can->BTR & ~(CAN_BTR_BRP_Msk | CAN_BTR_TS1_Msk | CAN_BTR_TS2_Msk)) |
 804c95c:	69e9      	ldr	r1, [r5, #28]
	     (((timing->prescaler  - 1) << CAN_BTR_BRP_Pos) & CAN_BTR_BRP_Msk);
 804c95e:	3b01      	subs	r3, #1
	can->BTR = (can->BTR & ~(CAN_BTR_BRP_Msk | CAN_BTR_TS1_Msk | CAN_BTR_TS2_Msk)) |
 804c960:	4a1a      	ldr	r2, [pc, #104]	; (804c9cc <can_stm32_set_timing+0xb8>)
	     (((timing->prescaler  - 1) << CAN_BTR_BRP_Pos) & CAN_BTR_BRP_Msk);
 804c962:	f3c3 0309 	ubfx	r3, r3, #0, #10
	can->BTR = (can->BTR & ~(CAN_BTR_BRP_Msk | CAN_BTR_TS1_Msk | CAN_BTR_TS2_Msk)) |
 804c966:	400a      	ands	r2, r1
	     (((timing->phase_seg2 - 1) << CAN_BTR_TS2_Pos) & CAN_BTR_TS2_Msk) |
 804c968:	4313      	orrs	r3, r2
	     (((timing->phase_seg1 - 1) << CAN_BTR_TS1_Pos) & CAN_BTR_TS1_Msk) |
 804c96a:	88b2      	ldrh	r2, [r6, #4]
 804c96c:	3a01      	subs	r2, #1
 804c96e:	0412      	lsls	r2, r2, #16
 804c970:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
	     (((timing->phase_seg2 - 1) << CAN_BTR_TS2_Pos) & CAN_BTR_TS2_Msk) |
 804c974:	4313      	orrs	r3, r2
 804c976:	88f2      	ldrh	r2, [r6, #6]
 804c978:	3a01      	subs	r2, #1
 804c97a:	0512      	lsls	r2, r2, #20
 804c97c:	f402 02e0 	and.w	r2, r2, #7340032	; 0x700000
 804c980:	4313      	orrs	r3, r2
	can->BTR = (can->BTR & ~(CAN_BTR_BRP_Msk | CAN_BTR_TS1_Msk | CAN_BTR_TS2_Msk)) |
 804c982:	61eb      	str	r3, [r5, #28]
	if (timing->sjw != CAN_SJW_NO_CHANGE) {
 804c984:	8833      	ldrh	r3, [r6, #0]
 804c986:	b143      	cbz	r3, 804c99a <can_stm32_set_timing+0x86>
			   (((timing->sjw - 1) << CAN_BTR_SJW_Pos) & CAN_BTR_SJW_Msk);
 804c988:	3b01      	subs	r3, #1
		can->BTR = (can->BTR & ~CAN_BTR_SJW_Msk) |
 804c98a:	69ea      	ldr	r2, [r5, #28]
			   (((timing->sjw - 1) << CAN_BTR_SJW_Pos) & CAN_BTR_SJW_Msk);
 804c98c:	061b      	lsls	r3, r3, #24
		can->BTR = (can->BTR & ~CAN_BTR_SJW_Msk) |
 804c98e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
			   (((timing->sjw - 1) << CAN_BTR_SJW_Pos) & CAN_BTR_SJW_Msk);
 804c992:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
		can->BTR = (can->BTR & ~CAN_BTR_SJW_Msk) |
 804c996:	4313      	orrs	r3, r2
 804c998:	61eb      	str	r3, [r5, #28]
	ret = can_leave_init_mode(can);
 804c99a:	4628      	mov	r0, r5
 804c99c:	f7ff ffa0 	bl	804c8e0 <can_leave_init_mode>
	if (ret) {
 804c9a0:	4607      	mov	r7, r0
 804c9a2:	2800      	cmp	r0, #0
 804c9a4:	d0d4      	beq.n	804c950 <can_stm32_set_timing+0x3c>
		LOG_ERR("Failed to leave init mode");
 804c9a6:	4906      	ldr	r1, [pc, #24]	; (804c9c0 <can_stm32_set_timing+0xac>)
 804c9a8:	680b      	ldr	r3, [r1, #0]
 804c9aa:	075b      	lsls	r3, r3, #29
 804c9ac:	d0d0      	beq.n	804c950 <can_stm32_set_timing+0x3c>
 804c9ae:	4b05      	ldr	r3, [pc, #20]	; (804c9c4 <can_stm32_set_timing+0xb0>)
 804c9b0:	4807      	ldr	r0, [pc, #28]	; (804c9d0 <can_stm32_set_timing+0xbc>)
 804c9b2:	1ac9      	subs	r1, r1, r3
 804c9b4:	0889      	lsrs	r1, r1, #2
 804c9b6:	0189      	lsls	r1, r1, #6
 804c9b8:	f041 0101 	orr.w	r1, r1, #1
 804c9bc:	e7c6      	b.n	804c94c <can_stm32_set_timing+0x38>
 804c9be:	bf00      	nop
 804c9c0:	200208e0 	.word	0x200208e0
 804c9c4:	200208c8 	.word	0x200208c8
 804c9c8:	08062679 	.word	0x08062679
 804c9cc:	ff80fc00 	.word	0xff80fc00
 804c9d0:	08062693 	.word	0x08062693

0804c9d4 <can_stm32_set_mode>:
	CAN_TypeDef *can = cfg->can;
 804c9d4:	6843      	ldr	r3, [r0, #4]
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 804c9d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
 804c9da:	b570      	push	{r4, r5, r6, lr}
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 804c9dc:	6905      	ldr	r5, [r0, #16]
{
 804c9de:	460e      	mov	r6, r1
	CAN_TypeDef *can = cfg->can;
 804c9e0:	681c      	ldr	r4, [r3, #0]
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 804c9e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804c9e6:	4628      	mov	r0, r5
 804c9e8:	f00b fdc9 	bl	805857e <k_mutex_lock.constprop.0.isra.0>
	ret = can_enter_init_mode(can);
 804c9ec:	4620      	mov	r0, r4
 804c9ee:	f7ff ff59 	bl	804c8a4 <can_enter_init_mode>
	if (ret) {
 804c9f2:	b318      	cbz	r0, 804ca3c <can_stm32_set_mode+0x68>
		LOG_ERR("Failed to enter init mode");
 804c9f4:	4921      	ldr	r1, [pc, #132]	; (804ca7c <can_stm32_set_mode+0xa8>)
 804c9f6:	680b      	ldr	r3, [r1, #0]
 804c9f8:	075a      	lsls	r2, r3, #29
 804c9fa:	d008      	beq.n	804ca0e <can_stm32_set_mode+0x3a>
 804c9fc:	4b20      	ldr	r3, [pc, #128]	; (804ca80 <can_stm32_set_mode+0xac>)
 804c9fe:	4821      	ldr	r0, [pc, #132]	; (804ca84 <can_stm32_set_mode+0xb0>)
 804ca00:	1ac9      	subs	r1, r1, r3
 804ca02:	0889      	lsrs	r1, r1, #2
 804ca04:	0189      	lsls	r1, r1, #6
 804ca06:	f041 0101 	orr.w	r1, r1, #1
 804ca0a:	f009 faec 	bl	8055fe6 <log_0>
	ret = can_leave_init_mode(can);
 804ca0e:	4620      	mov	r0, r4
 804ca10:	f7ff ff66 	bl	804c8e0 <can_leave_init_mode>
	if (ret) {
 804ca14:	4604      	mov	r4, r0
 804ca16:	b160      	cbz	r0, 804ca32 <can_stm32_set_mode+0x5e>
		LOG_ERR("Failed to leave init mode");
 804ca18:	4918      	ldr	r1, [pc, #96]	; (804ca7c <can_stm32_set_mode+0xa8>)
 804ca1a:	680b      	ldr	r3, [r1, #0]
 804ca1c:	075b      	lsls	r3, r3, #29
 804ca1e:	d008      	beq.n	804ca32 <can_stm32_set_mode+0x5e>
 804ca20:	4b17      	ldr	r3, [pc, #92]	; (804ca80 <can_stm32_set_mode+0xac>)
 804ca22:	4819      	ldr	r0, [pc, #100]	; (804ca88 <can_stm32_set_mode+0xb4>)
 804ca24:	1ac9      	subs	r1, r1, r3
 804ca26:	0889      	lsrs	r1, r1, #2
 804ca28:	0189      	lsls	r1, r1, #6
 804ca2a:	f041 0101 	orr.w	r1, r1, #1
 804ca2e:	f009 fada 	bl	8055fe6 <log_0>
	k_mutex_unlock(&data->inst_mutex);
 804ca32:	4628      	mov	r0, r5
 804ca34:	f00b fda5 	bl	8058582 <k_mutex_unlock.isra.0>
}
 804ca38:	4620      	mov	r0, r4
 804ca3a:	bd70      	pop	{r4, r5, r6, pc}
	switch (mode) {
 804ca3c:	2e03      	cmp	r6, #3
 804ca3e:	d8e6      	bhi.n	804ca0e <can_stm32_set_mode+0x3a>
 804ca40:	e8df f006 	tbb	[pc, r6]
 804ca44:	17070f02 	.word	0x17070f02
		can->BTR &= ~(CAN_BTR_LBKM | CAN_BTR_SILM);
 804ca48:	69e3      	ldr	r3, [r4, #28]
 804ca4a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
		can->BTR |= CAN_BTR_LBKM | CAN_BTR_SILM;
 804ca4e:	61e3      	str	r3, [r4, #28]
		break;
 804ca50:	e7dd      	b.n	804ca0e <can_stm32_set_mode+0x3a>
		can->BTR &= ~(CAN_BTR_SILM);
 804ca52:	69e3      	ldr	r3, [r4, #28]
 804ca54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 804ca58:	61e3      	str	r3, [r4, #28]
		can->BTR |= CAN_BTR_LBKM;
 804ca5a:	69e3      	ldr	r3, [r4, #28]
 804ca5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 804ca60:	e7f5      	b.n	804ca4e <can_stm32_set_mode+0x7a>
		can->BTR &= ~(CAN_BTR_LBKM);
 804ca62:	69e3      	ldr	r3, [r4, #28]
 804ca64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 804ca68:	61e3      	str	r3, [r4, #28]
		can->BTR |= CAN_BTR_SILM;
 804ca6a:	69e3      	ldr	r3, [r4, #28]
 804ca6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804ca70:	e7ed      	b.n	804ca4e <can_stm32_set_mode+0x7a>
		can->BTR |= CAN_BTR_LBKM | CAN_BTR_SILM;
 804ca72:	69e3      	ldr	r3, [r4, #28]
 804ca74:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 804ca78:	e7e9      	b.n	804ca4e <can_stm32_set_mode+0x7a>
 804ca7a:	bf00      	nop
 804ca7c:	200208e0 	.word	0x200208e0
 804ca80:	200208c8 	.word	0x200208c8
 804ca84:	08062679 	.word	0x08062679
 804ca88:	08062693 	.word	0x08062693

0804ca8c <can_stm32_send>:


int can_stm32_send(const struct device *dev, const struct zcan_frame *msg,
		   k_timeout_t timeout, can_tx_callback_t callback,
		   void *callback_arg)
{
 804ca8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804ca90:	460d      	mov	r5, r1
 804ca92:	4699      	mov	r9, r3
		    "standard" : "extended"
		    , msg->rtr == CAN_DATAFRAME ? "no" : "yes");

	__ASSERT(msg->dlc == 0U || msg->data != NULL, "Dataptr is null");

	if (msg->dlc > CAN_MAX_DLC) {
 804ca94:	7909      	ldrb	r1, [r1, #4]
{
 804ca96:	4690      	mov	r8, r2
	CAN_TypeDef *can = cfg->can;
 804ca98:	6843      	ldr	r3, [r0, #4]
	if (msg->dlc > CAN_MAX_DLC) {
 804ca9a:	2908      	cmp	r1, #8
{
 804ca9c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	CAN_TypeDef *can = cfg->can;
 804ca9e:	681c      	ldr	r4, [r3, #0]
	struct can_stm32_data *data = DEV_DATA(dev);
 804caa0:	6906      	ldr	r6, [r0, #16]
	uint32_t transmit_status_register = can->TSR;
 804caa2:	f8d4 a008 	ldr.w	sl, [r4, #8]
	if (msg->dlc > CAN_MAX_DLC) {
 804caa6:	d910      	bls.n	804caca <can_stm32_send+0x3e>
		LOG_ERR("DLC of %d exceeds maximum (%d)", msg->dlc, CAN_MAX_DLC);
 804caa8:	4b4e      	ldr	r3, [pc, #312]	; (804cbe4 <can_stm32_send+0x158>)
 804caaa:	681a      	ldr	r2, [r3, #0]
 804caac:	0750      	lsls	r0, r2, #29
 804caae:	d009      	beq.n	804cac4 <can_stm32_send+0x38>
 804cab0:	4a4d      	ldr	r2, [pc, #308]	; (804cbe8 <can_stm32_send+0x15c>)
 804cab2:	484e      	ldr	r0, [pc, #312]	; (804cbec <can_stm32_send+0x160>)
 804cab4:	1a9b      	subs	r3, r3, r2
 804cab6:	2208      	movs	r2, #8
 804cab8:	089b      	lsrs	r3, r3, #2
 804caba:	019b      	lsls	r3, r3, #6
 804cabc:	f043 0301 	orr.w	r3, r3, #1
 804cac0:	f009 fab7 	bl	8056032 <log_2>
		return CAN_TX_EINVAL;
 804cac4:	f06f 0015 	mvn.w	r0, #21
 804cac8:	e060      	b.n	804cb8c <can_stm32_send+0x100>
	}

	if (can->ESR & CAN_ESR_BOFF) {
 804caca:	69a3      	ldr	r3, [r4, #24]
 804cacc:	075a      	lsls	r2, r3, #29
 804cace:	d479      	bmi.n	804cbc4 <can_stm32_send+0x138>

	k_mutex_lock(&data->inst_mutex, K_FOREVER);
	while (!(transmit_status_register & CAN_TSR_TME)) {
		k_mutex_unlock(&data->inst_mutex);
		LOG_DBG("Transmit buffer full");
		if (k_sem_take(&data->tx_int_sem, timeout)) {
 804cad0:	f106 0b14 	add.w	fp, r6, #20
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 804cad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804cad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804cadc:	4630      	mov	r0, r6
 804cade:	f00b fd4e 	bl	805857e <k_mutex_lock.constprop.0.isra.0>
	while (!(transmit_status_register & CAN_TSR_TME)) {
 804cae2:	f01a 5fe0 	tst.w	sl, #469762048	; 0x1c000000
 804cae6:	d046      	beq.n	804cb76 <can_stm32_send+0xea>

		k_mutex_lock(&data->inst_mutex, K_FOREVER);
		transmit_status_register = can->TSR;
	}

	if (transmit_status_register & CAN_TSR_TME0) {
 804cae8:	f01a 6f80 	tst.w	sl, #67108864	; 0x4000000
 804caec:	d05a      	beq.n	804cba4 <can_stm32_send+0x118>
		LOG_DBG("Using mailbox 0");
		mailbox = &can->sTxMailBox[0];
 804caee:	f504 74c0 	add.w	r4, r4, #384	; 0x180
		mb = &(data->mb0);
 804caf2:	f106 082c 	add.w	r8, r6, #44	; 0x2c
		mailbox = &can->sTxMailBox[2];
		mb = &data->mb2;
	}

	mb->tx_callback = callback;
	mb->callback_arg = callback_arg;
 804caf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	k_sem_reset(&mb->tx_int_sem);
 804caf8:	f108 0908 	add.w	r9, r8, #8
	mb->tx_callback = callback;
 804cafc:	f8c8 7000 	str.w	r7, [r8]
	mb->callback_arg = callback_arg;
 804cb00:	f8c8 3004 	str.w	r3, [r8, #4]
	z_impl_k_sem_reset(sem);
 804cb04:	4648      	mov	r0, r9
 804cb06:	f005 f83b 	bl	8051b80 <z_impl_k_sem_reset>

	/* mailbox identifier register setup */
	mailbox->TIR &= CAN_TI0R_TXRQ;
 804cb0a:	6823      	ldr	r3, [r4, #0]
 804cb0c:	682a      	ldr	r2, [r5, #0]
 804cb0e:	f003 0301 	and.w	r3, r3, #1

	if (msg->id_type == CAN_STANDARD_IDENTIFIER) {
 804cb12:	78e9      	ldrb	r1, [r5, #3]
	mailbox->TIR &= CAN_TI0R_TXRQ;
 804cb14:	6023      	str	r3, [r4, #0]
	if (msg->id_type == CAN_STANDARD_IDENTIFIER) {
 804cb16:	f995 3003 	ldrsb.w	r3, [r5, #3]
 804cb1a:	2b00      	cmp	r3, #0
		mailbox->TIR |= (msg->id << CAN_TI0R_STID_Pos);
 804cb1c:	6823      	ldr	r3, [r4, #0]
	} else {
		mailbox->TIR |= (msg->id << CAN_TI0R_EXID_Pos)
 804cb1e:	bfb6      	itet	lt
 804cb20:	ea43 03c2 	orrlt.w	r3, r3, r2, lsl #3
		mailbox->TIR |= (msg->id << CAN_TI0R_STID_Pos);
 804cb24:	ea43 5342 	orrge.w	r3, r3, r2, lsl #21
		mailbox->TIR |= (msg->id << CAN_TI0R_EXID_Pos)
 804cb28:	f043 0304 	orrlt.w	r3, r3, #4
 804cb2c:	6023      	str	r3, [r4, #0]
				| CAN_TI0R_IDE;
	}

	if (msg->rtr == CAN_REMOTEREQUEST) {
 804cb2e:	064b      	lsls	r3, r1, #25
 804cb30:	d503      	bpl.n	804cb3a <can_stm32_send+0xae>
		mailbox->TIR |= CAN_TI1R_RTR;
 804cb32:	6823      	ldr	r3, [r4, #0]
 804cb34:	f043 0302 	orr.w	r3, r3, #2
 804cb38:	6023      	str	r3, [r4, #0]
	}

	mailbox->TDTR = (mailbox->TDTR & ~CAN_TDT1R_DLC) |
 804cb3a:	6862      	ldr	r2, [r4, #4]

	mailbox->TDLR = msg->data_32[0];
	mailbox->TDHR = msg->data_32[1];

	mailbox->TIR |= CAN_TI0R_TXRQ;
	k_mutex_unlock(&data->inst_mutex);
 804cb3c:	4630      	mov	r0, r6
			((msg->dlc & 0xF) << CAN_TDT1R_DLC_Pos);
 804cb3e:	792b      	ldrb	r3, [r5, #4]
	mailbox->TDTR = (mailbox->TDTR & ~CAN_TDT1R_DLC) |
 804cb40:	f022 020f 	bic.w	r2, r2, #15
			((msg->dlc & 0xF) << CAN_TDT1R_DLC_Pos);
 804cb44:	f003 030f 	and.w	r3, r3, #15
	mailbox->TDTR = (mailbox->TDTR & ~CAN_TDT1R_DLC) |
 804cb48:	4313      	orrs	r3, r2
 804cb4a:	6063      	str	r3, [r4, #4]
	mailbox->TDLR = msg->data_32[0];
 804cb4c:	68ab      	ldr	r3, [r5, #8]
 804cb4e:	60a3      	str	r3, [r4, #8]
	mailbox->TDHR = msg->data_32[1];
 804cb50:	68eb      	ldr	r3, [r5, #12]
 804cb52:	60e3      	str	r3, [r4, #12]
	mailbox->TIR |= CAN_TI0R_TXRQ;
 804cb54:	6823      	ldr	r3, [r4, #0]
 804cb56:	f043 0301 	orr.w	r3, r3, #1
 804cb5a:	6023      	str	r3, [r4, #0]
	k_mutex_unlock(&data->inst_mutex);
 804cb5c:	f00b fd11 	bl	8058582 <k_mutex_unlock.isra.0>

	if (callback == NULL) {
 804cb60:	bb9f      	cbnz	r7, 804cbca <can_stm32_send+0x13e>
	return z_impl_k_sem_take(sem, timeout);
 804cb62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804cb66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804cb6a:	4648      	mov	r0, r9
 804cb6c:	f004 ffe0 	bl	8051b30 <z_impl_k_sem_take>
		k_sem_take(&mb->tx_int_sem, K_FOREVER);
		return mb->error;
 804cb70:	f8d8 0020 	ldr.w	r0, [r8, #32]
 804cb74:	e00a      	b.n	804cb8c <can_stm32_send+0x100>
		k_mutex_unlock(&data->inst_mutex);
 804cb76:	4630      	mov	r0, r6
 804cb78:	f00b fd03 	bl	8058582 <k_mutex_unlock.isra.0>
 804cb7c:	4642      	mov	r2, r8
 804cb7e:	464b      	mov	r3, r9
 804cb80:	4658      	mov	r0, fp
 804cb82:	f004 ffd5 	bl	8051b30 <z_impl_k_sem_take>
		if (k_sem_take(&data->tx_int_sem, timeout)) {
 804cb86:	b118      	cbz	r0, 804cb90 <can_stm32_send+0x104>
			return CAN_TIMEOUT;
 804cb88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return 0;
}
 804cb8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		k_mutex_lock(&data->inst_mutex, K_FOREVER);
 804cb90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804cb94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804cb98:	4630      	mov	r0, r6
 804cb9a:	f00b fcf0 	bl	805857e <k_mutex_lock.constprop.0.isra.0>
		transmit_status_register = can->TSR;
 804cb9e:	f8d4 a008 	ldr.w	sl, [r4, #8]
 804cba2:	e79e      	b.n	804cae2 <can_stm32_send+0x56>
	} else if (transmit_status_register & CAN_TSR_TME1) {
 804cba4:	f01a 6f00 	tst.w	sl, #134217728	; 0x8000000
 804cba8:	d004      	beq.n	804cbb4 <can_stm32_send+0x128>
		mailbox = &can->sTxMailBox[1];
 804cbaa:	f504 74c8 	add.w	r4, r4, #400	; 0x190
		mb = &data->mb1;
 804cbae:	f106 0850 	add.w	r8, r6, #80	; 0x50
 804cbb2:	e7a0      	b.n	804caf6 <can_stm32_send+0x6a>
	} else if (transmit_status_register & CAN_TSR_TME2) {
 804cbb4:	f01a 5880 	ands.w	r8, sl, #268435456	; 0x10000000
 804cbb8:	d009      	beq.n	804cbce <can_stm32_send+0x142>
		mailbox = &can->sTxMailBox[2];
 804cbba:	f504 74d0 	add.w	r4, r4, #416	; 0x1a0
		mb = &data->mb2;
 804cbbe:	f106 0874 	add.w	r8, r6, #116	; 0x74
 804cbc2:	e798      	b.n	804caf6 <can_stm32_send+0x6a>
		return CAN_TX_BUS_OFF;
 804cbc4:	f06f 0003 	mvn.w	r0, #3
 804cbc8:	e7e0      	b.n	804cb8c <can_stm32_send+0x100>
	return 0;
 804cbca:	2000      	movs	r0, #0
 804cbcc:	e7de      	b.n	804cb8c <can_stm32_send+0x100>
	mb->tx_callback = callback;
 804cbce:	f8c8 7000 	str.w	r7, [r8]
	mb->callback_arg = callback_arg;
 804cbd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 804cbd4:	f8c8 3004 	str.w	r3, [r8, #4]
	z_impl_k_sem_reset(sem);
 804cbd8:	2008      	movs	r0, #8
 804cbda:	f004 ffd1 	bl	8051b80 <z_impl_k_sem_reset>
	mailbox->TIR &= CAN_TI0R_TXRQ;
 804cbde:	f8d8 3000 	ldr.w	r3, [r8]
 804cbe2:	deff      	udf	#255	; 0xff
 804cbe4:	200208e0 	.word	0x200208e0
 804cbe8:	200208c8 	.word	0x200208c8
 804cbec:	080626ad 	.word	0x080626ad

0804cbf0 <can_stm32_get_core_clock>:
{
 804cbf0:	b513      	push	{r0, r1, r4, lr}
 804cbf2:	9101      	str	r1, [sp, #4]
				     (clock_control_subsys_t *) &cfg->pclken,
 804cbf4:	6841      	ldr	r1, [r0, #4]
 804cbf6:	3114      	adds	r1, #20
 804cbf8:	9100      	str	r1, [sp, #0]
 804cbfa:	4c12      	ldr	r4, [pc, #72]	; (804cc44 <can_stm32_get_core_clock+0x54>)
 804cbfc:	4620      	mov	r0, r4
 804cbfe:	f00d fb2a 	bl	805a256 <z_device_ready>
 804cc02:	b1c8      	cbz	r0, 804cc38 <can_stm32_get_core_clock+0x48>
	if (api->get_rate == NULL) {
 804cc04:	68a3      	ldr	r3, [r4, #8]
 804cc06:	68db      	ldr	r3, [r3, #12]
 804cc08:	b1cb      	cbz	r3, 804cc3e <can_stm32_get_core_clock+0x4e>
	return api->get_rate(dev, sys, rate);
 804cc0a:	4620      	mov	r0, r4
 804cc0c:	e9dd 1200 	ldrd	r1, r2, [sp]
 804cc10:	4798      	blx	r3
	if (ret != 0) {
 804cc12:	b178      	cbz	r0, 804cc34 <can_stm32_get_core_clock+0x44>
		LOG_ERR("Failed call clock_control_get_rate: return [%d]", ret);
 804cc14:	4a0c      	ldr	r2, [pc, #48]	; (804cc48 <can_stm32_get_core_clock+0x58>)
 804cc16:	6813      	ldr	r3, [r2, #0]
 804cc18:	075b      	lsls	r3, r3, #29
 804cc1a:	d009      	beq.n	804cc30 <can_stm32_get_core_clock+0x40>
 804cc1c:	4b0b      	ldr	r3, [pc, #44]	; (804cc4c <can_stm32_get_core_clock+0x5c>)
 804cc1e:	4601      	mov	r1, r0
 804cc20:	480b      	ldr	r0, [pc, #44]	; (804cc50 <can_stm32_get_core_clock+0x60>)
 804cc22:	1ad2      	subs	r2, r2, r3
 804cc24:	0892      	lsrs	r2, r2, #2
 804cc26:	0192      	lsls	r2, r2, #6
 804cc28:	f042 0201 	orr.w	r2, r2, #1
 804cc2c:	f009 f9ea 	bl	8056004 <log_1>
		return -EIO;
 804cc30:	f06f 0004 	mvn.w	r0, #4
}
 804cc34:	b002      	add	sp, #8
 804cc36:	bd10      	pop	{r4, pc}
 804cc38:	f06f 0012 	mvn.w	r0, #18
 804cc3c:	e7ea      	b.n	804cc14 <can_stm32_get_core_clock+0x24>
		return -ENOSYS;
 804cc3e:	f06f 0057 	mvn.w	r0, #87	; 0x57
 804cc42:	e7e7      	b.n	804cc14 <can_stm32_get_core_clock+0x24>
 804cc44:	0805b844 	.word	0x0805b844
 804cc48:	200208e0 	.word	0x200208e0
 804cc4c:	200208c8 	.word	0x200208c8
 804cc50:	080626cc 	.word	0x080626cc

0804cc54 <can_stm32_init>:
{
 804cc54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct can_stm32_config *cfg = DEV_CFG(dev);
 804cc58:	6846      	ldr	r6, [r0, #4]
{
 804cc5a:	b087      	sub	sp, #28
 804cc5c:	4607      	mov	r7, r0
	struct can_stm32_data *data = DEV_DATA(dev);
 804cc5e:	6904      	ldr	r4, [r0, #16]
	CAN_TypeDef *master_can = cfg->master_can;
 804cc60:	e9d6 5900 	ldrd	r5, r9, [r6]
	return z_impl_k_mutex_init(mutex);
 804cc64:	4620      	mov	r0, r4
 804cc66:	f00d fbca 	bl	805a3fe <z_impl_k_mutex_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
 804cc6a:	2201      	movs	r2, #1
 804cc6c:	2100      	movs	r1, #0
 804cc6e:	f104 0014 	add.w	r0, r4, #20
 804cc72:	f00d fbcb 	bl	805a40c <z_impl_k_sem_init>
 804cc76:	2201      	movs	r2, #1
 804cc78:	2100      	movs	r1, #0
 804cc7a:	f104 0034 	add.w	r0, r4, #52	; 0x34
 804cc7e:	f00d fbc5 	bl	805a40c <z_impl_k_sem_init>
 804cc82:	2201      	movs	r2, #1
 804cc84:	2100      	movs	r1, #0
 804cc86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 804cc8a:	f00d fbbf 	bl	805a40c <z_impl_k_sem_init>
 804cc8e:	2201      	movs	r2, #1
 804cc90:	2100      	movs	r1, #0
 804cc92:	f104 007c 	add.w	r0, r4, #124	; 0x7c
	data->mb0.tx_callback = NULL;
 804cc96:	f04f 0800 	mov.w	r8, #0
 804cc9a:	f00d fbb7 	bl	805a40c <z_impl_k_sem_init>
	data->filter_usage = (1ULL << CAN_MAX_NUMBER_OF_FILTERS) - 1ULL;
 804cc9e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 804cca2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
__ssp_bos_icheck3(memset, void *, int)
 804cca6:	4641      	mov	r1, r8
 804cca8:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
	data->mb0.tx_callback = NULL;
 804ccac:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
	data->mb1.tx_callback = NULL;
 804ccb0:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
	data->mb2.tx_callback = NULL;
 804ccb4:	f8c4 8074 	str.w	r8, [r4, #116]	; 0x74
	data->state_change_isr = NULL;
 804ccb8:	f8c4 80c8 	str.w	r8, [r4, #200]	; 0xc8
	data->filter_usage = (1ULL << CAN_MAX_NUMBER_OF_FILTERS) - 1ULL;
 804ccbc:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
 804ccc0:	2214      	movs	r2, #20
 804ccc2:	f00e f8c3 	bl	805ae4c <memset>
 804ccc6:	4641      	mov	r1, r8
 804ccc8:	2214      	movs	r2, #20
 804ccca:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 804ccce:	f00e f8bd 	bl	805ae4c <memset>
	ret = clock_control_on(clock, (clock_control_subsys_t *) &cfg->pclken);
 804ccd2:	f106 0114 	add.w	r1, r6, #20
 804ccd6:	9101      	str	r1, [sp, #4]
 804ccd8:	4c62      	ldr	r4, [pc, #392]	; (804ce64 <can_stm32_init+0x210>)
 804ccda:	4620      	mov	r0, r4
 804ccdc:	f00d fabb 	bl	805a256 <z_device_ready>
 804cce0:	b1b0      	cbz	r0, 804cd10 <can_stm32_init+0xbc>
	return api->on(dev, sys);
 804cce2:	68a3      	ldr	r3, [r4, #8]
 804cce4:	4620      	mov	r0, r4
 804cce6:	9901      	ldr	r1, [sp, #4]
 804cce8:	681b      	ldr	r3, [r3, #0]
 804ccea:	4798      	blx	r3
	if (ret != 0) {
 804ccec:	4601      	mov	r1, r0
 804ccee:	b190      	cbz	r0, 804cd16 <can_stm32_init+0xc2>
		LOG_ERR("HAL_CAN_Init clock control on failed: %d", ret);
 804ccf0:	4a5d      	ldr	r2, [pc, #372]	; (804ce68 <can_stm32_init+0x214>)
 804ccf2:	6813      	ldr	r3, [r2, #0]
 804ccf4:	075c      	lsls	r4, r3, #29
 804ccf6:	d008      	beq.n	804cd0a <can_stm32_init+0xb6>
 804ccf8:	4b5c      	ldr	r3, [pc, #368]	; (804ce6c <can_stm32_init+0x218>)
 804ccfa:	485d      	ldr	r0, [pc, #372]	; (804ce70 <can_stm32_init+0x21c>)
 804ccfc:	1ad2      	subs	r2, r2, r3
 804ccfe:	0892      	lsrs	r2, r2, #2
 804cd00:	0192      	lsls	r2, r2, #6
 804cd02:	f042 0201 	orr.w	r2, r2, #1
 804cd06:	f009 f97d 	bl	8056004 <log_1>
		return -EIO;
 804cd0a:	f06f 0404 	mvn.w	r4, #4
 804cd0e:	e0a4      	b.n	804ce5a <can_stm32_init+0x206>
 804cd10:	f06f 0112 	mvn.w	r1, #18
 804cd14:	e7ec      	b.n	804ccf0 <can_stm32_init+0x9c>
	ret = stm32_dt_pinctrl_configure(cfg->pinctrl,
 804cd16:	6832      	ldr	r2, [r6, #0]
 804cd18:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
 804cd1c:	f00a fc43 	bl	80575a6 <stm32_dt_pinctrl_configure>
	if (ret < 0) {
 804cd20:	1e04      	subs	r4, r0, #0
 804cd22:	da0f      	bge.n	804cd44 <can_stm32_init+0xf0>
		LOG_ERR("CAN pinctrl setup failed (%d)", ret);
 804cd24:	4a50      	ldr	r2, [pc, #320]	; (804ce68 <can_stm32_init+0x214>)
 804cd26:	6813      	ldr	r3, [r2, #0]
 804cd28:	0758      	lsls	r0, r3, #29
 804cd2a:	f000 8096 	beq.w	804ce5a <can_stm32_init+0x206>
 804cd2e:	4b4f      	ldr	r3, [pc, #316]	; (804ce6c <can_stm32_init+0x218>)
 804cd30:	4621      	mov	r1, r4
 804cd32:	4850      	ldr	r0, [pc, #320]	; (804ce74 <can_stm32_init+0x220>)
 804cd34:	1ad2      	subs	r2, r2, r3
 804cd36:	0892      	lsrs	r2, r2, #2
 804cd38:	0192      	lsls	r2, r2, #6
 804cd3a:	f042 0201 	orr.w	r2, r2, #1
	LOG_INF("Init of %s done", dev->name);
 804cd3e:	f009 f961 	bl	8056004 <log_1>
 804cd42:	e08a      	b.n	804ce5a <can_stm32_init+0x206>
	can->MCR &= ~CAN_MCR_SLEEP;
 804cd44:	682b      	ldr	r3, [r5, #0]
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 804cd46:	f8df 8140 	ldr.w	r8, [pc, #320]	; 804ce88 <can_stm32_init+0x234>
	can->MCR &= ~CAN_MCR_SLEEP;
 804cd4a:	f023 0302 	bic.w	r3, r3, #2
 804cd4e:	602b      	str	r3, [r5, #0]
 804cd50:	f001 fc1e 	bl	804e590 <sys_clock_cycle_get_32>
 804cd54:	4604      	mov	r4, r0
	while ((can->MSR & CAN_MSR_SLAK) != 0) {
 804cd56:	686b      	ldr	r3, [r5, #4]
 804cd58:	0799      	lsls	r1, r3, #30
 804cd5a:	d45c      	bmi.n	804ce16 <can_stm32_init+0x1c2>
	ret = can_enter_init_mode(can);
 804cd5c:	4628      	mov	r0, r5
 804cd5e:	f7ff fda1 	bl	804c8a4 <can_enter_init_mode>
	if (ret) {
 804cd62:	4604      	mov	r4, r0
 804cd64:	2800      	cmp	r0, #0
 804cd66:	d16b      	bne.n	804ce40 <can_stm32_init+0x1ec>
	master_can->FMR &= ~CAN_FMR_CAN2SB; /* Assign all filters to CAN2 */
 804cd68:	f8d9 3200 	ldr.w	r3, [r9, #512]	; 0x200
		ret = can_calc_prescaler(dev, &timing, cfg->bus_speed);
 804cd6c:	a903      	add	r1, sp, #12
 804cd6e:	68b2      	ldr	r2, [r6, #8]
 804cd70:	4638      	mov	r0, r7
	master_can->FMR &= ~CAN_FMR_CAN2SB; /* Assign all filters to CAN2 */
 804cd72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 804cd76:	f8c9 3200 	str.w	r3, [r9, #512]	; 0x200
	can->MCR |= CAN_MCR_TXFP;
 804cd7a:	682b      	ldr	r3, [r5, #0]
 804cd7c:	f043 0304 	orr.w	r3, r3, #4
 804cd80:	602b      	str	r3, [r5, #0]
	can->MCR &= ~CAN_MCR_TTCM & ~CAN_MCR_ABOM & ~CAN_MCR_AWUM &
 804cd82:	682b      	ldr	r3, [r5, #0]
 804cd84:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 804cd88:	602b      	str	r3, [r5, #0]
	can->MCR |= CAN_MCR_ABOM;
 804cd8a:	682b      	ldr	r3, [r5, #0]
 804cd8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804cd90:	602b      	str	r3, [r5, #0]
	timing.sjw = cfg->sjw;
 804cd92:	7bb3      	ldrb	r3, [r6, #14]
		timing.prop_seg = 0;
 804cd94:	f8ad 400e 	strh.w	r4, [sp, #14]
	timing.sjw = cfg->sjw;
 804cd98:	f8ad 300c 	strh.w	r3, [sp, #12]
		timing.phase_seg1 = cfg->prop_ts1;
 804cd9c:	7bf3      	ldrb	r3, [r6, #15]
 804cd9e:	f8ad 3010 	strh.w	r3, [sp, #16]
		timing.phase_seg2 = cfg->ts2;
 804cda2:	7c33      	ldrb	r3, [r6, #16]
 804cda4:	f8ad 3012 	strh.w	r3, [sp, #18]
		ret = can_calc_prescaler(dev, &timing, cfg->bus_speed);
 804cda8:	f00b fb18 	bl	80583dc <can_calc_prescaler>
		if (ret) {
 804cdac:	4601      	mov	r1, r0
 804cdae:	b168      	cbz	r0, 804cdcc <can_stm32_init+0x178>
			LOG_WRN("Bitrate error: %d", ret);
 804cdb0:	4a2d      	ldr	r2, [pc, #180]	; (804ce68 <can_stm32_init+0x214>)
 804cdb2:	6813      	ldr	r3, [r2, #0]
 804cdb4:	f013 0f06 	tst.w	r3, #6
 804cdb8:	d008      	beq.n	804cdcc <can_stm32_init+0x178>
 804cdba:	4b2c      	ldr	r3, [pc, #176]	; (804ce6c <can_stm32_init+0x218>)
 804cdbc:	482e      	ldr	r0, [pc, #184]	; (804ce78 <can_stm32_init+0x224>)
 804cdbe:	1ad2      	subs	r2, r2, r3
 804cdc0:	0892      	lsrs	r2, r2, #2
 804cdc2:	0192      	lsls	r2, r2, #6
 804cdc4:	f042 0202 	orr.w	r2, r2, #2
 804cdc8:	f009 f91c 	bl	8056004 <log_1>
	ret = can_stm32_set_timing(dev, &timing, NULL);
 804cdcc:	2200      	movs	r2, #0
 804cdce:	a903      	add	r1, sp, #12
 804cdd0:	4638      	mov	r0, r7
 804cdd2:	f7ff fd9f 	bl	804c914 <can_stm32_set_timing>
	if (ret) {
 804cdd6:	4604      	mov	r4, r0
 804cdd8:	2800      	cmp	r0, #0
 804cdda:	d13e      	bne.n	804ce5a <can_stm32_init+0x206>
	ret = can_stm32_set_mode(dev, CAN_NORMAL_MODE);
 804cddc:	4601      	mov	r1, r0
 804cdde:	4638      	mov	r0, r7
 804cde0:	f7ff fdf8 	bl	804c9d4 <can_stm32_set_mode>
	if (ret) {
 804cde4:	4604      	mov	r4, r0
 804cde6:	2800      	cmp	r0, #0
 804cde8:	d137      	bne.n	804ce5a <can_stm32_init+0x206>
	cfg->config_irq(can);
 804cdea:	69f3      	ldr	r3, [r6, #28]
 804cdec:	4628      	mov	r0, r5
 804cdee:	4798      	blx	r3
	can->IER |= CAN_IER_TMEIE;
 804cdf0:	696b      	ldr	r3, [r5, #20]
	LOG_INF("Init of %s done", dev->name);
 804cdf2:	4a1d      	ldr	r2, [pc, #116]	; (804ce68 <can_stm32_init+0x214>)
	can->IER |= CAN_IER_TMEIE;
 804cdf4:	f043 0301 	orr.w	r3, r3, #1
 804cdf8:	616b      	str	r3, [r5, #20]
	LOG_INF("Init of %s done", dev->name);
 804cdfa:	6813      	ldr	r3, [r2, #0]
 804cdfc:	f003 0307 	and.w	r3, r3, #7
 804ce00:	2b02      	cmp	r3, #2
 804ce02:	d92a      	bls.n	804ce5a <can_stm32_init+0x206>
 804ce04:	4b19      	ldr	r3, [pc, #100]	; (804ce6c <can_stm32_init+0x218>)
 804ce06:	6839      	ldr	r1, [r7, #0]
 804ce08:	1ad2      	subs	r2, r2, r3
 804ce0a:	481c      	ldr	r0, [pc, #112]	; (804ce7c <can_stm32_init+0x228>)
 804ce0c:	0892      	lsrs	r2, r2, #2
 804ce0e:	0192      	lsls	r2, r2, #6
 804ce10:	f042 0203 	orr.w	r2, r2, #3
 804ce14:	e793      	b.n	804cd3e <can_stm32_init+0xea>
 804ce16:	f001 fbbb 	bl	804e590 <sys_clock_cycle_get_32>
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 804ce1a:	1b00      	subs	r0, r0, r4
 804ce1c:	4540      	cmp	r0, r8
 804ce1e:	d99a      	bls.n	804cd56 <can_stm32_init+0x102>
		LOG_ERR("Failed to exit sleep mode");
 804ce20:	4911      	ldr	r1, [pc, #68]	; (804ce68 <can_stm32_init+0x214>)
 804ce22:	680b      	ldr	r3, [r1, #0]
 804ce24:	075b      	lsls	r3, r3, #29
 804ce26:	d008      	beq.n	804ce3a <can_stm32_init+0x1e6>
 804ce28:	4b10      	ldr	r3, [pc, #64]	; (804ce6c <can_stm32_init+0x218>)
 804ce2a:	4815      	ldr	r0, [pc, #84]	; (804ce80 <can_stm32_init+0x22c>)
 804ce2c:	1ac9      	subs	r1, r1, r3
 804ce2e:	0889      	lsrs	r1, r1, #2
 804ce30:	0189      	lsls	r1, r1, #6
 804ce32:	f041 0101 	orr.w	r1, r1, #1
 804ce36:	f009 f8d6 	bl	8055fe6 <log_0>
 804ce3a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 804ce3e:	e00c      	b.n	804ce5a <can_stm32_init+0x206>
		LOG_ERR("Failed to enter init mode");
 804ce40:	4909      	ldr	r1, [pc, #36]	; (804ce68 <can_stm32_init+0x214>)
 804ce42:	680b      	ldr	r3, [r1, #0]
 804ce44:	075a      	lsls	r2, r3, #29
 804ce46:	d008      	beq.n	804ce5a <can_stm32_init+0x206>
 804ce48:	4b08      	ldr	r3, [pc, #32]	; (804ce6c <can_stm32_init+0x218>)
 804ce4a:	480e      	ldr	r0, [pc, #56]	; (804ce84 <can_stm32_init+0x230>)
 804ce4c:	1ac9      	subs	r1, r1, r3
 804ce4e:	0889      	lsrs	r1, r1, #2
 804ce50:	0189      	lsls	r1, r1, #6
 804ce52:	f041 0101 	orr.w	r1, r1, #1
 804ce56:	f009 f8c6 	bl	8055fe6 <log_0>
}
 804ce5a:	4620      	mov	r0, r4
 804ce5c:	b007      	add	sp, #28
 804ce5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 804ce62:	bf00      	nop
 804ce64:	0805b844 	.word	0x0805b844
 804ce68:	200208e0 	.word	0x200208e0
 804ce6c:	200208c8 	.word	0x200208c8
 804ce70:	080626fc 	.word	0x080626fc
 804ce74:	08062725 	.word	0x08062725
 804ce78:	0806275d 	.word	0x0806275d
 804ce7c:	0806276f 	.word	0x0806276f
 804ce80:	08062743 	.word	0x08062743
 804ce84:	08062679 	.word	0x08062679
 804ce88:	0020f580 	.word	0x0020f580

0804ce8c <can_calc_filter_index>:
	return type;
}

static int can_calc_filter_index(int filter_nr, uint32_t mode_reg, uint32_t scale_reg)
{
	int filter_bank = filter_nr / 4;
 804ce8c:	2800      	cmp	r0, #0
{
 804ce8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int filter_bank = filter_nr / 4;
 804ce92:	4604      	mov	r4, r0
	int cnt = 0;
	uint32_t mode_masked, scale_masked;
	enum can_filter_type filter_type;
	/*count filters in the banks before */
	for (int i = 0; i < filter_bank; i++) {
 804ce94:	f04f 0500 	mov.w	r5, #0
	int filter_bank = filter_nr / 4;
 804ce98:	bfb8      	it	lt
 804ce9a:	1cc4      	addlt	r4, r0, #3
{
 804ce9c:	4603      	mov	r3, r0
 804ce9e:	460e      	mov	r6, r1
 804cea0:	4617      	mov	r7, r2
	int filter_bank = filter_nr / 4;
 804cea2:	10a4      	asrs	r4, r4, #2
	int cnt = 0;
 804cea4:	46a8      	mov	r8, r5
		filter_type = can_stm32_get_filter_type(i, mode_reg, scale_reg);
		cnt += filter_in_bank[filter_type];
 804cea6:	f8df 903c 	ldr.w	r9, [pc, #60]	; 804cee4 <can_calc_filter_index+0x58>
	for (int i = 0; i < filter_bank; i++) {
 804ceaa:	42a5      	cmp	r5, r4
 804ceac:	db0c      	blt.n	804cec8 <can_calc_filter_index+0x3c>
	}

	/* plus the filters in the same bank */
	mode_masked  = mode_reg & (1U << filter_bank);
 804ceae:	2001      	movs	r0, #1
 804ceb0:	fa00 f404 	lsl.w	r4, r0, r4
	scale_masked = scale_reg & (1U << filter_bank);
	cnt += (!scale_masked && mode_masked) ? filter_nr & 0x03 :
 804ceb4:	423c      	tst	r4, r7
 804ceb6:	d111      	bne.n	804cedc <can_calc_filter_index+0x50>
 804ceb8:	4234      	tst	r4, r6
 804ceba:	d00f      	beq.n	804cedc <can_calc_filter_index+0x50>
 804cebc:	f003 0303 	and.w	r3, r3, #3
					       (filter_nr & 0x03) >> 1;
	return cnt;
}
 804cec0:	eb08 0003 	add.w	r0, r8, r3
 804cec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		filter_type = can_stm32_get_filter_type(i, mode_reg, scale_reg);
 804cec8:	463a      	mov	r2, r7
 804ceca:	4628      	mov	r0, r5
 804cecc:	4631      	mov	r1, r6
	for (int i = 0; i < filter_bank; i++) {
 804cece:	3501      	adds	r5, #1
		filter_type = can_stm32_get_filter_type(i, mode_reg, scale_reg);
 804ced0:	f00b fc15 	bl	80586fe <can_stm32_get_filter_type>
		cnt += filter_in_bank[filter_type];
 804ced4:	f819 2000 	ldrb.w	r2, [r9, r0]
 804ced8:	4490      	add	r8, r2
	for (int i = 0; i < filter_bank; i++) {
 804ceda:	e7e6      	b.n	804ceaa <can_calc_filter_index+0x1e>
	cnt += (!scale_masked && mode_masked) ? filter_nr & 0x03 :
 804cedc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 804cee0:	e7ee      	b.n	804cec0 <can_calc_filter_index+0x34>
 804cee2:	bf00      	nop
 804cee4:	080627ba 	.word	0x080627ba

0804cee8 <can_stm32_detach>:
	k_mutex_unlock(&data->inst_mutex);
	return filter_nr;
}

void can_stm32_detach(const struct device *dev, int filter_nr)
{
 804cee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	const struct can_stm32_config *cfg = DEV_CFG(dev);
	struct can_stm32_data *data = DEV_DATA(dev);
 804ceec:	6906      	ldr	r6, [r0, #16]
{
 804ceee:	4689      	mov	r9, r1
	CAN_TypeDef *can = cfg->master_can;
 804cef0:	6843      	ldr	r3, [r0, #4]
	enum can_filter_type type;
	uint32_t reset_mask;

	__ASSERT_NO_MSG(filter_nr >= 0 && filter_nr < CAN_MAX_NUMBER_OF_FILTERS);

	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 804cef2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804cef6:	4630      	mov	r0, r6

	bank_nr = filter_nr / 4;
 804cef8:	464d      	mov	r5, r9
	CAN_TypeDef *can = cfg->master_can;
 804cefa:	685c      	ldr	r4, [r3, #4]
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 804cefc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804cf00:	f00b fb3d 	bl	805857e <k_mutex_lock.constprop.0.isra.0>
	bank_nr = filter_nr / 4;
 804cf04:	f1b9 0f00 	cmp.w	r9, #0
	bank_bit = (1U << bank_nr);
	mode_reg  = can->FM1R;
 804cf08:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
	scale_reg = can->FS1R;

	filter_index = can_calc_filter_index(filter_nr, mode_reg, scale_reg);
 804cf0c:	4648      	mov	r0, r9
	bank_nr = filter_nr / 4;
 804cf0e:	bfb8      	it	lt
 804cf10:	f109 0503 	addlt.w	r5, r9, #3
	scale_reg = can->FS1R;
 804cf14:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
	bank_bit = (1U << bank_nr);
 804cf18:	f04f 0a01 	mov.w	sl, #1
	bank_nr = filter_nr / 4;
 804cf1c:	10ad      	asrs	r5, r5, #2
	filter_index = can_calc_filter_index(filter_nr, mode_reg, scale_reg);
 804cf1e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 804cf22:	f7ff ffb3 	bl	804ce8c <can_calc_filter_index>

	LOG_DBG("Detatch filter number %d (index %d), type %d", filter_nr,
		    filter_index,
		    type);

	reset_mask = ((1 << (reg_demand[type])) - 1) << filter_nr;
 804cf26:	4b2d      	ldr	r3, [pc, #180]	; (804cfdc <can_stm32_detach+0xf4>)
	filter_index = can_calc_filter_index(filter_nr, mode_reg, scale_reg);
 804cf28:	4607      	mov	r7, r0
	type = can_stm32_get_filter_type(bank_nr, mode_reg, scale_reg);
 804cf2a:	4628      	mov	r0, r5
	bank_bit = (1U << bank_nr);
 804cf2c:	fa0a f805 	lsl.w	r8, sl, r5
	type = can_stm32_get_filter_type(bank_nr, mode_reg, scale_reg);
 804cf30:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 804cf34:	f00b fbe3 	bl	80586fe <can_stm32_get_filter_type>
	reset_mask = ((1 << (reg_demand[type])) - 1) << filter_nr;
 804cf38:	5c1b      	ldrb	r3, [r3, r0]
	data->filter_usage |= reset_mask;
	can->FMR |= CAN_FMR_FINIT;
	can->FA1R &= ~bank_bit;

	can_stm32_set_filter_bank(filter_nr, &can->sFilterRegister[bank_nr],
 804cf3a:	f105 0148 	add.w	r1, r5, #72	; 0x48
				  type, 0, 0xFFFFFFFF);

	if (!CAN_BANK_IS_EMPTY(data->filter_usage, bank_nr)) {
 804cf3e:	00ad      	lsls	r5, r5, #2
	reset_mask = ((1 << (reg_demand[type])) - 1) << filter_nr;
 804cf40:	fa0a fa03 	lsl.w	sl, sl, r3
	data->filter_usage |= reset_mask;
 804cf44:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
	type = can_stm32_get_filter_type(bank_nr, mode_reg, scale_reg);
 804cf48:	4602      	mov	r2, r0
	can_stm32_set_filter_bank(filter_nr, &can->sFilterRegister[bank_nr],
 804cf4a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	reset_mask = ((1 << (reg_demand[type])) - 1) << filter_nr;
 804cf4e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	can_stm32_set_filter_bank(filter_nr, &can->sFilterRegister[bank_nr],
 804cf52:	4648      	mov	r0, r9
	reset_mask = ((1 << (reg_demand[type])) - 1) << filter_nr;
 804cf54:	fa0a fa09 	lsl.w	sl, sl, r9
	data->filter_usage |= reset_mask;
 804cf58:	ea43 030a 	orr.w	r3, r3, sl
 804cf5c:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
	can->FMR |= CAN_FMR_FINIT;
 804cf60:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 804cf64:	f043 0301 	orr.w	r3, r3, #1
 804cf68:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	can->FA1R &= ~bank_bit;
 804cf6c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 804cf70:	ea23 0308 	bic.w	r3, r3, r8
 804cf74:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
	can_stm32_set_filter_bank(filter_nr, &can->sFilterRegister[bank_nr],
 804cf78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804cf7c:	9300      	str	r3, [sp, #0]
 804cf7e:	2300      	movs	r3, #0
 804cf80:	f00b fa6c 	bl	805845c <can_stm32_set_filter_bank>
	if (!CAN_BANK_IS_EMPTY(data->filter_usage, bank_nr)) {
 804cf84:	f1c5 0120 	rsb	r1, r5, #32
 804cf88:	f1a5 0220 	sub.w	r2, r5, #32
 804cf8c:	e9d6 3026 	ldrd	r3, r0, [r6, #152]	; 0x98
 804cf90:	fa23 f505 	lsr.w	r5, r3, r5
 804cf94:	fa00 f101 	lsl.w	r1, r0, r1
 804cf98:	fa20 f202 	lsr.w	r2, r0, r2
 804cf9c:	430d      	orrs	r5, r1
 804cf9e:	4315      	orrs	r5, r2
 804cfa0:	f005 050f 	and.w	r5, r5, #15
 804cfa4:	2d0f      	cmp	r5, #15
 804cfa6:	d005      	beq.n	804cfb4 <can_stm32_detach+0xcc>
		can->FA1R |= bank_bit;
 804cfa8:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 804cfac:	ea43 0308 	orr.w	r3, r3, r8
 804cfb0:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
	} else {
		LOG_DBG("Bank number %d is empty -> deakivate", bank_nr);
	}

	can->FMR &= ~(CAN_FMR_FINIT);
 804cfb4:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 804cfb8:	eb06 0787 	add.w	r7, r6, r7, lsl #2
	data->rx_cb[filter_index] = NULL;
	data->cb_arg[filter_index] = NULL;

	k_mutex_unlock(&data->inst_mutex);
 804cfbc:	4630      	mov	r0, r6
	can->FMR &= ~(CAN_FMR_FINIT);
 804cfbe:	f023 0301 	bic.w	r3, r3, #1
 804cfc2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	data->rx_cb[filter_index] = NULL;
 804cfc6:	2300      	movs	r3, #0
 804cfc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	data->cb_arg[filter_index] = NULL;
 804cfcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
}
 804cfd0:	b004      	add	sp, #16
 804cfd2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_mutex_unlock(&data->inst_mutex);
 804cfd6:	f00b bad4 	b.w	8058582 <k_mutex_unlock.isra.0>
 804cfda:	bf00      	nop
 804cfdc:	080627be 	.word	0x080627be

0804cfe0 <can_stm32_attach_isr>:
{
 804cfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804cfe4:	461c      	mov	r4, r3
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 804cfe6:	6903      	ldr	r3, [r0, #16]
{
 804cfe8:	4605      	mov	r5, r0
 804cfea:	ed2d 8b02 	vpush	{d8}
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 804cfee:	ee08 3a10 	vmov	s16, r3
{
 804cff2:	b08b      	sub	sp, #44	; 0x2c
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 804cff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804cff8:	ee18 0a10 	vmov	r0, s16
{
 804cffc:	e9cd 1207 	strd	r1, r2, [sp, #28]
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 804d000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804d004:	f00b fabb 	bl	805857e <k_mutex_lock.constprop.0.isra.0>
	struct can_stm32_data *data = DEV_DATA(dev);
 804d008:	692b      	ldr	r3, [r5, #16]
 804d00a:	6820      	ldr	r0, [r4, #0]
 804d00c:	9302      	str	r3, [sp, #8]
	CAN_TypeDef *can = cfg->master_can;
 804d00e:	686b      	ldr	r3, [r5, #4]
 804d010:	78e2      	ldrb	r2, [r4, #3]
 804d012:	685d      	ldr	r5, [r3, #4]
	if (filter->id_type == CAN_STANDARD_IDENTIFIER) {
 804d014:	f994 3003 	ldrsb.w	r3, [r4, #3]
 804d018:	6861      	ldr	r1, [r4, #4]
 804d01a:	2b00      	cmp	r3, #0
 804d01c:	db72      	blt.n	804d104 <can_stm32_attach_isr+0x124>
		(filter->rtr    << CAN_FIRX_STD_RTR_POS);
 804d01e:	f3c2 1380 	ubfx	r3, r2, #6, #1
		if (filter->id_mask != CAN_STD_ID_MASK) {
 804d022:	f021 4260 	bic.w	r2, r1, #3758096384	; 0xe0000000
		(filter->rtr    << CAN_FIRX_STD_RTR_POS);
 804d026:	011b      	lsls	r3, r3, #4
	return  (filter->id << CAN_FIRX_STD_ID_POS) |
 804d028:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
 804d02c:	9305      	str	r3, [sp, #20]
		if (filter->id_mask != CAN_STD_ID_MASK) {
 804d02e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 804d032:	429a      	cmp	r2, r3
 804d034:	d07d      	beq.n	804d132 <can_stm32_attach_isr+0x152>
		(filter->rtr_mask << CAN_FIRX_STD_RTR_POS) |
 804d036:	79e3      	ldrb	r3, [r4, #7]
			filter_type = CAN_FILTER_STANDARD_MASKED;
 804d038:	2600      	movs	r6, #0
		(filter->rtr_mask << CAN_FIRX_STD_RTR_POS) |
 804d03a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 804d03e:	011b      	lsls	r3, r3, #4
	return  (filter->id_mask  << CAN_FIRX_STD_ID_POS) |
 804d040:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
		(filter->rtr_mask << CAN_FIRX_STD_RTR_POS) |
 804d044:	f043 0308 	orr.w	r3, r3, #8
 804d048:	9304      	str	r3, [sp, #16]
	register_demand = reg_demand[filter_type];
 804d04a:	4b9e      	ldr	r3, [pc, #632]	; (804d2c4 <can_stm32_attach_isr+0x2e4>)
	int filter_nr = 0;
 804d04c:	2400      	movs	r4, #0
	register_demand = reg_demand[filter_type];
 804d04e:	f813 9006 	ldrb.w	r9, [r3, r6]
		uint64_t usage_shifted = (device_data->filter_usage >> filter_nr);
 804d052:	9b02      	ldr	r3, [sp, #8]
		uint64_t usage_demand_mask = (1ULL << register_demand) - 1;
 804d054:	f1a9 0220 	sub.w	r2, r9, #32
 804d058:	f1c9 0120 	rsb	r1, r9, #32
		uint64_t usage_shifted = (device_data->filter_usage >> filter_nr);
 804d05c:	e9d3 b726 	ldrd	fp, r7, [r3, #152]	; 0x98
		uint64_t usage_demand_mask = (1ULL << register_demand) - 1;
 804d060:	2301      	movs	r3, #1
 804d062:	fa03 f202 	lsl.w	r2, r3, r2
 804d066:	fa23 f101 	lsr.w	r1, r3, r1
 804d06a:	fa03 f309 	lsl.w	r3, r3, r9
 804d06e:	430a      	orrs	r2, r1
 804d070:	3b01      	subs	r3, #1
 804d072:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
 804d076:	9206      	str	r2, [sp, #24]
		uint64_t usage_shifted = (device_data->filter_usage >> filter_nr);
 804d078:	f1c4 0120 	rsb	r1, r4, #32
 804d07c:	f1a4 0220 	sub.w	r2, r4, #32
 804d080:	fa2b f804 	lsr.w	r8, fp, r4
		bank_mode = can_stm32_get_filter_type(bank_nr, can->FM1R,
 804d084:	10a0      	asrs	r0, r4, #2
		uint64_t usage_shifted = (device_data->filter_usage >> filter_nr);
 804d086:	fa07 f101 	lsl.w	r1, r7, r1
 804d08a:	fa27 f202 	lsr.w	r2, r7, r2
 804d08e:	fa27 fa04 	lsr.w	sl, r7, r4
 804d092:	ea48 0801 	orr.w	r8, r8, r1
		bank_mode = can_stm32_get_filter_type(bank_nr, can->FM1R,
 804d096:	f8d5 1204 	ldr.w	r1, [r5, #516]	; 0x204
		uint64_t usage_shifted = (device_data->filter_usage >> filter_nr);
 804d09a:	ea48 0802 	orr.w	r8, r8, r2
		bank_nr = filter_nr / 4;
 804d09e:	10a2      	asrs	r2, r4, #2
 804d0a0:	9203      	str	r2, [sp, #12]
		bank_mode = can_stm32_get_filter_type(bank_nr, can->FM1R,
 804d0a2:	f8d5 220c 	ldr.w	r2, [r5, #524]	; 0x20c
 804d0a6:	f00b fb2a 	bl	80586fe <can_stm32_get_filter_type>
		bank_is_empty = CAN_BANK_IS_EMPTY(device_data->filter_usage,
 804d0aa:	10a2      	asrs	r2, r4, #2
 804d0ac:	0091      	lsls	r1, r2, #2
 804d0ae:	f1c1 0e20 	rsb	lr, r1, #32
 804d0b2:	f1a1 0c20 	sub.w	ip, r1, #32
 804d0b6:	fa2b f201 	lsr.w	r2, fp, r1
 804d0ba:	fa07 fe0e 	lsl.w	lr, r7, lr
 804d0be:	fa27 fc0c 	lsr.w	ip, r7, ip
 804d0c2:	ea42 020e 	orr.w	r2, r2, lr
 804d0c6:	ea42 020c 	orr.w	r2, r2, ip
 804d0ca:	f002 020f 	and.w	r2, r2, #15
		if (!bank_is_empty && bank_mode != filter_type) {
 804d0ce:	2a0f      	cmp	r2, #15
 804d0d0:	d035      	beq.n	804d13e <can_stm32_attach_isr+0x15e>
 804d0d2:	4286      	cmp	r6, r0
 804d0d4:	d033      	beq.n	804d13e <can_stm32_attach_isr+0x15e>
			filter_nr = (bank_nr + 1) * 4;
 804d0d6:	1d0c      	adds	r4, r1, #4
		if (!usage_shifted) {
 804d0d8:	ea58 020a 	orrs.w	r2, r8, sl
 804d0dc:	f040 80b3 	bne.w	804d246 <can_stm32_attach_isr+0x266>
			LOG_INF("No free filter bank found");
 804d0e0:	4979      	ldr	r1, [pc, #484]	; (804d2c8 <can_stm32_attach_isr+0x2e8>)
 804d0e2:	680b      	ldr	r3, [r1, #0]
 804d0e4:	f003 0307 	and.w	r3, r3, #7
 804d0e8:	2b02      	cmp	r3, #2
 804d0ea:	d908      	bls.n	804d0fe <can_stm32_attach_isr+0x11e>
 804d0ec:	4b77      	ldr	r3, [pc, #476]	; (804d2cc <can_stm32_attach_isr+0x2ec>)
 804d0ee:	4878      	ldr	r0, [pc, #480]	; (804d2d0 <can_stm32_attach_isr+0x2f0>)
 804d0f0:	1ac9      	subs	r1, r1, r3
 804d0f2:	0889      	lsrs	r1, r1, #2
 804d0f4:	0189      	lsls	r1, r1, #6
 804d0f6:	f041 0103 	orr.w	r1, r1, #3
 804d0fa:	f008 ff74 	bl	8055fe6 <log_0>
			return CAN_NO_FREE_FILTER;
 804d0fe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 804d102:	e0ca      	b.n	804d29a <can_stm32_attach_isr+0x2ba>
		(filter->rtr << CAN_FIRX_EXT_RTR_POS) |
 804d104:	f3c2 1280 	ubfx	r2, r2, #6, #1
 804d108:	0052      	lsls	r2, r2, #1
	return  (filter->id  << CAN_FIRX_EXT_EXT_ID_POS) |
 804d10a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
		(filter->rtr << CAN_FIRX_EXT_RTR_POS) |
 804d10e:	f042 0304 	orr.w	r3, r2, #4
 804d112:	9305      	str	r3, [sp, #20]
		if (filter->id_mask != CAN_EXT_ID_MASK) {
 804d114:	43cb      	mvns	r3, r1
 804d116:	f033 4360 	bics.w	r3, r3, #3758096384	; 0xe0000000
 804d11a:	d00e      	beq.n	804d13a <can_stm32_attach_isr+0x15a>
		(filter->rtr_mask << CAN_FIRX_EXT_RTR_POS) |
 804d11c:	79e3      	ldrb	r3, [r4, #7]
			filter_type = CAN_FILTER_EXTENDED_MASKED;
 804d11e:	2602      	movs	r6, #2
		(filter->rtr_mask << CAN_FIRX_EXT_RTR_POS) |
 804d120:	f3c3 1380 	ubfx	r3, r3, #6, #1
 804d124:	005b      	lsls	r3, r3, #1
	return  (filter->id_mask  << CAN_FIRX_EXT_EXT_ID_POS) |
 804d126:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
		(filter->rtr_mask << CAN_FIRX_EXT_RTR_POS) |
 804d12a:	f043 0304 	orr.w	r3, r3, #4
 804d12e:	9304      	str	r3, [sp, #16]
			filter_type = CAN_FILTER_EXTENDED_MASKED;
 804d130:	e78b      	b.n	804d04a <can_stm32_attach_isr+0x6a>
		filter_type = CAN_FILTER_STANDARD;
 804d132:	2601      	movs	r6, #1
	uint32_t mask = 0U;
 804d134:	2300      	movs	r3, #0
 804d136:	9304      	str	r3, [sp, #16]
 804d138:	e787      	b.n	804d04a <can_stm32_attach_isr+0x6a>
		filter_type = CAN_FILTER_EXTENDED;
 804d13a:	2603      	movs	r6, #3
 804d13c:	e7fa      	b.n	804d134 <can_stm32_attach_isr+0x154>
		} else if (usage_shifted & usage_demand_mask) {
 804d13e:	9906      	ldr	r1, [sp, #24]
 804d140:	ea08 0203 	and.w	r2, r8, r3
 804d144:	ea0a 0101 	and.w	r1, sl, r1
 804d148:	430a      	orrs	r2, r1
 804d14a:	d07a      	beq.n	804d242 <can_stm32_attach_isr+0x262>
				~(usage_demand_mask << filter_nr);
 804d14c:	f1a4 0c20 	sub.w	ip, r4, #32
 804d150:	9a06      	ldr	r2, [sp, #24]
 804d152:	f1c4 0120 	rsb	r1, r4, #32
 804d156:	fa03 fc0c 	lsl.w	ip, r3, ip
 804d15a:	40a2      	lsls	r2, r4
 804d15c:	fa23 f101 	lsr.w	r1, r3, r1
 804d160:	40a3      	lsls	r3, r4
 804d162:	ea42 020c 	orr.w	r2, r2, ip
			device_data->filter_usage &=
 804d166:	ea2b 0303 	bic.w	r3, fp, r3
				~(usage_demand_mask << filter_nr);
 804d16a:	430a      	orrs	r2, r1
			device_data->filter_usage &=
 804d16c:	9902      	ldr	r1, [sp, #8]
 804d16e:	ea27 0202 	bic.w	r2, r7, r2
 804d172:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
 804d176:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
		bank_bit = (1U << bank_nr);
 804d17a:	9b03      	ldr	r3, [sp, #12]
 804d17c:	f04f 0801 	mov.w	r8, #1
	if (filter_type != bank_mode) {
 804d180:	4286      	cmp	r6, r0
		bank_bit = (1U << bank_nr);
 804d182:	fa08 f803 	lsl.w	r8, r8, r3
	can->FMR |= CAN_FMR_FINIT;
 804d186:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 804d18a:	f043 0301 	orr.w	r3, r3, #1
	can->FA1R &= ~bank_bit;
 804d18e:	ea6f 0108 	mvn.w	r1, r8
	can->FMR |= CAN_FMR_FINIT;
 804d192:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
	can->FA1R &= ~bank_bit;
 804d196:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 804d19a:	ea23 0308 	bic.w	r3, r3, r8
 804d19e:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
	if (filter_type != bank_mode) {
 804d1a2:	f000 8084 	beq.w	804d2ae <can_stm32_attach_isr+0x2ce>
	uint32_t mode_reg_bit  = (filter_type & 0x01) << bank_nr;
 804d1a6:	9f03      	ldr	r7, [sp, #12]
	uint32_t scale_reg_bit = (filter_type >>   1) << bank_nr;
 804d1a8:	ea4f 0956 	mov.w	r9, r6, lsr #1
		uint32_t mode_reg  = can->FM1R;
 804d1ac:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
	uint32_t mode_reg_bit  = (filter_type & 0x01) << bank_nr;
 804d1b0:	f006 0a01 	and.w	sl, r6, #1
		uint32_t scale_reg = can->FS1R;
 804d1b4:	f8d5 320c 	ldr.w	r3, [r5, #524]	; 0x20c
	uint32_t scale_reg_bit = (filter_type >>   1) << bank_nr;
 804d1b8:	fa09 f907 	lsl.w	r9, r9, r7
	*mode_reg &= ~(1 << bank_nr);
 804d1bc:	400a      	ands	r2, r1
	uint32_t mode_reg_bit  = (filter_type & 0x01) << bank_nr;
 804d1be:	fa0a fa07 	lsl.w	sl, sl, r7
	*scale_reg &= ~(1 << bank_nr);
 804d1c2:	400b      	ands	r3, r1
	*mode_reg |= mode_reg_bit;
 804d1c4:	ea4a 0a02 	orr.w	sl, sl, r2
	*scale_reg |= scale_reg_bit;
 804d1c8:	ea49 0903 	orr.w	r9, r9, r3
		shift_width = filter_in_bank[filter_type] - filter_in_bank[bank_mode];
 804d1cc:	4b41      	ldr	r3, [pc, #260]	; (804d2d4 <can_stm32_attach_isr+0x2f4>)
		filter_index_new = can_calc_filter_index(filter_nr, mode_reg,
 804d1ce:	4651      	mov	r1, sl
		shift_width = filter_in_bank[filter_type] - filter_in_bank[bank_mode];
 804d1d0:	f813 b000 	ldrb.w	fp, [r3, r0]
		filter_index_new = can_calc_filter_index(filter_nr, mode_reg,
 804d1d4:	464a      	mov	r2, r9
		shift_width = filter_in_bank[filter_type] - filter_in_bank[bank_mode];
 804d1d6:	5d9b      	ldrb	r3, [r3, r6]
		filter_index_new = can_calc_filter_index(filter_nr, mode_reg,
 804d1d8:	4620      	mov	r0, r4
		shift_width = filter_in_bank[filter_type] - filter_in_bank[bank_mode];
 804d1da:	eba3 030b 	sub.w	r3, r3, fp
 804d1de:	9306      	str	r3, [sp, #24]
		filter_index_new = can_calc_filter_index(filter_nr, mode_reg,
 804d1e0:	f7ff fe54 	bl	804ce8c <can_calc_filter_index>
		if (shift_width && start_index <= CAN_MAX_NUMBER_OF_FILTERS) {
 804d1e4:	9b06      	ldr	r3, [sp, #24]
		filter_index_new = can_calc_filter_index(filter_nr, mode_reg,
 804d1e6:	4607      	mov	r7, r0
		if (shift_width && start_index <= CAN_MAX_NUMBER_OF_FILTERS) {
 804d1e8:	b38b      	cbz	r3, 804d24e <can_stm32_attach_isr+0x26e>
		start_index = filter_index_new + filter_in_bank[bank_mode];
 804d1ea:	eb0b 0100 	add.w	r1, fp, r0
		if (shift_width && start_index <= CAN_MAX_NUMBER_OF_FILTERS) {
 804d1ee:	2938      	cmp	r1, #56	; 0x38
 804d1f0:	dc2d      	bgt.n	804d24e <can_stm32_attach_isr+0x26e>
			res = can_stm32_shift_arr((void **)device_data->rx_cb,
 804d1f2:	461a      	mov	r2, r3
 804d1f4:	9309      	str	r3, [sp, #36]	; 0x24
 804d1f6:	9b02      	ldr	r3, [sp, #8]
 804d1f8:	9106      	str	r1, [sp, #24]
 804d1fa:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 804d1fe:	f00b f981 	bl	8058504 <can_stm32_shift_arr>
			res |= can_stm32_shift_arr(device_data->cb_arg,
 804d202:	9b09      	ldr	r3, [sp, #36]	; 0x24
			res = can_stm32_shift_arr((void **)device_data->rx_cb,
 804d204:	4683      	mov	fp, r0
			res |= can_stm32_shift_arr(device_data->cb_arg,
 804d206:	9906      	ldr	r1, [sp, #24]
 804d208:	461a      	mov	r2, r3
 804d20a:	9b02      	ldr	r3, [sp, #8]
 804d20c:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 804d210:	f00b f978 	bl	8058504 <can_stm32_shift_arr>
			if (filter_index_new >= CONFIG_CAN_MAX_FILTER || res) {
 804d214:	2f04      	cmp	r7, #4
 804d216:	dc02      	bgt.n	804d21e <can_stm32_attach_isr+0x23e>
 804d218:	ea5b 0300 	orrs.w	r3, fp, r0
 804d21c:	d017      	beq.n	804d24e <can_stm32_attach_isr+0x26e>
				LOG_INF("No space for a new filter!");
 804d21e:	492a      	ldr	r1, [pc, #168]	; (804d2c8 <can_stm32_attach_isr+0x2e8>)
 804d220:	680b      	ldr	r3, [r1, #0]
 804d222:	f003 0307 	and.w	r3, r3, #7
 804d226:	2b02      	cmp	r3, #2
 804d228:	d908      	bls.n	804d23c <can_stm32_attach_isr+0x25c>
 804d22a:	4b28      	ldr	r3, [pc, #160]	; (804d2cc <can_stm32_attach_isr+0x2ec>)
 804d22c:	482a      	ldr	r0, [pc, #168]	; (804d2d8 <can_stm32_attach_isr+0x2f8>)
 804d22e:	1ac9      	subs	r1, r1, r3
 804d230:	0889      	lsrs	r1, r1, #2
 804d232:	0189      	lsls	r1, r1, #6
 804d234:	f041 0103 	orr.w	r1, r1, #3
 804d238:	f008 fed5 	bl	8055fe6 <log_0>
			filter_nr = CAN_NO_FREE_FILTER;
 804d23c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 804d240:	e014      	b.n	804d26c <can_stm32_attach_isr+0x28c>
			filter_nr += register_demand;
 804d242:	444c      	add	r4, r9
 804d244:	e748      	b.n	804d0d8 <can_stm32_attach_isr+0xf8>
	} while (filter_nr < CAN_MAX_NUMBER_OF_FILTERS);
 804d246:	2c37      	cmp	r4, #55	; 0x37
 804d248:	f77f af16 	ble.w	804d078 <can_stm32_attach_isr+0x98>
 804d24c:	e795      	b.n	804d17a <can_stm32_attach_isr+0x19a>
		can->FM1R = mode_reg;
 804d24e:	f8c5 a204 	str.w	sl, [r5, #516]	; 0x204
		can->FS1R = scale_reg;
 804d252:	f8c5 920c 	str.w	r9, [r5, #524]	; 0x20c
	can_stm32_set_filter_bank(filter_nr, &can->sFilterRegister[bank_nr],
 804d256:	9903      	ldr	r1, [sp, #12]
 804d258:	4632      	mov	r2, r6
 804d25a:	9b04      	ldr	r3, [sp, #16]
 804d25c:	4620      	mov	r0, r4
 804d25e:	3148      	adds	r1, #72	; 0x48
 804d260:	9300      	str	r3, [sp, #0]
 804d262:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 804d266:	9b05      	ldr	r3, [sp, #20]
 804d268:	f00b f8f8 	bl	805845c <can_stm32_set_filter_bank>
	can->FA1R |= bank_bit;
 804d26c:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 804d270:	ea48 0303 	orr.w	r3, r8, r3
 804d274:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
	can->FMR &= ~(CAN_FMR_FINIT);
 804d278:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 804d27c:	f023 0301 	bic.w	r3, r3, #1
 804d280:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
	if (filter_nr != CAN_NO_FREE_FILTER) {
 804d284:	1c63      	adds	r3, r4, #1
 804d286:	d008      	beq.n	804d29a <can_stm32_attach_isr+0x2ba>
		data->rx_cb[filter_index] = cb;
 804d288:	9b02      	ldr	r3, [sp, #8]
 804d28a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 804d28e:	9b07      	ldr	r3, [sp, #28]
 804d290:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		data->cb_arg[filter_index] = cb_arg;
 804d294:	9b08      	ldr	r3, [sp, #32]
 804d296:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	k_mutex_unlock(&data->inst_mutex);
 804d29a:	ee18 0a10 	vmov	r0, s16
 804d29e:	f00b f970 	bl	8058582 <k_mutex_unlock.isra.0>
}
 804d2a2:	4620      	mov	r0, r4
 804d2a4:	b00b      	add	sp, #44	; 0x2c
 804d2a6:	ecbd 8b02 	vpop	{d8}
 804d2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		filter_index_new = can_calc_filter_index(filter_nr, can->FM1R,
 804d2ae:	f8d5 1204 	ldr.w	r1, [r5, #516]	; 0x204
 804d2b2:	4620      	mov	r0, r4
 804d2b4:	f8d5 220c 	ldr.w	r2, [r5, #524]	; 0x20c
 804d2b8:	f7ff fde8 	bl	804ce8c <can_calc_filter_index>
		if (filter_index_new >= CAN_MAX_NUMBER_OF_FILTERS) {
 804d2bc:	2837      	cmp	r0, #55	; 0x37
		filter_index_new = can_calc_filter_index(filter_nr, can->FM1R,
 804d2be:	4607      	mov	r7, r0
		if (filter_index_new >= CAN_MAX_NUMBER_OF_FILTERS) {
 804d2c0:	ddc9      	ble.n	804d256 <can_stm32_attach_isr+0x276>
 804d2c2:	e7bb      	b.n	804d23c <can_stm32_attach_isr+0x25c>
 804d2c4:	080627be 	.word	0x080627be
 804d2c8:	200208e0 	.word	0x200208e0
 804d2cc:	200208c8 	.word	0x200208c8
 804d2d0:	0806277f 	.word	0x0806277f
 804d2d4:	080627ba 	.word	0x080627ba
 804d2d8:	08062799 	.word	0x08062799

0804d2dc <print_frame>:

	return i;
}

static void print_frame(struct zcan_frame *frame, void *arg)
{
 804d2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 804d2de:	4604      	mov	r4, r0
	const struct shell *shell = (const struct shell *)arg;

	shell_fprintf(shell, SHELL_NORMAL, "|0x%-8x|%s|%s|%d|",
 804d2e0:	4d1e      	ldr	r5, [pc, #120]	; (804d35c <print_frame+0x80>)
{
 804d2e2:	4608      	mov	r0, r1
	shell_fprintf(shell, SHELL_NORMAL, "|0x%-8x|%s|%s|%d|",
 804d2e4:	4a1e      	ldr	r2, [pc, #120]	; (804d360 <print_frame+0x84>)
		      frame->id,
		      frame->id_type == CAN_STANDARD_IDENTIFIER ? "std" : "ext",
 804d2e6:	78e1      	ldrb	r1, [r4, #3]
{
 804d2e8:	b087      	sub	sp, #28
	shell_fprintf(shell, SHELL_NORMAL, "|0x%-8x|%s|%s|%d|",
 804d2ea:	f994 6003 	ldrsb.w	r6, [r4, #3]
		      frame->id,
 804d2ee:	6823      	ldr	r3, [r4, #0]
	shell_fprintf(shell, SHELL_NORMAL, "|0x%-8x|%s|%s|%d|",
 804d2f0:	ea32 0226 	bics.w	r2, r2, r6, asr #32
 804d2f4:	bf28      	it	cs
 804d2f6:	462a      	movcs	r2, r5
 804d2f8:	f011 0f40 	tst.w	r1, #64	; 0x40
 804d2fc:	4d19      	ldr	r5, [pc, #100]	; (804d364 <print_frame+0x88>)
 804d2fe:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 804d302:	4919      	ldr	r1, [pc, #100]	; (804d368 <print_frame+0x8c>)
 804d304:	bf08      	it	eq
 804d306:	4629      	moveq	r1, r5
 804d308:	7925      	ldrb	r5, [r4, #4]
 804d30a:	9200      	str	r2, [sp, #0]
 804d30c:	4a17      	ldr	r2, [pc, #92]	; (804d36c <print_frame+0x90>)
 804d30e:	9005      	str	r0, [sp, #20]
	for (int i = 0; i < CAN_MAX_DLEN; i++) {
		if (i < frame->dlc) {
			shell_fprintf(shell, SHELL_NORMAL, " 0x%02x",
				      frame->data[i]);
		} else {
			shell_fprintf(shell, SHELL_NORMAL, "     ");
 804d310:	4e17      	ldr	r6, [pc, #92]	; (804d370 <print_frame+0x94>)
			shell_fprintf(shell, SHELL_NORMAL, " 0x%02x",
 804d312:	4f18      	ldr	r7, [pc, #96]	; (804d374 <print_frame+0x98>)
	shell_fprintf(shell, SHELL_NORMAL, "|0x%-8x|%s|%s|%d|",
 804d314:	e9cd 1501 	strd	r1, r5, [sp, #4]
 804d318:	2100      	movs	r1, #0
	for (int i = 0; i < CAN_MAX_DLEN; i++) {
 804d31a:	2500      	movs	r5, #0
	shell_fprintf(shell, SHELL_NORMAL, "|0x%-8x|%s|%s|%d|",
 804d31c:	f009 facf 	bl	80568be <shell_fprintf>
			shell_fprintf(shell, SHELL_NORMAL, " 0x%02x",
 804d320:	9805      	ldr	r0, [sp, #20]
		if (i < frame->dlc) {
 804d322:	7923      	ldrb	r3, [r4, #4]
 804d324:	42ab      	cmp	r3, r5
 804d326:	dd12      	ble.n	804d34e <print_frame+0x72>
				      frame->data[i]);
 804d328:	f104 0308 	add.w	r3, r4, #8
			shell_fprintf(shell, SHELL_NORMAL, " 0x%02x",
 804d32c:	463a      	mov	r2, r7
 804d32e:	2100      	movs	r1, #0
 804d330:	9005      	str	r0, [sp, #20]
 804d332:	5d5b      	ldrb	r3, [r3, r5]
 804d334:	f009 fac3 	bl	80568be <shell_fprintf>
	for (int i = 0; i < CAN_MAX_DLEN; i++) {
 804d338:	3501      	adds	r5, #1
			shell_fprintf(shell, SHELL_NORMAL, "     ");
 804d33a:	9805      	ldr	r0, [sp, #20]
	for (int i = 0; i < CAN_MAX_DLEN; i++) {
 804d33c:	2d08      	cmp	r5, #8
 804d33e:	d1f0      	bne.n	804d322 <print_frame+0x46>
		}
	}

	shell_fprintf(shell, SHELL_NORMAL, "|\n");
 804d340:	4a0d      	ldr	r2, [pc, #52]	; (804d378 <print_frame+0x9c>)
 804d342:	2100      	movs	r1, #0
}
 804d344:	b007      	add	sp, #28
 804d346:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	shell_fprintf(shell, SHELL_NORMAL, "|\n");
 804d34a:	f009 bab8 	b.w	80568be <shell_fprintf>
			shell_fprintf(shell, SHELL_NORMAL, "     ");
 804d34e:	4632      	mov	r2, r6
 804d350:	2100      	movs	r1, #0
 804d352:	9005      	str	r0, [sp, #20]
 804d354:	f009 fab3 	bl	80568be <shell_fprintf>
 804d358:	e7ee      	b.n	804d338 <print_frame+0x5c>
 804d35a:	bf00      	nop
 804d35c:	080627c6 	.word	0x080627c6
 804d360:	080627c2 	.word	0x080627c2
 804d364:	08062fda 	.word	0x08062fda
 804d368:	080627ca 	.word	0x080627ca
 804d36c:	080627ce 	.word	0x080627ce
 804d370:	08062fd8 	.word	0x08062fd8
 804d374:	080627e0 	.word	0x080627e0
 804d378:	08060669 	.word	0x08060669

0804d37c <read_frame_options>:
{
 804d37c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	char *arg = argv[pos];
 804d380:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
{
 804d384:	461e      	mov	r6, r3
 804d386:	460c      	mov	r4, r1
 804d388:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	if (arg[0] != '-') {
 804d38a:	782b      	ldrb	r3, [r5, #0]
 804d38c:	2b2d      	cmp	r3, #45	; 0x2d
 804d38e:	d120      	bne.n	804d3d2 <read_frame_options+0x56>
				*ext = true;
 804d390:	f04f 0801 	mov.w	r8, #1
				shell_error(shell, "unknown option %c", *arg);
 804d394:	f8df 9044 	ldr.w	r9, [pc, #68]	; 804d3dc <read_frame_options+0x60>
	for (arg = &arg[1]; *arg; arg++) {
 804d398:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 804d39c:	b90b      	cbnz	r3, 804d3a2 <read_frame_options+0x26>
	return ++pos;
 804d39e:	3401      	adds	r4, #1
 804d3a0:	e017      	b.n	804d3d2 <read_frame_options+0x56>
		switch (*arg) {
 804d3a2:	2b65      	cmp	r3, #101	; 0x65
 804d3a4:	d004      	beq.n	804d3b0 <read_frame_options+0x34>
 804d3a6:	2b72      	cmp	r3, #114	; 0x72
 804d3a8:	d10d      	bne.n	804d3c6 <read_frame_options+0x4a>
				*rtr = true;
 804d3aa:	f886 8000 	strb.w	r8, [r6]
 804d3ae:	e7f3      	b.n	804d398 <read_frame_options+0x1c>
			if (ext == NULL) {
 804d3b0:	b937      	cbnz	r7, 804d3c0 <read_frame_options+0x44>
				shell_error(shell, "unknown option %c", *arg);
 804d3b2:	464a      	mov	r2, r9
 804d3b4:	2102      	movs	r1, #2
 804d3b6:	9001      	str	r0, [sp, #4]
 804d3b8:	f009 fa81 	bl	80568be <shell_fprintf>
 804d3bc:	9801      	ldr	r0, [sp, #4]
 804d3be:	e7eb      	b.n	804d398 <read_frame_options+0x1c>
				*ext = true;
 804d3c0:	f887 8000 	strb.w	r8, [r7]
	for (arg = &arg[1]; *arg; arg++) {
 804d3c4:	e7e8      	b.n	804d398 <read_frame_options+0x1c>
			return -EINVAL;
 804d3c6:	f06f 0415 	mvn.w	r4, #21
			shell_error(shell, "unknown option %c", *arg);
 804d3ca:	4a04      	ldr	r2, [pc, #16]	; (804d3dc <read_frame_options+0x60>)
 804d3cc:	2102      	movs	r1, #2
 804d3ce:	f009 fa76 	bl	80568be <shell_fprintf>
}
 804d3d2:	4620      	mov	r0, r4
 804d3d4:	b003      	add	sp, #12
 804d3d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 804d3da:	bf00      	nop
 804d3dc:	080627e8 	.word	0x080627e8

0804d3e0 <cmd_detach>:

	return 0;
}

static int cmd_detach(const struct shell *shell, size_t argc, char **argv)
{
 804d3e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804d3e2:	4605      	mov	r5, r0
 804d3e4:	4616      	mov	r6, r2
	const struct device *can_dev;
	char *end_ptr;
	long id;

	can_dev = device_get_binding(argv[1]);
 804d3e6:	6850      	ldr	r0, [r2, #4]
 804d3e8:	f003 fe88 	bl	80510fc <z_impl_device_get_binding>
	if (!can_dev) {
 804d3ec:	4604      	mov	r4, r0
 804d3ee:	b948      	cbnz	r0, 804d404 <cmd_detach+0x24>
		shell_error(shell, "Can't get binding to device \"%s\"",
 804d3f0:	6873      	ldr	r3, [r6, #4]
 804d3f2:	2102      	movs	r1, #2
 804d3f4:	4a12      	ldr	r2, [pc, #72]	; (804d440 <cmd_detach+0x60>)
 804d3f6:	4628      	mov	r0, r5
 804d3f8:	f009 fa61 	bl	80568be <shell_fprintf>


	id = strtol(argv[2], &end_ptr, 0);
	if (*end_ptr != '\0') {
		shell_error(shell, "filter_id is not a number");
		return -EINVAL;
 804d3fc:	f06f 0015 	mvn.w	r0, #21
	}

	can_detach(can_dev, (int)id);

	return 0;
}
 804d400:	b002      	add	sp, #8
 804d402:	bd70      	pop	{r4, r5, r6, pc}
	id = strtol(argv[2], &end_ptr, 0);
 804d404:	68b0      	ldr	r0, [r6, #8]
 804d406:	2200      	movs	r2, #0
 804d408:	a901      	add	r1, sp, #4
 804d40a:	f005 fd6b 	bl	8052ee4 <strtol>
	if (*end_ptr != '\0') {
 804d40e:	9b01      	ldr	r3, [sp, #4]
	id = strtol(argv[2], &end_ptr, 0);
 804d410:	4606      	mov	r6, r0
	if (*end_ptr != '\0') {
 804d412:	781b      	ldrb	r3, [r3, #0]
 804d414:	b12b      	cbz	r3, 804d422 <cmd_detach+0x42>
		shell_error(shell, "filter_id is not a number");
 804d416:	4a0b      	ldr	r2, [pc, #44]	; (804d444 <cmd_detach+0x64>)
 804d418:	2102      	movs	r1, #2
 804d41a:	4628      	mov	r0, r5
 804d41c:	f009 fa4f 	bl	80568be <shell_fprintf>
 804d420:	e7ec      	b.n	804d3fc <cmd_detach+0x1c>
	if (id < 0) {
 804d422:	2800      	cmp	r0, #0
 804d424:	da04      	bge.n	804d430 <cmd_detach+0x50>
		shell_error(shell, "filter_id must not be negative");
 804d426:	4a08      	ldr	r2, [pc, #32]	; (804d448 <cmd_detach+0x68>)
 804d428:	2102      	movs	r1, #2
 804d42a:	4628      	mov	r0, r5
 804d42c:	f009 fa47 	bl	80568be <shell_fprintf>
	return api->detach(dev, filter_id);
 804d430:	68a3      	ldr	r3, [r4, #8]
 804d432:	4620      	mov	r0, r4
 804d434:	4631      	mov	r1, r6
 804d436:	691b      	ldr	r3, [r3, #16]
 804d438:	4798      	blx	r3
	return 0;
 804d43a:	2000      	movs	r0, #0
 804d43c:	e7e0      	b.n	804d400 <cmd_detach+0x20>
 804d43e:	bf00      	nop
 804d440:	080627fb 	.word	0x080627fb
 804d444:	0806281d 	.word	0x0806281d
 804d448:	08062838 	.word	0x08062838

0804d44c <read_id>:
{
 804d44c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 804d44e:	460c      	mov	r4, r1
 804d450:	4605      	mov	r5, r0
 804d452:	4610      	mov	r0, r2
	val = strtol(argv[pos], &end_ptr, 0);
 804d454:	a903      	add	r1, sp, #12
 804d456:	2200      	movs	r2, #0
{
 804d458:	461e      	mov	r6, r3
	val = strtol(argv[pos], &end_ptr, 0);
 804d45a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 804d45e:	f005 fd41 	bl	8052ee4 <strtol>
	if (*end_ptr != '\0') {
 804d462:	9b03      	ldr	r3, [sp, #12]
 804d464:	781b      	ldrb	r3, [r3, #0]
 804d466:	b143      	cbz	r3, 804d47a <read_id+0x2e>
		shell_error(shell, "id is not a number");
 804d468:	4a14      	ldr	r2, [pc, #80]	; (804d4bc <read_id+0x70>)
 804d46a:	2102      	movs	r1, #2
 804d46c:	4628      	mov	r0, r5
 804d46e:	f009 fa26 	bl	80568be <shell_fprintf>
		return -EINVAL;
 804d472:	f06f 0015 	mvn.w	r0, #21
}
 804d476:	b004      	add	sp, #16
 804d478:	bd70      	pop	{r4, r5, r6, pc}
	if (val < 0 || val > CAN_EXT_ID_MASK ||
 804d47a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 804d47e:	d207      	bcs.n	804d490 <read_id+0x44>
 804d480:	b9be      	cbnz	r6, 804d4b2 <read_id+0x66>
	   (!ext && val > CAN_MAX_STD_ID)) {
 804d482:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 804d486:	db14      	blt.n	804d4b2 <read_id+0x66>
		shell_error(shell, "Id invalid. %sid must not be negative or "
 804d488:	4b0d      	ldr	r3, [pc, #52]	; (804d4c0 <read_id+0x74>)
 804d48a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 804d48e:	e009      	b.n	804d4a4 <read_id+0x58>
 804d490:	2e00      	cmp	r6, #0
 804d492:	4a0c      	ldr	r2, [pc, #48]	; (804d4c4 <read_id+0x78>)
 804d494:	4b0a      	ldr	r3, [pc, #40]	; (804d4c0 <read_id+0x74>)
 804d496:	bf18      	it	ne
 804d498:	4613      	movne	r3, r2
 804d49a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 804d49e:	bf18      	it	ne
 804d4a0:	f06f 4260 	mvnne.w	r2, #3758096384	; 0xe0000000
 804d4a4:	9200      	str	r2, [sp, #0]
 804d4a6:	2102      	movs	r1, #2
 804d4a8:	4a07      	ldr	r2, [pc, #28]	; (804d4c8 <read_id+0x7c>)
 804d4aa:	4628      	mov	r0, r5
 804d4ac:	f009 fa07 	bl	80568be <shell_fprintf>
 804d4b0:	e7df      	b.n	804d472 <read_id+0x26>
	*id = (uint32_t)val;
 804d4b2:	9b08      	ldr	r3, [sp, #32]
 804d4b4:	6018      	str	r0, [r3, #0]
	return ++pos;
 804d4b6:	1c60      	adds	r0, r4, #1
 804d4b8:	e7dd      	b.n	804d476 <read_id+0x2a>
 804d4ba:	bf00      	nop
 804d4bc:	08062824 	.word	0x08062824
 804d4c0:	08060045 	.word	0x08060045
 804d4c4:	08062858 	.word	0x08062858
 804d4c8:	0806285d 	.word	0x0806285d

0804d4cc <cmd_config>:
{
 804d4cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 804d4d0:	4606      	mov	r6, r0
 804d4d2:	4617      	mov	r7, r2
	can_dev = device_get_binding(argv[pos]);
 804d4d4:	6850      	ldr	r0, [r2, #4]
 804d4d6:	f003 fe11 	bl	80510fc <z_impl_device_get_binding>
	if (!can_dev) {
 804d4da:	4605      	mov	r5, r0
 804d4dc:	b958      	cbnz	r0, 804d4f6 <cmd_config+0x2a>
		shell_error(shell, "Can't get binding to device \"%s\"",
 804d4de:	687b      	ldr	r3, [r7, #4]
 804d4e0:	4a32      	ldr	r2, [pc, #200]	; (804d5ac <cmd_config+0xe0>)
			shell_error(shell, "unknown option %c", *arg);
 804d4e2:	2102      	movs	r1, #2
 804d4e4:	4630      	mov	r0, r6
 804d4e6:	f009 f9ea 	bl	80568be <shell_fprintf>
		return -EINVAL;
 804d4ea:	f06f 0415 	mvn.w	r4, #21
}
 804d4ee:	4620      	mov	r0, r4
 804d4f0:	b004      	add	sp, #16
 804d4f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	char *arg = argv[pos];
 804d4f6:	68ba      	ldr	r2, [r7, #8]
	if (arg[0] != '-') {
 804d4f8:	7813      	ldrb	r3, [r2, #0]
 804d4fa:	2b2d      	cmp	r3, #45	; 0x2d
 804d4fc:	d127      	bne.n	804d54e <cmd_config+0x82>
	bool silent = false, loopback = false;
 804d4fe:	2100      	movs	r1, #0
 804d500:	4608      	mov	r0, r1
	for (arg = &arg[1]; *arg; arg++) {
 804d502:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 804d506:	b933      	cbnz	r3, 804d516 <cmd_config+0x4a>
	if (silent && loopback) {
 804d508:	b978      	cbnz	r0, 804d52a <cmd_config+0x5e>
	return ++pos;
 804d50a:	2900      	cmp	r1, #0
 804d50c:	f04f 0803 	mov.w	r8, #3
 804d510:	bf18      	it	ne
 804d512:	2302      	movne	r3, #2
 804d514:	e00d      	b.n	804d532 <cmd_config+0x66>
		switch (*arg) {
 804d516:	2b6c      	cmp	r3, #108	; 0x6c
 804d518:	d003      	beq.n	804d522 <cmd_config+0x56>
 804d51a:	2b73      	cmp	r3, #115	; 0x73
 804d51c:	d003      	beq.n	804d526 <cmd_config+0x5a>
			shell_error(shell, "unknown option %c", *arg);
 804d51e:	4a24      	ldr	r2, [pc, #144]	; (804d5b0 <cmd_config+0xe4>)
 804d520:	e7df      	b.n	804d4e2 <cmd_config+0x16>
		switch (*arg) {
 804d522:	2101      	movs	r1, #1
 804d524:	e7ed      	b.n	804d502 <cmd_config+0x36>
				*silent = true;
 804d526:	2001      	movs	r0, #1
	for (arg = &arg[1]; *arg; arg++) {
 804d528:	e7eb      	b.n	804d502 <cmd_config+0x36>
	return ++pos;
 804d52a:	f04f 0803 	mov.w	r8, #3
	if (silent && loopback) {
 804d52e:	b991      	cbnz	r1, 804d556 <cmd_config+0x8a>
		mode = CAN_SILENT_MODE;
 804d530:	2301      	movs	r3, #1
				      enum can_mode mode)
{
	const struct can_driver_api *api =
		(const struct can_driver_api *)dev->api;

	return api->set_mode(dev, mode);
 804d532:	68aa      	ldr	r2, [r5, #8]
 804d534:	4619      	mov	r1, r3
 804d536:	4628      	mov	r0, r5
 804d538:	6812      	ldr	r2, [r2, #0]
 804d53a:	4790      	blx	r2
	if (ret) {
 804d53c:	4604      	mov	r4, r0
 804d53e:	b160      	cbz	r0, 804d55a <cmd_config+0x8e>
		shell_error(shell, "Failed to set mode [%d]",
 804d540:	4603      	mov	r3, r0
 804d542:	4a1c      	ldr	r2, [pc, #112]	; (804d5b4 <cmd_config+0xe8>)
		shell_error(shell, "Failed to set bitrate [%d]",
 804d544:	2102      	movs	r1, #2
 804d546:	4630      	mov	r0, r6
 804d548:	f009 f9b9 	bl	80568be <shell_fprintf>
		return ret;
 804d54c:	e7cf      	b.n	804d4ee <cmd_config+0x22>
		return pos;
 804d54e:	f04f 0802 	mov.w	r8, #2
		mode = CAN_NORMAL_MODE;
 804d552:	2300      	movs	r3, #0
 804d554:	e7ed      	b.n	804d532 <cmd_config+0x66>
		mode = CAN_SILENT_LOOPBACK_MODE;
 804d556:	4643      	mov	r3, r8
 804d558:	e7eb      	b.n	804d532 <cmd_config+0x66>
	val = strtol(argv[pos], &end_ptr, 0);
 804d55a:	4602      	mov	r2, r0
 804d55c:	a901      	add	r1, sp, #4
 804d55e:	f857 0028 	ldr.w	r0, [r7, r8, lsl #2]
 804d562:	f005 fcbf 	bl	8052ee4 <strtol>
	if (*end_ptr != '\0') {
 804d566:	9b01      	ldr	r3, [sp, #4]
	val = strtol(argv[pos], &end_ptr, 0);
 804d568:	4602      	mov	r2, r0
	if (*end_ptr != '\0') {
 804d56a:	781b      	ldrb	r3, [r3, #0]
 804d56c:	b12b      	cbz	r3, 804d57a <cmd_config+0xae>
		shell_error(shell, "bitrate is not a number");
 804d56e:	4a12      	ldr	r2, [pc, #72]	; (804d5b8 <cmd_config+0xec>)
 804d570:	2102      	movs	r1, #2
 804d572:	4630      	mov	r0, r6
 804d574:	f009 f9a3 	bl	80568be <shell_fprintf>
 804d578:	e7b7      	b.n	804d4ea <cmd_config+0x1e>
#ifdef CONFIG_CAN_FD_MODE
	struct can_timing timing_data;
#endif
	int ret;

	ret = can_calc_timing(dev, &timing, bitrate, 875);
 804d57a:	f240 336b 	movw	r3, #875	; 0x36b
 804d57e:	a901      	add	r1, sp, #4
 804d580:	4628      	mov	r0, r5
 804d582:	f7ff f899 	bl	804c6b8 <can_calc_timing>
	if (ret < 0) {
 804d586:	2800      	cmp	r0, #0
 804d588:	da04      	bge.n	804d594 <cmd_config+0xc8>
		return -EINVAL;
 804d58a:	f06f 0415 	mvn.w	r4, #21
		shell_error(shell, "Failed to set bitrate [%d]",
 804d58e:	4623      	mov	r3, r4
 804d590:	4a0a      	ldr	r2, [pc, #40]	; (804d5bc <cmd_config+0xf0>)
 804d592:	e7d7      	b.n	804d544 <cmd_config+0x78>
	}

	timing.sjw = CAN_SJW_NO_CHANGE;
 804d594:	f8ad 4004 	strh.w	r4, [sp, #4]
	return api->set_timing(dev, timing, timing_data);
 804d598:	68ab      	ldr	r3, [r5, #8]
 804d59a:	4622      	mov	r2, r4
 804d59c:	a901      	add	r1, sp, #4
 804d59e:	4628      	mov	r0, r5
 804d5a0:	685b      	ldr	r3, [r3, #4]
 804d5a2:	4798      	blx	r3
	if (ret) {
 804d5a4:	4604      	mov	r4, r0
 804d5a6:	2800      	cmp	r0, #0
 804d5a8:	d0a1      	beq.n	804d4ee <cmd_config+0x22>
 804d5aa:	e7f0      	b.n	804d58e <cmd_config+0xc2>
 804d5ac:	080627fb 	.word	0x080627fb
 804d5b0:	080627e8 	.word	0x080627e8
 804d5b4:	08062898 	.word	0x08062898
 804d5b8:	080628b1 	.word	0x080628b1
 804d5bc:	080628ca 	.word	0x080628ca

0804d5c0 <cmd_attach>:
{
 804d5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bool rtr = false, ext = false, rtr_mask = false;
 804d5c4:	f04f 0900 	mov.w	r9, #0
{
 804d5c8:	b08a      	sub	sp, #40	; 0x28
 804d5ca:	4604      	mov	r4, r0
 804d5cc:	4688      	mov	r8, r1
 804d5ce:	4616      	mov	r6, r2
	can_dev = device_get_binding(argv[pos]);
 804d5d0:	6850      	ldr	r0, [r2, #4]
	bool rtr = false, ext = false, rtr_mask = false;
 804d5d2:	f88d 9015 	strb.w	r9, [sp, #21]
 804d5d6:	f88d 9016 	strb.w	r9, [sp, #22]
 804d5da:	f88d 9017 	strb.w	r9, [sp, #23]
 804d5de:	f003 fd8d 	bl	80510fc <z_impl_device_get_binding>
	if (!can_dev) {
 804d5e2:	4607      	mov	r7, r0
 804d5e4:	b950      	cbnz	r0, 804d5fc <cmd_attach+0x3c>
		shell_error(shell, "Can't get binding to device \"%s\"",
 804d5e6:	6873      	ldr	r3, [r6, #4]
 804d5e8:	2102      	movs	r1, #2
 804d5ea:	4a5f      	ldr	r2, [pc, #380]	; (804d768 <cmd_attach+0x1a8>)
 804d5ec:	4620      	mov	r0, r4
 804d5ee:	f009 f966 	bl	80568be <shell_fprintf>
			return -EINVAL;
 804d5f2:	f06f 0015 	mvn.w	r0, #21
}
 804d5f6:	b00a      	add	sp, #40	; 0x28
 804d5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	pos = read_frame_options(shell, pos, argv, &rtr, &ext);
 804d5fc:	f10d 0316 	add.w	r3, sp, #22
 804d600:	2102      	movs	r1, #2
 804d602:	4632      	mov	r2, r6
 804d604:	4620      	mov	r0, r4
 804d606:	9300      	str	r3, [sp, #0]
 804d608:	f10d 0315 	add.w	r3, sp, #21
 804d60c:	f7ff feb6 	bl	804d37c <read_frame_options>
	if (pos < 0) {
 804d610:	1e01      	subs	r1, r0, #0
 804d612:	dbee      	blt.n	804d5f2 <cmd_attach+0x32>
	filter.id_type = ext ? CAN_EXTENDED_IDENTIFIER : CAN_STANDARD_IDENTIFIER;
 804d614:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
 804d618:	f89d 3016 	ldrb.w	r3, [sp, #22]
	filter.rtr = rtr ? CAN_REMOTEREQUEST : CAN_DATAFRAME;
 804d61c:	f89d 0015 	ldrb.w	r0, [sp, #21]
	filter.id_type = ext ? CAN_EXTENDED_IDENTIFIER : CAN_STANDARD_IDENTIFIER;
 804d620:	f363 12c7 	bfi	r2, r3, #7, #1
	filter.rtr = rtr ? CAN_REMOTEREQUEST : CAN_DATAFRAME;
 804d624:	f360 1286 	bfi	r2, r0, #6, #1
	pos = read_id(shell, pos, argv, ext, &id);
 804d628:	4620      	mov	r0, r4
	filter.rtr = rtr ? CAN_REMOTEREQUEST : CAN_DATAFRAME;
 804d62a:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	pos = read_id(shell, pos, argv, ext, &id);
 804d62e:	aa06      	add	r2, sp, #24
 804d630:	9200      	str	r2, [sp, #0]
 804d632:	4632      	mov	r2, r6
 804d634:	f7ff ff0a 	bl	804d44c <read_id>
	if (pos < 0) {
 804d638:	1e05      	subs	r5, r0, #0
 804d63a:	dbda      	blt.n	804d5f2 <cmd_attach+0x32>
	filter.id = id;
 804d63c:	9b08      	ldr	r3, [sp, #32]
	if (pos != argc) {
 804d63e:	4545      	cmp	r5, r8
	filter.id = id;
 804d640:	9a06      	ldr	r2, [sp, #24]
		pos = read_mask(shell, pos, argv, ext, &mask);
 804d642:	f89d a016 	ldrb.w	sl, [sp, #22]
	filter.id = id;
 804d646:	f362 031c 	bfi	r3, r2, #0, #29
 804d64a:	9308      	str	r3, [sp, #32]
	if (pos != argc) {
 804d64c:	d067      	beq.n	804d71e <cmd_attach+0x15e>
	val = strtol(argv[pos], &end_ptr, 0);
 804d64e:	464a      	mov	r2, r9
 804d650:	a907      	add	r1, sp, #28
 804d652:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 804d656:	f005 fc45 	bl	8052ee4 <strtol>
	if (*end_ptr != '\0') {
 804d65a:	9b07      	ldr	r3, [sp, #28]
 804d65c:	781b      	ldrb	r3, [r3, #0]
 804d65e:	b12b      	cbz	r3, 804d66c <cmd_attach+0xac>
		shell_error(shell, "Mask is not a number");
 804d660:	4a42      	ldr	r2, [pc, #264]	; (804d76c <cmd_attach+0x1ac>)
 804d662:	2102      	movs	r1, #2
 804d664:	4620      	mov	r0, r4
 804d666:	f009 f92a 	bl	80568be <shell_fprintf>
		if (pos < 0) {
 804d66a:	e7c2      	b.n	804d5f2 <cmd_attach+0x32>
	if (val < 0 || val > CAN_EXT_ID_MASK ||
 804d66c:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 804d670:	d209      	bcs.n	804d686 <cmd_attach+0xc6>
 804d672:	f1ba 0f00 	cmp.w	sl, #0
 804d676:	d118      	bne.n	804d6aa <cmd_attach+0xea>
	   (!ext && val > CAN_MAX_STD_ID)) {
 804d678:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 804d67c:	db15      	blt.n	804d6aa <cmd_attach+0xea>
		shell_error(shell, "Mask invalid. %smask must not be negative "
 804d67e:	4b3c      	ldr	r3, [pc, #240]	; (804d770 <cmd_attach+0x1b0>)
 804d680:	f240 72ff 	movw	r2, #2047	; 0x7ff
 804d684:	e00a      	b.n	804d69c <cmd_attach+0xdc>
 804d686:	f1ba 0f00 	cmp.w	sl, #0
 804d68a:	4a3a      	ldr	r2, [pc, #232]	; (804d774 <cmd_attach+0x1b4>)
 804d68c:	4b38      	ldr	r3, [pc, #224]	; (804d770 <cmd_attach+0x1b0>)
 804d68e:	bf18      	it	ne
 804d690:	4613      	movne	r3, r2
 804d692:	f240 72ff 	movw	r2, #2047	; 0x7ff
 804d696:	bf18      	it	ne
 804d698:	f06f 4260 	mvnne.w	r2, #3758096384	; 0xe0000000
 804d69c:	9200      	str	r2, [sp, #0]
 804d69e:	2102      	movs	r1, #2
 804d6a0:	4a35      	ldr	r2, [pc, #212]	; (804d778 <cmd_attach+0x1b8>)
 804d6a2:	4620      	mov	r0, r4
 804d6a4:	f009 f90b 	bl	80568be <shell_fprintf>
 804d6a8:	e7a3      	b.n	804d5f2 <cmd_attach+0x32>
		if (pos < 0) {
 804d6aa:	1c69      	adds	r1, r5, #1
 804d6ac:	d4a1      	bmi.n	804d5f2 <cmd_attach+0x32>
		filter.id_mask = mask;
 804d6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (pos != argc) {
 804d6b0:	4541      	cmp	r1, r8
		filter.id_mask = mask;
 804d6b2:	f360 031c 	bfi	r3, r0, #0, #29
 804d6b6:	9309      	str	r3, [sp, #36]	; 0x24
	if (pos != argc) {
 804d6b8:	d13d      	bne.n	804d736 <cmd_attach+0x176>
	filter.rtr_mask = rtr_mask;
 804d6ba:	f89d 2017 	ldrb.w	r2, [sp, #23]
 804d6be:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
	shell_print(shell, "Attach filter with ID 0x%x (%s id) and mask 0x%x "
 804d6c2:	f89d 0016 	ldrb.w	r0, [sp, #22]
	filter.rtr_mask = rtr_mask;
 804d6c6:	f362 1386 	bfi	r3, r2, #6, #1
	shell_print(shell, "Attach filter with ID 0x%x (%s id) and mask 0x%x "
 804d6ca:	492c      	ldr	r1, [pc, #176]	; (804d77c <cmd_attach+0x1bc>)
 804d6cc:	9202      	str	r2, [sp, #8]
	filter.rtr_mask = rtr_mask;
 804d6ce:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	shell_print(shell, "Attach filter with ID 0x%x (%s id) and mask 0x%x "
 804d6d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804d6d4:	4b2a      	ldr	r3, [pc, #168]	; (804d780 <cmd_attach+0x1c0>)
 804d6d6:	f3c2 021c 	ubfx	r2, r2, #0, #29
 804d6da:	2800      	cmp	r0, #0
 804d6dc:	bf08      	it	eq
 804d6de:	460b      	moveq	r3, r1
 804d6e0:	2100      	movs	r1, #0
 804d6e2:	4620      	mov	r0, r4
 804d6e4:	e9cd 3200 	strd	r3, r2, [sp]
 804d6e8:	9b08      	ldr	r3, [sp, #32]
 804d6ea:	4a26      	ldr	r2, [pc, #152]	; (804d784 <cmd_attach+0x1c4>)
 804d6ec:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 804d6f0:	f009 f8e5 	bl	80568be <shell_fprintf>
	ret = can_attach_workq(can_dev, &k_sys_work_q, &work, print_frame,
 804d6f4:	ab08      	add	r3, sp, #32
 804d6f6:	4a24      	ldr	r2, [pc, #144]	; (804d788 <cmd_attach+0x1c8>)
 804d6f8:	4638      	mov	r0, r7
 804d6fa:	4924      	ldr	r1, [pc, #144]	; (804d78c <cmd_attach+0x1cc>)
 804d6fc:	e9cd 4300 	strd	r4, r3, [sp]
 804d700:	4b23      	ldr	r3, [pc, #140]	; (804d790 <cmd_attach+0x1d0>)
 804d702:	f7fe ffb5 	bl	804c670 <can_attach_workq>
	if (ret < 0) {
 804d706:	1e03      	subs	r3, r0, #0
 804d708:	da26      	bge.n	804d758 <cmd_attach+0x198>
		if (ret == CAN_NO_FREE_FILTER) {
 804d70a:	1c5a      	adds	r2, r3, #1
 804d70c:	d11e      	bne.n	804d74c <cmd_attach+0x18c>
			shell_error(shell, "Can't attach, no free filter left");
 804d70e:	4a21      	ldr	r2, [pc, #132]	; (804d794 <cmd_attach+0x1d4>)
 804d710:	2102      	movs	r1, #2
 804d712:	4620      	mov	r0, r4
 804d714:	f009 f8d3 	bl	80568be <shell_fprintf>
		return -EIO;
 804d718:	f06f 0004 	mvn.w	r0, #4
 804d71c:	e76b      	b.n	804d5f6 <cmd_attach+0x36>
		filter.id_mask = ext ? CAN_EXT_ID_MASK : CAN_STD_ID_MASK;
 804d71e:	f1ba 0f00 	cmp.w	sl, #0
 804d722:	f240 73ff 	movw	r3, #2047	; 0x7ff
 804d726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804d728:	bf18      	it	ne
 804d72a:	f06f 4360 	mvnne.w	r3, #3758096384	; 0xe0000000
 804d72e:	f363 021c 	bfi	r2, r3, #0, #29
 804d732:	9209      	str	r2, [sp, #36]	; 0x24
	if (pos != argc) {
 804d734:	e7c1      	b.n	804d6ba <cmd_attach+0xfa>
		pos = read_frame_options(shell, pos, argv, &rtr_mask, NULL);
 804d736:	2300      	movs	r3, #0
 804d738:	4632      	mov	r2, r6
 804d73a:	4620      	mov	r0, r4
 804d73c:	9300      	str	r3, [sp, #0]
 804d73e:	f10d 0317 	add.w	r3, sp, #23
 804d742:	f7ff fe1b 	bl	804d37c <read_frame_options>
		if (pos < 0) {
 804d746:	2800      	cmp	r0, #0
 804d748:	dab7      	bge.n	804d6ba <cmd_attach+0xfa>
 804d74a:	e752      	b.n	804d5f2 <cmd_attach+0x32>
			shell_error(shell, "Failed to attach filter [%d]", ret);
 804d74c:	4a12      	ldr	r2, [pc, #72]	; (804d798 <cmd_attach+0x1d8>)
 804d74e:	2102      	movs	r1, #2
 804d750:	4620      	mov	r0, r4
 804d752:	f009 f8b4 	bl	80568be <shell_fprintf>
 804d756:	e7df      	b.n	804d718 <cmd_attach+0x158>
	shell_print(shell, "Filter ID: %d", ret);
 804d758:	4620      	mov	r0, r4
 804d75a:	4a10      	ldr	r2, [pc, #64]	; (804d79c <cmd_attach+0x1dc>)
 804d75c:	2100      	movs	r1, #0
 804d75e:	f009 f8ae 	bl	80568be <shell_fprintf>
	return 0;
 804d762:	2000      	movs	r0, #0
 804d764:	e747      	b.n	804d5f6 <cmd_attach+0x36>
 804d766:	bf00      	nop
 804d768:	080627fb 	.word	0x080627fb
 804d76c:	080628f8 	.word	0x080628f8
 804d770:	08060045 	.word	0x08060045
 804d774:	08062858 	.word	0x08062858
 804d778:	0806290e 	.word	0x0806290e
 804d77c:	080628ef 	.word	0x080628ef
 804d780:	080628e6 	.word	0x080628e6
 804d784:	0806294d 	.word	0x0806294d
 804d788:	20037af0 	.word	0x20037af0
 804d78c:	200228d0 	.word	0x200228d0
 804d790:	0804d2dd 	.word	0x0804d2dd
 804d794:	08062988 	.word	0x08062988
 804d798:	080629ab 	.word	0x080629ab
 804d79c:	080629c9 	.word	0x080629c9

0804d7a0 <cmd_send>:
{
 804d7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bool rtr = false, ext = false;
 804d7a4:	2300      	movs	r3, #0
{
 804d7a6:	b08a      	sub	sp, #40	; 0x28
 804d7a8:	4605      	mov	r5, r0
 804d7aa:	4689      	mov	r9, r1
 804d7ac:	4616      	mov	r6, r2
	can_dev = device_get_binding(argv[pos]);
 804d7ae:	6850      	ldr	r0, [r2, #4]
	bool rtr = false, ext = false;
 804d7b0:	f88d 300e 	strb.w	r3, [sp, #14]
 804d7b4:	f88d 300f 	strb.w	r3, [sp, #15]
 804d7b8:	f003 fca0 	bl	80510fc <z_impl_device_get_binding>
	if (!can_dev) {
 804d7bc:	4680      	mov	r8, r0
 804d7be:	b930      	cbnz	r0, 804d7ce <cmd_send+0x2e>
		shell_error(shell, "Can't get binding to device \"%s\"",
 804d7c0:	6873      	ldr	r3, [r6, #4]
 804d7c2:	4a41      	ldr	r2, [pc, #260]	; (804d8c8 <cmd_send+0x128>)
		shell_error(shell, "Too many databytes. Max is %d",
 804d7c4:	2102      	movs	r1, #2
 804d7c6:	4628      	mov	r0, r5
 804d7c8:	f009 f879 	bl	80568be <shell_fprintf>
	if (pos < 0) {
 804d7cc:	e00b      	b.n	804d7e6 <cmd_send+0x46>
	pos = read_frame_options(shell, pos, argv, &rtr, &ext);
 804d7ce:	f10d 030f 	add.w	r3, sp, #15
 804d7d2:	2102      	movs	r1, #2
 804d7d4:	4632      	mov	r2, r6
 804d7d6:	4628      	mov	r0, r5
 804d7d8:	9300      	str	r3, [sp, #0]
 804d7da:	f10d 030e 	add.w	r3, sp, #14
 804d7de:	f7ff fdcd 	bl	804d37c <read_frame_options>
	if (pos < 0) {
 804d7e2:	1e01      	subs	r1, r0, #0
 804d7e4:	da04      	bge.n	804d7f0 <cmd_send+0x50>
		return -EINVAL;
 804d7e6:	f06f 0015 	mvn.w	r0, #21
}
 804d7ea:	b00a      	add	sp, #40	; 0x28
 804d7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	frame.id_type = ext ? CAN_EXTENDED_IDENTIFIER : CAN_STANDARD_IDENTIFIER;
 804d7f0:	f89d 201b 	ldrb.w	r2, [sp, #27]
 804d7f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
	frame.rtr = rtr ? CAN_REMOTEREQUEST : CAN_DATAFRAME;
 804d7f8:	f89d 000e 	ldrb.w	r0, [sp, #14]
	frame.id_type = ext ? CAN_EXTENDED_IDENTIFIER : CAN_STANDARD_IDENTIFIER;
 804d7fc:	f363 12c7 	bfi	r2, r3, #7, #1
	frame.rtr = rtr ? CAN_REMOTEREQUEST : CAN_DATAFRAME;
 804d800:	f360 1286 	bfi	r2, r0, #6, #1
	pos = read_id(shell, pos, argv, ext, &id);
 804d804:	4628      	mov	r0, r5
	frame.rtr = rtr ? CAN_REMOTEREQUEST : CAN_DATAFRAME;
 804d806:	f88d 201b 	strb.w	r2, [sp, #27]
	pos = read_id(shell, pos, argv, ext, &id);
 804d80a:	aa04      	add	r2, sp, #16
 804d80c:	9200      	str	r2, [sp, #0]
 804d80e:	4632      	mov	r2, r6
 804d810:	f7ff fe1c 	bl	804d44c <read_id>
	if (pos < 0) {
 804d814:	1e04      	subs	r4, r0, #0
 804d816:	dbe6      	blt.n	804d7e6 <cmd_send+0x46>
	frame.id = id;
 804d818:	9b06      	ldr	r3, [sp, #24]
 804d81a:	9a04      	ldr	r2, [sp, #16]
 804d81c:	f362 031c 	bfi	r3, r2, #0, #29
 804d820:	9306      	str	r3, [sp, #24]
	if (argc - pos > CAN_MAX_DLC) {
 804d822:	eba9 0304 	sub.w	r3, r9, r4
 804d826:	2b08      	cmp	r3, #8
 804d828:	d94a      	bls.n	804d8c0 <cmd_send+0x120>
		shell_error(shell, "Too many databytes. Max is %d",
 804d82a:	2308      	movs	r3, #8
 804d82c:	4a27      	ldr	r2, [pc, #156]	; (804d8cc <cmd_send+0x12c>)
 804d82e:	e7c9      	b.n	804d7c4 <cmd_send+0x24>
		val = strtol(argv[i], &end_ptr, 0);
 804d830:	2200      	movs	r2, #0
 804d832:	a905      	add	r1, sp, #20
 804d834:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
 804d838:	f005 fb54 	bl	8052ee4 <strtol>
		if (*end_ptr != '\0') {
 804d83c:	9b05      	ldr	r3, [sp, #20]
 804d83e:	781b      	ldrb	r3, [r3, #0]
 804d840:	b12b      	cbz	r3, 804d84e <cmd_send+0xae>
			shell_error(shell, "Data bytes must be numbers");
 804d842:	4a23      	ldr	r2, [pc, #140]	; (804d8d0 <cmd_send+0x130>)
			shell_error(shell, "A data bytes must not be > 0xFF");
 804d844:	2102      	movs	r1, #2
 804d846:	4628      	mov	r0, r5
 804d848:	f009 f839 	bl	80568be <shell_fprintf>
			return -EINVAL;
 804d84c:	e7cb      	b.n	804d7e6 <cmd_send+0x46>
		if (val & ~0xFFL) {
 804d84e:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 804d852:	d001      	beq.n	804d858 <cmd_send+0xb8>
			shell_error(shell, "A data bytes must not be > 0xFF");
 804d854:	4a1f      	ldr	r2, [pc, #124]	; (804d8d4 <cmd_send+0x134>)
 804d856:	e7f5      	b.n	804d844 <cmd_send+0xa4>
	for (i = pos; i < argc; i++) {
 804d858:	3701      	adds	r7, #1
		*data_ptr = val;
 804d85a:	f80a 0b01 	strb.w	r0, [sl], #1
	for (i = pos; i < argc; i++) {
 804d85e:	45b9      	cmp	r9, r7
 804d860:	d8e6      	bhi.n	804d830 <cmd_send+0x90>
	*dlc = i - pos;
 804d862:	1b3c      	subs	r4, r7, r4
	if (pos < 0) {
 804d864:	2f00      	cmp	r7, #0
	*dlc = i - pos;
 804d866:	b2e4      	uxtb	r4, r4
 804d868:	f88d 401c 	strb.w	r4, [sp, #28]
	if (pos < 0) {
 804d86c:	dbbb      	blt.n	804d7e6 <cmd_send+0x46>
	shell_print(shell, "Send frame with ID 0x%x (%s id) and %d data bytes",
 804d86e:	f89d 100f 	ldrb.w	r1, [sp, #15]
 804d872:	4628      	mov	r0, r5
 804d874:	4a18      	ldr	r2, [pc, #96]	; (804d8d8 <cmd_send+0x138>)
 804d876:	4b19      	ldr	r3, [pc, #100]	; (804d8dc <cmd_send+0x13c>)
 804d878:	2900      	cmp	r1, #0
 804d87a:	bf08      	it	eq
 804d87c:	4613      	moveq	r3, r2
 804d87e:	4a18      	ldr	r2, [pc, #96]	; (804d8e0 <cmd_send+0x140>)
 804d880:	2100      	movs	r1, #0
 804d882:	e9cd 3400 	strd	r3, r4, [sp]
 804d886:	9b06      	ldr	r3, [sp, #24]
 804d888:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 804d88c:	f009 f817 	bl	80568be <shell_fprintf>
	return api->send(dev, msg, timeout, callback_isr, callback_arg);
 804d890:	2300      	movs	r3, #0
 804d892:	f8d8 2008 	ldr.w	r2, [r8, #8]
 804d896:	a906      	add	r1, sp, #24
 804d898:	4640      	mov	r0, r8
 804d89a:	e9cd 3300 	strd	r3, r3, [sp]
 804d89e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804d8a2:	6894      	ldr	r4, [r2, #8]
 804d8a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804d8a8:	47a0      	blx	r4
	if (ret) {
 804d8aa:	2800      	cmp	r0, #0
 804d8ac:	d09d      	beq.n	804d7ea <cmd_send+0x4a>
		shell_error(shell, "Failed to send frame [%d]", ret);
 804d8ae:	4603      	mov	r3, r0
 804d8b0:	4a0c      	ldr	r2, [pc, #48]	; (804d8e4 <cmd_send+0x144>)
 804d8b2:	4628      	mov	r0, r5
 804d8b4:	2102      	movs	r1, #2
 804d8b6:	f009 f802 	bl	80568be <shell_fprintf>
		return -EIO;
 804d8ba:	f06f 0004 	mvn.w	r0, #4
 804d8be:	e794      	b.n	804d7ea <cmd_send+0x4a>
 804d8c0:	4627      	mov	r7, r4
	uint8_t *data_ptr = data;
 804d8c2:	f10d 0a20 	add.w	sl, sp, #32
 804d8c6:	e7ca      	b.n	804d85e <cmd_send+0xbe>
 804d8c8:	080627fb 	.word	0x080627fb
 804d8cc:	080629d8 	.word	0x080629d8
 804d8d0:	080629f7 	.word	0x080629f7
 804d8d4:	08062a13 	.word	0x08062a13
 804d8d8:	080628ef 	.word	0x080628ef
 804d8dc:	080628e6 	.word	0x080628e6
 804d8e0:	08062a34 	.word	0x08062a34
 804d8e4:	08062a67 	.word	0x08062a67

0804d8e8 <flash_stm32_get_parameters>:
flash_stm32_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_stm32_parameters;
}
 804d8e8:	4800      	ldr	r0, [pc, #0]	; (804d8ec <flash_stm32_get_parameters+0x4>)
 804d8ea:	4770      	bx	lr
 804d8ec:	0805deac 	.word	0x0805deac

0804d8f0 <flash_stm32_read>:
{
 804d8f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 804d8f2:	4615      	mov	r5, r2
 804d8f4:	461a      	mov	r2, r3
	if (!flash_stm32_valid_range(dev, offset, len, false)) {
 804d8f6:	2300      	movs	r3, #0
{
 804d8f8:	460c      	mov	r4, r1
	if (!flash_stm32_valid_range(dev, offset, len, false)) {
 804d8fa:	9201      	str	r2, [sp, #4]
 804d8fc:	f00a ff5f 	bl	80587be <flash_stm32_valid_range>
 804d900:	9a01      	ldr	r2, [sp, #4]
 804d902:	b980      	cbnz	r0, 804d926 <flash_stm32_read+0x36>
		LOG_ERR("Read range invalid. Offset: %ld, len: %zu",
 804d904:	4b0d      	ldr	r3, [pc, #52]	; (804d93c <flash_stm32_read+0x4c>)
 804d906:	6819      	ldr	r1, [r3, #0]
 804d908:	0749      	lsls	r1, r1, #29
 804d90a:	d009      	beq.n	804d920 <flash_stm32_read+0x30>
 804d90c:	490c      	ldr	r1, [pc, #48]	; (804d940 <flash_stm32_read+0x50>)
 804d90e:	480d      	ldr	r0, [pc, #52]	; (804d944 <flash_stm32_read+0x54>)
 804d910:	1a5b      	subs	r3, r3, r1
 804d912:	4621      	mov	r1, r4
 804d914:	089b      	lsrs	r3, r3, #2
 804d916:	019b      	lsls	r3, r3, #6
 804d918:	f043 0301 	orr.w	r3, r3, #1
 804d91c:	f008 fb89 	bl	8056032 <log_2>
		return -EINVAL;
 804d920:	f06f 0015 	mvn.w	r0, #21
 804d924:	e006      	b.n	804d934 <flash_stm32_read+0x44>
	if (!len) {
 804d926:	b13a      	cbz	r2, 804d938 <flash_stm32_read+0x48>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 804d928:	f104 6100 	add.w	r1, r4, #134217728	; 0x8000000
 804d92c:	4628      	mov	r0, r5
 804d92e:	f00d fa52 	bl	805add6 <memcpy>
	return 0;
 804d932:	2000      	movs	r0, #0
}
 804d934:	b003      	add	sp, #12
 804d936:	bd30      	pop	{r4, r5, pc}
		return 0;
 804d938:	4610      	mov	r0, r2
 804d93a:	e7fb      	b.n	804d934 <flash_stm32_read+0x44>
 804d93c:	200208e8 	.word	0x200208e8
 804d940:	200208c8 	.word	0x200208c8
 804d944:	08062c85 	.word	0x08062c85

0804d948 <flash_stm32_wait_flash_idle>:
{
 804d948:	b570      	push	{r4, r5, r6, lr}
 804d94a:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
 804d94c:	f00c fef6 	bl	805a73c <z_impl_k_uptime_ticks>
 804d950:	2300      	movs	r3, #0
 804d952:	220a      	movs	r2, #10
 804d954:	f7f2 fdf4 	bl	8040540 <__aeabi_uldivmod>
	if (FLASH_STM32_REGS(dev)->FLASH_STM32_SR & FLASH_STM32_SR_ERRORS) {
 804d958:	6923      	ldr	r3, [r4, #16]
	int64_t timeout_time = k_uptime_get() + STM32_FLASH_TIMEOUT;
 804d95a:	f510 56fa 	adds.w	r6, r0, #8000	; 0x1f40
	if (FLASH_STM32_REGS(dev)->FLASH_STM32_SR & FLASH_STM32_SR_ERRORS) {
 804d95e:	681b      	ldr	r3, [r3, #0]
	int64_t timeout_time = k_uptime_get() + STM32_FLASH_TIMEOUT;
 804d960:	f141 0500 	adc.w	r5, r1, #0
	if (FLASH_STM32_REGS(dev)->FLASH_STM32_SR & FLASH_STM32_SR_ERRORS) {
 804d964:	68db      	ldr	r3, [r3, #12]
 804d966:	f013 0f72 	tst.w	r3, #114	; 0x72
 804d96a:	d01c      	beq.n	804d9a6 <flash_stm32_wait_flash_idle+0x5e>
			LOG_ERR("Timeout! val: %d", STM32_FLASH_TIMEOUT);
 804d96c:	f06f 0004 	mvn.w	r0, #4
}
 804d970:	bd70      	pop	{r4, r5, r6, pc}
 804d972:	f00c fee3 	bl	805a73c <z_impl_k_uptime_ticks>
 804d976:	2300      	movs	r3, #0
 804d978:	220a      	movs	r2, #10
 804d97a:	f7f2 fde1 	bl	8040540 <__aeabi_uldivmod>
		if (k_uptime_get() > timeout_time) {
 804d97e:	4286      	cmp	r6, r0
 804d980:	eb75 0301 	sbcs.w	r3, r5, r1
 804d984:	da0f      	bge.n	804d9a6 <flash_stm32_wait_flash_idle+0x5e>
			LOG_ERR("Timeout! val: %d", STM32_FLASH_TIMEOUT);
 804d986:	4a0c      	ldr	r2, [pc, #48]	; (804d9b8 <flash_stm32_wait_flash_idle+0x70>)
 804d988:	6813      	ldr	r3, [r2, #0]
 804d98a:	075b      	lsls	r3, r3, #29
 804d98c:	d0ee      	beq.n	804d96c <flash_stm32_wait_flash_idle+0x24>
 804d98e:	4b0b      	ldr	r3, [pc, #44]	; (804d9bc <flash_stm32_wait_flash_idle+0x74>)
 804d990:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 804d994:	480a      	ldr	r0, [pc, #40]	; (804d9c0 <flash_stm32_wait_flash_idle+0x78>)
 804d996:	1ad2      	subs	r2, r2, r3
 804d998:	0892      	lsrs	r2, r2, #2
 804d99a:	0192      	lsls	r2, r2, #6
 804d99c:	f042 0201 	orr.w	r2, r2, #1
 804d9a0:	f008 fb30 	bl	8056004 <log_1>
 804d9a4:	e7e2      	b.n	804d96c <flash_stm32_wait_flash_idle+0x24>
	while ((FLASH_STM32_REGS(dev)->FLASH_STM32_SR & busy_flags)) {
 804d9a6:	6923      	ldr	r3, [r4, #16]
 804d9a8:	681b      	ldr	r3, [r3, #0]
 804d9aa:	68db      	ldr	r3, [r3, #12]
 804d9ac:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 804d9b0:	d1df      	bne.n	804d972 <flash_stm32_wait_flash_idle+0x2a>
	return 0;
 804d9b2:	4618      	mov	r0, r3
 804d9b4:	e7dc      	b.n	804d970 <flash_stm32_wait_flash_idle+0x28>
 804d9b6:	bf00      	nop
 804d9b8:	200208e8 	.word	0x200208e8
 804d9bc:	200208c8 	.word	0x200208c8
 804d9c0:	08062caf 	.word	0x08062caf

0804d9c4 <flash_stm32_write_protection>:
	FLASH_TypeDef *regs = FLASH_STM32_REGS(dev);
 804d9c4:	6903      	ldr	r3, [r0, #16]
{
 804d9c6:	b570      	push	{r4, r5, r6, lr}
 804d9c8:	4606      	mov	r6, r0
	FLASH_TypeDef *regs = FLASH_STM32_REGS(dev);
 804d9ca:	681d      	ldr	r5, [r3, #0]
	if (enable) {
 804d9cc:	460c      	mov	r4, r1
 804d9ce:	b149      	cbz	r1, 804d9e4 <flash_stm32_write_protection+0x20>
		rc = flash_stm32_wait_flash_idle(dev);
 804d9d0:	f7ff ffba 	bl	804d948 <flash_stm32_wait_flash_idle>
		if (rc) {
 804d9d4:	4604      	mov	r4, r0
 804d9d6:	b170      	cbz	r0, 804d9f6 <flash_stm32_write_protection+0x32>
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 804d9d8:	6930      	ldr	r0, [r6, #16]
 804d9da:	3004      	adds	r0, #4
	z_impl_k_sem_give(sem);
 804d9dc:	f004 f882 	bl	8051ae4 <z_impl_k_sem_give>
}
 804d9e0:	4620      	mov	r0, r4
 804d9e2:	bd70      	pop	{r4, r5, r6, pc}
		if (regs->CR & FLASH_CR_LOCK) {
 804d9e4:	692b      	ldr	r3, [r5, #16]
 804d9e6:	2b00      	cmp	r3, #0
 804d9e8:	dafa      	bge.n	804d9e0 <flash_stm32_write_protection+0x1c>
			regs->KEYR = FLASH_KEY1;
 804d9ea:	4b05      	ldr	r3, [pc, #20]	; (804da00 <flash_stm32_write_protection+0x3c>)
 804d9ec:	606b      	str	r3, [r5, #4]
			regs->KEYR = FLASH_KEY2;
 804d9ee:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 804d9f2:	606b      	str	r3, [r5, #4]
 804d9f4:	e7f4      	b.n	804d9e0 <flash_stm32_write_protection+0x1c>
		regs->CR |= FLASH_CR_LOCK;
 804d9f6:	692b      	ldr	r3, [r5, #16]
 804d9f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804d9fc:	612b      	str	r3, [r5, #16]
 804d9fe:	e7ef      	b.n	804d9e0 <flash_stm32_write_protection+0x1c>
 804da00:	45670123 	.word	0x45670123

0804da04 <flash_stm32_erase>:
{
 804da04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 804da06:	2301      	movs	r3, #1
{
 804da08:	4607      	mov	r7, r0
 804da0a:	460d      	mov	r5, r1
 804da0c:	4616      	mov	r6, r2
	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 804da0e:	f00a fed6 	bl	80587be <flash_stm32_valid_range>
 804da12:	b988      	cbnz	r0, 804da38 <flash_stm32_erase+0x34>
		LOG_ERR("Erase range invalid. Offset: %ld, len: %zu",
 804da14:	4b22      	ldr	r3, [pc, #136]	; (804daa0 <flash_stm32_erase+0x9c>)
 804da16:	681a      	ldr	r2, [r3, #0]
 804da18:	0752      	lsls	r2, r2, #29
 804da1a:	d00a      	beq.n	804da32 <flash_stm32_erase+0x2e>
 804da1c:	4a21      	ldr	r2, [pc, #132]	; (804daa4 <flash_stm32_erase+0xa0>)
 804da1e:	4629      	mov	r1, r5
 804da20:	4821      	ldr	r0, [pc, #132]	; (804daa8 <flash_stm32_erase+0xa4>)
 804da22:	1a9b      	subs	r3, r3, r2
 804da24:	4632      	mov	r2, r6
 804da26:	089b      	lsrs	r3, r3, #2
 804da28:	019b      	lsls	r3, r3, #6
 804da2a:	f043 0301 	orr.w	r3, r3, #1
 804da2e:	f008 fb00 	bl	8056032 <log_2>
		return -EINVAL;
 804da32:	f06f 0415 	mvn.w	r4, #21
 804da36:	e02e      	b.n	804da96 <flash_stm32_erase+0x92>
	if (!len) {
 804da38:	b37e      	cbz	r6, 804da9a <flash_stm32_erase+0x96>
	flash_stm32_sem_take(dev);
 804da3a:	6938      	ldr	r0, [r7, #16]
 804da3c:	f00a fea3 	bl	8058786 <_flash_stm32_sem_take.isra.0>
	rc = flash_stm32_write_protection(dev, false);
 804da40:	2100      	movs	r1, #0
 804da42:	4638      	mov	r0, r7
 804da44:	f7ff ffbe 	bl	804d9c4 <flash_stm32_write_protection>
	if (rc == 0) {
 804da48:	4604      	mov	r4, r0
 804da4a:	b928      	cbnz	r0, 804da58 <flash_stm32_erase+0x54>
		rc = flash_stm32_block_erase_loop(dev, offset, len);
 804da4c:	4632      	mov	r2, r6
 804da4e:	4629      	mov	r1, r5
 804da50:	4638      	mov	r0, r7
 804da52:	f000 f873 	bl	804db3c <flash_stm32_block_erase_loop>
 804da56:	4604      	mov	r4, r0
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
 804da58:	2e00      	cmp	r6, #0
 804da5a:	dd11      	ble.n	804da80 <flash_stm32_erase+0x7c>
						  + offset), len);
 804da5c:	f105 6300 	add.w	r3, r5, #134217728	; 0x8000000
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 804da60:	f005 051f 	and.w	r5, r5, #31
 804da64:	19aa      	adds	r2, r5, r6
  __ASM volatile ("dsb 0xF":::"memory");
 804da66:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;

      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 804da6a:	4910      	ldr	r1, [pc, #64]	; (804daac <flash_stm32_erase+0xa8>)
 804da6c:	3a20      	subs	r2, #32
 804da6e:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 804da72:	3320      	adds	r3, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 804da74:	2a00      	cmp	r2, #0
 804da76:	dcf9      	bgt.n	804da6c <flash_stm32_erase+0x68>
 804da78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 804da7c:	f3bf 8f6f 	isb	sy
	int rc2 = flash_stm32_write_protection(dev, true);
 804da80:	2101      	movs	r1, #1
 804da82:	4638      	mov	r0, r7
 804da84:	f7ff ff9e 	bl	804d9c4 <flash_stm32_write_protection>
		rc = rc2;
 804da88:	2c00      	cmp	r4, #0
 804da8a:	bf08      	it	eq
 804da8c:	4604      	moveq	r4, r0
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 804da8e:	6938      	ldr	r0, [r7, #16]
 804da90:	3004      	adds	r0, #4
 804da92:	f004 f827 	bl	8051ae4 <z_impl_k_sem_give>
}
 804da96:	4620      	mov	r0, r4
 804da98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 804da9a:	4634      	mov	r4, r6
 804da9c:	e7fb      	b.n	804da96 <flash_stm32_erase+0x92>
 804da9e:	bf00      	nop
 804daa0:	200208e8 	.word	0x200208e8
 804daa4:	200208c8 	.word	0x200208c8
 804daa8:	08062cc0 	.word	0x08062cc0
 804daac:	e000ed00 	.word	0xe000ed00

0804dab0 <flash_stm32_write>:
{
 804dab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 804dab2:	4617      	mov	r7, r2
 804dab4:	461a      	mov	r2, r3
	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 804dab6:	2301      	movs	r3, #1
{
 804dab8:	4606      	mov	r6, r0
	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 804daba:	9201      	str	r2, [sp, #4]
{
 804dabc:	460d      	mov	r5, r1
	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 804dabe:	f00a fe7e 	bl	80587be <flash_stm32_valid_range>
 804dac2:	9a01      	ldr	r2, [sp, #4]
 804dac4:	b980      	cbnz	r0, 804dae8 <flash_stm32_write+0x38>
		LOG_ERR("Write range invalid. Offset: %ld, len: %zu",
 804dac6:	481a      	ldr	r0, [pc, #104]	; (804db30 <flash_stm32_write+0x80>)
 804dac8:	6803      	ldr	r3, [r0, #0]
 804daca:	075b      	lsls	r3, r3, #29
 804dacc:	d009      	beq.n	804dae2 <flash_stm32_write+0x32>
 804dace:	4b19      	ldr	r3, [pc, #100]	; (804db34 <flash_stm32_write+0x84>)
 804dad0:	4629      	mov	r1, r5
 804dad2:	1ac0      	subs	r0, r0, r3
 804dad4:	0880      	lsrs	r0, r0, #2
 804dad6:	0180      	lsls	r0, r0, #6
 804dad8:	f040 0301 	orr.w	r3, r0, #1
 804dadc:	4816      	ldr	r0, [pc, #88]	; (804db38 <flash_stm32_write+0x88>)
 804dade:	f008 faa8 	bl	8056032 <log_2>
		return -EINVAL;
 804dae2:	f06f 0415 	mvn.w	r4, #21
 804dae6:	e01d      	b.n	804db24 <flash_stm32_write+0x74>
	if (!len) {
 804dae8:	b1fa      	cbz	r2, 804db2a <flash_stm32_write+0x7a>
	flash_stm32_sem_take(dev);
 804daea:	6930      	ldr	r0, [r6, #16]
 804daec:	9201      	str	r2, [sp, #4]
 804daee:	f00a fe4a 	bl	8058786 <_flash_stm32_sem_take.isra.0>
	rc = flash_stm32_write_protection(dev, false);
 804daf2:	2100      	movs	r1, #0
 804daf4:	4630      	mov	r0, r6
 804daf6:	f7ff ff65 	bl	804d9c4 <flash_stm32_write_protection>
	if (rc == 0) {
 804dafa:	9a01      	ldr	r2, [sp, #4]
 804dafc:	4604      	mov	r4, r0
 804dafe:	b930      	cbnz	r0, 804db0e <flash_stm32_write+0x5e>
		rc = flash_stm32_write_range(dev, offset, data, len);
 804db00:	4613      	mov	r3, r2
 804db02:	4629      	mov	r1, r5
 804db04:	463a      	mov	r2, r7
 804db06:	4630      	mov	r0, r6
 804db08:	f000 f864 	bl	804dbd4 <flash_stm32_write_range>
 804db0c:	4604      	mov	r4, r0
	int rc2 = flash_stm32_write_protection(dev, true);
 804db0e:	2101      	movs	r1, #1
 804db10:	4630      	mov	r0, r6
 804db12:	f7ff ff57 	bl	804d9c4 <flash_stm32_write_protection>
		rc = rc2;
 804db16:	2c00      	cmp	r4, #0
 804db18:	bf08      	it	eq
 804db1a:	4604      	moveq	r4, r0
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 804db1c:	6930      	ldr	r0, [r6, #16]
 804db1e:	3004      	adds	r0, #4
 804db20:	f003 ffe0 	bl	8051ae4 <z_impl_k_sem_give>
}
 804db24:	4620      	mov	r0, r4
 804db26:	b003      	add	sp, #12
 804db28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
 804db2a:	4614      	mov	r4, r2
 804db2c:	e7fa      	b.n	804db24 <flash_stm32_write+0x74>
 804db2e:	bf00      	nop
 804db30:	200208e8 	.word	0x200208e8
 804db34:	200208c8 	.word	0x200208c8
 804db38:	08062ceb 	.word	0x08062ceb

0804db3c <flash_stm32_block_erase_loop>:
}

int flash_stm32_block_erase_loop(const struct device *dev,
				 unsigned int offset,
				 unsigned int len)
{
 804db3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804db40:	4605      	mov	r5, r0
 804db42:	b085      	sub	sp, #20
 804db44:	460f      	mov	r7, r1
 804db46:	4616      	mov	r6, r2
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
 804db48:	aa01      	add	r2, sp, #4
 804db4a:	f00a fe18 	bl	805877e <z_impl_flash_get_page_info_by_offs>
	uint32_t start_sector, end_sector;
	uint32_t i;
	int rc = 0;

	rc = flash_get_page_info_by_offs(dev, offset, &info);
	if (rc) {
 804db4e:	b968      	cbnz	r0, 804db6c <flash_stm32_block_erase_loop+0x30>
		return rc;
	}
	start_sector = info.index;
 804db50:	9c03      	ldr	r4, [sp, #12]
	rc = flash_get_page_info_by_offs(dev, offset + len - 1, &info);
 804db52:	3e01      	subs	r6, #1
 804db54:	aa01      	add	r2, sp, #4
 804db56:	4628      	mov	r0, r5
 804db58:	19f1      	adds	r1, r6, r7
 804db5a:	f00a fe10 	bl	805877e <z_impl_flash_get_page_info_by_offs>
	if (rc) {
 804db5e:	b928      	cbnz	r0, 804db6c <flash_stm32_block_erase_loop+0x30>
		return rc;
	}
	end_sector = info.index;
 804db60:	9e03      	ldr	r6, [sp, #12]
		   FLASH_PSIZE_BYTE |
 804db62:	4f1a      	ldr	r7, [pc, #104]	; (804dbcc <flash_stm32_block_erase_loop+0x90>)
		   (sector << FLASH_CR_SNB_Pos) |
 804db64:	f8df 8068 	ldr.w	r8, [pc, #104]	; 804dbd0 <flash_stm32_block_erase_loop+0x94>

	for (i = start_sector; i <= end_sector; i++) {
 804db68:	42b4      	cmp	r4, r6
 804db6a:	d902      	bls.n	804db72 <flash_stm32_block_erase_loop+0x36>
			break;
		}
	}

	return rc;
}
 804db6c:	b005      	add	sp, #20
 804db6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	FLASH_TypeDef *regs = FLASH_STM32_REGS(dev);
 804db72:	692b      	ldr	r3, [r5, #16]
 804db74:	f8d3 9000 	ldr.w	r9, [r3]
	if (regs->CR & FLASH_CR_LOCK) {
 804db78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 804db7c:	2b00      	cmp	r3, #0
 804db7e:	db21      	blt.n	804dbc4 <flash_stm32_block_erase_loop+0x88>
	rc = flash_stm32_wait_flash_idle(dev);
 804db80:	4628      	mov	r0, r5
 804db82:	f7ff fee1 	bl	804d948 <flash_stm32_wait_flash_idle>
	if (rc < 0) {
 804db86:	2800      	cmp	r0, #0
 804db88:	dbf0      	blt.n	804db6c <flash_stm32_block_erase_loop+0x30>
	if (sector > 7) {
 804db8a:	2c07      	cmp	r4, #7
	regs->CR = (regs->CR & ~(FLASH_CR_PSIZE | FLASH_CR_SNB)) |
 804db8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
		sector += 8U;
 804db90:	bf8c      	ite	hi
 804db92:	f104 0208 	addhi.w	r2, r4, #8
 804db96:	4622      	movls	r2, r4
		   FLASH_PSIZE_BYTE |
 804db98:	403b      	ands	r3, r7
		   FLASH_CR_SER |
 804db9a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
		   (sector << FLASH_CR_SNB_Pos) |
 804db9e:	ea43 0308 	orr.w	r3, r3, r8
	regs->CR = (regs->CR & ~(FLASH_CR_PSIZE | FLASH_CR_SNB)) |
 804dba2:	f8c9 3010 	str.w	r3, [r9, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 804dba6:	f3bf 8f4f 	dsb	sy
	rc = flash_stm32_wait_flash_idle(dev);
 804dbaa:	4628      	mov	r0, r5
 804dbac:	f7ff fecc 	bl	804d948 <flash_stm32_wait_flash_idle>
	regs->CR &= ~(FLASH_CR_SER | FLASH_CR_SNB);
 804dbb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
		if (rc < 0) {
 804dbb4:	2800      	cmp	r0, #0
	regs->CR &= ~(FLASH_CR_SER | FLASH_CR_SNB);
 804dbb6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 804dbba:	f8c9 3010 	str.w	r3, [r9, #16]
		if (rc < 0) {
 804dbbe:	dbd5      	blt.n	804db6c <flash_stm32_block_erase_loop+0x30>
	for (i = start_sector; i <= end_sector; i++) {
 804dbc0:	3401      	adds	r4, #1
 804dbc2:	e7d1      	b.n	804db68 <flash_stm32_block_erase_loop+0x2c>
		return -EIO;
 804dbc4:	f06f 0004 	mvn.w	r0, #4
 804dbc8:	e7d0      	b.n	804db6c <flash_stm32_block_erase_loop+0x30>
 804dbca:	bf00      	nop
 804dbcc:	fffffc05 	.word	0xfffffc05
 804dbd0:	00010002 	.word	0x00010002

0804dbd4 <flash_stm32_write_range>:

int flash_stm32_write_range(const struct device *dev, unsigned int offset,
			    const void *data, unsigned int len)
{
 804dbd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804dbd8:	4605      	mov	r5, r0
	int i, rc = 0;

	for (i = 0; i < len; i++, offset++) {
 804dbda:	f101 6600 	add.w	r6, r1, #134217728	; 0x8000000
 804dbde:	4614      	mov	r4, r2
 804dbe0:	18d7      	adds	r7, r2, r3
	int i, rc = 0;
 804dbe2:	2000      	movs	r0, #0
		   FLASH_PSIZE_BYTE | FLASH_CR_PG;
 804dbe4:	f8df 805c 	ldr.w	r8, [pc, #92]	; 804dc44 <flash_stm32_write_range+0x70>
	for (i = 0; i < len; i++, offset++) {
 804dbe8:	42bc      	cmp	r4, r7
 804dbea:	d026      	beq.n	804dc3a <flash_stm32_write_range+0x66>
	FLASH_TypeDef *regs = FLASH_STM32_REGS(dev);
 804dbec:	692b      	ldr	r3, [r5, #16]
		rc = write_byte(dev, offset, ((const uint8_t *) data)[i]);
 804dbee:	f814 ab01 	ldrb.w	sl, [r4], #1
	FLASH_TypeDef *regs = FLASH_STM32_REGS(dev);
 804dbf2:	f8d3 9000 	ldr.w	r9, [r3]
	if (regs->CR & FLASH_CR_LOCK) {
 804dbf6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 804dbfa:	2b00      	cmp	r3, #0
 804dbfc:	db1f      	blt.n	804dc3e <flash_stm32_write_range+0x6a>
	rc = flash_stm32_wait_flash_idle(dev);
 804dbfe:	4628      	mov	r0, r5
 804dc00:	f7ff fea2 	bl	804d948 <flash_stm32_wait_flash_idle>
	if (rc < 0) {
 804dc04:	2800      	cmp	r0, #0
 804dc06:	db18      	blt.n	804dc3a <flash_stm32_write_range+0x66>
	regs->CR = (regs->CR & CR_PSIZE_MASK) |
 804dc08:	f8d9 3010 	ldr.w	r3, [r9, #16]
		   FLASH_PSIZE_BYTE | FLASH_CR_PG;
 804dc0c:	ea03 0308 	and.w	r3, r3, r8
 804dc10:	f043 0301 	orr.w	r3, r3, #1
	regs->CR = (regs->CR & CR_PSIZE_MASK) |
 804dc14:	f8c9 3010 	str.w	r3, [r9, #16]
 804dc18:	f3bf 8f4f 	dsb	sy
	*((uint8_t *) offset + CONFIG_FLASH_BASE_ADDRESS) = val;
 804dc1c:	f806 ab01 	strb.w	sl, [r6], #1
 804dc20:	f3bf 8f4f 	dsb	sy
	rc = flash_stm32_wait_flash_idle(dev);
 804dc24:	4628      	mov	r0, r5
 804dc26:	f7ff fe8f 	bl	804d948 <flash_stm32_wait_flash_idle>
	regs->CR &= (~FLASH_CR_PG);
 804dc2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
		if (rc < 0) {
 804dc2e:	2800      	cmp	r0, #0
	regs->CR &= (~FLASH_CR_PG);
 804dc30:	f023 0301 	bic.w	r3, r3, #1
 804dc34:	f8c9 3010 	str.w	r3, [r9, #16]
		if (rc < 0) {
 804dc38:	dad6      	bge.n	804dbe8 <flash_stm32_write_range+0x14>
			return rc;
		}
	}

	return rc;
}
 804dc3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EIO;
 804dc3e:	f06f 0004 	mvn.w	r0, #4
 804dc42:	e7fa      	b.n	804dc3a <flash_stm32_write_range+0x66>
 804dc44:	fffffcfe 	.word	0xfffffcfe

0804dc48 <flash_stm32_page_layout>:
void flash_stm32_page_layout(const struct device *dev,
			     const struct flash_pages_layout **layout,
			     size_t *layout_size)
{
#if FLASH_OPTCR_nDBANK
	if (FLASH_STM32_REGS(dev)->OPTCR & FLASH_OPTCR_nDBANK) {
 804dc48:	6903      	ldr	r3, [r0, #16]
 804dc4a:	681b      	ldr	r3, [r3, #0]
 804dc4c:	695b      	ldr	r3, [r3, #20]
 804dc4e:	009b      	lsls	r3, r3, #2
		*layout = stm32f7_flash_layout_single_bank;
 804dc50:	bf49      	itett	mi
 804dc52:	4b04      	ldrmi	r3, [pc, #16]	; (804dc64 <flash_stm32_page_layout+0x1c>)
		*layout_size = ARRAY_SIZE(stm32f7_flash_layout_single_bank);
	} else {
		*layout = stm32f7_flash_layout_dual_bank;
 804dc54:	4b04      	ldrpl	r3, [pc, #16]	; (804dc68 <flash_stm32_page_layout+0x20>)
		*layout = stm32f7_flash_layout_single_bank;
 804dc56:	600b      	strmi	r3, [r1, #0]
		*layout_size = ARRAY_SIZE(stm32f7_flash_layout_single_bank);
 804dc58:	2303      	movmi	r3, #3
		*layout = stm32f7_flash_layout_dual_bank;
 804dc5a:	bf5c      	itt	pl
 804dc5c:	600b      	strpl	r3, [r1, #0]
		*layout_size = ARRAY_SIZE(stm32f7_flash_layout_dual_bank);
 804dc5e:	2306      	movpl	r3, #6
 804dc60:	6013      	str	r3, [r2, #0]
#else
	ARG_UNUSED(dev);
	*layout = stm32f7_flash_layout;
	*layout_size = ARRAY_SIZE(stm32f7_flash_layout);
#endif
}
 804dc62:	4770      	bx	lr
 804dc64:	0805dee4 	.word	0x0805dee4
 804dc68:	0805deb4 	.word	0x0805deb4

0804dc6c <cmd_flash>:
	SHELL_SUBCMD_SET_END
);

static int cmd_flash(const struct shell *shell, size_t argc, char **argv)
{
	shell_error(shell, "%s:unknown parameter: %s", argv[0], argv[1]);
 804dc6c:	6853      	ldr	r3, [r2, #4]
{
 804dc6e:	b507      	push	{r0, r1, r2, lr}
	shell_error(shell, "%s:unknown parameter: %s", argv[0], argv[1]);
 804dc70:	2102      	movs	r1, #2
 804dc72:	9300      	str	r3, [sp, #0]
 804dc74:	6813      	ldr	r3, [r2, #0]
 804dc76:	4a04      	ldr	r2, [pc, #16]	; (804dc88 <cmd_flash+0x1c>)
 804dc78:	f008 fe21 	bl	80568be <shell_fprintf>
	return -EINVAL;
}
 804dc7c:	f06f 0015 	mvn.w	r0, #21
 804dc80:	b003      	add	sp, #12
 804dc82:	f85d fb04 	ldr.w	pc, [sp], #4
 804dc86:	bf00      	nop
 804dc88:	08062d2d 	.word	0x08062d2d

0804dc8c <parse_helper>:
{
 804dc8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 804dc90:	461f      	mov	r7, r3
	*addr = strtoul((*argv)[1], &endptr, 16);
 804dc92:	6813      	ldr	r3, [r2, #0]
{
 804dc94:	4606      	mov	r6, r0
 804dc96:	460d      	mov	r5, r1
	*addr = strtoul((*argv)[1], &endptr, 16);
 804dc98:	6858      	ldr	r0, [r3, #4]
{
 804dc9a:	4614      	mov	r4, r2
	*addr = strtoul((*argv)[1], &endptr, 16);
 804dc9c:	a901      	add	r1, sp, #4
 804dc9e:	2210      	movs	r2, #16
{
 804dca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
	*addr = strtoul((*argv)[1], &endptr, 16);
 804dca4:	f005 f99a 	bl	8052fdc <strtoul>
	*flash_dev = device_get_binding((*endptr != '\0') ? (*argv)[1] :
 804dca8:	9b01      	ldr	r3, [sp, #4]
	*addr = strtoul((*argv)[1], &endptr, 16);
 804dcaa:	f8c8 0000 	str.w	r0, [r8]
	*flash_dev = device_get_binding((*endptr != '\0') ? (*argv)[1] :
 804dcae:	781b      	ldrb	r3, [r3, #0]
 804dcb0:	b17b      	cbz	r3, 804dcd2 <parse_helper+0x46>
 804dcb2:	6823      	ldr	r3, [r4, #0]
 804dcb4:	6858      	ldr	r0, [r3, #4]
 804dcb6:	f003 fa21 	bl	80510fc <z_impl_device_get_binding>
 804dcba:	6038      	str	r0, [r7, #0]
	if (!*flash_dev) {
 804dcbc:	b958      	cbnz	r0, 804dcd6 <parse_helper+0x4a>
		shell_error(shell, "Flash driver was not found!");
 804dcbe:	4630      	mov	r0, r6
 804dcc0:	4a14      	ldr	r2, [pc, #80]	; (804dd14 <parse_helper+0x88>)
 804dcc2:	2102      	movs	r1, #2
 804dcc4:	f008 fdfb 	bl	80568be <shell_fprintf>
		return -ENODEV;
 804dcc8:	f06f 0012 	mvn.w	r0, #18
}
 804dccc:	b002      	add	sp, #8
 804dcce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*flash_dev = device_get_binding((*endptr != '\0') ? (*argv)[1] :
 804dcd2:	4811      	ldr	r0, [pc, #68]	; (804dd18 <parse_helper+0x8c>)
 804dcd4:	e7ef      	b.n	804dcb6 <parse_helper+0x2a>
	if (*endptr == '\0') {
 804dcd6:	9b01      	ldr	r3, [sp, #4]
 804dcd8:	7818      	ldrb	r0, [r3, #0]
 804dcda:	2800      	cmp	r0, #0
 804dcdc:	d0f6      	beq.n	804dccc <parse_helper+0x40>
	if (*argc < 3) {
 804dcde:	682b      	ldr	r3, [r5, #0]
 804dce0:	2b02      	cmp	r3, #2
 804dce2:	d807      	bhi.n	804dcf4 <parse_helper+0x68>
		shell_error(shell, "Missing address.");
 804dce4:	4630      	mov	r0, r6
 804dce6:	4a0d      	ldr	r2, [pc, #52]	; (804dd1c <parse_helper+0x90>)
 804dce8:	2102      	movs	r1, #2
 804dcea:	f008 fde8 	bl	80568be <shell_fprintf>
		return -EINVAL;
 804dcee:	f06f 0015 	mvn.w	r0, #21
 804dcf2:	e7eb      	b.n	804dccc <parse_helper+0x40>
	*addr = strtoul((*argv)[2], &endptr, 16);
 804dcf4:	6823      	ldr	r3, [r4, #0]
 804dcf6:	2210      	movs	r2, #16
 804dcf8:	a901      	add	r1, sp, #4
 804dcfa:	6898      	ldr	r0, [r3, #8]
 804dcfc:	f005 f96e 	bl	8052fdc <strtoul>
 804dd00:	f8c8 0000 	str.w	r0, [r8]
	(*argc)--;
 804dd04:	682b      	ldr	r3, [r5, #0]
	return 0;
 804dd06:	2000      	movs	r0, #0
	(*argc)--;
 804dd08:	3b01      	subs	r3, #1
 804dd0a:	602b      	str	r3, [r5, #0]
	(*argv)++;
 804dd0c:	6823      	ldr	r3, [r4, #0]
 804dd0e:	3304      	adds	r3, #4
 804dd10:	6023      	str	r3, [r4, #0]
	return 0;
 804dd12:	e7db      	b.n	804dccc <parse_helper+0x40>
 804dd14:	08062d47 	.word	0x08062d47
 804dd18:	08062d16 	.word	0x08062d16
 804dd1c:	08062d64 	.word	0x08062d64

0804dd20 <cmd_write>:
{
 804dd20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804dd24:	b0a7      	sub	sp, #156	; 0x9c
 804dd26:	4605      	mov	r5, r0
	ret = parse_helper(shell, &argc, &argv, &flash_dev, &w_addr);
 804dd28:	ab05      	add	r3, sp, #20
{
 804dd2a:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ret = parse_helper(shell, &argc, &argv, &flash_dev, &w_addr);
 804dd2e:	9300      	str	r3, [sp, #0]
 804dd30:	aa02      	add	r2, sp, #8
 804dd32:	ab04      	add	r3, sp, #16
 804dd34:	a903      	add	r1, sp, #12
 804dd36:	f7ff ffa9 	bl	804dc8c <parse_helper>
	if (ret) {
 804dd3a:	4604      	mov	r4, r0
 804dd3c:	bb28      	cbnz	r0, 804dd8a <cmd_write+0x6a>
	if (argc <= 2) {
 804dd3e:	9b03      	ldr	r3, [sp, #12]
 804dd40:	2b02      	cmp	r3, #2
 804dd42:	d91b      	bls.n	804dd7c <cmd_write+0x5c>
 804dd44:	f10d 0858 	add.w	r8, sp, #88	; 0x58
 804dd48:	f10d 0918 	add.w	r9, sp, #24
	for (int i = 2; i < argc && i < BUF_ARRAY_CNT; i++) {
 804dd4c:	2402      	movs	r4, #2
 804dd4e:	4646      	mov	r6, r8
 804dd50:	464f      	mov	r7, r9
 804dd52:	9a03      	ldr	r2, [sp, #12]
 804dd54:	1ea3      	subs	r3, r4, #2
 804dd56:	42a2      	cmp	r2, r4
 804dd58:	d81b      	bhi.n	804dd92 <cmd_write+0x72>
	if (flash_write(flash_dev, w_addr, buf_array,
 804dd5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 804dd5e:	009c      	lsls	r4, r3, #2
	return z_impl_flash_write(dev, offset, data, len);
 804dd60:	4623      	mov	r3, r4
 804dd62:	4632      	mov	r2, r6
 804dd64:	f00a fd40 	bl	80587e8 <z_impl_flash_write>
 804dd68:	4601      	mov	r1, r0
 804dd6a:	b310      	cbz	r0, 804ddb2 <cmd_write+0x92>
		shell_error(shell, "Write internal ERROR!");
 804dd6c:	4a1e      	ldr	r2, [pc, #120]	; (804dde8 <cmd_write+0xc8>)
		shell_error(shell, "Verification ERROR!");
 804dd6e:	2102      	movs	r1, #2
 804dd70:	4628      	mov	r0, r5
		return -EIO;
 804dd72:	f06f 0404 	mvn.w	r4, #4
		shell_error(shell, "Verification ERROR!");
 804dd76:	f008 fda2 	bl	80568be <shell_fprintf>
		return -EIO;
 804dd7a:	e006      	b.n	804dd8a <cmd_write+0x6a>
		return -EINVAL;
 804dd7c:	f06f 0415 	mvn.w	r4, #21
		shell_error(shell, "Missing data to be written.");
 804dd80:	4a1a      	ldr	r2, [pc, #104]	; (804ddec <cmd_write+0xcc>)
 804dd82:	2102      	movs	r1, #2
 804dd84:	4628      	mov	r0, r5
 804dd86:	f008 fd9a 	bl	80568be <shell_fprintf>
}
 804dd8a:	4620      	mov	r0, r4
 804dd8c:	b027      	add	sp, #156	; 0x9c
 804dd8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (int i = 2; i < argc && i < BUF_ARRAY_CNT; i++) {
 804dd92:	2c10      	cmp	r4, #16
 804dd94:	d0e1      	beq.n	804dd5a <cmd_write+0x3a>
		buf_array[j] = strtoul(argv[i], NULL, 16);
 804dd96:	9b02      	ldr	r3, [sp, #8]
 804dd98:	2210      	movs	r2, #16
 804dd9a:	2100      	movs	r1, #0
 804dd9c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
	for (int i = 2; i < argc && i < BUF_ARRAY_CNT; i++) {
 804dda0:	3401      	adds	r4, #1
		buf_array[j] = strtoul(argv[i], NULL, 16);
 804dda2:	f005 f91b 	bl	8052fdc <strtoul>
 804dda6:	f848 0b04 	str.w	r0, [r8], #4
		check_array[j] = ~buf_array[j];
 804ddaa:	43c0      	mvns	r0, r0
 804ddac:	f849 0b04 	str.w	r0, [r9], #4
	for (int i = 2; i < argc && i < BUF_ARRAY_CNT; i++) {
 804ddb0:	e7cf      	b.n	804dd52 <cmd_write+0x32>
	shell_print(shell, "Write OK.");
 804ddb2:	4628      	mov	r0, r5
 804ddb4:	4a0e      	ldr	r2, [pc, #56]	; (804ddf0 <cmd_write+0xd0>)
 804ddb6:	f008 fd82 	bl	80568be <shell_fprintf>
	flash_read(flash_dev, w_addr, check_array, sizeof(buf_array[0]) * j);
 804ddba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
 804ddbe:	6883      	ldr	r3, [r0, #8]
 804ddc0:	463a      	mov	r2, r7
 804ddc2:	f8d3 8000 	ldr.w	r8, [r3]
 804ddc6:	4623      	mov	r3, r4
 804ddc8:	47c0      	blx	r8
	if (memcmp(buf_array, check_array, sizeof(buf_array[0]) * j) == 0) {
 804ddca:	4622      	mov	r2, r4
 804ddcc:	4639      	mov	r1, r7
 804ddce:	4630      	mov	r0, r6
 804ddd0:	f00c fff1 	bl	805adb6 <memcmp>
 804ddd4:	4604      	mov	r4, r0
 804ddd6:	b928      	cbnz	r0, 804dde4 <cmd_write+0xc4>
		shell_print(shell, "Verified.");
 804ddd8:	4601      	mov	r1, r0
 804ddda:	4a06      	ldr	r2, [pc, #24]	; (804ddf4 <cmd_write+0xd4>)
 804dddc:	4628      	mov	r0, r5
 804ddde:	f008 fd6e 	bl	80568be <shell_fprintf>
	return 0;
 804dde2:	e7d2      	b.n	804dd8a <cmd_write+0x6a>
		shell_error(shell, "Verification ERROR!");
 804dde4:	4a04      	ldr	r2, [pc, #16]	; (804ddf8 <cmd_write+0xd8>)
 804dde6:	e7c2      	b.n	804dd6e <cmd_write+0x4e>
 804dde8:	08062d93 	.word	0x08062d93
 804ddec:	08062d76 	.word	0x08062d76
 804ddf0:	08062daa 	.word	0x08062daa
 804ddf4:	08062db5 	.word	0x08062db5
 804ddf8:	08062dc0 	.word	0x08062dc0

0804ddfc <cmd_erase>:
{
 804ddfc:	b530      	push	{r4, r5, lr}
 804ddfe:	b08b      	sub	sp, #44	; 0x2c
 804de00:	4605      	mov	r5, r0
	result = parse_helper(shell, &argc, &argv, &flash_dev, &page_addr);
 804de02:	ab06      	add	r3, sp, #24
{
 804de04:	e9cd 2102 	strd	r2, r1, [sp, #8]
	result = parse_helper(shell, &argc, &argv, &flash_dev, &page_addr);
 804de08:	9300      	str	r3, [sp, #0]
 804de0a:	aa02      	add	r2, sp, #8
 804de0c:	ab05      	add	r3, sp, #20
 804de0e:	a903      	add	r1, sp, #12
 804de10:	f7ff ff3c 	bl	804dc8c <parse_helper>
	if (result) {
 804de14:	4604      	mov	r4, r0
 804de16:	bb20      	cbnz	r0, 804de62 <cmd_erase+0x66>
	if (argc > 2) {
 804de18:	9b03      	ldr	r3, [sp, #12]
 804de1a:	2b02      	cmp	r3, #2
 804de1c:	d913      	bls.n	804de46 <cmd_erase+0x4a>
		size = strtoul(argv[2], NULL, 16);
 804de1e:	9b02      	ldr	r3, [sp, #8]
 804de20:	2210      	movs	r2, #16
 804de22:	4601      	mov	r1, r0
 804de24:	6898      	ldr	r0, [r3, #8]
 804de26:	f005 f8d9 	bl	8052fdc <strtoul>
 804de2a:	4602      	mov	r2, r0
	result = flash_erase(flash_dev, page_addr, size);
 804de2c:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
	return z_impl_flash_erase(dev, offset, size);
 804de30:	f00a fcf8 	bl	8058824 <z_impl_flash_erase>
	if (result) {
 804de34:	4604      	mov	r4, r0
 804de36:	b1c8      	cbz	r0, 804de6c <cmd_erase+0x70>
		shell_error(shell, "Erase Failed, code %d.", result);
 804de38:	4603      	mov	r3, r0
 804de3a:	4a0f      	ldr	r2, [pc, #60]	; (804de78 <cmd_erase+0x7c>)
 804de3c:	2102      	movs	r1, #2
 804de3e:	4628      	mov	r0, r5
 804de40:	f008 fd3d 	bl	80568be <shell_fprintf>
 804de44:	e00d      	b.n	804de62 <cmd_erase+0x66>
		result = flash_get_page_info_by_offs(flash_dev, page_addr,
 804de46:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
 804de4a:	aa07      	add	r2, sp, #28
 804de4c:	f00a fc97 	bl	805877e <z_impl_flash_get_page_info_by_offs>
		if (result != 0) {
 804de50:	4603      	mov	r3, r0
 804de52:	b148      	cbz	r0, 804de68 <cmd_erase+0x6c>
			return -EINVAL;
 804de54:	f06f 0415 	mvn.w	r4, #21
			shell_error(shell, "Could not determine page size, "
 804de58:	4a08      	ldr	r2, [pc, #32]	; (804de7c <cmd_erase+0x80>)
 804de5a:	2102      	movs	r1, #2
 804de5c:	4628      	mov	r0, r5
 804de5e:	f008 fd2e 	bl	80568be <shell_fprintf>
}
 804de62:	4620      	mov	r0, r4
 804de64:	b00b      	add	sp, #44	; 0x2c
 804de66:	bd30      	pop	{r4, r5, pc}
		size = info.size;
 804de68:	9a08      	ldr	r2, [sp, #32]
 804de6a:	e7df      	b.n	804de2c <cmd_erase+0x30>
		shell_print(shell, "Erase success.");
 804de6c:	4601      	mov	r1, r0
 804de6e:	4a04      	ldr	r2, [pc, #16]	; (804de80 <cmd_erase+0x84>)
 804de70:	4628      	mov	r0, r5
 804de72:	f008 fd24 	bl	80568be <shell_fprintf>
 804de76:	e7f4      	b.n	804de62 <cmd_erase+0x66>
 804de78:	08062dfe 	.word	0x08062dfe
 804de7c:	08062dd5 	.word	0x08062dd5
 804de80:	08062e16 	.word	0x08062e16

0804de84 <device_name_get>:
{
 804de84:	b510      	push	{r4, lr}
 804de86:	460c      	mov	r4, r1
	const struct device *dev = shell_device_lookup(idx, NULL);
 804de88:	2100      	movs	r1, #0
 804de8a:	f008 fe1e 	bl	8056aca <shell_device_lookup>
	entry->syntax = (dev != NULL) ? dev->name : NULL;
 804de8e:	b100      	cbz	r0, 804de92 <device_name_get+0xe>
 804de90:	6800      	ldr	r0, [r0, #0]
	entry->handler = NULL;
 804de92:	2300      	movs	r3, #0
	entry->syntax = (dev != NULL) ? dev->name : NULL;
 804de94:	6020      	str	r0, [r4, #0]
	entry->handler = NULL;
 804de96:	60e3      	str	r3, [r4, #12]
	entry->help  = NULL;
 804de98:	6063      	str	r3, [r4, #4]
	entry->subcmd = &dsub_device_name;
 804de9a:	4b01      	ldr	r3, [pc, #4]	; (804dea0 <device_name_get+0x1c>)
 804de9c:	60a3      	str	r3, [r4, #8]
}
 804de9e:	bd10      	pop	{r4, pc}
 804dea0:	0805df10 	.word	0x0805df10

0804dea4 <cmd_test>:
{
 804dea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804dea8:	b087      	sub	sp, #28
 804deaa:	4605      	mov	r5, r0
	result = parse_helper(shell, &argc, &argv, &flash_dev, &addr);
 804deac:	ab05      	add	r3, sp, #20
{
 804deae:	e9cd 2102 	strd	r2, r1, [sp, #8]
	result = parse_helper(shell, &argc, &argv, &flash_dev, &addr);
 804deb2:	9300      	str	r3, [sp, #0]
 804deb4:	aa02      	add	r2, sp, #8
 804deb6:	ab04      	add	r3, sp, #16
 804deb8:	a903      	add	r1, sp, #12
 804deba:	f7ff fee7 	bl	804dc8c <parse_helper>
	if (result) {
 804debe:	4604      	mov	r4, r0
 804dec0:	bb50      	cbnz	r0, 804df18 <cmd_test+0x74>
	size = strtoul(argv[2], NULL, 16);
 804dec2:	9b02      	ldr	r3, [sp, #8]
 804dec4:	4601      	mov	r1, r0
 804dec6:	2210      	movs	r2, #16
 804dec8:	6898      	ldr	r0, [r3, #8]
 804deca:	f005 f887 	bl	8052fdc <strtoul>
	repeat = strtoul(argv[3], NULL, 16);
 804dece:	9b02      	ldr	r3, [sp, #8]
	size = strtoul(argv[2], NULL, 16);
 804ded0:	4607      	mov	r7, r0
	repeat = strtoul(argv[3], NULL, 16);
 804ded2:	2210      	movs	r2, #16
 804ded4:	4621      	mov	r1, r4
 804ded6:	68d8      	ldr	r0, [r3, #12]
 804ded8:	f005 f880 	bl	8052fdc <strtoul>
	if (size > TEST_ARR_SIZE) {
 804dedc:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
	repeat = strtoul(argv[3], NULL, 16);
 804dee0:	4606      	mov	r6, r0
	if (size > TEST_ARR_SIZE) {
 804dee2:	d810      	bhi.n	804df06 <cmd_test+0x62>
 804dee4:	4a25      	ldr	r2, [pc, #148]	; (804df7c <cmd_test+0xd8>)
	for (uint32_t i = 0; i < size; i++) {
 804dee6:	4623      	mov	r3, r4
 804dee8:	42bb      	cmp	r3, r7
 804deea:	d119      	bne.n	804df20 <cmd_test+0x7c>
		shell_print(shell, "Erase OK.");
 804deec:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 804df90 <cmd_test+0xec>
	return z_impl_flash_write(dev, offset, data, len);
 804def0:	f8df a088 	ldr.w	sl, [pc, #136]	; 804df7c <cmd_test+0xd8>
		shell_print(shell, "Write OK.");
 804def4:	f8df b09c 	ldr.w	fp, [pc, #156]	; 804df94 <cmd_test+0xf0>
	while (repeat--) {
 804def8:	b9b6      	cbnz	r6, 804df28 <cmd_test+0x84>
		shell_print(shell, "Erase-Write test done.");
 804defa:	4a21      	ldr	r2, [pc, #132]	; (804df80 <cmd_test+0xdc>)
 804defc:	4631      	mov	r1, r6
 804defe:	4628      	mov	r0, r5
 804df00:	f008 fcdd 	bl	80568be <shell_fprintf>
 804df04:	e008      	b.n	804df18 <cmd_test+0x74>
		return -EINVAL;
 804df06:	f06f 0415 	mvn.w	r4, #21
		shell_error(shell, "<size> must be at most 0x%x.",
 804df0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 804df0e:	4a1d      	ldr	r2, [pc, #116]	; (804df84 <cmd_test+0xe0>)
 804df10:	2102      	movs	r1, #2
 804df12:	4628      	mov	r0, r5
 804df14:	f008 fcd3 	bl	80568be <shell_fprintf>
}
 804df18:	4620      	mov	r0, r4
 804df1a:	b007      	add	sp, #28
 804df1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		test_arr[i] = (uint8_t)i;
 804df20:	f802 3b01 	strb.w	r3, [r2], #1
	for (uint32_t i = 0; i < size; i++) {
 804df24:	3301      	adds	r3, #1
 804df26:	e7df      	b.n	804dee8 <cmd_test+0x44>
		result = flash_erase(flash_dev, addr, size);
 804df28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
	return z_impl_flash_erase(dev, offset, size);
 804df2c:	463a      	mov	r2, r7
 804df2e:	f00a fc79 	bl	8058824 <z_impl_flash_erase>
		if (result) {
 804df32:	4680      	mov	r8, r0
 804df34:	b138      	cbz	r0, 804df46 <cmd_test+0xa2>
			shell_error(shell, "Erase Failed, code %d.", result);
 804df36:	4603      	mov	r3, r0
 804df38:	4a13      	ldr	r2, [pc, #76]	; (804df88 <cmd_test+0xe4>)
 804df3a:	2102      	movs	r1, #2
 804df3c:	4628      	mov	r0, r5
 804df3e:	f008 fcbe 	bl	80568be <shell_fprintf>
	return z_impl_flash_write(dev, offset, data, len);
 804df42:	4644      	mov	r4, r8
			break;
 804df44:	e7e8      	b.n	804df18 <cmd_test+0x74>
		shell_print(shell, "Erase OK.");
 804df46:	4601      	mov	r1, r0
 804df48:	464a      	mov	r2, r9
 804df4a:	4628      	mov	r0, r5
 804df4c:	f008 fcb7 	bl	80568be <shell_fprintf>
		result = flash_write(flash_dev, addr, test_arr, size);
 804df50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 804df54:	463b      	mov	r3, r7
 804df56:	4652      	mov	r2, sl
 804df58:	f00a fc46 	bl	80587e8 <z_impl_flash_write>
		if (result) {
 804df5c:	3e01      	subs	r6, #1
 804df5e:	4680      	mov	r8, r0
 804df60:	b128      	cbz	r0, 804df6e <cmd_test+0xca>
			shell_error(shell, "Write internal ERROR!");
 804df62:	4a0a      	ldr	r2, [pc, #40]	; (804df8c <cmd_test+0xe8>)
 804df64:	2102      	movs	r1, #2
 804df66:	4628      	mov	r0, r5
 804df68:	f008 fca9 	bl	80568be <shell_fprintf>
 804df6c:	e7e9      	b.n	804df42 <cmd_test+0x9e>
		shell_print(shell, "Write OK.");
 804df6e:	4601      	mov	r1, r0
 804df70:	465a      	mov	r2, fp
 804df72:	4628      	mov	r0, r5
 804df74:	f008 fca3 	bl	80568be <shell_fprintf>
 804df78:	e7be      	b.n	804def8 <cmd_test+0x54>
 804df7a:	bf00      	nop
 804df7c:	20037b50 	.word	0x20037b50
 804df80:	08062e4f 	.word	0x08062e4f
 804df84:	08062e26 	.word	0x08062e26
 804df88:	08062dfe 	.word	0x08062dfe
 804df8c:	08062d93 	.word	0x08062d93
 804df90:	08062e44 	.word	0x08062e44
 804df94:	08062daa 	.word	0x08062daa

0804df98 <cmd_read>:
{
 804df98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804df9c:	b08b      	sub	sp, #44	; 0x2c
 804df9e:	4606      	mov	r6, r0
	ret = parse_helper(shell, &argc, &argv, &flash_dev, &addr);
 804dfa0:	ab05      	add	r3, sp, #20
{
 804dfa2:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ret = parse_helper(shell, &argc, &argv, &flash_dev, &addr);
 804dfa6:	9300      	str	r3, [sp, #0]
 804dfa8:	aa02      	add	r2, sp, #8
 804dfaa:	ab04      	add	r3, sp, #16
 804dfac:	a903      	add	r1, sp, #12
 804dfae:	f7ff fe6d 	bl	804dc8c <parse_helper>
	if (ret) {
 804dfb2:	4604      	mov	r4, r0
 804dfb4:	bb50      	cbnz	r0, 804e00c <cmd_read+0x74>
	if (argc > 2) {
 804dfb6:	9b03      	ldr	r3, [sp, #12]
 804dfb8:	2b02      	cmp	r3, #2
 804dfba:	d910      	bls.n	804dfde <cmd_read+0x46>
		cnt = strtoul(argv[2], NULL, 16);
 804dfbc:	9b02      	ldr	r3, [sp, #8]
 804dfbe:	4601      	mov	r1, r0
 804dfc0:	2210      	movs	r2, #16
 804dfc2:	6898      	ldr	r0, [r3, #8]
 804dfc4:	f005 f80a 	bl	8052fdc <strtoul>
 804dfc8:	4607      	mov	r7, r0
	for (upto = 0; upto < cnt; upto += todo) {
 804dfca:	f04f 0800 	mov.w	r8, #0
 804dfce:	45b8      	cmp	r8, r7
 804dfd0:	db07      	blt.n	804dfe2 <cmd_read+0x4a>
	shell_print(shell, "");
 804dfd2:	4a16      	ldr	r2, [pc, #88]	; (804e02c <cmd_read+0x94>)
 804dfd4:	2100      	movs	r1, #0
 804dfd6:	4630      	mov	r0, r6
 804dfd8:	f008 fc71 	bl	80568be <shell_fprintf>
	return 0;
 804dfdc:	e016      	b.n	804e00c <cmd_read+0x74>
		cnt = 1;
 804dfde:	2701      	movs	r7, #1
 804dfe0:	e7f3      	b.n	804dfca <cmd_read+0x32>
		todo = MIN(cnt - upto, SHELL_HEXDUMP_BYTES_IN_LINE);
 804dfe2:	eba7 0508 	sub.w	r5, r7, r8
 804dfe6:	2d10      	cmp	r5, #16
		ret = flash_read(flash_dev, addr, data, todo);
 804dfe8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
		todo = MIN(cnt - upto, SHELL_HEXDUMP_BYTES_IN_LINE);
 804dfec:	bfa8      	it	ge
 804dfee:	2510      	movge	r5, #16
 804dff0:	6883      	ldr	r3, [r0, #8]
 804dff2:	aa06      	add	r2, sp, #24
 804dff4:	f8d3 9000 	ldr.w	r9, [r3]
 804dff8:	462b      	mov	r3, r5
 804dffa:	47c8      	blx	r9
		if (ret != 0) {
 804dffc:	b150      	cbz	r0, 804e014 <cmd_read+0x7c>
			return -EIO;
 804dffe:	f06f 0404 	mvn.w	r4, #4
			shell_error(shell, "Read ERROR!");
 804e002:	4a0b      	ldr	r2, [pc, #44]	; (804e030 <cmd_read+0x98>)
 804e004:	2102      	movs	r1, #2
 804e006:	4630      	mov	r0, r6
 804e008:	f008 fc59 	bl	80568be <shell_fprintf>
}
 804e00c:	4620      	mov	r0, r4
 804e00e:	b00b      	add	sp, #44	; 0x2c
 804e010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		shell_hexdump_line(shell, addr, data, todo);
 804e014:	462b      	mov	r3, r5
 804e016:	aa06      	add	r2, sp, #24
 804e018:	9905      	ldr	r1, [sp, #20]
 804e01a:	4630      	mov	r0, r6
 804e01c:	f7f8 ff94 	bl	8046f48 <shell_hexdump_line>
		addr += todo;
 804e020:	9b05      	ldr	r3, [sp, #20]
	for (upto = 0; upto < cnt; upto += todo) {
 804e022:	44a8      	add	r8, r5
		addr += todo;
 804e024:	442b      	add	r3, r5
 804e026:	9305      	str	r3, [sp, #20]
	for (upto = 0; upto < cnt; upto += todo) {
 804e028:	e7d1      	b.n	804dfce <cmd_read+0x36>
 804e02a:	bf00      	nop
 804e02c:	08060044 	.word	0x08060044
 804e030:	08062e67 	.word	0x08062e67

0804e034 <uart_stm32_irq_err_enable>:
	return LL_USART_IsActiveFlag_RXNE(UartInstance);
}

static void uart_stm32_irq_err_enable(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 804e034:	6843      	ldr	r3, [r0, #4]
 804e036:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 804e038:	689a      	ldr	r2, [r3, #8]
 804e03a:	f042 0201 	orr.w	r2, r2, #1
 804e03e:	609a      	str	r2, [r3, #8]

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 804e040:	4a13      	ldr	r2, [pc, #76]	; (804e090 <uart_stm32_irq_err_enable+0x5c>)
 804e042:	4293      	cmp	r3, r2
 804e044:	d01b      	beq.n	804e07e <uart_stm32_irq_err_enable+0x4a>
 804e046:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 804e04a:	4293      	cmp	r3, r2
 804e04c:	d017      	beq.n	804e07e <uart_stm32_irq_err_enable+0x4a>
 804e04e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804e052:	4293      	cmp	r3, r2
 804e054:	d013      	beq.n	804e07e <uart_stm32_irq_err_enable+0x4a>
 804e056:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804e05a:	4293      	cmp	r3, r2
 804e05c:	d00f      	beq.n	804e07e <uart_stm32_irq_err_enable+0x4a>
 804e05e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804e062:	4293      	cmp	r3, r2
 804e064:	d00b      	beq.n	804e07e <uart_stm32_irq_err_enable+0x4a>
 804e066:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 804e06a:	4293      	cmp	r3, r2
 804e06c:	d007      	beq.n	804e07e <uart_stm32_irq_err_enable+0x4a>
 804e06e:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 804e072:	4293      	cmp	r3, r2
 804e074:	d003      	beq.n	804e07e <uart_stm32_irq_err_enable+0x4a>
 804e076:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804e07a:	4293      	cmp	r3, r2
 804e07c:	d103      	bne.n	804e086 <uart_stm32_irq_err_enable+0x52>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 804e07e:	685a      	ldr	r2, [r3, #4]
 804e080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 804e084:	605a      	str	r2, [r3, #4]
  SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 804e086:	681a      	ldr	r2, [r3, #0]
 804e088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 804e08c:	601a      	str	r2, [r3, #0]
		LL_USART_EnableIT_LBD(UartInstance);
	}
#endif
	/* Enable parity error interruption */
	LL_USART_EnableIT_PE(UartInstance);
}
 804e08e:	4770      	bx	lr
 804e090:	40011000 	.word	0x40011000

0804e094 <uart_stm32_irq_err_disable>:

static void uart_stm32_irq_err_disable(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 804e094:	6843      	ldr	r3, [r0, #4]
 804e096:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 804e098:	689a      	ldr	r2, [r3, #8]
 804e09a:	f022 0201 	bic.w	r2, r2, #1
 804e09e:	609a      	str	r2, [r3, #8]

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 804e0a0:	4a13      	ldr	r2, [pc, #76]	; (804e0f0 <uart_stm32_irq_err_disable+0x5c>)
 804e0a2:	4293      	cmp	r3, r2
 804e0a4:	d01b      	beq.n	804e0de <uart_stm32_irq_err_disable+0x4a>
 804e0a6:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 804e0aa:	4293      	cmp	r3, r2
 804e0ac:	d017      	beq.n	804e0de <uart_stm32_irq_err_disable+0x4a>
 804e0ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804e0b2:	4293      	cmp	r3, r2
 804e0b4:	d013      	beq.n	804e0de <uart_stm32_irq_err_disable+0x4a>
 804e0b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804e0ba:	4293      	cmp	r3, r2
 804e0bc:	d00f      	beq.n	804e0de <uart_stm32_irq_err_disable+0x4a>
 804e0be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804e0c2:	4293      	cmp	r3, r2
 804e0c4:	d00b      	beq.n	804e0de <uart_stm32_irq_err_disable+0x4a>
 804e0c6:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 804e0ca:	4293      	cmp	r3, r2
 804e0cc:	d007      	beq.n	804e0de <uart_stm32_irq_err_disable+0x4a>
 804e0ce:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 804e0d2:	4293      	cmp	r3, r2
 804e0d4:	d003      	beq.n	804e0de <uart_stm32_irq_err_disable+0x4a>
 804e0d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804e0da:	4293      	cmp	r3, r2
 804e0dc:	d103      	bne.n	804e0e6 <uart_stm32_irq_err_disable+0x52>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 804e0de:	685a      	ldr	r2, [r3, #4]
 804e0e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804e0e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 804e0e6:	681a      	ldr	r2, [r3, #0]
 804e0e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 804e0ec:	601a      	str	r2, [r3, #0]
		LL_USART_DisableIT_LBD(UartInstance);
	}
#endif
	/* Disable parity error interruption */
	LL_USART_DisableIT_PE(UartInstance);
}
 804e0ee:	4770      	bx	lr
 804e0f0:	40011000 	.word	0x40011000

0804e0f4 <uart_stm32_set_baudrate>:
{
 804e0f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (clock_control_get_rate(data->clock,
 804e0f6:	6903      	ldr	r3, [r0, #16]
{
 804e0f8:	460c      	mov	r4, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 804e0fa:	6847      	ldr	r7, [r0, #4]
	if (clock_control_get_rate(data->clock,
 804e0fc:	685e      	ldr	r6, [r3, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 804e0fe:	f857 5b0c 	ldr.w	r5, [r7], #12
 804e102:	4630      	mov	r0, r6
 804e104:	f00c f8a7 	bl	805a256 <z_device_ready>
 804e108:	b970      	cbnz	r0, 804e128 <uart_stm32_set_baudrate+0x34>
		LOG_ERR("Failed call clock_control_get_rate");
 804e10a:	4912      	ldr	r1, [pc, #72]	; (804e154 <uart_stm32_set_baudrate+0x60>)
 804e10c:	680b      	ldr	r3, [r1, #0]
 804e10e:	075b      	lsls	r3, r3, #29
 804e110:	d008      	beq.n	804e124 <uart_stm32_set_baudrate+0x30>
 804e112:	4b11      	ldr	r3, [pc, #68]	; (804e158 <uart_stm32_set_baudrate+0x64>)
 804e114:	4811      	ldr	r0, [pc, #68]	; (804e15c <uart_stm32_set_baudrate+0x68>)
 804e116:	1ac9      	subs	r1, r1, r3
 804e118:	0889      	lsrs	r1, r1, #2
 804e11a:	0189      	lsls	r1, r1, #6
 804e11c:	f041 0101 	orr.w	r1, r1, #1
 804e120:	f007 ff61 	bl	8055fe6 <log_0>
}
 804e124:	b003      	add	sp, #12
 804e126:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (api->get_rate == NULL) {
 804e128:	68b3      	ldr	r3, [r6, #8]
 804e12a:	68db      	ldr	r3, [r3, #12]
 804e12c:	2b00      	cmp	r3, #0
 804e12e:	d0ec      	beq.n	804e10a <uart_stm32_set_baudrate+0x16>
	return api->get_rate(dev, sys, rate);
 804e130:	aa01      	add	r2, sp, #4
 804e132:	4639      	mov	r1, r7
 804e134:	4630      	mov	r0, r6
 804e136:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 804e138:	2800      	cmp	r0, #0
 804e13a:	dbe6      	blt.n	804e10a <uart_stm32_set_baudrate+0x16>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 804e13c:	682b      	ldr	r3, [r5, #0]
 804e13e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 804e142:	602b      	str	r3, [r5, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 804e144:	9b01      	ldr	r3, [sp, #4]
 804e146:	eb03 0254 	add.w	r2, r3, r4, lsr #1
 804e14a:	fbb2 f3f4 	udiv	r3, r2, r4
 804e14e:	b29b      	uxth	r3, r3
 804e150:	60eb      	str	r3, [r5, #12]
 804e152:	e7e7      	b.n	804e124 <uart_stm32_set_baudrate+0x30>
 804e154:	20020944 	.word	0x20020944
 804e158:	200208c8 	.word	0x200208c8
 804e15c:	08061e20 	.word	0x08061e20

0804e160 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 804e160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 804e164:	6845      	ldr	r5, [r0, #4]
{
 804e166:	4607      	mov	r7, r0
	struct uart_stm32_data *data = DEV_DATA(dev);
 804e168:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 804e16a:	46a9      	mov	r9, r5
	data->clock = clk;
 804e16c:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 804e258 <uart_stm32_init+0xf8>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 804e170:	f859 4b0c 	ldr.w	r4, [r9], #12
	data->clock = clk;
 804e174:	f8c6 8004 	str.w	r8, [r6, #4]
 804e178:	4640      	mov	r0, r8
 804e17a:	f00c f86c 	bl	805a256 <z_device_ready>
 804e17e:	b918      	cbnz	r0, 804e188 <uart_stm32_init+0x28>

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
			(clock_control_subsys_t *)&config->pclken) != 0) {
		return -EIO;
 804e180:	f06f 0004 	mvn.w	r0, #4
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 804e184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return api->on(dev, sys);
 804e188:	f8d8 3008 	ldr.w	r3, [r8, #8]
 804e18c:	4640      	mov	r0, r8
 804e18e:	4649      	mov	r1, r9
 804e190:	681b      	ldr	r3, [r3, #0]
 804e192:	4798      	blx	r3
	if (clock_control_on(data->clock,
 804e194:	4680      	mov	r8, r0
 804e196:	2800      	cmp	r0, #0
 804e198:	d1f2      	bne.n	804e180 <uart_stm32_init+0x20>
					 (uint32_t)UART_STRUCT(dev));
 804e19a:	687b      	ldr	r3, [r7, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 804e19c:	e9d5 0107 	ldrd	r0, r1, [r5, #28]
 804e1a0:	681a      	ldr	r2, [r3, #0]
 804e1a2:	f009 fa00 	bl	80575a6 <stm32_dt_pinctrl_configure>
	if (err < 0) {
 804e1a6:	2800      	cmp	r0, #0
 804e1a8:	dbec      	blt.n	804e184 <uart_stm32_init+0x24>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 804e1aa:	6823      	ldr	r3, [r4, #0]
	if (config->parity == 2) {
 804e1ac:	69a9      	ldr	r1, [r5, #24]
 804e1ae:	f023 0301 	bic.w	r3, r3, #1
 804e1b2:	2902      	cmp	r1, #2
 804e1b4:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 804e1b6:	6823      	ldr	r3, [r4, #0]
 804e1b8:	f043 030c 	orr.w	r3, r3, #12
 804e1bc:	6023      	str	r3, [r4, #0]
 804e1be:	d013      	beq.n	804e1e8 <uart_stm32_init+0x88>
	} else if (config->parity == 1) {
 804e1c0:	2901      	cmp	r1, #1
 804e1c2:	d03c      	beq.n	804e23e <uart_stm32_init+0xde>
		if (config->parity != 0) {
 804e1c4:	b171      	cbz	r1, 804e1e4 <uart_stm32_init+0x84>
			LOG_WRN("Invalid parity setting '%d'."
 804e1c6:	4a21      	ldr	r2, [pc, #132]	; (804e24c <uart_stm32_init+0xec>)
 804e1c8:	6813      	ldr	r3, [r2, #0]
 804e1ca:	f013 0306 	ands.w	r3, r3, #6
 804e1ce:	d03b      	beq.n	804e248 <uart_stm32_init+0xe8>
 804e1d0:	4b1f      	ldr	r3, [pc, #124]	; (804e250 <uart_stm32_init+0xf0>)
 804e1d2:	4820      	ldr	r0, [pc, #128]	; (804e254 <uart_stm32_init+0xf4>)
 804e1d4:	1ad2      	subs	r2, r2, r3
 804e1d6:	0892      	lsrs	r2, r2, #2
 804e1d8:	0192      	lsls	r2, r2, #6
 804e1da:	f042 0202 	orr.w	r2, r2, #2
 804e1de:	f007 ff11 	bl	8056004 <log_1>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 804e1e2:	4641      	mov	r1, r8
		ll_parity = LL_USART_PARITY_NONE;
 804e1e4:	460b      	mov	r3, r1
 804e1e6:	e003      	b.n	804e1f0 <uart_stm32_init+0x90>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 804e1e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 804e1ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 804e1f0:	6822      	ldr	r2, [r4, #0]
 804e1f2:	4319      	orrs	r1, r3
 804e1f4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 804e1f8:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 804e1fc:	4311      	orrs	r1, r2
 804e1fe:	6021      	str	r1, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 804e200:	6863      	ldr	r3, [r4, #4]
 804e202:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 804e206:	6063      	str	r3, [r4, #4]
	if (config->hw_flow_control) {
 804e208:	7d2b      	ldrb	r3, [r5, #20]
 804e20a:	b12b      	cbz	r3, 804e218 <uart_stm32_init+0xb8>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 804e20c:	687b      	ldr	r3, [r7, #4]
 804e20e:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 804e210:	6893      	ldr	r3, [r2, #8]
 804e212:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 804e216:	6093      	str	r3, [r2, #8]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 804e218:	6831      	ldr	r1, [r6, #0]
 804e21a:	4638      	mov	r0, r7
 804e21c:	f7ff ff6a 	bl	804e0f4 <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 804e220:	6823      	ldr	r3, [r4, #0]
 804e222:	f043 0301 	orr.w	r3, r3, #1
 804e226:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 804e228:	69e3      	ldr	r3, [r4, #28]
 804e22a:	029a      	lsls	r2, r3, #10
 804e22c:	d5fc      	bpl.n	804e228 <uart_stm32_init+0xc8>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 804e22e:	69e3      	ldr	r3, [r4, #28]
 804e230:	025b      	lsls	r3, r3, #9
 804e232:	d5fc      	bpl.n	804e22e <uart_stm32_init+0xce>
	config->uconf.irq_config_func(dev);
 804e234:	4638      	mov	r0, r7
 804e236:	68ab      	ldr	r3, [r5, #8]
 804e238:	4798      	blx	r3
	return 0;
 804e23a:	2000      	movs	r0, #0
 804e23c:	e7a2      	b.n	804e184 <uart_stm32_init+0x24>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 804e23e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 804e242:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 804e246:	e7d3      	b.n	804e1f0 <uart_stm32_init+0x90>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 804e248:	4619      	mov	r1, r3
 804e24a:	e7d1      	b.n	804e1f0 <uart_stm32_init+0x90>
 804e24c:	20020944 	.word	0x20020944
 804e250:	200208c8 	.word	0x200208c8
 804e254:	08062f37 	.word	0x08062f37
 804e258:	0805b844 	.word	0x0805b844

0804e25c <uart_stm32_configure>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 804e25c:	6843      	ldr	r3, [r0, #4]
{
 804e25e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 804e262:	681c      	ldr	r4, [r3, #0]
{
 804e264:	460d      	mov	r5, r1
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 804e266:	790b      	ldrb	r3, [r1, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 804e268:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 804e26a:	2b01      	cmp	r3, #1
 804e26c:	d01b      	beq.n	804e2a6 <uart_stm32_configure+0x4a>
		return LL_USART_PARITY_NONE;
 804e26e:	2b02      	cmp	r3, #2
 804e270:	bf0c      	ite	eq
 804e272:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 804e276:	2100      	movne	r1, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 804e278:	f895 9005 	ldrb.w	r9, [r5, #5]
	switch (sb) {
 804e27c:	f1b9 0f02 	cmp.w	r9, #2
 804e280:	bf96      	itet	ls
 804e282:	4a4d      	ldrls	r2, [pc, #308]	; (804e3b8 <uart_stm32_configure+0x15c>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 804e284:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
 804e288:	f832 e019 	ldrhls.w	lr, [r2, r9, lsl #1]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 804e28c:	79aa      	ldrb	r2, [r5, #6]
	switch (db) {
 804e28e:	2a02      	cmp	r2, #2
 804e290:	d00c      	beq.n	804e2ac <uart_stm32_configure+0x50>
 804e292:	2a04      	cmp	r2, #4
 804e294:	f000 8089 	beq.w	804e3aa <uart_stm32_configure+0x14e>
			return LL_USART_DATAWIDTH_8B;
 804e298:	2b00      	cmp	r3, #0
 804e29a:	bf14      	ite	ne
 804e29c:	f44f 5c80 	movne.w	ip, #4096	; 0x1000
 804e2a0:	f04f 0c00 	moveq.w	ip, #0
 804e2a4:	e008      	b.n	804e2b8 <uart_stm32_configure+0x5c>
	switch (parity) {
 804e2a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 804e2aa:	e7e5      	b.n	804e278 <uart_stm32_configure+0x1c>
			return LL_USART_DATAWIDTH_8B;
 804e2ac:	2b00      	cmp	r3, #0
 804e2ae:	bf0c      	ite	eq
 804e2b0:	f04f 5c80 	moveq.w	ip, #268435456	; 0x10000000
 804e2b4:	f04f 0c00 	movne.w	ip, #0
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 804e2b8:	f895 8007 	ldrb.w	r8, [r5, #7]
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 804e2bc:	f1a3 0a03 	sub.w	sl, r3, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 804e2c0:	f1b8 0f01 	cmp.w	r8, #1
 804e2c4:	bf14      	ite	ne
 804e2c6:	2700      	movne	r7, #0
 804e2c8:	f44f 7740 	moveq.w	r7, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 804e2cc:	f1ba 0f01 	cmp.w	sl, #1
 804e2d0:	d96e      	bls.n	804e3b0 <uart_stm32_configure+0x154>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 804e2d2:	b10b      	cbz	r3, 804e2d8 <uart_stm32_configure+0x7c>
 804e2d4:	2a04      	cmp	r2, #4
 804e2d6:	d06b      	beq.n	804e3b0 <uart_stm32_configure+0x154>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 804e2d8:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 804e2dc:	d068      	beq.n	804e3b0 <uart_stm32_configure+0x154>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 804e2de:	2a01      	cmp	r2, #1
 804e2e0:	d966      	bls.n	804e3b0 <uart_stm32_configure+0x154>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 804e2e2:	2a04      	cmp	r2, #4
 804e2e4:	d064      	beq.n	804e3b0 <uart_stm32_configure+0x154>
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 804e2e6:	f1b8 0f00 	cmp.w	r8, #0
 804e2ea:	d021      	beq.n	804e330 <uart_stm32_configure+0xd4>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 804e2ec:	4b33      	ldr	r3, [pc, #204]	; (804e3bc <uart_stm32_configure+0x160>)
 804e2ee:	429c      	cmp	r4, r3
 804e2f0:	d01b      	beq.n	804e32a <uart_stm32_configure+0xce>
 804e2f2:	f5a3 434c 	sub.w	r3, r3, #52224	; 0xcc00
 804e2f6:	429c      	cmp	r4, r3
 804e2f8:	d017      	beq.n	804e32a <uart_stm32_configure+0xce>
 804e2fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804e2fe:	429c      	cmp	r4, r3
 804e300:	d013      	beq.n	804e32a <uart_stm32_configure+0xce>
 804e302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804e306:	429c      	cmp	r4, r3
 804e308:	d00f      	beq.n	804e32a <uart_stm32_configure+0xce>
 804e30a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804e30e:	429c      	cmp	r4, r3
 804e310:	d00b      	beq.n	804e32a <uart_stm32_configure+0xce>
 804e312:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 804e316:	429c      	cmp	r4, r3
 804e318:	d007      	beq.n	804e32a <uart_stm32_configure+0xce>
 804e31a:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 804e31e:	429c      	cmp	r4, r3
 804e320:	d003      	beq.n	804e32a <uart_stm32_configure+0xce>
 804e322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804e326:	429c      	cmp	r4, r3
 804e328:	d142      	bne.n	804e3b0 <uart_stm32_configure+0x154>
 804e32a:	f1b8 0f01 	cmp.w	r8, #1
 804e32e:	d13f      	bne.n	804e3b0 <uart_stm32_configure+0x154>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 804e330:	6823      	ldr	r3, [r4, #0]
 804e332:	f023 0301 	bic.w	r3, r3, #1
 804e336:	6023      	str	r3, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 804e338:	6823      	ldr	r3, [r4, #0]
 804e33a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 804e33e:	4299      	cmp	r1, r3
 804e340:	d004      	beq.n	804e34c <uart_stm32_configure+0xf0>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 804e342:	6823      	ldr	r3, [r4, #0]
 804e344:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 804e348:	430b      	orrs	r3, r1
 804e34a:	6023      	str	r3, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 804e34c:	6863      	ldr	r3, [r4, #4]
 804e34e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 804e352:	459e      	cmp	lr, r3
 804e354:	d005      	beq.n	804e362 <uart_stm32_configure+0x106>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 804e356:	6861      	ldr	r1, [r4, #4]
 804e358:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 804e35c:	ea41 010e 	orr.w	r1, r1, lr
 804e360:	6061      	str	r1, [r4, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 804e362:	6823      	ldr	r3, [r4, #0]
 804e364:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
	if (databits != uart_stm32_get_databits(dev)) {
 804e368:	459c      	cmp	ip, r3
 804e36a:	d005      	beq.n	804e378 <uart_stm32_configure+0x11c>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 804e36c:	6822      	ldr	r2, [r4, #0]
 804e36e:	f022 2210 	bic.w	r2, r2, #268439552	; 0x10001000
 804e372:	ea42 020c 	orr.w	r2, r2, ip
 804e376:	6022      	str	r2, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 804e378:	68a3      	ldr	r3, [r4, #8]
 804e37a:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 804e37e:	429f      	cmp	r7, r3
 804e380:	d004      	beq.n	804e38c <uart_stm32_configure+0x130>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 804e382:	68a3      	ldr	r3, [r4, #8]
 804e384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804e388:	433b      	orrs	r3, r7
 804e38a:	60a3      	str	r3, [r4, #8]
	if (cfg->baudrate != data->baud_rate) {
 804e38c:	6829      	ldr	r1, [r5, #0]
 804e38e:	6833      	ldr	r3, [r6, #0]
 804e390:	4299      	cmp	r1, r3
 804e392:	d003      	beq.n	804e39c <uart_stm32_configure+0x140>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 804e394:	f7ff feae 	bl	804e0f4 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 804e398:	682b      	ldr	r3, [r5, #0]
 804e39a:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 804e39c:	6823      	ldr	r3, [r4, #0]
	return 0;
 804e39e:	2000      	movs	r0, #0
 804e3a0:	f043 0301 	orr.w	r3, r3, #1
 804e3a4:	6023      	str	r3, [r4, #0]
};
 804e3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (db) {
 804e3aa:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 804e3ae:	e783      	b.n	804e2b8 <uart_stm32_configure+0x5c>
		return -ENOTSUP;
 804e3b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 804e3b4:	e7f7      	b.n	804e3a6 <uart_stm32_configure+0x14a>
 804e3b6:	bf00      	nop
 804e3b8:	0805e2d0 	.word	0x0805e2d0
 804e3bc:	40011000 	.word	0x40011000

0804e3c0 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 804e3c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 804e3c4:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 804e3c6:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 804e3c8:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 804e3ca:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 804e3ce:	4b09      	ldr	r3, [pc, #36]	; (804e3f4 <elapsed+0x34>)
 804e3d0:	4909      	ldr	r1, [pc, #36]	; (804e3f8 <elapsed+0x38>)
{
 804e3d2:	b510      	push	{r4, lr}
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 804e3d4:	d101      	bne.n	804e3da <elapsed+0x1a>
	    || (val1 < val2)) {
 804e3d6:	4282      	cmp	r2, r0
 804e3d8:	d206      	bcs.n	804e3e8 <elapsed+0x28>
		overflow_cyc += last_load;
 804e3da:	681a      	ldr	r2, [r3, #0]
 804e3dc:	680c      	ldr	r4, [r1, #0]
 804e3de:	4422      	add	r2, r4
 804e3e0:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 804e3e2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 804e3e6:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 804e3e8:	681b      	ldr	r3, [r3, #0]
 804e3ea:	680a      	ldr	r2, [r1, #0]
 804e3ec:	4413      	add	r3, r2
}
 804e3ee:	1a18      	subs	r0, r3, r0
 804e3f0:	bd10      	pop	{r4, pc}
 804e3f2:	bf00      	nop
 804e3f4:	20038b5c 	.word	0x20038b5c
 804e3f8:	20038b58 	.word	0x20038b58

0804e3fc <sys_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void sys_clock_isr(void *arg)
{
 804e3fc:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 804e3fe:	f7ff ffdf 	bl	804e3c0 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 804e402:	4b0c      	ldr	r3, [pc, #48]	; (804e434 <sys_clock_isr+0x38>)
 804e404:	4a0c      	ldr	r2, [pc, #48]	; (804e438 <sys_clock_isr+0x3c>)
 804e406:	6818      	ldr	r0, [r3, #0]
 804e408:	6811      	ldr	r1, [r2, #0]
 804e40a:	4408      	add	r0, r1
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 804e40c:	f245 4160 	movw	r1, #21600	; 0x5460
	cycle_count += overflow_cyc;
 804e410:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 804e412:	2200      	movs	r2, #0
 804e414:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 804e416:	4a09      	ldr	r2, [pc, #36]	; (804e43c <sys_clock_isr+0x40>)
 804e418:	6813      	ldr	r3, [r2, #0]
 804e41a:	1ac0      	subs	r0, r0, r3
 804e41c:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 804e420:	fb01 3300 	mla	r3, r1, r0, r3
 804e424:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 804e426:	f004 f8ad 	bl	8052584 <sys_clock_announce>
	} else {
		sys_clock_announce(1);
	}
	z_arm_int_exit();
}
 804e42a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 804e42e:	f7f9 bfaf 	b.w	8048390 <z_arm_exc_exit>
 804e432:	bf00      	nop
 804e434:	20038b5c 	.word	0x20038b5c
 804e438:	20038b54 	.word	0x20038b54
 804e43c:	20038b50 	.word	0x20038b50

0804e440 <sys_clock_driver_init>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804e440:	4b09      	ldr	r3, [pc, #36]	; (804e468 <sys_clock_driver_init+0x28>)
 804e442:	2210      	movs	r2, #16
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
 804e444:	2000      	movs	r0, #0
 804e446:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	last_load = CYC_PER_TICK - 1;
 804e44a:	f245 425f 	movw	r2, #21599	; 0x545f
 804e44e:	4b07      	ldr	r3, [pc, #28]	; (804e46c <sys_clock_driver_init+0x2c>)
 804e450:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 804e452:	4b07      	ldr	r3, [pc, #28]	; (804e470 <sys_clock_driver_init+0x30>)
 804e454:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 804e456:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 804e45a:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 804e45c:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 804e45e:	691a      	ldr	r2, [r3, #16]
 804e460:	f042 0207 	orr.w	r2, r2, #7
 804e464:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 804e466:	4770      	bx	lr
 804e468:	e000ed00 	.word	0xe000ed00
 804e46c:	20038b58 	.word	0x20038b58
 804e470:	20038b5c 	.word	0x20038b5c

0804e474 <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
 804e474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804e476:	4d32      	ldr	r5, [pc, #200]	; (804e540 <sys_clock_set_timeout+0xcc>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 804e478:	b159      	cbz	r1, 804e492 <sys_clock_set_timeout+0x1e>
 804e47a:	1c43      	adds	r3, r0, #1
 804e47c:	d109      	bne.n	804e492 <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 804e47e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 804e482:	6913      	ldr	r3, [r2, #16]
 804e484:	f023 0301 	bic.w	r3, r3, #1
 804e488:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 804e48a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 804e48e:	602b      	str	r3, [r5, #0]
	} else {
		cycle_count += (val1 - val2);
	}
	k_spin_unlock(&lock, key);
#endif
}
 804e490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 804e492:	f240 3307 	movw	r3, #775	; 0x307
	uint32_t last_load_ = last_load;
 804e496:	682f      	ldr	r7, [r5, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 804e498:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 804e49c:	bf08      	it	eq
 804e49e:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 804e4a0:	1e44      	subs	r4, r0, #1
 804e4a2:	2c00      	cmp	r4, #0
 804e4a4:	dd33      	ble.n	804e50e <sys_clock_set_timeout+0x9a>
 804e4a6:	429c      	cmp	r4, r3
 804e4a8:	bfa8      	it	ge
 804e4aa:	461c      	movge	r4, r3
	__asm__ volatile(
 804e4ac:	f04f 0310 	mov.w	r3, #16
 804e4b0:	f3ef 8611 	mrs	r6, BASEPRI
 804e4b4:	f383 8812 	msr	BASEPRI_MAX, r3
 804e4b8:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 804e4bc:	f7ff ff80 	bl	804e3c0 <elapsed>
	val1 = SysTick->VAL;
 804e4c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	cycle_count += pending;
 804e4c4:	491f      	ldr	r1, [pc, #124]	; (804e544 <sys_clock_set_timeout+0xd0>)
	overflow_cyc = 0U;
 804e4c6:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
 804e4c8:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 804e4cc:	680b      	ldr	r3, [r1, #0]
 804e4ce:	4418      	add	r0, r3
	overflow_cyc = 0U;
 804e4d0:	4b1d      	ldr	r3, [pc, #116]	; (804e548 <sys_clock_set_timeout+0xd4>)
 804e4d2:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 804e4d4:	4b1d      	ldr	r3, [pc, #116]	; (804e54c <sys_clock_set_timeout+0xd8>)
	cycle_count += pending;
 804e4d6:	6008      	str	r0, [r1, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 804e4d8:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 804e4da:	1ac2      	subs	r2, r0, r3
 804e4dc:	d519      	bpl.n	804e512 <sys_clock_set_timeout+0x9e>
		last_load = MIN_DELAY;
 804e4de:	f240 5346 	movw	r3, #1350	; 0x546
			last_load = MAX_CYCLES;
 804e4e2:	602b      	str	r3, [r5, #0]
	val2 = SysTick->VAL;
 804e4e4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 804e4e8:	682c      	ldr	r4, [r5, #0]
	val2 = SysTick->VAL;
 804e4ea:	6993      	ldr	r3, [r2, #24]
	SysTick->LOAD = last_load - 1;
 804e4ec:	3c01      	subs	r4, #1
	if (val1 < val2) {
 804e4ee:	459c      	cmp	ip, r3
	SysTick->LOAD = last_load - 1;
 804e4f0:	6154      	str	r4, [r2, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 804e4f2:	f04f 0400 	mov.w	r4, #0
		cycle_count += (val1 + (last_load_ - val2));
 804e4f6:	bf38      	it	cc
 804e4f8:	44bc      	addcc	ip, r7
	SysTick->VAL = 0; /* resets timer to last_load */
 804e4fa:	6194      	str	r4, [r2, #24]
		cycle_count += (val1 - val2);
 804e4fc:	ebac 0c03 	sub.w	ip, ip, r3
 804e500:	4460      	add	r0, ip
 804e502:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
 804e504:	f386 8811 	msr	BASEPRI, r6
 804e508:	f3bf 8f6f 	isb	sy
 804e50c:	e7c0      	b.n	804e490 <sys_clock_set_timeout+0x1c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 804e50e:	2400      	movs	r4, #0
 804e510:	e7cc      	b.n	804e4ac <sys_clock_set_timeout+0x38>
		delay = ticks * CYC_PER_TICK;
 804e512:	f245 4e60 	movw	lr, #21600	; 0x5460
		delay -= unannounced;
 804e516:	1a1b      	subs	r3, r3, r0
		delay += unannounced;
 804e518:	fb0e 2404 	mla	r4, lr, r4, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 804e51c:	f504 44a8 	add.w	r4, r4, #21504	; 0x5400
 804e520:	345f      	adds	r4, #95	; 0x5f
 804e522:	fbb4 f4fe 	udiv	r4, r4, lr
		delay -= unannounced;
 804e526:	fb0e 3404 	mla	r4, lr, r4, r3
		delay = MAX(delay, MIN_DELAY);
 804e52a:	f240 5346 	movw	r3, #1350	; 0x546
 804e52e:	429c      	cmp	r4, r3
 804e530:	d904      	bls.n	804e53c <sys_clock_set_timeout+0xc8>
		if (delay > MAX_CYCLES) {
 804e532:	4b07      	ldr	r3, [pc, #28]	; (804e550 <sys_clock_set_timeout+0xdc>)
 804e534:	429c      	cmp	r4, r3
 804e536:	d8d4      	bhi.n	804e4e2 <sys_clock_set_timeout+0x6e>
			last_load = delay;
 804e538:	602c      	str	r4, [r5, #0]
 804e53a:	e7d3      	b.n	804e4e4 <sys_clock_set_timeout+0x70>
		delay = MAX(delay, MIN_DELAY);
 804e53c:	461c      	mov	r4, r3
 804e53e:	e7fb      	b.n	804e538 <sys_clock_set_timeout+0xc4>
 804e540:	20038b58 	.word	0x20038b58
 804e544:	20038b54 	.word	0x20038b54
 804e548:	20038b5c 	.word	0x20038b5c
 804e54c:	20038b50 	.word	0x20038b50
 804e550:	00ff6ea0 	.word	0x00ff6ea0

0804e554 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
 804e554:	b510      	push	{r4, lr}
	__asm__ volatile(
 804e556:	f04f 0310 	mov.w	r3, #16
 804e55a:	f3ef 8411 	mrs	r4, BASEPRI
 804e55e:	f383 8812 	msr	BASEPRI_MAX, r3
 804e562:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 804e566:	f7ff ff2b 	bl	804e3c0 <elapsed>
 804e56a:	4b07      	ldr	r3, [pc, #28]	; (804e588 <sys_clock_elapsed+0x34>)
 804e56c:	4a07      	ldr	r2, [pc, #28]	; (804e58c <sys_clock_elapsed+0x38>)
 804e56e:	681b      	ldr	r3, [r3, #0]
 804e570:	6812      	ldr	r2, [r2, #0]
 804e572:	1a9b      	subs	r3, r3, r2
 804e574:	4418      	add	r0, r3
	__asm__ volatile(
 804e576:	f384 8811 	msr	BASEPRI, r4
 804e57a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 804e57e:	f245 4360 	movw	r3, #21600	; 0x5460
 804e582:	fbb0 f0f3 	udiv	r0, r0, r3
 804e586:	bd10      	pop	{r4, pc}
 804e588:	20038b54 	.word	0x20038b54
 804e58c:	20038b50 	.word	0x20038b50

0804e590 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
 804e590:	b510      	push	{r4, lr}
	__asm__ volatile(
 804e592:	f04f 0310 	mov.w	r3, #16
 804e596:	f3ef 8411 	mrs	r4, BASEPRI
 804e59a:	f383 8812 	msr	BASEPRI_MAX, r3
 804e59e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = elapsed() + cycle_count;
 804e5a2:	f7ff ff0d 	bl	804e3c0 <elapsed>
 804e5a6:	4b04      	ldr	r3, [pc, #16]	; (804e5b8 <sys_clock_cycle_get_32+0x28>)
 804e5a8:	681b      	ldr	r3, [r3, #0]
 804e5aa:	4418      	add	r0, r3
	__asm__ volatile(
 804e5ac:	f384 8811 	msr	BASEPRI, r4
 804e5b0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 804e5b4:	bd10      	pop	{r4, pc}
 804e5b6:	bf00      	nop
 804e5b8:	20038b54 	.word	0x20038b54

0804e5bc <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 804e5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 804e5be:	6804      	ldr	r4, [r0, #0]
{
 804e5c0:	4605      	mov	r5, r0
	if (!tp) return vol;	/* Invalid path name? */
 804e5c2:	b37c      	cbz	r4, 804e624 <get_ldnumber+0x68>
 804e5c4:	4621      	mov	r1, r4
	do tc = *tt++; while (!IsTerminator(tc) && tc != ':');	/* Find a colon in the path */
 804e5c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 804e5ca:	2b1f      	cmp	r3, #31
 804e5cc:	d92d      	bls.n	804e62a <get_ldnumber+0x6e>
 804e5ce:	2b3a      	cmp	r3, #58	; 0x3a
 804e5d0:	d1f9      	bne.n	804e5c6 <get_ldnumber+0xa>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 804e5d2:	7823      	ldrb	r3, [r4, #0]
 804e5d4:	3b30      	subs	r3, #48	; 0x30
 804e5d6:	b2da      	uxtb	r2, r3
 804e5d8:	2a09      	cmp	r2, #9
 804e5da:	d91d      	bls.n	804e618 <get_ldnumber+0x5c>
 804e5dc:	4f16      	ldr	r7, [pc, #88]	; (804e638 <get_ldnumber+0x7c>)
 804e5de:	2000      	movs	r0, #0
		}
#if FF_STR_VOLUME_ID == 1	/* Arbitrary string is enabled */
		else {
			i = 0;
			do {
				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
 804e5e0:	f857 cb04 	ldr.w	ip, [r7], #4
 804e5e4:	4626      	mov	r6, r4
				do {	/* Compare the volume ID with path name */
					c = *sp++; tc = *tp++;
 804e5e6:	f81c 3b01 	ldrb.w	r3, [ip], #1
 804e5ea:	f816 2b01 	ldrb.w	r2, [r6], #1
					if (IsLower(c)) c -= 0x20;
 804e5ee:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
 804e5f2:	f1be 0f19 	cmp.w	lr, #25
					if (IsLower(tc)) tc -= 0x20;
 804e5f6:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
					if (IsLower(c)) c -= 0x20;
 804e5fa:	bf9c      	itt	ls
 804e5fc:	3b20      	subls	r3, #32
 804e5fe:	b2db      	uxtbls	r3, r3
					if (IsLower(tc)) tc -= 0x20;
 804e600:	f1be 0f19 	cmp.w	lr, #25
 804e604:	bf9c      	itt	ls
 804e606:	3a20      	subls	r2, #32
 804e608:	b2d2      	uxtbls	r2, r2
				} while (c && (TCHAR)c == tc);
 804e60a:	b183      	cbz	r3, 804e62e <get_ldnumber+0x72>
 804e60c:	429a      	cmp	r2, r3
 804e60e:	d0ea      	beq.n	804e5e6 <get_ldnumber+0x2a>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
 804e610:	3001      	adds	r0, #1
 804e612:	2808      	cmp	r0, #8
 804e614:	d1e4      	bne.n	804e5e0 <get_ldnumber+0x24>
 804e616:	e005      	b.n	804e624 <get_ldnumber+0x68>
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 804e618:	1ca2      	adds	r2, r4, #2
 804e61a:	4291      	cmp	r1, r2
 804e61c:	d1de      	bne.n	804e5dc <get_ldnumber+0x20>
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 804e61e:	2b07      	cmp	r3, #7
			i = (int)*tp - '0';	/* Get the LD number */
 804e620:	4618      	mov	r0, r3
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 804e622:	dd06      	ble.n	804e632 <get_ldnumber+0x76>
	if (!tp) return vol;	/* Invalid path name? */
 804e624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 804e628:	e004      	b.n	804e634 <get_ldnumber+0x78>
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 804e62a:	2000      	movs	r0, #0
 804e62c:	e002      	b.n	804e634 <get_ldnumber+0x78>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
 804e62e:	42b1      	cmp	r1, r6
 804e630:	d1ee      	bne.n	804e610 <get_ldnumber+0x54>
			*path = tt;		/* Snip the drive prefix off */
 804e632:	6029      	str	r1, [r5, #0]
}
 804e634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804e636:	bf00      	nop
 804e638:	0805e0b0 	.word	0x0805e0b0

0804e63c <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 804e63c:	b538      	push	{r3, r4, r5, lr}
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 804e63e:	2300      	movs	r3, #0
{
 804e640:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 804e642:	70c3      	strb	r3, [r0, #3]
 804e644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804e648:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 804e64a:	f00a fb69 	bl	8058d20 <move_window>
 804e64e:	2800      	cmp	r0, #0
 804e650:	d147      	bne.n	804e6e2 <check_fs+0xa6>
	sign = ld_word(fs->win + BS_55AA);
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 804e652:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 804e656:	f8b4 5232 	ldrh.w	r5, [r4, #562]	; 0x232
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 804e65a:	2beb      	cmp	r3, #235	; 0xeb
 804e65c:	d00a      	beq.n	804e674 <check_fs+0x38>
 804e65e:	3318      	adds	r3, #24
 804e660:	b2db      	uxtb	r3, r3
 804e662:	2b01      	cmp	r3, #1
 804e664:	d906      	bls.n	804e674 <check_fs+0x38>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
				return 0;	/* It can be presumed an FAT VBR */
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 804e666:	f64a 2055 	movw	r0, #43605	; 0xaa55
 804e66a:	4285      	cmp	r5, r0
 804e66c:	bf0c      	ite	eq
 804e66e:	2002      	moveq	r0, #2
 804e670:	2003      	movne	r0, #3
}
 804e672:	bd38      	pop	{r3, r4, r5, pc}
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 804e674:	f64a 2355 	movw	r3, #43605	; 0xaa55
 804e678:	429d      	cmp	r5, r3
 804e67a:	d028      	beq.n	804e6ce <check_fs+0x92>
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 804e67c:	f8b4 303f 	ldrh.w	r3, [r4, #63]	; 0x3f
 804e680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804e684:	d1ef      	bne.n	804e666 <check_fs+0x2a>
		b = fs->win[BPB_SecPerClus];
 804e686:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 804e68a:	2b00      	cmp	r3, #0
 804e68c:	d0eb      	beq.n	804e666 <check_fs+0x2a>
 804e68e:	1e5a      	subs	r2, r3, #1
 804e690:	421a      	tst	r2, r3
 804e692:	d1e8      	bne.n	804e666 <check_fs+0x2a>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 804e694:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 804e698:	2b00      	cmp	r3, #0
 804e69a:	d0e4      	beq.n	804e666 <check_fs+0x2a>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 804e69c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 804e6a0:	3b01      	subs	r3, #1
 804e6a2:	2b01      	cmp	r3, #1
 804e6a4:	d8df      	bhi.n	804e666 <check_fs+0x2a>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 804e6a6:	f8b4 3045 	ldrh.w	r3, [r4, #69]	; 0x45
 804e6aa:	2b00      	cmp	r3, #0
 804e6ac:	d0db      	beq.n	804e666 <check_fs+0x2a>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 804e6ae:	f8b4 3047 	ldrh.w	r3, [r4, #71]	; 0x47
 804e6b2:	2b7f      	cmp	r3, #127	; 0x7f
 804e6b4:	d806      	bhi.n	804e6c4 <check_fs+0x88>
 804e6b6:	f104 0054 	add.w	r0, r4, #84	; 0x54
 804e6ba:	f00a fa22 	bl	8058b02 <ld_dword>
 804e6be:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 804e6c2:	d3d0      	bcc.n	804e666 <check_fs+0x2a>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 804e6c4:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 804e6c8:	2b00      	cmp	r3, #0
 804e6ca:	d0cc      	beq.n	804e666 <check_fs+0x2a>
 804e6cc:	e007      	b.n	804e6de <check_fs+0xa2>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 804e6ce:	2208      	movs	r2, #8
 804e6d0:	4905      	ldr	r1, [pc, #20]	; (804e6e8 <check_fs+0xac>)
 804e6d2:	f104 0086 	add.w	r0, r4, #134	; 0x86
 804e6d6:	f00c fb6e 	bl	805adb6 <memcmp>
 804e6da:	2800      	cmp	r0, #0
 804e6dc:	d1ce      	bne.n	804e67c <check_fs+0x40>
			return 0;	/* It is an FAT32 VBR */
 804e6de:	2000      	movs	r0, #0
 804e6e0:	e7c7      	b.n	804e672 <check_fs+0x36>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 804e6e2:	2004      	movs	r0, #4
 804e6e4:	e7c5      	b.n	804e672 <check_fs+0x36>
 804e6e6:	bf00      	nop
 804e6e8:	08062fc1 	.word	0x08062fc1

0804e6ec <mount_volume>:
	FATFS *fs;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 804e6ec:	2300      	movs	r3, #0
{
 804e6ee:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 804e6f0:	600b      	str	r3, [r1, #0]
{
 804e6f2:	b085      	sub	sp, #20
 804e6f4:	460f      	mov	r7, r1
 804e6f6:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 804e6f8:	f7ff ff60 	bl	804e5bc <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 804e6fc:	1e06      	subs	r6, r0, #0
 804e6fe:	f2c0 8104 	blt.w	804e90a <mount_volume+0x21e>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 804e702:	4b88      	ldr	r3, [pc, #544]	; (804e924 <mount_volume+0x238>)
 804e704:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 804e708:	2c00      	cmp	r4, #0
 804e70a:	f000 8100 	beq.w	804e90e <mount_volume+0x222>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 804e70e:	603c      	str	r4, [r7, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 804e710:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 804e714:	7823      	ldrb	r3, [r4, #0]
 804e716:	b163      	cbz	r3, 804e732 <mount_volume+0x46>
		stat = disk_status(fs->pdrv);
 804e718:	7860      	ldrb	r0, [r4, #1]
 804e71a:	f001 f85f 	bl	804f7dc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 804e71e:	07c7      	lsls	r7, r0, #31
 804e720:	d407      	bmi.n	804e732 <mount_volume+0x46>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 804e722:	b11d      	cbz	r5, 804e72c <mount_volume+0x40>
 804e724:	f010 0504 	ands.w	r5, r0, #4
 804e728:	d000      	beq.n	804e72c <mount_volume+0x40>
				return FR_WRITE_PROTECTED;
 804e72a:	250a      	movs	r5, #10
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 804e72c:	4628      	mov	r0, r5
 804e72e:	b005      	add	sp, #20
 804e730:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 804e732:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the filesystem object */
 804e734:	2300      	movs	r3, #0
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 804e736:	7060      	strb	r0, [r4, #1]
	fs->fs_type = 0;					/* Clear the filesystem object */
 804e738:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 804e73a:	f001 f85b 	bl	804f7f4 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 804e73e:	07c6      	lsls	r6, r0, #31
 804e740:	f100 80e7 	bmi.w	804e912 <mount_volume+0x226>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 804e744:	b10d      	cbz	r5, 804e74a <mount_volume+0x5e>
 804e746:	0741      	lsls	r1, r0, #29
 804e748:	d4ef      	bmi.n	804e72a <mount_volume+0x3e>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 804e74a:	2100      	movs	r1, #0
 804e74c:	4620      	mov	r0, r4
 804e74e:	f7ff ff75 	bl	804e63c <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 804e752:	2802      	cmp	r0, #2
 804e754:	f040 80c3 	bne.w	804e8de <mount_volume+0x1f2>
 804e758:	466e      	mov	r6, sp
 804e75a:	f504 73fd 	add.w	r3, r4, #506	; 0x1fa
 804e75e:	f204 213a 	addw	r1, r4, #570	; 0x23a
 804e762:	4632      	mov	r2, r6
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 804e764:	4618      	mov	r0, r3
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 804e766:	3310      	adds	r3, #16
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 804e768:	f00a f9cb 	bl	8058b02 <ld_dword>
 804e76c:	f842 0b04 	str.w	r0, [r2], #4
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 804e770:	428b      	cmp	r3, r1
 804e772:	d1f7      	bne.n	804e764 <mount_volume+0x78>
 804e774:	2500      	movs	r5, #0
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 804e776:	f856 1b04 	ldr.w	r1, [r6], #4
 804e77a:	2900      	cmp	r1, #0
 804e77c:	f000 80a6 	beq.w	804e8cc <mount_volume+0x1e0>
 804e780:	4620      	mov	r0, r4
 804e782:	f7ff ff5b 	bl	804e63c <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 804e786:	2801      	cmp	r0, #1
 804e788:	f200 80a1 	bhi.w	804e8ce <mount_volume+0x1e2>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 804e78c:	f8b4 303f 	ldrh.w	r3, [r4, #63]	; 0x3f
 804e790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804e794:	f040 80a8 	bne.w	804e8e8 <mount_volume+0x1fc>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 804e798:	f8b4 604a 	ldrh.w	r6, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 804e79c:	b926      	cbnz	r6, 804e7a8 <mount_volume+0xbc>
 804e79e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 804e7a2:	f00a f9ae 	bl	8058b02 <ld_dword>
 804e7a6:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 804e7a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
	bsect = fs->winsect;					/* Volume offset */
 804e7ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 804e7ae:	1e5a      	subs	r2, r3, #1
		fs->fsize = fasize;
 804e7b0:	61e6      	str	r6, [r4, #28]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 804e7b2:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 804e7b4:	2a01      	cmp	r2, #1
 804e7b6:	f200 8097 	bhi.w	804e8e8 <mount_volume+0x1fc>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 804e7ba:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 804e7be:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 804e7c0:	2d00      	cmp	r5, #0
 804e7c2:	f000 8091 	beq.w	804e8e8 <mount_volume+0x1fc>
 804e7c6:	1e6a      	subs	r2, r5, #1
 804e7c8:	422a      	tst	r2, r5
 804e7ca:	f040 808d 	bne.w	804e8e8 <mount_volume+0x1fc>
	rv = ptr[1];
 804e7ce:	f8b4 7045 	ldrh.w	r7, [r4, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 804e7d2:	073a      	lsls	r2, r7, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 804e7d4:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 804e7d6:	f040 8087 	bne.w	804e8e8 <mount_volume+0x1fc>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 804e7da:	f8b4 0047 	ldrh.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 804e7de:	b918      	cbnz	r0, 804e7e8 <mount_volume+0xfc>
 804e7e0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 804e7e4:	f00a f98d 	bl	8058b02 <ld_dword>
	rv = ptr[1];
 804e7e8:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 804e7ec:	2a00      	cmp	r2, #0
 804e7ee:	d07b      	beq.n	804e8e8 <mount_volume+0x1fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 804e7f0:	fb06 fe03 	mul.w	lr, r6, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 804e7f4:	eb02 1c17 	add.w	ip, r2, r7, lsr #4
 804e7f8:	44f4      	add	ip, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 804e7fa:	4560      	cmp	r0, ip
 804e7fc:	d374      	bcc.n	804e8e8 <mount_volume+0x1fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 804e7fe:	eba0 000c 	sub.w	r0, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 804e802:	42a8      	cmp	r0, r5
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 804e804:	fbb0 f3f5 	udiv	r3, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 804e808:	d36e      	bcc.n	804e8e8 <mount_volume+0x1fc>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 804e80a:	4847      	ldr	r0, [pc, #284]	; (804e928 <mount_volume+0x23c>)
 804e80c:	4283      	cmp	r3, r0
 804e80e:	d86b      	bhi.n	804e8e8 <mount_volume+0x1fc>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 804e810:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 804e814:	4283      	cmp	r3, r0
 804e816:	d97e      	bls.n	804e916 <mount_volume+0x22a>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 804e818:	2503      	movs	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 804e81a:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 804e81c:	440a      	add	r2, r1
		fs->database = bsect + sysect;					/* Data start sector */
 804e81e:	eb01 000c 	add.w	r0, r1, ip
		if (fmt == FS_FAT32) {
 804e822:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 804e824:	61a3      	str	r3, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 804e826:	6221      	str	r1, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 804e828:	6262      	str	r2, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 804e82a:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 804e82c:	d15e      	bne.n	804e8ec <mount_volume+0x200>
	rv = rv << 8 | ptr[0];
 804e82e:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 804e832:	433a      	orrs	r2, r7
 804e834:	d158      	bne.n	804e8e8 <mount_volume+0x1fc>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 804e836:	009b      	lsls	r3, r3, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 804e838:	f104 0060 	add.w	r0, r4, #96	; 0x60
 804e83c:	f00a f961 	bl	8058b02 <ld_dword>
 804e840:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 804e842:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 804e846:	ebb6 2f53 	cmp.w	r6, r3, lsr #9
 804e84a:	d34d      	bcc.n	804e8e8 <mount_volume+0x1fc>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 804e84c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 804e850:	2d03      	cmp	r5, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 804e852:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 804e856:	f04f 0380 	mov.w	r3, #128	; 0x80
 804e85a:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 804e85c:	d12b      	bne.n	804e8b6 <mount_volume+0x1ca>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 804e85e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 804e862:	2b01      	cmp	r3, #1
 804e864:	d127      	bne.n	804e8b6 <mount_volume+0x1ca>
			&& move_window(fs, bsect + 1) == FR_OK)
 804e866:	3101      	adds	r1, #1
 804e868:	4620      	mov	r0, r4
 804e86a:	f00a fa59 	bl	8058d20 <move_window>
 804e86e:	bb10      	cbnz	r0, 804e8b6 <mount_volume+0x1ca>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 804e870:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 804e874:	f64a 2355 	movw	r3, #43605	; 0xaa55
			fs->fsi_flag = 0;
 804e878:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 804e87a:	429a      	cmp	r2, r3
 804e87c:	d11b      	bne.n	804e8b6 <mount_volume+0x1ca>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 804e87e:	4b2b      	ldr	r3, [pc, #172]	; (804e92c <mount_volume+0x240>)
 804e880:	f104 0034 	add.w	r0, r4, #52	; 0x34
 804e884:	f00a f93d 	bl	8058b02 <ld_dword>
 804e888:	4298      	cmp	r0, r3
 804e88a:	d114      	bne.n	804e8b6 <mount_volume+0x1ca>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 804e88c:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 804e890:	f504 7006 	add.w	r0, r4, #536	; 0x218
 804e894:	f00a f935 	bl	8058b02 <ld_dword>
 804e898:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 804e89c:	3320      	adds	r3, #32
 804e89e:	4298      	cmp	r0, r3
 804e8a0:	d109      	bne.n	804e8b6 <mount_volume+0x1ca>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 804e8a2:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 804e8a6:	f00a f92c 	bl	8058b02 <ld_dword>
 804e8aa:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 804e8ac:	f504 7008 	add.w	r0, r4, #544	; 0x220
 804e8b0:	f00a f927 	bl	8058b02 <ld_dword>
 804e8b4:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* Volume mount ID */
 804e8b6:	4a1e      	ldr	r2, [pc, #120]	; (804e930 <mount_volume+0x244>)
	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
 804e8b8:	7025      	strb	r5, [r4, #0]
	return FR_OK;
 804e8ba:	2500      	movs	r5, #0
	fs->id = ++Fsid;		/* Volume mount ID */
 804e8bc:	8813      	ldrh	r3, [r2, #0]
 804e8be:	3301      	adds	r3, #1
 804e8c0:	b29b      	uxth	r3, r3
 804e8c2:	8013      	strh	r3, [r2, #0]
 804e8c4:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 804e8c6:	4b1b      	ldr	r3, [pc, #108]	; (804e934 <mount_volume+0x248>)
 804e8c8:	60e3      	str	r3, [r4, #12]
	return FR_OK;
 804e8ca:	e72f      	b.n	804e72c <mount_volume+0x40>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 804e8cc:	2003      	movs	r0, #3
	} while (part == 0 && fmt >= 2 && ++i < 4);
 804e8ce:	3501      	adds	r5, #1
 804e8d0:	2d04      	cmp	r5, #4
 804e8d2:	f47f af50 	bne.w	804e776 <mount_volume+0x8a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 804e8d6:	2804      	cmp	r0, #4
 804e8d8:	d106      	bne.n	804e8e8 <mount_volume+0x1fc>
 804e8da:	2501      	movs	r5, #1
 804e8dc:	e726      	b.n	804e72c <mount_volume+0x40>
 804e8de:	2804      	cmp	r0, #4
 804e8e0:	d0fb      	beq.n	804e8da <mount_volume+0x1ee>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 804e8e2:	2801      	cmp	r0, #1
 804e8e4:	f67f af52 	bls.w	804e78c <mount_volume+0xa0>
 804e8e8:	250d      	movs	r5, #13
 804e8ea:	e71f      	b.n	804e72c <mount_volume+0x40>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 804e8ec:	2f00      	cmp	r7, #0
 804e8ee:	d0fb      	beq.n	804e8e8 <mount_volume+0x1fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 804e8f0:	4472      	add	r2, lr
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 804e8f2:	2d02      	cmp	r5, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 804e8f4:	62a2      	str	r2, [r4, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 804e8f6:	ea4f 0243 	mov.w	r2, r3, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 804e8fa:	bf1b      	ittet	ne
 804e8fc:	18d2      	addne	r2, r2, r3
 804e8fe:	f003 0301 	andne.w	r3, r3, #1
 804e902:	4613      	moveq	r3, r2
 804e904:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 804e908:	e79b      	b.n	804e842 <mount_volume+0x156>
	if (vol < 0) return FR_INVALID_DRIVE;
 804e90a:	250b      	movs	r5, #11
 804e90c:	e70e      	b.n	804e72c <mount_volume+0x40>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 804e90e:	250c      	movs	r5, #12
 804e910:	e70c      	b.n	804e72c <mount_volume+0x40>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 804e912:	2503      	movs	r5, #3
 804e914:	e70a      	b.n	804e72c <mount_volume+0x40>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 804e916:	f640 75f5 	movw	r5, #4085	; 0xff5
 804e91a:	42ab      	cmp	r3, r5
 804e91c:	bf8c      	ite	hi
 804e91e:	2502      	movhi	r5, #2
 804e920:	2501      	movls	r5, #1
 804e922:	e77a      	b.n	804e81a <mount_volume+0x12e>
 804e924:	20038b60 	.word	0x20038b60
 804e928:	0ffffff5 	.word	0x0ffffff5
 804e92c:	41615252 	.word	0x41615252
 804e930:	20038d14 	.word	0x20038d14
 804e934:	20038d16 	.word	0x20038d16

0804e938 <dir_read.constprop.0>:
static FRESULT dir_read (
 804e938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BYTE ord = 0xFF, sum = 0xFF;
 804e93c:	27ff      	movs	r7, #255	; 0xff
static FRESULT dir_read (
 804e93e:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
 804e940:	f8d0 8000 	ldr.w	r8, [r0]
	FRESULT res = FR_NO_FILE;
 804e944:	2504      	movs	r5, #4
	BYTE ord = 0xFF, sum = 0xFF;
 804e946:	463c      	mov	r4, r7
			if (uc != 0xFFFF) return 0;		/* Check filler */
 804e948:	f64f 79ff 	movw	r9, #65535	; 0xffff
	while (dp->sect) {
 804e94c:	69b1      	ldr	r1, [r6, #24]
 804e94e:	b911      	cbnz	r1, 804e956 <dir_read.constprop.0+0x1e>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 804e950:	2d00      	cmp	r5, #0
 804e952:	d05e      	beq.n	804ea12 <dir_read.constprop.0+0xda>
 804e954:	e04e      	b.n	804e9f4 <dir_read.constprop.0+0xbc>
		res = move_window(fs, dp->sect);
 804e956:	4640      	mov	r0, r8
 804e958:	f00a f9e2 	bl	8058d20 <move_window>
		if (res != FR_OK) break;
 804e95c:	4605      	mov	r5, r0
 804e95e:	2800      	cmp	r0, #0
 804e960:	d148      	bne.n	804e9f4 <dir_read.constprop.0+0xbc>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 804e962:	69f0      	ldr	r0, [r6, #28]
 804e964:	7803      	ldrb	r3, [r0, #0]
		if (b == 0) {
 804e966:	2b00      	cmp	r3, #0
 804e968:	d05b      	beq.n	804ea22 <dir_read.constprop.0+0xea>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 804e96a:	7ac2      	ldrb	r2, [r0, #11]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 804e96c:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 804e96e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 804e972:	71b2      	strb	r2, [r6, #6]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 804e974:	d043      	beq.n	804e9fe <dir_read.constprop.0+0xc6>
 804e976:	2b2e      	cmp	r3, #46	; 0x2e
 804e978:	d041      	beq.n	804e9fe <dir_read.constprop.0+0xc6>
 804e97a:	f022 0120 	bic.w	r1, r2, #32
 804e97e:	2908      	cmp	r1, #8
 804e980:	d03d      	beq.n	804e9fe <dir_read.constprop.0+0xc6>
				if (attr == AM_LFN) {	/* An LFN entry is found */
 804e982:	2a0f      	cmp	r2, #15
 804e984:	d140      	bne.n	804ea08 <dir_read.constprop.0+0xd0>
					if (b & LLEF) {		/* Is it start of an LFN sequence? */
 804e986:	0659      	lsls	r1, r3, #25
 804e988:	d537      	bpl.n	804e9fa <dir_read.constprop.0+0xc2>
						b &= (BYTE)~LLEF; ord = b;
 804e98a:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 804e98e:	6933      	ldr	r3, [r6, #16]
						sum = dp->dir[LDIR_Chksum];
 804e990:	7b47      	ldrb	r7, [r0, #13]
						dp->blk_ofs = dp->dptr;
 804e992:	62f3      	str	r3, [r6, #44]	; 0x2c
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 804e994:	7b43      	ldrb	r3, [r0, #13]
 804e996:	42bb      	cmp	r3, r7
 804e998:	d131      	bne.n	804e9fe <dir_read.constprop.0+0xc6>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 804e99a:	8b42      	ldrh	r2, [r0, #26]
 804e99c:	bb7a      	cbnz	r2, 804e9fe <dir_read.constprop.0+0xc6>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 804e99e:	7803      	ldrb	r3, [r0, #0]
 804e9a0:	210d      	movs	r1, #13
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 804e9a2:	f8d8 500c 	ldr.w	r5, [r8, #12]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 804e9a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 804e9aa:	f8df e07c 	ldr.w	lr, [pc, #124]	; 804ea28 <dir_read.constprop.0+0xf0>
 804e9ae:	3b01      	subs	r3, #1
 804e9b0:	434b      	muls	r3, r1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 804e9b2:	2101      	movs	r1, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 804e9b4:	f81e cb01 	ldrb.w	ip, [lr], #1
	rv = ptr[1];
 804e9b8:	f830 c00c 	ldrh.w	ip, [r0, ip]
		if (wc != 0) {
 804e9bc:	b309      	cbz	r1, 804ea02 <dir_read.constprop.0+0xca>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 804e9be:	2bff      	cmp	r3, #255	; 0xff
 804e9c0:	d81d      	bhi.n	804e9fe <dir_read.constprop.0+0xc6>
			lfnbuf[i++] = wc = uc;			/* Store it */
 804e9c2:	f825 c013 	strh.w	ip, [r5, r3, lsl #1]
 804e9c6:	4661      	mov	r1, ip
 804e9c8:	3301      	adds	r3, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 804e9ca:	3201      	adds	r2, #1
 804e9cc:	2a0d      	cmp	r2, #13
 804e9ce:	d1f1      	bne.n	804e9b4 <dir_read.constprop.0+0x7c>
	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 804e9d0:	7802      	ldrb	r2, [r0, #0]
 804e9d2:	0652      	lsls	r2, r2, #25
 804e9d4:	d505      	bpl.n	804e9e2 <dir_read.constprop.0+0xaa>
 804e9d6:	b121      	cbz	r1, 804e9e2 <dir_read.constprop.0+0xaa>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 804e9d8:	2bff      	cmp	r3, #255	; 0xff
 804e9da:	d810      	bhi.n	804e9fe <dir_read.constprop.0+0xc6>
		lfnbuf[i] = 0;
 804e9dc:	2200      	movs	r2, #0
 804e9de:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 804e9e2:	3c01      	subs	r4, #1
 804e9e4:	b2e4      	uxtb	r4, r4
		res = dir_next(dp, 0);		/* Next entry */
 804e9e6:	2100      	movs	r1, #0
 804e9e8:	4630      	mov	r0, r6
 804e9ea:	f00a fba8 	bl	805913e <dir_next>
		if (res != FR_OK) break;
 804e9ee:	4605      	mov	r5, r0
 804e9f0:	2800      	cmp	r0, #0
 804e9f2:	d0ab      	beq.n	804e94c <dir_read.constprop.0+0x14>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 804e9f4:	2300      	movs	r3, #0
 804e9f6:	61b3      	str	r3, [r6, #24]
 804e9f8:	e00c      	b.n	804ea14 <dir_read.constprop.0+0xdc>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 804e9fa:	42a3      	cmp	r3, r4
 804e9fc:	d0ca      	beq.n	804e994 <dir_read.constprop.0+0x5c>
 804e9fe:	24ff      	movs	r4, #255	; 0xff
 804ea00:	e7f1      	b.n	804e9e6 <dir_read.constprop.0+0xae>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 804ea02:	45cc      	cmp	ip, r9
 804ea04:	d0e1      	beq.n	804e9ca <dir_read.constprop.0+0x92>
 804ea06:	e7fa      	b.n	804e9fe <dir_read.constprop.0+0xc6>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 804ea08:	b93c      	cbnz	r4, 804ea1a <dir_read.constprop.0+0xe2>
 804ea0a:	f00a f89b 	bl	8058b44 <sum_sfn>
 804ea0e:	42b8      	cmp	r0, r7
 804ea10:	d103      	bne.n	804ea1a <dir_read.constprop.0+0xe2>
		res = move_window(fs, dp->sect);
 804ea12:	2500      	movs	r5, #0
}
 804ea14:	4628      	mov	r0, r5
 804ea16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 804ea1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804ea1e:	62f3      	str	r3, [r6, #44]	; 0x2c
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 804ea20:	e7f8      	b.n	804ea14 <dir_read.constprop.0+0xdc>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 804ea22:	2504      	movs	r5, #4
 804ea24:	e7e6      	b.n	804e9f4 <dir_read.constprop.0+0xbc>
 804ea26:	bf00      	nop
 804ea28:	0806307c 	.word	0x0806307c

0804ea2c <dir_find>:
{
 804ea2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 804ea30:	2100      	movs	r1, #0
{
 804ea32:	b085      	sub	sp, #20
 804ea34:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 804ea36:	f8d0 b000 	ldr.w	fp, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 804ea3a:	f00a fbd5 	bl	80591e8 <dir_sdi>
	if (res != FR_OK) return res;
 804ea3e:	4605      	mov	r5, r0
 804ea40:	2800      	cmp	r0, #0
 804ea42:	f040 808d 	bne.w	804eb60 <dir_find+0x134>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 804ea46:	f04f 08ff 	mov.w	r8, #255	; 0xff
 804ea4a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 804ea4e:	46c1      	mov	r9, r8
 804ea50:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
		res = move_window(fs, dp->sect);
 804ea54:	69a1      	ldr	r1, [r4, #24]
 804ea56:	4658      	mov	r0, fp
 804ea58:	f00a f962 	bl	8058d20 <move_window>
		if (res != FR_OK) break;
 804ea5c:	4605      	mov	r5, r0
 804ea5e:	2800      	cmp	r0, #0
 804ea60:	d17e      	bne.n	804eb60 <dir_find+0x134>
		c = dp->dir[DIR_Name];
 804ea62:	69e6      	ldr	r6, [r4, #28]
 804ea64:	7837      	ldrb	r7, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 804ea66:	2f00      	cmp	r7, #0
 804ea68:	d07e      	beq.n	804eb68 <dir_find+0x13c>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 804ea6a:	7af5      	ldrb	r5, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 804ea6c:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 804ea6e:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 804ea72:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 804ea74:	d004      	beq.n	804ea80 <dir_find+0x54>
 804ea76:	f015 0508 	ands.w	r5, r5, #8
 804ea7a:	d004      	beq.n	804ea86 <dir_find+0x5a>
 804ea7c:	2b0f      	cmp	r3, #15
 804ea7e:	d004      	beq.n	804ea8a <dir_find+0x5e>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 804ea80:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
 804ea84:	e050      	b.n	804eb28 <dir_find+0xfc>
			if (a == AM_LFN) {			/* An LFN entry is found */
 804ea86:	2b0f      	cmp	r3, #15
 804ea88:	d156      	bne.n	804eb38 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 804ea8a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 804ea8e:	065d      	lsls	r5, r3, #25
 804ea90:	d440      	bmi.n	804eb14 <dir_find+0xe8>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 804ea92:	0678      	lsls	r0, r7, #25
 804ea94:	d546      	bpl.n	804eb24 <dir_find+0xf8>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 804ea96:	6923      	ldr	r3, [r4, #16]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 804ea98:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 804ea9c:	f896 800d 	ldrb.w	r8, [r6, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 804eaa0:	62e3      	str	r3, [r4, #44]	; 0x2c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 804eaa2:	7b73      	ldrb	r3, [r6, #13]
 804eaa4:	4543      	cmp	r3, r8
 804eaa6:	d13f      	bne.n	804eb28 <dir_find+0xfc>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 804eaa8:	8b73      	ldrh	r3, [r6, #26]
 804eaaa:	2b00      	cmp	r3, #0
 804eaac:	d13c      	bne.n	804eb28 <dir_find+0xfc>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 804eaae:	7835      	ldrb	r5, [r6, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 804eab0:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 804eab2:	f8db 300c 	ldr.w	r3, [fp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 804eab6:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 804eaba:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 804eb70 <dir_find+0x144>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 804eabe:	9300      	str	r3, [sp, #0]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 804eac0:	230d      	movs	r3, #13
 804eac2:	3d01      	subs	r5, #1
 804eac4:	435d      	muls	r5, r3
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 804eac6:	f819 3b01 	ldrb.w	r3, [r9], #1
	rv = ptr[1];
 804eaca:	5af3      	ldrh	r3, [r6, r3]
		if (wc != 0) {
 804eacc:	b37a      	cbz	r2, 804eb2e <dir_find+0x102>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 804eace:	2dff      	cmp	r5, #255	; 0xff
 804ead0:	d82a      	bhi.n	804eb28 <dir_find+0xfc>
 804ead2:	4618      	mov	r0, r3
 804ead4:	9303      	str	r3, [sp, #12]
 804ead6:	f000 ff13 	bl	804f900 <ff_wtoupper>
 804eada:	9b00      	ldr	r3, [sp, #0]
 804eadc:	1c69      	adds	r1, r5, #1
 804eade:	9002      	str	r0, [sp, #8]
 804eae0:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 804eae4:	9101      	str	r1, [sp, #4]
 804eae6:	f000 ff0b 	bl	804f900 <ff_wtoupper>
 804eaea:	9a02      	ldr	r2, [sp, #8]
 804eaec:	4282      	cmp	r2, r0
 804eaee:	d11b      	bne.n	804eb28 <dir_find+0xfc>
 804eaf0:	9b03      	ldr	r3, [sp, #12]
 804eaf2:	9901      	ldr	r1, [sp, #4]
 804eaf4:	461a      	mov	r2, r3
 804eaf6:	460d      	mov	r5, r1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 804eaf8:	4b1c      	ldr	r3, [pc, #112]	; (804eb6c <dir_find+0x140>)
 804eafa:	4599      	cmp	r9, r3
 804eafc:	d1e3      	bne.n	804eac6 <dir_find+0x9a>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 804eafe:	7833      	ldrb	r3, [r6, #0]
 804eb00:	0659      	lsls	r1, r3, #25
 804eb02:	d504      	bpl.n	804eb0e <dir_find+0xe2>
 804eb04:	b11a      	cbz	r2, 804eb0e <dir_find+0xe2>
 804eb06:	9b00      	ldr	r3, [sp, #0]
 804eb08:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 804eb0c:	b963      	cbnz	r3, 804eb28 <dir_find+0xfc>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 804eb0e:	3f01      	subs	r7, #1
 804eb10:	fa5f f987 	uxtb.w	r9, r7
		res = dir_next(dp, 0);	/* Next entry */
 804eb14:	2100      	movs	r1, #0
 804eb16:	4620      	mov	r0, r4
 804eb18:	f00a fb11 	bl	805913e <dir_next>
	} while (res == FR_OK);
 804eb1c:	4605      	mov	r5, r0
 804eb1e:	2800      	cmp	r0, #0
 804eb20:	d098      	beq.n	804ea54 <dir_find+0x28>
 804eb22:	e01d      	b.n	804eb60 <dir_find+0x134>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 804eb24:	45b9      	cmp	r9, r7
 804eb26:	d0bc      	beq.n	804eaa2 <dir_find+0x76>
 804eb28:	f04f 09ff 	mov.w	r9, #255	; 0xff
 804eb2c:	e7f2      	b.n	804eb14 <dir_find+0xe8>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 804eb2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 804eb32:	428b      	cmp	r3, r1
 804eb34:	d0e0      	beq.n	804eaf8 <dir_find+0xcc>
 804eb36:	e7f7      	b.n	804eb28 <dir_find+0xfc>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 804eb38:	f1b9 0f00 	cmp.w	r9, #0
 804eb3c:	d104      	bne.n	804eb48 <dir_find+0x11c>
 804eb3e:	4630      	mov	r0, r6
 804eb40:	f00a f800 	bl	8058b44 <sum_sfn>
 804eb44:	4540      	cmp	r0, r8
 804eb46:	d00b      	beq.n	804eb60 <dir_find+0x134>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 804eb48:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 804eb4c:	07db      	lsls	r3, r3, #31
 804eb4e:	d497      	bmi.n	804ea80 <dir_find+0x54>
 804eb50:	220b      	movs	r2, #11
 804eb52:	f104 0120 	add.w	r1, r4, #32
 804eb56:	4630      	mov	r0, r6
 804eb58:	f00c f92d 	bl	805adb6 <memcmp>
 804eb5c:	2800      	cmp	r0, #0
 804eb5e:	d18f      	bne.n	804ea80 <dir_find+0x54>
}
 804eb60:	4628      	mov	r0, r5
 804eb62:	b005      	add	sp, #20
 804eb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 804eb68:	2504      	movs	r5, #4
 804eb6a:	e7f9      	b.n	804eb60 <dir_find+0x134>
 804eb6c:	08063089 	.word	0x08063089
 804eb70:	0806307c 	.word	0x0806307c

0804eb74 <follow_path>:
{
 804eb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 804eb78:	6803      	ldr	r3, [r0, #0]
{
 804eb7a:	b085      	sub	sp, #20
 804eb7c:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
 804eb7e:	9301      	str	r3, [sp, #4]
		while (IsSeparator(*path)) path++;	/* Strip separators */
 804eb80:	468a      	mov	sl, r1
 804eb82:	f811 3b01 	ldrb.w	r3, [r1], #1
 804eb86:	2b2f      	cmp	r3, #47	; 0x2f
 804eb88:	d0fa      	beq.n	804eb80 <follow_path+0xc>
 804eb8a:	2b5c      	cmp	r3, #92	; 0x5c
 804eb8c:	d0f8      	beq.n	804eb80 <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from the root directory */
 804eb8e:	2100      	movs	r1, #0
 804eb90:	60b1      	str	r1, [r6, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 804eb92:	f89a 3000 	ldrb.w	r3, [sl]
 804eb96:	2b1f      	cmp	r3, #31
 804eb98:	f200 810d 	bhi.w	804edb6 <follow_path+0x242>
		dp->fn[NSFLAG] = NS_NONAME;
 804eb9c:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 804eb9e:	4630      	mov	r0, r6
		dp->fn[NSFLAG] = NS_NONAME;
 804eba0:	f886 302b 	strb.w	r3, [r6, #43]	; 0x2b
}
 804eba4:	b005      	add	sp, #20
 804eba6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 804ebaa:	f00a bb1d 	b.w	80591e8 <dir_sdi>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 804ebae:	4601      	mov	r1, r0
 804ebb0:	4892      	ldr	r0, [pc, #584]	; (804edfc <follow_path+0x288>)
 804ebb2:	f00c fa7a 	bl	805b0aa <strchr>
 804ebb6:	2800      	cmp	r0, #0
 804ebb8:	f000 8118 	beq.w	804edec <follow_path+0x278>
 804ebbc:	e119      	b.n	804edf2 <follow_path+0x27e>
		lfn[di++] = wc;				/* Store the Unicode character */
 804ebbe:	f82b 4017 	strh.w	r4, [fp, r7, lsl #1]
	for (;;) {
 804ebc2:	3701      	adds	r7, #1
		uc = tchar2uni(&p);			/* Get a character */
 804ebc4:	e0fb      	b.n	804edbe <follow_path+0x24a>
 804ebc6:	4652      	mov	r2, sl
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
 804ebc8:	7813      	ldrb	r3, [r2, #0]
 804ebca:	4692      	mov	sl, r2
 804ebcc:	3201      	adds	r2, #1
 804ebce:	2b2f      	cmp	r3, #47	; 0x2f
 804ebd0:	d0fa      	beq.n	804ebc8 <follow_path+0x54>
 804ebd2:	2b5c      	cmp	r3, #92	; 0x5c
 804ebd4:	d0f8      	beq.n	804ebc8 <follow_path+0x54>
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 804ebd6:	2b1f      	cmp	r3, #31
 804ebd8:	bf8c      	ite	hi
 804ebda:	2400      	movhi	r4, #0
 804ebdc:	2404      	movls	r4, #4
		wc = lfn[di - 1];
 804ebde:	f1ab 0202 	sub.w	r2, fp, #2
	while (di) {					/* Snip off trailing spaces and dots if exist */
 804ebe2:	bb9f      	cbnz	r7, 804ec4c <follow_path+0xd8>
	lfn[di] = 0;							/* LFN is created into the working buffer */
 804ebe4:	2300      	movs	r3, #0
 804ebe6:	f82b 3017 	strh.w	r3, [fp, r7, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 804ebea:	2f00      	cmp	r7, #0
 804ebec:	f000 8101 	beq.w	804edf2 <follow_path+0x27e>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 804ebf0:	f83b 1013 	ldrh.w	r1, [fp, r3, lsl #1]
 804ebf4:	461a      	mov	r2, r3
 804ebf6:	3301      	adds	r3, #1
 804ebf8:	2920      	cmp	r1, #32
 804ebfa:	d0f9      	beq.n	804ebf0 <follow_path+0x7c>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 804ebfc:	b90a      	cbnz	r2, 804ec02 <follow_path+0x8e>
 804ebfe:	292e      	cmp	r1, #46	; 0x2e
 804ec00:	d101      	bne.n	804ec06 <follow_path+0x92>
 804ec02:	f044 0403 	orr.w	r4, r4, #3
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 804ec06:	f1ab 0102 	sub.w	r1, fp, #2
 804ec0a:	f831 3017 	ldrh.w	r3, [r1, r7, lsl #1]
 804ec0e:	2b2e      	cmp	r3, #46	; 0x2e
 804ec10:	d001      	beq.n	804ec16 <follow_path+0xa2>
 804ec12:	3f01      	subs	r7, #1
 804ec14:	d1f9      	bne.n	804ec0a <follow_path+0x96>
__ssp_bos_icheck3(memset, void *, int)
 804ec16:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
 804ec1a:	f04f 0900 	mov.w	r9, #0
 804ec1e:	6273      	str	r3, [r6, #36]	; 0x24
 804ec20:	46c8      	mov	r8, r9
 804ec22:	6233      	str	r3, [r6, #32]
 804ec24:	f8c6 3027 	str.w	r3, [r6, #39]	; 0x27
 804ec28:	2308      	movs	r3, #8
		wc = lfn[si++];					/* Get an LFN character */
 804ec2a:	1c51      	adds	r1, r2, #1
 804ec2c:	f83b 5012 	ldrh.w	r5, [fp, r2, lsl #1]
 804ec30:	9100      	str	r1, [sp, #0]
		if (wc == 0) break;				/* Break on end of the LFN */
 804ec32:	b305      	cbz	r5, 804ec76 <follow_path+0x102>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 804ec34:	2d20      	cmp	r5, #32
 804ec36:	d003      	beq.n	804ec40 <follow_path+0xcc>
 804ec38:	2d2e      	cmp	r5, #46	; 0x2e
 804ec3a:	d10f      	bne.n	804ec5c <follow_path+0xe8>
 804ec3c:	42b9      	cmp	r1, r7
 804ec3e:	d012      	beq.n	804ec66 <follow_path+0xf2>
			cf |= NS_LOSS | NS_LFN;
 804ec40:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)wc;
 804ec44:	9a00      	ldr	r2, [sp, #0]
 804ec46:	e7f0      	b.n	804ec2a <follow_path+0xb6>
		cf = NS_LAST;			/* Last segment */
 804ec48:	2404      	movs	r4, #4
 804ec4a:	e7c8      	b.n	804ebde <follow_path+0x6a>
		wc = lfn[di - 1];
 804ec4c:	f832 3017 	ldrh.w	r3, [r2, r7, lsl #1]
		if (wc != ' ' && wc != '.') break;
 804ec50:	2b20      	cmp	r3, #32
 804ec52:	d001      	beq.n	804ec58 <follow_path+0xe4>
 804ec54:	2b2e      	cmp	r3, #46	; 0x2e
 804ec56:	d1c5      	bne.n	804ebe4 <follow_path+0x70>
		di--;
 804ec58:	3f01      	subs	r7, #1
 804ec5a:	e7c2      	b.n	804ebe2 <follow_path+0x6e>
		if (i >= ni || si == di) {		/* End of field? */
 804ec5c:	4599      	cmp	r9, r3
 804ec5e:	d205      	bcs.n	804ec6c <follow_path+0xf8>
 804ec60:	9a00      	ldr	r2, [sp, #0]
 804ec62:	42ba      	cmp	r2, r7
 804ec64:	d14b      	bne.n	804ecfe <follow_path+0x18a>
			if (ni == 11) {				/* Name extension overflow? */
 804ec66:	2b0b      	cmp	r3, #11
 804ec68:	d140      	bne.n	804ecec <follow_path+0x178>
 804ec6a:	e001      	b.n	804ec70 <follow_path+0xfc>
 804ec6c:	2b0b      	cmp	r3, #11
 804ec6e:	d137      	bne.n	804ece0 <follow_path+0x16c>
				cf |= NS_LOSS | NS_LFN;
 804ec70:	f044 0403 	orr.w	r4, r4, #3
				break;
 804ec74:	230b      	movs	r3, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 804ec76:	f896 2020 	ldrb.w	r2, [r6, #32]
 804ec7a:	2ae5      	cmp	r2, #229	; 0xe5
 804ec7c:	bf04      	itt	eq
 804ec7e:	2205      	moveq	r2, #5
 804ec80:	f886 2020 	strbeq.w	r2, [r6, #32]
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 804ec84:	2b08      	cmp	r3, #8
 804ec86:	bf04      	itt	eq
 804ec88:	ea4f 0888 	moveq.w	r8, r8, lsl #2
 804ec8c:	fa5f f888 	uxtbeq.w	r8, r8
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 804ec90:	f008 030c 	and.w	r3, r8, #12
 804ec94:	2b0c      	cmp	r3, #12
 804ec96:	d003      	beq.n	804eca0 <follow_path+0x12c>
 804ec98:	f008 0303 	and.w	r3, r8, #3
 804ec9c:	2b03      	cmp	r3, #3
 804ec9e:	d101      	bne.n	804eca4 <follow_path+0x130>
 804eca0:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 804eca4:	07a1      	lsls	r1, r4, #30
 804eca6:	d409      	bmi.n	804ecbc <follow_path+0x148>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 804eca8:	f018 0f01 	tst.w	r8, #1
 804ecac:	bf18      	it	ne
 804ecae:	f044 0410 	orrne.w	r4, r4, #16
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 804ecb2:	f018 0f04 	tst.w	r8, #4
 804ecb6:	bf18      	it	ne
 804ecb8:	f044 0408 	orrne.w	r4, r4, #8
			res = dir_find(dp);				/* Find an object with the segment name */
 804ecbc:	4630      	mov	r0, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 804ecbe:	f886 402b 	strb.w	r4, [r6, #43]	; 0x2b
			res = dir_find(dp);				/* Find an object with the segment name */
 804ecc2:	f7ff feb3 	bl	804ea2c <dir_find>
			ns = dp->fn[NSFLAG];
 804ecc6:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
			if (res != FR_OK) {				/* Failed to find the object */
 804ecca:	2800      	cmp	r0, #0
 804eccc:	d063      	beq.n	804ed96 <follow_path+0x222>
				if (res == FR_NO_FILE) {	/* Object is not found */
 804ecce:	2804      	cmp	r0, #4
 804ecd0:	d103      	bne.n	804ecda <follow_path+0x166>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 804ecd2:	f013 0f04 	tst.w	r3, #4
 804ecd6:	bf08      	it	eq
 804ecd8:	2005      	moveq	r0, #5
}
 804ecda:	b005      	add	sp, #20
 804ecdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 804ece0:	9a00      	ldr	r2, [sp, #0]
 804ece2:	42ba      	cmp	r2, r7
 804ece4:	d002      	beq.n	804ecec <follow_path+0x178>
 804ece6:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;						/* No name extension? */
 804ecea:	d8c4      	bhi.n	804ec76 <follow_path+0x102>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 804ecec:	ea4f 0888 	mov.w	r8, r8, lsl #2
 804ecf0:	230b      	movs	r3, #11
 804ecf2:	f04f 0908 	mov.w	r9, #8
			continue;
 804ecf6:	9700      	str	r7, [sp, #0]
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 804ecf8:	fa5f f888 	uxtb.w	r8, r8
			continue;
 804ecfc:	e7a2      	b.n	804ec44 <follow_path+0xd0>
		if (wc >= 0x80) {	/* Is this an extended character? */
 804ecfe:	2d7f      	cmp	r5, #127	; 0x7f
 804ed00:	d914      	bls.n	804ed2c <follow_path+0x1b8>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 804ed02:	f044 0202 	orr.w	r2, r4, #2
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 804ed06:	4628      	mov	r0, r5
 804ed08:	f240 11b5 	movw	r1, #437	; 0x1b5
 804ed0c:	9303      	str	r3, [sp, #12]
			cf |= NS_LFN;	/* LFN entry needs to be created */
 804ed0e:	9202      	str	r2, [sp, #8]
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 804ed10:	f000 fdc2 	bl	804f898 <ff_uni2oem>
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 804ed14:	f010 0f80 	tst.w	r0, #128	; 0x80
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 804ed18:	4605      	mov	r5, r0
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 804ed1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 804ed1e:	d014      	beq.n	804ed4a <follow_path+0x1d6>
 804ed20:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 804ed24:	4936      	ldr	r1, [pc, #216]	; (804ee00 <follow_path+0x28c>)
 804ed26:	5d4d      	ldrb	r5, [r1, r5]
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 804ed28:	4614      	mov	r4, r2
 804ed2a:	b335      	cbz	r5, 804ed7a <follow_path+0x206>
 804ed2c:	4629      	mov	r1, r5
 804ed2e:	4835      	ldr	r0, [pc, #212]	; (804ee04 <follow_path+0x290>)
 804ed30:	9302      	str	r3, [sp, #8]
 804ed32:	f00c f9ba 	bl	805b0aa <strchr>
 804ed36:	9b02      	ldr	r3, [sp, #8]
 804ed38:	b9f8      	cbnz	r0, 804ed7a <follow_path+0x206>
				if (IsUpper(wc)) {		/* ASCII upper case? */
 804ed3a:	f1a5 0241 	sub.w	r2, r5, #65	; 0x41
 804ed3e:	b292      	uxth	r2, r2
 804ed40:	2a19      	cmp	r2, #25
 804ed42:	d81e      	bhi.n	804ed82 <follow_path+0x20e>
					b |= 2;
 804ed44:	f048 0802 	orr.w	r8, r8, #2
				if (IsLower(wc)) {		/* ASCII lower case? */
 804ed48:	e010      	b.n	804ed6c <follow_path+0x1f8>
		if (wc >= 0x100) {				/* Is this a DBC? */
 804ed4a:	28ff      	cmp	r0, #255	; 0xff
 804ed4c:	d9ec      	bls.n	804ed28 <follow_path+0x1b4>
			if (i >= ni - 1) {			/* Field overflow? */
 804ed4e:	1e59      	subs	r1, r3, #1
 804ed50:	4589      	cmp	r9, r1
 804ed52:	d303      	bcc.n	804ed5c <follow_path+0x1e8>
				cf |= NS_LOSS | NS_LFN;
 804ed54:	f044 0403 	orr.w	r4, r4, #3
				i = ni; continue;		/* Next field */
 804ed58:	4699      	mov	r9, r3
 804ed5a:	e773      	b.n	804ec44 <follow_path+0xd0>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 804ed5c:	eb06 0109 	add.w	r1, r6, r9
 804ed60:	0a00      	lsrs	r0, r0, #8
 804ed62:	f109 0901 	add.w	r9, r9, #1
 804ed66:	4614      	mov	r4, r2
 804ed68:	f881 0020 	strb.w	r0, [r1, #32]
		dp->fn[i++] = (BYTE)wc;
 804ed6c:	eb06 0209 	add.w	r2, r6, r9
 804ed70:	f109 0901 	add.w	r9, r9, #1
 804ed74:	f882 5020 	strb.w	r5, [r2, #32]
 804ed78:	e764      	b.n	804ec44 <follow_path+0xd0>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 804ed7a:	f044 0403 	orr.w	r4, r4, #3
 804ed7e:	255f      	movs	r5, #95	; 0x5f
 804ed80:	e7f4      	b.n	804ed6c <follow_path+0x1f8>
				if (IsLower(wc)) {		/* ASCII lower case? */
 804ed82:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
 804ed86:	b292      	uxth	r2, r2
 804ed88:	2a19      	cmp	r2, #25
					b |= 1; wc -= 0x20;
 804ed8a:	bf9e      	ittt	ls
 804ed8c:	3d20      	subls	r5, #32
 804ed8e:	f048 0801 	orrls.w	r8, r8, #1
 804ed92:	b2ad      	uxthls	r5, r5
 804ed94:	e7ea      	b.n	804ed6c <follow_path+0x1f8>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 804ed96:	075a      	lsls	r2, r3, #29
 804ed98:	d49f      	bmi.n	804ecda <follow_path+0x166>
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 804ed9a:	79b3      	ldrb	r3, [r6, #6]
 804ed9c:	06db      	lsls	r3, r3, #27
 804ed9e:	d52a      	bpl.n	804edf6 <follow_path+0x282>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 804eda0:	9b01      	ldr	r3, [sp, #4]
 804eda2:	6931      	ldr	r1, [r6, #16]
 804eda4:	3334      	adds	r3, #52	; 0x34
 804eda6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 804edaa:	4419      	add	r1, r3
 804edac:	9b01      	ldr	r3, [sp, #4]
 804edae:	7818      	ldrb	r0, [r3, #0]
 804edb0:	f00a f8c2 	bl	8058f38 <ld_clust.isra.0>
 804edb4:	60b0      	str	r0, [r6, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 804edb6:	6833      	ldr	r3, [r6, #0]
 804edb8:	2700      	movs	r7, #0
 804edba:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	wc = (BYTE)*p++;			/* Get a byte */
 804edbe:	f81a 0b01 	ldrb.w	r0, [sl], #1
	if (wc != 0) {
 804edc2:	2800      	cmp	r0, #0
 804edc4:	f43f af40 	beq.w	804ec48 <follow_path+0xd4>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 804edc8:	f240 11b5 	movw	r1, #437	; 0x1b5
 804edcc:	f000 fd84 	bl	804f8d8 <ff_oem2uni>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 804edd0:	4604      	mov	r4, r0
 804edd2:	b170      	cbz	r0, 804edf2 <follow_path+0x27e>
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 804edd4:	281f      	cmp	r0, #31
 804edd6:	f67f af37 	bls.w	804ec48 <follow_path+0xd4>
 804edda:	282f      	cmp	r0, #47	; 0x2f
 804eddc:	f43f aef3 	beq.w	804ebc6 <follow_path+0x52>
 804ede0:	285c      	cmp	r0, #92	; 0x5c
 804ede2:	f43f aef0 	beq.w	804ebc6 <follow_path+0x52>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 804ede6:	287f      	cmp	r0, #127	; 0x7f
 804ede8:	f67f aee1 	bls.w	804ebae <follow_path+0x3a>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 804edec:	2fff      	cmp	r7, #255	; 0xff
 804edee:	f47f aee6 	bne.w	804ebbe <follow_path+0x4a>
				break;
 804edf2:	2006      	movs	r0, #6
 804edf4:	e771      	b.n	804ecda <follow_path+0x166>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 804edf6:	2005      	movs	r0, #5
	return res;
 804edf8:	e76f      	b.n	804ecda <follow_path+0x166>
 804edfa:	bf00      	nop
 804edfc:	08062f9a 	.word	0x08062f9a
 804ee00:	08062ffc 	.word	0x08062ffc
 804ee04:	08062fa3 	.word	0x08062fa3

0804ee08 <dir_register>:
{
 804ee08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 804ee0c:	f890 b02b 	ldrb.w	fp, [r0, #43]	; 0x2b
{
 804ee10:	b089      	sub	sp, #36	; 0x24
 804ee12:	4604      	mov	r4, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 804ee14:	f01b 05a0 	ands.w	r5, fp, #160	; 0xa0
 804ee18:	f040 8093 	bne.w	804ef42 <dir_register+0x13a>
	FATFS *fs = dp->obj.fs;
 804ee1c:	6807      	ldr	r7, [r0, #0]
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 804ee1e:	68fa      	ldr	r2, [r7, #12]
 804ee20:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 804ee24:	2b00      	cmp	r3, #0
 804ee26:	d16a      	bne.n	804eefe <dir_register+0xf6>
	memcpy(sn, dp->fn, 12);
 804ee28:	f104 0620 	add.w	r6, r4, #32
 804ee2c:	f10d 0a14 	add.w	sl, sp, #20
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 804ee30:	f01b 0f01 	tst.w	fp, #1
 804ee34:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 804ee38:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 804ee3c:	f000 8088 	beq.w	804ef50 <dir_register+0x148>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 804ee40:	2340      	movs	r3, #64	; 0x40
		for (n = 1; n < 100; n++) {
 804ee42:	f04f 0801 	mov.w	r8, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 804ee46:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 804ee4a:	46b4      	mov	ip, r6
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 804ee4c:	68fb      	ldr	r3, [r7, #12]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 804ee4e:	f1b8 0f05 	cmp.w	r8, #5
 804ee52:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 804ee56:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 804ee5a:	f82c 2b02 	strh.w	r2, [ip], #2
 804ee5e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 804ee62:	f88c 2000 	strb.w	r2, [ip]
 804ee66:	d95d      	bls.n	804ef24 <dir_register+0x11c>
 804ee68:	1e98      	subs	r0, r3, #2
 804ee6a:	4642      	mov	r2, r8
		while (*lfn) {	/* Create a CRC as hash value */
 804ee6c:	f830 1f02 	ldrh.w	r1, [r0, #2]!
 804ee70:	2900      	cmp	r1, #0
 804ee72:	d146      	bne.n	804ef02 <dir_register+0xfa>
 804ee74:	f10d 0c13 	add.w	ip, sp, #19
 804ee78:	2107      	movs	r1, #7
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 804ee7a:	f002 0e0f 	and.w	lr, r2, #15
 804ee7e:	4691      	mov	r9, r2
 804ee80:	0912      	lsrs	r2, r2, #4
 804ee82:	f10e 0030 	add.w	r0, lr, #48	; 0x30
		if (c > '9') c += 7;
 804ee86:	2839      	cmp	r0, #57	; 0x39
 804ee88:	bf88      	it	hi
 804ee8a:	f10e 0037 	addhi.w	r0, lr, #55	; 0x37
	} while (i && seq);
 804ee8e:	3901      	subs	r1, #1
		ns[i--] = c;
 804ee90:	f80c 0901 	strb.w	r0, [ip], #-1
	} while (i && seq);
 804ee94:	d002      	beq.n	804ee9c <dir_register+0x94>
 804ee96:	f1b9 0f0f 	cmp.w	r9, #15
 804ee9a:	d8ee      	bhi.n	804ee7a <dir_register+0x72>
	ns[i] = '~';
 804ee9c:	ab08      	add	r3, sp, #32
 804ee9e:	207e      	movs	r0, #126	; 0x7e
 804eea0:	185a      	adds	r2, r3, r1
 804eea2:	f802 0c14 	strb.w	r0, [r2, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 804eea6:	4630      	mov	r0, r6
 804eea8:	2200      	movs	r2, #0
 804eeaa:	428a      	cmp	r2, r1
 804eeac:	d006      	beq.n	804eebc <dir_register+0xb4>
 804eeae:	f810 cb01 	ldrb.w	ip, [r0], #1
 804eeb2:	f102 0e01 	add.w	lr, r2, #1
 804eeb6:	f1bc 0f20 	cmp.w	ip, #32
 804eeba:	d135      	bne.n	804ef28 <dir_register+0x120>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 804eebc:	f104 0c1f 	add.w	ip, r4, #31
 804eec0:	2907      	cmp	r1, #7
 804eec2:	f102 0201 	add.w	r2, r2, #1
 804eec6:	bf97      	itett	ls
 804eec8:	ab08      	addls	r3, sp, #32
 804eeca:	2020      	movhi	r0, #32
 804eecc:	1858      	addls	r0, r3, r1
 804eece:	3101      	addls	r1, #1
 804eed0:	bf98      	it	ls
 804eed2:	f810 0c14 	ldrbls.w	r0, [r0, #-20]
	} while (j < 8);
 804eed6:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 804eed8:	f80c 0002 	strb.w	r0, [ip, r2]
	} while (j < 8);
 804eedc:	d9f0      	bls.n	804eec0 <dir_register+0xb8>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 804eede:	4620      	mov	r0, r4
 804eee0:	f7ff fda4 	bl	804ea2c <dir_find>
 804eee4:	4681      	mov	r9, r0
			if (res != FR_OK) break;
 804eee6:	bb78      	cbnz	r0, 804ef48 <dir_register+0x140>
		for (n = 1; n < 100; n++) {
 804eee8:	f108 0801 	add.w	r8, r8, #1
 804eeec:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 804eef0:	d1ab      	bne.n	804ee4a <dir_register+0x42>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 804eef2:	f04f 0907 	mov.w	r9, #7
}
 804eef6:	4648      	mov	r0, r9
 804eef8:	b009      	add	sp, #36	; 0x24
 804eefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 804eefe:	3501      	adds	r5, #1
 804ef00:	e78e      	b.n	804ee20 <dir_register+0x18>
 804ef02:	f04f 0c10 	mov.w	ip, #16
				sreg = (sreg << 1) + (wc & 1);
 804ef06:	f001 0e01 	and.w	lr, r1, #1
				wc >>= 1;
 804ef0a:	0849      	lsrs	r1, r1, #1
				sreg = (sreg << 1) + (wc & 1);
 804ef0c:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 804ef10:	03d3      	lsls	r3, r2, #15
 804ef12:	bf44      	itt	mi
 804ef14:	f482 3288 	eormi.w	r2, r2, #69632	; 0x11000
 804ef18:	f082 0221 	eormi.w	r2, r2, #33	; 0x21
			for (i = 0; i < 16; i++) {
 804ef1c:	f1bc 0c01 	subs.w	ip, ip, #1
 804ef20:	d1f1      	bne.n	804ef06 <dir_register+0xfe>
 804ef22:	e7a3      	b.n	804ee6c <dir_register+0x64>
 804ef24:	4642      	mov	r2, r8
 804ef26:	e7a5      	b.n	804ee74 <dir_register+0x6c>
 804ef28:	4672      	mov	r2, lr
 804ef2a:	e7be      	b.n	804eeaa <dir_register+0xa2>
				n = 0;				/* Not a free entry, restart to search */
 804ef2c:	4680      	mov	r8, r0
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 804ef2e:	2101      	movs	r1, #1
 804ef30:	4620      	mov	r0, r4
 804ef32:	f00a f904 	bl	805913e <dir_next>
		} while (res == FR_OK);
 804ef36:	4681      	mov	r9, r0
 804ef38:	b1f8      	cbz	r0, 804ef7a <dir_register+0x172>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 804ef3a:	f1b9 0f04 	cmp.w	r9, #4
 804ef3e:	d0d8      	beq.n	804eef2 <dir_register+0xea>
 804ef40:	e7d9      	b.n	804eef6 <dir_register+0xee>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 804ef42:	f04f 0906 	mov.w	r9, #6
 804ef46:	e7d6      	b.n	804eef6 <dir_register+0xee>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 804ef48:	2804      	cmp	r0, #4
 804ef4a:	d1d4      	bne.n	804eef6 <dir_register+0xee>
		dp->fn[NSFLAG] = sn[NSFLAG];
 804ef4c:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 804ef50:	f01b 0f02 	tst.w	fp, #2
	res = dir_sdi(dp, 0);
 804ef54:	f04f 0100 	mov.w	r1, #0
 804ef58:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 804ef5a:	f8d4 a000 	ldr.w	sl, [r4]
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 804ef5e:	bf1b      	ittet	ne
 804ef60:	350c      	addne	r5, #12
 804ef62:	230d      	movne	r3, #13
 804ef64:	2501      	moveq	r5, #1
 804ef66:	fbb5 f5f3 	udivne	r5, r5, r3
 804ef6a:	bf18      	it	ne
 804ef6c:	3501      	addne	r5, #1
	res = dir_sdi(dp, 0);
 804ef6e:	f00a f93b 	bl	80591e8 <dir_sdi>
	if (res == FR_OK) {
 804ef72:	4681      	mov	r9, r0
 804ef74:	2800      	cmp	r0, #0
 804ef76:	d1e0      	bne.n	804ef3a <dir_register+0x132>
		n = 0;
 804ef78:	4680      	mov	r8, r0
			res = move_window(fs, dp->sect);
 804ef7a:	69a1      	ldr	r1, [r4, #24]
 804ef7c:	4650      	mov	r0, sl
 804ef7e:	f009 fecf 	bl	8058d20 <move_window>
			if (res != FR_OK) break;
 804ef82:	4681      	mov	r9, r0
 804ef84:	2800      	cmp	r0, #0
 804ef86:	d1d8      	bne.n	804ef3a <dir_register+0x132>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 804ef88:	69e3      	ldr	r3, [r4, #28]
 804ef8a:	781b      	ldrb	r3, [r3, #0]
 804ef8c:	2be5      	cmp	r3, #229	; 0xe5
 804ef8e:	d001      	beq.n	804ef94 <dir_register+0x18c>
 804ef90:	2b00      	cmp	r3, #0
 804ef92:	d1cb      	bne.n	804ef2c <dir_register+0x124>
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 804ef94:	f108 0801 	add.w	r8, r8, #1
 804ef98:	4545      	cmp	r5, r8
 804ef9a:	d1c8      	bne.n	804ef2e <dir_register+0x126>
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 804ef9c:	3d01      	subs	r5, #1
 804ef9e:	d055      	beq.n	804f04c <dir_register+0x244>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 804efa0:	6921      	ldr	r1, [r4, #16]
 804efa2:	4620      	mov	r0, r4
 804efa4:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 804efa8:	f00a f91e 	bl	80591e8 <dir_sdi>
		if (res == FR_OK) {
 804efac:	4681      	mov	r9, r0
 804efae:	2800      	cmp	r0, #0
 804efb0:	d1a1      	bne.n	804eef6 <dir_register+0xee>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 804efb2:	f64f 78ff 	movw	r8, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 804efb6:	4630      	mov	r0, r6
 804efb8:	f009 fdc4 	bl	8058b44 <sum_sfn>
 804efbc:	9001      	str	r0, [sp, #4]
				res = move_window(fs, dp->sect);
 804efbe:	69a1      	ldr	r1, [r4, #24]
 804efc0:	4638      	mov	r0, r7
 804efc2:	f009 fead 	bl	8058d20 <move_window>
 804efc6:	4681      	mov	r9, r0
				if (res != FR_OK) break;
 804efc8:	2800      	cmp	r0, #0
 804efca:	d194      	bne.n	804eef6 <dir_register+0xee>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 804efcc:	69e3      	ldr	r3, [r4, #28]
 804efce:	b2e9      	uxtb	r1, r5
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 804efd0:	9a01      	ldr	r2, [sp, #4]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 804efd2:	f04f 0c0d 	mov.w	ip, #13
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 804efd6:	f8d7 e00c 	ldr.w	lr, [r7, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 804efda:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 804efdc:	f04f 020f 	mov.w	r2, #15
 804efe0:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 804f088 <dir_register+0x280>
 804efe4:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 804efe6:	1e4a      	subs	r2, r1, #1
	dir[LDIR_Type] = 0;
 804efe8:	7318      	strb	r0, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 804efea:	fb0c f202 	mul.w	r2, ip, r2
	s = wc = 0;
 804efee:	4684      	mov	ip, r0
	*ptr++ = (BYTE)val; val >>= 8;
 804eff0:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
 804eff2:	76d8      	strb	r0, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 804eff4:	4540      	cmp	r0, r8
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 804eff6:	f81a 9b01 	ldrb.w	r9, [sl], #1
	} while (++s < 13);
 804effa:	f10c 0c01 	add.w	ip, ip, #1
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 804effe:	bf18      	it	ne
 804f000:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 804f004:	eb03 0b09 	add.w	fp, r3, r9
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 804f008:	bf18      	it	ne
 804f00a:	3201      	addne	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 804f00c:	f803 0009 	strb.w	r0, [r3, r9]
 804f010:	ea4f 2910 	mov.w	r9, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;			/* Padding characters for following items */
 804f014:	2800      	cmp	r0, #0
 804f016:	bf08      	it	eq
 804f018:	4640      	moveq	r0, r8
	} while (++s < 13);
 804f01a:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
 804f01e:	f88b 9001 	strb.w	r9, [fp, #1]
	} while (++s < 13);
 804f022:	d1e7      	bne.n	804eff4 <dir_register+0x1ec>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 804f024:	4540      	cmp	r0, r8
 804f026:	d002      	beq.n	804f02e <dir_register+0x226>
 804f028:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 804f02c:	b90a      	cbnz	r2, 804f032 <dir_register+0x22a>
 804f02e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 804f032:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
 804f034:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 804f036:	2100      	movs	r1, #0
 804f038:	4620      	mov	r0, r4
				fs->wflag = 1;
 804f03a:	70fb      	strb	r3, [r7, #3]
				res = dir_next(dp, 0);	/* Next entry */
 804f03c:	f00a f87f 	bl	805913e <dir_next>
			} while (res == FR_OK && --n_ent);
 804f040:	4681      	mov	r9, r0
 804f042:	2800      	cmp	r0, #0
 804f044:	f47f af57 	bne.w	804eef6 <dir_register+0xee>
 804f048:	3d01      	subs	r5, #1
 804f04a:	d1b8      	bne.n	804efbe <dir_register+0x1b6>
		res = move_window(fs, dp->sect);
 804f04c:	69a1      	ldr	r1, [r4, #24]
 804f04e:	4638      	mov	r0, r7
 804f050:	f009 fe66 	bl	8058d20 <move_window>
		if (res == FR_OK) {
 804f054:	4681      	mov	r9, r0
 804f056:	2800      	cmp	r0, #0
 804f058:	f47f af4d 	bne.w	804eef6 <dir_register+0xee>
__ssp_bos_icheck3(memset, void *, int)
 804f05c:	4601      	mov	r1, r0
 804f05e:	2220      	movs	r2, #32
 804f060:	69e0      	ldr	r0, [r4, #28]
 804f062:	f00b fef3 	bl	805ae4c <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 804f066:	69e3      	ldr	r3, [r4, #28]
 804f068:	ce03      	ldmia	r6!, {r0, r1}
 804f06a:	6018      	str	r0, [r3, #0]
 804f06c:	6059      	str	r1, [r3, #4]
 804f06e:	78b2      	ldrb	r2, [r6, #2]
 804f070:	8831      	ldrh	r1, [r6, #0]
 804f072:	729a      	strb	r2, [r3, #10]
 804f074:	8119      	strh	r1, [r3, #8]
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 804f076:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 804f07a:	69e2      	ldr	r2, [r4, #28]
 804f07c:	f003 0318 	and.w	r3, r3, #24
 804f080:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 804f082:	2301      	movs	r3, #1
 804f084:	70fb      	strb	r3, [r7, #3]
 804f086:	e736      	b.n	804eef6 <dir_register+0xee>
 804f088:	0806307c 	.word	0x0806307c

0804f08c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 804f08c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 804f08e:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 804f092:	a803      	add	r0, sp, #12
{
 804f094:	4614      	mov	r4, r2
	const TCHAR *rp = path;
 804f096:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 804f098:	f7ff fa90 	bl	804e5bc <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 804f09c:	2800      	cmp	r0, #0
 804f09e:	db15      	blt.n	804f0cc <f_mount+0x40>
	cfs = FatFs[vol];					/* Pointer to fs object */
 804f0a0:	4a0b      	ldr	r2, [pc, #44]	; (804f0d0 <f_mount+0x44>)
 804f0a2:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]

	if (cfs) {
 804f0a6:	b10b      	cbz	r3, 804f0ac <f_mount+0x20>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 804f0a8:	2100      	movs	r1, #0
 804f0aa:	7019      	strb	r1, [r3, #0]
	}

	if (fs) {
 804f0ac:	9b01      	ldr	r3, [sp, #4]
 804f0ae:	b10b      	cbz	r3, 804f0b4 <f_mount+0x28>
		fs->fs_type = 0;				/* Clear new fs object */
 804f0b0:	2100      	movs	r1, #0
 804f0b2:	7019      	strb	r1, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 804f0b4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 804f0b8:	b12c      	cbz	r4, 804f0c6 <f_mount+0x3a>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 804f0ba:	2200      	movs	r2, #0
 804f0bc:	a901      	add	r1, sp, #4
 804f0be:	4668      	mov	r0, sp
 804f0c0:	f7ff fb14 	bl	804e6ec <mount_volume>
 804f0c4:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
}
 804f0c6:	4620      	mov	r0, r4
 804f0c8:	b004      	add	sp, #16
 804f0ca:	bd10      	pop	{r4, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 804f0cc:	240b      	movs	r4, #11
 804f0ce:	e7fa      	b.n	804f0c6 <f_mount+0x3a>
 804f0d0:	20038b60 	.word	0x20038b60

0804f0d4 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 804f0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804f0d8:	ed2d 8b02 	vpush	{d8}
 804f0dc:	b091      	sub	sp, #68	; 0x44
 804f0de:	460e      	mov	r6, r1
 804f0e0:	4614      	mov	r4, r2
 804f0e2:	9009      	str	r0, [sp, #36]	; 0x24
	DSTATUS ds;
	FRESULT fr;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 804f0e4:	a809      	add	r0, sp, #36	; 0x24
{
 804f0e6:	9308      	str	r3, [sp, #32]
	vol = get_ldnumber(&path);					/* Get target logical drive */
 804f0e8:	f7ff fa68 	bl	804e5bc <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 804f0ec:	2800      	cmp	r0, #0
 804f0ee:	f2c0 8366 	blt.w	804f7be <f_mkfs+0x6ea>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 804f0f2:	4ba6      	ldr	r3, [pc, #664]	; (804f38c <f_mkfs+0x2b8>)
 804f0f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 804f0f8:	b10b      	cbz	r3, 804f0fe <f_mkfs+0x2a>
 804f0fa:	2200      	movs	r2, #0
 804f0fc:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);			/* Physical drive */
 804f0fe:	fa5f fb80 	uxtb.w	fp, r0
	ipart = LD2PT(vol);			/* Partition (0:create as new, 1..:get from partition table) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 804f102:	4ba3      	ldr	r3, [pc, #652]	; (804f390 <f_mkfs+0x2bc>)

	/* Get physical drive status (sz_drv, sz_blk, ss) */
	ds = disk_initialize(pdrv);
 804f104:	4658      	mov	r0, fp
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 804f106:	2e00      	cmp	r6, #0
 804f108:	bf08      	it	eq
 804f10a:	461e      	moveq	r6, r3
	ds = disk_initialize(pdrv);
 804f10c:	f000 fb72 	bl	804f7f4 <disk_initialize>
	if (ds & STA_NOINIT) return FR_NOT_READY;
 804f110:	07c2      	lsls	r2, r0, #31
 804f112:	f100 8356 	bmi.w	804f7c2 <f_mkfs+0x6ee>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 804f116:	0743      	lsls	r3, r0, #29
 804f118:	f100 8355 	bmi.w	804f7c6 <f_mkfs+0x6f2>
	sz_blk = opt->align;
 804f11c:	6873      	ldr	r3, [r6, #4]
 804f11e:	930b      	str	r3, [sp, #44]	; 0x2c
	if (sz_blk == 0 && disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK) sz_blk = 1;
 804f120:	b93b      	cbnz	r3, 804f132 <f_mkfs+0x5e>
 804f122:	aa0b      	add	r2, sp, #44	; 0x2c
 804f124:	2103      	movs	r1, #3
 804f126:	4658      	mov	r0, fp
 804f128:	f000 fb88 	bl	804f83c <disk_ioctl>
 804f12c:	b108      	cbz	r0, 804f132 <f_mkfs+0x5e>
 804f12e:	2301      	movs	r3, #1
 804f130:	930b      	str	r3, [sp, #44]	; 0x2c
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;
 804f132:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 804f134:	1e53      	subs	r3, r2, #1
 804f136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804f13a:	d201      	bcs.n	804f140 <f_mkfs+0x6c>
 804f13c:	421a      	tst	r2, r3
 804f13e:	d001      	beq.n	804f144 <f_mkfs+0x70>
 804f140:	2301      	movs	r3, #1
 804f142:	930b      	str	r3, [sp, #44]	; 0x2c
#else
	ss = FF_MAX_SS;
#endif
	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 804f144:	7873      	ldrb	r3, [r6, #1]
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 804f146:	f8d6 9008 	ldr.w	r9, [r6, #8]
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 804f14a:	9302      	str	r3, [sp, #8]
 804f14c:	3b01      	subs	r3, #1
 804f14e:	2b01      	cmp	r3, #1
 804f150:	9b02      	ldr	r3, [sp, #8]
 804f152:	bf88      	it	hi
 804f154:	2301      	movhi	r3, #1
 804f156:	9302      	str	r3, [sp, #8]
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 804f158:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 804f15c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804f160:	d268      	bcs.n	804f234 <f_mkfs+0x160>
 804f162:	f019 0f0f 	tst.w	r9, #15
 804f166:	bf18      	it	ne
 804f168:	f44f 7900 	movne.w	r9, #512	; 0x200
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 804f16c:	68f5      	ldr	r5, [r6, #12]
 804f16e:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 804f172:	d862      	bhi.n	804f23a <f_mkfs+0x166>
 804f174:	1e6b      	subs	r3, r5, #1
 804f176:	422b      	tst	r3, r5
 804f178:	bf18      	it	ne
 804f17a:	2500      	movne	r5, #0
	sz_au /= ss;	/* Byte --> Sector */

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 804f17c:	9b08      	ldr	r3, [sp, #32]
 804f17e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804f182:	f0c0 8322 	bcc.w	804f7ca <f_mkfs+0x6f6>
	buf = (BYTE*)work;		/* Working buffer */
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 804f186:	2c00      	cmp	r4, #0
 804f188:	f000 831f 	beq.w	804f7ca <f_mkfs+0x6f6>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 804f18c:	2300      	movs	r3, #0
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 804f18e:	aa0c      	add	r2, sp, #48	; 0x30
 804f190:	2101      	movs	r1, #1
 804f192:	4658      	mov	r0, fp
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 804f194:	f896 8000 	ldrb.w	r8, [r6]
	b_vol = sz_vol = 0;
 804f198:	930c      	str	r3, [sp, #48]	; 0x30
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 804f19a:	f000 fb4f 	bl	804f83c <disk_ioctl>
 804f19e:	2800      	cmp	r0, #0
 804f1a0:	f040 8185 	bne.w	804f4ae <f_mkfs+0x3da>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 804f1a4:	f018 0308 	ands.w	r3, r8, #8
 804f1a8:	9307      	str	r3, [sp, #28]
 804f1aa:	d148      	bne.n	804f23e <f_mkfs+0x16a>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 804f1ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 804f1ae:	2b3f      	cmp	r3, #63	; 0x3f
 804f1b0:	d947      	bls.n	804f242 <f_mkfs+0x16e>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 804f1b2:	3b3f      	subs	r3, #63	; 0x3f
 804f1b4:	273f      	movs	r7, #63	; 0x3f
 804f1b6:	930c      	str	r3, [sp, #48]	; 0x30
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 804f1b8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 804f1ba:	2e7f      	cmp	r6, #127	; 0x7f
 804f1bc:	f240 80d7 	bls.w	804f36e <f_mkfs+0x29a>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 804f1c0:	f5b5 3f81 	cmp.w	r5, #66048	; 0x10200
 804f1c4:	f008 0201 	and.w	r2, r8, #1
	sz_au /= ss;	/* Byte --> Sector */
 804f1c8:	bf34      	ite	cc
 804f1ca:	0a6b      	lsrcc	r3, r5, #9
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 804f1cc:	2380      	movcs	r3, #128	; 0x80
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 804f1ce:	f018 0e02 	ands.w	lr, r8, #2
 804f1d2:	d038      	beq.n	804f246 <f_mkfs+0x172>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 804f1d4:	2a00      	cmp	r2, #0
 804f1d6:	d03a      	beq.n	804f24e <f_mkfs+0x17a>
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
		fsty = FS_FAT16;
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 804f1d8:	f106 42a0 	add.w	r2, r6, #1342177280	; 0x50000000
 804f1dc:	f502 1204 	add.w	r2, r2, #2162688	; 0x210000
 804f1e0:	9204      	str	r2, [sp, #16]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 804f1e2:	2b00      	cmp	r3, #0
 804f1e4:	f040 8097 	bne.w	804f316 <f_mkfs+0x242>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 804f1e8:	ea4f 3c16 	mov.w	ip, r6, lsr #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 804f1ec:	4869      	ldr	r0, [pc, #420]	; (804f394 <f_mkfs+0x2c0>)
 804f1ee:	2501      	movs	r5, #1
 804f1f0:	f830 2b02 	ldrh.w	r2, [r0], #2
 804f1f4:	b112      	cbz	r2, 804f1fc <f_mkfs+0x128>
 804f1f6:	4562      	cmp	r2, ip
 804f1f8:	f240 808b 	bls.w	804f312 <f_mkfs+0x23e>
				}
				n_clst = (DWORD)sz_vol / pau;
 804f1fc:	fbb6 f2f5 	udiv	r2, r6, r5
				if (n_clst > MAX_FAT12) {
 804f200:	f640 70f5 	movw	r0, #4085	; 0xff5
				} else {
					fsty = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
				sz_rsv = 1;						/* Number of reserved sectors */
 804f204:	f04f 0a01 	mov.w	sl, #1
				if (n_clst > MAX_FAT12) {
 804f208:	4282      	cmp	r2, r0
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 804f20a:	bf93      	iteet	ls
 804f20c:	eb02 0242 	addls.w	r2, r2, r2, lsl #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 804f210:	3202      	addhi	r2, #2
 804f212:	f04f 0802 	movhi.w	r8, #2
					fsty = FS_FAT12;
 804f216:	f04f 0801 	movls.w	r8, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 804f21a:	bf97      	itett	ls
 804f21c:	3201      	addls	r2, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 804f21e:	0052      	lslhi	r2, r2, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 804f220:	0852      	lsrls	r2, r2, #1
 804f222:	3203      	addls	r2, #3
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 804f224:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 804f228:	0a52      	lsrs	r2, r2, #9
 804f22a:	9203      	str	r2, [sp, #12]
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 804f22c:	f3c9 1216 	ubfx	r2, r9, #4, #23
 804f230:	9206      	str	r2, [sp, #24]
 804f232:	e031      	b.n	804f298 <f_mkfs+0x1c4>
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 804f234:	f44f 7900 	mov.w	r9, #512	; 0x200
 804f238:	e798      	b.n	804f16c <f_mkfs+0x98>
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 804f23a:	2500      	movs	r5, #0
 804f23c:	e79e      	b.n	804f17c <f_mkfs+0xa8>
	b_vol = sz_vol = 0;
 804f23e:	4607      	mov	r7, r0
 804f240:	e7ba      	b.n	804f1b8 <f_mkfs+0xe4>
 804f242:	9f07      	ldr	r7, [sp, #28]
 804f244:	e7b8      	b.n	804f1b8 <f_mkfs+0xe4>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 804f246:	2a00      	cmp	r2, #0
 804f248:	d1c6      	bne.n	804f1d8 <f_mkfs+0x104>
 804f24a:	2013      	movs	r0, #19
 804f24c:	e2b2      	b.n	804f7b4 <f_mkfs+0x6e0>
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 804f24e:	f106 42a0 	add.w	r2, r6, #1342177280	; 0x50000000
 804f252:	f502 1204 	add.w	r2, r2, #2162688	; 0x210000
 804f256:	9204      	str	r2, [sp, #16]
				if (pau == 0) {	/* AU auto-selection */
 804f258:	2b00      	cmp	r3, #0
 804f25a:	d158      	bne.n	804f30e <f_mkfs+0x23a>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 804f25c:	0c75      	lsrs	r5, r6, #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 804f25e:	484e      	ldr	r0, [pc, #312]	; (804f398 <f_mkfs+0x2c4>)
 804f260:	2301      	movs	r3, #1
 804f262:	f830 2b02 	ldrh.w	r2, [r0], #2
 804f266:	b112      	cbz	r2, 804f26e <f_mkfs+0x19a>
 804f268:	42aa      	cmp	r2, r5
 804f26a:	d94e      	bls.n	804f30a <f_mkfs+0x236>
 804f26c:	2200      	movs	r2, #0
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 804f26e:	fbb6 f0f3 	udiv	r0, r6, r3
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 804f272:	0085      	lsls	r5, r0, #2
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 804f274:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 804f278:	f205 2507 	addw	r5, r5, #519	; 0x207
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 804f27c:	38f6      	subs	r0, #246	; 0xf6
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 804f27e:	0a69      	lsrs	r1, r5, #9
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 804f280:	4d46      	ldr	r5, [pc, #280]	; (804f39c <f_mkfs+0x2c8>)
 804f282:	42a8      	cmp	r0, r5
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 804f284:	9103      	str	r1, [sp, #12]
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 804f286:	d872      	bhi.n	804f36e <f_mkfs+0x29a>
 804f288:	461d      	mov	r5, r3
				sz_rsv = 32;	/* Number of reserved sectors */
 804f28a:	f04f 0a20 	mov.w	sl, #32
 804f28e:	4613      	mov	r3, r2
 804f290:	f04f 0803 	mov.w	r8, #3
				sz_dir = 0;		/* No static directory */
 804f294:	2200      	movs	r2, #0
 804f296:	9206      	str	r2, [sp, #24]
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 804f298:	eb0a 0207 	add.w	r2, sl, r7
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 804f29c:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 804f2a0:	f1b8 0f03 	cmp.w	r8, #3
			b_fat = b_vol + sz_rsv;						/* FAT base */
 804f2a4:	9201      	str	r2, [sp, #4]
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 804f2a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 804f2aa:	fb00 2001 	mla	r0, r0, r1, r2
 804f2ae:	9a06      	ldr	r2, [sp, #24]
 804f2b0:	4410      	add	r0, r2
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 804f2b2:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 804f2b6:	f1cc 0c00 	rsb	ip, ip, #0
 804f2ba:	4402      	add	r2, r0
 804f2bc:	ea02 020c 	and.w	r2, r2, ip
 804f2c0:	eba2 0200 	sub.w	r2, r2, r0
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 804f2c4:	d129      	bne.n	804f31a <f_mkfs+0x246>
				sz_rsv += n; b_fat += n;
 804f2c6:	9901      	ldr	r1, [sp, #4]
 804f2c8:	4492      	add	sl, r2
 804f2ca:	4411      	add	r1, r2
 804f2cc:	9101      	str	r1, [sp, #4]
				}
				sz_fat += n / n_fat;
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 804f2ce:	ebc7 1205 	rsb	r2, r7, r5, lsl #4
 804f2d2:	4410      	add	r0, r2
 804f2d4:	4286      	cmp	r6, r0
 804f2d6:	d34a      	bcc.n	804f36e <f_mkfs+0x29a>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 804f2d8:	9a06      	ldr	r2, [sp, #24]
			if (fsty == FS_FAT32) {
 804f2da:	f1b8 0f03 	cmp.w	r8, #3
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 804f2de:	eba6 0202 	sub.w	r2, r6, r2
 804f2e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 804f2e6:	eba2 020a 	sub.w	r2, r2, sl
 804f2ea:	fb00 2211 	mls	r2, r0, r1, r2
 804f2ee:	fbb2 f2f5 	udiv	r2, r2, r5
 804f2f2:	9205      	str	r2, [sp, #20]
			if (fsty == FS_FAT32) {
 804f2f4:	d126      	bne.n	804f344 <f_mkfs+0x270>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 804f2f6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 804f2fa:	9905      	ldr	r1, [sp, #20]
 804f2fc:	4291      	cmp	r1, r2
 804f2fe:	d856      	bhi.n	804f3ae <f_mkfs+0x2da>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 804f300:	bbab      	cbnz	r3, 804f36e <f_mkfs+0x29a>
 804f302:	2d01      	cmp	r5, #1
 804f304:	d933      	bls.n	804f36e <f_mkfs+0x29a>
 804f306:	086b      	lsrs	r3, r5, #1
 804f308:	e7a6      	b.n	804f258 <f_mkfs+0x184>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 804f30a:	005b      	lsls	r3, r3, #1
 804f30c:	e7a9      	b.n	804f262 <f_mkfs+0x18e>
 804f30e:	461a      	mov	r2, r3
 804f310:	e7ad      	b.n	804f26e <f_mkfs+0x19a>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 804f312:	006d      	lsls	r5, r5, #1
 804f314:	e76c      	b.n	804f1f0 <f_mkfs+0x11c>
 804f316:	461d      	mov	r5, r3
 804f318:	e770      	b.n	804f1fc <f_mkfs+0x128>
				if (n % n_fat) {	/* Adjust fractional error if needed */
 804f31a:	9902      	ldr	r1, [sp, #8]
 804f31c:	fbb2 fcf1 	udiv	ip, r2, r1
 804f320:	fb01 2c1c 	mls	ip, r1, ip, r2
 804f324:	f1bc 0f00 	cmp.w	ip, #0
 804f328:	d005      	beq.n	804f336 <f_mkfs+0x262>
					n--; sz_rsv++; b_fat++;
 804f32a:	9901      	ldr	r1, [sp, #4]
 804f32c:	3a01      	subs	r2, #1
 804f32e:	f10a 0a01 	add.w	sl, sl, #1
 804f332:	3101      	adds	r1, #1
 804f334:	9101      	str	r1, [sp, #4]
				sz_fat += n / n_fat;
 804f336:	9902      	ldr	r1, [sp, #8]
 804f338:	fbb2 f2f1 	udiv	r2, r2, r1
 804f33c:	9903      	ldr	r1, [sp, #12]
 804f33e:	4411      	add	r1, r2
 804f340:	9103      	str	r1, [sp, #12]
 804f342:	e7c4      	b.n	804f2ce <f_mkfs+0x1fa>
					LEAVE_MKFS(FR_MKFS_ABORTED);
				}
			}
			if (fsty == FS_FAT16) {
 804f344:	f1b8 0f02 	cmp.w	r8, #2
 804f348:	d12a      	bne.n	804f3a0 <f_mkfs+0x2cc>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 804f34a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 804f34e:	9905      	ldr	r1, [sp, #20]
 804f350:	4291      	cmp	r1, r2
 804f352:	d90e      	bls.n	804f372 <f_mkfs+0x29e>
					if (sz_au == 0 && (pau * 2) <= 64) {
 804f354:	2b00      	cmp	r3, #0
 804f356:	f040 823a 	bne.w	804f7ce <f_mkfs+0x6fa>
 804f35a:	006b      	lsls	r3, r5, #1
 804f35c:	2b40      	cmp	r3, #64	; 0x40
 804f35e:	f67f af40 	bls.w	804f1e2 <f_mkfs+0x10e>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
					}
					if ((fsopt & FM_FAT32)) {
 804f362:	f1be 0f00 	cmp.w	lr, #0
 804f366:	f47f af79 	bne.w	804f25c <f_mkfs+0x188>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 804f36a:	2b80      	cmp	r3, #128	; 0x80
 804f36c:	d9d3      	bls.n	804f316 <f_mkfs+0x242>
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 804f36e:	200e      	movs	r0, #14
 804f370:	e220      	b.n	804f7b4 <f_mkfs+0x6e0>
					LEAVE_MKFS(FR_MKFS_ABORTED);
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 804f372:	f640 72f5 	movw	r2, #4085	; 0xff5
 804f376:	9905      	ldr	r1, [sp, #20]
 804f378:	4291      	cmp	r1, r2
 804f37a:	d818      	bhi.n	804f3ae <f_mkfs+0x2da>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 804f37c:	2b00      	cmp	r3, #0
 804f37e:	d1f6      	bne.n	804f36e <f_mkfs+0x29a>
 804f380:	006b      	lsls	r3, r5, #1
 804f382:	2b80      	cmp	r3, #128	; 0x80
 804f384:	f67f af2d 	bls.w	804f1e2 <f_mkfs+0x10e>
 804f388:	e7f1      	b.n	804f36e <f_mkfs+0x29a>
 804f38a:	bf00      	nop
 804f38c:	20038b60 	.word	0x20038b60
 804f390:	0805e0d0 	.word	0x0805e0d0
 804f394:	0805e2d6 	.word	0x0805e2d6
 804f398:	0805e2e4 	.word	0x0805e2e4
 804f39c:	0ffeffff 	.word	0x0ffeffff
					LEAVE_MKFS(FR_MKFS_ABORTED);
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 804f3a0:	f640 73f5 	movw	r3, #4085	; 0xff5
 804f3a4:	9a05      	ldr	r2, [sp, #20]
 804f3a6:	429a      	cmp	r2, r3
 804f3a8:	d8e1      	bhi.n	804f36e <f_mkfs+0x29a>
 804f3aa:	f04f 0801 	mov.w	r8, #1
__ssp_bos_icheck3(memset, void *, int)
 804f3ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 804f3b2:	2100      	movs	r1, #0
 804f3b4:	4620      	mov	r0, r4
 804f3b6:	f00b fd49 	bl	805ae4c <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 804f3ba:	4b4e      	ldr	r3, [pc, #312]	; (804f4f4 <f_mkfs+0x420>)
 804f3bc:	f1b8 0f03 	cmp.w	r8, #3
	*ptr++ = (BYTE)val; val >>= 8;
 804f3c0:	f884 a00e 	strb.w	sl, [r4, #14]
 804f3c4:	681a      	ldr	r2, [r3, #0]
 804f3c6:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 804f3ca:	bf08      	it	eq
 804f3cc:	f04f 0900 	moveq.w	r9, #0
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
		if (sz_vol < 0x10000) {
 804f3d0:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 804f3d4:	6022      	str	r2, [r4, #0]
 804f3d6:	685a      	ldr	r2, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 804f3d8:	f884 9011 	strb.w	r9, [r4, #17]
 804f3dc:	f3c9 2907 	ubfx	r9, r9, #8, #8
 804f3e0:	6062      	str	r2, [r4, #4]
 804f3e2:	891a      	ldrh	r2, [r3, #8]
 804f3e4:	7a9b      	ldrb	r3, [r3, #10]
 804f3e6:	8122      	strh	r2, [r4, #8]
 804f3e8:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 804f3ea:	f04f 0302 	mov.w	r3, #2
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 804f3ee:	7365      	strb	r5, [r4, #13]
	*ptr++ = (BYTE)val;
 804f3f0:	7323      	strb	r3, [r4, #12]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 804f3f2:	9b02      	ldr	r3, [sp, #8]
	*ptr++ = (BYTE)val;
 804f3f4:	f884 a00f 	strb.w	sl, [r4, #15]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 804f3f8:	7423      	strb	r3, [r4, #16]
	*ptr++ = (BYTE)val;
 804f3fa:	f884 9012 	strb.w	r9, [r4, #18]
		if (sz_vol < 0x10000) {
 804f3fe:	d258      	bcs.n	804f4b2 <f_mkfs+0x3de>
	*ptr++ = (BYTE)val; val >>= 8;
 804f400:	74e6      	strb	r6, [r4, #19]
 804f402:	f3c6 2607 	ubfx	r6, r6, #8, #8
	*ptr++ = (BYTE)val;
 804f406:	7526      	strb	r6, [r4, #20]
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 804f408:	23f8      	movs	r3, #248	; 0xf8
	*ptr++ = (BYTE)val;
 804f40a:	2200      	movs	r2, #0
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 804f40c:	4639      	mov	r1, r7
 804f40e:	f104 001c 	add.w	r0, r4, #28
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 804f412:	7563      	strb	r3, [r4, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 804f414:	233f      	movs	r3, #63	; 0x3f
	*ptr++ = (BYTE)val;
 804f416:	7662      	strb	r2, [r4, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 804f418:	7623      	strb	r3, [r4, #24]
 804f41a:	23ff      	movs	r3, #255	; 0xff
	*ptr++ = (BYTE)val;
 804f41c:	76e2      	strb	r2, [r4, #27]
	*ptr++ = (BYTE)val; val >>= 8;
 804f41e:	76a3      	strb	r3, [r4, #26]
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 804f420:	f009 fb71 	bl	8058b06 <st_dword>
		if (fsty == FS_FAT32) {
 804f424:	f1b8 0f03 	cmp.w	r8, #3
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 804f428:	9904      	ldr	r1, [sp, #16]
		if (fsty == FS_FAT32) {
 804f42a:	d148      	bne.n	804f4be <f_mkfs+0x3ea>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 804f42c:	f104 0043 	add.w	r0, r4, #67	; 0x43
 804f430:	f009 fb69 	bl	8058b06 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 804f434:	9903      	ldr	r1, [sp, #12]
 804f436:	f104 0024 	add.w	r0, r4, #36	; 0x24
 804f43a:	f009 fb64 	bl	8058b06 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 804f43e:	2302      	movs	r3, #2
	*ptr++ = (BYTE)val; val >>= 8;
 804f440:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
	*ptr++ = (BYTE)val; val >>= 8;
 804f444:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 804f448:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 804f44a:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
	*ptr++ = (BYTE)val; val >>= 8;
 804f44e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 804f452:	2306      	movs	r3, #6
	*ptr++ = (BYTE)val;
 804f454:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
	*ptr++ = (BYTE)val; val >>= 8;
 804f458:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 804f45c:	2380      	movs	r3, #128	; 0x80
	*ptr++ = (BYTE)val;
 804f45e:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 804f462:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 804f466:	2329      	movs	r3, #41	; 0x29
	*ptr++ = (BYTE)val;
 804f468:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
 804f46c:	f104 0247 	add.w	r2, r4, #71	; 0x47
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 804f470:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 804f474:	4b20      	ldr	r3, [pc, #128]	; (804f4f8 <f_mkfs+0x424>)
 804f476:	f103 0110 	add.w	r1, r3, #16
 804f47a:	f853 0b04 	ldr.w	r0, [r3], #4
 804f47e:	428b      	cmp	r3, r1
 804f480:	f842 0b04 	str.w	r0, [r2], #4
 804f484:	d1f9      	bne.n	804f47a <f_mkfs+0x3a6>
 804f486:	8819      	ldrh	r1, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 804f488:	f04f 0a55 	mov.w	sl, #85	; 0x55
 804f48c:	789b      	ldrb	r3, [r3, #2]
	*ptr++ = (BYTE)val;
 804f48e:	f04f 09aa 	mov.w	r9, #170	; 0xaa
 804f492:	8011      	strh	r1, [r2, #0]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 804f494:	4658      	mov	r0, fp
 804f496:	7093      	strb	r3, [r2, #2]
 804f498:	4621      	mov	r1, r4
 804f49a:	2301      	movs	r3, #1
 804f49c:	463a      	mov	r2, r7
	*ptr++ = (BYTE)val; val >>= 8;
 804f49e:	f884 a1fe 	strb.w	sl, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
 804f4a2:	f884 91ff 	strb.w	r9, [r4, #511]	; 0x1ff
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 804f4a6:	f000 f9bd 	bl	804f824 <disk_write>
 804f4aa:	4606      	mov	r6, r0
 804f4ac:	b340      	cbz	r0, 804f500 <f_mkfs+0x42c>
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 804f4ae:	2001      	movs	r0, #1
 804f4b0:	e180      	b.n	804f7b4 <f_mkfs+0x6e0>
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 804f4b2:	4631      	mov	r1, r6
 804f4b4:	f104 0020 	add.w	r0, r4, #32
 804f4b8:	f009 fb25 	bl	8058b06 <st_dword>
 804f4bc:	e7a4      	b.n	804f408 <f_mkfs+0x334>
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 804f4be:	f104 0027 	add.w	r0, r4, #39	; 0x27
 804f4c2:	f104 022b 	add.w	r2, r4, #43	; 0x2b
 804f4c6:	f009 fb1e 	bl	8058b06 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 804f4ca:	9b03      	ldr	r3, [sp, #12]
 804f4cc:	75a3      	strb	r3, [r4, #22]
 804f4ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
	*ptr++ = (BYTE)val;
 804f4d2:	75e3      	strb	r3, [r4, #23]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 804f4d4:	2380      	movs	r3, #128	; 0x80
 804f4d6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 804f4da:	2329      	movs	r3, #41	; 0x29
 804f4dc:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 804f4e0:	4b06      	ldr	r3, [pc, #24]	; (804f4fc <f_mkfs+0x428>)
 804f4e2:	f103 0110 	add.w	r1, r3, #16
 804f4e6:	f853 0b04 	ldr.w	r0, [r3], #4
 804f4ea:	428b      	cmp	r3, r1
 804f4ec:	f842 0b04 	str.w	r0, [r2], #4
 804f4f0:	d1f9      	bne.n	804f4e6 <f_mkfs+0x412>
 804f4f2:	e7c8      	b.n	804f486 <f_mkfs+0x3b2>
 804f4f4:	08062faa 	.word	0x08062faa
 804f4f8:	08062fb6 	.word	0x08062fb6
 804f4fc:	08062fca 	.word	0x08062fca

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 804f500:	f1b8 0f03 	cmp.w	r8, #3
 804f504:	d13a      	bne.n	804f57c <f_mkfs+0x4a8>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 804f506:	2301      	movs	r3, #1
 804f508:	1dba      	adds	r2, r7, #6
 804f50a:	4621      	mov	r1, r4
 804f50c:	4658      	mov	r0, fp
 804f50e:	f000 f989 	bl	804f824 <disk_write>
__ssp_bos_icheck3(memset, void *, int)
 804f512:	f44f 7200 	mov.w	r2, #512	; 0x200
 804f516:	4631      	mov	r1, r6
 804f518:	4620      	mov	r0, r4
 804f51a:	f00b fc97 	bl	805ae4c <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 804f51e:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 804f520:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 804f522:	2172      	movs	r1, #114	; 0x72
 804f524:	7023      	strb	r3, [r4, #0]
			memset(buf, 0, ss);
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 804f526:	f504 70f4 	add.w	r0, r4, #488	; 0x1e8
	*ptr++ = (BYTE)val; val >>= 8;
 804f52a:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 804f52c:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val;
 804f52e:	70e2      	strb	r2, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 804f530:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 804f532:	f884 31e7 	strb.w	r3, [r4, #487]	; 0x1e7
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 804f536:	9b05      	ldr	r3, [sp, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 804f538:	f884 11e4 	strb.w	r1, [r4, #484]	; 0x1e4
	*ptr++ = (BYTE)val; val >>= 8;
 804f53c:	f884 11e5 	strb.w	r1, [r4, #485]	; 0x1e5
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 804f540:	1e59      	subs	r1, r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 804f542:	f884 21e6 	strb.w	r2, [r4, #486]	; 0x1e6
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
			st_word(buf + BS_55AA, 0xAA55);
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 804f546:	1dfa      	adds	r2, r7, #7
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 804f548:	f009 fadd 	bl	8058b06 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 804f54c:	2302      	movs	r3, #2
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 804f54e:	4621      	mov	r1, r4
 804f550:	4658      	mov	r0, fp
	*ptr++ = (BYTE)val; val >>= 8;
 804f552:	f884 31ec 	strb.w	r3, [r4, #492]	; 0x1ec
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 804f556:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 804f558:	f884 61ed 	strb.w	r6, [r4, #493]	; 0x1ed
	*ptr++ = (BYTE)val; val >>= 8;
 804f55c:	f884 61ee 	strb.w	r6, [r4, #494]	; 0x1ee
	*ptr++ = (BYTE)val;
 804f560:	f884 61ef 	strb.w	r6, [r4, #495]	; 0x1ef
	*ptr++ = (BYTE)val; val >>= 8;
 804f564:	f884 a1fe 	strb.w	sl, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
 804f568:	f884 91ff 	strb.w	r9, [r4, #511]	; 0x1ff
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 804f56c:	f000 f95a 	bl	804f824 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 804f570:	2301      	movs	r3, #1
 804f572:	4621      	mov	r1, r4
 804f574:	4658      	mov	r0, fp
 804f576:	18fa      	adds	r2, r7, r3
 804f578:	f000 f954 	bl	804f824 <disk_write>
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 804f57c:	9b08      	ldr	r3, [sp, #32]
 804f57e:	2100      	movs	r1, #0
 804f580:	4620      	mov	r0, r4
 804f582:	f04f 0a00 	mov.w	sl, #0
 804f586:	0a5b      	lsrs	r3, r3, #9
	*ptr++ = (BYTE)val; val >>= 8;
 804f588:	26ff      	movs	r6, #255	; 0xff
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 804f58a:	9304      	str	r3, [sp, #16]
 804f58c:	9b08      	ldr	r3, [sp, #32]
 804f58e:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 804f592:	f022 0201 	bic.w	r2, r2, #1
 804f596:	f00b fc59 	bl	805ae4c <memset>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
		sect = b_fat;		/* FAT start sector */
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 804f59a:	f1b8 0f01 	cmp.w	r8, #1
 804f59e:	4b8e      	ldr	r3, [pc, #568]	; (804f7d8 <f_mkfs+0x704>)
 804f5a0:	bf18      	it	ne
 804f5a2:	f06f 0307 	mvnne.w	r3, #7
 804f5a6:	ee08 3a10 	vmov	s16, r3
			if (fsty == FS_FAT32) {
 804f5aa:	f1b8 0f03 	cmp.w	r8, #3
 804f5ae:	f040 80d6 	bne.w	804f75e <f_mkfs+0x68a>
	*ptr++ = (BYTE)val; val >>= 8;
 804f5b2:	f06f 0307 	mvn.w	r3, #7
	*ptr++ = (BYTE)val; val >>= 8;
 804f5b6:	7066      	strb	r6, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 804f5b8:	70a6      	strb	r6, [r4, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 804f5ba:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val;
 804f5bc:	f04f 030f 	mov.w	r3, #15
 804f5c0:	70e6      	strb	r6, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 804f5c2:	7126      	strb	r6, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 804f5c4:	7166      	strb	r6, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 804f5c6:	71a6      	strb	r6, [r4, #6]
	*ptr++ = (BYTE)val;
 804f5c8:	71e6      	strb	r6, [r4, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 804f5ca:	7226      	strb	r6, [r4, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 804f5cc:	7266      	strb	r6, [r4, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 804f5ce:	72a6      	strb	r6, [r4, #10]
	*ptr++ = (BYTE)val;
 804f5d0:	72e3      	strb	r3, [r4, #11]
 804f5d2:	9f03      	ldr	r7, [sp, #12]
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
			}
			nsect = sz_fat;		/* Number of FAT sectors */
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 804f5d4:	9b04      	ldr	r3, [sp, #16]
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 804f5d6:	4621      	mov	r1, r4
 804f5d8:	9a01      	ldr	r2, [sp, #4]
 804f5da:	4658      	mov	r0, fp
				n = (nsect > sz_buf) ? sz_buf : nsect;
 804f5dc:	42bb      	cmp	r3, r7
 804f5de:	bf28      	it	cs
 804f5e0:	463b      	movcs	r3, r7
 804f5e2:	4699      	mov	r9, r3
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 804f5e4:	f000 f91e 	bl	804f824 <disk_write>
 804f5e8:	4601      	mov	r1, r0
 804f5ea:	2800      	cmp	r0, #0
 804f5ec:	f47f af5f 	bne.w	804f4ae <f_mkfs+0x3da>
 804f5f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 804f5f4:	4620      	mov	r0, r4
 804f5f6:	f00b fc29 	bl	805ae4c <memset>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
				sect += n; nsect -= n;
 804f5fa:	9b01      	ldr	r3, [sp, #4]
			} while (nsect);
 804f5fc:	ebb7 0709 	subs.w	r7, r7, r9
				sect += n; nsect -= n;
 804f600:	444b      	add	r3, r9
 804f602:	9301      	str	r3, [sp, #4]
			} while (nsect);
 804f604:	d1e6      	bne.n	804f5d4 <f_mkfs+0x500>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 804f606:	f10a 0301 	add.w	r3, sl, #1
 804f60a:	9a02      	ldr	r2, [sp, #8]
 804f60c:	f04f 0a01 	mov.w	sl, #1
 804f610:	429a      	cmp	r2, r3
 804f612:	d8ca      	bhi.n	804f5aa <f_mkfs+0x4d6>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 804f614:	9b06      	ldr	r3, [sp, #24]
 804f616:	f1b8 0f03 	cmp.w	r8, #3
 804f61a:	bf18      	it	ne
 804f61c:	461d      	movne	r5, r3
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 804f61e:	9b04      	ldr	r3, [sp, #16]
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 804f620:	4621      	mov	r1, r4
 804f622:	9a01      	ldr	r2, [sp, #4]
 804f624:	4658      	mov	r0, fp
			n = (nsect > sz_buf) ? sz_buf : nsect;
 804f626:	42ab      	cmp	r3, r5
 804f628:	bf28      	it	cs
 804f62a:	462b      	movcs	r3, r5
 804f62c:	461e      	mov	r6, r3
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 804f62e:	f000 f8f9 	bl	804f824 <disk_write>
 804f632:	2800      	cmp	r0, #0
 804f634:	f47f af3b 	bne.w	804f4ae <f_mkfs+0x3da>
			sect += n; nsect -= n;
 804f638:	9b01      	ldr	r3, [sp, #4]
		} while (nsect);
 804f63a:	1bad      	subs	r5, r5, r6
			sect += n; nsect -= n;
 804f63c:	4433      	add	r3, r6
 804f63e:	9301      	str	r3, [sp, #4]
		} while (nsect);
 804f640:	d1ed      	bne.n	804f61e <f_mkfs+0x54a>

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;			/* exFAT */
	} else {
		if (fsty == FS_FAT32) {
 804f642:	f1b8 0f03 	cmp.w	r8, #3
 804f646:	f000 8090 	beq.w	804f76a <f_mkfs+0x696>
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
 804f64a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 804f64c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804f650:	f080 808e 	bcs.w	804f770 <f_mkfs+0x69c>
				sys = 0x06;	/* FAT12/16 (large) */
			} else {
				sys = (fsty == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 : FAT12 */
 804f654:	f1b8 0f02 	cmp.w	r8, #2
 804f658:	bf0c      	ite	eq
 804f65a:	f04f 0904 	moveq.w	r9, #4
 804f65e:	f04f 0901 	movne.w	r9, #1
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD */
 804f662:	9b07      	ldr	r3, [sp, #28]
 804f664:	2b00      	cmp	r3, #0
 804f666:	f040 809d 	bne.w	804f7a4 <f_mkfs+0x6d0>
			lba[0] = sz_vol; lba[1] = 0;
 804f66a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 804f66c:	aa0d      	add	r2, sp, #52	; 0x34
 804f66e:	2101      	movs	r1, #1
 804f670:	4658      	mov	r0, fp
			lba[0] = sz_vol; lba[1] = 0;
 804f672:	930e      	str	r3, [sp, #56]	; 0x38
 804f674:	9b07      	ldr	r3, [sp, #28]
 804f676:	930f      	str	r3, [sp, #60]	; 0x3c
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 804f678:	f000 f8e0 	bl	804f83c <disk_ioctl>
 804f67c:	2800      	cmp	r0, #0
 804f67e:	f47f af16 	bne.w	804f4ae <f_mkfs+0x3da>
		sz_drv32 = (DWORD)sz_drv;
 804f682:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 804f686:	2305      	movs	r3, #5
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 804f688:	2708      	movs	r7, #8
 804f68a:	f64f 423e 	movw	r2, #64574	; 0xfc3e
 804f68e:	fbb8 f1f7 	udiv	r1, r8, r7
 804f692:	4291      	cmp	r1, r2
 804f694:	d86f      	bhi.n	804f776 <f_mkfs+0x6a2>
 804f696:	f44f 7200 	mov.w	r2, #512	; 0x200
 804f69a:	2100      	movs	r1, #0
 804f69c:	4620      	mov	r0, r4
 804f69e:	f504 75e3 	add.w	r5, r4, #454	; 0x1c6
 804f6a2:	f00b fbd3 	bl	805ae4c <memset>
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 804f6a6:	2364      	movs	r3, #100	; 0x64
 804f6a8:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 804f6ac:	223f      	movs	r2, #63	; 0x3f
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 804f6ae:	fbb8 f3f3 	udiv	r3, r8, r3
 804f6b2:	9301      	str	r3, [sp, #4]
 804f6b4:	f504 73fb 	add.w	r3, r4, #502	; 0x1f6
 804f6b8:	9302      	str	r3, [sp, #8]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 804f6ba:	4590      	cmp	r8, r2
 804f6bc:	d963      	bls.n	804f786 <f_mkfs+0x6b2>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 804f6be:	f85a 6b04 	ldr.w	r6, [sl], #4
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 804f6c2:	2e64      	cmp	r6, #100	; 0x64
 804f6c4:	d803      	bhi.n	804f6ce <f_mkfs+0x5fa>
 804f6c6:	bf16      	itet	ne
 804f6c8:	9901      	ldrne	r1, [sp, #4]
 804f6ca:	4646      	moveq	r6, r8
 804f6cc:	434e      	mulne	r6, r1
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 804f6ce:	18b0      	adds	r0, r6, r2
 804f6d0:	bf2c      	ite	cs
 804f6d2:	2101      	movcs	r1, #1
 804f6d4:	2100      	movcc	r1, #0
 804f6d6:	4580      	cmp	r8, r0
 804f6d8:	d301      	bcc.n	804f6de <f_mkfs+0x60a>
 804f6da:	2900      	cmp	r1, #0
 804f6dc:	d051      	beq.n	804f782 <f_mkfs+0x6ae>
 804f6de:	eba8 0602 	sub.w	r6, r8, r2
			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 804f6e2:	4611      	mov	r1, r2
 804f6e4:	4628      	mov	r0, r5
 804f6e6:	f009 fa0e 	bl	8058b06 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 804f6ea:	4631      	mov	r1, r6
 804f6ec:	1d28      	adds	r0, r5, #4
 804f6ee:	f009 fa0a 	bl	8058b06 <st_dword>
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 804f6f2:	233f      	movs	r3, #63	; 0x3f
			pte[PTE_System] = sys;					/* System type */
 804f6f4:	f805 9c04 	strb.w	r9, [r5, #-4]
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 804f6f8:	fbb2 f1f3 	udiv	r1, r2, r3
 804f6fc:	fbb1 f0f7 	udiv	r0, r1, r7
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 804f700:	fb07 1c10 	mls	ip, r7, r0, r1
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 804f704:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
			pte[PTE_StCyl] = (BYTE)cy;
 804f708:	f805 0c05 	strb.w	r0, [r5, #-5]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 804f70c:	1a51      	subs	r1, r2, r1
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 804f70e:	f805 cc07 	strb.w	ip, [r5, #-7]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 804f712:	ea4f 0c90 	mov.w	ip, r0, lsr #2
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 804f716:	4432      	add	r2, r6
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 804f718:	3101      	adds	r1, #1
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 804f71a:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
 804f71e:	ea41 010c 	orr.w	r1, r1, ip
 804f722:	f805 1c06 	strb.w	r1, [r5, #-6]
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 804f726:	1e51      	subs	r1, r2, #1
 804f728:	fbb1 f6f3 	udiv	r6, r1, r3
 804f72c:	fbb6 f0f7 	udiv	r0, r6, r7
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 804f730:	fb07 6c10 	mls	ip, r7, r0, r6
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 804f734:	ebc6 1686 	rsb	r6, r6, r6, lsl #6
			pte[PTE_EdCyl] = (BYTE)cy;
 804f738:	f805 0c01 	strb.w	r0, [r5, #-1]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 804f73c:	1b89      	subs	r1, r1, r6
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 804f73e:	0886      	lsrs	r6, r0, #2
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 804f740:	f805 cc03 	strb.w	ip, [r5, #-3]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 804f744:	3101      	adds	r1, #1
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 804f746:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 804f74a:	4331      	orrs	r1, r6
 804f74c:	f805 1c02 	strb.w	r1, [r5, #-2]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 804f750:	9902      	ldr	r1, [sp, #8]
 804f752:	42a9      	cmp	r1, r5
 804f754:	d017      	beq.n	804f786 <f_mkfs+0x6b2>
 804f756:	3510      	adds	r5, #16
 804f758:	2a00      	cmp	r2, #0
 804f75a:	d1ae      	bne.n	804f6ba <f_mkfs+0x5e6>
 804f75c:	e013      	b.n	804f786 <f_mkfs+0x6b2>
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 804f75e:	ee18 1a10 	vmov	r1, s16
 804f762:	4620      	mov	r0, r4
 804f764:	f009 f9cf 	bl	8058b06 <st_dword>
 804f768:	e733      	b.n	804f5d2 <f_mkfs+0x4fe>
			sys = 0x0C;		/* FAT32X */
 804f76a:	f04f 090c 	mov.w	r9, #12
 804f76e:	e778      	b.n	804f662 <f_mkfs+0x58e>
				sys = 0x06;	/* FAT12/16 (large) */
 804f770:	f04f 0906 	mov.w	r9, #6
 804f774:	e775      	b.n	804f662 <f_mkfs+0x58e>
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 804f776:	007f      	lsls	r7, r7, #1
 804f778:	3b01      	subs	r3, #1
 804f77a:	b2ff      	uxtb	r7, r7
 804f77c:	d187      	bne.n	804f68e <f_mkfs+0x5ba>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 804f77e:	27ff      	movs	r7, #255	; 0xff
 804f780:	e789      	b.n	804f696 <f_mkfs+0x5c2>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 804f782:	2e00      	cmp	r6, #0
 804f784:	d1ad      	bne.n	804f6e2 <f_mkfs+0x60e>
	*ptr++ = (BYTE)val; val >>= 8;
 804f786:	2355      	movs	r3, #85	; 0x55
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 804f788:	2200      	movs	r2, #0
 804f78a:	4621      	mov	r1, r4
 804f78c:	4658      	mov	r0, fp
	*ptr++ = (BYTE)val; val >>= 8;
 804f78e:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
 804f792:	23aa      	movs	r3, #170	; 0xaa
 804f794:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 804f798:	2301      	movs	r3, #1
 804f79a:	f000 f843 	bl	804f824 <disk_write>
 804f79e:	2800      	cmp	r0, #0
 804f7a0:	f47f ae85 	bne.w	804f4ae <f_mkfs+0x3da>
			fr = create_partition(pdrv, lba, sys, buf);
			if (fr != FR_OK) LEAVE_MKFS(fr);
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 804f7a4:	2200      	movs	r2, #0
 804f7a6:	4658      	mov	r0, fp
 804f7a8:	4611      	mov	r1, r2
 804f7aa:	f000 f847 	bl	804f83c <disk_ioctl>
	if (vol < 0) return FR_INVALID_DRIVE;
 804f7ae:	3800      	subs	r0, #0
 804f7b0:	bf18      	it	ne
 804f7b2:	2001      	movne	r0, #1

	LEAVE_MKFS(FR_OK);
}
 804f7b4:	b011      	add	sp, #68	; 0x44
 804f7b6:	ecbd 8b02 	vpop	{d8}
 804f7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 804f7be:	200b      	movs	r0, #11
 804f7c0:	e7f8      	b.n	804f7b4 <f_mkfs+0x6e0>
	if (ds & STA_NOINIT) return FR_NOT_READY;
 804f7c2:	2003      	movs	r0, #3
 804f7c4:	e7f6      	b.n	804f7b4 <f_mkfs+0x6e0>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 804f7c6:	200a      	movs	r0, #10
 804f7c8:	e7f4      	b.n	804f7b4 <f_mkfs+0x6e0>
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 804f7ca:	2011      	movs	r0, #17
 804f7cc:	e7f2      	b.n	804f7b4 <f_mkfs+0x6e0>
					if ((fsopt & FM_FAT32)) {
 804f7ce:	f1be 0f00 	cmp.w	lr, #0
 804f7d2:	f47f ad41 	bne.w	804f258 <f_mkfs+0x184>
 804f7d6:	e5ca      	b.n	804f36e <f_mkfs+0x29a>
 804f7d8:	00fffff8 	.word	0x00fffff8

0804f7dc <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Drive Status                                                      */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE pdrv)
{
 804f7dc:	b508      	push	{r3, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_status(pdrv_str[pdrv]) != 0) {
 804f7de:	4b04      	ldr	r3, [pc, #16]	; (804f7f0 <disk_status+0x14>)
 804f7e0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 804f7e4:	f007 fe8e 	bl	8057504 <disk_access_status>
		return STA_NOINIT;
	} else {
		return RES_OK;
	}
}
 804f7e8:	3800      	subs	r0, #0
 804f7ea:	bf18      	it	ne
 804f7ec:	2001      	movne	r0, #1
 804f7ee:	bd08      	pop	{r3, pc}
 804f7f0:	0805e0e0 	.word	0x0805e0e0

0804f7f4 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize a Drive                                                    */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE pdrv)
{
 804f7f4:	b508      	push	{r3, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_init(pdrv_str[pdrv]) != 0) {
 804f7f6:	4b04      	ldr	r3, [pc, #16]	; (804f808 <disk_initialize+0x14>)
 804f7f8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 804f7fc:	f007 fe74 	bl	80574e8 <disk_access_init>
		return STA_NOINIT;
	} else {
		return RES_OK;
	}
}
 804f800:	3800      	subs	r0, #0
 804f802:	bf18      	it	ne
 804f804:	2001      	movne	r0, #1
 804f806:	bd08      	pop	{r3, pc}
 804f808:	0805e0e0 	.word	0x0805e0e0

0804f80c <disk_read>:
/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
 804f80c:	b510      	push	{r4, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_read(pdrv_str[pdrv], buff, sector, count) != 0) {
 804f80e:	4c04      	ldr	r4, [pc, #16]	; (804f820 <disk_read+0x14>)
 804f810:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 804f814:	f007 fe84 	bl	8057520 <disk_access_read>
		return RES_ERROR;
	} else {
		return RES_OK;
	}

}
 804f818:	3800      	subs	r0, #0
 804f81a:	bf18      	it	ne
 804f81c:	2001      	movne	r0, #1
 804f81e:	bd10      	pop	{r4, pc}
 804f820:	0805e0e0 	.word	0x0805e0e0

0804f824 <disk_write>:

/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/
DRESULT disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
 804f824:	b510      	push	{r4, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if(disk_access_write(pdrv_str[pdrv], buff, sector, count) != 0) {
 804f826:	4c04      	ldr	r4, [pc, #16]	; (804f838 <disk_write+0x14>)
 804f828:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 804f82c:	f007 fe8f 	bl	805754e <disk_access_write>
		return RES_ERROR;
	} else {
		return RES_OK;
	}
}
 804f830:	3800      	subs	r0, #0
 804f832:	bf18      	it	ne
 804f834:	2001      	movne	r0, #1
 804f836:	bd10      	pop	{r4, pc}
 804f838:	0805e0e0 	.word	0x0805e0e0

0804f83c <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void *buff)
{
	int ret = RES_OK;
	uint32_t sector_size = 0;
 804f83c:	2300      	movs	r3, #0
{
 804f83e:	b513      	push	{r0, r1, r4, lr}
 804f840:	4614      	mov	r4, r2
	uint32_t sector_size = 0;
 804f842:	9301      	str	r3, [sp, #4]

	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	switch (cmd) {
 804f844:	2903      	cmp	r1, #3
 804f846:	d821      	bhi.n	804f88c <disk_ioctl+0x50>
 804f848:	e8df f001 	tbb	[pc, r1]
 804f84c:	1e0e0c02 	.word	0x1e0e0c02
	case CTRL_SYNC:
		if(disk_access_ioctl(pdrv_str[pdrv],
 804f850:	2105      	movs	r1, #5
			ret = RES_ERROR;
		}
		break;

	case GET_BLOCK_SIZE:
		if (disk_access_ioctl(pdrv_str[pdrv],
 804f852:	4b10      	ldr	r3, [pc, #64]	; (804f894 <disk_ioctl+0x58>)
 804f854:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 804f858:	f007 fe90 	bl	805757c <disk_access_ioctl>
 804f85c:	3800      	subs	r0, #0
 804f85e:	bf18      	it	ne
 804f860:	2001      	movne	r0, #1
 804f862:	e00e      	b.n	804f882 <disk_ioctl+0x46>
		if (disk_access_ioctl(pdrv_str[pdrv],
 804f864:	2101      	movs	r1, #1
 804f866:	e7f4      	b.n	804f852 <disk_ioctl+0x16>
		if ((disk_access_ioctl(pdrv_str[pdrv],
 804f868:	4b0a      	ldr	r3, [pc, #40]	; (804f894 <disk_ioctl+0x58>)
 804f86a:	aa01      	add	r2, sp, #4
 804f86c:	2102      	movs	r1, #2
 804f86e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 804f872:	f007 fe83 	bl	805757c <disk_access_ioctl>
 804f876:	b958      	cbnz	r0, 804f890 <disk_ioctl+0x54>
			(sector_size == (uint16_t)sector_size)) {
 804f878:	9b01      	ldr	r3, [sp, #4]
				DISK_IOCTL_GET_SECTOR_SIZE, &sector_size) == 0) &&
 804f87a:	b29a      	uxth	r2, r3
 804f87c:	4293      	cmp	r3, r2
 804f87e:	d107      	bne.n	804f890 <disk_ioctl+0x54>
			(sector_size == (uint16_t)sector_size)) {
 804f880:	8023      	strh	r3, [r4, #0]
	default:
		ret = RES_PARERR;
		break;
	}
	return ret;
}
 804f882:	b2c0      	uxtb	r0, r0
 804f884:	b002      	add	sp, #8
 804f886:	bd10      	pop	{r4, pc}
		if (disk_access_ioctl(pdrv_str[pdrv],
 804f888:	2104      	movs	r1, #4
 804f88a:	e7e2      	b.n	804f852 <disk_ioctl+0x16>
	uint32_t sector_size = 0;
 804f88c:	2004      	movs	r0, #4
 804f88e:	e7f8      	b.n	804f882 <disk_ioctl+0x46>
			ret = RES_ERROR;
 804f890:	2001      	movs	r0, #1
 804f892:	e7f6      	b.n	804f882 <disk_ioctl+0x46>
 804f894:	0805e0e0 	.word	0x0805e0e0

0804f898 <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
 804f898:	287f      	cmp	r0, #127	; 0x7f
{
 804f89a:	b510      	push	{r4, lr}
	if (uni < 0x80) {	/* ASCII? */
 804f89c:	d801      	bhi.n	804f8a2 <ff_uni2oem+0xa>
		c = (WCHAR)uni;
 804f89e:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 804f8a0:	bd10      	pop	{r4, pc}
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 804f8a2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 804f8a6:	d213      	bcs.n	804f8d0 <ff_uni2oem+0x38>
 804f8a8:	f240 13b5 	movw	r3, #437	; 0x1b5
 804f8ac:	4299      	cmp	r1, r3
 804f8ae:	d10f      	bne.n	804f8d0 <ff_uni2oem+0x38>
 804f8b0:	4908      	ldr	r1, [pc, #32]	; (804f8d4 <ff_uni2oem+0x3c>)
 804f8b2:	2200      	movs	r2, #0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 804f8b4:	f831 4b02 	ldrh.w	r4, [r1], #2
 804f8b8:	b293      	uxth	r3, r2
 804f8ba:	4284      	cmp	r4, r0
 804f8bc:	d103      	bne.n	804f8c6 <ff_uni2oem+0x2e>
			c = (c + 0x80) & 0xFF;
 804f8be:	f103 0080 	add.w	r0, r3, #128	; 0x80
 804f8c2:	b2c0      	uxtb	r0, r0
 804f8c4:	e7ec      	b.n	804f8a0 <ff_uni2oem+0x8>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 804f8c6:	3201      	adds	r2, #1
 804f8c8:	2a80      	cmp	r2, #128	; 0x80
 804f8ca:	d1f3      	bne.n	804f8b4 <ff_uni2oem+0x1c>
 804f8cc:	4613      	mov	r3, r2
 804f8ce:	e7f6      	b.n	804f8be <ff_uni2oem+0x26>
	WCHAR c = 0;
 804f8d0:	2000      	movs	r0, #0
 804f8d2:	e7e5      	b.n	804f8a0 <ff_uni2oem+0x8>
 804f8d4:	0805e5a0 	.word	0x0805e5a0

0804f8d8 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
 804f8d8:	287f      	cmp	r0, #127	; 0x7f
 804f8da:	d90d      	bls.n	804f8f8 <ff_oem2uni+0x20>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 804f8dc:	f240 13b5 	movw	r3, #437	; 0x1b5
 804f8e0:	4299      	cmp	r1, r3
 804f8e2:	d108      	bne.n	804f8f6 <ff_oem2uni+0x1e>
			if (oem < 0x100) c = p[oem - 0x80];
 804f8e4:	28ff      	cmp	r0, #255	; 0xff
 804f8e6:	d806      	bhi.n	804f8f6 <ff_oem2uni+0x1e>
 804f8e8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 804f8ec:	4b03      	ldr	r3, [pc, #12]	; (804f8fc <ff_oem2uni+0x24>)
 804f8ee:	3880      	subs	r0, #128	; 0x80
 804f8f0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 804f8f4:	4770      	bx	lr
	WCHAR c = 0;
 804f8f6:	2000      	movs	r0, #0
		}
	}

	return c;
}
 804f8f8:	4770      	bx	lr
 804f8fa:	bf00      	nop
 804f8fc:	0805e5a0 	.word	0x0805e5a0

0804f900 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 804f900:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
{
 804f904:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (uni < 0x10000) {	/* Is it in BMP? */
 804f906:	d222      	bcs.n	804f94e <ff_wtoupper+0x4e>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
 804f908:	4a1f      	ldr	r2, [pc, #124]	; (804f988 <ff_wtoupper+0x88>)
		uc = (WORD)uni;
 804f90a:	b283      	uxth	r3, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
 804f90c:	491f      	ldr	r1, [pc, #124]	; (804f98c <ff_wtoupper+0x8c>)
 804f90e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 804f912:	bf28      	it	cs
 804f914:	460a      	movcs	r2, r1
 804f916:	1d11      	adds	r1, r2, #4
		for (;;) {
			bc = *p++;								/* Get the block base */
 804f918:	f831 4c04 	ldrh.w	r4, [r1, #-4]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 804f91c:	460a      	mov	r2, r1
 804f91e:	b1ac      	cbz	r4, 804f94c <ff_wtoupper+0x4c>
 804f920:	42a3      	cmp	r3, r4
 804f922:	d313      	bcc.n	804f94c <ff_wtoupper+0x4c>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 804f924:	f831 5c02 	ldrh.w	r5, [r1, #-2]
 804f928:	0a2e      	lsrs	r6, r5, #8
 804f92a:	b2ef      	uxtb	r7, r5
			if (uc < bc + nc) {	/* In the block? */
 804f92c:	fa54 f585 	uxtab	r5, r4, r5
 804f930:	42a8      	cmp	r0, r5
 804f932:	da22      	bge.n	804f97a <ff_wtoupper+0x7a>
				switch (cmd) {
 804f934:	2e08      	cmp	r6, #8
 804f936:	d809      	bhi.n	804f94c <ff_wtoupper+0x4c>
 804f938:	e8df f006 	tbb	[pc, r6]
 804f93c:	12100a05 	.word	0x12100a05
 804f940:	1a181614 	.word	0x1a181614
 804f944:	1c          	.byte	0x1c
 804f945:	00          	.byte	0x00
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 804f946:	1b00      	subs	r0, r0, r4
 804f948:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
		}
		uni = uc;
 804f94c:	4618      	mov	r0, r3
	}

	return uni;
}
 804f94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 804f950:	1b1b      	subs	r3, r3, r4
 804f952:	f003 0301 	and.w	r3, r3, #1
 804f956:	1ac0      	subs	r0, r0, r3
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 804f958:	b283      	uxth	r3, r0
 804f95a:	e7f7      	b.n	804f94c <ff_wtoupper+0x4c>
				case 2: uc -= 16; break;			/* Shift -16 */
 804f95c:	3810      	subs	r0, #16
 804f95e:	e7fb      	b.n	804f958 <ff_wtoupper+0x58>
				case 3:	uc -= 32; break;			/* Shift -32 */
 804f960:	3820      	subs	r0, #32
 804f962:	e7f9      	b.n	804f958 <ff_wtoupper+0x58>
				case 4:	uc -= 48; break;			/* Shift -48 */
 804f964:	3830      	subs	r0, #48	; 0x30
 804f966:	e7f7      	b.n	804f958 <ff_wtoupper+0x58>
				case 5:	uc -= 26; break;			/* Shift -26 */
 804f968:	381a      	subs	r0, #26
 804f96a:	e7f5      	b.n	804f958 <ff_wtoupper+0x58>
				case 6:	uc += 8; break;				/* Shift +8 */
 804f96c:	3008      	adds	r0, #8
 804f96e:	e7f3      	b.n	804f958 <ff_wtoupper+0x58>
				case 7: uc -= 80; break;			/* Shift -80 */
 804f970:	3850      	subs	r0, #80	; 0x50
 804f972:	e7f1      	b.n	804f958 <ff_wtoupper+0x58>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 804f974:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 804f978:	e7ee      	b.n	804f958 <ff_wtoupper+0x58>
			if (cmd == 0) p += nc;	/* Skip table if needed */
 804f97a:	3104      	adds	r1, #4
 804f97c:	2e00      	cmp	r6, #0
 804f97e:	d1cb      	bne.n	804f918 <ff_wtoupper+0x18>
 804f980:	eb02 0247 	add.w	r2, r2, r7, lsl #1
 804f984:	e7c7      	b.n	804f916 <ff_wtoupper+0x16>
 804f986:	bf00      	nop
 804f988:	0805e2f2 	.word	0x0805e2f2
 804f98c:	0805e4e4 	.word	0x0805e4e4

0804f990 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 804f990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804f994:	460d      	mov	r5, r1
 804f996:	b087      	sub	sp, #28
 804f998:	4604      	mov	r4, r0
 804f99a:	4616      	mov	r6, r2
 804f99c:	469a      	mov	sl, r3
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 804f99e:	f006 fae4 	bl	8055f6a <HAL_GetTick>
 804f9a2:	4680      	mov	r8, r0
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
  uint8_t *tempbuff = pData;

  if(NULL == pData)
 804f9a4:	b92d      	cbnz	r5, 804f9b2 <HAL_SD_ReadBlocks+0x22>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 804f9a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804f9a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_OK;
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
    return HAL_ERROR;
 804f9ac:	2701      	movs	r7, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 804f9ae:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 804f9b0:	e010      	b.n	804f9d4 <HAL_SD_ReadBlocks+0x44>
  if(hsd->State == HAL_SD_STATE_READY)
 804f9b2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 804f9b6:	2b01      	cmp	r3, #1
 804f9b8:	b2df      	uxtb	r7, r3
 804f9ba:	f040 80df 	bne.w	804fb7c <HAL_SD_ReadBlocks+0x1ec>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 804f9be:	eb06 030a 	add.w	r3, r6, sl
 804f9c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 804f9c4:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 804f9c6:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 804f9c8:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 804f9ca:	d907      	bls.n	804f9dc <HAL_SD_ReadBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 804f9cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804f9ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 804f9d2:	63a3      	str	r3, [r4, #56]	; 0x38
  }
}
 804f9d4:	4638      	mov	r0, r7
 804f9d6:	b007      	add	sp, #28
 804f9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 804f9dc:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 804f9de:	6820      	ldr	r0, [r4, #0]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 804f9e0:	2200      	movs	r2, #0
 804f9e2:	f04f 0b01 	mov.w	fp, #1
    hsd->State = HAL_SD_STATE_BUSY;
 804f9e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 804f9ea:	f04f 0902 	mov.w	r9, #2
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 804f9ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 804f9f0:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 804f9f2:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 804f9f4:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 804f9f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804f9fa:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 804f9fc:	ea4f 234a 	mov.w	r3, sl, lsl #9
      add *= 512U;
 804fa00:	bf18      	it	ne
 804fa02:	0276      	lslne	r6, r6, #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 804fa04:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 804fa06:	2390      	movs	r3, #144	; 0x90
    config.DPSM          = SDMMC_DPSM_ENABLE;
 804fa08:	e9cd 2b04 	strd	r2, fp, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 804fa0c:	e9cd 3902 	strd	r3, r9, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 804fa10:	f00a fa6c 	bl	8059eec <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 804fa14:	45da      	cmp	sl, fp
 804fa16:	d912      	bls.n	804fa3e <HAL_SD_ReadBlocks+0xae>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 804fa18:	4631      	mov	r1, r6
 804fa1a:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 804fa1c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 804fa20:	f00a faa7 	bl	8059f72 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 804fa24:	b190      	cbz	r0, 804fa4c <HAL_SD_ReadBlocks+0xbc>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 804fa26:	6823      	ldr	r3, [r4, #0]
 804fa28:	4a56      	ldr	r2, [pc, #344]	; (804fb84 <HAL_SD_ReadBlocks+0x1f4>)
 804fa2a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 804fa2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804fa2e:	4318      	orrs	r0, r3
 804fa30:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 804fa32:	2301      	movs	r3, #1
 804fa34:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 804fa38:	2300      	movs	r3, #0
 804fa3a:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 804fa3c:	e7ca      	b.n	804f9d4 <HAL_SD_ReadBlocks+0x44>
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 804fa3e:	4631      	mov	r1, r6
 804fa40:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 804fa42:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 804fa46:	f00a fa7c 	bl	8059f42 <SDMMC_CmdReadSingleBlock>
 804fa4a:	e7eb      	b.n	804fa24 <HAL_SD_ReadBlocks+0x94>
    dataremaining = config.DataLength;
 804fa4c:	9e01      	ldr	r6, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 804fa4e:	6820      	ldr	r0, [r4, #0]
 804fa50:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804fa52:	f413 7f95 	tst.w	r3, #298	; 0x12a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 804fa56:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 804fa58:	d017      	beq.n	804fa8a <HAL_SD_ReadBlocks+0xfa>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 804fa5a:	05db      	lsls	r3, r3, #23
 804fa5c:	d509      	bpl.n	804fa72 <HAL_SD_ReadBlocks+0xe2>
 804fa5e:	f1ba 0f01 	cmp.w	sl, #1
 804fa62:	d906      	bls.n	804fa72 <HAL_SD_ReadBlocks+0xe2>
      if(hsd->SdCard.CardType != CARD_SECURED)
 804fa64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 804fa66:	2b03      	cmp	r3, #3
 804fa68:	d003      	beq.n	804fa72 <HAL_SD_ReadBlocks+0xe2>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 804fa6a:	f000 fc3f 	bl	80502ec <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 804fa6e:	2800      	cmp	r0, #0
 804fa70:	d1d9      	bne.n	804fa26 <HAL_SD_ReadBlocks+0x96>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 804fa72:	6823      	ldr	r3, [r4, #0]
 804fa74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 804fa76:	f011 0108 	ands.w	r1, r1, #8
 804fa7a:	d036      	beq.n	804faea <HAL_SD_ReadBlocks+0x15a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 804fa7c:	4a41      	ldr	r2, [pc, #260]	; (804fb84 <HAL_SD_ReadBlocks+0x1f4>)
 804fa7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 804fa80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804fa82:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 804fa86:	63a3      	str	r3, [r4, #56]	; 0x38
 804fa88:	e7d3      	b.n	804fa32 <HAL_SD_ReadBlocks+0xa2>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 804fa8a:	041a      	lsls	r2, r3, #16
 804fa8c:	d518      	bpl.n	804fac0 <HAL_SD_ReadBlocks+0x130>
 804fa8e:	b1be      	cbz	r6, 804fac0 <HAL_SD_ReadBlocks+0x130>
 804fa90:	f105 0b04 	add.w	fp, r5, #4
 804fa94:	f105 0924 	add.w	r9, r5, #36	; 0x24
          data = SDMMC_ReadFIFO(hsd->Instance);
 804fa98:	6820      	ldr	r0, [r4, #0]
        for(count = 0U; count < 8U; count++)
 804fa9a:	f10b 0b04 	add.w	fp, fp, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
 804fa9e:	f00a f9f7 	bl	8059e90 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 804faa2:	f80b 0c08 	strb.w	r0, [fp, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 804faa6:	0a02      	lsrs	r2, r0, #8
 804faa8:	f80b 2c07 	strb.w	r2, [fp, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 804faac:	0c02      	lsrs	r2, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 804faae:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 804fab0:	f80b 2c06 	strb.w	r2, [fp, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 804fab4:	f80b 0c05 	strb.w	r0, [fp, #-5]
        for(count = 0U; count < 8U; count++)
 804fab8:	45d9      	cmp	r9, fp
 804faba:	d1ed      	bne.n	804fa98 <HAL_SD_ReadBlocks+0x108>
          tempbuff++;
 804fabc:	3520      	adds	r5, #32
          dataremaining--;
 804fabe:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 804fac0:	f006 fa53 	bl	8055f6a <HAL_GetTick>
 804fac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 804fac6:	eba0 0008 	sub.w	r0, r0, r8
 804faca:	4298      	cmp	r0, r3
 804facc:	d3bf      	bcc.n	804fa4e <HAL_SD_ReadBlocks+0xbe>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 804face:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 804fad0:	2703      	movs	r7, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 804fad2:	4a2c      	ldr	r2, [pc, #176]	; (804fb84 <HAL_SD_ReadBlocks+0x1f4>)
 804fad4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 804fad6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804fad8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804fadc:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 804fade:	2301      	movs	r3, #1
 804fae0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 804fae4:	2300      	movs	r3, #0
 804fae6:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 804fae8:	e774      	b.n	804f9d4 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 804faea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 804faec:	f012 0202 	ands.w	r2, r2, #2
 804faf0:	d00a      	beq.n	804fb08 <HAL_SD_ReadBlocks+0x178>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 804faf2:	4a24      	ldr	r2, [pc, #144]	; (804fb84 <HAL_SD_ReadBlocks+0x1f4>)
 804faf4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 804faf6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804faf8:	f043 0302 	orr.w	r3, r3, #2
 804fafc:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 804fafe:	2301      	movs	r3, #1
 804fb00:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 804fb04:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 804fb06:	e765      	b.n	804f9d4 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 804fb08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 804fb0a:	0689      	lsls	r1, r1, #26
 804fb0c:	d527      	bpl.n	804fb5e <HAL_SD_ReadBlocks+0x1ce>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 804fb0e:	491d      	ldr	r1, [pc, #116]	; (804fb84 <HAL_SD_ReadBlocks+0x1f4>)
 804fb10:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 804fb12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804fb14:	f043 0320 	orr.w	r3, r3, #32
 804fb18:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 804fb1a:	2301      	movs	r3, #1
 804fb1c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 804fb20:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 804fb22:	e757      	b.n	804f9d4 <HAL_SD_ReadBlocks+0x44>
      data = SDMMC_ReadFIFO(hsd->Instance);
 804fb24:	f00a f9b4 	bl	8059e90 <SDMMC_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 804fb28:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 804fb2c:	0a03      	lsrs	r3, r0, #8
      dataremaining--;
 804fb2e:	3e04      	subs	r6, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 804fb30:	3504      	adds	r5, #4
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 804fb32:	f805 3c07 	strb.w	r3, [r5, #-7]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 804fb36:	0c03      	lsrs	r3, r0, #16
 804fb38:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 804fb3c:	0e03      	lsrs	r3, r0, #24
 804fb3e:	f805 3c05 	strb.w	r3, [r5, #-5]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 804fb42:	f006 fa12 	bl	8055f6a <HAL_GetTick>
 804fb46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 804fb48:	eba0 0008 	sub.w	r0, r0, r8
 804fb4c:	4298      	cmp	r0, r3
 804fb4e:	d307      	bcc.n	804fb60 <HAL_SD_ReadBlocks+0x1d0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 804fb50:	6823      	ldr	r3, [r4, #0]
 804fb52:	4a0c      	ldr	r2, [pc, #48]	; (804fb84 <HAL_SD_ReadBlocks+0x1f4>)
 804fb54:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 804fb56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804fb58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804fb5c:	e793      	b.n	804fa86 <HAL_SD_ReadBlocks+0xf6>
 804fb5e:	3504      	adds	r5, #4
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 804fb60:	6820      	ldr	r0, [r4, #0]
 804fb62:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804fb64:	029b      	lsls	r3, r3, #10
 804fb66:	d501      	bpl.n	804fb6c <HAL_SD_ReadBlocks+0x1dc>
 804fb68:	2e00      	cmp	r6, #0
 804fb6a:	d1db      	bne.n	804fb24 <HAL_SD_ReadBlocks+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 804fb6c:	f240 533a 	movw	r3, #1338	; 0x53a
    return HAL_OK;
 804fb70:	2700      	movs	r7, #0
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 804fb72:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 804fb74:	2301      	movs	r3, #1
 804fb76:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 804fb7a:	e72b      	b.n	804f9d4 <HAL_SD_ReadBlocks+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 804fb7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804fb7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 804fb82:	e713      	b.n	804f9ac <HAL_SD_ReadBlocks+0x1c>
 804fb84:	004005ff 	.word	0x004005ff

0804fb88 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 804fb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804fb8c:	460d      	mov	r5, r1
 804fb8e:	b089      	sub	sp, #36	; 0x24
 804fb90:	4604      	mov	r4, r0
 804fb92:	4692      	mov	sl, r2
 804fb94:	461f      	mov	r7, r3
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 804fb96:	f006 f9e8 	bl	8055f6a <HAL_GetTick>
 804fb9a:	4681      	mov	r9, r0
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
  uint8_t *tempbuff = pData;

  if(NULL == pData)
 804fb9c:	b935      	cbnz	r5, 804fbac <HAL_SD_WriteBlocks+0x24>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 804fb9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804fba0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_OK;
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
    return HAL_ERROR;
 804fba4:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 804fba8:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 804fbaa:	e011      	b.n	804fbd0 <HAL_SD_WriteBlocks+0x48>
  if(hsd->State == HAL_SD_STATE_READY)
 804fbac:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 804fbb0:	2b01      	cmp	r3, #1
 804fbb2:	fa5f f883 	uxtb.w	r8, r3
 804fbb6:	f040 80ac 	bne.w	804fd12 <HAL_SD_WriteBlocks+0x18a>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 804fbba:	eb0a 0307 	add.w	r3, sl, r7
 804fbbe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 804fbc0:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 804fbc2:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 804fbc4:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 804fbc6:	d907      	bls.n	804fbd8 <HAL_SD_WriteBlocks+0x50>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 804fbc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804fbca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 804fbce:	63a3      	str	r3, [r4, #56]	; 0x38
  }
}
 804fbd0:	4640      	mov	r0, r8
 804fbd2:	b009      	add	sp, #36	; 0x24
 804fbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 804fbd8:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 804fbda:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 804fbdc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 804fbe0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 804fbe2:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 804fbe4:	2190      	movs	r1, #144	; 0x90
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 804fbe6:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 804fbe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804fbec:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 804fbee:	ea4f 2347 	mov.w	r3, r7, lsl #9
      add *= 512U;
 804fbf2:	bf18      	it	ne
 804fbf4:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 804fbf8:	9303      	str	r3, [sp, #12]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 804fbfa:	2300      	movs	r3, #0
 804fbfc:	e9cd 1304 	strd	r1, r3, [sp, #16]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 804fc00:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 804fc02:	2301      	movs	r3, #1
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 804fc04:	a902      	add	r1, sp, #8
    config.DPSM          = SDMMC_DPSM_ENABLE;
 804fc06:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 804fc08:	f00a f970 	bl	8059eec <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 804fc0c:	2f01      	cmp	r7, #1
 804fc0e:	d912      	bls.n	804fc36 <HAL_SD_WriteBlocks+0xae>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 804fc10:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 804fc12:	4651      	mov	r1, sl
 804fc14:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 804fc16:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 804fc18:	f00a f9db 	bl	8059fd2 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 804fc1c:	b190      	cbz	r0, 804fc44 <HAL_SD_WriteBlocks+0xbc>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 804fc1e:	6823      	ldr	r3, [r4, #0]
 804fc20:	4a3e      	ldr	r2, [pc, #248]	; (804fd1c <HAL_SD_WriteBlocks+0x194>)
 804fc22:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 804fc24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804fc26:	4318      	orrs	r0, r3
 804fc28:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 804fc2a:	2301      	movs	r3, #1
 804fc2c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 804fc30:	2300      	movs	r3, #0
 804fc32:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 804fc34:	e7cc      	b.n	804fbd0 <HAL_SD_WriteBlocks+0x48>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 804fc36:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 804fc38:	4651      	mov	r1, sl
 804fc3a:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 804fc3c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 804fc3e:	f00a f9b0 	bl	8059fa2 <SDMMC_CmdWriteSingleBlock>
 804fc42:	e7eb      	b.n	804fc1c <HAL_SD_WriteBlocks+0x94>
    dataremaining = config.DataLength;
 804fc44:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 804fc46:	6820      	ldr	r0, [r4, #0]
 804fc48:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804fc4a:	f413 7f8d 	tst.w	r3, #282	; 0x11a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 804fc4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 804fc50:	d016      	beq.n	804fc80 <HAL_SD_WriteBlocks+0xf8>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 804fc52:	05db      	lsls	r3, r3, #23
 804fc54:	d508      	bpl.n	804fc68 <HAL_SD_WriteBlocks+0xe0>
 804fc56:	2f01      	cmp	r7, #1
 804fc58:	d906      	bls.n	804fc68 <HAL_SD_WriteBlocks+0xe0>
      if(hsd->SdCard.CardType != CARD_SECURED)
 804fc5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 804fc5c:	2b03      	cmp	r3, #3
 804fc5e:	d003      	beq.n	804fc68 <HAL_SD_WriteBlocks+0xe0>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 804fc60:	f000 fb44 	bl	80502ec <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 804fc64:	2800      	cmp	r0, #0
 804fc66:	d1da      	bne.n	804fc1e <HAL_SD_WriteBlocks+0x96>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 804fc68:	6823      	ldr	r3, [r4, #0]
 804fc6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 804fc6c:	f010 0008 	ands.w	r0, r0, #8
 804fc70:	d029      	beq.n	804fcc6 <HAL_SD_WriteBlocks+0x13e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 804fc72:	4a2a      	ldr	r2, [pc, #168]	; (804fd1c <HAL_SD_WriteBlocks+0x194>)
 804fc74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 804fc76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804fc78:	f043 0308 	orr.w	r3, r3, #8
 804fc7c:	63a3      	str	r3, [r4, #56]	; 0x38
 804fc7e:	e7d4      	b.n	804fc2a <HAL_SD_WriteBlocks+0xa2>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 804fc80:	045a      	lsls	r2, r3, #17
 804fc82:	d50c      	bpl.n	804fc9e <HAL_SD_WriteBlocks+0x116>
 804fc84:	b15e      	cbz	r6, 804fc9e <HAL_SD_WriteBlocks+0x116>
 804fc86:	f105 0b20 	add.w	fp, r5, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 804fc8a:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 804fc8e:	a901      	add	r1, sp, #4
 804fc90:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 804fc92:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 804fc94:	f00a f8ff 	bl	8059e96 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 804fc98:	45ab      	cmp	fp, r5
 804fc9a:	d1f6      	bne.n	804fc8a <HAL_SD_WriteBlocks+0x102>
          dataremaining--;
 804fc9c:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 804fc9e:	f006 f964 	bl	8055f6a <HAL_GetTick>
 804fca2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 804fca4:	eba0 0009 	sub.w	r0, r0, r9
 804fca8:	4298      	cmp	r0, r3
 804fcaa:	d3cc      	bcc.n	804fc46 <HAL_SD_WriteBlocks+0xbe>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 804fcac:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 804fcae:	f04f 0803 	mov.w	r8, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 804fcb2:	4a1a      	ldr	r2, [pc, #104]	; (804fd1c <HAL_SD_WriteBlocks+0x194>)
 804fcb4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 804fcb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804fcb8:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 804fcba:	2301      	movs	r3, #1
 804fcbc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 804fcc0:	2300      	movs	r3, #0
 804fcc2:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 804fcc4:	e784      	b.n	804fbd0 <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 804fcc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 804fcc8:	f011 0102 	ands.w	r1, r1, #2
 804fccc:	d00a      	beq.n	804fce4 <HAL_SD_WriteBlocks+0x15c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 804fcce:	4a13      	ldr	r2, [pc, #76]	; (804fd1c <HAL_SD_WriteBlocks+0x194>)
 804fcd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 804fcd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804fcd4:	f043 0302 	orr.w	r3, r3, #2
 804fcd8:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 804fcda:	2301      	movs	r3, #1
 804fcdc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 804fce0:	6320      	str	r0, [r4, #48]	; 0x30
      return HAL_ERROR;
 804fce2:	e775      	b.n	804fbd0 <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 804fce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 804fce6:	f012 0210 	ands.w	r2, r2, #16
 804fcea:	d00a      	beq.n	804fd02 <HAL_SD_WriteBlocks+0x17a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 804fcec:	4a0b      	ldr	r2, [pc, #44]	; (804fd1c <HAL_SD_WriteBlocks+0x194>)
 804fcee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 804fcf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804fcf2:	f043 0310 	orr.w	r3, r3, #16
 804fcf6:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 804fcf8:	2301      	movs	r3, #1
 804fcfa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 804fcfe:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 804fd00:	e766      	b.n	804fbd0 <HAL_SD_WriteBlocks+0x48>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 804fd02:	f240 513a 	movw	r1, #1338	; 0x53a
    return HAL_OK;
 804fd06:	4690      	mov	r8, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 804fd08:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 804fd0a:	2301      	movs	r3, #1
 804fd0c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 804fd10:	e75e      	b.n	804fbd0 <HAL_SD_WriteBlocks+0x48>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 804fd12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804fd14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 804fd18:	e744      	b.n	804fba4 <HAL_SD_WriteBlocks+0x1c>
 804fd1a:	bf00      	nop
 804fd1c:	004005ff 	.word	0x004005ff

0804fd20 <HAL_SD_GetCardCSD>:
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 804fd20:	6e43      	ldr	r3, [r0, #100]	; 0x64
 804fd22:	0f9a      	lsrs	r2, r3, #30
 804fd24:	700a      	strb	r2, [r1, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 804fd26:	f3c3 6283 	ubfx	r2, r3, #26, #4
 804fd2a:	704a      	strb	r2, [r1, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 804fd2c:	f3c3 6201 	ubfx	r2, r3, #24, #2
 804fd30:	708a      	strb	r2, [r1, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 804fd32:	f3c3 4207 	ubfx	r2, r3, #16, #8
 804fd36:	70ca      	strb	r2, [r1, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 804fd38:	f3c3 2207 	ubfx	r2, r3, #8, #8

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 804fd3c:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 804fd3e:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 804fd40:	714b      	strb	r3, [r1, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 804fd42:	6e83      	ldr	r3, [r0, #104]	; 0x68
 804fd44:	0d1a      	lsrs	r2, r3, #20
 804fd46:	80ca      	strh	r2, [r1, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 804fd48:	f3c3 4203 	ubfx	r2, r3, #16, #4
 804fd4c:	720a      	strb	r2, [r1, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 804fd4e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 804fd52:	724a      	strb	r2, [r1, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 804fd54:	f3c3 3280 	ubfx	r2, r3, #14, #1
 804fd58:	728a      	strb	r2, [r1, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 804fd5a:	f3c3 3240 	ubfx	r2, r3, #13, #1
 804fd5e:	72ca      	strb	r2, [r1, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 804fd60:	f3c3 3200 	ubfx	r2, r3, #12, #1
 804fd64:	730a      	strb	r2, [r1, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 804fd66:	2200      	movs	r2, #0
 804fd68:	734a      	strb	r2, [r1, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 804fd6a:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 804fd6c:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 804fd6e:	2a00      	cmp	r2, #0
 804fd70:	d16c      	bne.n	804fe4c <HAL_SD_GetCardCSD+0x12c>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 804fd72:	f640 74fc 	movw	r4, #4092	; 0xffc
 804fd76:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 804fd78:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 804fd7c:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 804fd80:	610b      	str	r3, [r1, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 804fd82:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 804fd86:	750b      	strb	r3, [r1, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 804fd88:	f3c2 6302 	ubfx	r3, r2, #24, #3
 804fd8c:	754b      	strb	r3, [r1, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 804fd8e:	f3c2 5342 	ubfx	r3, r2, #21, #3
 804fd92:	758b      	strb	r3, [r1, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 804fd94:	f3c2 4382 	ubfx	r3, r2, #18, #3

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 804fd98:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 804fd9c:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 804fd9e:	760a      	strb	r2, [r1, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 804fda0:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 804fda2:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 804fda4:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 804fda6:	f002 0207 	and.w	r2, r2, #7
 804fdaa:	3202      	adds	r2, #2
 804fdac:	fa03 f202 	lsl.w	r2, r3, r2
 804fdb0:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 804fdb2:	7a0b      	ldrb	r3, [r1, #8]
 804fdb4:	f003 040f 	and.w	r4, r3, #15
 804fdb8:	2301      	movs	r3, #1
 804fdba:	40a3      	lsls	r3, r4
 804fdbc:	6583      	str	r3, [r0, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 804fdbe:	0a5b      	lsrs	r3, r3, #9
 804fdc0:	4353      	muls	r3, r2
 804fdc2:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 804fdc4:	f44f 7300 	mov.w	r3, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
    hsd->SdCard.BlockSize = 512U;
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 804fdc8:	6603      	str	r3, [r0, #96]	; 0x60
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
    hsd->State = HAL_SD_STATE_READY;
    return HAL_ERROR;
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 804fdca:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 804fdcc:	f3c3 3280 	ubfx	r2, r3, #14, #1
 804fdd0:	764a      	strb	r2, [r1, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 804fdd2:	f3c3 12c6 	ubfx	r2, r3, #7, #7

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 804fdd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 804fdda:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 804fddc:	76cb      	strb	r3, [r1, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 804fdde:	6f03      	ldr	r3, [r0, #112]	; 0x70

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);

  pCSD->Reserved3 = 0;
 804fde0:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 804fde2:	0fda      	lsrs	r2, r3, #31
 804fde4:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 804fde6:	f3c3 7241 	ubfx	r2, r3, #29, #2
 804fdea:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 804fdec:	f3c3 6282 	ubfx	r2, r3, #26, #3
 804fdf0:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 804fdf2:	f3c3 5283 	ubfx	r2, r3, #22, #4
 804fdf6:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 804fdf8:	f3c3 5240 	ubfx	r2, r3, #21, #1
 804fdfc:	f881 2020 	strb.w	r2, [r1, #32]

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 804fe00:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 804fe04:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 804fe08:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 804fe0c:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 804fe10:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 804fe14:	f3c3 3280 	ubfx	r2, r3, #14, #1
 804fe18:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 804fe1c:	f3c3 3240 	ubfx	r2, r3, #13, #1
 804fe20:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 804fe24:	f3c3 3200 	ubfx	r2, r3, #12, #1
 804fe28:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 804fe2c:	f3c3 2281 	ubfx	r2, r3, #10, #2
 804fe30:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 804fe34:	f3c3 2201 	ubfx	r2, r3, #8, #2

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 804fe38:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 804fe3c:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 804fe40:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29

  pCSD->Reserved4 = 1;
 804fe44:	2301      	movs	r3, #1
 804fe46:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a

  return HAL_OK;
}
 804fe4a:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 804fe4c:	2a01      	cmp	r2, #1
 804fe4e:	d10f      	bne.n	804fe70 <HAL_SD_GetCardCSD+0x150>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 804fe50:	041b      	lsls	r3, r3, #16
 804fe52:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 804fe56:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 804fe5a:	4313      	orrs	r3, r2
 804fe5c:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 804fe5e:	690b      	ldr	r3, [r1, #16]
 804fe60:	3301      	adds	r3, #1
 804fe62:	029b      	lsls	r3, r3, #10
 804fe64:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 804fe66:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 804fe68:	f44f 7300 	mov.w	r3, #512	; 0x200
 804fe6c:	6583      	str	r3, [r0, #88]	; 0x58
 804fe6e:	e7ab      	b.n	804fdc8 <HAL_SD_GetCardCSD+0xa8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 804fe70:	6803      	ldr	r3, [r0, #0]
 804fe72:	4a05      	ldr	r2, [pc, #20]	; (804fe88 <HAL_SD_GetCardCSD+0x168>)
 804fe74:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 804fe76:	6b83      	ldr	r3, [r0, #56]	; 0x38
 804fe78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804fe7c:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 804fe7e:	2301      	movs	r3, #1
 804fe80:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 804fe84:	4618      	mov	r0, r3
 804fe86:	e7e0      	b.n	804fe4a <HAL_SD_GetCardCSD+0x12a>
 804fe88:	004005ff 	.word	0x004005ff

0804fe8c <HAL_SD_InitCard>:
{
 804fe8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 804fe90:	2300      	movs	r3, #0
{
 804fe92:	b098      	sub	sp, #96	; 0x60
 804fe94:	4604      	mov	r4, r0
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 804fe96:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 804fe98:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 804fe9c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 804fea0:	2376      	movs	r3, #118	; 0x76
 804fea2:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDMMC_Init(hsd->Instance, Init);
 804fea4:	ab0a      	add	r3, sp, #40	; 0x28
 804fea6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 804feaa:	ab07      	add	r3, sp, #28
 804feac:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 804feb0:	6820      	ldr	r0, [r4, #0]
 804feb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 804feb4:	f009 ffd0 	bl	8059e58 <SDMMC_Init>
  if(status != HAL_OK)
 804feb8:	4605      	mov	r5, r0
 804feba:	2800      	cmp	r0, #0
 804febc:	f040 80df 	bne.w	805007e <HAL_SD_InitCard+0x1f2>
  __HAL_SD_DISABLE(hsd);
 804fec0:	6820      	ldr	r0, [r4, #0]
 804fec2:	6843      	ldr	r3, [r0, #4]
 804fec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 804fec8:	6043      	str	r3, [r0, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 804feca:	f009 ffe9 	bl	8059ea0 <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 804fece:	6820      	ldr	r0, [r4, #0]
 804fed0:	6843      	ldr	r3, [r0, #4]
 804fed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804fed6:	6043      	str	r3, [r0, #4]
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
  __IO uint32_t count = 0U;
 804fed8:	9506      	str	r5, [sp, #24]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 804feda:	f000 fa21 	bl	8050320 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 804fede:	4605      	mov	r5, r0
 804fee0:	b940      	cbnz	r0, 804fef4 <HAL_SD_InitCard+0x68>
  {
    return errorstate;
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 804fee2:	6820      	ldr	r0, [r4, #0]
 804fee4:	f000 fa42 	bl	805036c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 804fee8:	b170      	cbz	r0, 804ff08 <HAL_SD_InitCard+0x7c>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 804feea:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 804feec:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 804feee:	f000 fa17 	bl	8050320 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 804fef2:	b198      	cbz	r0, 804ff1c <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
 804fef4:	2501      	movs	r5, #1
 804fef6:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 804fefa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804fefc:	4303      	orrs	r3, r0
 804fefe:	63a3      	str	r3, [r4, #56]	; 0x38
}
 804ff00:	4628      	mov	r0, r5
 804ff02:	b018      	add	sp, #96	; 0x60
 804ff04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 804ff08:	2301      	movs	r3, #1
 804ff0a:	64a3      	str	r3, [r4, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 804ff0c:	2100      	movs	r1, #0
 804ff0e:	6820      	ldr	r0, [r4, #0]
 804ff10:	f00a f88f 	bl	805a032 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 804ff14:	b128      	cbz	r0, 804ff22 <HAL_SD_InitCard+0x96>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 804ff16:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 804ff1a:	e7eb      	b.n	804fef4 <HAL_SD_InitCard+0x68>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 804ff1c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 804ff1e:	2b01      	cmp	r3, #1
 804ff20:	d0f4      	beq.n	804ff0c <HAL_SD_InitCard+0x80>
{
 804ff22:	2600      	movs	r6, #0
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
    }
  }
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 804ff24:	f64f 77fe 	movw	r7, #65534	; 0xfffe
    {
      return errorstate;
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 804ff28:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8050088 <HAL_SD_InitCard+0x1fc>
 804ff2c:	e014      	b.n	804ff58 <HAL_SD_InitCard+0xcc>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 804ff2e:	4631      	mov	r1, r6
 804ff30:	6820      	ldr	r0, [r4, #0]
 804ff32:	f00a f87e 	bl	805a032 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 804ff36:	2800      	cmp	r0, #0
 804ff38:	d1dc      	bne.n	804fef4 <HAL_SD_InitCard+0x68>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 804ff3a:	4641      	mov	r1, r8
 804ff3c:	6820      	ldr	r0, [r4, #0]
 804ff3e:	f00a f890 	bl	805a062 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 804ff42:	2800      	cmp	r0, #0
 804ff44:	d1e7      	bne.n	804ff16 <HAL_SD_InitCard+0x8a>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 804ff46:	4631      	mov	r1, r6
 804ff48:	6820      	ldr	r0, [r4, #0]
 804ff4a:	f009 ffcc 	bl	8059ee6 <SDMMC_GetResponse>

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);

    count++;
 804ff4e:	9b06      	ldr	r3, [sp, #24]
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 804ff50:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 804ff52:	0fc6      	lsrs	r6, r0, #31
    count++;
 804ff54:	3301      	adds	r3, #1
 804ff56:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 804ff58:	9b06      	ldr	r3, [sp, #24]
 804ff5a:	42bb      	cmp	r3, r7
 804ff5c:	d801      	bhi.n	804ff62 <HAL_SD_InitCard+0xd6>
 804ff5e:	2e00      	cmp	r6, #0
 804ff60:	d0e5      	beq.n	804ff2e <HAL_SD_InitCard+0xa2>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 804ff62:	9b06      	ldr	r3, [sp, #24]
 804ff64:	42bb      	cmp	r3, r7
 804ff66:	d80c      	bhi.n	804ff82 <HAL_SD_InitCard+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 804ff68:	f3c5 7580 	ubfx	r5, r5, #30, #1
  uint16_t sd_rca = 1U;
 804ff6c:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 804ff6e:	6820      	ldr	r0, [r4, #0]
 804ff70:	6465      	str	r5, [r4, #68]	; 0x44
  uint16_t sd_rca = 1U;
 804ff72:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 804ff76:	f009 ff9f 	bl	8059eb8 <SDMMC_GetPowerState>
 804ff7a:	b928      	cbnz	r0, 804ff88 <HAL_SD_InitCard+0xfc>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 804ff7c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 804ff80:	e7b8      	b.n	804fef4 <HAL_SD_InitCard+0x68>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 804ff82:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 804ff86:	e7b5      	b.n	804fef4 <HAL_SD_InitCard+0x68>
  if(hsd->SdCard.CardType != CARD_SECURED)
 804ff88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 804ff8a:	2b03      	cmp	r3, #3
 804ff8c:	d043      	beq.n	8050016 <HAL_SD_InitCard+0x18a>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 804ff8e:	6820      	ldr	r0, [r4, #0]
 804ff90:	f00a f880 	bl	805a094 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 804ff94:	2800      	cmp	r0, #0
 804ff96:	d1ad      	bne.n	804fef4 <HAL_SD_InitCard+0x68>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 804ff98:	4601      	mov	r1, r0
 804ff9a:	6820      	ldr	r0, [r4, #0]
 804ff9c:	f009 ffa3 	bl	8059ee6 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 804ffa0:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 804ffa2:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 804ffa4:	6820      	ldr	r0, [r4, #0]
 804ffa6:	f009 ff9e 	bl	8059ee6 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 804ffaa:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 804ffac:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 804ffae:	6820      	ldr	r0, [r4, #0]
 804ffb0:	f009 ff99 	bl	8059ee6 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 804ffb4:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 804ffb6:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 804ffb8:	6820      	ldr	r0, [r4, #0]
 804ffba:	f009 ff94 	bl	8059ee6 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 804ffbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 804ffc0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 804ffc4:	2b03      	cmp	r3, #3
 804ffc6:	d026      	beq.n	8050016 <HAL_SD_InitCard+0x18a>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 804ffc8:	f10d 0116 	add.w	r1, sp, #22
 804ffcc:	6820      	ldr	r0, [r4, #0]
 804ffce:	f000 fa09 	bl	80503e4 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 804ffd2:	2800      	cmp	r0, #0
 804ffd4:	d18e      	bne.n	804fef4 <HAL_SD_InitCard+0x68>
  if(hsd->SdCard.CardType != CARD_SECURED)
 804ffd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 804ffd8:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 804ffda:	2b03      	cmp	r3, #3
 804ffdc:	d01b      	beq.n	8050016 <HAL_SD_InitCard+0x18a>
    hsd->SdCard.RelCardAdd = sd_rca;
 804ffde:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 804ffe2:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 804ffe4:	0409      	lsls	r1, r1, #16
 804ffe6:	f00a f86a 	bl	805a0be <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 804ffea:	2800      	cmp	r0, #0
 804ffec:	d182      	bne.n	804fef4 <HAL_SD_InitCard+0x68>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 804ffee:	4601      	mov	r1, r0
 804fff0:	6820      	ldr	r0, [r4, #0]
 804fff2:	f009 ff78 	bl	8059ee6 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 804fff6:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 804fff8:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 804fffa:	6820      	ldr	r0, [r4, #0]
 804fffc:	f009 ff73 	bl	8059ee6 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8050000:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8050002:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8050004:	6820      	ldr	r0, [r4, #0]
 8050006:	f009 ff6e 	bl	8059ee6 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 805000a:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 805000c:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 805000e:	6820      	ldr	r0, [r4, #0]
 8050010:	f009 ff69 	bl	8059ee6 <SDMMC_GetResponse>
 8050014:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8050016:	2104      	movs	r1, #4
 8050018:	6820      	ldr	r0, [r4, #0]
 805001a:	f009 ff64 	bl	8059ee6 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 805001e:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8050020:	0d00      	lsrs	r0, r0, #20
 8050022:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8050024:	4620      	mov	r0, r4
 8050026:	f7ff fe7b 	bl	804fd20 <HAL_SD_GetCardCSD>
 805002a:	4605      	mov	r5, r0
 805002c:	2800      	cmp	r0, #0
 805002e:	f47f af72 	bne.w	804ff16 <HAL_SD_InitCard+0x8a>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8050032:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8050034:	4603      	mov	r3, r0
 8050036:	6820      	ldr	r0, [r4, #0]
 8050038:	0412      	lsls	r2, r2, #16
 805003a:	f009 ffe2 	bl	805a002 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 805003e:	2800      	cmp	r0, #0
 8050040:	f47f af58 	bne.w	804fef4 <HAL_SD_InitCard+0x68>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8050044:	f104 0310 	add.w	r3, r4, #16
 8050048:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 805004c:	1d23      	adds	r3, r4, #4
 805004e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8050052:	6820      	ldr	r0, [r4, #0]
 8050054:	cb0e      	ldmia	r3, {r1, r2, r3}
 8050056:	f009 feff 	bl	8059e58 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 805005a:	f44f 7100 	mov.w	r1, #512	; 0x200
 805005e:	6820      	ldr	r0, [r4, #0]
 8050060:	f009 ff57 	bl	8059f12 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8050064:	2800      	cmp	r0, #0
 8050066:	f43f af4b 	beq.w	804ff00 <HAL_SD_InitCard+0x74>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 805006a:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 805006c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 805006e:	4a05      	ldr	r2, [pc, #20]	; (8050084 <HAL_SD_InitCard+0x1f8>)
 8050070:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8050072:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8050074:	4318      	orrs	r0, r3
 8050076:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8050078:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 805007c:	e740      	b.n	804ff00 <HAL_SD_InitCard+0x74>
    return HAL_ERROR;
 805007e:	2501      	movs	r5, #1
 8050080:	e73e      	b.n	804ff00 <HAL_SD_InitCard+0x74>
 8050082:	bf00      	nop
 8050084:	004005ff 	.word	0x004005ff
 8050088:	c1100000 	.word	0xc1100000

0805008c <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 805008c:	4b03      	ldr	r3, [pc, #12]	; (805009c <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 805008e:	4a04      	ldr	r2, [pc, #16]	; (80500a0 <RCC_GetHCLKClockFreq+0x14>)
 8050090:	689b      	ldr	r3, [r3, #8]
 8050092:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8050096:	5cd3      	ldrb	r3, [r2, r3]
}
 8050098:	40d8      	lsrs	r0, r3
 805009a:	4770      	bx	lr
 805009c:	40023800 	.word	0x40023800
 80500a0:	08063089 	.word	0x08063089

080500a4 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80500a4:	4b03      	ldr	r3, [pc, #12]	; (80500b4 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80500a6:	4a04      	ldr	r2, [pc, #16]	; (80500b8 <RCC_GetPCLK1ClockFreq+0x14>)
 80500a8:	689b      	ldr	r3, [r3, #8]
 80500aa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80500ae:	5cd3      	ldrb	r3, [r2, r3]
}
 80500b0:	40d8      	lsrs	r0, r3
 80500b2:	4770      	bx	lr
 80500b4:	40023800 	.word	0x40023800
 80500b8:	08063099 	.word	0x08063099

080500bc <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80500bc:	4b03      	ldr	r3, [pc, #12]	; (80500cc <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80500be:	4a04      	ldr	r2, [pc, #16]	; (80500d0 <RCC_GetPCLK2ClockFreq+0x14>)
 80500c0:	689b      	ldr	r3, [r3, #8]
 80500c2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80500c6:	5cd3      	ldrb	r3, [r2, r3]
}
 80500c8:	40d8      	lsrs	r0, r3
 80500ca:	4770      	bx	lr
 80500cc:	40023800 	.word	0x40023800
 80500d0:	08063099 	.word	0x08063099

080500d4 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80500d4:	4b0c      	ldr	r3, [pc, #48]	; (8050108 <RCC_PLL_GetFreqDomain_SYS+0x34>)
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
      break;

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80500d6:	480d      	ldr	r0, [pc, #52]	; (805010c <RCC_PLL_GetFreqDomain_SYS+0x38>)
 80500d8:	685a      	ldr	r2, [r3, #4]
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80500da:	6859      	ldr	r1, [r3, #4]
 80500dc:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80500e0:	4a0b      	ldr	r2, [pc, #44]	; (8050110 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 80500e2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80500e6:	bf18      	it	ne
 80500e8:	4610      	movne	r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80500ea:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80500ec:	685b      	ldr	r3, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80500ee:	f3c2 1288 	ubfx	r2, r2, #6, #9

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80500f2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80500f6:	fbb0 f0f1 	udiv	r0, r0, r1
 80500fa:	3301      	adds	r3, #1
 80500fc:	4350      	muls	r0, r2
 80500fe:	005b      	lsls	r3, r3, #1
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8050100:	fbb0 f0f3 	udiv	r0, r0, r3
 8050104:	4770      	bx	lr
 8050106:	bf00      	nop
 8050108:	40023800 	.word	0x40023800
 805010c:	00f42400 	.word	0x00f42400
 8050110:	007a1200 	.word	0x007a1200

08050114 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8050114:	4b06      	ldr	r3, [pc, #24]	; (8050130 <RCC_GetSystemClockFreq+0x1c>)
 8050116:	689b      	ldr	r3, [r3, #8]
 8050118:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 805011c:	2b04      	cmp	r3, #4
 805011e:	d003      	beq.n	8050128 <RCC_GetSystemClockFreq+0x14>
 8050120:	2b08      	cmp	r3, #8
 8050122:	d103      	bne.n	805012c <RCC_GetSystemClockFreq+0x18>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8050124:	f7ff bfd6 	b.w	80500d4 <RCC_PLL_GetFreqDomain_SYS>
  switch (LL_RCC_GetSysClkSource())
 8050128:	4802      	ldr	r0, [pc, #8]	; (8050134 <RCC_GetSystemClockFreq+0x20>)
 805012a:	4770      	bx	lr
      frequency = HSI_VALUE;
 805012c:	4802      	ldr	r0, [pc, #8]	; (8050138 <RCC_GetSystemClockFreq+0x24>)
}
 805012e:	4770      	bx	lr
 8050130:	40023800 	.word	0x40023800
 8050134:	007a1200 	.word	0x007a1200
 8050138:	00f42400 	.word	0x00f42400

0805013c <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 805013c:	4b11      	ldr	r3, [pc, #68]	; (8050184 <SDMMC_GetCmdResp2+0x48>)
 805013e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 8050142:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8050144:	681b      	ldr	r3, [r3, #0]
 8050146:	fbb3 f3f1 	udiv	r3, r3, r1
 805014a:	f241 3188 	movw	r1, #5000	; 0x1388
 805014e:	434b      	muls	r3, r1

  do
  {
    if (count-- == 0U)
 8050150:	3b01      	subs	r3, #1
 8050152:	d313      	bcc.n	805017c <SDMMC_GetCmdResp2+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8050154:	6b51      	ldr	r1, [r2, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8050156:	f011 0f45 	tst.w	r1, #69	; 0x45
 805015a:	d0f9      	beq.n	8050150 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 805015c:	0509      	lsls	r1, r1, #20
 805015e:	d4f7      	bmi.n	8050150 <SDMMC_GetCmdResp2+0x14>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8050160:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8050162:	075b      	lsls	r3, r3, #29
 8050164:	d502      	bpl.n	805016c <SDMMC_GetCmdResp2+0x30>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8050166:	2004      	movs	r0, #4
 8050168:	6390      	str	r0, [r2, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 805016a:	4770      	bx	lr
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 805016c:	6b50      	ldr	r0, [r2, #52]	; 0x34
 805016e:	f010 0001 	ands.w	r0, r0, #1
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8050172:	bf14      	ite	ne
 8050174:	2301      	movne	r3, #1
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8050176:	23c5      	moveq	r3, #197	; 0xc5
 8050178:	6393      	str	r3, [r2, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 805017a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 805017c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8050180:	4770      	bx	lr
 8050182:	bf00      	nop
 8050184:	20020584 	.word	0x20020584

08050188 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8050188:	4b0f      	ldr	r3, [pc, #60]	; (80501c8 <SDMMC_GetCmdResp3+0x40>)
 805018a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 805018e:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8050190:	681b      	ldr	r3, [r3, #0]
 8050192:	fbb3 f3f1 	udiv	r3, r3, r1
 8050196:	f241 3188 	movw	r1, #5000	; 0x1388
 805019a:	434b      	muls	r3, r1

  do
  {
    if (count-- == 0U)
 805019c:	3b01      	subs	r3, #1
 805019e:	d30f      	bcc.n	80501c0 <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 80501a0:	6b51      	ldr	r1, [r2, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80501a2:	f011 0f45 	tst.w	r1, #69	; 0x45
 80501a6:	d0f9      	beq.n	805019c <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80501a8:	0509      	lsls	r1, r1, #20
 80501aa:	d4f7      	bmi.n	805019c <SDMMC_GetCmdResp3+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80501ac:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80501ae:	f010 0004 	ands.w	r0, r0, #4
 80501b2:	d002      	beq.n	80501ba <SDMMC_GetCmdResp3+0x32>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80501b4:	2004      	movs	r0, #4
 80501b6:	6390      	str	r0, [r2, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80501b8:	4770      	bx	lr
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80501ba:	23c5      	movs	r3, #197	; 0xc5
 80501bc:	6393      	str	r3, [r2, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80501be:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80501c0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80501c4:	4770      	bx	lr
 80501c6:	bf00      	nop
 80501c8:	20020584 	.word	0x20020584

080501cc <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80501cc:	4b45      	ldr	r3, [pc, #276]	; (80502e4 <SDMMC_GetCmdResp1+0x118>)
{
 80501ce:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80501d0:	681b      	ldr	r3, [r3, #0]
{
 80501d2:	4604      	mov	r4, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80501d4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80501d8:	fbb3 f3f0 	udiv	r3, r3, r0
 80501dc:	435a      	muls	r2, r3
    if (count-- == 0U)
 80501de:	2a00      	cmp	r2, #0
 80501e0:	d049      	beq.n	8050276 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 80501e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80501e4:	f013 0f45 	tst.w	r3, #69	; 0x45
 80501e8:	d007      	beq.n	80501fa <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80501ea:	051b      	lsls	r3, r3, #20
 80501ec:	d405      	bmi.n	80501fa <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80501ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80501f0:	0758      	lsls	r0, r3, #29
 80501f2:	d504      	bpl.n	80501fe <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80501f4:	2004      	movs	r0, #4
 80501f6:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80501f8:	bd10      	pop	{r4, pc}
 80501fa:	3a01      	subs	r2, #1
 80501fc:	e7ef      	b.n	80501de <SDMMC_GetCmdResp1+0x12>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80501fe:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8050200:	f010 0001 	ands.w	r0, r0, #1
 8050204:	d002      	beq.n	805020c <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8050206:	2301      	movs	r3, #1
 8050208:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 805020a:	e7f5      	b.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 805020c:	23c5      	movs	r3, #197	; 0xc5
 805020e:	63a3      	str	r3, [r4, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8050210:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8050212:	b2db      	uxtb	r3, r3
 8050214:	4299      	cmp	r1, r3
 8050216:	d131      	bne.n	805027c <SDMMC_GetCmdResp1+0xb0>
  return (*(__IO uint32_t *) tmp);
 8050218:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 805021a:	4833      	ldr	r0, [pc, #204]	; (80502e8 <SDMMC_GetCmdResp1+0x11c>)
 805021c:	4018      	ands	r0, r3
 805021e:	2800      	cmp	r0, #0
 8050220:	d0ea      	beq.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8050222:	2b00      	cmp	r3, #0
 8050224:	db2c      	blt.n	8050280 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8050226:	005a      	lsls	r2, r3, #1
 8050228:	d42d      	bmi.n	8050286 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 805022a:	009c      	lsls	r4, r3, #2
 805022c:	d42d      	bmi.n	805028a <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 805022e:	00d9      	lsls	r1, r3, #3
 8050230:	d42d      	bmi.n	805028e <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8050232:	011a      	lsls	r2, r3, #4
 8050234:	d42e      	bmi.n	8050294 <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8050236:	015c      	lsls	r4, r3, #5
 8050238:	d42f      	bmi.n	805029a <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 805023a:	01d9      	lsls	r1, r3, #7
 805023c:	d430      	bmi.n	80502a0 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 805023e:	021a      	lsls	r2, r3, #8
 8050240:	d431      	bmi.n	80502a6 <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8050242:	025c      	lsls	r4, r3, #9
 8050244:	d432      	bmi.n	80502ac <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8050246:	0299      	lsls	r1, r3, #10
 8050248:	d433      	bmi.n	80502b2 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 805024a:	02da      	lsls	r2, r3, #11
 805024c:	d434      	bmi.n	80502b8 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 805024e:	035c      	lsls	r4, r3, #13
 8050250:	d435      	bmi.n	80502be <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8050252:	0399      	lsls	r1, r3, #14
 8050254:	d436      	bmi.n	80502c4 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8050256:	03da      	lsls	r2, r3, #15
 8050258:	d437      	bmi.n	80502ca <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 805025a:	041c      	lsls	r4, r3, #16
 805025c:	d438      	bmi.n	80502d0 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 805025e:	0459      	lsls	r1, r3, #17
 8050260:	d439      	bmi.n	80502d6 <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8050262:	049a      	lsls	r2, r3, #18
 8050264:	d43a      	bmi.n	80502dc <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8050266:	f013 0f08 	tst.w	r3, #8
 805026a:	bf14      	ite	ne
 805026c:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8050270:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8050274:	e7c0      	b.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8050276:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 805027a:	e7bd      	b.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 805027c:	2001      	movs	r0, #1
 805027e:	e7bb      	b.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8050280:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8050284:	e7b8      	b.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8050286:	2040      	movs	r0, #64	; 0x40
 8050288:	e7b6      	b.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 805028a:	2080      	movs	r0, #128	; 0x80
 805028c:	e7b4      	b.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 805028e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8050292:	e7b1      	b.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8050294:	f44f 7000 	mov.w	r0, #512	; 0x200
 8050298:	e7ae      	b.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 805029a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 805029e:	e7ab      	b.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80502a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80502a4:	e7a8      	b.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80502a6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80502aa:	e7a5      	b.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80502ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80502b0:	e7a2      	b.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80502b2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80502b6:	e79f      	b.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 80502b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80502bc:	e79c      	b.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80502be:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80502c2:	e799      	b.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80502c4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80502c8:	e796      	b.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80502ca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80502ce:	e793      	b.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80502d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80502d4:	e790      	b.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80502d6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80502da:	e78d      	b.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 80502dc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80502e0:	e78a      	b.n	80501f8 <SDMMC_GetCmdResp1+0x2c>
 80502e2:	bf00      	nop
 80502e4:	20020584 	.word	0x20020584
 80502e8:	fdffe008 	.word	0xfdffe008

080502ec <SDMMC_CmdStopTransfer>:
{
 80502ec:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80502ee:	2300      	movs	r3, #0
{
 80502f0:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80502f2:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80502f4:	2240      	movs	r2, #64	; 0x40
{
 80502f6:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80502f8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80502fa:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80502fe:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8050302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8050306:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8050308:	f009 fdda 	bl	8059ec0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 805030c:	4a03      	ldr	r2, [pc, #12]	; (805031c <SDMMC_CmdStopTransfer+0x30>)
 805030e:	4629      	mov	r1, r5
 8050310:	4620      	mov	r0, r4
 8050312:	f7ff ff5b 	bl	80501cc <SDMMC_GetCmdResp1>
}
 8050316:	b007      	add	sp, #28
 8050318:	bd30      	pop	{r4, r5, pc}
 805031a:	bf00      	nop
 805031c:	05f5e100 	.word	0x05f5e100

08050320 <SDMMC_CmdGoIdleState>:
{
 8050320:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0U;
 8050322:	2300      	movs	r3, #0
{
 8050324:	b086      	sub	sp, #24
 8050326:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8050328:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 805032a:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 805032e:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8050332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8050336:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8050338:	f009 fdc2 	bl	8059ec0 <SDMMC_SendCommand>
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 805033c:	4b0a      	ldr	r3, [pc, #40]	; (8050368 <SDMMC_CmdGoIdleState+0x48>)
 805033e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8050342:	681b      	ldr	r3, [r3, #0]
 8050344:	fbb3 f3f2 	udiv	r3, r3, r2
 8050348:	f241 3288 	movw	r2, #5000	; 0x1388
 805034c:	4353      	muls	r3, r2
    if (count-- == 0U)
 805034e:	3b01      	subs	r3, #1
 8050350:	d307      	bcc.n	8050362 <SDMMC_CmdGoIdleState+0x42>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8050352:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8050354:	0612      	lsls	r2, r2, #24
 8050356:	d5fa      	bpl.n	805034e <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8050358:	23c5      	movs	r3, #197	; 0xc5
  return SDMMC_ERROR_NONE;
 805035a:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 805035c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 805035e:	b006      	add	sp, #24
 8050360:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8050362:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8050366:	e7fa      	b.n	805035e <SDMMC_CmdGoIdleState+0x3e>
 8050368:	20020584 	.word	0x20020584

0805036c <SDMMC_CmdOperCond>:
{
 805036c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 805036e:	f44f 7cd5 	mov.w	ip, #426	; 0x1aa
{
 8050372:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8050374:	2308      	movs	r3, #8
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8050376:	f04f 0e40 	mov.w	lr, #64	; 0x40
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 805037a:	a901      	add	r1, sp, #4
{
 805037c:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 805037e:	e9cd c301 	strd	ip, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8050382:	2300      	movs	r3, #0
 8050384:	e9cd e303 	strd	lr, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8050388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 805038c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 805038e:	f009 fd97 	bl	8059ec0 <SDMMC_SendCommand>
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8050392:	4b13      	ldr	r3, [pc, #76]	; (80503e0 <SDMMC_CmdOperCond+0x74>)
 8050394:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8050398:	681b      	ldr	r3, [r3, #0]
 805039a:	fbb3 f3f2 	udiv	r3, r3, r2
 805039e:	f241 3288 	movw	r2, #5000	; 0x1388
 80503a2:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 80503a4:	3b01      	subs	r3, #1
 80503a6:	d318      	bcc.n	80503da <SDMMC_CmdOperCond+0x6e>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 80503a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80503aa:	f012 0f45 	tst.w	r2, #69	; 0x45
 80503ae:	d0f9      	beq.n	80503a4 <SDMMC_CmdOperCond+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80503b0:	0511      	lsls	r1, r2, #20
 80503b2:	d4f7      	bmi.n	80503a4 <SDMMC_CmdOperCond+0x38>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80503b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80503b6:	075a      	lsls	r2, r3, #29
 80503b8:	d503      	bpl.n	80503c2 <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80503ba:	2004      	movs	r0, #4
 80503bc:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80503be:	b006      	add	sp, #24
 80503c0:	bd10      	pop	{r4, pc}

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80503c2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80503c4:	f010 0001 	ands.w	r0, r0, #1
 80503c8:	d002      	beq.n	80503d0 <SDMMC_CmdOperCond+0x64>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80503ca:	2301      	movs	r3, #1
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80503cc:	63a3      	str	r3, [r4, #56]	; 0x38
 80503ce:	e7f6      	b.n	80503be <SDMMC_CmdOperCond+0x52>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80503d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80503d2:	065b      	lsls	r3, r3, #25
 80503d4:	d5f3      	bpl.n	80503be <SDMMC_CmdOperCond+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80503d6:	2340      	movs	r3, #64	; 0x40
 80503d8:	e7f8      	b.n	80503cc <SDMMC_CmdOperCond+0x60>
      return SDMMC_ERROR_TIMEOUT;
 80503da:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80503de:	e7ee      	b.n	80503be <SDMMC_CmdOperCond+0x52>
 80503e0:	20020584 	.word	0x20020584

080503e4 <SDMMC_CmdSetRelAdd>:
{
 80503e4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80503e6:	2300      	movs	r3, #0
{
 80503e8:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80503ea:	2203      	movs	r2, #3
{
 80503ec:	460d      	mov	r5, r1
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80503ee:	a901      	add	r1, sp, #4
{
 80503f0:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80503f2:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80503f6:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80503f8:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80503fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8050400:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8050402:	f009 fd5d 	bl	8059ec0 <SDMMC_SendCommand>
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8050406:	4b1f      	ldr	r3, [pc, #124]	; (8050484 <SDMMC_CmdSetRelAdd+0xa0>)
 8050408:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 805040c:	681b      	ldr	r3, [r3, #0]
 805040e:	fbb3 f3f2 	udiv	r3, r3, r2
 8050412:	f241 3288 	movw	r2, #5000	; 0x1388
 8050416:	4353      	muls	r3, r2
    if (count-- == 0U)
 8050418:	3b01      	subs	r3, #1
 805041a:	d32a      	bcc.n	8050472 <SDMMC_CmdSetRelAdd+0x8e>
    sta_reg = SDMMCx->STA;
 805041c:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 805041e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8050422:	d0f9      	beq.n	8050418 <SDMMC_CmdSetRelAdd+0x34>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8050424:	0510      	lsls	r0, r2, #20
 8050426:	d4f7      	bmi.n	8050418 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8050428:	6b63      	ldr	r3, [r4, #52]	; 0x34
 805042a:	0759      	lsls	r1, r3, #29
 805042c:	d503      	bpl.n	8050436 <SDMMC_CmdSetRelAdd+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 805042e:	2004      	movs	r0, #4
 8050430:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8050432:	b007      	add	sp, #28
 8050434:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8050436:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8050438:	f010 0001 	ands.w	r0, r0, #1
 805043c:	d002      	beq.n	8050444 <SDMMC_CmdSetRelAdd+0x60>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 805043e:	2301      	movs	r3, #1
 8050440:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8050442:	e7f6      	b.n	8050432 <SDMMC_CmdSetRelAdd+0x4e>
  return (uint8_t)(SDMMCx->RESPCMD);
 8050444:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8050446:	b2db      	uxtb	r3, r3
 8050448:	2b03      	cmp	r3, #3
 805044a:	d115      	bne.n	8050478 <SDMMC_CmdSetRelAdd+0x94>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 805044c:	23c5      	movs	r3, #197	; 0xc5
 805044e:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8050450:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8050452:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8050456:	d102      	bne.n	805045e <SDMMC_CmdSetRelAdd+0x7a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8050458:	0c1b      	lsrs	r3, r3, #16
 805045a:	802b      	strh	r3, [r5, #0]
    return SDMMC_ERROR_NONE;
 805045c:	e7e9      	b.n	8050432 <SDMMC_CmdSetRelAdd+0x4e>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 805045e:	045a      	lsls	r2, r3, #17
 8050460:	d40c      	bmi.n	805047c <SDMMC_CmdSetRelAdd+0x98>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8050462:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8050466:	bf14      	ite	ne
 8050468:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 805046c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8050470:	e7df      	b.n	8050432 <SDMMC_CmdSetRelAdd+0x4e>
      return SDMMC_ERROR_TIMEOUT;
 8050472:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8050476:	e7dc      	b.n	8050432 <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8050478:	2001      	movs	r0, #1
 805047a:	e7da      	b.n	8050432 <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 805047c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8050480:	e7d7      	b.n	8050432 <SDMMC_CmdSetRelAdd+0x4e>
 8050482:	bf00      	nop
 8050484:	20020584 	.word	0x20020584

08050488 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8050488:	4a2f      	ldr	r2, [pc, #188]	; (8050548 <LL_TIM_Init+0xc0>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 805048a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 805048c:	4290      	cmp	r0, r2
 805048e:	d012      	beq.n	80504b6 <LL_TIM_Init+0x2e>
 8050490:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8050494:	d00f      	beq.n	80504b6 <LL_TIM_Init+0x2e>
 8050496:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 805049a:	4290      	cmp	r0, r2
 805049c:	d00b      	beq.n	80504b6 <LL_TIM_Init+0x2e>
 805049e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80504a2:	4290      	cmp	r0, r2
 80504a4:	d007      	beq.n	80504b6 <LL_TIM_Init+0x2e>
 80504a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80504aa:	4290      	cmp	r0, r2
 80504ac:	d003      	beq.n	80504b6 <LL_TIM_Init+0x2e>
 80504ae:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80504b2:	4290      	cmp	r0, r2
 80504b4:	d119      	bne.n	80504ea <LL_TIM_Init+0x62>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80504b6:	684a      	ldr	r2, [r1, #4]
 80504b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80504bc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80504be:	4a22      	ldr	r2, [pc, #136]	; (8050548 <LL_TIM_Init+0xc0>)
 80504c0:	4290      	cmp	r0, r2
 80504c2:	d029      	beq.n	8050518 <LL_TIM_Init+0x90>
 80504c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80504c8:	d026      	beq.n	8050518 <LL_TIM_Init+0x90>
 80504ca:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80504ce:	4290      	cmp	r0, r2
 80504d0:	d022      	beq.n	8050518 <LL_TIM_Init+0x90>
 80504d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80504d6:	4290      	cmp	r0, r2
 80504d8:	d01e      	beq.n	8050518 <LL_TIM_Init+0x90>
 80504da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80504de:	4290      	cmp	r0, r2
 80504e0:	d01a      	beq.n	8050518 <LL_TIM_Init+0x90>
 80504e2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80504e6:	4290      	cmp	r0, r2
 80504e8:	d016      	beq.n	8050518 <LL_TIM_Init+0x90>
 80504ea:	4a18      	ldr	r2, [pc, #96]	; (805054c <LL_TIM_Init+0xc4>)
 80504ec:	4290      	cmp	r0, r2
 80504ee:	d013      	beq.n	8050518 <LL_TIM_Init+0x90>
 80504f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80504f4:	4290      	cmp	r0, r2
 80504f6:	d00f      	beq.n	8050518 <LL_TIM_Init+0x90>
 80504f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80504fc:	4290      	cmp	r0, r2
 80504fe:	d00b      	beq.n	8050518 <LL_TIM_Init+0x90>
 8050500:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8050504:	4290      	cmp	r0, r2
 8050506:	d007      	beq.n	8050518 <LL_TIM_Init+0x90>
 8050508:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 805050c:	4290      	cmp	r0, r2
 805050e:	d003      	beq.n	8050518 <LL_TIM_Init+0x90>
 8050510:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8050514:	4290      	cmp	r0, r2
 8050516:	d103      	bne.n	8050520 <LL_TIM_Init+0x98>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8050518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 805051c:	68ca      	ldr	r2, [r1, #12]
 805051e:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8050520:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8050522:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8050524:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8050526:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8050528:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 805052a:	4b07      	ldr	r3, [pc, #28]	; (8050548 <LL_TIM_Init+0xc0>)
 805052c:	4298      	cmp	r0, r3
 805052e:	d003      	beq.n	8050538 <LL_TIM_Init+0xb0>
 8050530:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8050534:	4298      	cmp	r0, r3
 8050536:	d101      	bne.n	805053c <LL_TIM_Init+0xb4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8050538:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 805053a:	6303      	str	r3, [r0, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 805053c:	6943      	ldr	r3, [r0, #20]
 805053e:	f043 0301 	orr.w	r3, r3, #1
 8050542:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8050544:	2000      	movs	r0, #0
 8050546:	4770      	bx	lr
 8050548:	40010000 	.word	0x40010000
 805054c:	40014000 	.word	0x40014000

08050550 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8050550:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
{
 8050554:	b530      	push	{r4, r5, lr}
  switch (Channel)
 8050556:	f000 80e0 	beq.w	805071a <LL_TIM_OC_Init+0x1ca>
 805055a:	d809      	bhi.n	8050570 <LL_TIM_OC_Init+0x20>
 805055c:	2910      	cmp	r1, #16
 805055e:	d06d      	beq.n	805063c <LL_TIM_OC_Init+0xec>
 8050560:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8050564:	f000 80a2 	beq.w	80506ac <LL_TIM_OC_Init+0x15c>
 8050568:	2901      	cmp	r1, #1
 805056a:	d031      	beq.n	80505d0 <LL_TIM_OC_Init+0x80>
 805056c:	2001      	movs	r0, #1
    default:
      break;
  }

  return result;
}
 805056e:	bd30      	pop	{r4, r5, pc}
  switch (Channel)
 8050570:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8050574:	f000 80fa 	beq.w	805076c <LL_TIM_OC_Init+0x21c>
 8050578:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 805057c:	d1f6      	bne.n	805056c <LL_TIM_OC_Init+0x1c>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 805057e:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8050580:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8050582:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8050586:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8050588:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 805058a:	6d41      	ldr	r1, [r0, #84]	; 0x54

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 805058c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8050590:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8050594:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8050598:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 805059c:	6911      	ldr	r1, [r2, #16]
 805059e:	ea43 5301 	orr.w	r3, r3, r1, lsl #20

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80505a2:	6851      	ldr	r1, [r2, #4]
 80505a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80505a8:	ea43 5301 	orr.w	r3, r3, r1, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80505ac:	4984      	ldr	r1, [pc, #528]	; (80507c0 <LL_TIM_OC_Init+0x270>)
 80505ae:	4288      	cmp	r0, r1
 80505b0:	d003      	beq.n	80505ba <LL_TIM_OC_Init+0x6a>
 80505b2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80505b6:	4288      	cmp	r0, r1
 80505b8:	d106      	bne.n	80505c8 <LL_TIM_OC_Init+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80505ba:	6841      	ldr	r1, [r0, #4]
 80505bc:	6995      	ldr	r5, [r2, #24]
 80505be:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80505c2:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 80505c6:	6041      	str	r1, [r0, #4]

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80505c8:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80505ca:	6544      	str	r4, [r0, #84]	; 0x54
  WRITE_REG(TIMx->CCR6, CompareValue);
 80505cc:	65c2      	str	r2, [r0, #92]	; 0x5c
 80505ce:	e032      	b.n	8050636 <LL_TIM_OC_Init+0xe6>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80505d0:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80505d2:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80505d4:	f023 0301 	bic.w	r3, r3, #1
 80505d8:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80505da:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80505dc:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80505de:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80505e0:	f023 0302 	bic.w	r3, r3, #2
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80505e4:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80505e8:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80505ec:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80505ee:	6915      	ldr	r5, [r2, #16]
 80505f0:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80505f2:	6855      	ldr	r5, [r2, #4]
 80505f4:	f023 0301 	bic.w	r3, r3, #1
 80505f8:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80505fa:	4d71      	ldr	r5, [pc, #452]	; (80507c0 <LL_TIM_OC_Init+0x270>)
 80505fc:	42a8      	cmp	r0, r5
 80505fe:	d003      	beq.n	8050608 <LL_TIM_OC_Init+0xb8>
 8050600:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8050604:	42a8      	cmp	r0, r5
 8050606:	d112      	bne.n	805062e <LL_TIM_OC_Init+0xde>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8050608:	6955      	ldr	r5, [r2, #20]
 805060a:	f023 0308 	bic.w	r3, r3, #8
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 805060e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8050612:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8050616:	6895      	ldr	r5, [r2, #8]
 8050618:	f023 0304 	bic.w	r3, r3, #4
 805061c:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8050620:	6995      	ldr	r5, [r2, #24]
 8050622:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8050624:	69d5      	ldr	r5, [r2, #28]
 8050626:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 805062a:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 805062e:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8050630:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8050632:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8050634:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8050636:	6203      	str	r3, [r0, #32]
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8050638:	2000      	movs	r0, #0
      break;
 805063a:	e798      	b.n	805056e <LL_TIM_OC_Init+0x1e>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 805063c:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 805063e:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8050640:	f023 0310 	bic.w	r3, r3, #16
 8050644:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8050646:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8050648:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 805064a:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 805064c:	f023 0320 	bic.w	r3, r3, #32
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8050650:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8050654:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8050658:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 805065c:	6915      	ldr	r5, [r2, #16]
 805065e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8050662:	6855      	ldr	r5, [r2, #4]
 8050664:	f023 0310 	bic.w	r3, r3, #16
 8050668:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 805066c:	4d54      	ldr	r5, [pc, #336]	; (80507c0 <LL_TIM_OC_Init+0x270>)
 805066e:	42a8      	cmp	r0, r5
 8050670:	d003      	beq.n	805067a <LL_TIM_OC_Init+0x12a>
 8050672:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8050676:	42a8      	cmp	r0, r5
 8050678:	d113      	bne.n	80506a2 <LL_TIM_OC_Init+0x152>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 805067a:	6955      	ldr	r5, [r2, #20]
 805067c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8050680:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8050684:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8050688:	6895      	ldr	r5, [r2, #8]
 805068a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 805068e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8050692:	6995      	ldr	r5, [r2, #24]
 8050694:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8050698:	69d5      	ldr	r5, [r2, #28]
 805069a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 805069e:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80506a2:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80506a4:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80506a6:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80506a8:	6382      	str	r2, [r0, #56]	; 0x38
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80506aa:	e7c4      	b.n	8050636 <LL_TIM_OC_Init+0xe6>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80506ac:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80506ae:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80506b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80506b4:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80506b6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80506b8:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80506ba:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80506bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80506c0:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80506c4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80506c8:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80506ca:	6915      	ldr	r5, [r2, #16]
 80506cc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80506d0:	6855      	ldr	r5, [r2, #4]
 80506d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80506d6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80506da:	4d39      	ldr	r5, [pc, #228]	; (80507c0 <LL_TIM_OC_Init+0x270>)
 80506dc:	42a8      	cmp	r0, r5
 80506de:	d003      	beq.n	80506e8 <LL_TIM_OC_Init+0x198>
 80506e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80506e4:	42a8      	cmp	r0, r5
 80506e6:	d113      	bne.n	8050710 <LL_TIM_OC_Init+0x1c0>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80506e8:	6955      	ldr	r5, [r2, #20]
 80506ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80506ee:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80506f2:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80506f6:	6895      	ldr	r5, [r2, #8]
 80506f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80506fc:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8050700:	6995      	ldr	r5, [r2, #24]
 8050702:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8050706:	69d5      	ldr	r5, [r2, #28]
 8050708:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 805070c:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8050710:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8050712:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8050714:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8050716:	63c2      	str	r2, [r0, #60]	; 0x3c
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8050718:	e78d      	b.n	8050636 <LL_TIM_OC_Init+0xe6>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 805071a:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 805071c:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 805071e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8050722:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8050724:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8050726:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8050728:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 805072a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 805072e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8050732:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8050736:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 805073a:	6915      	ldr	r5, [r2, #16]
 805073c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8050740:	6855      	ldr	r5, [r2, #4]
 8050742:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8050746:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 805074a:	4d1d      	ldr	r5, [pc, #116]	; (80507c0 <LL_TIM_OC_Init+0x270>)
 805074c:	42a8      	cmp	r0, r5
 805074e:	d003      	beq.n	8050758 <LL_TIM_OC_Init+0x208>
 8050750:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8050754:	42a8      	cmp	r0, r5
 8050756:	d104      	bne.n	8050762 <LL_TIM_OC_Init+0x212>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8050758:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 805075c:	6995      	ldr	r5, [r2, #24]
 805075e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8050762:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8050764:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8050766:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8050768:	6402      	str	r2, [r0, #64]	; 0x40
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 805076a:	e764      	b.n	8050636 <LL_TIM_OC_Init+0xe6>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 805076c:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 805076e:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8050770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8050774:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8050776:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8050778:	6d41      	ldr	r1, [r0, #84]	; 0x54
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 805077a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 805077e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8050782:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8050786:	430c      	orrs	r4, r1
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8050788:	6911      	ldr	r1, [r2, #16]
 805078a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 805078e:	6851      	ldr	r1, [r2, #4]
 8050790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8050794:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8050798:	4909      	ldr	r1, [pc, #36]	; (80507c0 <LL_TIM_OC_Init+0x270>)
 805079a:	4288      	cmp	r0, r1
 805079c:	d003      	beq.n	80507a6 <LL_TIM_OC_Init+0x256>
 805079e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80507a2:	4288      	cmp	r0, r1
 80507a4:	d106      	bne.n	80507b4 <LL_TIM_OC_Init+0x264>
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80507a6:	6841      	ldr	r1, [r0, #4]
 80507a8:	6995      	ldr	r5, [r2, #24]
 80507aa:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80507ae:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80507b2:	6041      	str	r1, [r0, #4]
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80507b4:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80507b6:	6544      	str	r4, [r0, #84]	; 0x54
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80507b8:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80507ba:	6582      	str	r2, [r0, #88]	; 0x58
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80507bc:	e73b      	b.n	8050636 <LL_TIM_OC_Init+0xe6>
 80507be:	bf00      	nop
 80507c0:	40010000 	.word	0x40010000

080507c4 <UTILS_PLL_IsBusy>:
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80507c4:	4b08      	ldr	r3, [pc, #32]	; (80507e8 <UTILS_PLL_IsBusy+0x24>)
 80507c6:	6819      	ldr	r1, [r3, #0]
  * @rmtoll CR           PLLSAIRDY    LL_RCC_PLLSAI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 80507c8:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80507ca:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 80507ce:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 80507d0:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
 80507d4:	430a      	orrs	r2, r1
 80507d6:	bf14      	ite	ne
 80507d8:	2001      	movne	r0, #1
 80507da:	2000      	moveq	r0, #0
  {
    /* PLLSAI1 configuration cannot be modified */
    status = ERROR;
  }
  /* Check if PLLI2S is busy*/
  if(LL_RCC_PLLI2S_IsReady() != 0U)
 80507dc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  {
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
  return status;
}
 80507e0:	bf18      	it	ne
 80507e2:	2001      	movne	r0, #1
 80507e4:	4770      	bx	lr
 80507e6:	bf00      	nop
 80507e8:	40023800 	.word	0x40023800

080507ec <LL_SetFlashLatency>:
  if(HCLK_Frequency == 0U)
 80507ec:	b370      	cbz	r0, 805084c <LL_SetFlashLatency+0x60>
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 80507ee:	4b33      	ldr	r3, [pc, #204]	; (80508bc <LL_SetFlashLatency+0xd0>)
 80507f0:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(PWR->CR1, PWR_CR1_ODEN) == (PWR_CR1_ODEN));
 80507f2:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 80507f4:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 80507f8:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 80507fc:	d128      	bne.n	8050850 <LL_SetFlashLatency+0x64>
  return (READ_BIT(PWR->CR1, PWR_CR1_ODEN) == (PWR_CR1_ODEN));
 80507fe:	f102 620f 	add.w	r2, r2, #149946368	; 0x8f00000
      if(LL_PWR_IsEnabledOverDriveMode() != 0U)
 8050802:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8050806:	f502 528c 	add.w	r2, r2, #4480	; 0x1180
 805080a:	d043      	beq.n	8050894 <LL_SetFlashLatency+0xa8>
            latency = LL_FLASH_LATENCY_6;
 805080c:	4b2c      	ldr	r3, [pc, #176]	; (80508c0 <LL_SetFlashLatency+0xd4>)
 805080e:	4298      	cmp	r0, r3
 8050810:	bf8c      	ite	hi
 8050812:	2307      	movhi	r3, #7
 8050814:	2306      	movls	r3, #6
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY5_FREQ) && (latency == LL_FLASH_LATENCY_0))
 8050816:	4290      	cmp	r0, r2
 8050818:	d802      	bhi.n	8050820 <LL_SetFlashLatency+0x34>
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ) && (latency == LL_FLASH_LATENCY_0))
 805081a:	4a2a      	ldr	r2, [pc, #168]	; (80508c4 <LL_SetFlashLatency+0xd8>)
 805081c:	4290      	cmp	r0, r2
 805081e:	d946      	bls.n	80508ae <LL_SetFlashLatency+0xc2>
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ) && (latency == LL_FLASH_LATENCY_0))
 8050820:	4a29      	ldr	r2, [pc, #164]	; (80508c8 <LL_SetFlashLatency+0xdc>)
 8050822:	4290      	cmp	r0, r2
 8050824:	d902      	bls.n	805082c <LL_SetFlashLatency+0x40>
 8050826:	2b01      	cmp	r3, #1
 8050828:	bf38      	it	cc
 805082a:	2301      	movcc	r3, #1
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 805082c:	4927      	ldr	r1, [pc, #156]	; (80508cc <LL_SetFlashLatency+0xe0>)
 805082e:	680a      	ldr	r2, [r1, #0]
 8050830:	f022 020f 	bic.w	r2, r2, #15
 8050834:	431a      	orrs	r2, r3
 8050836:	600a      	str	r2, [r1, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8050838:	680a      	ldr	r2, [r1, #0]
 805083a:	f002 020f 	and.w	r2, r2, #15
      } while ((getlatency != latency) && (timeout > 0));
 805083e:	4293      	cmp	r3, r2
 8050840:	d026      	beq.n	8050890 <LL_SetFlashLatency+0xa4>
 8050842:	680a      	ldr	r2, [r1, #0]
 8050844:	f002 020f 	and.w	r2, r2, #15
 8050848:	4293      	cmp	r3, r2
 805084a:	d021      	beq.n	8050890 <LL_SetFlashLatency+0xa4>
    status = ERROR;
 805084c:	2001      	movs	r0, #1
 805084e:	4770      	bx	lr
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8050850:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    else if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8050854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8050858:	d105      	bne.n	8050866 <LL_SetFlashLatency+0x7a>
      if(HCLK_Frequency > UTILS_SCALE2_LATENCY5_FREQ)
 805085a:	f103 630f 	add.w	r3, r3, #149946368	; 0x8f00000
 805085e:	f503 43a3 	add.w	r3, r3, #20864	; 0x5180
 8050862:	4298      	cmp	r0, r3
 8050864:	d80e      	bhi.n	8050884 <LL_SetFlashLatency+0x98>
      if(HCLK_Frequency > UTILS_SCALE3_LATENCY4_FREQ)
 8050866:	4b17      	ldr	r3, [pc, #92]	; (80508c4 <LL_SetFlashLatency+0xd8>)
 8050868:	4298      	cmp	r0, r3
 805086a:	d80d      	bhi.n	8050888 <LL_SetFlashLatency+0x9c>
      else if(HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)
 805086c:	4b18      	ldr	r3, [pc, #96]	; (80508d0 <LL_SetFlashLatency+0xe4>)
 805086e:	4298      	cmp	r0, r3
 8050870:	d80c      	bhi.n	805088c <LL_SetFlashLatency+0xa0>
      else if(HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)
 8050872:	4b18      	ldr	r3, [pc, #96]	; (80508d4 <LL_SetFlashLatency+0xe8>)
 8050874:	4298      	cmp	r0, r3
 8050876:	d818      	bhi.n	80508aa <LL_SetFlashLatency+0xbe>
        if(HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)
 8050878:	4b13      	ldr	r3, [pc, #76]	; (80508c8 <LL_SetFlashLatency+0xdc>)
 805087a:	4298      	cmp	r0, r3
 805087c:	bf94      	ite	ls
 805087e:	2300      	movls	r3, #0
 8050880:	2301      	movhi	r3, #1
 8050882:	e7d3      	b.n	805082c <LL_SetFlashLatency+0x40>
        latency = LL_FLASH_LATENCY_5;
 8050884:	2305      	movs	r3, #5
 8050886:	e7d1      	b.n	805082c <LL_SetFlashLatency+0x40>
        latency = LL_FLASH_LATENCY_4;
 8050888:	2304      	movs	r3, #4
 805088a:	e7cf      	b.n	805082c <LL_SetFlashLatency+0x40>
        latency = LL_FLASH_LATENCY_3;
 805088c:	2303      	movs	r3, #3
 805088e:	e7cd      	b.n	805082c <LL_SetFlashLatency+0x40>
        status = SUCCESS;
 8050890:	2000      	movs	r0, #0
}
 8050892:	4770      	bx	lr
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY5_FREQ) && (latency == LL_FLASH_LATENCY_0))
 8050894:	4290      	cmp	r0, r2
 8050896:	d8f5      	bhi.n	8050884 <LL_SetFlashLatency+0x98>
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ) && (latency == LL_FLASH_LATENCY_0))
 8050898:	4a0a      	ldr	r2, [pc, #40]	; (80508c4 <LL_SetFlashLatency+0xd8>)
 805089a:	4290      	cmp	r0, r2
 805089c:	d8f4      	bhi.n	8050888 <LL_SetFlashLatency+0x9c>
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ) && (latency == LL_FLASH_LATENCY_0))
 805089e:	4a0c      	ldr	r2, [pc, #48]	; (80508d0 <LL_SetFlashLatency+0xe4>)
 80508a0:	4290      	cmp	r0, r2
 80508a2:	d8f3      	bhi.n	805088c <LL_SetFlashLatency+0xa0>
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ) && (latency == LL_FLASH_LATENCY_0))
 80508a4:	4a0b      	ldr	r2, [pc, #44]	; (80508d4 <LL_SetFlashLatency+0xe8>)
 80508a6:	4290      	cmp	r0, r2
 80508a8:	d9ba      	bls.n	8050820 <LL_SetFlashLatency+0x34>
        latency = LL_FLASH_LATENCY_2;
 80508aa:	2302      	movs	r3, #2
 80508ac:	e7be      	b.n	805082c <LL_SetFlashLatency+0x40>
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ) && (latency == LL_FLASH_LATENCY_0))
 80508ae:	4a08      	ldr	r2, [pc, #32]	; (80508d0 <LL_SetFlashLatency+0xe4>)
 80508b0:	4290      	cmp	r0, r2
 80508b2:	d8b8      	bhi.n	8050826 <LL_SetFlashLatency+0x3a>
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ) && (latency == LL_FLASH_LATENCY_0))
 80508b4:	4a07      	ldr	r2, [pc, #28]	; (80508d4 <LL_SetFlashLatency+0xe8>)
 80508b6:	4290      	cmp	r0, r2
 80508b8:	d9b2      	bls.n	8050820 <LL_SetFlashLatency+0x34>
 80508ba:	e7b4      	b.n	8050826 <LL_SetFlashLatency+0x3a>
 80508bc:	40007000 	.word	0x40007000
 80508c0:	0c845880 	.word	0x0c845880
 80508c4:	07270e00 	.word	0x07270e00
 80508c8:	01c9c380 	.word	0x01c9c380
 80508cc:	40023c00 	.word	0x40023c00
 80508d0:	055d4a80 	.word	0x055d4a80
 80508d4:	03938700 	.word	0x03938700

080508d8 <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80508d8:	680b      	ldr	r3, [r1, #0]
 80508da:	4a21      	ldr	r2, [pc, #132]	; (8050960 <UTILS_EnablePLLAndSwitchSystem+0x88>)
 80508dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 80508e0:	b570      	push	{r4, r5, r6, lr}
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80508e2:	5cd3      	ldrb	r3, [r2, r3]
{
 80508e4:	460d      	mov	r5, r1

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 80508e6:	4e1f      	ldr	r6, [pc, #124]	; (8050964 <UTILS_EnablePLLAndSwitchSystem+0x8c>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80508e8:	fa20 f403 	lsr.w	r4, r0, r3
  if(SystemCoreClock < hclk_frequency)
 80508ec:	6833      	ldr	r3, [r6, #0]
 80508ee:	42a3      	cmp	r3, r4
 80508f0:	d327      	bcc.n	8050942 <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80508f2:	4b1d      	ldr	r3, [pc, #116]	; (8050968 <UTILS_EnablePLLAndSwitchSystem+0x90>)
 80508f4:	681a      	ldr	r2, [r3, #0]
 80508f6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80508fa:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80508fc:	681a      	ldr	r2, [r3, #0]
  /* Update system clock configuration */
  if(status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 80508fe:	0192      	lsls	r2, r2, #6
 8050900:	d5fc      	bpl.n	80508fc <UTILS_EnablePLLAndSwitchSystem+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8050902:	689a      	ldr	r2, [r3, #8]
 8050904:	6829      	ldr	r1, [r5, #0]
 8050906:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 805090a:	430a      	orrs	r2, r1
 805090c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 805090e:	689a      	ldr	r2, [r3, #8]
 8050910:	f022 0203 	bic.w	r2, r2, #3
 8050914:	f042 0202 	orr.w	r2, r2, #2
 8050918:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 805091a:	4b13      	ldr	r3, [pc, #76]	; (8050968 <UTILS_EnablePLLAndSwitchSystem+0x90>)
 805091c:	689a      	ldr	r2, [r3, #8]
 805091e:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8050922:	2a08      	cmp	r2, #8
 8050924:	d1fa      	bne.n	805091c <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8050926:	689a      	ldr	r2, [r3, #8]
}
 8050928:	2000      	movs	r0, #0
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 805092a:	6869      	ldr	r1, [r5, #4]
 805092c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8050930:	430a      	orrs	r2, r1
 8050932:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8050934:	689a      	ldr	r2, [r3, #8]
 8050936:	68a9      	ldr	r1, [r5, #8]
 8050938:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 805093c:	430a      	orrs	r2, r1
 805093e:	609a      	str	r2, [r3, #8]
}
 8050940:	e004      	b.n	805094c <UTILS_EnablePLLAndSwitchSystem+0x74>
    status = LL_SetFlashLatency(hclk_frequency);
 8050942:	4620      	mov	r0, r4
 8050944:	f7ff ff52 	bl	80507ec <LL_SetFlashLatency>
  if(status == SUCCESS)
 8050948:	2800      	cmp	r0, #0
 805094a:	d0d2      	beq.n	80508f2 <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 805094c:	6833      	ldr	r3, [r6, #0]
 805094e:	42a3      	cmp	r3, r4
 8050950:	d902      	bls.n	8050958 <UTILS_EnablePLLAndSwitchSystem+0x80>
  {
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
 8050952:	4620      	mov	r0, r4
 8050954:	f7ff ff4a 	bl	80507ec <LL_SetFlashLatency>
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8050958:	b900      	cbnz	r0, 805095c <UTILS_EnablePLLAndSwitchSystem+0x84>
  SystemCoreClock = HCLKFrequency;
 805095a:	6034      	str	r4, [r6, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 805095c:	bd70      	pop	{r4, r5, r6, pc}
 805095e:	bf00      	nop
 8050960:	08063089 	.word	0x08063089
 8050964:	20020584 	.word	0x20020584
 8050968:	40023800 	.word	0x40023800

0805096c <LL_PLL_ConfigSystemClock_HSE>:
{
 805096c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 805096e:	460e      	mov	r6, r1
 8050970:	4605      	mov	r5, r0
 8050972:	4614      	mov	r4, r2
 8050974:	9301      	str	r3, [sp, #4]
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8050976:	f7ff ff25 	bl	80507c4 <UTILS_PLL_IsBusy>
 805097a:	9901      	ldr	r1, [sp, #4]
 805097c:	2800      	cmp	r0, #0
 805097e:	d134      	bne.n	80509ea <LL_PLL_ConfigSystemClock_HSE+0x7e>
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8050980:	6827      	ldr	r7, [r4, #0]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8050982:	f8d4 c004 	ldr.w	ip, [r4, #4]
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8050986:	f007 033f 	and.w	r3, r7, #63	; 0x3f
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 805098a:	f3cc 0008 	ubfx	r0, ip, #0, #9
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 805098e:	fbb5 f5f3 	udiv	r5, r5, r3
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8050992:	fb05 f300 	mul.w	r3, r5, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8050996:	68a5      	ldr	r5, [r4, #8]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8050998:	4c15      	ldr	r4, [pc, #84]	; (80509f0 <LL_PLL_ConfigSystemClock_HSE+0x84>)
 805099a:	0c28      	lsrs	r0, r5, #16
 805099c:	3001      	adds	r0, #1
 805099e:	0040      	lsls	r0, r0, #1
 80509a0:	fbb3 f0f0 	udiv	r0, r3, r0
 80509a4:	6823      	ldr	r3, [r4, #0]
    if(LL_RCC_HSE_IsReady() != 1U)
 80509a6:	039a      	lsls	r2, r3, #14
 80509a8:	d40f      	bmi.n	80509ca <LL_PLL_ConfigSystemClock_HSE+0x5e>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80509aa:	6823      	ldr	r3, [r4, #0]
      if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
 80509ac:	2e01      	cmp	r6, #1
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80509ae:	4a10      	ldr	r2, [pc, #64]	; (80509f0 <LL_PLL_ConfigSystemClock_HSE+0x84>)
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80509b0:	bf0c      	ite	eq
 80509b2:	f443 2380 	orreq.w	r3, r3, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80509b6:	f423 2380 	bicne.w	r3, r3, #262144	; 0x40000
 80509ba:	6023      	str	r3, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80509bc:	6823      	ldr	r3, [r4, #0]
 80509be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80509c2:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80509c4:	6813      	ldr	r3, [r2, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 80509c6:	039b      	lsls	r3, r3, #14
 80509c8:	d5fc      	bpl.n	80509c4 <LL_PLL_ConfigSystemClock_HSE+0x58>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP,
 80509ca:	4b09      	ldr	r3, [pc, #36]	; (80509f0 <LL_PLL_ConfigSystemClock_HSE+0x84>)
 80509cc:	4a09      	ldr	r2, [pc, #36]	; (80509f4 <LL_PLL_ConfigSystemClock_HSE+0x88>)
 80509ce:	685c      	ldr	r4, [r3, #4]
 80509d0:	4022      	ands	r2, r4
 80509d2:	ea42 128c 	orr.w	r2, r2, ip, lsl #6
 80509d6:	433a      	orrs	r2, r7
 80509d8:	432a      	orrs	r2, r5
 80509da:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80509de:	605a      	str	r2, [r3, #4]
}
 80509e0:	b003      	add	sp, #12
 80509e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 80509e6:	f7ff bf77 	b.w	80508d8 <UTILS_EnablePLLAndSwitchSystem>
}
 80509ea:	2001      	movs	r0, #1
 80509ec:	b003      	add	sp, #12
 80509ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80509f0:	40023800 	.word	0x40023800
 80509f4:	ffbc8000 	.word	0xffbc8000

080509f8 <adis16470_channel_get>:
}

static int adis16470_channel_get(const struct device *dev,
        enum sensor_channel chan,
        struct sensor_value *val)
{
 80509f8:	b5d0      	push	{r4, r6, r7, lr}
    struct adis16470_data *data = dev->data;
 80509fa:	6903      	ldr	r3, [r0, #16]
{
 80509fc:	4614      	mov	r4, r2
 80509fe:	290c      	cmp	r1, #12
 8050a00:	d82c      	bhi.n	8050a5c <adis16470_channel_get+0x64>
 8050a02:	e8df f001 	tbb	[pc, r1]
 8050a06:	221f      	.short	0x221f
 8050a08:	19072b25 	.word	0x19072b25
 8050a0c:	2b2b2b1c 	.word	0x2b2b2b1c
 8050a10:	2b2b      	.short	0x2b2b
 8050a12:	28          	.byte	0x28
 8050a13:	00          	.byte	0x00
    switch (chan) {
    case SENSOR_CHAN_GYRO_X:   store_value(val, data->gyro[0]); break;
 8050a14:	e9d3 670e 	ldrd	r6, r7, [r3, #56]	; 0x38
    val->val1 = data / 1000000;
 8050a18:	4a21      	ldr	r2, [pc, #132]	; (8050aa0 <adis16470_channel_get+0xa8>)
 8050a1a:	2300      	movs	r3, #0
 8050a1c:	4630      	mov	r0, r6
 8050a1e:	4639      	mov	r1, r7
 8050a20:	f7ef fd3e 	bl	80404a0 <__aeabi_ldivmod>
    val->val2 = data % 1000000;
 8050a24:	4a1e      	ldr	r2, [pc, #120]	; (8050aa0 <adis16470_channel_get+0xa8>)
    val->val1 = data / 1000000;
 8050a26:	6020      	str	r0, [r4, #0]
    val->val2 = data % 1000000;
 8050a28:	2300      	movs	r3, #0
 8050a2a:	4630      	mov	r0, r6
 8050a2c:	4639      	mov	r1, r7
 8050a2e:	f7ef fd37 	bl	80404a0 <__aeabi_ldivmod>
        else if (chan == SENSOR_CHAN_PRIV_START + 3) store_value(val, data->delta_vel[0]);
        else if (chan == SENSOR_CHAN_PRIV_START + 4) store_value(val, data->delta_vel[1]);
        else if (chan == SENSOR_CHAN_PRIV_START + 5) store_value(val, data->delta_vel[2]);
        else                                         return -ENOTSUP;
    }
    return 0;
 8050a32:	2000      	movs	r0, #0
    val->val2 = data % 1000000;
 8050a34:	6062      	str	r2, [r4, #4]
}
 8050a36:	bdd0      	pop	{r4, r6, r7, pc}
    case SENSOR_CHAN_GYRO_Y:   store_value(val, data->gyro[1]); break;
 8050a38:	e9d3 6710 	ldrd	r6, r7, [r3, #64]	; 0x40
    val->val1 = data / 1000000;
 8050a3c:	e7ec      	b.n	8050a18 <adis16470_channel_get+0x20>
    case SENSOR_CHAN_GYRO_Z:   store_value(val, data->gyro[2]); break;
 8050a3e:	e9d3 6712 	ldrd	r6, r7, [r3, #72]	; 0x48
    val->val1 = data / 1000000;
 8050a42:	e7e9      	b.n	8050a18 <adis16470_channel_get+0x20>
    case SENSOR_CHAN_ACCEL_X:  store_value(val, data->accl[0]); break;
 8050a44:	e9d3 6714 	ldrd	r6, r7, [r3, #80]	; 0x50
    val->val1 = data / 1000000;
 8050a48:	e7e6      	b.n	8050a18 <adis16470_channel_get+0x20>
    case SENSOR_CHAN_ACCEL_Y:  store_value(val, data->accl[1]); break;
 8050a4a:	e9d3 6716 	ldrd	r6, r7, [r3, #88]	; 0x58
    val->val1 = data / 1000000;
 8050a4e:	e7e3      	b.n	8050a18 <adis16470_channel_get+0x20>
    case SENSOR_CHAN_ACCEL_Z:  store_value(val, data->accl[2]); break;
 8050a50:	e9d3 6718 	ldrd	r6, r7, [r3, #96]	; 0x60
    val->val1 = data / 1000000;
 8050a54:	e7e0      	b.n	8050a18 <adis16470_channel_get+0x20>
    case SENSOR_CHAN_DIE_TEMP: store_value(val, data->temp);    break;
 8050a56:	e9d3 671a 	ldrd	r6, r7, [r3, #104]	; 0x68
    val->val1 = data / 1000000;
 8050a5a:	e7dd      	b.n	8050a18 <adis16470_channel_get+0x20>
        if      (chan == SENSOR_CHAN_PRIV_START)     store_value(val, data->delta_ang[0]);
 8050a5c:	293a      	cmp	r1, #58	; 0x3a
 8050a5e:	d102      	bne.n	8050a66 <adis16470_channel_get+0x6e>
 8050a60:	e9d3 671c 	ldrd	r6, r7, [r3, #112]	; 0x70
    val->val1 = data / 1000000;
 8050a64:	e7d8      	b.n	8050a18 <adis16470_channel_get+0x20>
        else if (chan == SENSOR_CHAN_PRIV_START + 1) store_value(val, data->delta_ang[1]);
 8050a66:	293b      	cmp	r1, #59	; 0x3b
 8050a68:	d102      	bne.n	8050a70 <adis16470_channel_get+0x78>
 8050a6a:	e9d3 671e 	ldrd	r6, r7, [r3, #120]	; 0x78
    val->val1 = data / 1000000;
 8050a6e:	e7d3      	b.n	8050a18 <adis16470_channel_get+0x20>
        else if (chan == SENSOR_CHAN_PRIV_START + 2) store_value(val, data->delta_ang[2]);
 8050a70:	293c      	cmp	r1, #60	; 0x3c
 8050a72:	d102      	bne.n	8050a7a <adis16470_channel_get+0x82>
 8050a74:	e9d3 6720 	ldrd	r6, r7, [r3, #128]	; 0x80
    val->val1 = data / 1000000;
 8050a78:	e7ce      	b.n	8050a18 <adis16470_channel_get+0x20>
        else if (chan == SENSOR_CHAN_PRIV_START + 3) store_value(val, data->delta_vel[0]);
 8050a7a:	293d      	cmp	r1, #61	; 0x3d
 8050a7c:	d102      	bne.n	8050a84 <adis16470_channel_get+0x8c>
 8050a7e:	e9d3 6722 	ldrd	r6, r7, [r3, #136]	; 0x88
    val->val1 = data / 1000000;
 8050a82:	e7c9      	b.n	8050a18 <adis16470_channel_get+0x20>
        else if (chan == SENSOR_CHAN_PRIV_START + 4) store_value(val, data->delta_vel[1]);
 8050a84:	293e      	cmp	r1, #62	; 0x3e
 8050a86:	d102      	bne.n	8050a8e <adis16470_channel_get+0x96>
 8050a88:	e9d3 6724 	ldrd	r6, r7, [r3, #144]	; 0x90
    val->val1 = data / 1000000;
 8050a8c:	e7c4      	b.n	8050a18 <adis16470_channel_get+0x20>
        else if (chan == SENSOR_CHAN_PRIV_START + 5) store_value(val, data->delta_vel[2]);
 8050a8e:	293f      	cmp	r1, #63	; 0x3f
 8050a90:	d102      	bne.n	8050a98 <adis16470_channel_get+0xa0>
 8050a92:	e9d3 6726 	ldrd	r6, r7, [r3, #152]	; 0x98
 8050a96:	e7bf      	b.n	8050a18 <adis16470_channel_get+0x20>
        else                                         return -ENOTSUP;
 8050a98:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8050a9c:	e7cb      	b.n	8050a36 <adis16470_channel_get+0x3e>
 8050a9e:	bf00      	nop
 8050aa0:	000f4240 	.word	0x000f4240

08050aa4 <adis16470_reg_read>:
{
 8050aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8050aa6:	b087      	sub	sp, #28
    uint16_t buffer = (reg & 0x7f) << 8;
 8050aa8:	0209      	lsls	r1, r1, #8
{
 8050aaa:	4616      	mov	r6, r2
    int status = spi_write(data->spi, &data->spi_cfg, &bufset);
 8050aac:	4605      	mov	r5, r0
    spibuf.buf = &buffer;
 8050aae:	f10d 0306 	add.w	r3, sp, #6
    uint16_t buffer = (reg & 0x7f) << 8;
 8050ab2:	f401 41fe 	and.w	r1, r1, #32512	; 0x7f00
    bufset.buffers = &spibuf;
 8050ab6:	aa02      	add	r2, sp, #8
{
 8050ab8:	4607      	mov	r7, r0
    spibuf.buf = &buffer;
 8050aba:	9302      	str	r3, [sp, #8]
    spibuf.len = 1;
 8050abc:	2301      	movs	r3, #1
    int status = spi_write(data->spi, &data->spi_cfg, &bufset);
 8050abe:	f855 0b08 	ldr.w	r0, [r5], #8
    uint16_t buffer = (reg & 0x7f) << 8;
 8050ac2:	f8ad 1006 	strh.w	r1, [sp, #6]
    spibuf.len = 1;
 8050ac6:	9303      	str	r3, [sp, #12]
    bufset.count = 1;
 8050ac8:	e9cd 2304 	strd	r2, r3, [sp, #16]
		union { uintptr_t x; const struct spi_buf_set * val; } parm3 = { .val = rx_bufs };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_SPI_TRANSCEIVE);
	}
#endif
	compiler_barrier();
	return z_impl_spi_transceive(dev, config, tx_bufs, rx_bufs);
 8050acc:	2300      	movs	r3, #0
 8050ace:	aa04      	add	r2, sp, #16
 8050ad0:	4629      	mov	r1, r5
 8050ad2:	f009 fb34 	bl	805a13e <z_impl_spi_transceive>
    if (status) {
 8050ad6:	4604      	mov	r4, r0
 8050ad8:	b198      	cbz	r0, 8050b02 <adis16470_reg_read+0x5e>
        LOG_ERR("SPI write error %d", status);
 8050ada:	4b19      	ldr	r3, [pc, #100]	; (8050b40 <adis16470_reg_read+0x9c>)
 8050adc:	681a      	ldr	r2, [r3, #0]
 8050ade:	0752      	lsls	r2, r2, #29
 8050ae0:	d104      	bne.n	8050aec <adis16470_reg_read+0x48>
        return -1;
 8050ae2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8050ae6:	4620      	mov	r0, r4
 8050ae8:	b007      	add	sp, #28
 8050aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8050aec:	4a15      	ldr	r2, [pc, #84]	; (8050b44 <adis16470_reg_read+0xa0>)
        LOG_ERR("SPI write error %d", status);
 8050aee:	4601      	mov	r1, r0
 8050af0:	4815      	ldr	r0, [pc, #84]	; (8050b48 <adis16470_reg_read+0xa4>)
 8050af2:	1a9a      	subs	r2, r3, r2
 8050af4:	0892      	lsrs	r2, r2, #2
 8050af6:	0192      	lsls	r2, r2, #6
 8050af8:	f042 0201 	orr.w	r2, r2, #1
        LOG_ERR("SPI read error %d", status);
 8050afc:	f005 fa82 	bl	8056004 <log_1>
 8050b00:	e7ef      	b.n	8050ae2 <adis16470_reg_read+0x3e>
    k_usleep(20);
 8050b02:	f009 fb27 	bl	805a154 <k_usleep.constprop.0.isra.0>
    status = spi_read(data->spi, &data->spi_cfg, &bufset);
 8050b06:	6838      	ldr	r0, [r7, #0]
    buffer = 0;
 8050b08:	f8ad 4006 	strh.w	r4, [sp, #6]
 8050b0c:	4622      	mov	r2, r4
 8050b0e:	ab04      	add	r3, sp, #16
 8050b10:	4629      	mov	r1, r5
 8050b12:	f009 fb14 	bl	805a13e <z_impl_spi_transceive>
    if (status) {
 8050b16:	4604      	mov	r4, r0
 8050b18:	b160      	cbz	r0, 8050b34 <adis16470_reg_read+0x90>
        LOG_ERR("SPI read error %d", status);
 8050b1a:	4a09      	ldr	r2, [pc, #36]	; (8050b40 <adis16470_reg_read+0x9c>)
 8050b1c:	6813      	ldr	r3, [r2, #0]
 8050b1e:	075b      	lsls	r3, r3, #29
 8050b20:	d0df      	beq.n	8050ae2 <adis16470_reg_read+0x3e>
 8050b22:	4b08      	ldr	r3, [pc, #32]	; (8050b44 <adis16470_reg_read+0xa0>)
 8050b24:	4601      	mov	r1, r0
 8050b26:	4809      	ldr	r0, [pc, #36]	; (8050b4c <adis16470_reg_read+0xa8>)
 8050b28:	1ad2      	subs	r2, r2, r3
 8050b2a:	0892      	lsrs	r2, r2, #2
 8050b2c:	0192      	lsls	r2, r2, #6
 8050b2e:	f042 0201 	orr.w	r2, r2, #1
 8050b32:	e7e3      	b.n	8050afc <adis16470_reg_read+0x58>
    k_usleep(20);
 8050b34:	f009 fb0e 	bl	805a154 <k_usleep.constprop.0.isra.0>
    *value = buffer;
 8050b38:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8050b3c:	8033      	strh	r3, [r6, #0]
    return 0;
 8050b3e:	e7d2      	b.n	8050ae6 <adis16470_reg_read+0x42>
 8050b40:	200208c8 	.word	0x200208c8
 8050b44:	200208c8 	.word	0x200208c8
 8050b48:	080630a1 	.word	0x080630a1
 8050b4c:	080630b4 	.word	0x080630b4

08050b50 <adis16470_sample_fetch>:
{
 8050b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct adis16470_data *data = dev->data;
 8050b54:	6906      	ldr	r6, [r0, #16]
{
 8050b56:	b085      	sub	sp, #20
	return z_impl_k_sem_take(sem, timeout);
 8050b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8050b5c:	2300      	movs	r3, #0
 8050b5e:	f106 0020 	add.w	r0, r6, #32
 8050b62:	f000 ffe5 	bl	8051b30 <z_impl_k_sem_take>
    if (k_sem_take(&data->cb.sem, K_MSEC(100)) != 0)
 8050b66:	4604      	mov	r4, r0
 8050b68:	2800      	cmp	r0, #0
 8050b6a:	f040 8084 	bne.w	8050c76 <adis16470_sample_fetch+0x126>
 8050b6e:	f106 0350 	add.w	r3, r6, #80	; 0x50
 8050b72:	f8df b118 	ldr.w	fp, [pc, #280]	; 8050c8c <adis16470_sample_fetch+0x13c>
 8050b76:	f106 0538 	add.w	r5, r6, #56	; 0x38
 8050b7a:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8050c90 <adis16470_sample_fetch+0x140>
 8050b7e:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8050c94 <adis16470_sample_fetch+0x144>
 8050b82:	f8df a114 	ldr.w	sl, [pc, #276]	; 8050c98 <adis16470_sample_fetch+0x148>
    *value = (int64_t)v * SENSOR_PI * 2160LL / 2147483648LL / 180LL;
 8050b86:	4f3d      	ldr	r7, [pc, #244]	; (8050c7c <adis16470_sample_fetch+0x12c>)
 8050b88:	9301      	str	r3, [sp, #4]
        int status = adis16470_sample_fetch_gyro(data, gyro_reg[i], &data->gyro[i]);
 8050b8a:	f81b 3b01 	ldrb.w	r3, [fp], #1
    int status = adis16470_reg_read_pair(data, r, &v);
 8050b8e:	a902      	add	r1, sp, #8
 8050b90:	4630      	mov	r0, r6
    uint8_t r[2] = {reg - 2, reg};
 8050b92:	1e9a      	subs	r2, r3, #2
 8050b94:	f88d 3009 	strb.w	r3, [sp, #9]
 8050b98:	f88d 2008 	strb.w	r2, [sp, #8]
    int status = adis16470_reg_read_pair(data, r, &v);
 8050b9c:	aa03      	add	r2, sp, #12
 8050b9e:	f009 fae1 	bl	805a164 <adis16470_reg_read_pair>
    if (status < 0)
 8050ba2:	2800      	cmp	r0, #0
 8050ba4:	db18      	blt.n	8050bd8 <adis16470_sample_fetch+0x88>
    *value = (int64_t)v * SENSOR_PI / 180LL / 10LL / 65536LL;
 8050ba6:	9903      	ldr	r1, [sp, #12]
 8050ba8:	f04f 62e1 	mov.w	r2, #117964800	; 0x7080000
 8050bac:	4834      	ldr	r0, [pc, #208]	; (8050c80 <adis16470_sample_fetch+0x130>)
 8050bae:	2300      	movs	r3, #0
 8050bb0:	fb81 0100 	smull	r0, r1, r1, r0
 8050bb4:	f7ef fc74 	bl	80404a0 <__aeabi_ldivmod>
 8050bb8:	e8e5 0102 	strd	r0, r1, [r5], #8
            status = adis16470_sample_fetch_accel(data, accl_reg[i], &data->accl[i]);
 8050bbc:	f81a 3b01 	ldrb.w	r3, [sl], #1
    int status = adis16470_reg_read_pair(data, r, &v);
 8050bc0:	a902      	add	r1, sp, #8
 8050bc2:	4630      	mov	r0, r6
    uint8_t r[2] = {reg - 2, reg};
 8050bc4:	1e9a      	subs	r2, r3, #2
 8050bc6:	f88d 3009 	strb.w	r3, [sp, #9]
 8050bca:	f88d 2008 	strb.w	r2, [sp, #8]
    int status = adis16470_reg_read_pair(data, r, &v);
 8050bce:	aa03      	add	r2, sp, #12
 8050bd0:	f009 fac8 	bl	805a164 <adis16470_reg_read_pair>
    if (status < 0)
 8050bd4:	2800      	cmp	r0, #0
 8050bd6:	da01      	bge.n	8050bdc <adis16470_sample_fetch+0x8c>
    int status = adis16470_reg_read_pair(data, r, &v);
 8050bd8:	4604      	mov	r4, r0
 8050bda:	e048      	b.n	8050c6e <adis16470_sample_fetch+0x11e>
    *value = (int64_t)v * SENSOR_G / 800LL / 65536LL;
 8050bdc:	9903      	ldr	r1, [sp, #12]
 8050bde:	f04f 7248 	mov.w	r2, #52428800	; 0x3200000
 8050be2:	4828      	ldr	r0, [pc, #160]	; (8050c84 <adis16470_sample_fetch+0x134>)
 8050be4:	2300      	movs	r3, #0
 8050be6:	fb81 0100 	smull	r0, r1, r1, r0
 8050bea:	f7ef fc59 	bl	80404a0 <__aeabi_ldivmod>
 8050bee:	e9c5 0104 	strd	r0, r1, [r5, #16]
            status = adis16470_sample_fetch_delta_ang(data, ang_reg[i], &data->delta_ang[i]);
 8050bf2:	f819 3b01 	ldrb.w	r3, [r9], #1
    int status = adis16470_reg_read_pair(data, r, &v);
 8050bf6:	a902      	add	r1, sp, #8
 8050bf8:	4630      	mov	r0, r6
    uint8_t r[2] = {reg - 2, reg};
 8050bfa:	1e9a      	subs	r2, r3, #2
 8050bfc:	f88d 3009 	strb.w	r3, [sp, #9]
 8050c00:	f88d 2008 	strb.w	r2, [sp, #8]
    int status = adis16470_reg_read_pair(data, r, &v);
 8050c04:	aa03      	add	r2, sp, #12
 8050c06:	f009 faad 	bl	805a164 <adis16470_reg_read_pair>
    if (status < 0)
 8050c0a:	2800      	cmp	r0, #0
 8050c0c:	dbe4      	blt.n	8050bd8 <adis16470_sample_fetch+0x88>
    *value = (int64_t)v * SENSOR_PI * 2160LL / 2147483648LL / 180LL;
 8050c0e:	9803      	ldr	r0, [sp, #12]
 8050c10:	2200      	movs	r2, #0
 8050c12:	235a      	movs	r3, #90	; 0x5a
 8050c14:	ea4f 7ce0 	mov.w	ip, r0, asr #31
 8050c18:	fb07 0c0c 	mla	ip, r7, ip, r0
 8050c1c:	fba0 0107 	umull	r0, r1, r0, r7
 8050c20:	4461      	add	r1, ip
 8050c22:	f7ef fc3d 	bl	80404a0 <__aeabi_ldivmod>
 8050c26:	e9c5 010c 	strd	r0, r1, [r5, #48]	; 0x30
            status = adis16470_sample_fetch_delta_vel(data, vel_reg[i], &data->delta_vel[i]);
 8050c2a:	f818 3b01 	ldrb.w	r3, [r8], #1
    int status = adis16470_reg_read_pair(data, r, &v);
 8050c2e:	a902      	add	r1, sp, #8
 8050c30:	4630      	mov	r0, r6
    uint8_t r[2] = {reg - 2, reg};
 8050c32:	1e9a      	subs	r2, r3, #2
 8050c34:	f88d 3009 	strb.w	r3, [sp, #9]
 8050c38:	f88d 2008 	strb.w	r2, [sp, #8]
    int status = adis16470_reg_read_pair(data, r, &v);
 8050c3c:	aa03      	add	r2, sp, #12
 8050c3e:	f009 fa91 	bl	805a164 <adis16470_reg_read_pair>
    if (status < 0)
 8050c42:	2800      	cmp	r0, #0
 8050c44:	dbc8      	blt.n	8050bd8 <adis16470_sample_fetch+0x88>
    *value = (int64_t)v * 400LL * 1000000LL / 2147483648LL;
 8050c46:	9b03      	ldr	r3, [sp, #12]
 8050c48:	4a0f      	ldr	r2, [pc, #60]	; (8050c88 <adis16470_sample_fetch+0x138>)
 8050c4a:	fb83 3202 	smull	r3, r2, r3, r2
 8050c4e:	2a00      	cmp	r2, #0
 8050c50:	da04      	bge.n	8050c5c <adis16470_sample_fetch+0x10c>
 8050c52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8050c56:	185b      	adds	r3, r3, r1
 8050c58:	f142 0200 	adc.w	r2, r2, #0
 8050c5c:	0fdb      	lsrs	r3, r3, #31
 8050c5e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8050c62:	17d2      	asrs	r2, r2, #31
 8050c64:	e9c5 3212 	strd	r3, r2, [r5, #72]	; 0x48
    for (int i = 0; i < 3; ++i) {
 8050c68:	9b01      	ldr	r3, [sp, #4]
 8050c6a:	42ab      	cmp	r3, r5
 8050c6c:	d18d      	bne.n	8050b8a <adis16470_sample_fetch+0x3a>
}
 8050c6e:	4620      	mov	r0, r4
 8050c70:	b005      	add	sp, #20
 8050c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -1;
 8050c76:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8050c7a:	e7f8      	b.n	8050c6e <adis16470_sample_fetch+0x11e>
 8050c7c:	9477ae80 	.word	0x9477ae80
 8050c80:	002fefd8 	.word	0x002fefd8
 8050c84:	0095a33a 	.word	0x0095a33a
 8050c88:	17d78400 	.word	0x17d78400
 8050c8c:	08063173 	.word	0x08063173
 8050c90:	08063176 	.word	0x08063176
 8050c94:	08063170 	.word	0x08063170
 8050c98:	0806316d 	.word	0x0806316d

08050c9c <adis16470_reg_write>:
{
 8050c9c:	b570      	push	{r4, r5, r6, lr}
    buffer = ((0x80 |   (reg & 0x7f)) << 8) | (value & 0xff);
 8050c9e:	f041 0380 	orr.w	r3, r1, #128	; 0x80
{
 8050ca2:	b088      	sub	sp, #32
    int status = spi_write(data->spi, &data->spi_cfg, &bufset);
 8050ca4:	4605      	mov	r5, r0
{
 8050ca6:	4606      	mov	r6, r0
    buffer = ((0x80 |   (reg & 0x7f)) << 8) | (value & 0xff);
 8050ca8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    spibuf.buf = &buffer;
 8050cac:	f10d 030e 	add.w	r3, sp, #14
{
 8050cb0:	460c      	mov	r4, r1
    int status = spi_write(data->spi, &data->spi_cfg, &bufset);
 8050cb2:	f855 0b08 	ldr.w	r0, [r5], #8
    buffer = ((0x80 |   (reg & 0x7f)) << 8) | (value & 0xff);
 8050cb6:	f8ad 200e 	strh.w	r2, [sp, #14]
    bufset.buffers = &spibuf;
 8050cba:	aa04      	add	r2, sp, #16
    spibuf.buf = &buffer;
 8050cbc:	9304      	str	r3, [sp, #16]
    spibuf.len = 1;
 8050cbe:	2301      	movs	r3, #1
 8050cc0:	9305      	str	r3, [sp, #20]
    bufset.count = 1;
 8050cc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8050cc6:	2300      	movs	r3, #0
 8050cc8:	aa06      	add	r2, sp, #24
 8050cca:	4629      	mov	r1, r5
 8050ccc:	f009 fa37 	bl	805a13e <z_impl_spi_transceive>
    if (status) {
 8050cd0:	b198      	cbz	r0, 8050cfa <adis16470_reg_write+0x5e>
        LOG_ERR("SPI write error %d", status);
 8050cd2:	4a1a      	ldr	r2, [pc, #104]	; (8050d3c <adis16470_reg_write+0xa0>)
 8050cd4:	6811      	ldr	r1, [r2, #0]
 8050cd6:	0749      	lsls	r1, r1, #29
 8050cd8:	d104      	bne.n	8050ce4 <adis16470_reg_write+0x48>
        return -1;
 8050cda:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8050cde:	4620      	mov	r0, r4
 8050ce0:	b008      	add	sp, #32
 8050ce2:	bd70      	pop	{r4, r5, r6, pc}
 8050ce4:	4916      	ldr	r1, [pc, #88]	; (8050d40 <adis16470_reg_write+0xa4>)
 8050ce6:	1a52      	subs	r2, r2, r1
        LOG_ERR("SPI write error %d", status);
 8050ce8:	4601      	mov	r1, r0
 8050cea:	0892      	lsrs	r2, r2, #2
 8050cec:	0192      	lsls	r2, r2, #6
 8050cee:	f042 0201 	orr.w	r2, r2, #1
        LOG_ERR("SPI write error %d", status);
 8050cf2:	4814      	ldr	r0, [pc, #80]	; (8050d44 <adis16470_reg_write+0xa8>)
 8050cf4:	f005 f986 	bl	8056004 <log_1>
 8050cf8:	e7ef      	b.n	8050cda <adis16470_reg_write+0x3e>
    buffer = ((0x80 | (++reg & 0x7f)) << 8) | ((value >> 8) & 0xff);
 8050cfa:	3401      	adds	r4, #1
 8050cfc:	9001      	str	r0, [sp, #4]
    k_usleep(20);
 8050cfe:	f009 fa29 	bl	805a154 <k_usleep.constprop.0.isra.0>
    status = spi_write(data->spi, &data->spi_cfg, &bufset);
 8050d02:	6830      	ldr	r0, [r6, #0]
    buffer = ((0x80 | (++reg & 0x7f)) << 8) | ((value >> 8) & 0xff);
 8050d04:	f064 047f 	orn	r4, r4, #127	; 0x7f
 8050d08:	0224      	lsls	r4, r4, #8
 8050d0a:	f8ad 400e 	strh.w	r4, [sp, #14]
 8050d0e:	9b01      	ldr	r3, [sp, #4]
 8050d10:	aa06      	add	r2, sp, #24
 8050d12:	4629      	mov	r1, r5
 8050d14:	f009 fa13 	bl	805a13e <z_impl_spi_transceive>
    if (status) {
 8050d18:	4604      	mov	r4, r0
 8050d1a:	b158      	cbz	r0, 8050d34 <adis16470_reg_write+0x98>
        LOG_ERR("SPI write error %d", status);
 8050d1c:	4a07      	ldr	r2, [pc, #28]	; (8050d3c <adis16470_reg_write+0xa0>)
 8050d1e:	6813      	ldr	r3, [r2, #0]
 8050d20:	075b      	lsls	r3, r3, #29
 8050d22:	d0da      	beq.n	8050cda <adis16470_reg_write+0x3e>
 8050d24:	4b06      	ldr	r3, [pc, #24]	; (8050d40 <adis16470_reg_write+0xa4>)
 8050d26:	4601      	mov	r1, r0
 8050d28:	1ad2      	subs	r2, r2, r3
 8050d2a:	0892      	lsrs	r2, r2, #2
 8050d2c:	0192      	lsls	r2, r2, #6
 8050d2e:	f042 0201 	orr.w	r2, r2, #1
 8050d32:	e7de      	b.n	8050cf2 <adis16470_reg_write+0x56>
    k_usleep(20);
 8050d34:	f009 fa0e 	bl	805a154 <k_usleep.constprop.0.isra.0>
    return 0;
 8050d38:	e7d1      	b.n	8050cde <adis16470_reg_write+0x42>
 8050d3a:	bf00      	nop
 8050d3c:	200208c8 	.word	0x200208c8
 8050d40:	200208c8 	.word	0x200208c8
 8050d44:	080630a1 	.word	0x080630a1

08050d48 <adis16470_init>:
{
 8050d48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8050d4a:	4604      	mov	r4, r0
    k_msleep(300);
 8050d4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8050d50:	f009 fa03 	bl	805a15a <k_msleep.isra.0>
    const struct adis16470_config *config = dev->config;
 8050d54:	6865      	ldr	r5, [r4, #4]
    struct adis16470_data *data = dev->data;
 8050d56:	6924      	ldr	r4, [r4, #16]
    data->spi = device_get_binding(config->spi_name);
 8050d58:	6828      	ldr	r0, [r5, #0]
 8050d5a:	f000 f9cf 	bl	80510fc <z_impl_device_get_binding>
 8050d5e:	6020      	str	r0, [r4, #0]
    if (data->spi == NULL) {
 8050d60:	b918      	cbnz	r0, 8050d6a <adis16470_init+0x22>
        return -EINVAL;
 8050d62:	f06f 0015 	mvn.w	r0, #21
}
 8050d66:	b002      	add	sp, #8
 8050d68:	bd70      	pop	{r4, r5, r6, pc}
 8050d6a:	4858      	ldr	r0, [pc, #352]	; (8050ecc <adis16470_init+0x184>)
 8050d6c:	f000 f9c6 	bl	80510fc <z_impl_device_get_binding>
    data->dr = device_get_binding("GPIOF");
 8050d70:	6060      	str	r0, [r4, #4]
    if (data->dr == NULL) {
 8050d72:	2800      	cmp	r0, #0
 8050d74:	d0f5      	beq.n	8050d62 <adis16470_init+0x1a>
	struct gpio_driver_data *data =
 8050d76:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
 8050d78:	6881      	ldr	r1, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8050d7a:	6813      	ldr	r3, [r2, #0]
 8050d7c:	f023 0304 	bic.w	r3, r3, #4
 8050d80:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
 8050d82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8050d86:	680b      	ldr	r3, [r1, #0]
 8050d88:	2102      	movs	r1, #2
 8050d8a:	4798      	blx	r3
    gpio_pin_interrupt_configure(data->dr, 2, GPIO_INT_EDGE_RISING);
 8050d8c:	6860      	ldr	r0, [r4, #4]
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8050d8e:	6883      	ldr	r3, [r0, #8]
 8050d90:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 8050d94:	2102      	movs	r1, #2
 8050d96:	699e      	ldr	r6, [r3, #24]
 8050d98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8050d9c:	47b0      	blx	r6
	callback->handler = handler;
 8050d9e:	4b4c      	ldr	r3, [pc, #304]	; (8050ed0 <adis16470_init+0x188>)
    gpio_init_callback(&data->cb.cb, adis16470_dr, BIT(2));
 8050da0:	f104 0614 	add.w	r6, r4, #20
 8050da4:	61a3      	str	r3, [r4, #24]
	callback->pin_mask = pin_mask;
 8050da6:	2304      	movs	r3, #4
 8050da8:	61e3      	str	r3, [r4, #28]
	return z_impl_k_sem_init(sem, initial_count, limit);
 8050daa:	2201      	movs	r2, #1
 8050dac:	2100      	movs	r1, #0
 8050dae:	f104 0020 	add.w	r0, r4, #32
 8050db2:	f009 fb2b 	bl	805a40c <z_impl_k_sem_init>
    gpio_add_callback(data->dr, &data->cb.cb);
 8050db6:	6860      	ldr	r0, [r4, #4]
	if (api->manage_callback == NULL) {
 8050db8:	6883      	ldr	r3, [r0, #8]
 8050dba:	69db      	ldr	r3, [r3, #28]
 8050dbc:	b113      	cbz	r3, 8050dc4 <adis16470_init+0x7c>
	return api->manage_callback(port, callback, true);
 8050dbe:	2201      	movs	r2, #1
 8050dc0:	4631      	mov	r1, r6
 8050dc2:	4798      	blx	r3
    data->spi_cfg.operation =
 8050dc4:	f240 2306 	movw	r3, #518	; 0x206
    int result = adis16470_reg_write(data, ADIS16470_REG_GLOB_CMD, 0x0080);
 8050dc8:	2280      	movs	r2, #128	; 0x80
 8050dca:	2168      	movs	r1, #104	; 0x68
 8050dcc:	4620      	mov	r0, r4
    data->spi_cfg.operation =
 8050dce:	81a3      	strh	r3, [r4, #12]
    data->spi_cfg.frequency = config->spi_max_frequency;
 8050dd0:	686b      	ldr	r3, [r5, #4]
 8050dd2:	60a3      	str	r3, [r4, #8]
    data->spi_cfg.slave = config->spi_slave;
 8050dd4:	892b      	ldrh	r3, [r5, #8]
 8050dd6:	81e3      	strh	r3, [r4, #14]
    int result = adis16470_reg_write(data, ADIS16470_REG_GLOB_CMD, 0x0080);
 8050dd8:	f7ff ff60 	bl	8050c9c <adis16470_reg_write>
 8050ddc:	4605      	mov	r5, r0
    k_msleep(300);
 8050dde:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8050de2:	f009 f9ba 	bl	805a15a <k_msleep.isra.0>
    if (err) {
 8050de6:	b18d      	cbz	r5, 8050e0c <adis16470_init+0xc4>
        LOG_ERR("adis16470_software_reset failed, error %d\n", err);
 8050de8:	4a3a      	ldr	r2, [pc, #232]	; (8050ed4 <adis16470_init+0x18c>)
 8050dea:	6813      	ldr	r3, [r2, #0]
 8050dec:	075e      	lsls	r6, r3, #29
 8050dee:	d102      	bne.n	8050df6 <adis16470_init+0xae>
        return -ENODEV;
 8050df0:	f06f 0012 	mvn.w	r0, #18
 8050df4:	e7b7      	b.n	8050d66 <adis16470_init+0x1e>
 8050df6:	4b38      	ldr	r3, [pc, #224]	; (8050ed8 <adis16470_init+0x190>)
        LOG_ERR("adis16470_software_reset failed, error %d\n", err);
 8050df8:	4629      	mov	r1, r5
 8050dfa:	4838      	ldr	r0, [pc, #224]	; (8050edc <adis16470_init+0x194>)
 8050dfc:	1ad2      	subs	r2, r2, r3
 8050dfe:	0892      	lsrs	r2, r2, #2
 8050e00:	0192      	lsls	r2, r2, #6
 8050e02:	f042 0201 	orr.w	r2, r2, #1
        LOG_ERR("adis16470_configure failed, error %d\n", err);
 8050e06:	f005 f8fd 	bl	8056004 <log_1>
 8050e0a:	e7f1      	b.n	8050df0 <adis16470_init+0xa8>
    int result = adis16470_reg_write(data, ADIS16470_REG_GLOB_CMD, 0x0004);
 8050e0c:	2204      	movs	r2, #4
 8050e0e:	2168      	movs	r1, #104	; 0x68
 8050e10:	4620      	mov	r0, r4
 8050e12:	f7ff ff43 	bl	8050c9c <adis16470_reg_write>
    if (result != 0)
 8050e16:	b990      	cbnz	r0, 8050e3e <adis16470_init+0xf6>
    k_msleep(14);
 8050e18:	200e      	movs	r0, #14
 8050e1a:	f009 f99e 	bl	805a15a <k_msleep.isra.0>
    result = adis16470_reg_read(data, ADIS16470_REG_DIAG_STAT, &value);
 8050e1e:	f10d 0206 	add.w	r2, sp, #6
 8050e22:	2102      	movs	r1, #2
 8050e24:	4620      	mov	r0, r4
 8050e26:	f7ff fe3d 	bl	8050aa4 <adis16470_reg_read>
    if (result != 0)
 8050e2a:	b940      	cbnz	r0, 8050e3e <adis16470_init+0xf6>
    if (value != 0) {
 8050e2c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8050e30:	b1e1      	cbz	r1, 8050e6c <adis16470_init+0x124>
        LOG_ERR("DIAG_STAT error %u", value);
 8050e32:	4a28      	ldr	r2, [pc, #160]	; (8050ed4 <adis16470_init+0x18c>)
 8050e34:	6813      	ldr	r3, [r2, #0]
 8050e36:	075c      	lsls	r4, r3, #29
 8050e38:	d10e      	bne.n	8050e58 <adis16470_init+0x110>
        return -1;
 8050e3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        LOG_ERR("adis16470_self_test failed, error %d\n", err);
 8050e3e:	4a25      	ldr	r2, [pc, #148]	; (8050ed4 <adis16470_init+0x18c>)
 8050e40:	6813      	ldr	r3, [r2, #0]
 8050e42:	0759      	lsls	r1, r3, #29
 8050e44:	d0d4      	beq.n	8050df0 <adis16470_init+0xa8>
 8050e46:	4b24      	ldr	r3, [pc, #144]	; (8050ed8 <adis16470_init+0x190>)
 8050e48:	4601      	mov	r1, r0
 8050e4a:	4825      	ldr	r0, [pc, #148]	; (8050ee0 <adis16470_init+0x198>)
 8050e4c:	1ad2      	subs	r2, r2, r3
 8050e4e:	0892      	lsrs	r2, r2, #2
 8050e50:	0192      	lsls	r2, r2, #6
 8050e52:	f042 0201 	orr.w	r2, r2, #1
 8050e56:	e7d6      	b.n	8050e06 <adis16470_init+0xbe>
 8050e58:	4b1f      	ldr	r3, [pc, #124]	; (8050ed8 <adis16470_init+0x190>)
        LOG_ERR("DIAG_STAT error %u", value);
 8050e5a:	4822      	ldr	r0, [pc, #136]	; (8050ee4 <adis16470_init+0x19c>)
 8050e5c:	1ad2      	subs	r2, r2, r3
 8050e5e:	0892      	lsrs	r2, r2, #2
 8050e60:	0192      	lsls	r2, r2, #6
 8050e62:	f042 0201 	orr.w	r2, r2, #1
        LOG_ERR("PROD_ID error %04x", value);
 8050e66:	f005 f8cd 	bl	8056004 <log_1>
 8050e6a:	e7e6      	b.n	8050e3a <adis16470_init+0xf2>
    result = adis16470_reg_read(data, ADIS16470_REG_PROD_ID, &value);
 8050e6c:	f10d 0206 	add.w	r2, sp, #6
 8050e70:	2172      	movs	r1, #114	; 0x72
 8050e72:	4620      	mov	r0, r4
 8050e74:	f7ff fe16 	bl	8050aa4 <adis16470_reg_read>
    if (result != 0)
 8050e78:	2800      	cmp	r0, #0
 8050e7a:	d1e0      	bne.n	8050e3e <adis16470_init+0xf6>
    if (value != 0x4056) {
 8050e7c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8050e80:	f244 0356 	movw	r3, #16470	; 0x4056
 8050e84:	4299      	cmp	r1, r3
 8050e86:	d00b      	beq.n	8050ea0 <adis16470_init+0x158>
        LOG_ERR("PROD_ID error %04x", value);
 8050e88:	4a12      	ldr	r2, [pc, #72]	; (8050ed4 <adis16470_init+0x18c>)
 8050e8a:	6813      	ldr	r3, [r2, #0]
 8050e8c:	0758      	lsls	r0, r3, #29
 8050e8e:	d0d4      	beq.n	8050e3a <adis16470_init+0xf2>
 8050e90:	4b11      	ldr	r3, [pc, #68]	; (8050ed8 <adis16470_init+0x190>)
 8050e92:	4815      	ldr	r0, [pc, #84]	; (8050ee8 <adis16470_init+0x1a0>)
 8050e94:	1ad2      	subs	r2, r2, r3
 8050e96:	0892      	lsrs	r2, r2, #2
 8050e98:	0192      	lsls	r2, r2, #6
 8050e9a:	f042 0201 	orr.w	r2, r2, #1
 8050e9e:	e7e2      	b.n	8050e66 <adis16470_init+0x11e>
    int result = adis16470_reg_write(data, ADIS16470_REG_DEC_RATE, value);
 8050ea0:	2227      	movs	r2, #39	; 0x27
 8050ea2:	2164      	movs	r1, #100	; 0x64
 8050ea4:	4620      	mov	r0, r4
 8050ea6:	f7ff fef9 	bl	8050c9c <adis16470_reg_write>
    if (result != 0)
 8050eaa:	2800      	cmp	r0, #0
 8050eac:	f43f af5b 	beq.w	8050d66 <adis16470_init+0x1e>
        LOG_ERR("adis16470_configure failed, error %d\n", err);
 8050eb0:	4a08      	ldr	r2, [pc, #32]	; (8050ed4 <adis16470_init+0x18c>)
 8050eb2:	6813      	ldr	r3, [r2, #0]
 8050eb4:	075b      	lsls	r3, r3, #29
 8050eb6:	d09b      	beq.n	8050df0 <adis16470_init+0xa8>
 8050eb8:	4b07      	ldr	r3, [pc, #28]	; (8050ed8 <adis16470_init+0x190>)
 8050eba:	4601      	mov	r1, r0
 8050ebc:	480b      	ldr	r0, [pc, #44]	; (8050eec <adis16470_init+0x1a4>)
 8050ebe:	1ad2      	subs	r2, r2, r3
 8050ec0:	0892      	lsrs	r2, r2, #2
 8050ec2:	0192      	lsls	r2, r2, #6
 8050ec4:	f042 0201 	orr.w	r2, r2, #1
 8050ec8:	e79d      	b.n	8050e06 <adis16470_init+0xbe>
 8050eca:	bf00      	nop
 8050ecc:	08061c0c 	.word	0x08061c0c
 8050ed0:	0805a14d 	.word	0x0805a14d
 8050ed4:	200208c8 	.word	0x200208c8
 8050ed8:	200208c8 	.word	0x200208c8
 8050edc:	080630c6 	.word	0x080630c6
 8050ee0:	08063117 	.word	0x08063117
 8050ee4:	080630f1 	.word	0x080630f1
 8050ee8:	08063104 	.word	0x08063104
 8050eec:	0806313d 	.word	0x0806313d

08050ef0 <maxbotix_sample_fetch>:

static int maxbotix_sample_fetch(const struct device *dev, enum sensor_channel chan)
{
    struct maxbotix_data *data = dev->data;
    const struct maxbotix_cfg *cfg  = dev->config;
    if (unlikely((SENSOR_CHAN_ALL != chan) && (SENSOR_CHAN_DISTANCE != chan)))
 8050ef0:	2939      	cmp	r1, #57	; 0x39
{
 8050ef2:	b570      	push	{r4, r5, r6, lr}
    struct maxbotix_data *data = dev->data;
 8050ef4:	6905      	ldr	r5, [r0, #16]
    const struct maxbotix_cfg *cfg  = dev->config;
 8050ef6:	6844      	ldr	r4, [r0, #4]
    if (unlikely((SENSOR_CHAN_ALL != chan) && (SENSOR_CHAN_DISTANCE != chan)))
 8050ef8:	d001      	beq.n	8050efe <maxbotix_sample_fetch+0xe>
 8050efa:	291a      	cmp	r1, #26
 8050efc:	d168      	bne.n	8050fd0 <maxbotix_sample_fetch+0xe0>
        return -ENOTSUP;
    gpio_add_callback(data->echo_dev, &data->cb_data.cb);
 8050efe:	68e8      	ldr	r0, [r5, #12]
 8050f00:	f105 0610 	add.w	r6, r5, #16
	if (api->manage_callback == NULL) {
 8050f04:	6883      	ldr	r3, [r0, #8]
 8050f06:	69db      	ldr	r3, [r3, #28]
 8050f08:	b113      	cbz	r3, 8050f10 <maxbotix_sample_fetch+0x20>
	return api->manage_callback(port, callback, true);
 8050f0a:	2201      	movs	r2, #1
 8050f0c:	4631      	mov	r1, r6
 8050f0e:	4798      	blx	r3
    data->cb_data.state = MAXBOTIX_STATE_RISING_EDGE;
 8050f10:	2201      	movs	r2, #1
    gpio_pin_set(data->trig_dev, cfg->trig_pin, 1);
 8050f12:	68a8      	ldr	r0, [r5, #8]
    data->cb_data.state = MAXBOTIX_STATE_RISING_EDGE;
 8050f14:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    gpio_pin_set(data->trig_dev, cfg->trig_pin, 1);
 8050f18:	7921      	ldrb	r1, [r4, #4]
 8050f1a:	f009 f98b 	bl	805a234 <gpio_pin_set.isra.0>
	z_impl_k_busy_wait(usec_to_wait);
 8050f1e:	2014      	movs	r0, #20
 8050f20:	f001 fba8 	bl	8052674 <z_impl_k_busy_wait>
    k_busy_wait(20);
    gpio_pin_set(data->trig_dev, cfg->trig_pin, 0);
 8050f24:	2200      	movs	r2, #0
 8050f26:	7921      	ldrb	r1, [r4, #4]
 8050f28:	68a8      	ldr	r0, [r5, #8]
 8050f2a:	f009 f983 	bl	805a234 <gpio_pin_set.isra.0>
	return z_impl_k_sem_take(sem, timeout);
 8050f2e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8050f32:	2300      	movs	r3, #0
 8050f34:	f105 001c 	add.w	r0, r5, #28
 8050f38:	f000 fdfa 	bl	8051b30 <z_impl_k_sem_take>
    if (k_sem_take(&data->cb_data.semaphore, K_MSEC(200)) || data->cb_data.state != MAXBOTIX_STATE_FINISHED) {
 8050f3c:	4604      	mov	r4, r0
 8050f3e:	b918      	cbnz	r0, 8050f48 <maxbotix_sample_fetch+0x58>
 8050f40:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8050f44:	2b03      	cmp	r3, #3
 8050f46:	d007      	beq.n	8050f58 <maxbotix_sample_fetch+0x68>
        LOG_DBG("No response from MAXBOTIX");
        gpio_remove_callback(data->echo_dev, &data->cb_data.cb);
        return -EIO;
 8050f48:	f06f 0404 	mvn.w	r4, #4
        gpio_remove_callback(data->echo_dev, &data->cb_data.cb);
 8050f4c:	4631      	mov	r1, r6
 8050f4e:	68e8      	ldr	r0, [r5, #12]
 8050f50:	f009 f946 	bl	805a1e0 <gpio_remove_callback.isra.0>
    if (count < count_max_us) {
        uint32_t sleep_to_next = (period_us - (measure_us + count)) / 1000;
        k_msleep(sleep_to_next);
    }
    return result;
}
 8050f54:	4620      	mov	r0, r4
 8050f56:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t count = data->cb_data.end_time - data->cb_data.start_time;
 8050f58:	e9d5 030e 	ldrd	r0, r3, [r5, #56]	; 0x38
 8050f5c:	1a1b      	subs	r3, r3, r0
		t += off;
 8050f5e:	f113 006c 	adds.w	r0, r3, #108	; 0x6c
		if (result32 && (t < BIT64(32))) {
 8050f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		t += off;
 8050f66:	f144 0100 	adc.w	r1, r4, #0
		if (result32 && (t < BIT64(32))) {
 8050f6a:	4283      	cmp	r3, r0
 8050f6c:	eb74 0301 	sbcs.w	r3, r4, r1
 8050f70:	d31e      	bcc.n	8050fb0 <maxbotix_sample_fetch+0xc0>
			return ((uint32_t)t) / (from_hz / to_hz);
 8050f72:	21d8      	movs	r1, #216	; 0xd8
 8050f74:	fbb0 f0f1 	udiv	r0, r0, r1
    if (count < 20 || count > 5000) {
 8050f78:	f1a0 0214 	sub.w	r2, r0, #20
 8050f7c:	f241 3374 	movw	r3, #4980	; 0x1374
 8050f80:	429a      	cmp	r2, r3
 8050f82:	d91a      	bls.n	8050fba <maxbotix_sample_fetch+0xca>
        data->sensor_value.val1 = 0;
 8050f84:	2300      	movs	r3, #0
        result = -ENODATA;
 8050f86:	f06f 043c 	mvn.w	r4, #60	; 0x3c
        data->sensor_value.val2 = 0;
 8050f8a:	e9c5 3300 	strd	r3, r3, [r5]
    if (count < count_max_us) {
 8050f8e:	f243 23c7 	movw	r3, #12999	; 0x32c7
 8050f92:	4298      	cmp	r0, r3
 8050f94:	d8de      	bhi.n	8050f54 <maxbotix_sample_fetch+0x64>
        uint32_t sleep_to_next = (period_us - (measure_us + count)) / 1000;
 8050f96:	f5c0 514b 	rsb	r1, r0, #12992	; 0x32c0
 8050f9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8050f9e:	3108      	adds	r1, #8
 8050fa0:	fbb1 f1f0 	udiv	r1, r1, r0
			return t * ((uint64_t)to_hz / from_hz);
 8050fa4:	200a      	movs	r0, #10
 8050fa6:	fba1 0100 	umull	r0, r1, r1, r0
	return z_impl_k_sleep(timeout);
 8050faa:	f001 f97d 	bl	80522a8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
 8050fae:	e7d1      	b.n	8050f54 <maxbotix_sample_fetch+0x64>
			return t / ((uint64_t)from_hz / to_hz);
 8050fb0:	22d8      	movs	r2, #216	; 0xd8
 8050fb2:	2300      	movs	r3, #0
 8050fb4:	f7ef fac4 	bl	8040540 <__aeabi_uldivmod>
 8050fb8:	e7de      	b.n	8050f78 <maxbotix_sample_fetch+0x88>
        uint32_t micrometer = count * 1000;
 8050fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        data->sensor_value.val1 = (micrometer / 1000000);
 8050fbe:	4906      	ldr	r1, [pc, #24]	; (8050fd8 <maxbotix_sample_fetch+0xe8>)
        uint32_t micrometer = count * 1000;
 8050fc0:	4343      	muls	r3, r0
        data->sensor_value.val1 = (micrometer / 1000000);
 8050fc2:	fbb3 f2f1 	udiv	r2, r3, r1
        data->sensor_value.val2 = (micrometer % 1000000);
 8050fc6:	fb01 3312 	mls	r3, r1, r2, r3
        data->sensor_value.val1 = (micrometer / 1000000);
 8050fca:	602a      	str	r2, [r5, #0]
        data->sensor_value.val2 = (micrometer % 1000000);
 8050fcc:	606b      	str	r3, [r5, #4]
    if (count < count_max_us) {
 8050fce:	e7e2      	b.n	8050f96 <maxbotix_sample_fetch+0xa6>
        return -ENOTSUP;
 8050fd0:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8050fd4:	e7be      	b.n	8050f54 <maxbotix_sample_fetch+0x64>
 8050fd6:	bf00      	nop
 8050fd8:	000f4240 	.word	0x000f4240

08050fdc <maxbotix_init>:
{
 8050fdc:	b570      	push	{r4, r5, r6, lr}
    const struct maxbotix_cfg *cfg  = dev->config;
 8050fde:	6846      	ldr	r6, [r0, #4]
    struct maxbotix_data *data = dev->data;
 8050fe0:	6905      	ldr	r5, [r0, #16]
    data->trig_dev = device_get_binding(cfg->trig_port);
 8050fe2:	6830      	ldr	r0, [r6, #0]
 8050fe4:	f000 f88a 	bl	80510fc <z_impl_device_get_binding>
 8050fe8:	60a8      	str	r0, [r5, #8]
    if (!data->trig_dev)
 8050fea:	b918      	cbnz	r0, 8050ff4 <maxbotix_init+0x18>
        return -ENODEV;
 8050fec:	f06f 0412 	mvn.w	r4, #18
}
 8050ff0:	4620      	mov	r0, r4
 8050ff2:	bd70      	pop	{r4, r5, r6, pc}
    data->echo_dev = device_get_binding(cfg->echo_port);
 8050ff4:	68f0      	ldr	r0, [r6, #12]
 8050ff6:	f000 f881 	bl	80510fc <z_impl_device_get_binding>
 8050ffa:	60e8      	str	r0, [r5, #12]
    if (!data->echo_dev)
 8050ffc:	2800      	cmp	r0, #0
 8050ffe:	d0f5      	beq.n	8050fec <maxbotix_init+0x10>
    int err = gpio_pin_configure(data->trig_dev, cfg->trig_pin, (GPIO_OUTPUT | cfg->trig_flags));
 8051000:	68b2      	ldr	r2, [r6, #8]
 8051002:	68a8      	ldr	r0, [r5, #8]
 8051004:	7931      	ldrb	r1, [r6, #4]
 8051006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
 805100a:	f009 f8c2 	bl	805a192 <z_impl_gpio_pin_configure>
    if (err != 0)
 805100e:	4604      	mov	r4, r0
 8051010:	2800      	cmp	r0, #0
 8051012:	d1ed      	bne.n	8050ff0 <maxbotix_init+0x14>
    err = gpio_pin_configure(data->echo_dev, cfg->echo_pin, (GPIO_INPUT | cfg->echo_flags));
 8051014:	6972      	ldr	r2, [r6, #20]
 8051016:	68e8      	ldr	r0, [r5, #12]
 8051018:	7c31      	ldrb	r1, [r6, #16]
 805101a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 805101e:	f009 f8b8 	bl	805a192 <z_impl_gpio_pin_configure>
    if (err != 0)
 8051022:	4604      	mov	r4, r0
 8051024:	2800      	cmp	r0, #0
 8051026:	d1e3      	bne.n	8050ff0 <maxbotix_init+0x14>
    err = gpio_pin_interrupt_configure(data->echo_dev, cfg->echo_pin, GPIO_INT_EDGE_BOTH);
 8051028:	68e8      	ldr	r0, [r5, #12]
 805102a:	7c31      	ldrb	r1, [r6, #16]
	return api->pin_interrupt_configure(port, pin, mode, trig);
 805102c:	6883      	ldr	r3, [r0, #8]
 805102e:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 8051032:	699c      	ldr	r4, [r3, #24]
 8051034:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8051038:	47a0      	blx	r4
    if (err != 0)
 805103a:	4604      	mov	r4, r0
 805103c:	2800      	cmp	r0, #0
 805103e:	d1d7      	bne.n	8050ff0 <maxbotix_init+0x14>
    gpio_init_callback(&data->cb_data.cb, input_changed, BIT(cfg->echo_pin));
 8051040:	7c33      	ldrb	r3, [r6, #16]
 8051042:	2201      	movs	r2, #1
	callback->handler = handler;
 8051044:	4912      	ldr	r1, [pc, #72]	; (8051090 <maxbotix_init+0xb4>)
 8051046:	fa02 f303 	lsl.w	r3, r2, r3
	callback->pin_mask = pin_mask;
 805104a:	e9c5 1305 	strd	r1, r3, [r5, #20]
	return z_impl_k_sem_init(sem, initial_count, limit);
 805104e:	4601      	mov	r1, r0
 8051050:	f105 001c 	add.w	r0, r5, #28
 8051054:	f009 f9da 	bl	805a40c <z_impl_k_sem_init>
    if (0 != err)
 8051058:	4604      	mov	r4, r0
 805105a:	2800      	cmp	r0, #0
 805105c:	d1c8      	bne.n	8050ff0 <maxbotix_init+0x14>
    gpio_pin_set(data->trig_dev, cfg->trig_pin, 0);
 805105e:	4602      	mov	r2, r0
 8051060:	7931      	ldrb	r1, [r6, #4]
 8051062:	68a8      	ldr	r0, [r5, #8]
 8051064:	f009 f8e6 	bl	805a234 <gpio_pin_set.isra.0>
    LOG_INF("MaxBotix started.");
 8051068:	490a      	ldr	r1, [pc, #40]	; (8051094 <maxbotix_init+0xb8>)
    data->cb_data.state = MAXBOTIX_STATE_IDLE;
 805106a:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
    LOG_INF("MaxBotix started.");
 805106e:	680b      	ldr	r3, [r1, #0]
 8051070:	f003 0307 	and.w	r3, r3, #7
 8051074:	2b02      	cmp	r3, #2
    data->sensor_value.val2 = 0;
 8051076:	e9c5 4400 	strd	r4, r4, [r5]
    LOG_INF("MaxBotix started.");
 805107a:	d9b9      	bls.n	8050ff0 <maxbotix_init+0x14>
 805107c:	4b06      	ldr	r3, [pc, #24]	; (8051098 <maxbotix_init+0xbc>)
 805107e:	4807      	ldr	r0, [pc, #28]	; (805109c <maxbotix_init+0xc0>)
 8051080:	1ac9      	subs	r1, r1, r3
 8051082:	0889      	lsrs	r1, r1, #2
 8051084:	0189      	lsls	r1, r1, #6
 8051086:	f041 0103 	orr.w	r1, r1, #3
 805108a:	f004 ffac 	bl	8055fe6 <log_0>
 805108e:	e7af      	b.n	8050ff0 <maxbotix_init+0x14>
 8051090:	0805a1ed 	.word	0x0805a1ed
 8051094:	20020914 	.word	0x20020914
 8051098:	200208c8 	.word	0x200208c8
 805109c:	08063179 	.word	0x08063179

080510a0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80510a0:	4b0e      	ldr	r3, [pc, #56]	; (80510dc <z_sys_init_run_level+0x3c>)
{
 80510a2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80510a4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 80510a8:	3001      	adds	r0, #1
 80510aa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80510ae:	42a6      	cmp	r6, r4
 80510b0:	d800      	bhi.n	80510b4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 80510b2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 80510b4:	e9d4 3500 	ldrd	r3, r5, [r4]
 80510b8:	4628      	mov	r0, r5
 80510ba:	4798      	blx	r3
		if (dev != NULL) {
 80510bc:	b165      	cbz	r5, 80510d8 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
 80510be:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
 80510c0:	b130      	cbz	r0, 80510d0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 80510c2:	2800      	cmp	r0, #0
 80510c4:	bfb8      	it	lt
 80510c6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 80510c8:	28ff      	cmp	r0, #255	; 0xff
 80510ca:	bfa8      	it	ge
 80510cc:	20ff      	movge	r0, #255	; 0xff
 80510ce:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 80510d0:	785a      	ldrb	r2, [r3, #1]
 80510d2:	f042 0201 	orr.w	r2, r2, #1
 80510d6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80510d8:	3408      	adds	r4, #8
 80510da:	e7e8      	b.n	80510ae <z_sys_init_run_level+0xe>
 80510dc:	0805e1ac 	.word	0x0805e1ac

080510e0 <z_device_get_all_static>:
#include <syscalls/device_usable_check_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
 80510e0:	4a03      	ldr	r2, [pc, #12]	; (80510f0 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
 80510e2:	4b04      	ldr	r3, [pc, #16]	; (80510f4 <z_device_get_all_static+0x14>)
	*devices = __device_start;
 80510e4:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
 80510e6:	1a9b      	subs	r3, r3, r2
}
 80510e8:	4803      	ldr	r0, [pc, #12]	; (80510f8 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
 80510ea:	10db      	asrs	r3, r3, #3
}
 80510ec:	4358      	muls	r0, r3
 80510ee:	4770      	bx	lr
 80510f0:	0805b844 	.word	0x0805b844
 80510f4:	0805bc7c 	.word	0x0805bc7c
 80510f8:	aaaaaaab 	.word	0xaaaaaaab

080510fc <z_impl_device_get_binding>:
{
 80510fc:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
 80510fe:	4605      	mov	r5, r0
 8051100:	b910      	cbnz	r0, 8051108 <z_impl_device_get_binding+0xc>
		return NULL;
 8051102:	2400      	movs	r4, #0
}
 8051104:	4620      	mov	r0, r4
 8051106:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
 8051108:	7803      	ldrb	r3, [r0, #0]
 805110a:	2b00      	cmp	r3, #0
 805110c:	d0f9      	beq.n	8051102 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
 805110e:	4c0e      	ldr	r4, [pc, #56]	; (8051148 <z_impl_device_get_binding+0x4c>)
 8051110:	4e0e      	ldr	r6, [pc, #56]	; (805114c <z_impl_device_get_binding+0x50>)
 8051112:	42b4      	cmp	r4, r6
 8051114:	d108      	bne.n	8051128 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
 8051116:	4c0c      	ldr	r4, [pc, #48]	; (8051148 <z_impl_device_get_binding+0x4c>)
 8051118:	42b4      	cmp	r4, r6
 805111a:	d0f2      	beq.n	8051102 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 805111c:	4620      	mov	r0, r4
 805111e:	f009 f89a 	bl	805a256 <z_device_ready>
 8051122:	b950      	cbnz	r0, 805113a <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
 8051124:	3418      	adds	r4, #24
 8051126:	e7f7      	b.n	8051118 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
 8051128:	4620      	mov	r0, r4
 805112a:	f009 f894 	bl	805a256 <z_device_ready>
 805112e:	b110      	cbz	r0, 8051136 <z_impl_device_get_binding+0x3a>
 8051130:	6823      	ldr	r3, [r4, #0]
 8051132:	42ab      	cmp	r3, r5
 8051134:	d0e6      	beq.n	8051104 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
 8051136:	3418      	adds	r4, #24
 8051138:	e7eb      	b.n	8051112 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 805113a:	6821      	ldr	r1, [r4, #0]
 805113c:	4628      	mov	r0, r5
 805113e:	f7ef fb81 	bl	8040844 <strcmp>
 8051142:	2800      	cmp	r0, #0
 8051144:	d1ee      	bne.n	8051124 <z_impl_device_get_binding+0x28>
 8051146:	e7dd      	b.n	8051104 <z_impl_device_get_binding+0x8>
 8051148:	0805b844 	.word	0x0805b844
 805114c:	0805bc7c 	.word	0x0805bc7c

08051150 <device_required_foreach>:
}

int device_required_foreach(const struct device *dev,
			  device_visitor_callback_t visitor_cb,
			  void *context)
{
 8051150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8051154:	6944      	ldr	r4, [r0, #20]
 8051156:	460f      	mov	r7, r1
 8051158:	4692      	mov	sl, r2
	if (rv != NULL) {
 805115a:	bb3c      	cbnz	r4, 80511ac <device_required_foreach+0x5c>
	size_t handle_count = 0;
 805115c:	4626      	mov	r6, r4
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
 805115e:	4630      	mov	r0, r6
 8051160:	e022      	b.n	80511a8 <device_required_foreach+0x58>
			++i;
 8051162:	3601      	adds	r6, #1
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
 8051164:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
 8051168:	440b      	add	r3, r1
		while ((rv[i] != DEVICE_HANDLE_ENDS)
 805116a:	b29b      	uxth	r3, r3
 805116c:	4293      	cmp	r3, r2
 805116e:	d9f8      	bls.n	8051162 <device_required_foreach+0x12>
	size_t numdev = __device_end - __device_start;
 8051170:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80511c4 <device_required_foreach+0x74>
 8051174:	eb04 0946 	add.w	r9, r4, r6, lsl #1
 8051178:	4d10      	ldr	r5, [pc, #64]	; (80511bc <device_required_foreach+0x6c>)
 805117a:	4b11      	ldr	r3, [pc, #68]	; (80511c0 <device_required_foreach+0x70>)
 805117c:	eba5 0508 	sub.w	r5, r5, r8
 8051180:	10ed      	asrs	r5, r5, #3
 8051182:	435d      	muls	r5, r3
	for (size_t i = 0; i < handle_count; ++i) {
 8051184:	45a1      	cmp	r9, r4
 8051186:	d0ea      	beq.n	805115e <device_required_foreach+0xe>
		device_handle_t dh = handles[i];
 8051188:	f934 0b02 	ldrsh.w	r0, [r4], #2
	if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
 805118c:	2800      	cmp	r0, #0
 805118e:	dd13      	ble.n	80511b8 <device_required_foreach+0x68>
 8051190:	4285      	cmp	r5, r0
 8051192:	d311      	bcc.n	80511b8 <device_required_foreach+0x68>
		dev = &__device_start[dev_handle - 1];
 8051194:	3801      	subs	r0, #1
 8051196:	b200      	sxth	r0, r0
 8051198:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 805119c:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
		int rc = visitor_cb(rdev, context);
 80511a0:	4651      	mov	r1, sl
 80511a2:	47b8      	blx	r7
		if (rc < 0) {
 80511a4:	2800      	cmp	r0, #0
 80511a6:	daed      	bge.n	8051184 <device_required_foreach+0x34>
}
 80511a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		size_t i = 0;
 80511ac:	2600      	movs	r6, #0
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
 80511ae:	f647 71ff 	movw	r1, #32767	; 0x7fff
		while ((rv[i] != DEVICE_HANDLE_ENDS)
 80511b2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80511b6:	e7d5      	b.n	8051164 <device_required_foreach+0x14>
	const struct device *dev = NULL;
 80511b8:	2000      	movs	r0, #0
 80511ba:	e7f1      	b.n	80511a0 <device_required_foreach+0x50>
 80511bc:	0805bc7c 	.word	0x0805bc7c
 80511c0:	aaaaaaab 	.word	0xaaaaaaab
 80511c4:	0805b844 	.word	0x0805b844

080511c8 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 80511c8:	4b01      	ldr	r3, [pc, #4]	; (80511d0 <z_impl_z_errno+0x8>)
 80511ca:	6898      	ldr	r0, [r3, #8]
}
 80511cc:	3098      	adds	r0, #152	; 0x98
 80511ce:	4770      	bx	lr
 80511d0:	20038cc0 	.word	0x20038cc0

080511d4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 80511d4:	b510      	push	{r4, lr}
 80511d6:	4604      	mov	r4, r0
	z_impl_log_panic();
 80511d8:	f7f3 ff60 	bl	804509c <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
 80511dc:	4907      	ldr	r1, [pc, #28]	; (80511fc <k_sys_fatal_error_handler+0x28>)
 80511de:	680b      	ldr	r3, [r1, #0]
 80511e0:	075b      	lsls	r3, r3, #29
 80511e2:	d008      	beq.n	80511f6 <k_sys_fatal_error_handler+0x22>
 80511e4:	4b06      	ldr	r3, [pc, #24]	; (8051200 <k_sys_fatal_error_handler+0x2c>)
 80511e6:	4807      	ldr	r0, [pc, #28]	; (8051204 <k_sys_fatal_error_handler+0x30>)
 80511e8:	1ac9      	subs	r1, r1, r3
 80511ea:	0889      	lsrs	r1, r1, #2
 80511ec:	0189      	lsls	r1, r1, #6
 80511ee:	f041 0101 	orr.w	r1, r1, #1
 80511f2:	f004 fef8 	bl	8055fe6 <log_0>
	arch_system_halt(reason);
 80511f6:	4620      	mov	r0, r4
 80511f8:	f009 f837 	bl	805a26a <arch_system_halt>
 80511fc:	20020920 	.word	0x20020920
 8051200:	200208c8 	.word	0x200208c8
 8051204:	080631c1 	.word	0x080631c1

08051208 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8051208:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 805120c:	4606      	mov	r6, r0
 805120e:	460f      	mov	r7, r1
	__asm__ volatile(
 8051210:	f04f 0310 	mov.w	r3, #16
 8051214:	f3ef 8811 	mrs	r8, BASEPRI
 8051218:	f383 8812 	msr	BASEPRI_MAX, r3
 805121c:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 8051220:	4c2d      	ldr	r4, [pc, #180]	; (80512d8 <z_fatal_error+0xd0>)
	return z_impl_z_current_get();
 8051222:	f001 f859 	bl	80522d8 <z_impl_z_current_get>
 8051226:	4605      	mov	r5, r0
 8051228:	6823      	ldr	r3, [r4, #0]
 805122a:	0759      	lsls	r1, r3, #29
 805122c:	d050      	beq.n	80512d0 <z_fatal_error+0xc8>
 805122e:	4b2b      	ldr	r3, [pc, #172]	; (80512dc <z_fatal_error+0xd4>)
 8051230:	2e04      	cmp	r6, #4
 8051232:	4631      	mov	r1, r6
 8051234:	482a      	ldr	r0, [pc, #168]	; (80512e0 <z_fatal_error+0xd8>)
 8051236:	eba4 0303 	sub.w	r3, r4, r3
 805123a:	bf94      	ite	ls
 805123c:	4a29      	ldrls	r2, [pc, #164]	; (80512e4 <z_fatal_error+0xdc>)
 805123e:	4a2a      	ldrhi	r2, [pc, #168]	; (80512e8 <z_fatal_error+0xe0>)
 8051240:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8051244:	bf98      	it	ls
 8051246:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
 805124a:	019b      	lsls	r3, r3, #6
 805124c:	f043 0301 	orr.w	r3, r3, #1
 8051250:	f8ad 3000 	strh.w	r3, [sp]
 8051254:	2300      	movs	r3, #0
 8051256:	f004 ff05 	bl	8056064 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 805125a:	b17f      	cbz	r7, 805127c <z_fatal_error+0x74>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 805125c:	69fb      	ldr	r3, [r7, #28]
 805125e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8051262:	b15b      	cbz	r3, 805127c <z_fatal_error+0x74>
		LOG_ERR("Fault during interrupt handling\n");
 8051264:	6823      	ldr	r3, [r4, #0]
 8051266:	075a      	lsls	r2, r3, #29
 8051268:	d01b      	beq.n	80512a2 <z_fatal_error+0x9a>
 805126a:	491c      	ldr	r1, [pc, #112]	; (80512dc <z_fatal_error+0xd4>)
 805126c:	481f      	ldr	r0, [pc, #124]	; (80512ec <z_fatal_error+0xe4>)
 805126e:	1a61      	subs	r1, r4, r1
 8051270:	0889      	lsrs	r1, r1, #2
 8051272:	0189      	lsls	r1, r1, #6
 8051274:	f041 0101 	orr.w	r1, r1, #1
 8051278:	f004 feb5 	bl	8055fe6 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 805127c:	6823      	ldr	r3, [r4, #0]
 805127e:	075b      	lsls	r3, r3, #29
 8051280:	d00f      	beq.n	80512a2 <z_fatal_error+0x9a>
 8051282:	4b16      	ldr	r3, [pc, #88]	; (80512dc <z_fatal_error+0xd4>)
 8051284:	1ae4      	subs	r4, r4, r3
 8051286:	08a4      	lsrs	r4, r4, #2
 8051288:	01a4      	lsls	r4, r4, #6
 805128a:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 805128e:	b9b5      	cbnz	r5, 80512be <z_fatal_error+0xb6>
		thread_name = "unknown";
 8051290:	4817      	ldr	r0, [pc, #92]	; (80512f0 <z_fatal_error+0xe8>)
 8051292:	f7f3 fd83 	bl	8044d9c <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
 8051296:	4623      	mov	r3, r4
 8051298:	4602      	mov	r2, r0
 805129a:	4629      	mov	r1, r5
 805129c:	4815      	ldr	r0, [pc, #84]	; (80512f4 <z_fatal_error+0xec>)
 805129e:	f004 fec8 	bl	8056032 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 80512a2:	4639      	mov	r1, r7
 80512a4:	4630      	mov	r0, r6
 80512a6:	f7ff ff95 	bl	80511d4 <k_sys_fatal_error_handler>
	__asm__ volatile(
 80512aa:	f388 8811 	msr	BASEPRI, r8
 80512ae:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 80512b2:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 80512b4:	b002      	add	sp, #8
 80512b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80512ba:	f7f7 bc69 	b.w	8048b90 <z_impl_k_thread_abort>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 80512be:	4628      	mov	r0, r5
 80512c0:	f009 f828 	bl	805a314 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 80512c4:	2800      	cmp	r0, #0
 80512c6:	d0e3      	beq.n	8051290 <z_fatal_error+0x88>
 80512c8:	7803      	ldrb	r3, [r0, #0]
 80512ca:	2b00      	cmp	r3, #0
 80512cc:	d0e0      	beq.n	8051290 <z_fatal_error+0x88>
 80512ce:	e7e0      	b.n	8051292 <z_fatal_error+0x8a>
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 80512d0:	2f00      	cmp	r7, #0
 80512d2:	d1c3      	bne.n	805125c <z_fatal_error+0x54>
 80512d4:	e7e5      	b.n	80512a2 <z_fatal_error+0x9a>
 80512d6:	bf00      	nop
 80512d8:	20020920 	.word	0x20020920
 80512dc:	200208c8 	.word	0x200208c8
 80512e0:	080631e6 	.word	0x080631e6
 80512e4:	0805e1c4 	.word	0x0805e1c4
 80512e8:	080631d0 	.word	0x080631d0
 80512ec:	0806320e 	.word	0x0806320e
 80512f0:	080631de 	.word	0x080631de
 80512f4:	0806322f 	.word	0x0806322f

080512f8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
 80512f8:	b570      	push	{r4, r5, r6, lr}
 80512fa:	b088      	sub	sp, #32
 80512fc:	4604      	mov	r4, r0
	k_thread_stack_t *stack = z_idle_stacks[i];

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
 80512fe:	4603      	mov	r3, r0
 8051300:	4a13      	ldr	r2, [pc, #76]	; (8051350 <init_idle_thread+0x58>)
 8051302:	ae06      	add	r6, sp, #24
 8051304:	2108      	movs	r1, #8
	struct k_thread *thread = &z_idle_threads[i];
 8051306:	4d13      	ldr	r5, [pc, #76]	; (8051354 <init_idle_thread+0x5c>)
	snprintk(tname, 8, "idle %02d", i);
 8051308:	4630      	mov	r0, r6
 805130a:	f004 f9bd 	bl	8055688 <snprintk>
	struct k_thread *thread = &z_idle_threads[i];
 805130e:	23f8      	movs	r3, #248	; 0xf8
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
 8051310:	2201      	movs	r2, #1
 8051312:	f44f 70c0 	mov.w	r0, #384	; 0x180
	struct k_thread *thread = &z_idle_threads[i];
 8051316:	fb03 5504 	mla	r5, r3, r4, r5
	z_setup_new_thread(thread, stack,
 805131a:	230f      	movs	r3, #15
 805131c:	490e      	ldr	r1, [pc, #56]	; (8051358 <init_idle_thread+0x60>)
 805131e:	9605      	str	r6, [sp, #20]
 8051320:	fb00 1104 	mla	r1, r0, r4, r1
 8051324:	4628      	mov	r0, r5
 8051326:	e9cd 3203 	strd	r3, r2, [sp, #12]
 805132a:	2300      	movs	r3, #0
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 805132c:	2218      	movs	r2, #24
	z_setup_new_thread(thread, stack,
 805132e:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8051332:	4b0a      	ldr	r3, [pc, #40]	; (805135c <init_idle_thread+0x64>)
 8051334:	fb02 3304 	mla	r3, r2, r4, r3
	z_setup_new_thread(thread, stack,
 8051338:	f44f 72a0 	mov.w	r2, #320	; 0x140
 805133c:	9300      	str	r3, [sp, #0]
 805133e:	4b08      	ldr	r3, [pc, #32]	; (8051360 <init_idle_thread+0x68>)
 8051340:	f000 f982 	bl	8051648 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8051344:	7b6b      	ldrb	r3, [r5, #13]
 8051346:	f023 0304 	bic.w	r3, r3, #4
 805134a:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 805134c:	b008      	add	sp, #32
 805134e:	bd70      	pop	{r4, r5, r6, pc}
 8051350:	08063291 	.word	0x08063291
 8051354:	200226e0 	.word	0x200226e0
 8051358:	2003b400 	.word	0x2003b400
 805135c:	20038cc0 	.word	0x20038cc0
 8051360:	0805a339 	.word	0x0805a339

08051364 <bg_thread_main>:
	z_sys_post_kernel = true;
 8051364:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8051366:	2002      	movs	r0, #2
{
 8051368:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 805136a:	4b0a      	ldr	r3, [pc, #40]	; (8051394 <bg_thread_main+0x30>)
 805136c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 805136e:	f7ff fe97 	bl	80510a0 <z_sys_init_run_level>
	boot_banner();
 8051372:	f001 fab9 	bl	80528e8 <boot_banner>
	z_cpp_init_static();
 8051376:	f006 f8ae 	bl	80574d6 <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 805137a:	2003      	movs	r0, #3
 805137c:	f7ff fe90 	bl	80510a0 <z_sys_init_run_level>
	z_init_static_threads();
 8051380:	f000 f9f4 	bl	805176c <z_init_static_threads>
	main();
 8051384:	f7f2 fb50 	bl	8043a28 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8051388:	4a03      	ldr	r2, [pc, #12]	; (8051398 <bg_thread_main+0x34>)
 805138a:	7b13      	ldrb	r3, [r2, #12]
 805138c:	f023 0301 	bic.w	r3, r3, #1
 8051390:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8051392:	bd08      	pop	{r3, pc}
 8051394:	20039aac 	.word	0x20039aac
 8051398:	200227d8 	.word	0x200227d8

0805139c <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 805139c:	4807      	ldr	r0, [pc, #28]	; (80513bc <z_bss_zero+0x20>)
 805139e:	2100      	movs	r1, #0
 80513a0:	4a07      	ldr	r2, [pc, #28]	; (80513c0 <z_bss_zero+0x24>)
{
 80513a2:	b508      	push	{r3, lr}
 80513a4:	1a12      	subs	r2, r2, r0
 80513a6:	f009 fd51 	bl	805ae4c <memset>
	(void)memset(&__dtcm_bss_start, 0,
 80513aa:	4806      	ldr	r0, [pc, #24]	; (80513c4 <z_bss_zero+0x28>)
 80513ac:	4a06      	ldr	r2, [pc, #24]	; (80513c8 <z_bss_zero+0x2c>)
 80513ae:	2100      	movs	r1, #0
 80513b0:	1a12      	subs	r2, r2, r0
}
 80513b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80513b6:	f009 bd49 	b.w	805ae4c <memset>
 80513ba:	bf00      	nop
 80513bc:	20020a68 	.word	0x20020a68
 80513c0:	20039ab4 	.word	0x20039ab4
 80513c4:	20000000 	.word	0x20000000
 80513c8:	20000000 	.word	0x20000000

080513cc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 80513cc:	b580      	push	{r7, lr}
 80513ce:	b0c6      	sub	sp, #280	; 0x118
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 80513d0:	4f2c      	ldr	r7, [pc, #176]	; (8051484 <z_cstart+0xb8>)
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
 80513d2:	f7f3 fc21 	bl	8044c18 <log_core_init>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80513d6:	f387 8808 	msr	MSP, r7
 80513da:	2400      	movs	r4, #0
 80513dc:	4d2a      	ldr	r5, [pc, #168]	; (8051488 <z_cstart+0xbc>)
 80513de:	23f0      	movs	r3, #240	; 0xf0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 80513e0:	4e2a      	ldr	r6, [pc, #168]	; (805148c <z_cstart+0xc0>)
 80513e2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 80513e6:	77ec      	strb	r4, [r5, #31]
 80513e8:	762c      	strb	r4, [r5, #24]
 80513ea:	766c      	strb	r4, [r5, #25]
 80513ec:	76ac      	strb	r4, [r5, #26]
 80513ee:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 80513f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80513f4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80513f8:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 80513fa:	f7f7 facf 	bl	804899c <z_arm_fault_init>
	z_arm_cpu_idle_init();
 80513fe:	f7f6 fd91 	bl	8047f24 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8051402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8051406:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8051408:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 805140a:	f7f7 fc95 	bl	8048d38 <z_arm_mpu_init>
	_kernel.ready_q.cache = &z_main_thread;
 805140e:	4d20      	ldr	r5, [pc, #128]	; (8051490 <z_cstart+0xc4>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8051410:	f7f7 fbd0 	bl	8048bb4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 8051414:	f240 1301 	movw	r3, #257	; 0x101
 8051418:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	_current_cpu->current = dummy_thread;
 805141c:	ab08      	add	r3, sp, #32
	dummy_thread->stack_info.size = 0U;
 805141e:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
	_current_cpu->current = dummy_thread;
 8051422:	60b3      	str	r3, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8051424:	f008 ff16 	bl	805a254 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8051428:	4620      	mov	r0, r4
 805142a:	f7ff fe39 	bl	80510a0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 805142e:	2001      	movs	r0, #1
 8051430:	f7ff fe36 	bl	80510a0 <z_sys_init_run_level>
	z_sched_init();
 8051434:	f000 fea4 	bl	8052180 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8051438:	4a16      	ldr	r2, [pc, #88]	; (8051494 <z_cstart+0xc8>)
 805143a:	4b17      	ldr	r3, [pc, #92]	; (8051498 <z_cstart+0xcc>)
 805143c:	4628      	mov	r0, r5
 805143e:	9205      	str	r2, [sp, #20]
 8051440:	2201      	movs	r2, #1
 8051442:	4916      	ldr	r1, [pc, #88]	; (805149c <z_cstart+0xd0>)
 8051444:	9400      	str	r4, [sp, #0]
	_kernel.ready_q.cache = &z_main_thread;
 8051446:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8051448:	e9cd 4203 	strd	r4, r2, [sp, #12]
 805144c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8051450:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8051454:	f000 f8f8 	bl	8051648 <z_setup_new_thread>
 8051458:	7b6a      	ldrb	r2, [r5, #13]
 805145a:	9007      	str	r0, [sp, #28]
	z_ready_thread(&z_main_thread);
 805145c:	4628      	mov	r0, r5
 805145e:	f022 0204 	bic.w	r2, r2, #4
 8051462:	736a      	strb	r2, [r5, #13]
 8051464:	f009 f87e 	bl	805a564 <z_ready_thread>
		init_idle_thread(i);
 8051468:	4620      	mov	r0, r4
 805146a:	f7ff ff45 	bl	80512f8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 805146e:	4a0c      	ldr	r2, [pc, #48]	; (80514a0 <z_cstart+0xd4>)
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8051470:	4b09      	ldr	r3, [pc, #36]	; (8051498 <z_cstart+0xcc>)
 8051472:	4628      	mov	r0, r5
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 8051474:	60f2      	str	r2, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8051476:	9907      	ldr	r1, [sp, #28]
 8051478:	461a      	mov	r2, r3
		_kernel.cpus[i].id = i;
 805147a:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
 805147c:	6077      	str	r7, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 805147e:	f7f6 ff4f 	bl	8048320 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8051482:	bf00      	nop
 8051484:	2003be00 	.word	0x2003be00
 8051488:	e000ed00 	.word	0xe000ed00
 805148c:	20038cc0 	.word	0x20038cc0
 8051490:	200227d8 	.word	0x200227d8
 8051494:	0806329b 	.word	0x0806329b
 8051498:	08051365 	.word	0x08051365
 805149c:	2003af80 	.word	0x2003af80
 80514a0:	200226e0 	.word	0x200226e0

080514a4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
 80514a4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 80514a6:	4b0e      	ldr	r3, [pc, #56]	; (80514e0 <init_mem_slab_module+0x3c>)
 80514a8:	4c0e      	ldr	r4, [pc, #56]	; (80514e4 <init_mem_slab_module+0x40>)
 80514aa:	42a3      	cmp	r3, r4
 80514ac:	d301      	bcc.n	80514b2 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
 80514ae:	2000      	movs	r0, #0
	return rc;
}
 80514b0:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 80514b2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80514b6:	ea41 0200 	orr.w	r2, r1, r0
 80514ba:	f012 0203 	ands.w	r2, r2, #3
 80514be:	d10b      	bne.n	80514d8 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
 80514c0:	68dd      	ldr	r5, [r3, #12]
	slab->free_list = NULL;
 80514c2:	619a      	str	r2, [r3, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 80514c4:	42aa      	cmp	r2, r5
 80514c6:	d101      	bne.n	80514cc <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 80514c8:	3320      	adds	r3, #32
 80514ca:	e7ee      	b.n	80514aa <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
 80514cc:	699e      	ldr	r6, [r3, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 80514ce:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
 80514d0:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
 80514d2:	6199      	str	r1, [r3, #24]
		p += slab->block_size;
 80514d4:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
 80514d6:	e7f5      	b.n	80514c4 <init_mem_slab_module+0x20>
	return rc;
 80514d8:	f06f 0015 	mvn.w	r0, #21
 80514dc:	e7e8      	b.n	80514b0 <init_mem_slab_module+0xc>
 80514de:	bf00      	nop
 80514e0:	20020950 	.word	0x20020950
 80514e4:	20020990 	.word	0x20020990

080514e8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 80514e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80514ea:	460c      	mov	r4, r1
	__asm__ volatile(
 80514ec:	f04f 0510 	mov.w	r5, #16
 80514f0:	f3ef 8111 	mrs	r1, BASEPRI
 80514f4:	f385 8812 	msr	BASEPRI_MAX, r5
 80514f8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
 80514fc:	6985      	ldr	r5, [r0, #24]
 80514fe:	b15d      	cbz	r5, 8051518 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
 8051500:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
 8051502:	682b      	ldr	r3, [r5, #0]
 8051504:	6183      	str	r3, [r0, #24]
		slab->num_used++;
 8051506:	69c3      	ldr	r3, [r0, #28]
 8051508:	3301      	adds	r3, #1
 805150a:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
 805150c:	2000      	movs	r0, #0
	__asm__ volatile(
 805150e:	f381 8811 	msr	BASEPRI, r1
 8051512:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
 8051516:	e011      	b.n	805153c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
 8051518:	ea52 0c03 	orrs.w	ip, r2, r3
 805151c:	d103      	bne.n	8051526 <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
 805151e:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
 8051522:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
 8051524:	e7f3      	b.n	805150e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
 8051526:	e9cd 2300 	strd	r2, r3, [sp]
 805152a:	4602      	mov	r2, r0
 805152c:	3008      	adds	r0, #8
 805152e:	f000 fd73 	bl	8052018 <z_pend_curr>
		if (result == 0) {
 8051532:	b918      	cbnz	r0, 805153c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
 8051534:	4b02      	ldr	r3, [pc, #8]	; (8051540 <k_mem_slab_alloc+0x58>)
 8051536:	689b      	ldr	r3, [r3, #8]
 8051538:	695b      	ldr	r3, [r3, #20]
 805153a:	6023      	str	r3, [r4, #0]
}
 805153c:	b003      	add	sp, #12
 805153e:	bd30      	pop	{r4, r5, pc}
 8051540:	20038cc0 	.word	0x20038cc0

08051544 <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
 8051544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8051546:	4605      	mov	r5, r0
 8051548:	460f      	mov	r7, r1
	__asm__ volatile(
 805154a:	f04f 0310 	mov.w	r3, #16
 805154e:	f3ef 8611 	mrs	r6, BASEPRI
 8051552:	f383 8812 	msr	BASEPRI_MAX, r3
 8051556:	f3bf 8f6f 	isb	sy
	 */
	key = k_spin_lock(&z_thread_monitor_lock);

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, foreach);

	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
 805155a:	4b06      	ldr	r3, [pc, #24]	; (8051574 <k_thread_foreach+0x30>)
 805155c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 805155e:	b924      	cbnz	r4, 805156a <k_thread_foreach+0x26>
	__asm__ volatile(
 8051560:	f386 8811 	msr	BASEPRI, r6
 8051564:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, foreach);

	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
 8051568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
 805156a:	4620      	mov	r0, r4
 805156c:	4639      	mov	r1, r7
 805156e:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
 8051570:	6f64      	ldr	r4, [r4, #116]	; 0x74
 8051572:	e7f4      	b.n	805155e <k_thread_foreach+0x1a>
 8051574:	20038cc0 	.word	0x20038cc0

08051578 <z_thread_monitor_exit>:
	__asm__ volatile(
 8051578:	f04f 0310 	mov.w	r3, #16
 805157c:	f3ef 8111 	mrs	r1, BASEPRI
 8051580:	f383 8812 	msr	BASEPRI_MAX, r3
 8051584:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
 8051588:	4a09      	ldr	r2, [pc, #36]	; (80515b0 <z_thread_monitor_exit+0x38>)
 805158a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 805158c:	4283      	cmp	r3, r0
 805158e:	d107      	bne.n	80515a0 <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
 8051590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8051592:	6293      	str	r3, [r2, #40]	; 0x28
	__asm__ volatile(
 8051594:	f381 8811 	msr	BASEPRI, r1
 8051598:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
 805159c:	4770      	bx	lr
 805159e:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
 80515a0:	2b00      	cmp	r3, #0
 80515a2:	d0f7      	beq.n	8051594 <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
 80515a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
 80515a6:	4282      	cmp	r2, r0
 80515a8:	d1f9      	bne.n	805159e <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
 80515aa:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80515ac:	675a      	str	r2, [r3, #116]	; 0x74
 80515ae:	e7f1      	b.n	8051594 <z_thread_monitor_exit+0x1c>
 80515b0:	20038cc0 	.word	0x20038cc0

080515b4 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
 80515b4:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
 80515b6:	4604      	mov	r4, r0
 80515b8:	b908      	cbnz	r0, 80515be <z_impl_k_thread_name_set+0xa>
		thread = _current;
 80515ba:	4b05      	ldr	r3, [pc, #20]	; (80515d0 <z_impl_k_thread_name_set+0x1c>)
 80515bc:	689c      	ldr	r4, [r3, #8]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 80515be:	221f      	movs	r2, #31
 80515c0:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80515c4:	f009 fd9a 	bl	805b0fc <strncpy>
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
 80515c8:	2000      	movs	r0, #0
 80515ca:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
 80515ce:	bd10      	pop	{r4, pc}
 80515d0:	20038cc0 	.word	0x20038cc0

080515d4 <k_thread_state_str>:
#endif /* CONFIG_THREAD_NAME */
}

const char *k_thread_state_str(k_tid_t thread_id)
{
	switch (thread_id->base.thread_state) {
 80515d4:	7b43      	ldrb	r3, [r0, #13]
 80515d6:	2b10      	cmp	r3, #16
 80515d8:	d80e      	bhi.n	80515f8 <k_thread_state_str+0x24>
 80515da:	2b10      	cmp	r3, #16
 80515dc:	d81c      	bhi.n	8051618 <k_thread_state_str+0x44>
 80515de:	e8df f003 	tbb	[pc, r3]
 80515e2:	091d      	.short	0x091d
 80515e4:	1b151b13 	.word	0x1b151b13
 80515e8:	1b171b1b 	.word	0x1b171b1b
 80515ec:	1b1b1b1b 	.word	0x1b1b1b1b
 80515f0:	1b1b      	.short	0x1b1b
 80515f2:	19          	.byte	0x19
 80515f3:	00          	.byte	0x00
 80515f4:	480b      	ldr	r0, [pc, #44]	; (8051624 <k_thread_state_str+0x50>)
 80515f6:	4770      	bx	lr
 80515f8:	2b20      	cmp	r3, #32
 80515fa:	d011      	beq.n	8051620 <k_thread_state_str+0x4c>
	case _THREAD_SUSPENDED:
		return "suspended";
	case _THREAD_ABORTING:
		return "aborting";
	case _THREAD_QUEUED:
		return "queued";
 80515fc:	4a0a      	ldr	r2, [pc, #40]	; (8051628 <k_thread_state_str+0x54>)
 80515fe:	480b      	ldr	r0, [pc, #44]	; (805162c <k_thread_state_str+0x58>)
 8051600:	2b80      	cmp	r3, #128	; 0x80
 8051602:	bf08      	it	eq
 8051604:	4610      	moveq	r0, r2
 8051606:	4770      	bx	lr
		return "pending";
 8051608:	4809      	ldr	r0, [pc, #36]	; (8051630 <k_thread_state_str+0x5c>)
 805160a:	4770      	bx	lr
		return "prestart";
 805160c:	4809      	ldr	r0, [pc, #36]	; (8051634 <k_thread_state_str+0x60>)
 805160e:	4770      	bx	lr
		return "dead";
 8051610:	4809      	ldr	r0, [pc, #36]	; (8051638 <k_thread_state_str+0x64>)
 8051612:	4770      	bx	lr
		return "suspended";
 8051614:	4809      	ldr	r0, [pc, #36]	; (805163c <k_thread_state_str+0x68>)
 8051616:	4770      	bx	lr
	/* Add a break, some day when another case gets added at the end,
	 * this bit of defensive programming will be useful
	 */
		break;
	}
	return "unknown";
 8051618:	4804      	ldr	r0, [pc, #16]	; (805162c <k_thread_state_str+0x58>)
 805161a:	4770      	bx	lr
		return "";
 805161c:	4808      	ldr	r0, [pc, #32]	; (8051640 <k_thread_state_str+0x6c>)
 805161e:	4770      	bx	lr
		return "aborting";
 8051620:	4808      	ldr	r0, [pc, #32]	; (8051644 <k_thread_state_str+0x70>)
}
 8051622:	4770      	bx	lr
 8051624:	080632c3 	.word	0x080632c3
 8051628:	080632d2 	.word	0x080632d2
 805162c:	080631de 	.word	0x080631de
 8051630:	080632a3 	.word	0x080632a3
 8051634:	080632ab 	.word	0x080632ab
 8051638:	080632b4 	.word	0x080632b4
 805163c:	080632b9 	.word	0x080632b9
 8051640:	08060045 	.word	0x08060045
 8051644:	080632c9 	.word	0x080632c9

08051648 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8051648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 805164c:	4698      	mov	r8, r3
 805164e:	b085      	sub	sp, #20
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8051650:	f100 0358 	add.w	r3, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8051654:	3207      	adds	r2, #7

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
 8051656:	2500      	movs	r5, #0
{
 8051658:	4604      	mov	r4, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 805165a:	f022 0a07 	bic.w	sl, r2, #7
{
 805165e:	460e      	mov	r6, r1
	thread_base->pended_on = NULL;
 8051660:	6085      	str	r5, [r0, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8051662:	f10a 0720 	add.w	r7, sl, #32
__ssp_bos_icheck3(memset, void *, int)
 8051666:	4652      	mov	r2, sl
	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
 8051668:	73c5      	strb	r5, [r0, #15]
	stack_ptr = (char *)stack + stack_obj_size;
 805166a:	440f      	add	r7, r1
{
 805166c:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8051670:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
	list->tail = (sys_dnode_t *)list;
 8051674:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
	thread_base->user_options = (uint8_t)options;
 8051678:	9b12      	ldr	r3, [sp, #72]	; 0x48
 805167a:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 805167c:	2304      	movs	r3, #4
 805167e:	7343      	strb	r3, [r0, #13]
	thread_base->prio = priority;
 8051680:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8051682:	7383      	strb	r3, [r0, #14]

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8051684:	f101 0320 	add.w	r3, r1, #32
 8051688:	21aa      	movs	r1, #170	; 0xaa
	node->prev = NULL;
 805168a:	e9c0 5506 	strd	r5, r5, [r0, #24]
 805168e:	4618      	mov	r0, r3
 8051690:	f009 fbdc 	bl	805ae4c <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8051694:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8051696:	463a      	mov	r2, r7
 8051698:	4631      	mov	r1, r6
 805169a:	9302      	str	r3, [sp, #8]
 805169c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	new_thread->stack_info.delta = delta;
 805169e:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	new_thread->stack_info.size = stack_buf_size;
 80516a2:	e9c4 0a27 	strd	r0, sl, [r4, #156]	; 0x9c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 80516a6:	e9cd b300 	strd	fp, r3, [sp]
 80516aa:	4620      	mov	r0, r4
 80516ac:	4643      	mov	r3, r8
 80516ae:	f7f6 fda9 	bl	8048204 <arch_new_thread>
	new_thread->entry.parameter2 = p2;
 80516b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	new_thread->init_data = NULL;
 80516b4:	6565      	str	r5, [r4, #84]	; 0x54
	new_thread->entry.parameter2 = p2;
 80516b6:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
 80516b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->entry.parameter1 = p1;
 80516ba:	e9c4 8b19 	strd	r8, fp, [r4, #100]	; 0x64
	new_thread->entry.parameter3 = p3;
 80516be:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
 80516c0:	f04f 0210 	mov.w	r2, #16
 80516c4:	f3ef 8311 	mrs	r3, BASEPRI
 80516c8:	f382 8812 	msr	BASEPRI_MAX, r2
 80516cc:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
 80516d0:	4e0f      	ldr	r6, [pc, #60]	; (8051710 <z_setup_new_thread+0xc8>)
 80516d2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	_kernel.threads = new_thread;
 80516d4:	62b4      	str	r4, [r6, #40]	; 0x28
	new_thread->next_thread = _kernel.threads;
 80516d6:	6762      	str	r2, [r4, #116]	; 0x74
	__asm__ volatile(
 80516d8:	f383 8811 	msr	BASEPRI, r3
 80516dc:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
 80516e0:	f1b9 0f00 	cmp.w	r9, #0
 80516e4:	d011      	beq.n	805170a <z_setup_new_thread+0xc2>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 80516e6:	221f      	movs	r2, #31
 80516e8:	4649      	mov	r1, r9
 80516ea:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80516ee:	f009 fd05 	bl	805b0fc <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
 80516f2:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
	if (!_current) {
 80516f6:	68b3      	ldr	r3, [r6, #8]
 80516f8:	b10b      	cbz	r3, 80516fe <z_setup_new_thread+0xb6>
	new_thread->resource_pool = _current->resource_pool;
 80516fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
}
 80516fe:	4638      	mov	r0, r7
 8051700:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8051704:	b005      	add	sp, #20
 8051706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
 805170a:	f884 9078 	strb.w	r9, [r4, #120]	; 0x78
 805170e:	e7f2      	b.n	80516f6 <z_setup_new_thread+0xae>
 8051710:	20038cc0 	.word	0x20038cc0

08051714 <z_impl_k_thread_create>:
{
 8051714:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8051716:	2700      	movs	r7, #0
{
 8051718:	b087      	sub	sp, #28
 805171a:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 805171c:	9705      	str	r7, [sp, #20]
 805171e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8051720:	9704      	str	r7, [sp, #16]
 8051722:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8051724:	9703      	str	r7, [sp, #12]
 8051726:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8051728:	9702      	str	r7, [sp, #8]
 805172a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 805172c:	9701      	str	r7, [sp, #4]
 805172e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
{
 8051730:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8051734:	9700      	str	r7, [sp, #0]
 8051736:	f7ff ff87 	bl	8051648 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 805173a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 805173e:	bf08      	it	eq
 8051740:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 8051744:	d005      	beq.n	8051752 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8051746:	ea55 0306 	orrs.w	r3, r5, r6
 805174a:	d105      	bne.n	8051758 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 805174c:	4620      	mov	r0, r4
 805174e:	f000 fc15 	bl	8051f7c <z_sched_start>
}
 8051752:	4620      	mov	r0, r4
 8051754:	b007      	add	sp, #28
 8051756:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8051758:	4632      	mov	r2, r6
 805175a:	462b      	mov	r3, r5
 805175c:	4902      	ldr	r1, [pc, #8]	; (8051768 <z_impl_k_thread_create+0x54>)
 805175e:	f104 0018 	add.w	r0, r4, #24
 8051762:	f000 fe97 	bl	8052494 <z_add_timeout>
 8051766:	e7f4      	b.n	8051752 <z_impl_k_thread_create+0x3e>
 8051768:	0805a585 	.word	0x0805a585

0805176c <z_init_static_threads>:
{
 805176c:	b5f0      	push	{r4, r5, r6, r7, lr}
 805176e:	4c21      	ldr	r4, [pc, #132]	; (80517f4 <z_init_static_threads+0x88>)
 8051770:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
 8051772:	4d21      	ldr	r5, [pc, #132]	; (80517f8 <z_init_static_threads+0x8c>)
 8051774:	4626      	mov	r6, r4
 8051776:	3430      	adds	r4, #48	; 0x30
 8051778:	42ae      	cmp	r6, r5
 805177a:	d30b      	bcc.n	8051794 <z_init_static_threads+0x28>
	_FOREACH_STATIC_THREAD(thread_data) {
 805177c:	4c1d      	ldr	r4, [pc, #116]	; (80517f4 <z_init_static_threads+0x88>)
			return t * ((uint64_t)to_hz / from_hz);
 805177e:	260a      	movs	r6, #10
 8051780:	4f1e      	ldr	r7, [pc, #120]	; (80517fc <z_init_static_threads+0x90>)
	k_sched_lock();
 8051782:	f000 fb17 	bl	8051db4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8051786:	42ac      	cmp	r4, r5
 8051788:	d320      	bcc.n	80517cc <z_init_static_threads+0x60>
}
 805178a:	b007      	add	sp, #28
 805178c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8051790:	f000 bcda 	b.w	8052148 <k_sched_unlock>
		z_setup_new_thread(
 8051794:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8051798:	9305      	str	r3, [sp, #20]
 805179a:	f854 3c10 	ldr.w	r3, [r4, #-16]
 805179e:	9304      	str	r3, [sp, #16]
 80517a0:	f854 3c14 	ldr.w	r3, [r4, #-20]
 80517a4:	9303      	str	r3, [sp, #12]
 80517a6:	f854 3c18 	ldr.w	r3, [r4, #-24]
 80517aa:	9302      	str	r3, [sp, #8]
 80517ac:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 80517b0:	9301      	str	r3, [sp, #4]
 80517b2:	f854 3c20 	ldr.w	r3, [r4, #-32]
 80517b6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 80517ba:	9300      	str	r3, [sp, #0]
 80517bc:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 80517c0:	f7ff ff42 	bl	8051648 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 80517c4:	f854 3c30 	ldr.w	r3, [r4, #-48]
 80517c8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 80517ca:	e7d3      	b.n	8051774 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 80517cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80517ce:	1c53      	adds	r3, r2, #1
 80517d0:	d009      	beq.n	80517e6 <z_init_static_threads+0x7a>
					    K_MSEC(thread_data->init_delay));
 80517d2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			schedule_new_thread(thread_data->init_thread,
 80517d6:	6820      	ldr	r0, [r4, #0]
 80517d8:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80517dc:	ea52 0103 	orrs.w	r1, r2, r3
 80517e0:	d103      	bne.n	80517ea <z_init_static_threads+0x7e>
	z_sched_start(thread);
 80517e2:	f000 fbcb 	bl	8051f7c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 80517e6:	3430      	adds	r4, #48	; 0x30
 80517e8:	e7cd      	b.n	8051786 <z_init_static_threads+0x1a>
 80517ea:	4639      	mov	r1, r7
 80517ec:	3018      	adds	r0, #24
 80517ee:	f000 fe51 	bl	8052494 <z_add_timeout>
 80517f2:	e7f8      	b.n	80517e6 <z_init_static_threads+0x7a>
 80517f4:	20020950 	.word	0x20020950
 80517f8:	20020950 	.word	0x20020950
 80517fc:	0805a585 	.word	0x0805a585

08051800 <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
 8051800:	4800      	ldr	r0, [pc, #0]	; (8051804 <sys_kernel_version_get+0x4>)
 8051802:	4770      	bx	lr
 8051804:	02070500 	.word	0x02070500

08051808 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
 8051808:	b5f0      	push	{r4, r5, r6, r7, lr}
 805180a:	469c      	mov	ip, r3
 805180c:	b085      	sub	sp, #20
 805180e:	4604      	mov	r4, r0

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
 8051810:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
 8051814:	f04f 0510 	mov.w	r5, #16
 8051818:	f3ef 8611 	mrs	r6, BASEPRI
 805181c:	f385 8812 	msr	BASEPRI_MAX, r5
 8051820:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
 8051824:	6903      	ldr	r3, [r0, #16]
 8051826:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8051828:	429d      	cmp	r5, r3
 805182a:	d230      	bcs.n	805188e <z_impl_k_msgq_put+0x86>
 805182c:	9103      	str	r1, [sp, #12]
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 805182e:	f008 ff0a 	bl	805a646 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 8051832:	68e2      	ldr	r2, [r4, #12]
 8051834:	4605      	mov	r5, r0
 8051836:	9903      	ldr	r1, [sp, #12]
 8051838:	b178      	cbz	r0, 805185a <z_impl_k_msgq_put+0x52>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 805183a:	2400      	movs	r4, #0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 805183c:	6940      	ldr	r0, [r0, #20]
 805183e:	f009 faca 	bl	805add6 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
 8051842:	4628      	mov	r0, r5
 8051844:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
 8051848:	f008 fe8c 	bl	805a564 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 805184c:	4638      	mov	r0, r7
 805184e:	4631      	mov	r1, r6
 8051850:	f000 fa9e 	bl	8051d90 <z_reschedule>
			return 0;
 8051854:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 8051856:	b005      	add	sp, #20
 8051858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 805185a:	6a20      	ldr	r0, [r4, #32]
 805185c:	f009 fabb 	bl	805add6 <memcpy>
			msgq->write_ptr += msgq->msg_size;
 8051860:	6a23      	ldr	r3, [r4, #32]
 8051862:	68e2      	ldr	r2, [r4, #12]
	z_handle_obj_poll_events(&msgq->poll_events, state);
 8051864:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8051868:	2110      	movs	r1, #16
			msgq->write_ptr += msgq->msg_size;
 805186a:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
 805186c:	69a2      	ldr	r2, [r4, #24]
 805186e:	4293      	cmp	r3, r2
			msgq->write_ptr += msgq->msg_size;
 8051870:	6223      	str	r3, [r4, #32]
				msgq->write_ptr = msgq->buffer_start;
 8051872:	bf04      	itt	eq
 8051874:	6963      	ldreq	r3, [r4, #20]
 8051876:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
 8051878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 805187a:	3301      	adds	r3, #1
 805187c:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
 805187e:	f009 f8ff 	bl	805aa80 <z_handle_obj_poll_events>
		result = 0;
 8051882:	2000      	movs	r0, #0
	__asm__ volatile(
 8051884:	f386 8811 	msr	BASEPRI, r6
 8051888:	f3bf 8f6f 	isb	sy
	return result;
 805188c:	e7e3      	b.n	8051856 <z_impl_k_msgq_put+0x4e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 805188e:	ea52 000c 	orrs.w	r0, r2, ip
 8051892:	d00a      	beq.n	80518aa <z_impl_k_msgq_put+0xa2>
		_current->base.swap_data = (void *) data;
 8051894:	4806      	ldr	r0, [pc, #24]	; (80518b0 <z_impl_k_msgq_put+0xa8>)
 8051896:	6880      	ldr	r0, [r0, #8]
 8051898:	6141      	str	r1, [r0, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 805189a:	4631      	mov	r1, r6
 805189c:	4638      	mov	r0, r7
 805189e:	e9cd 2c00 	strd	r2, ip, [sp]
 80518a2:	4622      	mov	r2, r4
 80518a4:	f000 fbb8 	bl	8052018 <z_pend_curr>
		return result;
 80518a8:	e7d5      	b.n	8051856 <z_impl_k_msgq_put+0x4e>
		result = -ENOMSG;
 80518aa:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80518ae:	e7e9      	b.n	8051884 <z_impl_k_msgq_put+0x7c>
 80518b0:	20038cc0 	.word	0x20038cc0

080518b4 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
 80518b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80518b6:	4604      	mov	r4, r0
 80518b8:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
 80518ba:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
 80518be:	f04f 0110 	mov.w	r1, #16
 80518c2:	f3ef 8611 	mrs	r6, BASEPRI
 80518c6:	f381 8812 	msr	BASEPRI_MAX, r1
 80518ca:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
 80518ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80518d0:	2900      	cmp	r1, #0
 80518d2:	d032      	beq.n	805193a <z_impl_k_msgq_get+0x86>
 80518d4:	68e2      	ldr	r2, [r4, #12]
 80518d6:	69e1      	ldr	r1, [r4, #28]
 80518d8:	f009 fa7d 	bl	805add6 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
 80518dc:	69e3      	ldr	r3, [r4, #28]
 80518de:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 80518e0:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
 80518e2:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
 80518e4:	69a2      	ldr	r2, [r4, #24]
 80518e6:	4293      	cmp	r3, r2
		msgq->read_ptr += msgq->msg_size;
 80518e8:	61e3      	str	r3, [r4, #28]
			msgq->read_ptr = msgq->buffer_start;
 80518ea:	bf04      	itt	eq
 80518ec:	6963      	ldreq	r3, [r4, #20]
 80518ee:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
 80518f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80518f2:	3b01      	subs	r3, #1
 80518f4:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 80518f6:	f008 fea6 	bl	805a646 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 80518fa:	4605      	mov	r5, r0
 80518fc:	b368      	cbz	r0, 805195a <z_impl_k_msgq_get+0xa6>
 80518fe:	6941      	ldr	r1, [r0, #20]
 8051900:	68e2      	ldr	r2, [r4, #12]
 8051902:	6a20      	ldr	r0, [r4, #32]
 8051904:	f009 fa67 	bl	805add6 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
 8051908:	6a23      	ldr	r3, [r4, #32]
 805190a:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
 805190c:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
 805190e:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
 8051910:	69a2      	ldr	r2, [r4, #24]
 8051912:	4293      	cmp	r3, r2
			msgq->write_ptr += msgq->msg_size;
 8051914:	6223      	str	r3, [r4, #32]
				msgq->write_ptr = msgq->buffer_start;
 8051916:	bf04      	itt	eq
 8051918:	6963      	ldreq	r3, [r4, #20]
 805191a:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
 805191c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 805191e:	3301      	adds	r3, #1
 8051920:	6263      	str	r3, [r4, #36]	; 0x24
 8051922:	2400      	movs	r4, #0
 8051924:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
			z_ready_thread(pending_thread);
 8051928:	f008 fe1c 	bl	805a564 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 805192c:	4638      	mov	r0, r7
 805192e:	4631      	mov	r1, r6
 8051930:	f000 fa2e 	bl	8051d90 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
 8051934:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 8051936:	b003      	add	sp, #12
 8051938:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 805193a:	ea52 0103 	orrs.w	r1, r2, r3
 805193e:	d00a      	beq.n	8051956 <z_impl_k_msgq_get+0xa2>
		_current->base.swap_data = data;
 8051940:	4908      	ldr	r1, [pc, #32]	; (8051964 <z_impl_k_msgq_get+0xb0>)
 8051942:	6889      	ldr	r1, [r1, #8]
 8051944:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8051946:	4631      	mov	r1, r6
 8051948:	4638      	mov	r0, r7
 805194a:	e9cd 2300 	strd	r2, r3, [sp]
 805194e:	4622      	mov	r2, r4
 8051950:	f000 fb62 	bl	8052018 <z_pend_curr>
		return result;
 8051954:	e7ef      	b.n	8051936 <z_impl_k_msgq_get+0x82>
		result = -ENOMSG;
 8051956:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 805195a:	f386 8811 	msr	BASEPRI, r6
 805195e:	f3bf 8f6f 	isb	sy
	return result;
 8051962:	e7e8      	b.n	8051936 <z_impl_k_msgq_get+0x82>
 8051964:	20038cc0 	.word	0x20038cc0

08051968 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 8051968:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 805196c:	4604      	mov	r4, r0
 805196e:	4617      	mov	r7, r2
 8051970:	461e      	mov	r6, r3
	__asm__ volatile(
 8051972:	f04f 0310 	mov.w	r3, #16
 8051976:	f3ef 8811 	mrs	r8, BASEPRI
 805197a:	f383 8812 	msr	BASEPRI_MAX, r3
 805197e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8051982:	68c3      	ldr	r3, [r0, #12]
 8051984:	4a33      	ldr	r2, [pc, #204]	; (8051a54 <z_impl_k_mutex_lock+0xec>)
 8051986:	b16b      	cbz	r3, 80519a4 <z_impl_k_mutex_lock+0x3c>
 8051988:	6880      	ldr	r0, [r0, #8]
 805198a:	6891      	ldr	r1, [r2, #8]
 805198c:	4288      	cmp	r0, r1
 805198e:	d019      	beq.n	80519c4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 8051990:	ea57 0306 	orrs.w	r3, r7, r6
 8051994:	d118      	bne.n	80519c8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
 8051996:	f388 8811 	msr	BASEPRI, r8
 805199a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
 805199e:	f06f 000f 	mvn.w	r0, #15
 80519a2:	e00c      	b.n	80519be <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
 80519a4:	6891      	ldr	r1, [r2, #8]
 80519a6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
 80519aa:	3301      	adds	r3, #1
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 80519ac:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
 80519ae:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 80519b0:	6893      	ldr	r3, [r2, #8]
 80519b2:	60a3      	str	r3, [r4, #8]
 80519b4:	f388 8811 	msr	BASEPRI, r8
 80519b8:	f3bf 8f6f 	isb	sy
		return 0;
 80519bc:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 80519be:	b002      	add	sp, #8
 80519c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 80519c4:	6921      	ldr	r1, [r4, #16]
 80519c6:	e7f0      	b.n	80519aa <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 80519c8:	f991 100e 	ldrsb.w	r1, [r1, #14]
 80519cc:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 80519d0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
 80519d4:	4299      	cmp	r1, r3
 80519d6:	bfa8      	it	ge
 80519d8:	4619      	movge	r1, r3
 80519da:	4291      	cmp	r1, r2
 80519dc:	bfb8      	it	lt
 80519de:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 80519e0:	428b      	cmp	r3, r1
 80519e2:	dd2f      	ble.n	8051a44 <z_impl_k_mutex_lock+0xdc>
		resched = adjust_owner_prio(mutex, new_prio);
 80519e4:	f008 fd03 	bl	805a3ee <adjust_owner_prio.isra.0>
 80519e8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 80519ea:	4622      	mov	r2, r4
 80519ec:	4641      	mov	r1, r8
 80519ee:	481a      	ldr	r0, [pc, #104]	; (8051a58 <z_impl_k_mutex_lock+0xf0>)
 80519f0:	e9cd 7600 	strd	r7, r6, [sp]
 80519f4:	f000 fb10 	bl	8052018 <z_pend_curr>
	if (got_mutex == 0) {
 80519f8:	2800      	cmp	r0, #0
 80519fa:	d0e0      	beq.n	80519be <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
 80519fc:	f04f 0310 	mov.w	r3, #16
 8051a00:	f3ef 8611 	mrs	r6, BASEPRI
 8051a04:	f383 8812 	msr	BASEPRI_MAX, r3
 8051a08:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
 8051a0c:	68a0      	ldr	r0, [r4, #8]
 8051a0e:	b188      	cbz	r0, 8051a34 <z_impl_k_mutex_lock+0xcc>
	return list->head == list;
 8051a10:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8051a12:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8051a14:	429c      	cmp	r4, r3
 8051a16:	d00a      	beq.n	8051a2e <z_impl_k_mutex_lock+0xc6>
 8051a18:	b14b      	cbz	r3, 8051a2e <z_impl_k_mutex_lock+0xc6>
 8051a1a:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8051a1e:	4299      	cmp	r1, r3
 8051a20:	bfa8      	it	ge
 8051a22:	4619      	movge	r1, r3
 8051a24:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8051a28:	4299      	cmp	r1, r3
 8051a2a:	bfb8      	it	lt
 8051a2c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
 8051a2e:	f008 fcde 	bl	805a3ee <adjust_owner_prio.isra.0>
 8051a32:	b900      	cbnz	r0, 8051a36 <z_impl_k_mutex_lock+0xce>
	if (resched) {
 8051a34:	b145      	cbz	r5, 8051a48 <z_impl_k_mutex_lock+0xe0>
		z_reschedule(&lock, key);
 8051a36:	4631      	mov	r1, r6
 8051a38:	4807      	ldr	r0, [pc, #28]	; (8051a58 <z_impl_k_mutex_lock+0xf0>)
 8051a3a:	f000 f9a9 	bl	8051d90 <z_reschedule>
	return -EAGAIN;
 8051a3e:	f06f 000a 	mvn.w	r0, #10
 8051a42:	e7bc      	b.n	80519be <z_impl_k_mutex_lock+0x56>
	bool resched = false;
 8051a44:	2500      	movs	r5, #0
 8051a46:	e7d0      	b.n	80519ea <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
 8051a48:	f386 8811 	msr	BASEPRI, r6
 8051a4c:	f3bf 8f6f 	isb	sy
 8051a50:	e7f5      	b.n	8051a3e <z_impl_k_mutex_lock+0xd6>
 8051a52:	bf00      	nop
 8051a54:	20038cc0 	.word	0x20038cc0
 8051a58:	20039aad 	.word	0x20039aad

08051a5c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 8051a5c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 8051a5e:	6883      	ldr	r3, [r0, #8]
{
 8051a60:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
 8051a62:	2b00      	cmp	r3, #0
 8051a64:	d033      	beq.n	8051ace <z_impl_k_mutex_unlock+0x72>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 8051a66:	4a1d      	ldr	r2, [pc, #116]	; (8051adc <z_impl_k_mutex_unlock+0x80>)
 8051a68:	6892      	ldr	r2, [r2, #8]
 8051a6a:	4293      	cmp	r3, r2
 8051a6c:	d132      	bne.n	8051ad4 <z_impl_k_mutex_unlock+0x78>
	--_current->base.sched_locked;
 8051a6e:	7bda      	ldrb	r2, [r3, #15]
 8051a70:	3a01      	subs	r2, #1
 8051a72:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 8051a74:	68c3      	ldr	r3, [r0, #12]
 8051a76:	2b01      	cmp	r3, #1
 8051a78:	d905      	bls.n	8051a86 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 8051a7a:	3b01      	subs	r3, #1
 8051a7c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 8051a7e:	f000 fb63 	bl	8052148 <k_sched_unlock>

	return 0;
 8051a82:	2000      	movs	r0, #0
}
 8051a84:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 8051a86:	f04f 0310 	mov.w	r3, #16
 8051a8a:	f3ef 8511 	mrs	r5, BASEPRI
 8051a8e:	f383 8812 	msr	BASEPRI_MAX, r3
 8051a92:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 8051a96:	6901      	ldr	r1, [r0, #16]
 8051a98:	6880      	ldr	r0, [r0, #8]
 8051a9a:	f008 fca8 	bl	805a3ee <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 8051a9e:	4620      	mov	r0, r4
 8051aa0:	f008 fdd1 	bl	805a646 <z_unpend_first_thread>
	mutex->owner = new_owner;
 8051aa4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 8051aa6:	b160      	cbz	r0, 8051ac2 <z_impl_k_mutex_unlock+0x66>
		mutex->owner_orig_prio = new_owner->base.prio;
 8051aa8:	f990 200e 	ldrsb.w	r2, [r0, #14]
 8051aac:	6122      	str	r2, [r4, #16]
 8051aae:	2200      	movs	r2, #0
 8051ab0:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
 8051ab4:	f008 fd56 	bl	805a564 <z_ready_thread>
		z_reschedule(&lock, key);
 8051ab8:	4629      	mov	r1, r5
 8051aba:	4809      	ldr	r0, [pc, #36]	; (8051ae0 <z_impl_k_mutex_unlock+0x84>)
 8051abc:	f000 f968 	bl	8051d90 <z_reschedule>
 8051ac0:	e7dd      	b.n	8051a7e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 8051ac2:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8051ac4:	f385 8811 	msr	BASEPRI, r5
 8051ac8:	f3bf 8f6f 	isb	sy
 8051acc:	e7d7      	b.n	8051a7e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 8051ace:	f06f 0015 	mvn.w	r0, #21
 8051ad2:	e7d7      	b.n	8051a84 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
 8051ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8051ad8:	e7d4      	b.n	8051a84 <z_impl_k_mutex_unlock+0x28>
 8051ada:	bf00      	nop
 8051adc:	20038cc0 	.word	0x20038cc0
 8051ae0:	20039aad 	.word	0x20039aad

08051ae4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8051ae4:	b538      	push	{r3, r4, r5, lr}
 8051ae6:	4604      	mov	r4, r0
	__asm__ volatile(
 8051ae8:	f04f 0310 	mov.w	r3, #16
 8051aec:	f3ef 8511 	mrs	r5, BASEPRI
 8051af0:	f383 8812 	msr	BASEPRI_MAX, r3
 8051af4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 8051af8:	f008 fda5 	bl	805a646 <z_unpend_first_thread>

	if (thread != NULL) {
 8051afc:	b150      	cbz	r0, 8051b14 <z_impl_k_sem_give+0x30>
 8051afe:	2200      	movs	r2, #0
 8051b00:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8051b04:	f008 fd2e 	bl	805a564 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 8051b08:	4629      	mov	r1, r5
 8051b0a:	4808      	ldr	r0, [pc, #32]	; (8051b2c <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 8051b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 8051b10:	f000 b93e 	b.w	8051d90 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8051b14:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 8051b18:	2102      	movs	r1, #2
 8051b1a:	f104 0010 	add.w	r0, r4, #16
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8051b1e:	429a      	cmp	r2, r3
 8051b20:	bf18      	it	ne
 8051b22:	3301      	addne	r3, #1
 8051b24:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 8051b26:	f008 ffab 	bl	805aa80 <z_handle_obj_poll_events>
}
 8051b2a:	e7ed      	b.n	8051b08 <z_impl_k_sem_give+0x24>
 8051b2c:	20039aae 	.word	0x20039aae

08051b30 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8051b30:	b513      	push	{r0, r1, r4, lr}
 8051b32:	f04f 0410 	mov.w	r4, #16
 8051b36:	f3ef 8111 	mrs	r1, BASEPRI
 8051b3a:	f384 8812 	msr	BASEPRI_MAX, r4
 8051b3e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 8051b42:	6884      	ldr	r4, [r0, #8]
 8051b44:	b144      	cbz	r4, 8051b58 <z_impl_k_sem_take+0x28>
		sem->count--;
 8051b46:	3c01      	subs	r4, #1
 8051b48:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 8051b4a:	f381 8811 	msr	BASEPRI, r1
 8051b4e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8051b52:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 8051b54:	b002      	add	sp, #8
 8051b56:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8051b58:	ea52 0403 	orrs.w	r4, r2, r3
 8051b5c:	d106      	bne.n	8051b6c <z_impl_k_sem_take+0x3c>
 8051b5e:	f381 8811 	msr	BASEPRI, r1
 8051b62:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8051b66:	f06f 000f 	mvn.w	r0, #15
 8051b6a:	e7f3      	b.n	8051b54 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8051b6c:	e9cd 2300 	strd	r2, r3, [sp]
 8051b70:	4602      	mov	r2, r0
 8051b72:	4802      	ldr	r0, [pc, #8]	; (8051b7c <z_impl_k_sem_take+0x4c>)
 8051b74:	f000 fa50 	bl	8052018 <z_pend_curr>
	return ret;
 8051b78:	e7ec      	b.n	8051b54 <z_impl_k_sem_take+0x24>
 8051b7a:	bf00      	nop
 8051b7c:	20039aae 	.word	0x20039aae

08051b80 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
 8051b80:	b570      	push	{r4, r5, r6, lr}
 8051b82:	4604      	mov	r4, r0
	__asm__ volatile(
 8051b84:	f04f 0310 	mov.w	r3, #16
 8051b88:	f3ef 8511 	mrs	r5, BASEPRI
 8051b8c:	f383 8812 	msr	BASEPRI_MAX, r3
 8051b90:	f3bf 8f6f 	isb	sy
 8051b94:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
 8051b98:	4620      	mov	r0, r4
 8051b9a:	f008 fd54 	bl	805a646 <z_unpend_first_thread>
		if (thread == NULL) {
 8051b9e:	b120      	cbz	r0, 8051baa <z_impl_k_sem_reset+0x2a>
 8051ba0:	f8c0 60b0 	str.w	r6, [r0, #176]	; 0xb0
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
 8051ba4:	f008 fcde 	bl	805a564 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
 8051ba8:	e7f6      	b.n	8051b98 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
 8051baa:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 8051bac:	2102      	movs	r1, #2
 8051bae:	f104 0010 	add.w	r0, r4, #16
 8051bb2:	f008 ff65 	bl	805aa80 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
 8051bb6:	4629      	mov	r1, r5
 8051bb8:	4802      	ldr	r0, [pc, #8]	; (8051bc4 <z_impl_k_sem_reset+0x44>)
}
 8051bba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
 8051bbe:	f000 b8e7 	b.w	8051d90 <z_reschedule>
 8051bc2:	bf00      	nop
 8051bc4:	20039aae 	.word	0x20039aae

08051bc8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 8051bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 8051bca:	4b09      	ldr	r3, [pc, #36]	; (8051bf0 <k_sys_work_q_init+0x28>)
 8051bcc:	2400      	movs	r4, #0
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 8051bce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8051bd2:	4908      	ldr	r1, [pc, #32]	; (8051bf4 <k_sys_work_q_init+0x2c>)
	struct k_work_queue_config cfg = {
 8051bd4:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
 8051bd6:	ab02      	add	r3, sp, #8
 8051bd8:	4807      	ldr	r0, [pc, #28]	; (8051bf8 <k_sys_work_q_init+0x30>)
 8051bda:	9300      	str	r3, [sp, #0]
 8051bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct k_work_queue_config cfg = {
 8051be0:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
 8051be4:	f000 f85e 	bl	8051ca4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 8051be8:	4620      	mov	r0, r4
 8051bea:	b004      	add	sp, #16
 8051bec:	bd10      	pop	{r4, pc}
 8051bee:	bf00      	nop
 8051bf0:	080632d9 	.word	0x080632d9
 8051bf4:	2003be00 	.word	0x2003be00
 8051bf8:	200228d0 	.word	0x200228d0

08051bfc <submit_to_queue_locked>:
{
 8051bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
 8051bfe:	68c3      	ldr	r3, [r0, #12]
{
 8051c00:	4604      	mov	r4, r0
 8051c02:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8051c04:	079a      	lsls	r2, r3, #30
 8051c06:	f3c3 0540 	ubfx	r5, r3, #1, #1
 8051c0a:	d41e      	bmi.n	8051c4a <submit_to_queue_locked+0x4e>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 8051c0c:	075f      	lsls	r7, r3, #29
 8051c0e:	d41e      	bmi.n	8051c4e <submit_to_queue_locked+0x52>
		if (*queuep == NULL) {
 8051c10:	680a      	ldr	r2, [r1, #0]
 8051c12:	b90a      	cbnz	r2, 8051c18 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
 8051c14:	6882      	ldr	r2, [r0, #8]
 8051c16:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 8051c18:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
 8051c1a:	bf45      	ittet	mi
 8051c1c:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
 8051c1e:	2502      	movmi	r5, #2
		ret = 1;
 8051c20:	2501      	movpl	r5, #1
			*queuep = work->queue;
 8051c22:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
 8051c24:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
 8051c26:	b37f      	cbz	r7, 8051c88 <submit_to_queue_locked+0x8c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 8051c28:	4b1a      	ldr	r3, [pc, #104]	; (8051c94 <submit_to_queue_locked+0x98>)
 8051c2a:	689b      	ldr	r3, [r3, #8]
 8051c2c:	42bb      	cmp	r3, r7
 8051c2e:	d111      	bne.n	8051c54 <submit_to_queue_locked+0x58>
 8051c30:	f008 fb6a 	bl	805a308 <k_is_in_isr>
 8051c34:	f080 0001 	eor.w	r0, r0, #1
 8051c38:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
 8051c3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8051c3e:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 8051c40:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8051c44:	d523      	bpl.n	8051c8e <submit_to_queue_locked+0x92>
	} else if (draining && !chained) {
 8051c46:	b13a      	cbz	r2, 8051c58 <submit_to_queue_locked+0x5c>
 8051c48:	b940      	cbnz	r0, 8051c5c <submit_to_queue_locked+0x60>
		ret = -EBUSY;
 8051c4a:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
 8051c4e:	2300      	movs	r3, #0
 8051c50:	6033      	str	r3, [r6, #0]
	return ret;
 8051c52:	e013      	b.n	8051c7c <submit_to_queue_locked+0x80>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 8051c54:	2000      	movs	r0, #0
 8051c56:	e7f0      	b.n	8051c3a <submit_to_queue_locked+0x3e>
	} else if (plugged && !draining) {
 8051c58:	071b      	lsls	r3, r3, #28
 8051c5a:	d4f6      	bmi.n	8051c4a <submit_to_queue_locked+0x4e>
	parent->next = child;
 8051c5c:	2300      	movs	r3, #0
 8051c5e:	6023      	str	r3, [r4, #0]
	return list->tail;
 8051c60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
Z_GENLIST_APPEND(slist, snode)
 8051c64:	b963      	cbnz	r3, 8051c80 <submit_to_queue_locked+0x84>
	list->head = node;
 8051c66:	e9c7 443e 	strd	r4, r4, [r7, #248]	; 0xf8
		(void)notify_queue_locked(queue);
 8051c6a:	4638      	mov	r0, r7
 8051c6c:	f008 fbe9 	bl	805a442 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
 8051c70:	68e3      	ldr	r3, [r4, #12]
 8051c72:	f043 0304 	orr.w	r3, r3, #4
 8051c76:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
 8051c78:	6833      	ldr	r3, [r6, #0]
 8051c7a:	60a3      	str	r3, [r4, #8]
}
 8051c7c:	4628      	mov	r0, r5
 8051c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
 8051c80:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8051c82:	f8c7 40fc 	str.w	r4, [r7, #252]	; 0xfc
}
 8051c86:	e7f0      	b.n	8051c6a <submit_to_queue_locked+0x6e>
		return -EINVAL;
 8051c88:	f06f 0515 	mvn.w	r5, #21
 8051c8c:	e7df      	b.n	8051c4e <submit_to_queue_locked+0x52>
		ret = -ENODEV;
 8051c8e:	f06f 0512 	mvn.w	r5, #18
 8051c92:	e7dc      	b.n	8051c4e <submit_to_queue_locked+0x52>
 8051c94:	20038cc0 	.word	0x20038cc0

08051c98 <k_work_submit>:
{
 8051c98:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 8051c9a:	4801      	ldr	r0, [pc, #4]	; (8051ca0 <k_work_submit+0x8>)
 8051c9c:	f008 bbf6 	b.w	805a48c <k_work_submit_to_queue>
 8051ca0:	200228d0 	.word	0x200228d0

08051ca4 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 8051ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8051ca6:	4604      	mov	r4, r0
	list->head = NULL;
 8051ca8:	2000      	movs	r0, #0
 8051caa:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
 8051cac:	e9c4 003e 	strd	r0, r0, [r4, #248]	; 0xf8
 8051cb0:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8051cb4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->tail = (sys_dnode_t *)list;
 8051cb6:	e9c4 0040 	strd	r0, r0, [r4, #256]	; 0x100
 8051cba:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8051cbe:	e9c4 0042 	strd	r0, r0, [r4, #264]	; 0x108

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 8051cc2:	b31d      	cbz	r5, 8051d0c <k_work_queue_start+0x68>
 8051cc4:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
 8051cc6:	2800      	cmp	r0, #0
 8051cc8:	f240 1001 	movw	r0, #257	; 0x101
 8051ccc:	bf08      	it	eq
 8051cce:	2001      	moveq	r0, #1
	*flagp = flags;
 8051cd0:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8051cd4:	2000      	movs	r0, #0
 8051cd6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8051cda:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8051cde:	9400      	str	r4, [sp, #0]
 8051ce0:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8051ce4:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8051ce8:	4b09      	ldr	r3, [pc, #36]	; (8051d10 <k_work_queue_start+0x6c>)
 8051cea:	4620      	mov	r0, r4
 8051cec:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8051cf0:	f7ff fd10 	bl	8051714 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 8051cf4:	b125      	cbz	r5, 8051d00 <k_work_queue_start+0x5c>
 8051cf6:	6829      	ldr	r1, [r5, #0]
 8051cf8:	b111      	cbz	r1, 8051d00 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
 8051cfa:	4620      	mov	r0, r4
 8051cfc:	f7ff fc5a 	bl	80515b4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 8051d00:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 8051d02:	b009      	add	sp, #36	; 0x24
 8051d04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8051d08:	f008 bb06 	b.w	805a318 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 8051d0c:	2001      	movs	r0, #1
 8051d0e:	e7df      	b.n	8051cd0 <k_work_queue_start+0x2c>
 8051d10:	08041779 	.word	0x08041779

08051d14 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 8051d14:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 8051d16:	4c08      	ldr	r4, [pc, #32]	; (8051d38 <z_reset_time_slice+0x24>)
 8051d18:	6823      	ldr	r3, [r4, #0]
 8051d1a:	b15b      	cbz	r3, 8051d34 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 8051d1c:	f7fc fc1a 	bl	804e554 <sys_clock_elapsed>
 8051d20:	6822      	ldr	r2, [r4, #0]
 8051d22:	4906      	ldr	r1, [pc, #24]	; (8051d3c <z_reset_time_slice+0x28>)
 8051d24:	4410      	add	r0, r2
		z_set_timeout_expiry(slice_time, false);
	}
}
 8051d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 8051d2a:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
 8051d2c:	2100      	movs	r1, #0
 8051d2e:	4610      	mov	r0, r2
 8051d30:	f008 bce5 	b.w	805a6fe <z_set_timeout_expiry>
}
 8051d34:	bd10      	pop	{r4, pc}
 8051d36:	bf00      	nop
 8051d38:	20038cfc 	.word	0x20038cfc
 8051d3c:	20038cc0 	.word	0x20038cc0

08051d40 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 8051d40:	b510      	push	{r4, lr}
 8051d42:	f04f 0310 	mov.w	r3, #16
 8051d46:	f3ef 8411 	mrs	r4, BASEPRI
 8051d4a:	f383 8812 	msr	BASEPRI_MAX, r3
 8051d4e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 8051d52:	2200      	movs	r2, #0
 8051d54:	4b0b      	ldr	r3, [pc, #44]	; (8051d84 <k_sched_time_slice_set+0x44>)
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 8051d56:	4290      	cmp	r0, r2
		_current_cpu->slice_ticks = 0;
 8051d58:	611a      	str	r2, [r3, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
 8051d5a:	f04f 030a 	mov.w	r3, #10
 8051d5e:	4a0a      	ldr	r2, [pc, #40]	; (8051d88 <k_sched_time_slice_set+0x48>)
 8051d60:	fb00 f303 	mul.w	r3, r0, r3
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 8051d64:	dc09      	bgt.n	8051d7a <k_sched_time_slice_set+0x3a>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
 8051d66:	6013      	str	r3, [r2, #0]
		}
		slice_max_prio = prio;
 8051d68:	4b08      	ldr	r3, [pc, #32]	; (8051d8c <k_sched_time_slice_set+0x4c>)
 8051d6a:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 8051d6c:	f7ff ffd2 	bl	8051d14 <z_reset_time_slice>
	__asm__ volatile(
 8051d70:	f384 8811 	msr	BASEPRI, r4
 8051d74:	f3bf 8f6f 	isb	sy
	}
}
 8051d78:	bd10      	pop	{r4, pc}
			slice_time = MAX(2, slice_time);
 8051d7a:	2b02      	cmp	r3, #2
 8051d7c:	bfb8      	it	lt
 8051d7e:	2302      	movlt	r3, #2
 8051d80:	e7f1      	b.n	8051d66 <k_sched_time_slice_set+0x26>
 8051d82:	bf00      	nop
 8051d84:	20038cc0 	.word	0x20038cc0
 8051d88:	20038cfc 	.word	0x20038cfc
 8051d8c:	20038cf8 	.word	0x20038cf8

08051d90 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8051d90:	b949      	cbnz	r1, 8051da6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8051d92:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 8051d96:	b930      	cbnz	r0, 8051da6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 8051d98:	4b05      	ldr	r3, [pc, #20]	; (8051db0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 8051d9a:	699a      	ldr	r2, [r3, #24]
 8051d9c:	689b      	ldr	r3, [r3, #8]
 8051d9e:	429a      	cmp	r2, r3
 8051da0:	d001      	beq.n	8051da6 <z_reschedule+0x16>
	ret = arch_swap(key);
 8051da2:	f7f6 b9b9 	b.w	8048118 <arch_swap>
 8051da6:	f381 8811 	msr	BASEPRI, r1
 8051daa:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
 8051dae:	4770      	bx	lr
 8051db0:	20038cc0 	.word	0x20038cc0

08051db4 <k_sched_lock>:
	__asm__ volatile(
 8051db4:	f04f 0310 	mov.w	r3, #16
 8051db8:	f3ef 8111 	mrs	r1, BASEPRI
 8051dbc:	f383 8812 	msr	BASEPRI_MAX, r3
 8051dc0:	f3bf 8f6f 	isb	sy
 8051dc4:	4b04      	ldr	r3, [pc, #16]	; (8051dd8 <k_sched_lock+0x24>)
 8051dc6:	689a      	ldr	r2, [r3, #8]
 8051dc8:	7bd3      	ldrb	r3, [r2, #15]
 8051dca:	3b01      	subs	r3, #1
 8051dcc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8051dce:	f381 8811 	msr	BASEPRI, r1
 8051dd2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 8051dd6:	4770      	bx	lr
 8051dd8:	20038cc0 	.word	0x20038cc0

08051ddc <update_cache>:
{
 8051ddc:	b538      	push	{r3, r4, r5, lr}
 8051dde:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
 8051de0:	480c      	ldr	r0, [pc, #48]	; (8051e14 <update_cache+0x38>)
 8051de2:	f008 fbb9 	bl	805a558 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8051de6:	4d0c      	ldr	r5, [pc, #48]	; (8051e18 <update_cache+0x3c>)
 8051de8:	4604      	mov	r4, r0
 8051dea:	b900      	cbnz	r0, 8051dee <update_cache+0x12>
 8051dec:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 8051dee:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8051df0:	b94a      	cbnz	r2, 8051e06 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
 8051df2:	7b5a      	ldrb	r2, [r3, #13]
 8051df4:	06d2      	lsls	r2, r2, #27
 8051df6:	d106      	bne.n	8051e06 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8051df8:	69a2      	ldr	r2, [r4, #24]
 8051dfa:	b922      	cbnz	r2, 8051e06 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
 8051dfc:	89da      	ldrh	r2, [r3, #14]
 8051dfe:	2a7f      	cmp	r2, #127	; 0x7f
 8051e00:	d901      	bls.n	8051e06 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
 8051e02:	61ab      	str	r3, [r5, #24]
}
 8051e04:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 8051e06:	429c      	cmp	r4, r3
 8051e08:	d001      	beq.n	8051e0e <update_cache+0x32>
			z_reset_time_slice();
 8051e0a:	f7ff ff83 	bl	8051d14 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8051e0e:	61ac      	str	r4, [r5, #24]
}
 8051e10:	e7f8      	b.n	8051e04 <update_cache+0x28>
 8051e12:	bf00      	nop
 8051e14:	20038cdc 	.word	0x20038cdc
 8051e18:	20038cc0 	.word	0x20038cc0

08051e1c <move_thread_to_end_of_prio_q>:
{
 8051e1c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 8051e1e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 8051e22:	4601      	mov	r1, r0
	return (thread->base.thread_state & state) != 0U;
 8051e24:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
 8051e26:	2a00      	cmp	r2, #0
 8051e28:	da04      	bge.n	8051e34 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8051e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8051e2e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 8051e30:	f008 fb3d 	bl	805a4ae <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8051e34:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 8051e36:	4a15      	ldr	r2, [pc, #84]	; (8051e8c <move_thread_to_end_of_prio_q+0x70>)
 8051e38:	f063 037f 	orn	r3, r3, #127	; 0x7f
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8051e3c:	f102 051c 	add.w	r5, r2, #28
 8051e40:	734b      	strb	r3, [r1, #13]
	return (node == list->tail) ? NULL : node->next;
 8051e42:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8051e46:	42ab      	cmp	r3, r5
 8051e48:	d01b      	beq.n	8051e82 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8051e4a:	b1d3      	cbz	r3, 8051e82 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
 8051e4c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 8051e50:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
 8051e54:	4286      	cmp	r6, r0
 8051e56:	d00f      	beq.n	8051e78 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
 8051e58:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8051e5a:	2800      	cmp	r0, #0
 8051e5c:	dd0c      	ble.n	8051e78 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8051e5e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 8051e60:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 8051e64:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8051e66:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 8051e68:	6890      	ldr	r0, [r2, #8]
 8051e6a:	1a43      	subs	r3, r0, r1
 8051e6c:	4258      	negs	r0, r3
}
 8051e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 8051e72:	4158      	adcs	r0, r3
 8051e74:	f7ff bfb2 	b.w	8051ddc <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8051e78:	42a3      	cmp	r3, r4
 8051e7a:	d002      	beq.n	8051e82 <move_thread_to_end_of_prio_q+0x66>
 8051e7c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8051e7e:	2b00      	cmp	r3, #0
 8051e80:	d1e6      	bne.n	8051e50 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
 8051e82:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
 8051e86:	6021      	str	r1, [r4, #0]
	list->tail = node;
 8051e88:	6211      	str	r1, [r2, #32]
}
 8051e8a:	e7ed      	b.n	8051e68 <move_thread_to_end_of_prio_q+0x4c>
 8051e8c:	20038cc0 	.word	0x20038cc0

08051e90 <z_time_slice>:
{
 8051e90:	4601      	mov	r1, r0
 8051e92:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8051e94:	f04f 0310 	mov.w	r3, #16
 8051e98:	f3ef 8411 	mrs	r4, BASEPRI
 8051e9c:	f383 8812 	msr	BASEPRI_MAX, r3
 8051ea0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 8051ea4:	4b15      	ldr	r3, [pc, #84]	; (8051efc <z_time_slice+0x6c>)
 8051ea6:	4a16      	ldr	r2, [pc, #88]	; (8051f00 <z_time_slice+0x70>)
 8051ea8:	6898      	ldr	r0, [r3, #8]
 8051eaa:	6815      	ldr	r5, [r2, #0]
 8051eac:	42a8      	cmp	r0, r5
 8051eae:	d106      	bne.n	8051ebe <z_time_slice+0x2e>
			z_reset_time_slice();
 8051eb0:	f7ff ff30 	bl	8051d14 <z_reset_time_slice>
	__asm__ volatile(
 8051eb4:	f384 8811 	msr	BASEPRI, r4
 8051eb8:	f3bf 8f6f 	isb	sy
}
 8051ebc:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 8051ebe:	2500      	movs	r5, #0
 8051ec0:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
 8051ec2:	4a10      	ldr	r2, [pc, #64]	; (8051f04 <z_time_slice+0x74>)
 8051ec4:	6812      	ldr	r2, [r2, #0]
 8051ec6:	b1ba      	cbz	r2, 8051ef8 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 8051ec8:	89c2      	ldrh	r2, [r0, #14]
 8051eca:	2a7f      	cmp	r2, #127	; 0x7f
 8051ecc:	d814      	bhi.n	8051ef8 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
 8051ece:	7b42      	ldrb	r2, [r0, #13]
 8051ed0:	06d2      	lsls	r2, r2, #27
 8051ed2:	d111      	bne.n	8051ef8 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8051ed4:	4a0c      	ldr	r2, [pc, #48]	; (8051f08 <z_time_slice+0x78>)
 8051ed6:	f990 500e 	ldrsb.w	r5, [r0, #14]
 8051eda:	6812      	ldr	r2, [r2, #0]
 8051edc:	4295      	cmp	r5, r2
 8051ede:	db0b      	blt.n	8051ef8 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 8051ee0:	4a0a      	ldr	r2, [pc, #40]	; (8051f0c <z_time_slice+0x7c>)
 8051ee2:	4290      	cmp	r0, r2
 8051ee4:	d008      	beq.n	8051ef8 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
 8051ee6:	691a      	ldr	r2, [r3, #16]
 8051ee8:	428a      	cmp	r2, r1
 8051eea:	dc02      	bgt.n	8051ef2 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
 8051eec:	f7ff ff96 	bl	8051e1c <move_thread_to_end_of_prio_q>
 8051ef0:	e7de      	b.n	8051eb0 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
 8051ef2:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
 8051ef4:	611a      	str	r2, [r3, #16]
 8051ef6:	e7dd      	b.n	8051eb4 <z_time_slice+0x24>
 8051ef8:	2200      	movs	r2, #0
 8051efa:	e7fb      	b.n	8051ef4 <z_time_slice+0x64>
 8051efc:	20038cc0 	.word	0x20038cc0
 8051f00:	20038cf4 	.word	0x20038cf4
 8051f04:	20038cfc 	.word	0x20038cfc
 8051f08:	20038cf8 	.word	0x20038cf8
 8051f0c:	200226e0 	.word	0x200226e0

08051f10 <ready_thread>:
{
 8051f10:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8051f12:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8051f16:	7b43      	ldrb	r3, [r0, #13]
 8051f18:	2a00      	cmp	r2, #0
 8051f1a:	db2a      	blt.n	8051f72 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8051f1c:	06da      	lsls	r2, r3, #27
 8051f1e:	d128      	bne.n	8051f72 <ready_thread+0x62>
 8051f20:	6982      	ldr	r2, [r0, #24]
 8051f22:	bb32      	cbnz	r2, 8051f72 <ready_thread+0x62>
	thread->base.thread_state |= _THREAD_QUEUED;
 8051f24:	f063 037f 	orn	r3, r3, #127	; 0x7f
	return list->head == list;
 8051f28:	4a13      	ldr	r2, [pc, #76]	; (8051f78 <ready_thread+0x68>)
 8051f2a:	7343      	strb	r3, [r0, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8051f2c:	f102 051c 	add.w	r5, r2, #28
	return (node == list->tail) ? NULL : node->next;
 8051f30:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8051f34:	42ab      	cmp	r3, r5
 8051f36:	d017      	beq.n	8051f68 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8051f38:	b1b3      	cbz	r3, 8051f68 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
 8051f3a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8051f3e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 8051f42:	428e      	cmp	r6, r1
 8051f44:	d00b      	beq.n	8051f5e <ready_thread+0x4e>
		return b2 - b1;
 8051f46:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8051f48:	2900      	cmp	r1, #0
 8051f4a:	dd08      	ble.n	8051f5e <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
 8051f4c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8051f4e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 8051f52:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8051f54:	6058      	str	r0, [r3, #4]
		update_cache(0);
 8051f56:	2000      	movs	r0, #0
}
 8051f58:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8051f5a:	f7ff bf3f 	b.w	8051ddc <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8051f5e:	42a3      	cmp	r3, r4
 8051f60:	d002      	beq.n	8051f68 <ready_thread+0x58>
 8051f62:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8051f64:	2b00      	cmp	r3, #0
 8051f66:	d1ea      	bne.n	8051f3e <ready_thread+0x2e>
	node->prev = tail;
 8051f68:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
 8051f6c:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8051f6e:	6210      	str	r0, [r2, #32]
}
 8051f70:	e7f1      	b.n	8051f56 <ready_thread+0x46>
}
 8051f72:	bc70      	pop	{r4, r5, r6}
 8051f74:	4770      	bx	lr
 8051f76:	bf00      	nop
 8051f78:	20038cc0 	.word	0x20038cc0

08051f7c <z_sched_start>:
{
 8051f7c:	b510      	push	{r4, lr}
	__asm__ volatile(
 8051f7e:	f04f 0210 	mov.w	r2, #16
 8051f82:	f3ef 8411 	mrs	r4, BASEPRI
 8051f86:	f382 8812 	msr	BASEPRI_MAX, r2
 8051f8a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8051f8e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 8051f90:	0751      	lsls	r1, r2, #29
 8051f92:	d404      	bmi.n	8051f9e <z_sched_start+0x22>
	__asm__ volatile(
 8051f94:	f384 8811 	msr	BASEPRI, r4
 8051f98:	f3bf 8f6f 	isb	sy
}
 8051f9c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8051f9e:	f022 0204 	bic.w	r2, r2, #4
 8051fa2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 8051fa4:	f7ff ffb4 	bl	8051f10 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8051fa8:	4621      	mov	r1, r4
 8051faa:	4802      	ldr	r0, [pc, #8]	; (8051fb4 <z_sched_start+0x38>)
}
 8051fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8051fb0:	f7ff beee 	b.w	8051d90 <z_reschedule>
 8051fb4:	20039ab0 	.word	0x20039ab0

08051fb8 <unready_thread>:
{
 8051fb8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 8051fba:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 8051fbe:	4601      	mov	r1, r0
	return (thread->base.thread_state & state) != 0U;
 8051fc0:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
 8051fc2:	2a00      	cmp	r2, #0
 8051fc4:	da04      	bge.n	8051fd0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8051fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8051fca:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8051fcc:	f008 fa6f 	bl	805a4ae <sys_dlist_remove>
	update_cache(thread == _current);
 8051fd0:	4b04      	ldr	r3, [pc, #16]	; (8051fe4 <unready_thread+0x2c>)
 8051fd2:	6898      	ldr	r0, [r3, #8]
 8051fd4:	1a43      	subs	r3, r0, r1
 8051fd6:	4258      	negs	r0, r3
 8051fd8:	4158      	adcs	r0, r3
}
 8051fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 8051fde:	f7ff befd 	b.w	8051ddc <update_cache>
 8051fe2:	bf00      	nop
 8051fe4:	20038cc0 	.word	0x20038cc0

08051fe8 <pend_locked>:
{
 8051fe8:	b570      	push	{r4, r5, r6, lr}
 8051fea:	4615      	mov	r5, r2
 8051fec:	461c      	mov	r4, r3
 8051fee:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
 8051ff0:	f008 faea 	bl	805a5c8 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8051ff4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8051ff8:	bf08      	it	eq
 8051ffa:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 8051ffe:	d008      	beq.n	8052012 <pend_locked+0x2a>
 8052000:	462a      	mov	r2, r5
 8052002:	4623      	mov	r3, r4
 8052004:	f106 0018 	add.w	r0, r6, #24
 8052008:	4902      	ldr	r1, [pc, #8]	; (8052014 <pend_locked+0x2c>)
}
 805200a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 805200e:	f000 ba41 	b.w	8052494 <z_add_timeout>
 8052012:	bd70      	pop	{r4, r5, r6, pc}
 8052014:	0805a585 	.word	0x0805a585

08052018 <z_pend_curr>:
	pending_current = _current;
 8052018:	480c      	ldr	r0, [pc, #48]	; (805204c <z_pend_curr+0x34>)
{
 805201a:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
 805201c:	6886      	ldr	r6, [r0, #8]
{
 805201e:	460c      	mov	r4, r1
	pending_current = _current;
 8052020:	4d0b      	ldr	r5, [pc, #44]	; (8052050 <z_pend_curr+0x38>)
{
 8052022:	4611      	mov	r1, r2
	pending_current = _current;
 8052024:	602e      	str	r6, [r5, #0]
{
 8052026:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
 805202a:	f04f 0610 	mov.w	r6, #16
 805202e:	f3ef 8511 	mrs	r5, BASEPRI
 8052032:	f386 8812 	msr	BASEPRI_MAX, r6
 8052036:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
 805203a:	6880      	ldr	r0, [r0, #8]
 805203c:	f7ff ffd4 	bl	8051fe8 <pend_locked>
 8052040:	4620      	mov	r0, r4
}
 8052042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8052046:	f7f6 b867 	b.w	8048118 <arch_swap>
 805204a:	bf00      	nop
 805204c:	20038cc0 	.word	0x20038cc0
 8052050:	20038cf4 	.word	0x20038cf4

08052054 <z_set_prio>:
{
 8052054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8052056:	4604      	mov	r4, r0
 8052058:	f04f 0310 	mov.w	r3, #16
 805205c:	f3ef 8611 	mrs	r6, BASEPRI
 8052060:	f383 8812 	msr	BASEPRI_MAX, r3
 8052064:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 8052068:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
 805206a:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 805206c:	06da      	lsls	r2, r3, #27
 805206e:	d133      	bne.n	80520d8 <z_set_prio+0x84>
		if (need_sched) {
 8052070:	6982      	ldr	r2, [r0, #24]
 8052072:	bb8a      	cbnz	r2, 80520d8 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8052074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8052078:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 805207a:	f008 fa18 	bl	805a4ae <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 805207e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
 8052080:	4a17      	ldr	r2, [pc, #92]	; (80520e0 <z_set_prio+0x8c>)
 8052082:	f063 037f 	orn	r3, r3, #127	; 0x7f
				thread->base.prio = prio;
 8052086:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 8052088:	7343      	strb	r3, [r0, #13]
 805208a:	4610      	mov	r0, r2
 805208c:	f850 3f1c 	ldr.w	r3, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8052090:	4283      	cmp	r3, r0
 8052092:	d01b      	beq.n	80520cc <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8052094:	b1d3      	cbz	r3, 80520cc <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
 8052096:	6a17      	ldr	r7, [r2, #32]
	int32_t b2 = thread_2->base.prio;
 8052098:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
 805209c:	42a9      	cmp	r1, r5
 805209e:	d010      	beq.n	80520c2 <z_set_prio+0x6e>
		return b2 - b1;
 80520a0:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 80520a2:	2d00      	cmp	r5, #0
 80520a4:	dd0d      	ble.n	80520c2 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
 80520a6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80520a8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 80520ac:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 80520ae:	605c      	str	r4, [r3, #4]
			update_cache(1);
 80520b0:	2001      	movs	r0, #1
 80520b2:	f7ff fe93 	bl	8051ddc <update_cache>
 80520b6:	2001      	movs	r0, #1
	__asm__ volatile(
 80520b8:	f386 8811 	msr	BASEPRI, r6
 80520bc:	f3bf 8f6f 	isb	sy
}
 80520c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 80520c2:	42bb      	cmp	r3, r7
 80520c4:	d002      	beq.n	80520cc <z_set_prio+0x78>
 80520c6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80520c8:	2b00      	cmp	r3, #0
 80520ca:	d1e5      	bne.n	8052098 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
 80520cc:	6a13      	ldr	r3, [r2, #32]
	node->prev = tail;
 80520ce:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
 80520d2:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80520d4:	6214      	str	r4, [r2, #32]
}
 80520d6:	e7eb      	b.n	80520b0 <z_set_prio+0x5c>
			thread->base.prio = prio;
 80520d8:	2000      	movs	r0, #0
 80520da:	73a1      	strb	r1, [r4, #14]
 80520dc:	e7ec      	b.n	80520b8 <z_set_prio+0x64>
 80520de:	bf00      	nop
 80520e0:	20038cc0 	.word	0x20038cc0

080520e4 <z_impl_k_thread_suspend>:
{
 80520e4:	b570      	push	{r4, r5, r6, lr}
 80520e6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 80520e8:	3018      	adds	r0, #24
 80520ea:	f008 faf2 	bl	805a6d2 <z_abort_timeout>
	__asm__ volatile(
 80520ee:	f04f 0310 	mov.w	r3, #16
 80520f2:	f3ef 8611 	mrs	r6, BASEPRI
 80520f6:	f383 8812 	msr	BASEPRI_MAX, r3
 80520fa:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 80520fe:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 8052102:	7b63      	ldrb	r3, [r4, #13]
 8052104:	2a00      	cmp	r2, #0
 8052106:	da05      	bge.n	8052114 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8052108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
 805210c:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
 805210e:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8052110:	f008 f9cd 	bl	805a4ae <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8052114:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
 8052116:	4d0b      	ldr	r5, [pc, #44]	; (8052144 <z_impl_k_thread_suspend+0x60>)
 8052118:	f043 0310 	orr.w	r3, r3, #16
 805211c:	68a8      	ldr	r0, [r5, #8]
 805211e:	7363      	strb	r3, [r4, #13]
 8052120:	1b03      	subs	r3, r0, r4
 8052122:	4258      	negs	r0, r3
 8052124:	4158      	adcs	r0, r3
 8052126:	f7ff fe59 	bl	8051ddc <update_cache>
	__asm__ volatile(
 805212a:	f386 8811 	msr	BASEPRI, r6
 805212e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 8052132:	68ab      	ldr	r3, [r5, #8]
 8052134:	42a3      	cmp	r3, r4
 8052136:	d103      	bne.n	8052140 <z_impl_k_thread_suspend+0x5c>
}
 8052138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 805213c:	f008 ba02 	b.w	805a544 <z_reschedule_unlocked>
}
 8052140:	bd70      	pop	{r4, r5, r6, pc}
 8052142:	bf00      	nop
 8052144:	20038cc0 	.word	0x20038cc0

08052148 <k_sched_unlock>:
{
 8052148:	b510      	push	{r4, lr}
	__asm__ volatile(
 805214a:	f04f 0310 	mov.w	r3, #16
 805214e:	f3ef 8411 	mrs	r4, BASEPRI
 8052152:	f383 8812 	msr	BASEPRI_MAX, r3
 8052156:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 805215a:	4b08      	ldr	r3, [pc, #32]	; (805217c <k_sched_unlock+0x34>)
		update_cache(0);
 805215c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
 805215e:	689a      	ldr	r2, [r3, #8]
 8052160:	7bd3      	ldrb	r3, [r2, #15]
 8052162:	3301      	adds	r3, #1
 8052164:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8052166:	f7ff fe39 	bl	8051ddc <update_cache>
	__asm__ volatile(
 805216a:	f384 8811 	msr	BASEPRI, r4
 805216e:	f3bf 8f6f 	isb	sy
}
 8052172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8052176:	f008 b9e5 	b.w	805a544 <z_reschedule_unlocked>
 805217a:	bf00      	nop
 805217c:	20038cc0 	.word	0x20038cc0

08052180 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8052180:	4b04      	ldr	r3, [pc, #16]	; (8052194 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8052182:	2100      	movs	r1, #0
 8052184:	f103 021c 	add.w	r2, r3, #28
 8052188:	4608      	mov	r0, r1
	list->tail = (sys_dnode_t *)list;
 805218a:	e9c3 2207 	strd	r2, r2, [r3, #28]
 805218e:	f7ff bdd7 	b.w	8051d40 <k_sched_time_slice_set>
 8052192:	bf00      	nop
 8052194:	20038cc0 	.word	0x20038cc0

08052198 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
 8052198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 805219a:	f04f 0310 	mov.w	r3, #16
 805219e:	f3ef 8511 	mrs	r5, BASEPRI
 80521a2:	f383 8812 	msr	BASEPRI_MAX, r3
 80521a6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
 80521aa:	491a      	ldr	r1, [pc, #104]	; (8052214 <z_impl_k_yield+0x7c>)
 80521ac:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80521ae:	7b43      	ldrb	r3, [r0, #13]
 80521b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80521b4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80521b6:	f008 f97a 	bl	805a4ae <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
 80521ba:	688b      	ldr	r3, [r1, #8]
	return list->head == list;
 80521bc:	4608      	mov	r0, r1
	thread->base.thread_state |= _THREAD_QUEUED;
 80521be:	7b5a      	ldrb	r2, [r3, #13]
 80521c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80521c4:	735a      	strb	r2, [r3, #13]
 80521c6:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80521ca:	4282      	cmp	r2, r0
 80521cc:	d01c      	beq.n	8052208 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80521ce:	b1da      	cbz	r2, 8052208 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
 80521d0:	6a0f      	ldr	r7, [r1, #32]
	int32_t b1 = thread_1->base.prio;
 80521d2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 80521d6:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
 80521da:	42a6      	cmp	r6, r4
 80521dc:	d00f      	beq.n	80521fe <z_impl_k_yield+0x66>
		return b2 - b1;
 80521de:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 80521e0:	2c00      	cmp	r4, #0
 80521e2:	dd0c      	ble.n	80521fe <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
 80521e4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 80521e6:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 80521ea:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 80521ec:	6053      	str	r3, [r2, #4]
	update_cache(1);
 80521ee:	2001      	movs	r0, #1
 80521f0:	f7ff fdf4 	bl	8051ddc <update_cache>
 80521f4:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 80521f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80521fa:	f7f5 bf8d 	b.w	8048118 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 80521fe:	42ba      	cmp	r2, r7
 8052200:	d002      	beq.n	8052208 <z_impl_k_yield+0x70>
 8052202:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8052204:	2a00      	cmp	r2, #0
 8052206:	d1e6      	bne.n	80521d6 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
 8052208:	6a0a      	ldr	r2, [r1, #32]
	node->prev = tail;
 805220a:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
 805220e:	6013      	str	r3, [r2, #0]
	list->tail = node;
 8052210:	620b      	str	r3, [r1, #32]
}
 8052212:	e7ec      	b.n	80521ee <z_impl_k_yield+0x56>
 8052214:	20038cc0 	.word	0x20038cc0

08052218 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 8052218:	ea50 0301 	orrs.w	r3, r0, r1
{
 805221c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8052220:	4605      	mov	r5, r0
 8052222:	460e      	mov	r6, r1
	if (ticks == 0) {
 8052224:	d103      	bne.n	805222e <z_tick_sleep+0x16>
	z_impl_k_yield();
 8052226:	f7ff ffb7 	bl	8052198 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
 805222a:	2000      	movs	r0, #0
 805222c:	e033      	b.n	8052296 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
 805222e:	f06f 0401 	mvn.w	r4, #1
 8052232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8052236:	1a24      	subs	r4, r4, r0
 8052238:	eb63 0301 	sbc.w	r3, r3, r1
 805223c:	2c01      	cmp	r4, #1
 805223e:	f173 0300 	sbcs.w	r3, r3, #0
 8052242:	da02      	bge.n	805224a <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8052244:	f008 fa76 	bl	805a734 <sys_clock_tick_get_32>
 8052248:	1944      	adds	r4, r0, r5
 805224a:	f04f 0310 	mov.w	r3, #16
 805224e:	f3ef 8811 	mrs	r8, BASEPRI
 8052252:	f383 8812 	msr	BASEPRI_MAX, r3
 8052256:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 805225a:	4f10      	ldr	r7, [pc, #64]	; (805229c <z_tick_sleep+0x84>)
 805225c:	4b10      	ldr	r3, [pc, #64]	; (80522a0 <z_tick_sleep+0x88>)
 805225e:	68b8      	ldr	r0, [r7, #8]
 8052260:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 8052262:	f7ff fea9 	bl	8051fb8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8052266:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8052268:	462a      	mov	r2, r5
 805226a:	490e      	ldr	r1, [pc, #56]	; (80522a4 <z_tick_sleep+0x8c>)
 805226c:	4633      	mov	r3, r6
 805226e:	3018      	adds	r0, #24
 8052270:	f000 f910 	bl	8052494 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8052274:	68ba      	ldr	r2, [r7, #8]
 8052276:	4640      	mov	r0, r8
 8052278:	7b53      	ldrb	r3, [r2, #13]
 805227a:	f043 0310 	orr.w	r3, r3, #16
 805227e:	7353      	strb	r3, [r2, #13]
 8052280:	f7f5 ff4a 	bl	8048118 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8052284:	f008 fa56 	bl	805a734 <sys_clock_tick_get_32>
 8052288:	1a20      	subs	r0, r4, r0
 805228a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 805228e:	2801      	cmp	r0, #1
 8052290:	f173 0300 	sbcs.w	r3, r3, #0
 8052294:	dbc9      	blt.n	805222a <z_tick_sleep+0x12>
}
 8052296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 805229a:	bf00      	nop
 805229c:	20038cc0 	.word	0x20038cc0
 80522a0:	20038cf4 	.word	0x20038cf4
 80522a4:	0805a585 	.word	0x0805a585

080522a8 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80522a8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80522ac:	bf08      	it	eq
 80522ae:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 80522b2:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80522b4:	d106      	bne.n	80522c4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 80522b6:	4b07      	ldr	r3, [pc, #28]	; (80522d4 <z_impl_k_sleep+0x2c>)
 80522b8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 80522ba:	f7ff ff13 	bl	80520e4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 80522be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 80522c2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 80522c4:	f7ff ffa8 	bl	8052218 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 80522c8:	220a      	movs	r2, #10
 80522ca:	2300      	movs	r3, #0
 80522cc:	17c1      	asrs	r1, r0, #31
 80522ce:	f7ee f937 	bl	8040540 <__aeabi_uldivmod>
	return ret;
 80522d2:	e7f6      	b.n	80522c2 <z_impl_k_sleep+0x1a>
 80522d4:	20038cc0 	.word	0x20038cc0

080522d8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 80522d8:	4b01      	ldr	r3, [pc, #4]	; (80522e0 <z_impl_z_current_get+0x8>)
 80522da:	6898      	ldr	r0, [r3, #8]
 80522dc:	4770      	bx	lr
 80522de:	bf00      	nop
 80522e0:	20038cc0 	.word	0x20038cc0

080522e4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 80522e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80522e8:	4604      	mov	r4, r0
 80522ea:	f04f 0310 	mov.w	r3, #16
 80522ee:	f3ef 8611 	mrs	r6, BASEPRI
 80522f2:	f383 8812 	msr	BASEPRI_MAX, r3
 80522f6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 80522fa:	7b43      	ldrb	r3, [r0, #13]
 80522fc:	071a      	lsls	r2, r3, #28
 80522fe:	d505      	bpl.n	805230c <z_thread_abort+0x28>
	__asm__ volatile(
 8052300:	f386 8811 	msr	BASEPRI, r6
 8052304:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8052308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 805230c:	f023 0220 	bic.w	r2, r3, #32
 8052310:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8052314:	09d2      	lsrs	r2, r2, #7
 8052316:	d123      	bne.n	8052360 <z_thread_abort+0x7c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8052318:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 805231a:	68a3      	ldr	r3, [r4, #8]
 805231c:	b113      	cbz	r3, 8052324 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
 805231e:	4620      	mov	r0, r4
 8052320:	f008 f8cd 	bl	805a4be <unpend_thread_no_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8052324:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8052328:	f04f 0800 	mov.w	r8, #0
	return z_abort_timeout(&thread->base.timeout);
 805232c:	f104 0018 	add.w	r0, r4, #24
 8052330:	f008 f9cf 	bl	805a6d2 <z_abort_timeout>
	return list->head == list;
 8052334:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8052336:	42bd      	cmp	r5, r7
 8052338:	d000      	beq.n	805233c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 805233a:	b9cd      	cbnz	r5, 8052370 <z_thread_abort+0x8c>
		update_cache(1);
 805233c:	2001      	movs	r0, #1
 805233e:	f7ff fd4d 	bl	8051ddc <update_cache>
		z_thread_monitor_exit(thread);
 8052342:	4620      	mov	r0, r4
 8052344:	f7ff f918 	bl	8051578 <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
 8052348:	4b10      	ldr	r3, [pc, #64]	; (805238c <z_thread_abort+0xa8>)
 805234a:	689b      	ldr	r3, [r3, #8]
 805234c:	42a3      	cmp	r3, r4
 805234e:	d1d7      	bne.n	8052300 <z_thread_abort+0x1c>
 8052350:	f3ef 8305 	mrs	r3, IPSR
 8052354:	2b00      	cmp	r3, #0
 8052356:	d1d3      	bne.n	8052300 <z_thread_abort+0x1c>
 8052358:	4630      	mov	r0, r6
 805235a:	f7f5 fedd 	bl	8048118 <arch_swap>
	return ret;
 805235e:	e7cf      	b.n	8052300 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8052360:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8052364:	f043 0308 	orr.w	r3, r3, #8
 8052368:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 805236a:	f008 f8a0 	bl	805a4ae <sys_dlist_remove>
}
 805236e:	e7d4      	b.n	805231a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
 8052370:	4628      	mov	r0, r5
 8052372:	f008 f8a4 	bl	805a4be <unpend_thread_no_timeout>
 8052376:	f105 0018 	add.w	r0, r5, #24
 805237a:	f008 f9aa 	bl	805a6d2 <z_abort_timeout>
		ready_thread(thread);
 805237e:	4628      	mov	r0, r5
 8052380:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
 8052384:	f7ff fdc4 	bl	8051f10 <ready_thread>
 8052388:	e7d4      	b.n	8052334 <z_thread_abort+0x50>
 805238a:	bf00      	nop
 805238c:	20038cc0 	.word	0x20038cc0

08052390 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 8052390:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 8052392:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
 8052396:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 8052398:	e9cd 6700 	strd	r6, r7, [sp]
 805239c:	f7ff fe3c 	bl	8052018 <z_pend_curr>

	if (data != NULL) {
 80523a0:	b11c      	cbz	r4, 80523aa <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
 80523a2:	4b03      	ldr	r3, [pc, #12]	; (80523b0 <z_sched_wait+0x20>)
 80523a4:	689b      	ldr	r3, [r3, #8]
 80523a6:	695b      	ldr	r3, [r3, #20]
 80523a8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 80523aa:	b002      	add	sp, #8
 80523ac:	bdd0      	pop	{r4, r6, r7, pc}
 80523ae:	bf00      	nop
 80523b0:	20038cc0 	.word	0x20038cc0

080523b4 <z_data_copy>:
 80523b4:	4809      	ldr	r0, [pc, #36]	; (80523dc <z_data_copy+0x28>)
 80523b6:	4a0a      	ldr	r2, [pc, #40]	; (80523e0 <z_data_copy+0x2c>)
 80523b8:	490a      	ldr	r1, [pc, #40]	; (80523e4 <z_data_copy+0x30>)
 80523ba:	1a12      	subs	r2, r2, r0
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 80523bc:	b508      	push	{r3, lr}
 80523be:	f008 fd0a 	bl	805add6 <memcpy>
 80523c2:	4a09      	ldr	r2, [pc, #36]	; (80523e8 <z_data_copy+0x34>)
 80523c4:	4909      	ldr	r1, [pc, #36]	; (80523ec <z_data_copy+0x38>)
 80523c6:	480a      	ldr	r0, [pc, #40]	; (80523f0 <z_data_copy+0x3c>)
 80523c8:	f008 fd05 	bl	805add6 <memcpy>
 80523cc:	4809      	ldr	r0, [pc, #36]	; (80523f4 <z_data_copy+0x40>)
 80523ce:	4a0a      	ldr	r2, [pc, #40]	; (80523f8 <z_data_copy+0x44>)
 80523d0:	490a      	ldr	r1, [pc, #40]	; (80523fc <z_data_copy+0x48>)
 80523d2:	1a12      	subs	r2, r2, r0
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 80523d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80523d8:	f008 bcfd 	b.w	805add6 <memcpy>
 80523dc:	20020000 	.word	0x20020000
 80523e0:	20020a64 	.word	0x20020a64
 80523e4:	08063618 	.word	0x08063618
 80523e8:	00000000 	.word	0x00000000
 80523ec:	08063618 	.word	0x08063618
 80523f0:	20020000 	.word	0x20020000
 80523f4:	20000000 	.word	0x20000000
 80523f8:	20000000 	.word	0x20000000
 80523fc:	0806407c 	.word	0x0806407c

08052400 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8052400:	4b03      	ldr	r3, [pc, #12]	; (8052410 <elapsed+0x10>)
 8052402:	681b      	ldr	r3, [r3, #0]
 8052404:	b90b      	cbnz	r3, 805240a <elapsed+0xa>
 8052406:	f7fc b8a5 	b.w	804e554 <sys_clock_elapsed>
}
 805240a:	2000      	movs	r0, #0
 805240c:	4770      	bx	lr
 805240e:	bf00      	nop
 8052410:	20038d00 	.word	0x20038d00

08052414 <next_timeout>:
	return list->head == list;
 8052414:	4b10      	ldr	r3, [pc, #64]	; (8052458 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
 8052416:	b510      	push	{r4, lr}
 8052418:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 805241a:	429c      	cmp	r4, r3
 805241c:	bf08      	it	eq
 805241e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8052420:	f7ff ffee 	bl	8052400 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
 8052424:	b1a4      	cbz	r4, 8052450 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 8052426:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 805242a:	1a1b      	subs	r3, r3, r0
 805242c:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 8052430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8052434:	f170 0200 	sbcs.w	r2, r0, #0
 8052438:	da0a      	bge.n	8052450 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
 805243a:	2800      	cmp	r0, #0
 805243c:	bfac      	ite	ge
 805243e:	4618      	movge	r0, r3
 8052440:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8052442:	4b06      	ldr	r3, [pc, #24]	; (805245c <next_timeout+0x48>)
 8052444:	691b      	ldr	r3, [r3, #16]
 8052446:	b113      	cbz	r3, 805244e <next_timeout+0x3a>
 8052448:	4298      	cmp	r0, r3
 805244a:	bfa8      	it	ge
 805244c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 805244e:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
 8052450:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8052454:	e7f5      	b.n	8052442 <next_timeout+0x2e>
 8052456:	bf00      	nop
 8052458:	20020588 	.word	0x20020588
 805245c:	20038cc0 	.word	0x20038cc0

08052460 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
 8052460:	6803      	ldr	r3, [r0, #0]
{
 8052462:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8052464:	b168      	cbz	r0, 8052482 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8052466:	4a0a      	ldr	r2, [pc, #40]	; (8052490 <remove_timeout+0x30>)
 8052468:	6852      	ldr	r2, [r2, #4]
 805246a:	4290      	cmp	r0, r2
 805246c:	d009      	beq.n	8052482 <remove_timeout+0x22>
	if (next(t) != NULL) {
 805246e:	b143      	cbz	r3, 8052482 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8052470:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8052474:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8052478:	1912      	adds	r2, r2, r4
 805247a:	eb41 0105 	adc.w	r1, r1, r5
 805247e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 8052482:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 8052484:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8052486:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8052488:	2300      	movs	r3, #0
	node->prev = NULL;
 805248a:	e9c0 3300 	strd	r3, r3, [r0]
}
 805248e:	bd30      	pop	{r4, r5, pc}
 8052490:	20020588 	.word	0x20020588

08052494 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8052494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8052498:	bf08      	it	eq
 805249a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 805249e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80524a0:	4604      	mov	r4, r0
 80524a2:	461f      	mov	r7, r3
 80524a4:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80524a6:	d065      	beq.n	8052574 <z_add_timeout+0xe0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 80524a8:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 80524aa:	f04f 0310 	mov.w	r3, #16
 80524ae:	f3ef 8611 	mrs	r6, BASEPRI
 80524b2:	f383 8812 	msr	BASEPRI_MAX, r3
 80524b6:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 80524ba:	f06f 0201 	mvn.w	r2, #1
 80524be:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80524c2:	1b53      	subs	r3, r2, r5
 80524c4:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 80524c8:	2b00      	cmp	r3, #0
 80524ca:	db1b      	blt.n	8052504 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 80524cc:	4b2a      	ldr	r3, [pc, #168]	; (8052578 <z_add_timeout+0xe4>)
 80524ce:	e9d3 1300 	ldrd	r1, r3, [r3]
 80524d2:	1a52      	subs	r2, r2, r1
 80524d4:	eb6c 0303 	sbc.w	r3, ip, r3
 80524d8:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
 80524da:	eb63 0307 	sbc.w	r3, r3, r7
 80524de:	2d01      	cmp	r5, #1
 80524e0:	f173 0200 	sbcs.w	r2, r3, #0
 80524e4:	da01      	bge.n	80524ea <z_add_timeout+0x56>
 80524e6:	2501      	movs	r5, #1
 80524e8:	2300      	movs	r3, #0
	return list->head == list;
 80524ea:	4824      	ldr	r0, [pc, #144]	; (805257c <z_add_timeout+0xe8>)
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 80524ec:	e9c4 5304 	strd	r5, r3, [r4, #16]
	sys_dnode_t *const tail = list->tail;
 80524f0:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80524f4:	4283      	cmp	r3, r0
 80524f6:	d116      	bne.n	8052526 <z_add_timeout+0x92>
	node->prev = tail;
 80524f8:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
 80524fc:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 8052500:	6044      	str	r4, [r0, #4]
}
 8052502:	e024      	b.n	805254e <z_add_timeout+0xba>
 8052504:	f7ff ff7c 	bl	8052400 <elapsed>
 8052508:	3501      	adds	r5, #1
 805250a:	f147 0300 	adc.w	r3, r7, #0
 805250e:	182d      	adds	r5, r5, r0
 8052510:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 8052514:	e7e9      	b.n	80524ea <z_add_timeout+0x56>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 8052516:	1a52      	subs	r2, r2, r1
 8052518:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 805251c:	4563      	cmp	r3, ip
 805251e:	e9c4 2504 	strd	r2, r5, [r4, #16]
 8052522:	d0e9      	beq.n	80524f8 <z_add_timeout+0x64>
 8052524:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 8052526:	2b00      	cmp	r3, #0
 8052528:	d0e6      	beq.n	80524f8 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
 805252a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
 805252e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 8052532:	428a      	cmp	r2, r1
 8052534:	eb75 0e07 	sbcs.w	lr, r5, r7
 8052538:	daed      	bge.n	8052516 <z_add_timeout+0x82>
				t->dticks -= to->dticks;
 805253a:	1a8a      	subs	r2, r1, r2
 805253c:	eb67 0505 	sbc.w	r5, r7, r5
 8052540:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 8052544:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8052546:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 805254a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 805254c:	605c      	str	r4, [r3, #4]
	return list->head == list;
 805254e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8052550:	4283      	cmp	r3, r0
 8052552:	d00b      	beq.n	805256c <z_add_timeout+0xd8>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8052554:	429c      	cmp	r4, r3
 8052556:	d109      	bne.n	805256c <z_add_timeout+0xd8>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8052558:	f7ff ff5c 	bl	8052414 <next_timeout>

			if (next_time == 0 ||
 805255c:	b118      	cbz	r0, 8052566 <z_add_timeout+0xd2>
			    _current_cpu->slice_ticks != next_time) {
 805255e:	4b08      	ldr	r3, [pc, #32]	; (8052580 <z_add_timeout+0xec>)
			if (next_time == 0 ||
 8052560:	691b      	ldr	r3, [r3, #16]
 8052562:	4283      	cmp	r3, r0
 8052564:	d002      	beq.n	805256c <z_add_timeout+0xd8>
				sys_clock_set_timeout(next_time, false);
 8052566:	2100      	movs	r1, #0
 8052568:	f7fb ff84 	bl	804e474 <sys_clock_set_timeout>
	__asm__ volatile(
 805256c:	f386 8811 	msr	BASEPRI, r6
 8052570:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8052574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8052576:	bf00      	nop
 8052578:	200229e8 	.word	0x200229e8
 805257c:	20020588 	.word	0x20020588
 8052580:	20038cc0 	.word	0x20038cc0

08052584 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8052584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8052588:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 805258a:	f7ff fc81 	bl	8051e90 <z_time_slice>
	__asm__ volatile(
 805258e:	f04f 0310 	mov.w	r3, #16
 8052592:	f3ef 8511 	mrs	r5, BASEPRI
 8052596:	f383 8812 	msr	BASEPRI_MAX, r3
 805259a:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 805259e:	4f25      	ldr	r7, [pc, #148]	; (8052634 <sys_clock_announce+0xb0>)
	return list->head == list;
 80525a0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 805263c <sys_clock_announce+0xb8>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 80525a4:	4e24      	ldr	r6, [pc, #144]	; (8052638 <sys_clock_announce+0xb4>)
	announce_remaining = ticks;
 80525a6:	603c      	str	r4, [r7, #0]
 80525a8:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 80525ac:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80525ae:	4540      	cmp	r0, r8
 80525b0:	ea4f 71e3 	mov.w	r1, r3, asr #31
		curr_tick += dt;
 80525b4:	e9d6 2e00 	ldrd	r2, lr, [r6]
 80525b8:	d00b      	beq.n	80525d2 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 80525ba:	b150      	cbz	r0, 80525d2 <sys_clock_announce+0x4e>
 80525bc:	e9d0 4c04 	ldrd	r4, ip, [r0, #16]
 80525c0:	42a3      	cmp	r3, r4
 80525c2:	eb71 090c 	sbcs.w	r9, r1, ip
 80525c6:	da17      	bge.n	80525f8 <sys_clock_announce+0x74>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 80525c8:	1ae4      	subs	r4, r4, r3
 80525ca:	eb6c 0c01 	sbc.w	ip, ip, r1
 80525ce:	e9c0 4c04 	strd	r4, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 80525d2:	189b      	adds	r3, r3, r2
	announce_remaining = 0;
 80525d4:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
 80525d8:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
 80525dc:	603c      	str	r4, [r7, #0]
	curr_tick += announce_remaining;
 80525de:	e9c6 3100 	strd	r3, r1, [r6]

	sys_clock_set_timeout(next_timeout(), false);
 80525e2:	f7ff ff17 	bl	8052414 <next_timeout>
 80525e6:	4621      	mov	r1, r4
 80525e8:	f7fb ff44 	bl	804e474 <sys_clock_set_timeout>
	__asm__ volatile(
 80525ec:	f385 8811 	msr	BASEPRI, r5
 80525f0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 80525f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 80525f8:	18a2      	adds	r2, r4, r2
		t->dticks = 0;
 80525fa:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
 80525fe:	eb4e 71e4 	adc.w	r1, lr, r4, asr #31
 8052602:	e9c6 2100 	strd	r2, r1, [r6]
		t->dticks = 0;
 8052606:	2200      	movs	r2, #0
 8052608:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
 805260c:	f7ff ff28 	bl	8052460 <remove_timeout>
 8052610:	f385 8811 	msr	BASEPRI, r5
 8052614:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8052618:	6883      	ldr	r3, [r0, #8]
 805261a:	4798      	blx	r3
	__asm__ volatile(
 805261c:	f04f 0310 	mov.w	r3, #16
 8052620:	f3ef 8511 	mrs	r5, BASEPRI
 8052624:	f383 8812 	msr	BASEPRI_MAX, r3
 8052628:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 805262c:	683b      	ldr	r3, [r7, #0]
 805262e:	1b1b      	subs	r3, r3, r4
 8052630:	603b      	str	r3, [r7, #0]
 8052632:	e7b9      	b.n	80525a8 <sys_clock_announce+0x24>
 8052634:	20038d00 	.word	0x20038d00
 8052638:	200229e8 	.word	0x200229e8
 805263c:	20020588 	.word	0x20020588

08052640 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8052640:	b510      	push	{r4, lr}
 8052642:	f04f 0310 	mov.w	r3, #16
 8052646:	f3ef 8411 	mrs	r4, BASEPRI
 805264a:	f383 8812 	msr	BASEPRI_MAX, r3
 805264e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
 8052652:	f7ff fed5 	bl	8052400 <elapsed>
 8052656:	4b06      	ldr	r3, [pc, #24]	; (8052670 <sys_clock_tick_get+0x30>)
 8052658:	4601      	mov	r1, r0
 805265a:	e9d3 0300 	ldrd	r0, r3, [r3]
 805265e:	1808      	adds	r0, r1, r0
 8052660:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
	__asm__ volatile(
 8052664:	f384 8811 	msr	BASEPRI, r4
 8052668:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 805266c:	bd10      	pop	{r4, pc}
 805266e:	bf00      	nop
 8052670:	200229e8 	.word	0x200229e8

08052674 <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 8052674:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8052676:	4604      	mov	r4, r0
 8052678:	b178      	cbz	r0, 805269a <z_impl_k_busy_wait+0x26>
 805267a:	f7fb ff89 	bl	804e590 <sys_clock_cycle_get_32>
 805267e:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 8052680:	4806      	ldr	r0, [pc, #24]	; (805269c <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8052682:	2300      	movs	r3, #0
 8052684:	4a06      	ldr	r2, [pc, #24]	; (80526a0 <z_impl_k_busy_wait+0x2c>)
 8052686:	fba4 0100 	umull	r0, r1, r4, r0
 805268a:	f7ed ff59 	bl	8040540 <__aeabi_uldivmod>
 805268e:	4604      	mov	r4, r0
 8052690:	f7fb ff7e 	bl	804e590 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8052694:	1b43      	subs	r3, r0, r5
 8052696:	42a3      	cmp	r3, r4
 8052698:	d3fa      	bcc.n	8052690 <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 805269a:	bd38      	pop	{r3, r4, r5, pc}
 805269c:	0cdfe600 	.word	0x0cdfe600
 80526a0:	000f4240 	.word	0x000f4240

080526a4 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 80526a4:	b570      	push	{r4, r5, r6, lr}
 80526a6:	4604      	mov	r4, r0
	__asm__ volatile(
 80526a8:	f04f 0310 	mov.w	r3, #16
 80526ac:	f3ef 8511 	mrs	r5, BASEPRI
 80526b0:	f383 8812 	msr	BASEPRI_MAX, r3
 80526b4:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 80526b8:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
 80526bc:	3301      	adds	r3, #1
 80526be:	f142 0200 	adc.w	r2, r2, #0
 80526c2:	2b02      	cmp	r3, #2
 80526c4:	f172 0300 	sbcs.w	r3, r2, #0
 80526c8:	d304      	bcc.n	80526d4 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80526ca:	4919      	ldr	r1, [pc, #100]	; (8052730 <z_timer_expiration_handler+0x8c>)
 80526cc:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 80526d0:	f7ff fee0 	bl	8052494 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 80526d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80526d6:	3301      	adds	r3, #1
 80526d8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 80526da:	6a23      	ldr	r3, [r4, #32]
 80526dc:	b173      	cbz	r3, 80526fc <z_timer_expiration_handler+0x58>
	__asm__ volatile(
 80526de:	f385 8811 	msr	BASEPRI, r5
 80526e2:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
 80526e6:	6a23      	ldr	r3, [r4, #32]
 80526e8:	4620      	mov	r0, r4
 80526ea:	4798      	blx	r3
	__asm__ volatile(
 80526ec:	f04f 0310 	mov.w	r3, #16
 80526f0:	f3ef 8511 	mrs	r5, BASEPRI
 80526f4:	f383 8812 	msr	BASEPRI_MAX, r3
 80526f8:	f3bf 8f6f 	isb	sy
	return list->head == list;
 80526fc:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8052700:	42a6      	cmp	r6, r4
 8052702:	d000      	beq.n	8052706 <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 8052704:	b926      	cbnz	r6, 8052710 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
 8052706:	f385 8811 	msr	BASEPRI, r5
 805270a:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
 805270e:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
 8052710:	4630      	mov	r0, r6
 8052712:	f007 fee7 	bl	805a4e4 <z_unpend_thread_no_timeout>
 8052716:	2300      	movs	r3, #0
 8052718:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
 805271c:	f385 8811 	msr	BASEPRI, r5
 8052720:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
 8052724:	4630      	mov	r0, r6
}
 8052726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
 805272a:	f007 bf1b 	b.w	805a564 <z_ready_thread>
 805272e:	bf00      	nop
 8052730:	080526a5 	.word	0x080526a5

08052734 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8052734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8052738:	bf08      	it	eq
 805273a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 805273e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8052742:	4605      	mov	r5, r0
 8052744:	4690      	mov	r8, r2
 8052746:	461f      	mov	r7, r3
 8052748:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 805274c:	d03c      	beq.n	80527c8 <z_impl_k_timer_start+0x94>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 805274e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8052752:	bf08      	it	eq
 8052754:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 8052758:	4604      	mov	r4, r0
 805275a:	460e      	mov	r6, r1
 805275c:	d013      	beq.n	8052786 <z_impl_k_timer_start+0x52>
 805275e:	4308      	orrs	r0, r1
 8052760:	d011      	beq.n	8052786 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
 8052762:	f06f 0001 	mvn.w	r0, #1
 8052766:	1b00      	subs	r0, r0, r4
 8052768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 805276c:	eb60 0001 	sbc.w	r0, r0, r1
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8052770:	2800      	cmp	r0, #0
 8052772:	da08      	bge.n	8052786 <z_impl_k_timer_start+0x52>
		period.ticks = MAX(period.ticks - 1, 1);
 8052774:	3c01      	subs	r4, #1
 8052776:	f161 0600 	sbc.w	r6, r1, #0
 805277a:	2c01      	cmp	r4, #1
 805277c:	f176 0100 	sbcs.w	r1, r6, #0
 8052780:	bfbc      	itt	lt
 8052782:	2401      	movlt	r4, #1
 8052784:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 8052786:	f06f 0101 	mvn.w	r1, #1
 805278a:	1a89      	subs	r1, r1, r2
 805278c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8052790:	eb61 0103 	sbc.w	r1, r1, r3
 8052794:	2900      	cmp	r1, #0
 8052796:	da08      	bge.n	80527aa <z_impl_k_timer_start+0x76>
		duration.ticks = MAX(duration.ticks - 1, 0);
 8052798:	3a01      	subs	r2, #1
 805279a:	f163 0700 	sbc.w	r7, r3, #0
 805279e:	4690      	mov	r8, r2
 80527a0:	2f00      	cmp	r7, #0
 80527a2:	bfbc      	itt	lt
 80527a4:	f04f 0800 	movlt.w	r8, #0
 80527a8:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
 80527aa:	4628      	mov	r0, r5
 80527ac:	f007 ff91 	bl	805a6d2 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
 80527b0:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80527b2:	4642      	mov	r2, r8
 80527b4:	4628      	mov	r0, r5
	timer->status = 0U;
 80527b6:	632b      	str	r3, [r5, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80527b8:	463b      	mov	r3, r7
 80527ba:	4904      	ldr	r1, [pc, #16]	; (80527cc <z_impl_k_timer_start+0x98>)
	timer->period = period;
 80527bc:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28
		     duration);
}
 80527c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80527c4:	f7ff be66 	b.w	8052494 <z_add_timeout>
}
 80527c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80527cc:	080526a5 	.word	0x080526a5

080527d0 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 80527d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80527d4:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 80527d6:	4b29      	ldr	r3, [pc, #164]	; (805287c <z_impl_k_poll+0xac>)
{
 80527d8:	4616      	mov	r6, r2
 80527da:	4680      	mov	r8, r0
	struct z_poller *poller = &_current->poller;
 80527dc:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
 80527de:	2301      	movs	r3, #1
 80527e0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
 80527e4:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 80527e8:	ea52 0305 	orrs.w	r3, r2, r5
 80527ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80527f0:	bf0c      	ite	eq
 80527f2:	2301      	moveq	r3, #1
 80527f4:	2300      	movne	r3, #0
 80527f6:	f008 f82c 	bl	805a852 <register_events>
 80527fa:	4681      	mov	r9, r0
	__asm__ volatile(
 80527fc:	f04f 0310 	mov.w	r3, #16
 8052800:	f3ef 8a11 	mrs	sl, BASEPRI
 8052804:	f383 8812 	msr	BASEPRI_MAX, r3
 8052808:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 805280c:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
 8052810:	b964      	cbnz	r4, 805282c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
 8052812:	4601      	mov	r1, r0
 8052814:	4652      	mov	r2, sl
 8052816:	4640      	mov	r0, r8
 8052818:	f008 f8f4 	bl	805aa04 <clear_event_registrations>
	__asm__ volatile(
 805281c:	f38a 8811 	msr	BASEPRI, sl
 8052820:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 8052824:	4620      	mov	r0, r4
 8052826:	b002      	add	sp, #8
 8052828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
 805282c:	2300      	movs	r3, #0
 805282e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8052832:	ea56 0305 	orrs.w	r3, r6, r5
 8052836:	d106      	bne.n	8052846 <z_impl_k_poll+0x76>
 8052838:	f38a 8811 	msr	BASEPRI, sl
 805283c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 8052840:	f06f 040a 	mvn.w	r4, #10
 8052844:	e7ee      	b.n	8052824 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 8052846:	4a0e      	ldr	r2, [pc, #56]	; (8052880 <z_impl_k_poll+0xb0>)
 8052848:	4651      	mov	r1, sl
 805284a:	480e      	ldr	r0, [pc, #56]	; (8052884 <z_impl_k_poll+0xb4>)
 805284c:	e9cd 6500 	strd	r6, r5, [sp]
 8052850:	f7ff fbe2 	bl	8052018 <z_pend_curr>
 8052854:	4604      	mov	r4, r0
	__asm__ volatile(
 8052856:	f04f 0310 	mov.w	r3, #16
 805285a:	f3ef 8511 	mrs	r5, BASEPRI
 805285e:	f383 8812 	msr	BASEPRI_MAX, r3
 8052862:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
 8052866:	462a      	mov	r2, r5
 8052868:	4649      	mov	r1, r9
 805286a:	4640      	mov	r0, r8
 805286c:	f008 f8ca 	bl	805aa04 <clear_event_registrations>
	__asm__ volatile(
 8052870:	f385 8811 	msr	BASEPRI, r5
 8052874:	f3bf 8f6f 	isb	sy
	return swap_rc;
 8052878:	e7d4      	b.n	8052824 <z_impl_k_poll+0x54>
 805287a:	bf00      	nop
 805287c:	20038cc0 	.word	0x20038cc0
 8052880:	20020590 	.word	0x20020590
 8052884:	20039ab1 	.word	0x20039ab1

08052888 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 8052888:	b538      	push	{r3, r4, r5, lr}
 805288a:	4603      	mov	r3, r0
	__asm__ volatile(
 805288c:	f04f 0210 	mov.w	r2, #16
 8052890:	f3ef 8511 	mrs	r5, BASEPRI
 8052894:	f382 8812 	msr	BASEPRI_MAX, r2
 8052898:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 805289c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
 805289e:	2101      	movs	r1, #1
 80528a0:	6081      	str	r1, [r0, #8]
	return list->head == list;
 80528a2:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 80528a4:	4283      	cmp	r3, r0
 80528a6:	d106      	bne.n	80528b6 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
 80528a8:	f385 8811 	msr	BASEPRI, r5
 80528ac:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
 80528b0:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
 80528b2:	4620      	mov	r0, r4
 80528b4:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
 80528b6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 80528ba:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80528bc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80528be:	2300      	movs	r3, #0
	node->prev = NULL;
 80528c0:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 80528c4:	f008 f842 	bl	805a94c <signal_poll_event>
	z_reschedule(&lock, key);
 80528c8:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 80528ca:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
 80528cc:	4801      	ldr	r0, [pc, #4]	; (80528d4 <z_impl_k_poll_signal_raise+0x4c>)
 80528ce:	f7ff fa5f 	bl	8051d90 <z_reschedule>
	return rc;
 80528d2:	e7ee      	b.n	80528b2 <z_impl_k_poll_signal_raise+0x2a>
 80528d4:	20039ab1 	.word	0x20039ab1

080528d8 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
 80528d8:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
 80528da:	4601      	mov	r1, r0
 80528dc:	4801      	ldr	r0, [pc, #4]	; (80528e4 <k_aligned_alloc+0xc>)
 80528de:	f008 b8ea 	b.w	805aab6 <z_heap_aligned_alloc>
 80528e2:	bf00      	nop
 80528e4:	20020990 	.word	0x20020990

080528e8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 80528e8:	4a02      	ldr	r2, [pc, #8]	; (80528f4 <boot_banner+0xc>)
 80528ea:	4903      	ldr	r1, [pc, #12]	; (80528f8 <boot_banner+0x10>)
 80528ec:	4803      	ldr	r0, [pc, #12]	; (80528fc <boot_banner+0x14>)
 80528ee:	f002 bebe 	b.w	805566e <printk>
 80528f2:	bf00      	nop
 80528f4:	08060045 	.word	0x08060045
 80528f8:	080632e2 	.word	0x080632e2
 80528fc:	080632e9 	.word	0x080632e9

08052900 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 8052900:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8052902:	4c06      	ldr	r4, [pc, #24]	; (805291c <statics_init+0x1c>)
 8052904:	4d06      	ldr	r5, [pc, #24]	; (8052920 <statics_init+0x20>)
 8052906:	42ac      	cmp	r4, r5
 8052908:	d301      	bcc.n	805290e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
 805290a:	2000      	movs	r0, #0
 805290c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 805290e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8052912:	4620      	mov	r0, r4
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8052914:	3418      	adds	r4, #24
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 8052916:	f008 f8e5 	bl	805aae4 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 805291a:	e7f4      	b.n	8052906 <statics_init+0x6>
 805291c:	20020990 	.word	0x20020990
 8052920:	200209a8 	.word	0x200209a8

08052924 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8052924:	b510      	push	{r4, lr}
 8052926:	4b03      	ldr	r3, [pc, #12]	; (8052934 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8052928:	6003      	str	r3, [r0, #0]
 805292a:	4604      	mov	r4, r0
 805292c:	f008 fa16 	bl	805ad5c <_ZNSt9type_infoD1Ev>
 8052930:	4620      	mov	r0, r4
 8052932:	bd10      	pop	{r4, pc}
 8052934:	0805e1ec 	.word	0x0805e1ec

08052938 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8052938:	b510      	push	{r4, lr}
 805293a:	4b03      	ldr	r3, [pc, #12]	; (8052948 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 805293c:	6003      	str	r3, [r0, #0]
 805293e:	4604      	mov	r4, r0
 8052940:	f7ff fff0 	bl	8052924 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8052944:	4620      	mov	r0, r4
 8052946:	bd10      	pop	{r4, pc}
 8052948:	0805e224 	.word	0x0805e224

0805294c <_ZSt15get_new_handlerv>:
 805294c:	4b02      	ldr	r3, [pc, #8]	; (8052958 <_ZSt15get_new_handlerv+0xc>)
 805294e:	6818      	ldr	r0, [r3, #0]
 8052950:	f3bf 8f5b 	dmb	ish
 8052954:	4770      	bx	lr
 8052956:	bf00      	nop
 8052958:	20038d04 	.word	0x20038d04

0805295c <malloc>:
 805295c:	4b02      	ldr	r3, [pc, #8]	; (8052968 <malloc+0xc>)
 805295e:	4601      	mov	r1, r0
 8052960:	6818      	ldr	r0, [r3, #0]
 8052962:	f000 b857 	b.w	8052a14 <_malloc_r>
 8052966:	bf00      	nop
 8052968:	20020598 	.word	0x20020598

0805296c <free>:
 805296c:	4b02      	ldr	r3, [pc, #8]	; (8052978 <free+0xc>)
 805296e:	4601      	mov	r1, r0
 8052970:	6818      	ldr	r0, [r3, #0]
 8052972:	f000 b803 	b.w	805297c <_free_r>
 8052976:	bf00      	nop
 8052978:	20020598 	.word	0x20020598

0805297c <_free_r>:
 805297c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 805297e:	2900      	cmp	r1, #0
 8052980:	d044      	beq.n	8052a0c <_free_r+0x90>
 8052982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8052986:	9001      	str	r0, [sp, #4]
 8052988:	2b00      	cmp	r3, #0
 805298a:	f1a1 0404 	sub.w	r4, r1, #4
 805298e:	bfb8      	it	lt
 8052990:	18e4      	addlt	r4, r4, r3
 8052992:	f000 fb31 	bl	8052ff8 <__malloc_lock>
 8052996:	4a1e      	ldr	r2, [pc, #120]	; (8052a10 <_free_r+0x94>)
 8052998:	9801      	ldr	r0, [sp, #4]
 805299a:	6813      	ldr	r3, [r2, #0]
 805299c:	b933      	cbnz	r3, 80529ac <_free_r+0x30>
 805299e:	6063      	str	r3, [r4, #4]
 80529a0:	6014      	str	r4, [r2, #0]
 80529a2:	b003      	add	sp, #12
 80529a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80529a8:	f000 bb2c 	b.w	8053004 <__malloc_unlock>
 80529ac:	42a3      	cmp	r3, r4
 80529ae:	d908      	bls.n	80529c2 <_free_r+0x46>
 80529b0:	6825      	ldr	r5, [r4, #0]
 80529b2:	1961      	adds	r1, r4, r5
 80529b4:	428b      	cmp	r3, r1
 80529b6:	bf01      	itttt	eq
 80529b8:	6819      	ldreq	r1, [r3, #0]
 80529ba:	685b      	ldreq	r3, [r3, #4]
 80529bc:	1949      	addeq	r1, r1, r5
 80529be:	6021      	streq	r1, [r4, #0]
 80529c0:	e7ed      	b.n	805299e <_free_r+0x22>
 80529c2:	461a      	mov	r2, r3
 80529c4:	685b      	ldr	r3, [r3, #4]
 80529c6:	b10b      	cbz	r3, 80529cc <_free_r+0x50>
 80529c8:	42a3      	cmp	r3, r4
 80529ca:	d9fa      	bls.n	80529c2 <_free_r+0x46>
 80529cc:	6811      	ldr	r1, [r2, #0]
 80529ce:	1855      	adds	r5, r2, r1
 80529d0:	42a5      	cmp	r5, r4
 80529d2:	d10b      	bne.n	80529ec <_free_r+0x70>
 80529d4:	6824      	ldr	r4, [r4, #0]
 80529d6:	4421      	add	r1, r4
 80529d8:	1854      	adds	r4, r2, r1
 80529da:	42a3      	cmp	r3, r4
 80529dc:	6011      	str	r1, [r2, #0]
 80529de:	d1e0      	bne.n	80529a2 <_free_r+0x26>
 80529e0:	681c      	ldr	r4, [r3, #0]
 80529e2:	685b      	ldr	r3, [r3, #4]
 80529e4:	6053      	str	r3, [r2, #4]
 80529e6:	4421      	add	r1, r4
 80529e8:	6011      	str	r1, [r2, #0]
 80529ea:	e7da      	b.n	80529a2 <_free_r+0x26>
 80529ec:	d902      	bls.n	80529f4 <_free_r+0x78>
 80529ee:	230c      	movs	r3, #12
 80529f0:	6003      	str	r3, [r0, #0]
 80529f2:	e7d6      	b.n	80529a2 <_free_r+0x26>
 80529f4:	6825      	ldr	r5, [r4, #0]
 80529f6:	1961      	adds	r1, r4, r5
 80529f8:	428b      	cmp	r3, r1
 80529fa:	bf04      	itt	eq
 80529fc:	6819      	ldreq	r1, [r3, #0]
 80529fe:	685b      	ldreq	r3, [r3, #4]
 8052a00:	6063      	str	r3, [r4, #4]
 8052a02:	bf04      	itt	eq
 8052a04:	1949      	addeq	r1, r1, r5
 8052a06:	6021      	streq	r1, [r4, #0]
 8052a08:	6054      	str	r4, [r2, #4]
 8052a0a:	e7ca      	b.n	80529a2 <_free_r+0x26>
 8052a0c:	b003      	add	sp, #12
 8052a0e:	bd30      	pop	{r4, r5, pc}
 8052a10:	20038d08 	.word	0x20038d08

08052a14 <_malloc_r>:
 8052a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8052a16:	1ccd      	adds	r5, r1, #3
 8052a18:	f025 0503 	bic.w	r5, r5, #3
 8052a1c:	3508      	adds	r5, #8
 8052a1e:	2d0c      	cmp	r5, #12
 8052a20:	bf38      	it	cc
 8052a22:	250c      	movcc	r5, #12
 8052a24:	2d00      	cmp	r5, #0
 8052a26:	4606      	mov	r6, r0
 8052a28:	db01      	blt.n	8052a2e <_malloc_r+0x1a>
 8052a2a:	42a9      	cmp	r1, r5
 8052a2c:	d903      	bls.n	8052a36 <_malloc_r+0x22>
 8052a2e:	230c      	movs	r3, #12
 8052a30:	6033      	str	r3, [r6, #0]
 8052a32:	2000      	movs	r0, #0
 8052a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8052a36:	f000 fadf 	bl	8052ff8 <__malloc_lock>
 8052a3a:	4921      	ldr	r1, [pc, #132]	; (8052ac0 <_malloc_r+0xac>)
 8052a3c:	680a      	ldr	r2, [r1, #0]
 8052a3e:	4614      	mov	r4, r2
 8052a40:	b99c      	cbnz	r4, 8052a6a <_malloc_r+0x56>
 8052a42:	4f20      	ldr	r7, [pc, #128]	; (8052ac4 <_malloc_r+0xb0>)
 8052a44:	683b      	ldr	r3, [r7, #0]
 8052a46:	b923      	cbnz	r3, 8052a52 <_malloc_r+0x3e>
 8052a48:	4621      	mov	r1, r4
 8052a4a:	4630      	mov	r0, r6
 8052a4c:	f000 f96a 	bl	8052d24 <_sbrk_r>
 8052a50:	6038      	str	r0, [r7, #0]
 8052a52:	4629      	mov	r1, r5
 8052a54:	4630      	mov	r0, r6
 8052a56:	f000 f965 	bl	8052d24 <_sbrk_r>
 8052a5a:	1c43      	adds	r3, r0, #1
 8052a5c:	d123      	bne.n	8052aa6 <_malloc_r+0x92>
 8052a5e:	230c      	movs	r3, #12
 8052a60:	6033      	str	r3, [r6, #0]
 8052a62:	4630      	mov	r0, r6
 8052a64:	f000 face 	bl	8053004 <__malloc_unlock>
 8052a68:	e7e3      	b.n	8052a32 <_malloc_r+0x1e>
 8052a6a:	6823      	ldr	r3, [r4, #0]
 8052a6c:	1b5b      	subs	r3, r3, r5
 8052a6e:	d417      	bmi.n	8052aa0 <_malloc_r+0x8c>
 8052a70:	2b0b      	cmp	r3, #11
 8052a72:	d903      	bls.n	8052a7c <_malloc_r+0x68>
 8052a74:	6023      	str	r3, [r4, #0]
 8052a76:	441c      	add	r4, r3
 8052a78:	6025      	str	r5, [r4, #0]
 8052a7a:	e004      	b.n	8052a86 <_malloc_r+0x72>
 8052a7c:	6863      	ldr	r3, [r4, #4]
 8052a7e:	42a2      	cmp	r2, r4
 8052a80:	bf0c      	ite	eq
 8052a82:	600b      	streq	r3, [r1, #0]
 8052a84:	6053      	strne	r3, [r2, #4]
 8052a86:	4630      	mov	r0, r6
 8052a88:	f000 fabc 	bl	8053004 <__malloc_unlock>
 8052a8c:	f104 000b 	add.w	r0, r4, #11
 8052a90:	1d23      	adds	r3, r4, #4
 8052a92:	f020 0007 	bic.w	r0, r0, #7
 8052a96:	1ac2      	subs	r2, r0, r3
 8052a98:	d0cc      	beq.n	8052a34 <_malloc_r+0x20>
 8052a9a:	1a1b      	subs	r3, r3, r0
 8052a9c:	50a3      	str	r3, [r4, r2]
 8052a9e:	e7c9      	b.n	8052a34 <_malloc_r+0x20>
 8052aa0:	4622      	mov	r2, r4
 8052aa2:	6864      	ldr	r4, [r4, #4]
 8052aa4:	e7cc      	b.n	8052a40 <_malloc_r+0x2c>
 8052aa6:	1cc4      	adds	r4, r0, #3
 8052aa8:	f024 0403 	bic.w	r4, r4, #3
 8052aac:	42a0      	cmp	r0, r4
 8052aae:	d0e3      	beq.n	8052a78 <_malloc_r+0x64>
 8052ab0:	1a21      	subs	r1, r4, r0
 8052ab2:	4630      	mov	r0, r6
 8052ab4:	f000 f936 	bl	8052d24 <_sbrk_r>
 8052ab8:	3001      	adds	r0, #1
 8052aba:	d1dd      	bne.n	8052a78 <_malloc_r+0x64>
 8052abc:	e7cf      	b.n	8052a5e <_malloc_r+0x4a>
 8052abe:	bf00      	nop
 8052ac0:	20038d08 	.word	0x20038d08
 8052ac4:	20038d0c 	.word	0x20038d0c

08052ac8 <_printf_i>:
 8052ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8052acc:	7e0f      	ldrb	r7, [r1, #24]
 8052ace:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8052ad0:	2f78      	cmp	r7, #120	; 0x78
 8052ad2:	4691      	mov	r9, r2
 8052ad4:	4680      	mov	r8, r0
 8052ad6:	460c      	mov	r4, r1
 8052ad8:	469a      	mov	sl, r3
 8052ada:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8052ade:	d807      	bhi.n	8052af0 <_printf_i+0x28>
 8052ae0:	2f62      	cmp	r7, #98	; 0x62
 8052ae2:	d80a      	bhi.n	8052afa <_printf_i+0x32>
 8052ae4:	2f00      	cmp	r7, #0
 8052ae6:	f000 80d8 	beq.w	8052c9a <_printf_i+0x1d2>
 8052aea:	2f58      	cmp	r7, #88	; 0x58
 8052aec:	f000 80a3 	beq.w	8052c36 <_printf_i+0x16e>
 8052af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8052af4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8052af8:	e03a      	b.n	8052b70 <_printf_i+0xa8>
 8052afa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8052afe:	2b15      	cmp	r3, #21
 8052b00:	d8f6      	bhi.n	8052af0 <_printf_i+0x28>
 8052b02:	a101      	add	r1, pc, #4	; (adr r1, 8052b08 <_printf_i+0x40>)
 8052b04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8052b08:	08052b61 	.word	0x08052b61
 8052b0c:	08052b75 	.word	0x08052b75
 8052b10:	08052af1 	.word	0x08052af1
 8052b14:	08052af1 	.word	0x08052af1
 8052b18:	08052af1 	.word	0x08052af1
 8052b1c:	08052af1 	.word	0x08052af1
 8052b20:	08052b75 	.word	0x08052b75
 8052b24:	08052af1 	.word	0x08052af1
 8052b28:	08052af1 	.word	0x08052af1
 8052b2c:	08052af1 	.word	0x08052af1
 8052b30:	08052af1 	.word	0x08052af1
 8052b34:	08052c81 	.word	0x08052c81
 8052b38:	08052ba5 	.word	0x08052ba5
 8052b3c:	08052c63 	.word	0x08052c63
 8052b40:	08052af1 	.word	0x08052af1
 8052b44:	08052af1 	.word	0x08052af1
 8052b48:	08052ca3 	.word	0x08052ca3
 8052b4c:	08052af1 	.word	0x08052af1
 8052b50:	08052ba5 	.word	0x08052ba5
 8052b54:	08052af1 	.word	0x08052af1
 8052b58:	08052af1 	.word	0x08052af1
 8052b5c:	08052c6b 	.word	0x08052c6b
 8052b60:	682b      	ldr	r3, [r5, #0]
 8052b62:	1d1a      	adds	r2, r3, #4
 8052b64:	681b      	ldr	r3, [r3, #0]
 8052b66:	602a      	str	r2, [r5, #0]
 8052b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8052b6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8052b70:	2301      	movs	r3, #1
 8052b72:	e0a3      	b.n	8052cbc <_printf_i+0x1f4>
 8052b74:	6820      	ldr	r0, [r4, #0]
 8052b76:	6829      	ldr	r1, [r5, #0]
 8052b78:	0606      	lsls	r6, r0, #24
 8052b7a:	f101 0304 	add.w	r3, r1, #4
 8052b7e:	d50a      	bpl.n	8052b96 <_printf_i+0xce>
 8052b80:	680e      	ldr	r6, [r1, #0]
 8052b82:	602b      	str	r3, [r5, #0]
 8052b84:	2e00      	cmp	r6, #0
 8052b86:	da03      	bge.n	8052b90 <_printf_i+0xc8>
 8052b88:	232d      	movs	r3, #45	; 0x2d
 8052b8a:	4276      	negs	r6, r6
 8052b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8052b90:	485e      	ldr	r0, [pc, #376]	; (8052d0c <_printf_i+0x244>)
 8052b92:	230a      	movs	r3, #10
 8052b94:	e019      	b.n	8052bca <_printf_i+0x102>
 8052b96:	680e      	ldr	r6, [r1, #0]
 8052b98:	602b      	str	r3, [r5, #0]
 8052b9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8052b9e:	bf18      	it	ne
 8052ba0:	b236      	sxthne	r6, r6
 8052ba2:	e7ef      	b.n	8052b84 <_printf_i+0xbc>
 8052ba4:	682b      	ldr	r3, [r5, #0]
 8052ba6:	6820      	ldr	r0, [r4, #0]
 8052ba8:	1d19      	adds	r1, r3, #4
 8052baa:	6029      	str	r1, [r5, #0]
 8052bac:	0601      	lsls	r1, r0, #24
 8052bae:	d501      	bpl.n	8052bb4 <_printf_i+0xec>
 8052bb0:	681e      	ldr	r6, [r3, #0]
 8052bb2:	e002      	b.n	8052bba <_printf_i+0xf2>
 8052bb4:	0646      	lsls	r6, r0, #25
 8052bb6:	d5fb      	bpl.n	8052bb0 <_printf_i+0xe8>
 8052bb8:	881e      	ldrh	r6, [r3, #0]
 8052bba:	4854      	ldr	r0, [pc, #336]	; (8052d0c <_printf_i+0x244>)
 8052bbc:	2f6f      	cmp	r7, #111	; 0x6f
 8052bbe:	bf0c      	ite	eq
 8052bc0:	2308      	moveq	r3, #8
 8052bc2:	230a      	movne	r3, #10
 8052bc4:	2100      	movs	r1, #0
 8052bc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8052bca:	6865      	ldr	r5, [r4, #4]
 8052bcc:	60a5      	str	r5, [r4, #8]
 8052bce:	2d00      	cmp	r5, #0
 8052bd0:	bfa2      	ittt	ge
 8052bd2:	6821      	ldrge	r1, [r4, #0]
 8052bd4:	f021 0104 	bicge.w	r1, r1, #4
 8052bd8:	6021      	strge	r1, [r4, #0]
 8052bda:	b90e      	cbnz	r6, 8052be0 <_printf_i+0x118>
 8052bdc:	2d00      	cmp	r5, #0
 8052bde:	d04d      	beq.n	8052c7c <_printf_i+0x1b4>
 8052be0:	4615      	mov	r5, r2
 8052be2:	fbb6 f1f3 	udiv	r1, r6, r3
 8052be6:	fb03 6711 	mls	r7, r3, r1, r6
 8052bea:	5dc7      	ldrb	r7, [r0, r7]
 8052bec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8052bf0:	4637      	mov	r7, r6
 8052bf2:	42bb      	cmp	r3, r7
 8052bf4:	460e      	mov	r6, r1
 8052bf6:	d9f4      	bls.n	8052be2 <_printf_i+0x11a>
 8052bf8:	2b08      	cmp	r3, #8
 8052bfa:	d10b      	bne.n	8052c14 <_printf_i+0x14c>
 8052bfc:	6823      	ldr	r3, [r4, #0]
 8052bfe:	07de      	lsls	r6, r3, #31
 8052c00:	d508      	bpl.n	8052c14 <_printf_i+0x14c>
 8052c02:	6923      	ldr	r3, [r4, #16]
 8052c04:	6861      	ldr	r1, [r4, #4]
 8052c06:	4299      	cmp	r1, r3
 8052c08:	bfde      	ittt	le
 8052c0a:	2330      	movle	r3, #48	; 0x30
 8052c0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8052c10:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8052c14:	1b52      	subs	r2, r2, r5
 8052c16:	6122      	str	r2, [r4, #16]
 8052c18:	f8cd a000 	str.w	sl, [sp]
 8052c1c:	464b      	mov	r3, r9
 8052c1e:	aa03      	add	r2, sp, #12
 8052c20:	4621      	mov	r1, r4
 8052c22:	4640      	mov	r0, r8
 8052c24:	f008 f9aa 	bl	805af7c <_printf_common>
 8052c28:	3001      	adds	r0, #1
 8052c2a:	d14c      	bne.n	8052cc6 <_printf_i+0x1fe>
 8052c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8052c30:	b004      	add	sp, #16
 8052c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8052c36:	4835      	ldr	r0, [pc, #212]	; (8052d0c <_printf_i+0x244>)
 8052c38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8052c3c:	6829      	ldr	r1, [r5, #0]
 8052c3e:	6823      	ldr	r3, [r4, #0]
 8052c40:	f851 6b04 	ldr.w	r6, [r1], #4
 8052c44:	6029      	str	r1, [r5, #0]
 8052c46:	061d      	lsls	r5, r3, #24
 8052c48:	d514      	bpl.n	8052c74 <_printf_i+0x1ac>
 8052c4a:	07df      	lsls	r7, r3, #31
 8052c4c:	bf44      	itt	mi
 8052c4e:	f043 0320 	orrmi.w	r3, r3, #32
 8052c52:	6023      	strmi	r3, [r4, #0]
 8052c54:	b91e      	cbnz	r6, 8052c5e <_printf_i+0x196>
 8052c56:	6823      	ldr	r3, [r4, #0]
 8052c58:	f023 0320 	bic.w	r3, r3, #32
 8052c5c:	6023      	str	r3, [r4, #0]
 8052c5e:	2310      	movs	r3, #16
 8052c60:	e7b0      	b.n	8052bc4 <_printf_i+0xfc>
 8052c62:	6823      	ldr	r3, [r4, #0]
 8052c64:	f043 0320 	orr.w	r3, r3, #32
 8052c68:	6023      	str	r3, [r4, #0]
 8052c6a:	2378      	movs	r3, #120	; 0x78
 8052c6c:	4828      	ldr	r0, [pc, #160]	; (8052d10 <_printf_i+0x248>)
 8052c6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8052c72:	e7e3      	b.n	8052c3c <_printf_i+0x174>
 8052c74:	0659      	lsls	r1, r3, #25
 8052c76:	bf48      	it	mi
 8052c78:	b2b6      	uxthmi	r6, r6
 8052c7a:	e7e6      	b.n	8052c4a <_printf_i+0x182>
 8052c7c:	4615      	mov	r5, r2
 8052c7e:	e7bb      	b.n	8052bf8 <_printf_i+0x130>
 8052c80:	682b      	ldr	r3, [r5, #0]
 8052c82:	6826      	ldr	r6, [r4, #0]
 8052c84:	6961      	ldr	r1, [r4, #20]
 8052c86:	1d18      	adds	r0, r3, #4
 8052c88:	6028      	str	r0, [r5, #0]
 8052c8a:	0635      	lsls	r5, r6, #24
 8052c8c:	681b      	ldr	r3, [r3, #0]
 8052c8e:	d501      	bpl.n	8052c94 <_printf_i+0x1cc>
 8052c90:	6019      	str	r1, [r3, #0]
 8052c92:	e002      	b.n	8052c9a <_printf_i+0x1d2>
 8052c94:	0670      	lsls	r0, r6, #25
 8052c96:	d5fb      	bpl.n	8052c90 <_printf_i+0x1c8>
 8052c98:	8019      	strh	r1, [r3, #0]
 8052c9a:	2300      	movs	r3, #0
 8052c9c:	6123      	str	r3, [r4, #16]
 8052c9e:	4615      	mov	r5, r2
 8052ca0:	e7ba      	b.n	8052c18 <_printf_i+0x150>
 8052ca2:	682b      	ldr	r3, [r5, #0]
 8052ca4:	1d1a      	adds	r2, r3, #4
 8052ca6:	602a      	str	r2, [r5, #0]
 8052ca8:	681d      	ldr	r5, [r3, #0]
 8052caa:	6862      	ldr	r2, [r4, #4]
 8052cac:	2100      	movs	r1, #0
 8052cae:	4628      	mov	r0, r5
 8052cb0:	f7ed fba6 	bl	8040400 <memchr>
 8052cb4:	b108      	cbz	r0, 8052cba <_printf_i+0x1f2>
 8052cb6:	1b40      	subs	r0, r0, r5
 8052cb8:	6060      	str	r0, [r4, #4]
 8052cba:	6863      	ldr	r3, [r4, #4]
 8052cbc:	6123      	str	r3, [r4, #16]
 8052cbe:	2300      	movs	r3, #0
 8052cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8052cc4:	e7a8      	b.n	8052c18 <_printf_i+0x150>
 8052cc6:	6923      	ldr	r3, [r4, #16]
 8052cc8:	462a      	mov	r2, r5
 8052cca:	4649      	mov	r1, r9
 8052ccc:	4640      	mov	r0, r8
 8052cce:	47d0      	blx	sl
 8052cd0:	3001      	adds	r0, #1
 8052cd2:	d0ab      	beq.n	8052c2c <_printf_i+0x164>
 8052cd4:	6823      	ldr	r3, [r4, #0]
 8052cd6:	079b      	lsls	r3, r3, #30
 8052cd8:	d413      	bmi.n	8052d02 <_printf_i+0x23a>
 8052cda:	68e0      	ldr	r0, [r4, #12]
 8052cdc:	9b03      	ldr	r3, [sp, #12]
 8052cde:	4298      	cmp	r0, r3
 8052ce0:	bfb8      	it	lt
 8052ce2:	4618      	movlt	r0, r3
 8052ce4:	e7a4      	b.n	8052c30 <_printf_i+0x168>
 8052ce6:	2301      	movs	r3, #1
 8052ce8:	4632      	mov	r2, r6
 8052cea:	4649      	mov	r1, r9
 8052cec:	4640      	mov	r0, r8
 8052cee:	47d0      	blx	sl
 8052cf0:	3001      	adds	r0, #1
 8052cf2:	d09b      	beq.n	8052c2c <_printf_i+0x164>
 8052cf4:	3501      	adds	r5, #1
 8052cf6:	68e3      	ldr	r3, [r4, #12]
 8052cf8:	9903      	ldr	r1, [sp, #12]
 8052cfa:	1a5b      	subs	r3, r3, r1
 8052cfc:	42ab      	cmp	r3, r5
 8052cfe:	dcf2      	bgt.n	8052ce6 <_printf_i+0x21e>
 8052d00:	e7eb      	b.n	8052cda <_printf_i+0x212>
 8052d02:	2500      	movs	r5, #0
 8052d04:	f104 0619 	add.w	r6, r4, #25
 8052d08:	e7f5      	b.n	8052cf6 <_printf_i+0x22e>
 8052d0a:	bf00      	nop
 8052d0c:	08063471 	.word	0x08063471
 8052d10:	08063482 	.word	0x08063482

08052d14 <realloc>:
 8052d14:	4b02      	ldr	r3, [pc, #8]	; (8052d20 <realloc+0xc>)
 8052d16:	460a      	mov	r2, r1
 8052d18:	4601      	mov	r1, r0
 8052d1a:	6818      	ldr	r0, [r3, #0]
 8052d1c:	f008 bb3c 	b.w	805b398 <_realloc_r>
 8052d20:	20020598 	.word	0x20020598

08052d24 <_sbrk_r>:
 8052d24:	b538      	push	{r3, r4, r5, lr}
 8052d26:	4d06      	ldr	r5, [pc, #24]	; (8052d40 <_sbrk_r+0x1c>)
 8052d28:	2300      	movs	r3, #0
 8052d2a:	4604      	mov	r4, r0
 8052d2c:	4608      	mov	r0, r1
 8052d2e:	602b      	str	r3, [r5, #0]
 8052d30:	f7f6 f86c 	bl	8048e0c <_sbrk>
 8052d34:	1c43      	adds	r3, r0, #1
 8052d36:	d102      	bne.n	8052d3e <_sbrk_r+0x1a>
 8052d38:	682b      	ldr	r3, [r5, #0]
 8052d3a:	b103      	cbz	r3, 8052d3e <_sbrk_r+0x1a>
 8052d3c:	6023      	str	r3, [r4, #0]
 8052d3e:	bd38      	pop	{r3, r4, r5, pc}
 8052d40:	20038d10 	.word	0x20038d10

08052d44 <raise>:
 8052d44:	4b02      	ldr	r3, [pc, #8]	; (8052d50 <raise+0xc>)
 8052d46:	4601      	mov	r1, r0
 8052d48:	6818      	ldr	r0, [r3, #0]
 8052d4a:	f008 b984 	b.w	805b056 <_raise_r>
 8052d4e:	bf00      	nop
 8052d50:	20020598 	.word	0x20020598

08052d54 <_kill_r>:
 8052d54:	b538      	push	{r3, r4, r5, lr}
 8052d56:	4d07      	ldr	r5, [pc, #28]	; (8052d74 <_kill_r+0x20>)
 8052d58:	2300      	movs	r3, #0
 8052d5a:	4604      	mov	r4, r0
 8052d5c:	4608      	mov	r0, r1
 8052d5e:	4611      	mov	r1, r2
 8052d60:	602b      	str	r3, [r5, #0]
 8052d62:	f004 fc6c 	bl	805763e <_kill>
 8052d66:	1c43      	adds	r3, r0, #1
 8052d68:	d102      	bne.n	8052d70 <_kill_r+0x1c>
 8052d6a:	682b      	ldr	r3, [r5, #0]
 8052d6c:	b103      	cbz	r3, 8052d70 <_kill_r+0x1c>
 8052d6e:	6023      	str	r3, [r4, #0]
 8052d70:	bd38      	pop	{r3, r4, r5, pc}
 8052d72:	bf00      	nop
 8052d74:	20038d10 	.word	0x20038d10

08052d78 <sniprintf>:
 8052d78:	b40c      	push	{r2, r3}
 8052d7a:	b530      	push	{r4, r5, lr}
 8052d7c:	4b17      	ldr	r3, [pc, #92]	; (8052ddc <sniprintf+0x64>)
 8052d7e:	1e0c      	subs	r4, r1, #0
 8052d80:	681d      	ldr	r5, [r3, #0]
 8052d82:	b09d      	sub	sp, #116	; 0x74
 8052d84:	da08      	bge.n	8052d98 <sniprintf+0x20>
 8052d86:	238b      	movs	r3, #139	; 0x8b
 8052d88:	602b      	str	r3, [r5, #0]
 8052d8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8052d8e:	b01d      	add	sp, #116	; 0x74
 8052d90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8052d94:	b002      	add	sp, #8
 8052d96:	4770      	bx	lr
 8052d98:	f44f 7302 	mov.w	r3, #520	; 0x208
 8052d9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8052da0:	bf14      	ite	ne
 8052da2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8052da6:	4623      	moveq	r3, r4
 8052da8:	9304      	str	r3, [sp, #16]
 8052daa:	9307      	str	r3, [sp, #28]
 8052dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8052db0:	9002      	str	r0, [sp, #8]
 8052db2:	9006      	str	r0, [sp, #24]
 8052db4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8052db8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8052dba:	ab21      	add	r3, sp, #132	; 0x84
 8052dbc:	a902      	add	r1, sp, #8
 8052dbe:	4628      	mov	r0, r5
 8052dc0:	9301      	str	r3, [sp, #4]
 8052dc2:	f000 fc3d 	bl	8053640 <_svfiprintf_r>
 8052dc6:	1c43      	adds	r3, r0, #1
 8052dc8:	bfbc      	itt	lt
 8052dca:	238b      	movlt	r3, #139	; 0x8b
 8052dcc:	602b      	strlt	r3, [r5, #0]
 8052dce:	2c00      	cmp	r4, #0
 8052dd0:	d0dd      	beq.n	8052d8e <sniprintf+0x16>
 8052dd2:	9b02      	ldr	r3, [sp, #8]
 8052dd4:	2200      	movs	r2, #0
 8052dd6:	701a      	strb	r2, [r3, #0]
 8052dd8:	e7d9      	b.n	8052d8e <sniprintf+0x16>
 8052dda:	bf00      	nop
 8052ddc:	20020598 	.word	0x20020598

08052de0 <_strtol_l.constprop.0>:
 8052de0:	2b01      	cmp	r3, #1
 8052de2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8052de6:	d001      	beq.n	8052dec <_strtol_l.constprop.0+0xc>
 8052de8:	2b24      	cmp	r3, #36	; 0x24
 8052dea:	d906      	bls.n	8052dfa <_strtol_l.constprop.0+0x1a>
 8052dec:	f004 fc42 	bl	8057674 <__errno>
 8052df0:	2316      	movs	r3, #22
 8052df2:	6003      	str	r3, [r0, #0]
 8052df4:	2000      	movs	r0, #0
 8052df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8052dfa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8052ee0 <_strtol_l.constprop.0+0x100>
 8052dfe:	460d      	mov	r5, r1
 8052e00:	462e      	mov	r6, r5
 8052e02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8052e06:	f814 700c 	ldrb.w	r7, [r4, ip]
 8052e0a:	f017 0708 	ands.w	r7, r7, #8
 8052e0e:	d1f7      	bne.n	8052e00 <_strtol_l.constprop.0+0x20>
 8052e10:	2c2d      	cmp	r4, #45	; 0x2d
 8052e12:	d132      	bne.n	8052e7a <_strtol_l.constprop.0+0x9a>
 8052e14:	782c      	ldrb	r4, [r5, #0]
 8052e16:	2701      	movs	r7, #1
 8052e18:	1cb5      	adds	r5, r6, #2
 8052e1a:	2b00      	cmp	r3, #0
 8052e1c:	d05b      	beq.n	8052ed6 <_strtol_l.constprop.0+0xf6>
 8052e1e:	2b10      	cmp	r3, #16
 8052e20:	d109      	bne.n	8052e36 <_strtol_l.constprop.0+0x56>
 8052e22:	2c30      	cmp	r4, #48	; 0x30
 8052e24:	d107      	bne.n	8052e36 <_strtol_l.constprop.0+0x56>
 8052e26:	782c      	ldrb	r4, [r5, #0]
 8052e28:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8052e2c:	2c58      	cmp	r4, #88	; 0x58
 8052e2e:	d14d      	bne.n	8052ecc <_strtol_l.constprop.0+0xec>
 8052e30:	786c      	ldrb	r4, [r5, #1]
 8052e32:	2310      	movs	r3, #16
 8052e34:	3502      	adds	r5, #2
 8052e36:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8052e3a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8052e3e:	f04f 0c00 	mov.w	ip, #0
 8052e42:	fbb8 f9f3 	udiv	r9, r8, r3
 8052e46:	4666      	mov	r6, ip
 8052e48:	fb03 8a19 	mls	sl, r3, r9, r8
 8052e4c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8052e50:	f1be 0f09 	cmp.w	lr, #9
 8052e54:	d816      	bhi.n	8052e84 <_strtol_l.constprop.0+0xa4>
 8052e56:	4674      	mov	r4, lr
 8052e58:	42a3      	cmp	r3, r4
 8052e5a:	dd24      	ble.n	8052ea6 <_strtol_l.constprop.0+0xc6>
 8052e5c:	f1bc 0f00 	cmp.w	ip, #0
 8052e60:	db1e      	blt.n	8052ea0 <_strtol_l.constprop.0+0xc0>
 8052e62:	45b1      	cmp	r9, r6
 8052e64:	d31c      	bcc.n	8052ea0 <_strtol_l.constprop.0+0xc0>
 8052e66:	d101      	bne.n	8052e6c <_strtol_l.constprop.0+0x8c>
 8052e68:	45a2      	cmp	sl, r4
 8052e6a:	db19      	blt.n	8052ea0 <_strtol_l.constprop.0+0xc0>
 8052e6c:	fb06 4603 	mla	r6, r6, r3, r4
 8052e70:	f04f 0c01 	mov.w	ip, #1
 8052e74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8052e78:	e7e8      	b.n	8052e4c <_strtol_l.constprop.0+0x6c>
 8052e7a:	2c2b      	cmp	r4, #43	; 0x2b
 8052e7c:	bf04      	itt	eq
 8052e7e:	782c      	ldrbeq	r4, [r5, #0]
 8052e80:	1cb5      	addeq	r5, r6, #2
 8052e82:	e7ca      	b.n	8052e1a <_strtol_l.constprop.0+0x3a>
 8052e84:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8052e88:	f1be 0f19 	cmp.w	lr, #25
 8052e8c:	d801      	bhi.n	8052e92 <_strtol_l.constprop.0+0xb2>
 8052e8e:	3c37      	subs	r4, #55	; 0x37
 8052e90:	e7e2      	b.n	8052e58 <_strtol_l.constprop.0+0x78>
 8052e92:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8052e96:	f1be 0f19 	cmp.w	lr, #25
 8052e9a:	d804      	bhi.n	8052ea6 <_strtol_l.constprop.0+0xc6>
 8052e9c:	3c57      	subs	r4, #87	; 0x57
 8052e9e:	e7db      	b.n	8052e58 <_strtol_l.constprop.0+0x78>
 8052ea0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8052ea4:	e7e6      	b.n	8052e74 <_strtol_l.constprop.0+0x94>
 8052ea6:	f1bc 0f00 	cmp.w	ip, #0
 8052eaa:	da05      	bge.n	8052eb8 <_strtol_l.constprop.0+0xd8>
 8052eac:	2322      	movs	r3, #34	; 0x22
 8052eae:	6003      	str	r3, [r0, #0]
 8052eb0:	4646      	mov	r6, r8
 8052eb2:	b942      	cbnz	r2, 8052ec6 <_strtol_l.constprop.0+0xe6>
 8052eb4:	4630      	mov	r0, r6
 8052eb6:	e79e      	b.n	8052df6 <_strtol_l.constprop.0+0x16>
 8052eb8:	b107      	cbz	r7, 8052ebc <_strtol_l.constprop.0+0xdc>
 8052eba:	4276      	negs	r6, r6
 8052ebc:	2a00      	cmp	r2, #0
 8052ebe:	d0f9      	beq.n	8052eb4 <_strtol_l.constprop.0+0xd4>
 8052ec0:	f1bc 0f00 	cmp.w	ip, #0
 8052ec4:	d000      	beq.n	8052ec8 <_strtol_l.constprop.0+0xe8>
 8052ec6:	1e69      	subs	r1, r5, #1
 8052ec8:	6011      	str	r1, [r2, #0]
 8052eca:	e7f3      	b.n	8052eb4 <_strtol_l.constprop.0+0xd4>
 8052ecc:	2430      	movs	r4, #48	; 0x30
 8052ece:	2b00      	cmp	r3, #0
 8052ed0:	d1b1      	bne.n	8052e36 <_strtol_l.constprop.0+0x56>
 8052ed2:	2308      	movs	r3, #8
 8052ed4:	e7af      	b.n	8052e36 <_strtol_l.constprop.0+0x56>
 8052ed6:	2c30      	cmp	r4, #48	; 0x30
 8052ed8:	d0a5      	beq.n	8052e26 <_strtol_l.constprop.0+0x46>
 8052eda:	230a      	movs	r3, #10
 8052edc:	e7ab      	b.n	8052e36 <_strtol_l.constprop.0+0x56>
 8052ede:	bf00      	nop
 8052ee0:	08063365 	.word	0x08063365

08052ee4 <strtol>:
 8052ee4:	4613      	mov	r3, r2
 8052ee6:	460a      	mov	r2, r1
 8052ee8:	4601      	mov	r1, r0
 8052eea:	4802      	ldr	r0, [pc, #8]	; (8052ef4 <strtol+0x10>)
 8052eec:	6800      	ldr	r0, [r0, #0]
 8052eee:	f7ff bf77 	b.w	8052de0 <_strtol_l.constprop.0>
 8052ef2:	bf00      	nop
 8052ef4:	20020598 	.word	0x20020598

08052ef8 <_strtoul_l.constprop.0>:
 8052ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8052efc:	4f36      	ldr	r7, [pc, #216]	; (8052fd8 <_strtoul_l.constprop.0+0xe0>)
 8052efe:	4686      	mov	lr, r0
 8052f00:	460d      	mov	r5, r1
 8052f02:	4628      	mov	r0, r5
 8052f04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8052f08:	5de6      	ldrb	r6, [r4, r7]
 8052f0a:	f016 0608 	ands.w	r6, r6, #8
 8052f0e:	d1f8      	bne.n	8052f02 <_strtoul_l.constprop.0+0xa>
 8052f10:	2c2d      	cmp	r4, #45	; 0x2d
 8052f12:	d12f      	bne.n	8052f74 <_strtoul_l.constprop.0+0x7c>
 8052f14:	782c      	ldrb	r4, [r5, #0]
 8052f16:	2601      	movs	r6, #1
 8052f18:	1c85      	adds	r5, r0, #2
 8052f1a:	2b00      	cmp	r3, #0
 8052f1c:	d057      	beq.n	8052fce <_strtoul_l.constprop.0+0xd6>
 8052f1e:	2b10      	cmp	r3, #16
 8052f20:	d109      	bne.n	8052f36 <_strtoul_l.constprop.0+0x3e>
 8052f22:	2c30      	cmp	r4, #48	; 0x30
 8052f24:	d107      	bne.n	8052f36 <_strtoul_l.constprop.0+0x3e>
 8052f26:	7828      	ldrb	r0, [r5, #0]
 8052f28:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8052f2c:	2858      	cmp	r0, #88	; 0x58
 8052f2e:	d149      	bne.n	8052fc4 <_strtoul_l.constprop.0+0xcc>
 8052f30:	786c      	ldrb	r4, [r5, #1]
 8052f32:	2310      	movs	r3, #16
 8052f34:	3502      	adds	r5, #2
 8052f36:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8052f3a:	2700      	movs	r7, #0
 8052f3c:	fbb8 f8f3 	udiv	r8, r8, r3
 8052f40:	fb03 f908 	mul.w	r9, r3, r8
 8052f44:	ea6f 0909 	mvn.w	r9, r9
 8052f48:	4638      	mov	r0, r7
 8052f4a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8052f4e:	f1bc 0f09 	cmp.w	ip, #9
 8052f52:	d814      	bhi.n	8052f7e <_strtoul_l.constprop.0+0x86>
 8052f54:	4664      	mov	r4, ip
 8052f56:	42a3      	cmp	r3, r4
 8052f58:	dd22      	ble.n	8052fa0 <_strtoul_l.constprop.0+0xa8>
 8052f5a:	2f00      	cmp	r7, #0
 8052f5c:	db1d      	blt.n	8052f9a <_strtoul_l.constprop.0+0xa2>
 8052f5e:	4580      	cmp	r8, r0
 8052f60:	d31b      	bcc.n	8052f9a <_strtoul_l.constprop.0+0xa2>
 8052f62:	d101      	bne.n	8052f68 <_strtoul_l.constprop.0+0x70>
 8052f64:	45a1      	cmp	r9, r4
 8052f66:	db18      	blt.n	8052f9a <_strtoul_l.constprop.0+0xa2>
 8052f68:	fb00 4003 	mla	r0, r0, r3, r4
 8052f6c:	2701      	movs	r7, #1
 8052f6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8052f72:	e7ea      	b.n	8052f4a <_strtoul_l.constprop.0+0x52>
 8052f74:	2c2b      	cmp	r4, #43	; 0x2b
 8052f76:	bf04      	itt	eq
 8052f78:	782c      	ldrbeq	r4, [r5, #0]
 8052f7a:	1c85      	addeq	r5, r0, #2
 8052f7c:	e7cd      	b.n	8052f1a <_strtoul_l.constprop.0+0x22>
 8052f7e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8052f82:	f1bc 0f19 	cmp.w	ip, #25
 8052f86:	d801      	bhi.n	8052f8c <_strtoul_l.constprop.0+0x94>
 8052f88:	3c37      	subs	r4, #55	; 0x37
 8052f8a:	e7e4      	b.n	8052f56 <_strtoul_l.constprop.0+0x5e>
 8052f8c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8052f90:	f1bc 0f19 	cmp.w	ip, #25
 8052f94:	d804      	bhi.n	8052fa0 <_strtoul_l.constprop.0+0xa8>
 8052f96:	3c57      	subs	r4, #87	; 0x57
 8052f98:	e7dd      	b.n	8052f56 <_strtoul_l.constprop.0+0x5e>
 8052f9a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8052f9e:	e7e6      	b.n	8052f6e <_strtoul_l.constprop.0+0x76>
 8052fa0:	2f00      	cmp	r7, #0
 8052fa2:	da07      	bge.n	8052fb4 <_strtoul_l.constprop.0+0xbc>
 8052fa4:	2322      	movs	r3, #34	; 0x22
 8052fa6:	f8ce 3000 	str.w	r3, [lr]
 8052faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8052fae:	b932      	cbnz	r2, 8052fbe <_strtoul_l.constprop.0+0xc6>
 8052fb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8052fb4:	b106      	cbz	r6, 8052fb8 <_strtoul_l.constprop.0+0xc0>
 8052fb6:	4240      	negs	r0, r0
 8052fb8:	2a00      	cmp	r2, #0
 8052fba:	d0f9      	beq.n	8052fb0 <_strtoul_l.constprop.0+0xb8>
 8052fbc:	b107      	cbz	r7, 8052fc0 <_strtoul_l.constprop.0+0xc8>
 8052fbe:	1e69      	subs	r1, r5, #1
 8052fc0:	6011      	str	r1, [r2, #0]
 8052fc2:	e7f5      	b.n	8052fb0 <_strtoul_l.constprop.0+0xb8>
 8052fc4:	2430      	movs	r4, #48	; 0x30
 8052fc6:	2b00      	cmp	r3, #0
 8052fc8:	d1b5      	bne.n	8052f36 <_strtoul_l.constprop.0+0x3e>
 8052fca:	2308      	movs	r3, #8
 8052fcc:	e7b3      	b.n	8052f36 <_strtoul_l.constprop.0+0x3e>
 8052fce:	2c30      	cmp	r4, #48	; 0x30
 8052fd0:	d0a9      	beq.n	8052f26 <_strtoul_l.constprop.0+0x2e>
 8052fd2:	230a      	movs	r3, #10
 8052fd4:	e7af      	b.n	8052f36 <_strtoul_l.constprop.0+0x3e>
 8052fd6:	bf00      	nop
 8052fd8:	08063365 	.word	0x08063365

08052fdc <strtoul>:
 8052fdc:	4613      	mov	r3, r2
 8052fde:	460a      	mov	r2, r1
 8052fe0:	4601      	mov	r1, r0
 8052fe2:	4802      	ldr	r0, [pc, #8]	; (8052fec <strtoul+0x10>)
 8052fe4:	6800      	ldr	r0, [r0, #0]
 8052fe6:	f7ff bf87 	b.w	8052ef8 <_strtoul_l.constprop.0>
 8052fea:	bf00      	nop
 8052fec:	20020598 	.word	0x20020598

08052ff0 <_localeconv_r>:
 8052ff0:	4800      	ldr	r0, [pc, #0]	; (8052ff4 <_localeconv_r+0x4>)
 8052ff2:	4770      	bx	lr
 8052ff4:	200206ec 	.word	0x200206ec

08052ff8 <__malloc_lock>:
 8052ff8:	4801      	ldr	r0, [pc, #4]	; (8053000 <__malloc_lock+0x8>)
 8052ffa:	f004 bb33 	b.w	8057664 <__retarget_lock_acquire_recursive>
 8052ffe:	bf00      	nop
 8053000:	200209a8 	.word	0x200209a8

08053004 <__malloc_unlock>:
 8053004:	4801      	ldr	r0, [pc, #4]	; (805300c <__malloc_unlock+0x8>)
 8053006:	f004 bb33 	b.w	8057670 <__retarget_lock_release_recursive>
 805300a:	bf00      	nop
 805300c:	200209a8 	.word	0x200209a8

08053010 <_Balloc>:
 8053010:	b570      	push	{r4, r5, r6, lr}
 8053012:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8053014:	4604      	mov	r4, r0
 8053016:	460d      	mov	r5, r1
 8053018:	b976      	cbnz	r6, 8053038 <_Balloc+0x28>
 805301a:	2010      	movs	r0, #16
 805301c:	f7ff fc9e 	bl	805295c <malloc>
 8053020:	4602      	mov	r2, r0
 8053022:	6260      	str	r0, [r4, #36]	; 0x24
 8053024:	b920      	cbnz	r0, 8053030 <_Balloc+0x20>
 8053026:	4b18      	ldr	r3, [pc, #96]	; (8053088 <_Balloc+0x78>)
 8053028:	4818      	ldr	r0, [pc, #96]	; (805308c <_Balloc+0x7c>)
 805302a:	2166      	movs	r1, #102	; 0x66
 805302c:	f000 fc08 	bl	8053840 <__assert_func>
 8053030:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8053034:	6006      	str	r6, [r0, #0]
 8053036:	60c6      	str	r6, [r0, #12]
 8053038:	6a66      	ldr	r6, [r4, #36]	; 0x24
 805303a:	68f3      	ldr	r3, [r6, #12]
 805303c:	b183      	cbz	r3, 8053060 <_Balloc+0x50>
 805303e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8053040:	68db      	ldr	r3, [r3, #12]
 8053042:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8053046:	b9b8      	cbnz	r0, 8053078 <_Balloc+0x68>
 8053048:	2101      	movs	r1, #1
 805304a:	fa01 f605 	lsl.w	r6, r1, r5
 805304e:	1d72      	adds	r2, r6, #5
 8053050:	0092      	lsls	r2, r2, #2
 8053052:	4620      	mov	r0, r4
 8053054:	f008 f991 	bl	805b37a <_calloc_r>
 8053058:	b160      	cbz	r0, 8053074 <_Balloc+0x64>
 805305a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 805305e:	e00e      	b.n	805307e <_Balloc+0x6e>
 8053060:	2221      	movs	r2, #33	; 0x21
 8053062:	2104      	movs	r1, #4
 8053064:	4620      	mov	r0, r4
 8053066:	f008 f988 	bl	805b37a <_calloc_r>
 805306a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 805306c:	60f0      	str	r0, [r6, #12]
 805306e:	68db      	ldr	r3, [r3, #12]
 8053070:	2b00      	cmp	r3, #0
 8053072:	d1e4      	bne.n	805303e <_Balloc+0x2e>
 8053074:	2000      	movs	r0, #0
 8053076:	bd70      	pop	{r4, r5, r6, pc}
 8053078:	6802      	ldr	r2, [r0, #0]
 805307a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 805307e:	2300      	movs	r3, #0
 8053080:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8053084:	e7f7      	b.n	8053076 <_Balloc+0x66>
 8053086:	bf00      	nop
 8053088:	080634a0 	.word	0x080634a0
 805308c:	08063545 	.word	0x08063545

08053090 <_Bfree>:
 8053090:	b570      	push	{r4, r5, r6, lr}
 8053092:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8053094:	4605      	mov	r5, r0
 8053096:	460c      	mov	r4, r1
 8053098:	b976      	cbnz	r6, 80530b8 <_Bfree+0x28>
 805309a:	2010      	movs	r0, #16
 805309c:	f7ff fc5e 	bl	805295c <malloc>
 80530a0:	4602      	mov	r2, r0
 80530a2:	6268      	str	r0, [r5, #36]	; 0x24
 80530a4:	b920      	cbnz	r0, 80530b0 <_Bfree+0x20>
 80530a6:	4b09      	ldr	r3, [pc, #36]	; (80530cc <_Bfree+0x3c>)
 80530a8:	4809      	ldr	r0, [pc, #36]	; (80530d0 <_Bfree+0x40>)
 80530aa:	218a      	movs	r1, #138	; 0x8a
 80530ac:	f000 fbc8 	bl	8053840 <__assert_func>
 80530b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80530b4:	6006      	str	r6, [r0, #0]
 80530b6:	60c6      	str	r6, [r0, #12]
 80530b8:	b13c      	cbz	r4, 80530ca <_Bfree+0x3a>
 80530ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80530bc:	6862      	ldr	r2, [r4, #4]
 80530be:	68db      	ldr	r3, [r3, #12]
 80530c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80530c4:	6021      	str	r1, [r4, #0]
 80530c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80530ca:	bd70      	pop	{r4, r5, r6, pc}
 80530cc:	080634a0 	.word	0x080634a0
 80530d0:	08063545 	.word	0x08063545

080530d4 <__multadd>:
 80530d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80530d8:	690d      	ldr	r5, [r1, #16]
 80530da:	4607      	mov	r7, r0
 80530dc:	460c      	mov	r4, r1
 80530de:	461e      	mov	r6, r3
 80530e0:	f101 0c14 	add.w	ip, r1, #20
 80530e4:	2000      	movs	r0, #0
 80530e6:	f8dc 3000 	ldr.w	r3, [ip]
 80530ea:	b299      	uxth	r1, r3
 80530ec:	fb02 6101 	mla	r1, r2, r1, r6
 80530f0:	0c1e      	lsrs	r6, r3, #16
 80530f2:	0c0b      	lsrs	r3, r1, #16
 80530f4:	fb02 3306 	mla	r3, r2, r6, r3
 80530f8:	b289      	uxth	r1, r1
 80530fa:	3001      	adds	r0, #1
 80530fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8053100:	4285      	cmp	r5, r0
 8053102:	f84c 1b04 	str.w	r1, [ip], #4
 8053106:	ea4f 4613 	mov.w	r6, r3, lsr #16
 805310a:	dcec      	bgt.n	80530e6 <__multadd+0x12>
 805310c:	b30e      	cbz	r6, 8053152 <__multadd+0x7e>
 805310e:	68a3      	ldr	r3, [r4, #8]
 8053110:	42ab      	cmp	r3, r5
 8053112:	dc19      	bgt.n	8053148 <__multadd+0x74>
 8053114:	6861      	ldr	r1, [r4, #4]
 8053116:	4638      	mov	r0, r7
 8053118:	3101      	adds	r1, #1
 805311a:	f7ff ff79 	bl	8053010 <_Balloc>
 805311e:	4680      	mov	r8, r0
 8053120:	b928      	cbnz	r0, 805312e <__multadd+0x5a>
 8053122:	4602      	mov	r2, r0
 8053124:	4b0c      	ldr	r3, [pc, #48]	; (8053158 <__multadd+0x84>)
 8053126:	480d      	ldr	r0, [pc, #52]	; (805315c <__multadd+0x88>)
 8053128:	21b5      	movs	r1, #181	; 0xb5
 805312a:	f000 fb89 	bl	8053840 <__assert_func>
 805312e:	6922      	ldr	r2, [r4, #16]
 8053130:	3202      	adds	r2, #2
 8053132:	f104 010c 	add.w	r1, r4, #12
 8053136:	0092      	lsls	r2, r2, #2
 8053138:	300c      	adds	r0, #12
 805313a:	f007 fe4c 	bl	805add6 <memcpy>
 805313e:	4621      	mov	r1, r4
 8053140:	4638      	mov	r0, r7
 8053142:	f7ff ffa5 	bl	8053090 <_Bfree>
 8053146:	4644      	mov	r4, r8
 8053148:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 805314c:	3501      	adds	r5, #1
 805314e:	615e      	str	r6, [r3, #20]
 8053150:	6125      	str	r5, [r4, #16]
 8053152:	4620      	mov	r0, r4
 8053154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8053158:	08063534 	.word	0x08063534
 805315c:	08063545 	.word	0x08063545

08053160 <__i2b>:
 8053160:	b510      	push	{r4, lr}
 8053162:	460c      	mov	r4, r1
 8053164:	2101      	movs	r1, #1
 8053166:	f7ff ff53 	bl	8053010 <_Balloc>
 805316a:	4602      	mov	r2, r0
 805316c:	b928      	cbnz	r0, 805317a <__i2b+0x1a>
 805316e:	4b05      	ldr	r3, [pc, #20]	; (8053184 <__i2b+0x24>)
 8053170:	4805      	ldr	r0, [pc, #20]	; (8053188 <__i2b+0x28>)
 8053172:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8053176:	f000 fb63 	bl	8053840 <__assert_func>
 805317a:	2301      	movs	r3, #1
 805317c:	6144      	str	r4, [r0, #20]
 805317e:	6103      	str	r3, [r0, #16]
 8053180:	bd10      	pop	{r4, pc}
 8053182:	bf00      	nop
 8053184:	08063534 	.word	0x08063534
 8053188:	08063545 	.word	0x08063545

0805318c <__multiply>:
 805318c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8053190:	4691      	mov	r9, r2
 8053192:	690a      	ldr	r2, [r1, #16]
 8053194:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8053198:	429a      	cmp	r2, r3
 805319a:	bfb8      	it	lt
 805319c:	460b      	movlt	r3, r1
 805319e:	460c      	mov	r4, r1
 80531a0:	bfbc      	itt	lt
 80531a2:	464c      	movlt	r4, r9
 80531a4:	4699      	movlt	r9, r3
 80531a6:	6927      	ldr	r7, [r4, #16]
 80531a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80531ac:	68a3      	ldr	r3, [r4, #8]
 80531ae:	6861      	ldr	r1, [r4, #4]
 80531b0:	eb07 060a 	add.w	r6, r7, sl
 80531b4:	42b3      	cmp	r3, r6
 80531b6:	b085      	sub	sp, #20
 80531b8:	bfb8      	it	lt
 80531ba:	3101      	addlt	r1, #1
 80531bc:	f7ff ff28 	bl	8053010 <_Balloc>
 80531c0:	b930      	cbnz	r0, 80531d0 <__multiply+0x44>
 80531c2:	4602      	mov	r2, r0
 80531c4:	4b44      	ldr	r3, [pc, #272]	; (80532d8 <__multiply+0x14c>)
 80531c6:	4845      	ldr	r0, [pc, #276]	; (80532dc <__multiply+0x150>)
 80531c8:	f240 115d 	movw	r1, #349	; 0x15d
 80531cc:	f000 fb38 	bl	8053840 <__assert_func>
 80531d0:	f100 0514 	add.w	r5, r0, #20
 80531d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80531d8:	462b      	mov	r3, r5
 80531da:	2200      	movs	r2, #0
 80531dc:	4543      	cmp	r3, r8
 80531de:	d321      	bcc.n	8053224 <__multiply+0x98>
 80531e0:	f104 0314 	add.w	r3, r4, #20
 80531e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80531e8:	f109 0314 	add.w	r3, r9, #20
 80531ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80531f0:	9202      	str	r2, [sp, #8]
 80531f2:	1b3a      	subs	r2, r7, r4
 80531f4:	3a15      	subs	r2, #21
 80531f6:	f022 0203 	bic.w	r2, r2, #3
 80531fa:	3204      	adds	r2, #4
 80531fc:	f104 0115 	add.w	r1, r4, #21
 8053200:	428f      	cmp	r7, r1
 8053202:	bf38      	it	cc
 8053204:	2204      	movcc	r2, #4
 8053206:	9201      	str	r2, [sp, #4]
 8053208:	9a02      	ldr	r2, [sp, #8]
 805320a:	9303      	str	r3, [sp, #12]
 805320c:	429a      	cmp	r2, r3
 805320e:	d80c      	bhi.n	805322a <__multiply+0x9e>
 8053210:	2e00      	cmp	r6, #0
 8053212:	dd03      	ble.n	805321c <__multiply+0x90>
 8053214:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8053218:	2b00      	cmp	r3, #0
 805321a:	d05a      	beq.n	80532d2 <__multiply+0x146>
 805321c:	6106      	str	r6, [r0, #16]
 805321e:	b005      	add	sp, #20
 8053220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8053224:	f843 2b04 	str.w	r2, [r3], #4
 8053228:	e7d8      	b.n	80531dc <__multiply+0x50>
 805322a:	f8b3 a000 	ldrh.w	sl, [r3]
 805322e:	f1ba 0f00 	cmp.w	sl, #0
 8053232:	d024      	beq.n	805327e <__multiply+0xf2>
 8053234:	f104 0e14 	add.w	lr, r4, #20
 8053238:	46a9      	mov	r9, r5
 805323a:	f04f 0c00 	mov.w	ip, #0
 805323e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8053242:	f8d9 1000 	ldr.w	r1, [r9]
 8053246:	fa1f fb82 	uxth.w	fp, r2
 805324a:	b289      	uxth	r1, r1
 805324c:	fb0a 110b 	mla	r1, sl, fp, r1
 8053250:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8053254:	f8d9 2000 	ldr.w	r2, [r9]
 8053258:	4461      	add	r1, ip
 805325a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 805325e:	fb0a c20b 	mla	r2, sl, fp, ip
 8053262:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8053266:	b289      	uxth	r1, r1
 8053268:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 805326c:	4577      	cmp	r7, lr
 805326e:	f849 1b04 	str.w	r1, [r9], #4
 8053272:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8053276:	d8e2      	bhi.n	805323e <__multiply+0xb2>
 8053278:	9a01      	ldr	r2, [sp, #4]
 805327a:	f845 c002 	str.w	ip, [r5, r2]
 805327e:	9a03      	ldr	r2, [sp, #12]
 8053280:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8053284:	3304      	adds	r3, #4
 8053286:	f1b9 0f00 	cmp.w	r9, #0
 805328a:	d020      	beq.n	80532ce <__multiply+0x142>
 805328c:	6829      	ldr	r1, [r5, #0]
 805328e:	f104 0c14 	add.w	ip, r4, #20
 8053292:	46ae      	mov	lr, r5
 8053294:	f04f 0a00 	mov.w	sl, #0
 8053298:	f8bc b000 	ldrh.w	fp, [ip]
 805329c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80532a0:	fb09 220b 	mla	r2, r9, fp, r2
 80532a4:	4492      	add	sl, r2
 80532a6:	b289      	uxth	r1, r1
 80532a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80532ac:	f84e 1b04 	str.w	r1, [lr], #4
 80532b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80532b4:	f8be 1000 	ldrh.w	r1, [lr]
 80532b8:	0c12      	lsrs	r2, r2, #16
 80532ba:	fb09 1102 	mla	r1, r9, r2, r1
 80532be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80532c2:	4567      	cmp	r7, ip
 80532c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80532c8:	d8e6      	bhi.n	8053298 <__multiply+0x10c>
 80532ca:	9a01      	ldr	r2, [sp, #4]
 80532cc:	50a9      	str	r1, [r5, r2]
 80532ce:	3504      	adds	r5, #4
 80532d0:	e79a      	b.n	8053208 <__multiply+0x7c>
 80532d2:	3e01      	subs	r6, #1
 80532d4:	e79c      	b.n	8053210 <__multiply+0x84>
 80532d6:	bf00      	nop
 80532d8:	08063534 	.word	0x08063534
 80532dc:	08063545 	.word	0x08063545

080532e0 <__pow5mult>:
 80532e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80532e4:	4615      	mov	r5, r2
 80532e6:	f012 0203 	ands.w	r2, r2, #3
 80532ea:	4606      	mov	r6, r0
 80532ec:	460f      	mov	r7, r1
 80532ee:	d007      	beq.n	8053300 <__pow5mult+0x20>
 80532f0:	4c25      	ldr	r4, [pc, #148]	; (8053388 <__pow5mult+0xa8>)
 80532f2:	3a01      	subs	r2, #1
 80532f4:	2300      	movs	r3, #0
 80532f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80532fa:	f7ff feeb 	bl	80530d4 <__multadd>
 80532fe:	4607      	mov	r7, r0
 8053300:	10ad      	asrs	r5, r5, #2
 8053302:	d03d      	beq.n	8053380 <__pow5mult+0xa0>
 8053304:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8053306:	b97c      	cbnz	r4, 8053328 <__pow5mult+0x48>
 8053308:	2010      	movs	r0, #16
 805330a:	f7ff fb27 	bl	805295c <malloc>
 805330e:	4602      	mov	r2, r0
 8053310:	6270      	str	r0, [r6, #36]	; 0x24
 8053312:	b928      	cbnz	r0, 8053320 <__pow5mult+0x40>
 8053314:	4b1d      	ldr	r3, [pc, #116]	; (805338c <__pow5mult+0xac>)
 8053316:	481e      	ldr	r0, [pc, #120]	; (8053390 <__pow5mult+0xb0>)
 8053318:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 805331c:	f000 fa90 	bl	8053840 <__assert_func>
 8053320:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8053324:	6004      	str	r4, [r0, #0]
 8053326:	60c4      	str	r4, [r0, #12]
 8053328:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 805332c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8053330:	b94c      	cbnz	r4, 8053346 <__pow5mult+0x66>
 8053332:	f240 2171 	movw	r1, #625	; 0x271
 8053336:	4630      	mov	r0, r6
 8053338:	f7ff ff12 	bl	8053160 <__i2b>
 805333c:	2300      	movs	r3, #0
 805333e:	f8c8 0008 	str.w	r0, [r8, #8]
 8053342:	4604      	mov	r4, r0
 8053344:	6003      	str	r3, [r0, #0]
 8053346:	f04f 0900 	mov.w	r9, #0
 805334a:	07eb      	lsls	r3, r5, #31
 805334c:	d50a      	bpl.n	8053364 <__pow5mult+0x84>
 805334e:	4639      	mov	r1, r7
 8053350:	4622      	mov	r2, r4
 8053352:	4630      	mov	r0, r6
 8053354:	f7ff ff1a 	bl	805318c <__multiply>
 8053358:	4639      	mov	r1, r7
 805335a:	4680      	mov	r8, r0
 805335c:	4630      	mov	r0, r6
 805335e:	f7ff fe97 	bl	8053090 <_Bfree>
 8053362:	4647      	mov	r7, r8
 8053364:	106d      	asrs	r5, r5, #1
 8053366:	d00b      	beq.n	8053380 <__pow5mult+0xa0>
 8053368:	6820      	ldr	r0, [r4, #0]
 805336a:	b938      	cbnz	r0, 805337c <__pow5mult+0x9c>
 805336c:	4622      	mov	r2, r4
 805336e:	4621      	mov	r1, r4
 8053370:	4630      	mov	r0, r6
 8053372:	f7ff ff0b 	bl	805318c <__multiply>
 8053376:	6020      	str	r0, [r4, #0]
 8053378:	f8c0 9000 	str.w	r9, [r0]
 805337c:	4604      	mov	r4, r0
 805337e:	e7e4      	b.n	805334a <__pow5mult+0x6a>
 8053380:	4638      	mov	r0, r7
 8053382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8053386:	bf00      	nop
 8053388:	0805e254 	.word	0x0805e254
 805338c:	080634a0 	.word	0x080634a0
 8053390:	08063545 	.word	0x08063545

08053394 <__lshift>:
 8053394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8053398:	460c      	mov	r4, r1
 805339a:	6849      	ldr	r1, [r1, #4]
 805339c:	6923      	ldr	r3, [r4, #16]
 805339e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80533a2:	68a3      	ldr	r3, [r4, #8]
 80533a4:	4607      	mov	r7, r0
 80533a6:	4691      	mov	r9, r2
 80533a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80533ac:	f108 0601 	add.w	r6, r8, #1
 80533b0:	42b3      	cmp	r3, r6
 80533b2:	db0b      	blt.n	80533cc <__lshift+0x38>
 80533b4:	4638      	mov	r0, r7
 80533b6:	f7ff fe2b 	bl	8053010 <_Balloc>
 80533ba:	4605      	mov	r5, r0
 80533bc:	b948      	cbnz	r0, 80533d2 <__lshift+0x3e>
 80533be:	4602      	mov	r2, r0
 80533c0:	4b2a      	ldr	r3, [pc, #168]	; (805346c <__lshift+0xd8>)
 80533c2:	482b      	ldr	r0, [pc, #172]	; (8053470 <__lshift+0xdc>)
 80533c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80533c8:	f000 fa3a 	bl	8053840 <__assert_func>
 80533cc:	3101      	adds	r1, #1
 80533ce:	005b      	lsls	r3, r3, #1
 80533d0:	e7ee      	b.n	80533b0 <__lshift+0x1c>
 80533d2:	2300      	movs	r3, #0
 80533d4:	f100 0114 	add.w	r1, r0, #20
 80533d8:	f100 0210 	add.w	r2, r0, #16
 80533dc:	4618      	mov	r0, r3
 80533de:	4553      	cmp	r3, sl
 80533e0:	db37      	blt.n	8053452 <__lshift+0xbe>
 80533e2:	6920      	ldr	r0, [r4, #16]
 80533e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80533e8:	f104 0314 	add.w	r3, r4, #20
 80533ec:	f019 091f 	ands.w	r9, r9, #31
 80533f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80533f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80533f8:	d02f      	beq.n	805345a <__lshift+0xc6>
 80533fa:	f1c9 0e20 	rsb	lr, r9, #32
 80533fe:	468a      	mov	sl, r1
 8053400:	f04f 0c00 	mov.w	ip, #0
 8053404:	681a      	ldr	r2, [r3, #0]
 8053406:	fa02 f209 	lsl.w	r2, r2, r9
 805340a:	ea42 020c 	orr.w	r2, r2, ip
 805340e:	f84a 2b04 	str.w	r2, [sl], #4
 8053412:	f853 2b04 	ldr.w	r2, [r3], #4
 8053416:	4298      	cmp	r0, r3
 8053418:	fa22 fc0e 	lsr.w	ip, r2, lr
 805341c:	d8f2      	bhi.n	8053404 <__lshift+0x70>
 805341e:	1b03      	subs	r3, r0, r4
 8053420:	3b15      	subs	r3, #21
 8053422:	f023 0303 	bic.w	r3, r3, #3
 8053426:	3304      	adds	r3, #4
 8053428:	f104 0215 	add.w	r2, r4, #21
 805342c:	4290      	cmp	r0, r2
 805342e:	bf38      	it	cc
 8053430:	2304      	movcc	r3, #4
 8053432:	f841 c003 	str.w	ip, [r1, r3]
 8053436:	f1bc 0f00 	cmp.w	ip, #0
 805343a:	d001      	beq.n	8053440 <__lshift+0xac>
 805343c:	f108 0602 	add.w	r6, r8, #2
 8053440:	3e01      	subs	r6, #1
 8053442:	4638      	mov	r0, r7
 8053444:	612e      	str	r6, [r5, #16]
 8053446:	4621      	mov	r1, r4
 8053448:	f7ff fe22 	bl	8053090 <_Bfree>
 805344c:	4628      	mov	r0, r5
 805344e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8053452:	f842 0f04 	str.w	r0, [r2, #4]!
 8053456:	3301      	adds	r3, #1
 8053458:	e7c1      	b.n	80533de <__lshift+0x4a>
 805345a:	3904      	subs	r1, #4
 805345c:	f853 2b04 	ldr.w	r2, [r3], #4
 8053460:	f841 2f04 	str.w	r2, [r1, #4]!
 8053464:	4298      	cmp	r0, r3
 8053466:	d8f9      	bhi.n	805345c <__lshift+0xc8>
 8053468:	e7ea      	b.n	8053440 <__lshift+0xac>
 805346a:	bf00      	nop
 805346c:	08063534 	.word	0x08063534
 8053470:	08063545 	.word	0x08063545

08053474 <__mdiff>:
 8053474:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8053478:	460c      	mov	r4, r1
 805347a:	4606      	mov	r6, r0
 805347c:	4611      	mov	r1, r2
 805347e:	4620      	mov	r0, r4
 8053480:	4690      	mov	r8, r2
 8053482:	f007 ff5e 	bl	805b342 <__mcmp>
 8053486:	1e05      	subs	r5, r0, #0
 8053488:	d110      	bne.n	80534ac <__mdiff+0x38>
 805348a:	4629      	mov	r1, r5
 805348c:	4630      	mov	r0, r6
 805348e:	f7ff fdbf 	bl	8053010 <_Balloc>
 8053492:	b930      	cbnz	r0, 80534a2 <__mdiff+0x2e>
 8053494:	4b3a      	ldr	r3, [pc, #232]	; (8053580 <__mdiff+0x10c>)
 8053496:	4602      	mov	r2, r0
 8053498:	f240 2132 	movw	r1, #562	; 0x232
 805349c:	4839      	ldr	r0, [pc, #228]	; (8053584 <__mdiff+0x110>)
 805349e:	f000 f9cf 	bl	8053840 <__assert_func>
 80534a2:	2301      	movs	r3, #1
 80534a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80534a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80534ac:	bfa4      	itt	ge
 80534ae:	4643      	movge	r3, r8
 80534b0:	46a0      	movge	r8, r4
 80534b2:	4630      	mov	r0, r6
 80534b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80534b8:	bfa6      	itte	ge
 80534ba:	461c      	movge	r4, r3
 80534bc:	2500      	movge	r5, #0
 80534be:	2501      	movlt	r5, #1
 80534c0:	f7ff fda6 	bl	8053010 <_Balloc>
 80534c4:	b920      	cbnz	r0, 80534d0 <__mdiff+0x5c>
 80534c6:	4b2e      	ldr	r3, [pc, #184]	; (8053580 <__mdiff+0x10c>)
 80534c8:	4602      	mov	r2, r0
 80534ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 80534ce:	e7e5      	b.n	805349c <__mdiff+0x28>
 80534d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80534d4:	6926      	ldr	r6, [r4, #16]
 80534d6:	60c5      	str	r5, [r0, #12]
 80534d8:	f104 0914 	add.w	r9, r4, #20
 80534dc:	f108 0514 	add.w	r5, r8, #20
 80534e0:	f100 0e14 	add.w	lr, r0, #20
 80534e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80534e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80534ec:	f108 0210 	add.w	r2, r8, #16
 80534f0:	46f2      	mov	sl, lr
 80534f2:	2100      	movs	r1, #0
 80534f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80534f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80534fc:	fa1f f883 	uxth.w	r8, r3
 8053500:	fa11 f18b 	uxtah	r1, r1, fp
 8053504:	0c1b      	lsrs	r3, r3, #16
 8053506:	eba1 0808 	sub.w	r8, r1, r8
 805350a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 805350e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8053512:	fa1f f888 	uxth.w	r8, r8
 8053516:	1419      	asrs	r1, r3, #16
 8053518:	454e      	cmp	r6, r9
 805351a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 805351e:	f84a 3b04 	str.w	r3, [sl], #4
 8053522:	d8e7      	bhi.n	80534f4 <__mdiff+0x80>
 8053524:	1b33      	subs	r3, r6, r4
 8053526:	3b15      	subs	r3, #21
 8053528:	f023 0303 	bic.w	r3, r3, #3
 805352c:	3304      	adds	r3, #4
 805352e:	3415      	adds	r4, #21
 8053530:	42a6      	cmp	r6, r4
 8053532:	bf38      	it	cc
 8053534:	2304      	movcc	r3, #4
 8053536:	441d      	add	r5, r3
 8053538:	4473      	add	r3, lr
 805353a:	469e      	mov	lr, r3
 805353c:	462e      	mov	r6, r5
 805353e:	4566      	cmp	r6, ip
 8053540:	d30e      	bcc.n	8053560 <__mdiff+0xec>
 8053542:	f10c 0203 	add.w	r2, ip, #3
 8053546:	1b52      	subs	r2, r2, r5
 8053548:	f022 0203 	bic.w	r2, r2, #3
 805354c:	3d03      	subs	r5, #3
 805354e:	45ac      	cmp	ip, r5
 8053550:	bf38      	it	cc
 8053552:	2200      	movcc	r2, #0
 8053554:	441a      	add	r2, r3
 8053556:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 805355a:	b17b      	cbz	r3, 805357c <__mdiff+0x108>
 805355c:	6107      	str	r7, [r0, #16]
 805355e:	e7a3      	b.n	80534a8 <__mdiff+0x34>
 8053560:	f856 8b04 	ldr.w	r8, [r6], #4
 8053564:	fa11 f288 	uxtah	r2, r1, r8
 8053568:	1414      	asrs	r4, r2, #16
 805356a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 805356e:	b292      	uxth	r2, r2
 8053570:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8053574:	f84e 2b04 	str.w	r2, [lr], #4
 8053578:	1421      	asrs	r1, r4, #16
 805357a:	e7e0      	b.n	805353e <__mdiff+0xca>
 805357c:	3f01      	subs	r7, #1
 805357e:	e7ea      	b.n	8053556 <__mdiff+0xe2>
 8053580:	08063534 	.word	0x08063534
 8053584:	08063545 	.word	0x08063545

08053588 <__d2b>:
 8053588:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 805358c:	4689      	mov	r9, r1
 805358e:	2101      	movs	r1, #1
 8053590:	ec57 6b10 	vmov	r6, r7, d0
 8053594:	4690      	mov	r8, r2
 8053596:	f7ff fd3b 	bl	8053010 <_Balloc>
 805359a:	4604      	mov	r4, r0
 805359c:	b930      	cbnz	r0, 80535ac <__d2b+0x24>
 805359e:	4602      	mov	r2, r0
 80535a0:	4b25      	ldr	r3, [pc, #148]	; (8053638 <__d2b+0xb0>)
 80535a2:	4826      	ldr	r0, [pc, #152]	; (805363c <__d2b+0xb4>)
 80535a4:	f240 310a 	movw	r1, #778	; 0x30a
 80535a8:	f000 f94a 	bl	8053840 <__assert_func>
 80535ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80535b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80535b4:	bb35      	cbnz	r5, 8053604 <__d2b+0x7c>
 80535b6:	2e00      	cmp	r6, #0
 80535b8:	9301      	str	r3, [sp, #4]
 80535ba:	d028      	beq.n	805360e <__d2b+0x86>
 80535bc:	4668      	mov	r0, sp
 80535be:	9600      	str	r6, [sp, #0]
 80535c0:	f007 fe90 	bl	805b2e4 <__lo0bits>
 80535c4:	9900      	ldr	r1, [sp, #0]
 80535c6:	b300      	cbz	r0, 805360a <__d2b+0x82>
 80535c8:	9a01      	ldr	r2, [sp, #4]
 80535ca:	f1c0 0320 	rsb	r3, r0, #32
 80535ce:	fa02 f303 	lsl.w	r3, r2, r3
 80535d2:	430b      	orrs	r3, r1
 80535d4:	40c2      	lsrs	r2, r0
 80535d6:	6163      	str	r3, [r4, #20]
 80535d8:	9201      	str	r2, [sp, #4]
 80535da:	9b01      	ldr	r3, [sp, #4]
 80535dc:	61a3      	str	r3, [r4, #24]
 80535de:	2b00      	cmp	r3, #0
 80535e0:	bf14      	ite	ne
 80535e2:	2202      	movne	r2, #2
 80535e4:	2201      	moveq	r2, #1
 80535e6:	6122      	str	r2, [r4, #16]
 80535e8:	b1d5      	cbz	r5, 8053620 <__d2b+0x98>
 80535ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80535ee:	4405      	add	r5, r0
 80535f0:	f8c9 5000 	str.w	r5, [r9]
 80535f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80535f8:	f8c8 0000 	str.w	r0, [r8]
 80535fc:	4620      	mov	r0, r4
 80535fe:	b003      	add	sp, #12
 8053600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8053604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8053608:	e7d5      	b.n	80535b6 <__d2b+0x2e>
 805360a:	6161      	str	r1, [r4, #20]
 805360c:	e7e5      	b.n	80535da <__d2b+0x52>
 805360e:	a801      	add	r0, sp, #4
 8053610:	f007 fe68 	bl	805b2e4 <__lo0bits>
 8053614:	9b01      	ldr	r3, [sp, #4]
 8053616:	6163      	str	r3, [r4, #20]
 8053618:	2201      	movs	r2, #1
 805361a:	6122      	str	r2, [r4, #16]
 805361c:	3020      	adds	r0, #32
 805361e:	e7e3      	b.n	80535e8 <__d2b+0x60>
 8053620:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8053624:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8053628:	f8c9 0000 	str.w	r0, [r9]
 805362c:	6918      	ldr	r0, [r3, #16]
 805362e:	f007 fe39 	bl	805b2a4 <__hi0bits>
 8053632:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8053636:	e7df      	b.n	80535f8 <__d2b+0x70>
 8053638:	08063534 	.word	0x08063534
 805363c:	08063545 	.word	0x08063545

08053640 <_svfiprintf_r>:
 8053640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8053644:	4698      	mov	r8, r3
 8053646:	898b      	ldrh	r3, [r1, #12]
 8053648:	061b      	lsls	r3, r3, #24
 805364a:	b09d      	sub	sp, #116	; 0x74
 805364c:	4607      	mov	r7, r0
 805364e:	460d      	mov	r5, r1
 8053650:	4614      	mov	r4, r2
 8053652:	d50e      	bpl.n	8053672 <_svfiprintf_r+0x32>
 8053654:	690b      	ldr	r3, [r1, #16]
 8053656:	b963      	cbnz	r3, 8053672 <_svfiprintf_r+0x32>
 8053658:	2140      	movs	r1, #64	; 0x40
 805365a:	f7ff f9db 	bl	8052a14 <_malloc_r>
 805365e:	6028      	str	r0, [r5, #0]
 8053660:	6128      	str	r0, [r5, #16]
 8053662:	b920      	cbnz	r0, 805366e <_svfiprintf_r+0x2e>
 8053664:	230c      	movs	r3, #12
 8053666:	603b      	str	r3, [r7, #0]
 8053668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 805366c:	e0d1      	b.n	8053812 <_svfiprintf_r+0x1d2>
 805366e:	2340      	movs	r3, #64	; 0x40
 8053670:	616b      	str	r3, [r5, #20]
 8053672:	2300      	movs	r3, #0
 8053674:	9309      	str	r3, [sp, #36]	; 0x24
 8053676:	2320      	movs	r3, #32
 8053678:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 805367c:	f8cd 800c 	str.w	r8, [sp, #12]
 8053680:	2330      	movs	r3, #48	; 0x30
 8053682:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 805382c <_svfiprintf_r+0x1ec>
 8053686:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 805368a:	f04f 0901 	mov.w	r9, #1
 805368e:	4623      	mov	r3, r4
 8053690:	469a      	mov	sl, r3
 8053692:	f813 2b01 	ldrb.w	r2, [r3], #1
 8053696:	b10a      	cbz	r2, 805369c <_svfiprintf_r+0x5c>
 8053698:	2a25      	cmp	r2, #37	; 0x25
 805369a:	d1f9      	bne.n	8053690 <_svfiprintf_r+0x50>
 805369c:	ebba 0b04 	subs.w	fp, sl, r4
 80536a0:	d00b      	beq.n	80536ba <_svfiprintf_r+0x7a>
 80536a2:	465b      	mov	r3, fp
 80536a4:	4622      	mov	r2, r4
 80536a6:	4629      	mov	r1, r5
 80536a8:	4638      	mov	r0, r7
 80536aa:	f007 fe9b 	bl	805b3e4 <__ssputs_r>
 80536ae:	3001      	adds	r0, #1
 80536b0:	f000 80aa 	beq.w	8053808 <_svfiprintf_r+0x1c8>
 80536b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80536b6:	445a      	add	r2, fp
 80536b8:	9209      	str	r2, [sp, #36]	; 0x24
 80536ba:	f89a 3000 	ldrb.w	r3, [sl]
 80536be:	2b00      	cmp	r3, #0
 80536c0:	f000 80a2 	beq.w	8053808 <_svfiprintf_r+0x1c8>
 80536c4:	2300      	movs	r3, #0
 80536c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80536ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80536ce:	f10a 0a01 	add.w	sl, sl, #1
 80536d2:	9304      	str	r3, [sp, #16]
 80536d4:	9307      	str	r3, [sp, #28]
 80536d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80536da:	931a      	str	r3, [sp, #104]	; 0x68
 80536dc:	4654      	mov	r4, sl
 80536de:	2205      	movs	r2, #5
 80536e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80536e4:	4851      	ldr	r0, [pc, #324]	; (805382c <_svfiprintf_r+0x1ec>)
 80536e6:	f7ec fe8b 	bl	8040400 <memchr>
 80536ea:	9a04      	ldr	r2, [sp, #16]
 80536ec:	b9d8      	cbnz	r0, 8053726 <_svfiprintf_r+0xe6>
 80536ee:	06d0      	lsls	r0, r2, #27
 80536f0:	bf44      	itt	mi
 80536f2:	2320      	movmi	r3, #32
 80536f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80536f8:	0711      	lsls	r1, r2, #28
 80536fa:	bf44      	itt	mi
 80536fc:	232b      	movmi	r3, #43	; 0x2b
 80536fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8053702:	f89a 3000 	ldrb.w	r3, [sl]
 8053706:	2b2a      	cmp	r3, #42	; 0x2a
 8053708:	d015      	beq.n	8053736 <_svfiprintf_r+0xf6>
 805370a:	9a07      	ldr	r2, [sp, #28]
 805370c:	4654      	mov	r4, sl
 805370e:	2000      	movs	r0, #0
 8053710:	f04f 0c0a 	mov.w	ip, #10
 8053714:	4621      	mov	r1, r4
 8053716:	f811 3b01 	ldrb.w	r3, [r1], #1
 805371a:	3b30      	subs	r3, #48	; 0x30
 805371c:	2b09      	cmp	r3, #9
 805371e:	d94e      	bls.n	80537be <_svfiprintf_r+0x17e>
 8053720:	b1b0      	cbz	r0, 8053750 <_svfiprintf_r+0x110>
 8053722:	9207      	str	r2, [sp, #28]
 8053724:	e014      	b.n	8053750 <_svfiprintf_r+0x110>
 8053726:	eba0 0308 	sub.w	r3, r0, r8
 805372a:	fa09 f303 	lsl.w	r3, r9, r3
 805372e:	4313      	orrs	r3, r2
 8053730:	9304      	str	r3, [sp, #16]
 8053732:	46a2      	mov	sl, r4
 8053734:	e7d2      	b.n	80536dc <_svfiprintf_r+0x9c>
 8053736:	9b03      	ldr	r3, [sp, #12]
 8053738:	1d19      	adds	r1, r3, #4
 805373a:	681b      	ldr	r3, [r3, #0]
 805373c:	9103      	str	r1, [sp, #12]
 805373e:	2b00      	cmp	r3, #0
 8053740:	bfbb      	ittet	lt
 8053742:	425b      	neglt	r3, r3
 8053744:	f042 0202 	orrlt.w	r2, r2, #2
 8053748:	9307      	strge	r3, [sp, #28]
 805374a:	9307      	strlt	r3, [sp, #28]
 805374c:	bfb8      	it	lt
 805374e:	9204      	strlt	r2, [sp, #16]
 8053750:	7823      	ldrb	r3, [r4, #0]
 8053752:	2b2e      	cmp	r3, #46	; 0x2e
 8053754:	d10c      	bne.n	8053770 <_svfiprintf_r+0x130>
 8053756:	7863      	ldrb	r3, [r4, #1]
 8053758:	2b2a      	cmp	r3, #42	; 0x2a
 805375a:	d135      	bne.n	80537c8 <_svfiprintf_r+0x188>
 805375c:	9b03      	ldr	r3, [sp, #12]
 805375e:	1d1a      	adds	r2, r3, #4
 8053760:	681b      	ldr	r3, [r3, #0]
 8053762:	9203      	str	r2, [sp, #12]
 8053764:	2b00      	cmp	r3, #0
 8053766:	bfb8      	it	lt
 8053768:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 805376c:	3402      	adds	r4, #2
 805376e:	9305      	str	r3, [sp, #20]
 8053770:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 805383c <_svfiprintf_r+0x1fc>
 8053774:	7821      	ldrb	r1, [r4, #0]
 8053776:	2203      	movs	r2, #3
 8053778:	4650      	mov	r0, sl
 805377a:	f7ec fe41 	bl	8040400 <memchr>
 805377e:	b140      	cbz	r0, 8053792 <_svfiprintf_r+0x152>
 8053780:	2340      	movs	r3, #64	; 0x40
 8053782:	eba0 000a 	sub.w	r0, r0, sl
 8053786:	fa03 f000 	lsl.w	r0, r3, r0
 805378a:	9b04      	ldr	r3, [sp, #16]
 805378c:	4303      	orrs	r3, r0
 805378e:	3401      	adds	r4, #1
 8053790:	9304      	str	r3, [sp, #16]
 8053792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8053796:	4826      	ldr	r0, [pc, #152]	; (8053830 <_svfiprintf_r+0x1f0>)
 8053798:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 805379c:	2206      	movs	r2, #6
 805379e:	f7ec fe2f 	bl	8040400 <memchr>
 80537a2:	2800      	cmp	r0, #0
 80537a4:	d038      	beq.n	8053818 <_svfiprintf_r+0x1d8>
 80537a6:	4b23      	ldr	r3, [pc, #140]	; (8053834 <_svfiprintf_r+0x1f4>)
 80537a8:	bb1b      	cbnz	r3, 80537f2 <_svfiprintf_r+0x1b2>
 80537aa:	9b03      	ldr	r3, [sp, #12]
 80537ac:	3307      	adds	r3, #7
 80537ae:	f023 0307 	bic.w	r3, r3, #7
 80537b2:	3308      	adds	r3, #8
 80537b4:	9303      	str	r3, [sp, #12]
 80537b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80537b8:	4433      	add	r3, r6
 80537ba:	9309      	str	r3, [sp, #36]	; 0x24
 80537bc:	e767      	b.n	805368e <_svfiprintf_r+0x4e>
 80537be:	fb0c 3202 	mla	r2, ip, r2, r3
 80537c2:	460c      	mov	r4, r1
 80537c4:	2001      	movs	r0, #1
 80537c6:	e7a5      	b.n	8053714 <_svfiprintf_r+0xd4>
 80537c8:	2300      	movs	r3, #0
 80537ca:	3401      	adds	r4, #1
 80537cc:	9305      	str	r3, [sp, #20]
 80537ce:	4619      	mov	r1, r3
 80537d0:	f04f 0c0a 	mov.w	ip, #10
 80537d4:	4620      	mov	r0, r4
 80537d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80537da:	3a30      	subs	r2, #48	; 0x30
 80537dc:	2a09      	cmp	r2, #9
 80537de:	d903      	bls.n	80537e8 <_svfiprintf_r+0x1a8>
 80537e0:	2b00      	cmp	r3, #0
 80537e2:	d0c5      	beq.n	8053770 <_svfiprintf_r+0x130>
 80537e4:	9105      	str	r1, [sp, #20]
 80537e6:	e7c3      	b.n	8053770 <_svfiprintf_r+0x130>
 80537e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80537ec:	4604      	mov	r4, r0
 80537ee:	2301      	movs	r3, #1
 80537f0:	e7f0      	b.n	80537d4 <_svfiprintf_r+0x194>
 80537f2:	ab03      	add	r3, sp, #12
 80537f4:	9300      	str	r3, [sp, #0]
 80537f6:	462a      	mov	r2, r5
 80537f8:	4b0f      	ldr	r3, [pc, #60]	; (8053838 <_svfiprintf_r+0x1f8>)
 80537fa:	a904      	add	r1, sp, #16
 80537fc:	4638      	mov	r0, r7
 80537fe:	f7ee f857 	bl	80418b0 <_printf_float>
 8053802:	1c42      	adds	r2, r0, #1
 8053804:	4606      	mov	r6, r0
 8053806:	d1d6      	bne.n	80537b6 <_svfiprintf_r+0x176>
 8053808:	89ab      	ldrh	r3, [r5, #12]
 805380a:	065b      	lsls	r3, r3, #25
 805380c:	f53f af2c 	bmi.w	8053668 <_svfiprintf_r+0x28>
 8053810:	9809      	ldr	r0, [sp, #36]	; 0x24
 8053812:	b01d      	add	sp, #116	; 0x74
 8053814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8053818:	ab03      	add	r3, sp, #12
 805381a:	9300      	str	r3, [sp, #0]
 805381c:	462a      	mov	r2, r5
 805381e:	4b06      	ldr	r3, [pc, #24]	; (8053838 <_svfiprintf_r+0x1f8>)
 8053820:	a904      	add	r1, sp, #16
 8053822:	4638      	mov	r0, r7
 8053824:	f7ff f950 	bl	8052ac8 <_printf_i>
 8053828:	e7eb      	b.n	8053802 <_svfiprintf_r+0x1c2>
 805382a:	bf00      	nop
 805382c:	080635c3 	.word	0x080635c3
 8053830:	080635cd 	.word	0x080635cd
 8053834:	080418b1 	.word	0x080418b1
 8053838:	0805b3e5 	.word	0x0805b3e5
 805383c:	080635c9 	.word	0x080635c9

08053840 <__assert_func>:
 8053840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8053842:	4614      	mov	r4, r2
 8053844:	461a      	mov	r2, r3
 8053846:	4b09      	ldr	r3, [pc, #36]	; (805386c <__assert_func+0x2c>)
 8053848:	681b      	ldr	r3, [r3, #0]
 805384a:	4605      	mov	r5, r0
 805384c:	68d8      	ldr	r0, [r3, #12]
 805384e:	b14c      	cbz	r4, 8053864 <__assert_func+0x24>
 8053850:	4b07      	ldr	r3, [pc, #28]	; (8053870 <__assert_func+0x30>)
 8053852:	9100      	str	r1, [sp, #0]
 8053854:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8053858:	4906      	ldr	r1, [pc, #24]	; (8053874 <__assert_func+0x34>)
 805385a:	462b      	mov	r3, r5
 805385c:	f000 f80e 	bl	805387c <fiprintf>
 8053860:	f007 fa9a 	bl	805ad98 <abort>
 8053864:	4b04      	ldr	r3, [pc, #16]	; (8053878 <__assert_func+0x38>)
 8053866:	461c      	mov	r4, r3
 8053868:	e7f3      	b.n	8053852 <__assert_func+0x12>
 805386a:	bf00      	nop
 805386c:	20020598 	.word	0x20020598
 8053870:	080635d4 	.word	0x080635d4
 8053874:	080635e1 	.word	0x080635e1
 8053878:	08060045 	.word	0x08060045

0805387c <fiprintf>:
 805387c:	b40e      	push	{r1, r2, r3}
 805387e:	b503      	push	{r0, r1, lr}
 8053880:	4601      	mov	r1, r0
 8053882:	ab03      	add	r3, sp, #12
 8053884:	4805      	ldr	r0, [pc, #20]	; (805389c <fiprintf+0x20>)
 8053886:	f853 2b04 	ldr.w	r2, [r3], #4
 805388a:	6800      	ldr	r0, [r0, #0]
 805388c:	9301      	str	r3, [sp, #4]
 805388e:	f000 f807 	bl	80538a0 <_vfiprintf_r>
 8053892:	b002      	add	sp, #8
 8053894:	f85d eb04 	ldr.w	lr, [sp], #4
 8053898:	b003      	add	sp, #12
 805389a:	4770      	bx	lr
 805389c:	20020598 	.word	0x20020598

080538a0 <_vfiprintf_r>:
 80538a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80538a4:	460d      	mov	r5, r1
 80538a6:	b09d      	sub	sp, #116	; 0x74
 80538a8:	4614      	mov	r4, r2
 80538aa:	4698      	mov	r8, r3
 80538ac:	4606      	mov	r6, r0
 80538ae:	b118      	cbz	r0, 80538b8 <_vfiprintf_r+0x18>
 80538b0:	6983      	ldr	r3, [r0, #24]
 80538b2:	b90b      	cbnz	r3, 80538b8 <_vfiprintf_r+0x18>
 80538b4:	f000 fae8 	bl	8053e88 <__sinit>
 80538b8:	4b89      	ldr	r3, [pc, #548]	; (8053ae0 <_vfiprintf_r+0x240>)
 80538ba:	429d      	cmp	r5, r3
 80538bc:	d11b      	bne.n	80538f6 <_vfiprintf_r+0x56>
 80538be:	6875      	ldr	r5, [r6, #4]
 80538c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80538c2:	07d9      	lsls	r1, r3, #31
 80538c4:	d405      	bmi.n	80538d2 <_vfiprintf_r+0x32>
 80538c6:	89ab      	ldrh	r3, [r5, #12]
 80538c8:	059a      	lsls	r2, r3, #22
 80538ca:	d402      	bmi.n	80538d2 <_vfiprintf_r+0x32>
 80538cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80538ce:	f003 fec9 	bl	8057664 <__retarget_lock_acquire_recursive>
 80538d2:	89ab      	ldrh	r3, [r5, #12]
 80538d4:	071b      	lsls	r3, r3, #28
 80538d6:	d501      	bpl.n	80538dc <_vfiprintf_r+0x3c>
 80538d8:	692b      	ldr	r3, [r5, #16]
 80538da:	b9eb      	cbnz	r3, 8053918 <_vfiprintf_r+0x78>
 80538dc:	4629      	mov	r1, r5
 80538de:	4630      	mov	r0, r6
 80538e0:	f000 f960 	bl	8053ba4 <__swsetup_r>
 80538e4:	b1c0      	cbz	r0, 8053918 <_vfiprintf_r+0x78>
 80538e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80538e8:	07dc      	lsls	r4, r3, #31
 80538ea:	d50e      	bpl.n	805390a <_vfiprintf_r+0x6a>
 80538ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80538f0:	b01d      	add	sp, #116	; 0x74
 80538f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80538f6:	4b7b      	ldr	r3, [pc, #492]	; (8053ae4 <_vfiprintf_r+0x244>)
 80538f8:	429d      	cmp	r5, r3
 80538fa:	d101      	bne.n	8053900 <_vfiprintf_r+0x60>
 80538fc:	68b5      	ldr	r5, [r6, #8]
 80538fe:	e7df      	b.n	80538c0 <_vfiprintf_r+0x20>
 8053900:	4b79      	ldr	r3, [pc, #484]	; (8053ae8 <_vfiprintf_r+0x248>)
 8053902:	429d      	cmp	r5, r3
 8053904:	bf08      	it	eq
 8053906:	68f5      	ldreq	r5, [r6, #12]
 8053908:	e7da      	b.n	80538c0 <_vfiprintf_r+0x20>
 805390a:	89ab      	ldrh	r3, [r5, #12]
 805390c:	0598      	lsls	r0, r3, #22
 805390e:	d4ed      	bmi.n	80538ec <_vfiprintf_r+0x4c>
 8053910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8053912:	f003 fead 	bl	8057670 <__retarget_lock_release_recursive>
 8053916:	e7e9      	b.n	80538ec <_vfiprintf_r+0x4c>
 8053918:	2300      	movs	r3, #0
 805391a:	9309      	str	r3, [sp, #36]	; 0x24
 805391c:	2320      	movs	r3, #32
 805391e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8053922:	f8cd 800c 	str.w	r8, [sp, #12]
 8053926:	2330      	movs	r3, #48	; 0x30
 8053928:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8053aec <_vfiprintf_r+0x24c>
 805392c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8053930:	f04f 0901 	mov.w	r9, #1
 8053934:	4623      	mov	r3, r4
 8053936:	469a      	mov	sl, r3
 8053938:	f813 2b01 	ldrb.w	r2, [r3], #1
 805393c:	b10a      	cbz	r2, 8053942 <_vfiprintf_r+0xa2>
 805393e:	2a25      	cmp	r2, #37	; 0x25
 8053940:	d1f9      	bne.n	8053936 <_vfiprintf_r+0x96>
 8053942:	ebba 0b04 	subs.w	fp, sl, r4
 8053946:	d00b      	beq.n	8053960 <_vfiprintf_r+0xc0>
 8053948:	465b      	mov	r3, fp
 805394a:	4622      	mov	r2, r4
 805394c:	4629      	mov	r1, r5
 805394e:	4630      	mov	r0, r6
 8053950:	f007 fdd4 	bl	805b4fc <__sfputs_r>
 8053954:	3001      	adds	r0, #1
 8053956:	f000 80aa 	beq.w	8053aae <_vfiprintf_r+0x20e>
 805395a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 805395c:	445a      	add	r2, fp
 805395e:	9209      	str	r2, [sp, #36]	; 0x24
 8053960:	f89a 3000 	ldrb.w	r3, [sl]
 8053964:	2b00      	cmp	r3, #0
 8053966:	f000 80a2 	beq.w	8053aae <_vfiprintf_r+0x20e>
 805396a:	2300      	movs	r3, #0
 805396c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8053970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8053974:	f10a 0a01 	add.w	sl, sl, #1
 8053978:	9304      	str	r3, [sp, #16]
 805397a:	9307      	str	r3, [sp, #28]
 805397c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8053980:	931a      	str	r3, [sp, #104]	; 0x68
 8053982:	4654      	mov	r4, sl
 8053984:	2205      	movs	r2, #5
 8053986:	f814 1b01 	ldrb.w	r1, [r4], #1
 805398a:	4858      	ldr	r0, [pc, #352]	; (8053aec <_vfiprintf_r+0x24c>)
 805398c:	f7ec fd38 	bl	8040400 <memchr>
 8053990:	9a04      	ldr	r2, [sp, #16]
 8053992:	b9d8      	cbnz	r0, 80539cc <_vfiprintf_r+0x12c>
 8053994:	06d1      	lsls	r1, r2, #27
 8053996:	bf44      	itt	mi
 8053998:	2320      	movmi	r3, #32
 805399a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 805399e:	0713      	lsls	r3, r2, #28
 80539a0:	bf44      	itt	mi
 80539a2:	232b      	movmi	r3, #43	; 0x2b
 80539a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80539a8:	f89a 3000 	ldrb.w	r3, [sl]
 80539ac:	2b2a      	cmp	r3, #42	; 0x2a
 80539ae:	d015      	beq.n	80539dc <_vfiprintf_r+0x13c>
 80539b0:	9a07      	ldr	r2, [sp, #28]
 80539b2:	4654      	mov	r4, sl
 80539b4:	2000      	movs	r0, #0
 80539b6:	f04f 0c0a 	mov.w	ip, #10
 80539ba:	4621      	mov	r1, r4
 80539bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80539c0:	3b30      	subs	r3, #48	; 0x30
 80539c2:	2b09      	cmp	r3, #9
 80539c4:	d94e      	bls.n	8053a64 <_vfiprintf_r+0x1c4>
 80539c6:	b1b0      	cbz	r0, 80539f6 <_vfiprintf_r+0x156>
 80539c8:	9207      	str	r2, [sp, #28]
 80539ca:	e014      	b.n	80539f6 <_vfiprintf_r+0x156>
 80539cc:	eba0 0308 	sub.w	r3, r0, r8
 80539d0:	fa09 f303 	lsl.w	r3, r9, r3
 80539d4:	4313      	orrs	r3, r2
 80539d6:	9304      	str	r3, [sp, #16]
 80539d8:	46a2      	mov	sl, r4
 80539da:	e7d2      	b.n	8053982 <_vfiprintf_r+0xe2>
 80539dc:	9b03      	ldr	r3, [sp, #12]
 80539de:	1d19      	adds	r1, r3, #4
 80539e0:	681b      	ldr	r3, [r3, #0]
 80539e2:	9103      	str	r1, [sp, #12]
 80539e4:	2b00      	cmp	r3, #0
 80539e6:	bfbb      	ittet	lt
 80539e8:	425b      	neglt	r3, r3
 80539ea:	f042 0202 	orrlt.w	r2, r2, #2
 80539ee:	9307      	strge	r3, [sp, #28]
 80539f0:	9307      	strlt	r3, [sp, #28]
 80539f2:	bfb8      	it	lt
 80539f4:	9204      	strlt	r2, [sp, #16]
 80539f6:	7823      	ldrb	r3, [r4, #0]
 80539f8:	2b2e      	cmp	r3, #46	; 0x2e
 80539fa:	d10c      	bne.n	8053a16 <_vfiprintf_r+0x176>
 80539fc:	7863      	ldrb	r3, [r4, #1]
 80539fe:	2b2a      	cmp	r3, #42	; 0x2a
 8053a00:	d135      	bne.n	8053a6e <_vfiprintf_r+0x1ce>
 8053a02:	9b03      	ldr	r3, [sp, #12]
 8053a04:	1d1a      	adds	r2, r3, #4
 8053a06:	681b      	ldr	r3, [r3, #0]
 8053a08:	9203      	str	r2, [sp, #12]
 8053a0a:	2b00      	cmp	r3, #0
 8053a0c:	bfb8      	it	lt
 8053a0e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8053a12:	3402      	adds	r4, #2
 8053a14:	9305      	str	r3, [sp, #20]
 8053a16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8053afc <_vfiprintf_r+0x25c>
 8053a1a:	7821      	ldrb	r1, [r4, #0]
 8053a1c:	2203      	movs	r2, #3
 8053a1e:	4650      	mov	r0, sl
 8053a20:	f7ec fcee 	bl	8040400 <memchr>
 8053a24:	b140      	cbz	r0, 8053a38 <_vfiprintf_r+0x198>
 8053a26:	2340      	movs	r3, #64	; 0x40
 8053a28:	eba0 000a 	sub.w	r0, r0, sl
 8053a2c:	fa03 f000 	lsl.w	r0, r3, r0
 8053a30:	9b04      	ldr	r3, [sp, #16]
 8053a32:	4303      	orrs	r3, r0
 8053a34:	3401      	adds	r4, #1
 8053a36:	9304      	str	r3, [sp, #16]
 8053a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8053a3c:	482c      	ldr	r0, [pc, #176]	; (8053af0 <_vfiprintf_r+0x250>)
 8053a3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8053a42:	2206      	movs	r2, #6
 8053a44:	f7ec fcdc 	bl	8040400 <memchr>
 8053a48:	2800      	cmp	r0, #0
 8053a4a:	d03f      	beq.n	8053acc <_vfiprintf_r+0x22c>
 8053a4c:	4b29      	ldr	r3, [pc, #164]	; (8053af4 <_vfiprintf_r+0x254>)
 8053a4e:	bb1b      	cbnz	r3, 8053a98 <_vfiprintf_r+0x1f8>
 8053a50:	9b03      	ldr	r3, [sp, #12]
 8053a52:	3307      	adds	r3, #7
 8053a54:	f023 0307 	bic.w	r3, r3, #7
 8053a58:	3308      	adds	r3, #8
 8053a5a:	9303      	str	r3, [sp, #12]
 8053a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8053a5e:	443b      	add	r3, r7
 8053a60:	9309      	str	r3, [sp, #36]	; 0x24
 8053a62:	e767      	b.n	8053934 <_vfiprintf_r+0x94>
 8053a64:	fb0c 3202 	mla	r2, ip, r2, r3
 8053a68:	460c      	mov	r4, r1
 8053a6a:	2001      	movs	r0, #1
 8053a6c:	e7a5      	b.n	80539ba <_vfiprintf_r+0x11a>
 8053a6e:	2300      	movs	r3, #0
 8053a70:	3401      	adds	r4, #1
 8053a72:	9305      	str	r3, [sp, #20]
 8053a74:	4619      	mov	r1, r3
 8053a76:	f04f 0c0a 	mov.w	ip, #10
 8053a7a:	4620      	mov	r0, r4
 8053a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8053a80:	3a30      	subs	r2, #48	; 0x30
 8053a82:	2a09      	cmp	r2, #9
 8053a84:	d903      	bls.n	8053a8e <_vfiprintf_r+0x1ee>
 8053a86:	2b00      	cmp	r3, #0
 8053a88:	d0c5      	beq.n	8053a16 <_vfiprintf_r+0x176>
 8053a8a:	9105      	str	r1, [sp, #20]
 8053a8c:	e7c3      	b.n	8053a16 <_vfiprintf_r+0x176>
 8053a8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8053a92:	4604      	mov	r4, r0
 8053a94:	2301      	movs	r3, #1
 8053a96:	e7f0      	b.n	8053a7a <_vfiprintf_r+0x1da>
 8053a98:	ab03      	add	r3, sp, #12
 8053a9a:	9300      	str	r3, [sp, #0]
 8053a9c:	462a      	mov	r2, r5
 8053a9e:	4b16      	ldr	r3, [pc, #88]	; (8053af8 <_vfiprintf_r+0x258>)
 8053aa0:	a904      	add	r1, sp, #16
 8053aa2:	4630      	mov	r0, r6
 8053aa4:	f7ed ff04 	bl	80418b0 <_printf_float>
 8053aa8:	4607      	mov	r7, r0
 8053aaa:	1c78      	adds	r0, r7, #1
 8053aac:	d1d6      	bne.n	8053a5c <_vfiprintf_r+0x1bc>
 8053aae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8053ab0:	07d9      	lsls	r1, r3, #31
 8053ab2:	d405      	bmi.n	8053ac0 <_vfiprintf_r+0x220>
 8053ab4:	89ab      	ldrh	r3, [r5, #12]
 8053ab6:	059a      	lsls	r2, r3, #22
 8053ab8:	d402      	bmi.n	8053ac0 <_vfiprintf_r+0x220>
 8053aba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8053abc:	f003 fdd8 	bl	8057670 <__retarget_lock_release_recursive>
 8053ac0:	89ab      	ldrh	r3, [r5, #12]
 8053ac2:	065b      	lsls	r3, r3, #25
 8053ac4:	f53f af12 	bmi.w	80538ec <_vfiprintf_r+0x4c>
 8053ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8053aca:	e711      	b.n	80538f0 <_vfiprintf_r+0x50>
 8053acc:	ab03      	add	r3, sp, #12
 8053ace:	9300      	str	r3, [sp, #0]
 8053ad0:	462a      	mov	r2, r5
 8053ad2:	4b09      	ldr	r3, [pc, #36]	; (8053af8 <_vfiprintf_r+0x258>)
 8053ad4:	a904      	add	r1, sp, #16
 8053ad6:	4630      	mov	r0, r6
 8053ad8:	f7fe fff6 	bl	8052ac8 <_printf_i>
 8053adc:	e7e4      	b.n	8053aa8 <_vfiprintf_r+0x208>
 8053ade:	bf00      	nop
 8053ae0:	0805e280 	.word	0x0805e280
 8053ae4:	0805e2a0 	.word	0x0805e2a0
 8053ae8:	0805e260 	.word	0x0805e260
 8053aec:	080635c3 	.word	0x080635c3
 8053af0:	080635cd 	.word	0x080635cd
 8053af4:	080418b1 	.word	0x080418b1
 8053af8:	0805b4fd 	.word	0x0805b4fd
 8053afc:	080635c9 	.word	0x080635c9

08053b00 <__swbuf_r>:
 8053b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8053b02:	460e      	mov	r6, r1
 8053b04:	4614      	mov	r4, r2
 8053b06:	4605      	mov	r5, r0
 8053b08:	b118      	cbz	r0, 8053b12 <__swbuf_r+0x12>
 8053b0a:	6983      	ldr	r3, [r0, #24]
 8053b0c:	b90b      	cbnz	r3, 8053b12 <__swbuf_r+0x12>
 8053b0e:	f000 f9bb 	bl	8053e88 <__sinit>
 8053b12:	4b21      	ldr	r3, [pc, #132]	; (8053b98 <__swbuf_r+0x98>)
 8053b14:	429c      	cmp	r4, r3
 8053b16:	d12b      	bne.n	8053b70 <__swbuf_r+0x70>
 8053b18:	686c      	ldr	r4, [r5, #4]
 8053b1a:	69a3      	ldr	r3, [r4, #24]
 8053b1c:	60a3      	str	r3, [r4, #8]
 8053b1e:	89a3      	ldrh	r3, [r4, #12]
 8053b20:	071a      	lsls	r2, r3, #28
 8053b22:	d52f      	bpl.n	8053b84 <__swbuf_r+0x84>
 8053b24:	6923      	ldr	r3, [r4, #16]
 8053b26:	b36b      	cbz	r3, 8053b84 <__swbuf_r+0x84>
 8053b28:	6923      	ldr	r3, [r4, #16]
 8053b2a:	6820      	ldr	r0, [r4, #0]
 8053b2c:	1ac0      	subs	r0, r0, r3
 8053b2e:	6963      	ldr	r3, [r4, #20]
 8053b30:	b2f6      	uxtb	r6, r6
 8053b32:	4283      	cmp	r3, r0
 8053b34:	4637      	mov	r7, r6
 8053b36:	dc04      	bgt.n	8053b42 <__swbuf_r+0x42>
 8053b38:	4621      	mov	r1, r4
 8053b3a:	4628      	mov	r0, r5
 8053b3c:	f000 f926 	bl	8053d8c <_fflush_r>
 8053b40:	bb30      	cbnz	r0, 8053b90 <__swbuf_r+0x90>
 8053b42:	68a3      	ldr	r3, [r4, #8]
 8053b44:	3b01      	subs	r3, #1
 8053b46:	60a3      	str	r3, [r4, #8]
 8053b48:	6823      	ldr	r3, [r4, #0]
 8053b4a:	1c5a      	adds	r2, r3, #1
 8053b4c:	6022      	str	r2, [r4, #0]
 8053b4e:	701e      	strb	r6, [r3, #0]
 8053b50:	6963      	ldr	r3, [r4, #20]
 8053b52:	3001      	adds	r0, #1
 8053b54:	4283      	cmp	r3, r0
 8053b56:	d004      	beq.n	8053b62 <__swbuf_r+0x62>
 8053b58:	89a3      	ldrh	r3, [r4, #12]
 8053b5a:	07db      	lsls	r3, r3, #31
 8053b5c:	d506      	bpl.n	8053b6c <__swbuf_r+0x6c>
 8053b5e:	2e0a      	cmp	r6, #10
 8053b60:	d104      	bne.n	8053b6c <__swbuf_r+0x6c>
 8053b62:	4621      	mov	r1, r4
 8053b64:	4628      	mov	r0, r5
 8053b66:	f000 f911 	bl	8053d8c <_fflush_r>
 8053b6a:	b988      	cbnz	r0, 8053b90 <__swbuf_r+0x90>
 8053b6c:	4638      	mov	r0, r7
 8053b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8053b70:	4b0a      	ldr	r3, [pc, #40]	; (8053b9c <__swbuf_r+0x9c>)
 8053b72:	429c      	cmp	r4, r3
 8053b74:	d101      	bne.n	8053b7a <__swbuf_r+0x7a>
 8053b76:	68ac      	ldr	r4, [r5, #8]
 8053b78:	e7cf      	b.n	8053b1a <__swbuf_r+0x1a>
 8053b7a:	4b09      	ldr	r3, [pc, #36]	; (8053ba0 <__swbuf_r+0xa0>)
 8053b7c:	429c      	cmp	r4, r3
 8053b7e:	bf08      	it	eq
 8053b80:	68ec      	ldreq	r4, [r5, #12]
 8053b82:	e7ca      	b.n	8053b1a <__swbuf_r+0x1a>
 8053b84:	4621      	mov	r1, r4
 8053b86:	4628      	mov	r0, r5
 8053b88:	f000 f80c 	bl	8053ba4 <__swsetup_r>
 8053b8c:	2800      	cmp	r0, #0
 8053b8e:	d0cb      	beq.n	8053b28 <__swbuf_r+0x28>
 8053b90:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8053b94:	e7ea      	b.n	8053b6c <__swbuf_r+0x6c>
 8053b96:	bf00      	nop
 8053b98:	0805e280 	.word	0x0805e280
 8053b9c:	0805e2a0 	.word	0x0805e2a0
 8053ba0:	0805e260 	.word	0x0805e260

08053ba4 <__swsetup_r>:
 8053ba4:	4b32      	ldr	r3, [pc, #200]	; (8053c70 <__swsetup_r+0xcc>)
 8053ba6:	b570      	push	{r4, r5, r6, lr}
 8053ba8:	681d      	ldr	r5, [r3, #0]
 8053baa:	4606      	mov	r6, r0
 8053bac:	460c      	mov	r4, r1
 8053bae:	b125      	cbz	r5, 8053bba <__swsetup_r+0x16>
 8053bb0:	69ab      	ldr	r3, [r5, #24]
 8053bb2:	b913      	cbnz	r3, 8053bba <__swsetup_r+0x16>
 8053bb4:	4628      	mov	r0, r5
 8053bb6:	f000 f967 	bl	8053e88 <__sinit>
 8053bba:	4b2e      	ldr	r3, [pc, #184]	; (8053c74 <__swsetup_r+0xd0>)
 8053bbc:	429c      	cmp	r4, r3
 8053bbe:	d10f      	bne.n	8053be0 <__swsetup_r+0x3c>
 8053bc0:	686c      	ldr	r4, [r5, #4]
 8053bc2:	89a3      	ldrh	r3, [r4, #12]
 8053bc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8053bc8:	0719      	lsls	r1, r3, #28
 8053bca:	d42c      	bmi.n	8053c26 <__swsetup_r+0x82>
 8053bcc:	06dd      	lsls	r5, r3, #27
 8053bce:	d411      	bmi.n	8053bf4 <__swsetup_r+0x50>
 8053bd0:	2309      	movs	r3, #9
 8053bd2:	6033      	str	r3, [r6, #0]
 8053bd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8053bd8:	81a3      	strh	r3, [r4, #12]
 8053bda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8053bde:	e03e      	b.n	8053c5e <__swsetup_r+0xba>
 8053be0:	4b25      	ldr	r3, [pc, #148]	; (8053c78 <__swsetup_r+0xd4>)
 8053be2:	429c      	cmp	r4, r3
 8053be4:	d101      	bne.n	8053bea <__swsetup_r+0x46>
 8053be6:	68ac      	ldr	r4, [r5, #8]
 8053be8:	e7eb      	b.n	8053bc2 <__swsetup_r+0x1e>
 8053bea:	4b24      	ldr	r3, [pc, #144]	; (8053c7c <__swsetup_r+0xd8>)
 8053bec:	429c      	cmp	r4, r3
 8053bee:	bf08      	it	eq
 8053bf0:	68ec      	ldreq	r4, [r5, #12]
 8053bf2:	e7e6      	b.n	8053bc2 <__swsetup_r+0x1e>
 8053bf4:	0758      	lsls	r0, r3, #29
 8053bf6:	d512      	bpl.n	8053c1e <__swsetup_r+0x7a>
 8053bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8053bfa:	b141      	cbz	r1, 8053c0e <__swsetup_r+0x6a>
 8053bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8053c00:	4299      	cmp	r1, r3
 8053c02:	d002      	beq.n	8053c0a <__swsetup_r+0x66>
 8053c04:	4630      	mov	r0, r6
 8053c06:	f7fe feb9 	bl	805297c <_free_r>
 8053c0a:	2300      	movs	r3, #0
 8053c0c:	6363      	str	r3, [r4, #52]	; 0x34
 8053c0e:	89a3      	ldrh	r3, [r4, #12]
 8053c10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8053c14:	81a3      	strh	r3, [r4, #12]
 8053c16:	2300      	movs	r3, #0
 8053c18:	6063      	str	r3, [r4, #4]
 8053c1a:	6923      	ldr	r3, [r4, #16]
 8053c1c:	6023      	str	r3, [r4, #0]
 8053c1e:	89a3      	ldrh	r3, [r4, #12]
 8053c20:	f043 0308 	orr.w	r3, r3, #8
 8053c24:	81a3      	strh	r3, [r4, #12]
 8053c26:	6923      	ldr	r3, [r4, #16]
 8053c28:	b94b      	cbnz	r3, 8053c3e <__swsetup_r+0x9a>
 8053c2a:	89a3      	ldrh	r3, [r4, #12]
 8053c2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8053c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8053c34:	d003      	beq.n	8053c3e <__swsetup_r+0x9a>
 8053c36:	4621      	mov	r1, r4
 8053c38:	4630      	mov	r0, r6
 8053c3a:	f000 f9a3 	bl	8053f84 <__smakebuf_r>
 8053c3e:	89a0      	ldrh	r0, [r4, #12]
 8053c40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8053c44:	f010 0301 	ands.w	r3, r0, #1
 8053c48:	d00a      	beq.n	8053c60 <__swsetup_r+0xbc>
 8053c4a:	2300      	movs	r3, #0
 8053c4c:	60a3      	str	r3, [r4, #8]
 8053c4e:	6963      	ldr	r3, [r4, #20]
 8053c50:	425b      	negs	r3, r3
 8053c52:	61a3      	str	r3, [r4, #24]
 8053c54:	6923      	ldr	r3, [r4, #16]
 8053c56:	b943      	cbnz	r3, 8053c6a <__swsetup_r+0xc6>
 8053c58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8053c5c:	d1ba      	bne.n	8053bd4 <__swsetup_r+0x30>
 8053c5e:	bd70      	pop	{r4, r5, r6, pc}
 8053c60:	0781      	lsls	r1, r0, #30
 8053c62:	bf58      	it	pl
 8053c64:	6963      	ldrpl	r3, [r4, #20]
 8053c66:	60a3      	str	r3, [r4, #8]
 8053c68:	e7f4      	b.n	8053c54 <__swsetup_r+0xb0>
 8053c6a:	2000      	movs	r0, #0
 8053c6c:	e7f7      	b.n	8053c5e <__swsetup_r+0xba>
 8053c6e:	bf00      	nop
 8053c70:	20020598 	.word	0x20020598
 8053c74:	0805e280 	.word	0x0805e280
 8053c78:	0805e2a0 	.word	0x0805e2a0
 8053c7c:	0805e260 	.word	0x0805e260

08053c80 <__sflush_r>:
 8053c80:	898a      	ldrh	r2, [r1, #12]
 8053c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8053c86:	4605      	mov	r5, r0
 8053c88:	0710      	lsls	r0, r2, #28
 8053c8a:	460c      	mov	r4, r1
 8053c8c:	d458      	bmi.n	8053d40 <__sflush_r+0xc0>
 8053c8e:	684b      	ldr	r3, [r1, #4]
 8053c90:	2b00      	cmp	r3, #0
 8053c92:	dc05      	bgt.n	8053ca0 <__sflush_r+0x20>
 8053c94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8053c96:	2b00      	cmp	r3, #0
 8053c98:	dc02      	bgt.n	8053ca0 <__sflush_r+0x20>
 8053c9a:	2000      	movs	r0, #0
 8053c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8053ca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8053ca2:	2e00      	cmp	r6, #0
 8053ca4:	d0f9      	beq.n	8053c9a <__sflush_r+0x1a>
 8053ca6:	2300      	movs	r3, #0
 8053ca8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8053cac:	682f      	ldr	r7, [r5, #0]
 8053cae:	602b      	str	r3, [r5, #0]
 8053cb0:	d032      	beq.n	8053d18 <__sflush_r+0x98>
 8053cb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8053cb4:	89a3      	ldrh	r3, [r4, #12]
 8053cb6:	075a      	lsls	r2, r3, #29
 8053cb8:	d505      	bpl.n	8053cc6 <__sflush_r+0x46>
 8053cba:	6863      	ldr	r3, [r4, #4]
 8053cbc:	1ac0      	subs	r0, r0, r3
 8053cbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8053cc0:	b10b      	cbz	r3, 8053cc6 <__sflush_r+0x46>
 8053cc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8053cc4:	1ac0      	subs	r0, r0, r3
 8053cc6:	2300      	movs	r3, #0
 8053cc8:	4602      	mov	r2, r0
 8053cca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8053ccc:	6a21      	ldr	r1, [r4, #32]
 8053cce:	4628      	mov	r0, r5
 8053cd0:	47b0      	blx	r6
 8053cd2:	1c43      	adds	r3, r0, #1
 8053cd4:	89a3      	ldrh	r3, [r4, #12]
 8053cd6:	d106      	bne.n	8053ce6 <__sflush_r+0x66>
 8053cd8:	6829      	ldr	r1, [r5, #0]
 8053cda:	291d      	cmp	r1, #29
 8053cdc:	d82c      	bhi.n	8053d38 <__sflush_r+0xb8>
 8053cde:	4a2a      	ldr	r2, [pc, #168]	; (8053d88 <__sflush_r+0x108>)
 8053ce0:	40ca      	lsrs	r2, r1
 8053ce2:	07d6      	lsls	r6, r2, #31
 8053ce4:	d528      	bpl.n	8053d38 <__sflush_r+0xb8>
 8053ce6:	2200      	movs	r2, #0
 8053ce8:	6062      	str	r2, [r4, #4]
 8053cea:	04d9      	lsls	r1, r3, #19
 8053cec:	6922      	ldr	r2, [r4, #16]
 8053cee:	6022      	str	r2, [r4, #0]
 8053cf0:	d504      	bpl.n	8053cfc <__sflush_r+0x7c>
 8053cf2:	1c42      	adds	r2, r0, #1
 8053cf4:	d101      	bne.n	8053cfa <__sflush_r+0x7a>
 8053cf6:	682b      	ldr	r3, [r5, #0]
 8053cf8:	b903      	cbnz	r3, 8053cfc <__sflush_r+0x7c>
 8053cfa:	6560      	str	r0, [r4, #84]	; 0x54
 8053cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8053cfe:	602f      	str	r7, [r5, #0]
 8053d00:	2900      	cmp	r1, #0
 8053d02:	d0ca      	beq.n	8053c9a <__sflush_r+0x1a>
 8053d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8053d08:	4299      	cmp	r1, r3
 8053d0a:	d002      	beq.n	8053d12 <__sflush_r+0x92>
 8053d0c:	4628      	mov	r0, r5
 8053d0e:	f7fe fe35 	bl	805297c <_free_r>
 8053d12:	2000      	movs	r0, #0
 8053d14:	6360      	str	r0, [r4, #52]	; 0x34
 8053d16:	e7c1      	b.n	8053c9c <__sflush_r+0x1c>
 8053d18:	6a21      	ldr	r1, [r4, #32]
 8053d1a:	2301      	movs	r3, #1
 8053d1c:	4628      	mov	r0, r5
 8053d1e:	47b0      	blx	r6
 8053d20:	1c41      	adds	r1, r0, #1
 8053d22:	d1c7      	bne.n	8053cb4 <__sflush_r+0x34>
 8053d24:	682b      	ldr	r3, [r5, #0]
 8053d26:	2b00      	cmp	r3, #0
 8053d28:	d0c4      	beq.n	8053cb4 <__sflush_r+0x34>
 8053d2a:	2b1d      	cmp	r3, #29
 8053d2c:	d001      	beq.n	8053d32 <__sflush_r+0xb2>
 8053d2e:	2b16      	cmp	r3, #22
 8053d30:	d101      	bne.n	8053d36 <__sflush_r+0xb6>
 8053d32:	602f      	str	r7, [r5, #0]
 8053d34:	e7b1      	b.n	8053c9a <__sflush_r+0x1a>
 8053d36:	89a3      	ldrh	r3, [r4, #12]
 8053d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8053d3c:	81a3      	strh	r3, [r4, #12]
 8053d3e:	e7ad      	b.n	8053c9c <__sflush_r+0x1c>
 8053d40:	690f      	ldr	r7, [r1, #16]
 8053d42:	2f00      	cmp	r7, #0
 8053d44:	d0a9      	beq.n	8053c9a <__sflush_r+0x1a>
 8053d46:	0793      	lsls	r3, r2, #30
 8053d48:	680e      	ldr	r6, [r1, #0]
 8053d4a:	bf08      	it	eq
 8053d4c:	694b      	ldreq	r3, [r1, #20]
 8053d4e:	600f      	str	r7, [r1, #0]
 8053d50:	bf18      	it	ne
 8053d52:	2300      	movne	r3, #0
 8053d54:	eba6 0807 	sub.w	r8, r6, r7
 8053d58:	608b      	str	r3, [r1, #8]
 8053d5a:	f1b8 0f00 	cmp.w	r8, #0
 8053d5e:	dd9c      	ble.n	8053c9a <__sflush_r+0x1a>
 8053d60:	6a21      	ldr	r1, [r4, #32]
 8053d62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8053d64:	4643      	mov	r3, r8
 8053d66:	463a      	mov	r2, r7
 8053d68:	4628      	mov	r0, r5
 8053d6a:	47b0      	blx	r6
 8053d6c:	2800      	cmp	r0, #0
 8053d6e:	dc06      	bgt.n	8053d7e <__sflush_r+0xfe>
 8053d70:	89a3      	ldrh	r3, [r4, #12]
 8053d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8053d76:	81a3      	strh	r3, [r4, #12]
 8053d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8053d7c:	e78e      	b.n	8053c9c <__sflush_r+0x1c>
 8053d7e:	4407      	add	r7, r0
 8053d80:	eba8 0800 	sub.w	r8, r8, r0
 8053d84:	e7e9      	b.n	8053d5a <__sflush_r+0xda>
 8053d86:	bf00      	nop
 8053d88:	20400001 	.word	0x20400001

08053d8c <_fflush_r>:
 8053d8c:	b538      	push	{r3, r4, r5, lr}
 8053d8e:	690b      	ldr	r3, [r1, #16]
 8053d90:	4605      	mov	r5, r0
 8053d92:	460c      	mov	r4, r1
 8053d94:	b913      	cbnz	r3, 8053d9c <_fflush_r+0x10>
 8053d96:	2500      	movs	r5, #0
 8053d98:	4628      	mov	r0, r5
 8053d9a:	bd38      	pop	{r3, r4, r5, pc}
 8053d9c:	b118      	cbz	r0, 8053da6 <_fflush_r+0x1a>
 8053d9e:	6983      	ldr	r3, [r0, #24]
 8053da0:	b90b      	cbnz	r3, 8053da6 <_fflush_r+0x1a>
 8053da2:	f000 f871 	bl	8053e88 <__sinit>
 8053da6:	4b14      	ldr	r3, [pc, #80]	; (8053df8 <_fflush_r+0x6c>)
 8053da8:	429c      	cmp	r4, r3
 8053daa:	d11b      	bne.n	8053de4 <_fflush_r+0x58>
 8053dac:	686c      	ldr	r4, [r5, #4]
 8053dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8053db2:	2b00      	cmp	r3, #0
 8053db4:	d0ef      	beq.n	8053d96 <_fflush_r+0xa>
 8053db6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8053db8:	07d0      	lsls	r0, r2, #31
 8053dba:	d404      	bmi.n	8053dc6 <_fflush_r+0x3a>
 8053dbc:	0599      	lsls	r1, r3, #22
 8053dbe:	d402      	bmi.n	8053dc6 <_fflush_r+0x3a>
 8053dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8053dc2:	f003 fc4f 	bl	8057664 <__retarget_lock_acquire_recursive>
 8053dc6:	4628      	mov	r0, r5
 8053dc8:	4621      	mov	r1, r4
 8053dca:	f7ff ff59 	bl	8053c80 <__sflush_r>
 8053dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8053dd0:	07da      	lsls	r2, r3, #31
 8053dd2:	4605      	mov	r5, r0
 8053dd4:	d4e0      	bmi.n	8053d98 <_fflush_r+0xc>
 8053dd6:	89a3      	ldrh	r3, [r4, #12]
 8053dd8:	059b      	lsls	r3, r3, #22
 8053dda:	d4dd      	bmi.n	8053d98 <_fflush_r+0xc>
 8053ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8053dde:	f003 fc47 	bl	8057670 <__retarget_lock_release_recursive>
 8053de2:	e7d9      	b.n	8053d98 <_fflush_r+0xc>
 8053de4:	4b05      	ldr	r3, [pc, #20]	; (8053dfc <_fflush_r+0x70>)
 8053de6:	429c      	cmp	r4, r3
 8053de8:	d101      	bne.n	8053dee <_fflush_r+0x62>
 8053dea:	68ac      	ldr	r4, [r5, #8]
 8053dec:	e7df      	b.n	8053dae <_fflush_r+0x22>
 8053dee:	4b04      	ldr	r3, [pc, #16]	; (8053e00 <_fflush_r+0x74>)
 8053df0:	429c      	cmp	r4, r3
 8053df2:	bf08      	it	eq
 8053df4:	68ec      	ldreq	r4, [r5, #12]
 8053df6:	e7da      	b.n	8053dae <_fflush_r+0x22>
 8053df8:	0805e280 	.word	0x0805e280
 8053dfc:	0805e2a0 	.word	0x0805e2a0
 8053e00:	0805e260 	.word	0x0805e260

08053e04 <std>:
 8053e04:	2300      	movs	r3, #0
 8053e06:	b510      	push	{r4, lr}
 8053e08:	4604      	mov	r4, r0
 8053e0a:	e9c0 3300 	strd	r3, r3, [r0]
 8053e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8053e12:	6083      	str	r3, [r0, #8]
 8053e14:	8181      	strh	r1, [r0, #12]
 8053e16:	6643      	str	r3, [r0, #100]	; 0x64
 8053e18:	81c2      	strh	r2, [r0, #14]
 8053e1a:	6183      	str	r3, [r0, #24]
 8053e1c:	4619      	mov	r1, r3
 8053e1e:	2208      	movs	r2, #8
 8053e20:	305c      	adds	r0, #92	; 0x5c
 8053e22:	f007 f813 	bl	805ae4c <memset>
 8053e26:	4b05      	ldr	r3, [pc, #20]	; (8053e3c <std+0x38>)
 8053e28:	6263      	str	r3, [r4, #36]	; 0x24
 8053e2a:	4b05      	ldr	r3, [pc, #20]	; (8053e40 <std+0x3c>)
 8053e2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8053e2e:	4b05      	ldr	r3, [pc, #20]	; (8053e44 <std+0x40>)
 8053e30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8053e32:	4b05      	ldr	r3, [pc, #20]	; (8053e48 <std+0x44>)
 8053e34:	6224      	str	r4, [r4, #32]
 8053e36:	6323      	str	r3, [r4, #48]	; 0x30
 8053e38:	bd10      	pop	{r4, pc}
 8053e3a:	bf00      	nop
 8053e3c:	0805b5ef 	.word	0x0805b5ef
 8053e40:	0805b611 	.word	0x0805b611
 8053e44:	0805b649 	.word	0x0805b649
 8053e48:	0805b66d 	.word	0x0805b66d

08053e4c <_cleanup_r>:
 8053e4c:	4901      	ldr	r1, [pc, #4]	; (8053e54 <_cleanup_r+0x8>)
 8053e4e:	f007 bb8a 	b.w	805b566 <_fwalk_reent>
 8053e52:	bf00      	nop
 8053e54:	08053d8d 	.word	0x08053d8d

08053e58 <__sfp_lock_acquire>:
 8053e58:	4801      	ldr	r0, [pc, #4]	; (8053e60 <__sfp_lock_acquire+0x8>)
 8053e5a:	f003 bc03 	b.w	8057664 <__retarget_lock_acquire_recursive>
 8053e5e:	bf00      	nop
 8053e60:	200209bc 	.word	0x200209bc

08053e64 <__sfp_lock_release>:
 8053e64:	4801      	ldr	r0, [pc, #4]	; (8053e6c <__sfp_lock_release+0x8>)
 8053e66:	f003 bc03 	b.w	8057670 <__retarget_lock_release_recursive>
 8053e6a:	bf00      	nop
 8053e6c:	200209bc 	.word	0x200209bc

08053e70 <__sinit_lock_acquire>:
 8053e70:	4801      	ldr	r0, [pc, #4]	; (8053e78 <__sinit_lock_acquire+0x8>)
 8053e72:	f003 bbf7 	b.w	8057664 <__retarget_lock_acquire_recursive>
 8053e76:	bf00      	nop
 8053e78:	200209d0 	.word	0x200209d0

08053e7c <__sinit_lock_release>:
 8053e7c:	4801      	ldr	r0, [pc, #4]	; (8053e84 <__sinit_lock_release+0x8>)
 8053e7e:	f003 bbf7 	b.w	8057670 <__retarget_lock_release_recursive>
 8053e82:	bf00      	nop
 8053e84:	200209d0 	.word	0x200209d0

08053e88 <__sinit>:
 8053e88:	b510      	push	{r4, lr}
 8053e8a:	4604      	mov	r4, r0
 8053e8c:	f7ff fff0 	bl	8053e70 <__sinit_lock_acquire>
 8053e90:	69a3      	ldr	r3, [r4, #24]
 8053e92:	b11b      	cbz	r3, 8053e9c <__sinit+0x14>
 8053e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8053e98:	f7ff bff0 	b.w	8053e7c <__sinit_lock_release>
 8053e9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8053ea0:	6523      	str	r3, [r4, #80]	; 0x50
 8053ea2:	4b13      	ldr	r3, [pc, #76]	; (8053ef0 <__sinit+0x68>)
 8053ea4:	4a13      	ldr	r2, [pc, #76]	; (8053ef4 <__sinit+0x6c>)
 8053ea6:	681b      	ldr	r3, [r3, #0]
 8053ea8:	62a2      	str	r2, [r4, #40]	; 0x28
 8053eaa:	42a3      	cmp	r3, r4
 8053eac:	bf04      	itt	eq
 8053eae:	2301      	moveq	r3, #1
 8053eb0:	61a3      	streq	r3, [r4, #24]
 8053eb2:	4620      	mov	r0, r4
 8053eb4:	f000 f820 	bl	8053ef8 <__sfp>
 8053eb8:	6060      	str	r0, [r4, #4]
 8053eba:	4620      	mov	r0, r4
 8053ebc:	f000 f81c 	bl	8053ef8 <__sfp>
 8053ec0:	60a0      	str	r0, [r4, #8]
 8053ec2:	4620      	mov	r0, r4
 8053ec4:	f000 f818 	bl	8053ef8 <__sfp>
 8053ec8:	2200      	movs	r2, #0
 8053eca:	60e0      	str	r0, [r4, #12]
 8053ecc:	2104      	movs	r1, #4
 8053ece:	6860      	ldr	r0, [r4, #4]
 8053ed0:	f7ff ff98 	bl	8053e04 <std>
 8053ed4:	68a0      	ldr	r0, [r4, #8]
 8053ed6:	2201      	movs	r2, #1
 8053ed8:	2109      	movs	r1, #9
 8053eda:	f7ff ff93 	bl	8053e04 <std>
 8053ede:	68e0      	ldr	r0, [r4, #12]
 8053ee0:	2202      	movs	r2, #2
 8053ee2:	2112      	movs	r1, #18
 8053ee4:	f7ff ff8e 	bl	8053e04 <std>
 8053ee8:	2301      	movs	r3, #1
 8053eea:	61a3      	str	r3, [r4, #24]
 8053eec:	e7d2      	b.n	8053e94 <__sinit+0xc>
 8053eee:	bf00      	nop
 8053ef0:	0805e250 	.word	0x0805e250
 8053ef4:	08053e4d 	.word	0x08053e4d

08053ef8 <__sfp>:
 8053ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8053efa:	4607      	mov	r7, r0
 8053efc:	f7ff ffac 	bl	8053e58 <__sfp_lock_acquire>
 8053f00:	4b1e      	ldr	r3, [pc, #120]	; (8053f7c <__sfp+0x84>)
 8053f02:	681e      	ldr	r6, [r3, #0]
 8053f04:	69b3      	ldr	r3, [r6, #24]
 8053f06:	b913      	cbnz	r3, 8053f0e <__sfp+0x16>
 8053f08:	4630      	mov	r0, r6
 8053f0a:	f7ff ffbd 	bl	8053e88 <__sinit>
 8053f0e:	3648      	adds	r6, #72	; 0x48
 8053f10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8053f14:	3b01      	subs	r3, #1
 8053f16:	d503      	bpl.n	8053f20 <__sfp+0x28>
 8053f18:	6833      	ldr	r3, [r6, #0]
 8053f1a:	b30b      	cbz	r3, 8053f60 <__sfp+0x68>
 8053f1c:	6836      	ldr	r6, [r6, #0]
 8053f1e:	e7f7      	b.n	8053f10 <__sfp+0x18>
 8053f20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8053f24:	b9d5      	cbnz	r5, 8053f5c <__sfp+0x64>
 8053f26:	4b16      	ldr	r3, [pc, #88]	; (8053f80 <__sfp+0x88>)
 8053f28:	60e3      	str	r3, [r4, #12]
 8053f2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8053f2e:	6665      	str	r5, [r4, #100]	; 0x64
 8053f30:	f003 fb8e 	bl	8057650 <__retarget_lock_init_recursive>
 8053f34:	f7ff ff96 	bl	8053e64 <__sfp_lock_release>
 8053f38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8053f3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8053f40:	6025      	str	r5, [r4, #0]
 8053f42:	61a5      	str	r5, [r4, #24]
 8053f44:	2208      	movs	r2, #8
 8053f46:	4629      	mov	r1, r5
 8053f48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8053f4c:	f006 ff7e 	bl	805ae4c <memset>
 8053f50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8053f54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8053f58:	4620      	mov	r0, r4
 8053f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8053f5c:	3468      	adds	r4, #104	; 0x68
 8053f5e:	e7d9      	b.n	8053f14 <__sfp+0x1c>
 8053f60:	2104      	movs	r1, #4
 8053f62:	4638      	mov	r0, r7
 8053f64:	f007 fae9 	bl	805b53a <__sfmoreglue>
 8053f68:	4604      	mov	r4, r0
 8053f6a:	6030      	str	r0, [r6, #0]
 8053f6c:	2800      	cmp	r0, #0
 8053f6e:	d1d5      	bne.n	8053f1c <__sfp+0x24>
 8053f70:	f7ff ff78 	bl	8053e64 <__sfp_lock_release>
 8053f74:	230c      	movs	r3, #12
 8053f76:	603b      	str	r3, [r7, #0]
 8053f78:	e7ee      	b.n	8053f58 <__sfp+0x60>
 8053f7a:	bf00      	nop
 8053f7c:	0805e250 	.word	0x0805e250
 8053f80:	ffff0001 	.word	0xffff0001

08053f84 <__smakebuf_r>:
 8053f84:	898b      	ldrh	r3, [r1, #12]
 8053f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8053f88:	079d      	lsls	r5, r3, #30
 8053f8a:	4606      	mov	r6, r0
 8053f8c:	460c      	mov	r4, r1
 8053f8e:	d507      	bpl.n	8053fa0 <__smakebuf_r+0x1c>
 8053f90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8053f94:	6023      	str	r3, [r4, #0]
 8053f96:	6123      	str	r3, [r4, #16]
 8053f98:	2301      	movs	r3, #1
 8053f9a:	6163      	str	r3, [r4, #20]
 8053f9c:	b002      	add	sp, #8
 8053f9e:	bd70      	pop	{r4, r5, r6, pc}
 8053fa0:	ab01      	add	r3, sp, #4
 8053fa2:	466a      	mov	r2, sp
 8053fa4:	f007 fafe 	bl	805b5a4 <__swhatbuf_r>
 8053fa8:	9900      	ldr	r1, [sp, #0]
 8053faa:	4605      	mov	r5, r0
 8053fac:	4630      	mov	r0, r6
 8053fae:	f7fe fd31 	bl	8052a14 <_malloc_r>
 8053fb2:	b948      	cbnz	r0, 8053fc8 <__smakebuf_r+0x44>
 8053fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8053fb8:	059a      	lsls	r2, r3, #22
 8053fba:	d4ef      	bmi.n	8053f9c <__smakebuf_r+0x18>
 8053fbc:	f023 0303 	bic.w	r3, r3, #3
 8053fc0:	f043 0302 	orr.w	r3, r3, #2
 8053fc4:	81a3      	strh	r3, [r4, #12]
 8053fc6:	e7e3      	b.n	8053f90 <__smakebuf_r+0xc>
 8053fc8:	4b0d      	ldr	r3, [pc, #52]	; (8054000 <__smakebuf_r+0x7c>)
 8053fca:	62b3      	str	r3, [r6, #40]	; 0x28
 8053fcc:	89a3      	ldrh	r3, [r4, #12]
 8053fce:	6020      	str	r0, [r4, #0]
 8053fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8053fd4:	81a3      	strh	r3, [r4, #12]
 8053fd6:	9b00      	ldr	r3, [sp, #0]
 8053fd8:	6163      	str	r3, [r4, #20]
 8053fda:	9b01      	ldr	r3, [sp, #4]
 8053fdc:	6120      	str	r0, [r4, #16]
 8053fde:	b15b      	cbz	r3, 8053ff8 <__smakebuf_r+0x74>
 8053fe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8053fe4:	4630      	mov	r0, r6
 8053fe6:	f000 f841 	bl	805406c <_isatty_r>
 8053fea:	b128      	cbz	r0, 8053ff8 <__smakebuf_r+0x74>
 8053fec:	89a3      	ldrh	r3, [r4, #12]
 8053fee:	f023 0303 	bic.w	r3, r3, #3
 8053ff2:	f043 0301 	orr.w	r3, r3, #1
 8053ff6:	81a3      	strh	r3, [r4, #12]
 8053ff8:	89a0      	ldrh	r0, [r4, #12]
 8053ffa:	4305      	orrs	r5, r0
 8053ffc:	81a5      	strh	r5, [r4, #12]
 8053ffe:	e7cd      	b.n	8053f9c <__smakebuf_r+0x18>
 8054000:	08053e4d 	.word	0x08053e4d

08054004 <_write_r>:
 8054004:	b538      	push	{r3, r4, r5, lr}
 8054006:	4d07      	ldr	r5, [pc, #28]	; (8054024 <_write_r+0x20>)
 8054008:	4604      	mov	r4, r0
 805400a:	4608      	mov	r0, r1
 805400c:	4611      	mov	r1, r2
 805400e:	2200      	movs	r2, #0
 8054010:	602a      	str	r2, [r5, #0]
 8054012:	461a      	mov	r2, r3
 8054014:	f003 fb05 	bl	8057622 <_write>
 8054018:	1c43      	adds	r3, r0, #1
 805401a:	d102      	bne.n	8054022 <_write_r+0x1e>
 805401c:	682b      	ldr	r3, [r5, #0]
 805401e:	b103      	cbz	r3, 8054022 <_write_r+0x1e>
 8054020:	6023      	str	r3, [r4, #0]
 8054022:	bd38      	pop	{r3, r4, r5, pc}
 8054024:	20038d10 	.word	0x20038d10

08054028 <_close_r>:
 8054028:	b538      	push	{r3, r4, r5, lr}
 805402a:	4d06      	ldr	r5, [pc, #24]	; (8054044 <_close_r+0x1c>)
 805402c:	2300      	movs	r3, #0
 805402e:	4604      	mov	r4, r0
 8054030:	4608      	mov	r0, r1
 8054032:	602b      	str	r3, [r5, #0]
 8054034:	f003 faf9 	bl	805762a <_close>
 8054038:	1c43      	adds	r3, r0, #1
 805403a:	d102      	bne.n	8054042 <_close_r+0x1a>
 805403c:	682b      	ldr	r3, [r5, #0]
 805403e:	b103      	cbz	r3, 8054042 <_close_r+0x1a>
 8054040:	6023      	str	r3, [r4, #0]
 8054042:	bd38      	pop	{r3, r4, r5, pc}
 8054044:	20038d10 	.word	0x20038d10

08054048 <_fstat_r>:
 8054048:	b538      	push	{r3, r4, r5, lr}
 805404a:	4d07      	ldr	r5, [pc, #28]	; (8054068 <_fstat_r+0x20>)
 805404c:	2300      	movs	r3, #0
 805404e:	4604      	mov	r4, r0
 8054050:	4608      	mov	r0, r1
 8054052:	4611      	mov	r1, r2
 8054054:	602b      	str	r3, [r5, #0]
 8054056:	f003 faf6 	bl	8057646 <_fstat>
 805405a:	1c43      	adds	r3, r0, #1
 805405c:	d102      	bne.n	8054064 <_fstat_r+0x1c>
 805405e:	682b      	ldr	r3, [r5, #0]
 8054060:	b103      	cbz	r3, 8054064 <_fstat_r+0x1c>
 8054062:	6023      	str	r3, [r4, #0]
 8054064:	bd38      	pop	{r3, r4, r5, pc}
 8054066:	bf00      	nop
 8054068:	20038d10 	.word	0x20038d10

0805406c <_isatty_r>:
 805406c:	b538      	push	{r3, r4, r5, lr}
 805406e:	4d06      	ldr	r5, [pc, #24]	; (8054088 <_isatty_r+0x1c>)
 8054070:	2300      	movs	r3, #0
 8054072:	4604      	mov	r4, r0
 8054074:	4608      	mov	r0, r1
 8054076:	602b      	str	r3, [r5, #0]
 8054078:	f003 fadc 	bl	8057634 <_isatty>
 805407c:	1c43      	adds	r3, r0, #1
 805407e:	d102      	bne.n	8054086 <_isatty_r+0x1a>
 8054080:	682b      	ldr	r3, [r5, #0]
 8054082:	b103      	cbz	r3, 8054086 <_isatty_r+0x1a>
 8054084:	6023      	str	r3, [r4, #0]
 8054086:	bd38      	pop	{r3, r4, r5, pc}
 8054088:	20038d10 	.word	0x20038d10

0805408c <_lseek_r>:
 805408c:	b538      	push	{r3, r4, r5, lr}
 805408e:	4d07      	ldr	r5, [pc, #28]	; (80540ac <_lseek_r+0x20>)
 8054090:	4604      	mov	r4, r0
 8054092:	4608      	mov	r0, r1
 8054094:	4611      	mov	r1, r2
 8054096:	2200      	movs	r2, #0
 8054098:	602a      	str	r2, [r5, #0]
 805409a:	461a      	mov	r2, r3
 805409c:	f003 fac8 	bl	8057630 <_lseek>
 80540a0:	1c43      	adds	r3, r0, #1
 80540a2:	d102      	bne.n	80540aa <_lseek_r+0x1e>
 80540a4:	682b      	ldr	r3, [r5, #0]
 80540a6:	b103      	cbz	r3, 80540aa <_lseek_r+0x1e>
 80540a8:	6023      	str	r3, [r4, #0]
 80540aa:	bd38      	pop	{r3, r4, r5, pc}
 80540ac:	20038d10 	.word	0x20038d10

080540b0 <_read_r>:
 80540b0:	b538      	push	{r3, r4, r5, lr}
 80540b2:	4d07      	ldr	r5, [pc, #28]	; (80540d0 <_read_r+0x20>)
 80540b4:	4604      	mov	r4, r0
 80540b6:	4608      	mov	r0, r1
 80540b8:	4611      	mov	r1, r2
 80540ba:	2200      	movs	r2, #0
 80540bc:	602a      	str	r2, [r5, #0]
 80540be:	461a      	mov	r2, r3
 80540c0:	f003 faab 	bl	805761a <_read>
 80540c4:	1c43      	adds	r3, r0, #1
 80540c6:	d102      	bne.n	80540ce <_read_r+0x1e>
 80540c8:	682b      	ldr	r3, [r5, #0]
 80540ca:	b103      	cbz	r3, 80540ce <_read_r+0x1e>
 80540cc:	6023      	str	r3, [r4, #0]
 80540ce:	bd38      	pop	{r3, r4, r5, pc}
 80540d0:	20038d10 	.word	0x20038d10

080540d4 <_ZN8lexxhard19actuator_controller7currentEPK5shelljPPc>:
}
 80540d4:	2000      	movs	r0, #0
 80540d6:	4770      	bx	lr

080540d8 <device_is_ready>:
 * @retval true if the device is ready for use.
 * @retval false if the device is not ready for use or if a NULL device pointer
 * is passed as argument.
 */
static inline bool device_is_ready(const struct device *dev)
{
 80540d8:	b508      	push	{r3, lr}
	return z_device_ready(dev) ? 0 : -ENODEV;
 80540da:	f006 f8bc 	bl	805a256 <z_device_ready>
 80540de:	2800      	cmp	r0, #0
 80540e0:	bf14      	ite	ne
 80540e2:	2000      	movne	r0, #0
 80540e4:	f06f 0012 	mvneq.w	r0, #18
	return device_usable_check(dev) == 0;
}
 80540e8:	fab0 f080 	clz	r0, r0
 80540ec:	0940      	lsrs	r0, r0, #5
 80540ee:	bd08      	pop	{r3, pc}

080540f0 <k_msleep.isra.0>:
 80540f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
			return t * ((uint64_t)to_hz / from_hz);
 80540f4:	210a      	movs	r1, #10
 80540f6:	fb80 0101 	smull	r0, r1, r0, r1
	return z_impl_k_sleep(timeout);
 80540fa:	f7fe b8d5 	b.w	80522a8 <z_impl_k_sleep>

080540fe <_ZN8lexxhard19actuator_controller24actuator_controller_impl18wait_actuator_stopEjj>:
    bool wait_actuator_stop(uint32_t timeout_ms, uint32_t sleep_ms) {
 80540fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        for (uint32_t i{0}, end{timeout_ms / sleep_ms}; i < end; ++i) {
 8054102:	fbb1 f9f2 	udiv	r9, r1, r2
    bool wait_actuator_stop(uint32_t timeout_ms, uint32_t sleep_ms) {
 8054106:	4682      	mov	sl, r0
 8054108:	4617      	mov	r7, r2
        for (uint32_t i{0}, end{timeout_ms / sleep_ms}; i < end; ++i) {
 805410a:	2600      	movs	r6, #0
        int remaining{3};
 805410c:	2403      	movs	r4, #3
        for (uint32_t i{0}, end{timeout_ms / sleep_ms}; i < end; ++i) {
 805410e:	454e      	cmp	r6, r9
 8054110:	d01d      	beq.n	805414e <_ZN8lexxhard19actuator_controller24actuator_controller_impl18wait_actuator_stopEjj+0x50>
 8054112:	4655      	mov	r5, sl
            for (uint32_t j{0}; j < ACTUATOR_NUM; ++j) {
 8054114:	f04f 0800 	mov.w	r8, #0
            remaining = 3;
 8054118:	2403      	movs	r4, #3
                if (i >= 4 && !act[j].is_moving()) {
 805411a:	2e03      	cmp	r6, #3
 805411c:	d90a      	bls.n	8054134 <_ZN8lexxhard19actuator_controller24actuator_controller_impl18wait_actuator_stopEjj+0x36>
        int32_t value{pulse_value - prev_pulse_value};
 805411e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
                if (i >= 4 && !act[j].is_moving()) {
 8054122:	4293      	cmp	r3, r2
        prev_pulse_value = pulse_value;
 8054124:	67eb      	str	r3, [r5, #124]	; 0x7c
                if (i >= 4 && !act[j].is_moving()) {
 8054126:	d105      	bne.n	8054134 <_ZN8lexxhard19actuator_controller24actuator_controller_impl18wait_actuator_stopEjj+0x36>
                    pwm_trampoline(j, msg_control::STOP);
 8054128:	2200      	movs	r2, #0
                    --remaining;
 805412a:	3c01      	subs	r4, #1
                    pwm_trampoline(j, msg_control::STOP);
 805412c:	4640      	mov	r0, r8
 805412e:	4611      	mov	r1, r2
 8054130:	f7ee fb4e 	bl	80427d0 <_ZNK8lexxhard19actuator_controller24actuator_controller_impl14pwm_trampolineEiih.isra.0>
            for (uint32_t j{0}; j < ACTUATOR_NUM; ++j) {
 8054134:	f108 0801 	add.w	r8, r8, #1
 8054138:	359c      	adds	r5, #156	; 0x9c
 805413a:	f1b8 0f03 	cmp.w	r8, #3
 805413e:	d1ec      	bne.n	805411a <_ZN8lexxhard19actuator_controller24actuator_controller_impl18wait_actuator_stopEjj+0x1c>
            if (remaining <= 0)
 8054140:	2c00      	cmp	r4, #0
 8054142:	dd04      	ble.n	805414e <_ZN8lexxhard19actuator_controller24actuator_controller_impl18wait_actuator_stopEjj+0x50>
            k_msleep(sleep_ms);
 8054144:	4638      	mov	r0, r7
        for (uint32_t i{0}, end{timeout_ms / sleep_ms}; i < end; ++i) {
 8054146:	3601      	adds	r6, #1
            k_msleep(sleep_ms);
 8054148:	f7ff ffd2 	bl	80540f0 <k_msleep.isra.0>
        for (uint32_t i{0}, end{timeout_ms / sleep_ms}; i < end; ++i) {
 805414c:	e7df      	b.n	805410e <_ZN8lexxhard19actuator_controller24actuator_controller_impl18wait_actuator_stopEjj+0x10>
    }
 805414e:	2c00      	cmp	r4, #0
 8054150:	bfcc      	ite	gt
 8054152:	2000      	movgt	r0, #0
 8054154:	2001      	movle	r0, #1
 8054156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0805415a <device_is_ready>:
{
 805415a:	b508      	push	{r3, lr}
	return z_device_ready(dev) ? 0 : -ENODEV;
 805415c:	f006 f87b 	bl	805a256 <z_device_ready>
 8054160:	2800      	cmp	r0, #0
 8054162:	bf14      	ite	ne
 8054164:	2000      	movne	r0, #0
 8054166:	f06f 0012 	mvneq.w	r0, #18
}
 805416a:	fab0 f080 	clz	r0, r0
 805416e:	0940      	lsrs	r0, r0, #5
 8054170:	bd08      	pop	{r3, pc}

08054172 <_ZN8lexxhard14led_controller19led_controller_impl4fillERK7led_rgbj.part.0>:
            for (uint32_t i{0}; i < PIXELS; ++i)
 8054172:	4603      	mov	r3, r0
 8054174:	f100 0290 	add.w	r2, r0, #144	; 0x90
                pixeldata[LED_LEFT][i] = pixeldata[LED_RIGHT][i] = color;
 8054178:	6808      	ldr	r0, [r1, #0]
            for (uint32_t i{0}; i < PIXELS; ++i)
 805417a:	3304      	adds	r3, #4
                pixeldata[LED_LEFT][i] = pixeldata[LED_RIGHT][i] = color;
 805417c:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
 8054180:	6318      	str	r0, [r3, #48]	; 0x30
            for (uint32_t i{0}; i < PIXELS; ++i)
 8054182:	4293      	cmp	r3, r2
 8054184:	d1f8      	bne.n	8054178 <_ZN8lexxhard14led_controller19led_controller_impl4fillERK7led_rgbj.part.0+0x6>
    }
 8054186:	4770      	bx	lr

08054188 <_ZNK8lexxhard14led_controller3msg4dec1Ec.isra.0>:
        if (h < 0 || l < 0)
            return -1;
        return h << 4 | l;
    }
    int dec1(char c) const {
        return (c >= '0' && c <= '9') ? c - '0'
 8054188:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 805418c:	b2da      	uxtb	r2, r3
 805418e:	2a09      	cmp	r2, #9
 8054190:	d801      	bhi.n	8054196 <_ZNK8lexxhard14led_controller3msg4dec1Ec.isra.0+0xe>
 8054192:	4618      	mov	r0, r3
 8054194:	4770      	bx	lr
             : (c >= 'a' && c <= 'f') ? c - 'a' + 10
 8054196:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 805419a:	2b05      	cmp	r3, #5
 805419c:	d801      	bhi.n	80541a2 <_ZNK8lexxhard14led_controller3msg4dec1Ec.isra.0+0x1a>
 805419e:	3857      	subs	r0, #87	; 0x57
 80541a0:	4770      	bx	lr
             : (c >= 'A' && c <= 'F') ? c - 'A' + 10
 80541a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80541a6:	2b05      	cmp	r3, #5
 80541a8:	bf94      	ite	ls
 80541aa:	3837      	subls	r0, #55	; 0x37
 80541ac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
                                      : -1;
    }
 80541b0:	4770      	bx	lr

080541b2 <_ZNK8lexxhard14led_controller3msg4dec2EPKc.isra.0>:
    int dec2(const char *str) const {
 80541b2:	b510      	push	{r4, lr}
 80541b4:	4604      	mov	r4, r0
        int h{dec1(str[0])};
 80541b6:	7800      	ldrb	r0, [r0, #0]
 80541b8:	f7ff ffe6 	bl	8054188 <_ZNK8lexxhard14led_controller3msg4dec1Ec.isra.0>
 80541bc:	4601      	mov	r1, r0
        int l{dec1(str[1])};
 80541be:	7860      	ldrb	r0, [r4, #1]
 80541c0:	f7ff ffe2 	bl	8054188 <_ZNK8lexxhard14led_controller3msg4dec1Ec.isra.0>
        if (h < 0 || l < 0)
 80541c4:	2900      	cmp	r1, #0
 80541c6:	db04      	blt.n	80541d2 <_ZNK8lexxhard14led_controller3msg4dec2EPKc.isra.0+0x20>
 80541c8:	2800      	cmp	r0, #0
 80541ca:	db02      	blt.n	80541d2 <_ZNK8lexxhard14led_controller3msg4dec2EPKc.isra.0+0x20>
        return h << 4 | l;
 80541cc:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
    }
 80541d0:	bd10      	pop	{r4, pc}
            return -1;
 80541d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80541d6:	e7fb      	b.n	80541d0 <_ZNK8lexxhard14led_controller3msg4dec2EPKc.isra.0+0x1e>

080541d8 <led_strip_update_rgb.isra.0>:
				       struct led_rgb *pixels,
				       size_t num_pixels) {
	const struct led_strip_driver_api *api =
		(const struct led_strip_driver_api *)dev->api;

	return api->update_rgb(dev, pixels, num_pixels);
 80541d8:	6883      	ldr	r3, [r0, #8]
 80541da:	681b      	ldr	r3, [r3, #0]
 80541dc:	4718      	bx	r3

080541de <_ZN8lexxhard14led_controller19led_controller_impl6updateEv>:
    void update() {
 80541de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80541e2:	4604      	mov	r4, r0
        std::copy(&pixeldata[LED_LEFT][0],  &pixeldata[LED_LEFT][PIXELS_BACK],  &pixeldata_back[LED_LEFT][0]);
 80541e4:	f100 0834 	add.w	r8, r0, #52	; 0x34
 80541e8:	f500 76aa 	add.w	r6, r0, #340	; 0x154
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80541ec:	2264      	movs	r2, #100	; 0x64
        std::copy(&pixeldata[LED_RIGHT][0], &pixeldata[LED_RIGHT][PIXELS_BACK], &pixeldata_back[LED_RIGHT][0]);
 80541ee:	f504 75dc 	add.w	r5, r4, #440	; 0x1b8
 80541f2:	f104 07c4 	add.w	r7, r4, #196	; 0xc4
 80541f6:	4641      	mov	r1, r8
 80541f8:	4630      	mov	r0, r6
 80541fa:	f006 fe0d 	bl	805ae18 <memmove>
 80541fe:	4639      	mov	r1, r7
 8054200:	2264      	movs	r2, #100	; 0x64
 8054202:	4628      	mov	r0, r5
 8054204:	f006 fe08 	bl	805ae18 <memmove>
        led_strip_update_rgb(dev[LED_LEFT], pixeldata[LED_LEFT], PIXELS);
 8054208:	4641      	mov	r1, r8
 805420a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 805420c:	2224      	movs	r2, #36	; 0x24
 805420e:	f7ff ffe3 	bl	80541d8 <led_strip_update_rgb.isra.0>
        led_strip_update_rgb(dev[LED_RIGHT], pixeldata[LED_RIGHT], PIXELS);
 8054212:	4639      	mov	r1, r7
 8054214:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8054216:	2224      	movs	r2, #36	; 0x24
 8054218:	f7ff ffde 	bl	80541d8 <led_strip_update_rgb.isra.0>
        led_strip_update_rgb(dev[2], pixeldata_back[LED_LEFT], PIXELS_BACK);
 805421c:	4631      	mov	r1, r6
 805421e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8054220:	2219      	movs	r2, #25
 8054222:	f7ff ffd9 	bl	80541d8 <led_strip_update_rgb.isra.0>
        led_strip_update_rgb(dev[3], pixeldata_back[LED_RIGHT], PIXELS_BACK);
 8054226:	4629      	mov	r1, r5
 8054228:	6b20      	ldr	r0, [r4, #48]	; 0x30
 805422a:	2219      	movs	r2, #25
    }
 805422c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        led_strip_update_rgb(dev[3], pixeldata_back[LED_RIGHT], PIXELS_BACK);
 8054230:	f7ff bfd2 	b.w	80541d8 <led_strip_update_rgb.isra.0>

08054234 <_ZN8lexxhard14led_controller19led_controller_impl9fill_fadeERK7led_rgbj>:
        uint32_t thres{60 * hz / count_per_min};
 8054234:	f44f 6316 	mov.w	r3, #2400	; 0x960
    void fill_fade(const led_rgb &color, uint32_t count_per_min) {
 8054238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        uint32_t thres{60 * hz / count_per_min};
 805423a:	fbb3 f2f2 	udiv	r2, r3, r2
        if (counter >= thres)
 805423e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    void fill_fade(const led_rgb &color, uint32_t count_per_min) {
 8054242:	2500      	movs	r5, #0
 8054244:	2664      	movs	r6, #100	; 0x64
        color_.r = color.r * percent / 100;
 8054246:	2764      	movs	r7, #100	; 0x64
        if (counter >= thres)
 8054248:	4293      	cmp	r3, r2
        if (counter < thres / 2)
 805424a:	ea4f 0352 	mov.w	r3, r2, lsr #1
        fill(fader(color, percent));
 805424e:	f88d 5004 	strb.w	r5, [sp, #4]
            counter = 0;
 8054252:	bf28      	it	cs
 8054254:	f8c0 521c 	strcs.w	r5, [r0, #540]	; 0x21c
        if (counter < thres / 2)
 8054258:	f8d0 421c 	ldr.w	r4, [r0, #540]	; 0x21c
 805425c:	ebb4 0f52 	cmp.w	r4, r2, lsr #1
            percent = (thres - counter) * 100 / (thres / 2);
 8054260:	bf2c      	ite	cs
 8054262:	1b12      	subcs	r2, r2, r4
            percent = counter * 100 / (thres / 2);
 8054264:	fb06 f204 	mulcc.w	r2, r6, r4
        color_.g = color.g * percent / 100;
 8054268:	788c      	ldrb	r4, [r1, #2]
            percent = (thres - counter) * 100 / (thres / 2);
 805426a:	bf28      	it	cs
 805426c:	4372      	mulcs	r2, r6
        color_.r = color.r * percent / 100;
 805426e:	784e      	ldrb	r6, [r1, #1]
            percent = (thres - counter) * 100 / (thres / 2);
 8054270:	fbb2 f2f3 	udiv	r2, r2, r3
        color_.b = color.b * percent / 100;
 8054274:	78cb      	ldrb	r3, [r1, #3]
        color_.r = color.r * percent / 100;
 8054276:	4356      	muls	r6, r2
        color_.g = color.g * percent / 100;
 8054278:	4354      	muls	r4, r2
 805427a:	a901      	add	r1, sp, #4
        color_.b = color.b * percent / 100;
 805427c:	435a      	muls	r2, r3
        color_.r = color.r * percent / 100;
 805427e:	fb96 f6f7 	sdiv	r6, r6, r7
        color_.b = color.b * percent / 100;
 8054282:	fb92 f2f7 	sdiv	r2, r2, r7
        color_.g = color.g * percent / 100;
 8054286:	fb94 f4f7 	sdiv	r4, r4, r7
        fill(fader(color, percent));
 805428a:	f88d 6005 	strb.w	r6, [sp, #5]
 805428e:	f88d 4006 	strb.w	r4, [sp, #6]
 8054292:	f88d 2007 	strb.w	r2, [sp, #7]
        if (select == LED_BOTH) {
 8054296:	f7ff ff6c 	bl	8054172 <_ZN8lexxhard14led_controller19led_controller_impl4fillERK7led_rgbj.part.0>
    }
 805429a:	b003      	add	sp, #12
 805429c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0805429e <_ZN8lexxhard14led_controller19led_controller_impl35fill_knight_industries_two_thousandEv>:
    void fill_knight_industries_two_thousand() {
 805429e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if (counter >= (PIXELS + width) * 2)
 80542a2:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    void fill_knight_industries_two_thousand() {
 80542a6:	f04f 0900 	mov.w	r9, #0
 80542aa:	4606      	mov	r6, r0
 80542ac:	4604      	mov	r4, r0
        if (counter >= (PIXELS + width) * 2)
 80542ae:	2b6f      	cmp	r3, #111	; 0x6f
        for (int32_t i{0}, end{PIXELS}; i < end; ++i) {
 80542b0:	f04f 0500 	mov.w	r5, #0
                int gain{(width - abs(pos - i)) * 100 / width};
 80542b4:	f06f 0a63 	mvn.w	sl, #99	; 0x63
 80542b8:	f04f 0b14 	mov.w	fp, #20
            counter = 0;
 80542bc:	bf88      	it	hi
 80542be:	f8c0 921c 	strhi.w	r9, [r0, #540]	; 0x21c
        bool back{counter >= PIXELS + width};
 80542c2:	f8d0 821c 	ldr.w	r8, [r0, #540]	; 0x21c
        if (back)
 80542c6:	f1b8 0f37 	cmp.w	r8, #55	; 0x37
            pos = (PIXELS + width) * 2 - counter - width;
 80542ca:	bf8c      	ite	hi
 80542cc:	f1c8 075c 	rsbhi	r7, r8, #92	; 0x5c
            pos = counter;
 80542d0:	4647      	movls	r7, r8
            if (back)
 80542d2:	f1b8 0f37 	cmp.w	r8, #55	; 0x37
 80542d6:	d914      	bls.n	8054302 <_ZN8lexxhard14led_controller19led_controller_impl35fill_knight_industries_two_thousandEv+0x64>
                no_color = i < pos || i > pos + width;
 80542d8:	42af      	cmp	r7, r5
 80542da:	dc03      	bgt.n	80542e4 <_ZN8lexxhard14led_controller19led_controller_impl35fill_knight_industries_two_thousandEv+0x46>
 80542dc:	f107 0314 	add.w	r3, r7, #20
 80542e0:	42ab      	cmp	r3, r5
                no_color = i < pos - width || i > pos;
 80542e2:	da14      	bge.n	805430e <_ZN8lexxhard14led_controller19led_controller_impl35fill_knight_industries_two_thousandEv+0x70>
                pixeldata[LED_LEFT][i] = pixeldata[LED_RIGHT][i] = black;
 80542e4:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80542e8:	2100      	movs	r1, #0
 80542ea:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80542ee:	6059      	str	r1, [r3, #4]
        for (int32_t i{0}, end{PIXELS}; i < end; ++i) {
 80542f0:	3501      	adds	r5, #1
                pixeldata[LED_LEFT][i] = pixeldata[LED_RIGHT][i] = dimmed;
 80542f2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
        for (int32_t i{0}, end{PIXELS}; i < end; ++i) {
 80542f6:	3404      	adds	r4, #4
 80542f8:	2d24      	cmp	r5, #36	; 0x24
                pixeldata[LED_LEFT][i] = pixeldata[LED_RIGHT][i] = dimmed;
 80542fa:	6323      	str	r3, [r4, #48]	; 0x30
        for (int32_t i{0}, end{PIXELS}; i < end; ++i) {
 80542fc:	d1e9      	bne.n	80542d2 <_ZN8lexxhard14led_controller19led_controller_impl35fill_knight_industries_two_thousandEv+0x34>
    }
 80542fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                no_color = i < pos - width || i > pos;
 8054302:	f1a7 0314 	sub.w	r3, r7, #20
 8054306:	42ab      	cmp	r3, r5
 8054308:	dcec      	bgt.n	80542e4 <_ZN8lexxhard14led_controller19led_controller_impl35fill_knight_industries_two_thousandEv+0x46>
 805430a:	42af      	cmp	r7, r5
 805430c:	e7e9      	b.n	80542e2 <_ZN8lexxhard14led_controller19led_controller_impl35fill_knight_industries_two_thousandEv+0x44>
                int gain{(width - abs(pos - i)) * 100 / width};
 805430e:	1b78      	subs	r0, r7, r5
 8054310:	f006 fd49 	bl	805ada6 <abs>
 8054314:	fb0a f000 	mul.w	r0, sl, r0
                gain = gain * gain * gain / 100 / 100;
 8054318:	f242 7210 	movw	r2, #10000	; 0x2710
                pixeldata[LED_LEFT][i] = pixeldata[LED_RIGHT][i] = dimmed;
 805431c:	2100      	movs	r1, #0
                int gain{(width - abs(pos - i)) * 100 / width};
 805431e:	f500 63fa 	add.w	r3, r0, #2000	; 0x7d0
                pixeldata[LED_LEFT][i] = pixeldata[LED_RIGHT][i] = dimmed;
 8054322:	f884 90c4 	strb.w	r9, [r4, #196]	; 0xc4
 8054326:	f884 10c5 	strb.w	r1, [r4, #197]	; 0xc5
                int gain{(width - abs(pos - i)) * 100 / width};
 805432a:	fb93 f0fb 	sdiv	r0, r3, fp
                gain = gain * gain * gain / 100 / 100;
 805432e:	fb00 f300 	mul.w	r3, r0, r0
 8054332:	4343      	muls	r3, r0
        color_.g = color.g * percent / 100;
 8054334:	2064      	movs	r0, #100	; 0x64
                gain = gain * gain * gain / 100 / 100;
 8054336:	fb93 f3f2 	sdiv	r3, r3, r2
        color_.g = color.g * percent / 100;
 805433a:	01d9      	lsls	r1, r3, #7
        color_.b = color.b * percent / 100;
 805433c:	015b      	lsls	r3, r3, #5
        color_.g = color.g * percent / 100;
 805433e:	fb91 f1f0 	sdiv	r1, r1, r0
        color_.b = color.b * percent / 100;
 8054342:	fb93 f3f0 	sdiv	r3, r3, r0
        color_.g = color.g * percent / 100;
 8054346:	f884 10c6 	strb.w	r1, [r4, #198]	; 0xc6
        color_.b = color.b * percent / 100;
 805434a:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
 805434e:	e7cf      	b.n	80542f0 <_ZN8lexxhard14led_controller19led_controller_impl35fill_knight_industries_two_thousandEv+0x52>

08054350 <_ZN8lexxhard14log_controller12logapi_panicEPK11log_backend>:
	backend->cb->active = false;
 8054350:	6843      	ldr	r3, [r0, #4]
 8054352:	2200      	movs	r2, #0
 8054354:	715a      	strb	r2, [r3, #5]
}
 8054356:	4770      	bx	lr

08054358 <_ZNK8std_msgs4Time9serializeEPh>:
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8054358:	6843      	ldr	r3, [r0, #4]
 805435a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 805435c:	6843      	ldr	r3, [r0, #4]
 805435e:	0a1b      	lsrs	r3, r3, #8
 8054360:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8054362:	88c3      	ldrh	r3, [r0, #6]
 8054364:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8054366:	79c3      	ldrb	r3, [r0, #7]
 8054368:	70cb      	strb	r3, [r1, #3]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 805436a:	6883      	ldr	r3, [r0, #8]
 805436c:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 805436e:	6883      	ldr	r3, [r0, #8]
 8054370:	0a1b      	lsrs	r3, r3, #8
 8054372:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8054374:	8943      	ldrh	r3, [r0, #10]
 8054376:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8054378:	7ac3      	ldrb	r3, [r0, #11]
    }
 805437a:	2008      	movs	r0, #8
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 805437c:	71cb      	strb	r3, [r1, #7]
    }
 805437e:	4770      	bx	lr

08054380 <_ZN8std_msgs4Time11deserializeEPh>:
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8054380:	780b      	ldrb	r3, [r1, #0]
 8054382:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8054384:	784a      	ldrb	r2, [r1, #1]
 8054386:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 805438a:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 805438c:	788a      	ldrb	r2, [r1, #2]
 805438e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8054392:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8054394:	78ca      	ldrb	r2, [r1, #3]
 8054396:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 805439a:	6043      	str	r3, [r0, #4]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 805439c:	790b      	ldrb	r3, [r1, #4]
 805439e:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80543a0:	794a      	ldrb	r2, [r1, #5]
 80543a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80543a6:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80543a8:	798a      	ldrb	r2, [r1, #6]
 80543aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80543ae:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80543b0:	79ca      	ldrb	r2, [r1, #7]
 80543b2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80543b6:	6083      	str	r3, [r0, #8]
    }
 80543b8:	2008      	movs	r0, #8
 80543ba:	4770      	bx	lr

080543bc <_ZNK8std_msgs4Bool9serializeEPh>:
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80543bc:	7903      	ldrb	r3, [r0, #4]
    }
 80543be:	2001      	movs	r0, #1
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80543c0:	700b      	strb	r3, [r1, #0]
    }
 80543c2:	4770      	bx	lr

080543c4 <_ZN8std_msgs4Bool11deserializeEPh>:
      this->data = u_data.real;
 80543c4:	780b      	ldrb	r3, [r1, #0]
 80543c6:	7103      	strb	r3, [r0, #4]
    }
 80543c8:	2001      	movs	r0, #1
 80543ca:	4770      	bx	lr

080543cc <_ZNK8std_msgs4Byte9serializeEPh>:
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80543cc:	7903      	ldrb	r3, [r0, #4]
    }
 80543ce:	2001      	movs	r0, #1
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80543d0:	700b      	strb	r3, [r1, #0]
    }
 80543d2:	4770      	bx	lr

080543d4 <_ZN8std_msgs4Byte11deserializeEPh>:
      this->data = u_data.real;
 80543d4:	780b      	ldrb	r3, [r1, #0]
 80543d6:	7103      	strb	r3, [r0, #4]
    }
 80543d8:	2001      	movs	r0, #1
 80543da:	4770      	bx	lr

080543dc <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const override
 80543dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 80543de:	6843      	ldr	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const override
 80543e0:	4604      	mov	r4, r0
 80543e2:	460d      	mov	r5, r1
      for( uint32_t i = 0; i < dim_length; i++){
 80543e4:	2600      	movs	r6, #0
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 80543e6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->dim_length);
 80543e8:	2704      	movs	r7, #4
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 80543ea:	6843      	ldr	r3, [r0, #4]
 80543ec:	0a1b      	lsrs	r3, r3, #8
 80543ee:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 80543f0:	88c3      	ldrh	r3, [r0, #6]
 80543f2:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 80543f4:	79c3      	ldrb	r3, [r0, #7]
 80543f6:	70cb      	strb	r3, [r1, #3]
      for( uint32_t i = 0; i < dim_length; i++){
 80543f8:	6863      	ldr	r3, [r4, #4]
      offset += this->dim[i].serialize(outbuffer + offset);
 80543fa:	19e9      	adds	r1, r5, r7
      for( uint32_t i = 0; i < dim_length; i++){
 80543fc:	42b3      	cmp	r3, r6
 80543fe:	d909      	bls.n	8054414 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x38>
      offset += this->dim[i].serialize(outbuffer + offset);
 8054400:	69a0      	ldr	r0, [r4, #24]
 8054402:	0133      	lsls	r3, r6, #4
 8054404:	58c3      	ldr	r3, [r0, r3]
 8054406:	eb00 1006 	add.w	r0, r0, r6, lsl #4
      for( uint32_t i = 0; i < dim_length; i++){
 805440a:	3601      	adds	r6, #1
      offset += this->dim[i].serialize(outbuffer + offset);
 805440c:	681b      	ldr	r3, [r3, #0]
 805440e:	4798      	blx	r3
 8054410:	4407      	add	r7, r0
      for( uint32_t i = 0; i < dim_length; i++){
 8054412:	e7f1      	b.n	80543f8 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x1c>
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8054414:	69e3      	ldr	r3, [r4, #28]
    }
 8054416:	1d38      	adds	r0, r7, #4
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8054418:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 805441a:	69e3      	ldr	r3, [r4, #28]
 805441c:	0a1b      	lsrs	r3, r3, #8
 805441e:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8054420:	8be3      	ldrh	r3, [r4, #30]
 8054422:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8054424:	7fe3      	ldrb	r3, [r4, #31]
 8054426:	70cb      	strb	r3, [r1, #3]
    }
 8054428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0805442a <_ZNK8std_msgs14ByteMultiArray9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const override
 805442a:	b538      	push	{r3, r4, r5, lr}
 805442c:	4604      	mov	r4, r0
      offset += this->layout.serialize(outbuffer + offset);
 805442e:	3004      	adds	r0, #4
    virtual int serialize(unsigned char *outbuffer) const override
 8054430:	460d      	mov	r5, r1
      offset += this->layout.serialize(outbuffer + offset);
 8054432:	f7ff ffd3 	bl	80543dc <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8054436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8054438:	542b      	strb	r3, [r5, r0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 805443a:	182b      	adds	r3, r5, r0
 805443c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      offset += sizeof(this->data_length);
 805443e:	3004      	adds	r0, #4
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8054440:	0a12      	lsrs	r2, r2, #8
 8054442:	705a      	strb	r2, [r3, #1]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8054444:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8054446:	709a      	strb	r2, [r3, #2]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8054448:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 805444c:	70da      	strb	r2, [r3, #3]
      for( uint32_t i = 0; i < data_length; i++){
 805444e:	2300      	movs	r3, #0
 8054450:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8054452:	429a      	cmp	r2, r3
 8054454:	d905      	bls.n	8054462 <_ZNK8std_msgs14ByteMultiArray9serializeEPh+0x38>
      u_datai.real = this->data[i];
 8054456:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8054458:	5cd2      	ldrb	r2, [r2, r3]
      for( uint32_t i = 0; i < data_length; i++){
 805445a:	3301      	adds	r3, #1
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 805445c:	542a      	strb	r2, [r5, r0]
      offset += sizeof(this->data[i]);
 805445e:	3001      	adds	r0, #1
      for( uint32_t i = 0; i < data_length; i++){
 8054460:	e7f6      	b.n	8054450 <_ZNK8std_msgs14ByteMultiArray9serializeEPh+0x26>
    }
 8054462:	bd38      	pop	{r3, r4, r5, pc}

08054464 <_ZNK8std_msgs15UInt8MultiArray9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const override
 8054464:	b538      	push	{r3, r4, r5, lr}
 8054466:	4604      	mov	r4, r0
      offset += this->layout.serialize(outbuffer + offset);
 8054468:	3004      	adds	r0, #4
    virtual int serialize(unsigned char *outbuffer) const override
 805446a:	460d      	mov	r5, r1
      offset += this->layout.serialize(outbuffer + offset);
 805446c:	f7ff ffb6 	bl	80543dc <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8054470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8054472:	542b      	strb	r3, [r5, r0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8054474:	182b      	adds	r3, r5, r0
 8054476:	6a62      	ldr	r2, [r4, #36]	; 0x24
      offset += sizeof(this->data_length);
 8054478:	3004      	adds	r0, #4
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 805447a:	0a12      	lsrs	r2, r2, #8
 805447c:	705a      	strb	r2, [r3, #1]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 805447e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8054480:	709a      	strb	r2, [r3, #2]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8054482:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8054486:	70da      	strb	r2, [r3, #3]
      for( uint32_t i = 0; i < data_length; i++){
 8054488:	2300      	movs	r3, #0
 805448a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 805448c:	429a      	cmp	r2, r3
 805448e:	d905      	bls.n	805449c <_ZNK8std_msgs15UInt8MultiArray9serializeEPh+0x38>
      *(outbuffer + offset + 0) = (this->data[i] >> (8 * 0)) & 0xFF;
 8054490:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8054492:	5cd2      	ldrb	r2, [r2, r3]
      for( uint32_t i = 0; i < data_length; i++){
 8054494:	3301      	adds	r3, #1
      *(outbuffer + offset + 0) = (this->data[i] >> (8 * 0)) & 0xFF;
 8054496:	542a      	strb	r2, [r5, r0]
      offset += sizeof(this->data[i]);
 8054498:	3001      	adds	r0, #1
      for( uint32_t i = 0; i < data_length; i++){
 805449a:	e7f6      	b.n	805448a <_ZNK8std_msgs15UInt8MultiArray9serializeEPh+0x26>
    }
 805449c:	bd38      	pop	{r3, r4, r5, pc}

0805449e <_ZNK8std_msgs5UInt89serializeEPh>:
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 805449e:	7903      	ldrb	r3, [r0, #4]
    }
 80544a0:	2001      	movs	r0, #1
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 80544a2:	700b      	strb	r3, [r1, #0]
    }
 80544a4:	4770      	bx	lr

080544a6 <_ZN8std_msgs5UInt811deserializeEPh>:
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 80544a6:	780b      	ldrb	r3, [r1, #0]
 80544a8:	7103      	strb	r3, [r0, #4]
    }
 80544aa:	2001      	movs	r0, #1
 80544ac:	4770      	bx	lr

080544ae <_ZNK8std_msgs7Float329serializeEPh>:
      u_data.real = this->data;
 80544ae:	6843      	ldr	r3, [r0, #4]
    }
 80544b0:	2004      	movs	r0, #4
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80544b2:	0a1a      	lsrs	r2, r3, #8
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80544b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80544b6:	704a      	strb	r2, [r1, #1]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80544b8:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80544ba:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80544bc:	708a      	strb	r2, [r1, #2]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80544be:	70cb      	strb	r3, [r1, #3]
    }
 80544c0:	4770      	bx	lr

080544c2 <_ZN8std_msgs7Float3211deserializeEPh>:
      this->data = u_data.real;
 80544c2:	680b      	ldr	r3, [r1, #0]
 80544c4:	6043      	str	r3, [r0, #4]
    }
 80544c6:	2004      	movs	r0, #4
 80544c8:	4770      	bx	lr

080544ca <_ZNK8std_msgs16UInt16MultiArray9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const override
 80544ca:	b538      	push	{r3, r4, r5, lr}
 80544cc:	4604      	mov	r4, r0
      offset += this->layout.serialize(outbuffer + offset);
 80544ce:	3004      	adds	r0, #4
    virtual int serialize(unsigned char *outbuffer) const override
 80544d0:	460d      	mov	r5, r1
      offset += this->layout.serialize(outbuffer + offset);
 80544d2:	f7ff ff83 	bl	80543dc <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 80544d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
      *(outbuffer + offset + 1) = (this->data[i] >> (8 * 1)) & 0xFF;
 80544d8:	1c69      	adds	r1, r5, #1
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 80544da:	542b      	strb	r3, [r5, r0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 80544dc:	182b      	adds	r3, r5, r0
 80544de:	6a62      	ldr	r2, [r4, #36]	; 0x24
      offset += sizeof(this->data_length);
 80544e0:	3004      	adds	r0, #4
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 80544e2:	0a12      	lsrs	r2, r2, #8
 80544e4:	705a      	strb	r2, [r3, #1]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 80544e6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80544e8:	709a      	strb	r2, [r3, #2]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 80544ea:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 80544ee:	70da      	strb	r2, [r3, #3]
      for( uint32_t i = 0; i < data_length; i++){
 80544f0:	2300      	movs	r3, #0
 80544f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80544f4:	429a      	cmp	r2, r3
 80544f6:	d90b      	bls.n	8054510 <_ZNK8std_msgs16UInt16MultiArray9serializeEPh+0x46>
      *(outbuffer + offset + 0) = (this->data[i] >> (8 * 0)) & 0xFF;
 80544f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80544fa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80544fe:	542a      	strb	r2, [r5, r0]
      *(outbuffer + offset + 1) = (this->data[i] >> (8 * 1)) & 0xFF;
 8054500:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8054502:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
      for( uint32_t i = 0; i < data_length; i++){
 8054506:	3301      	adds	r3, #1
      *(outbuffer + offset + 1) = (this->data[i] >> (8 * 1)) & 0xFF;
 8054508:	0a12      	lsrs	r2, r2, #8
 805450a:	540a      	strb	r2, [r1, r0]
      offset += sizeof(this->data[i]);
 805450c:	3002      	adds	r0, #2
      for( uint32_t i = 0; i < data_length; i++){
 805450e:	e7f0      	b.n	80544f2 <_ZNK8std_msgs16UInt16MultiArray9serializeEPh+0x28>
    }
 8054510:	bd38      	pop	{r3, r4, r5, pc}

08054512 <_ZNK13geometry_msgs7Vector39serializeEPh>:
      u_x.real = this->x;
 8054512:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    virtual int serialize(unsigned char *outbuffer) const override
 8054516:	b510      	push	{r4, lr}
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8054518:	0a14      	lsrs	r4, r2, #8
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 805451a:	700a      	strb	r2, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 805451c:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 805451e:	704c      	strb	r4, [r1, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8054520:	0c14      	lsrs	r4, r2, #16
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8054522:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8054524:	708c      	strb	r4, [r1, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8054526:	70ca      	strb	r2, [r1, #3]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8054528:	0a1a      	lsrs	r2, r3, #8
 805452a:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 805452c:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 805452e:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8054530:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8054532:	71cb      	strb	r3, [r1, #7]
      u_y.real = this->y;
 8054534:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8054538:	0a14      	lsrs	r4, r2, #8
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 805453a:	720a      	strb	r2, [r1, #8]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 805453c:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 805453e:	724c      	strb	r4, [r1, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8054540:	0c14      	lsrs	r4, r2, #16
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8054542:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8054544:	728c      	strb	r4, [r1, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8054546:	72ca      	strb	r2, [r1, #11]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8054548:	0a1a      	lsrs	r2, r3, #8
 805454a:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 805454c:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 805454e:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8054550:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8054552:	73cb      	strb	r3, [r1, #15]
      u_z.real = this->z;
 8054554:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8054558:	0a10      	lsrs	r0, r2, #8
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 805455a:	740a      	strb	r2, [r1, #16]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 805455c:	750b      	strb	r3, [r1, #20]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 805455e:	7448      	strb	r0, [r1, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8054560:	0c10      	lsrs	r0, r2, #16
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8054562:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8054564:	7488      	strb	r0, [r1, #18]
    }
 8054566:	2018      	movs	r0, #24
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8054568:	74ca      	strb	r2, [r1, #19]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 805456a:	0a1a      	lsrs	r2, r3, #8
 805456c:	754a      	strb	r2, [r1, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 805456e:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8054570:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8054572:	758a      	strb	r2, [r1, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8054574:	75cb      	strb	r3, [r1, #23]
    }
 8054576:	bd10      	pop	{r4, pc}

08054578 <_ZN13geometry_msgs7Vector311deserializeEPh>:
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8054578:	680a      	ldr	r2, [r1, #0]
 805457a:	684b      	ldr	r3, [r1, #4]
      this->x = u_x.real;
 805457c:	e9c0 2302 	strd	r2, r3, [r0, #8]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8054580:	688a      	ldr	r2, [r1, #8]
 8054582:	68cb      	ldr	r3, [r1, #12]
      this->y = u_y.real;
 8054584:	e9c0 2304 	strd	r2, r3, [r0, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8054588:	690a      	ldr	r2, [r1, #16]
 805458a:	694b      	ldr	r3, [r1, #20]
      this->z = u_z.real;
 805458c:	e9c0 2306 	strd	r2, r3, [r0, #24]
    }
 8054590:	2018      	movs	r0, #24
 8054592:	4770      	bx	lr

08054594 <_ZNK13lexxauto_msgs3Imu9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const override
 8054594:	b5e0      	push	{r5, r6, r7, lr}
 8054596:	4606      	mov	r6, r0
 8054598:	460f      	mov	r7, r1
      offset += this->vel.serialize(outbuffer + offset);
 805459a:	3008      	adds	r0, #8
 805459c:	f7ff ffb9 	bl	8054512 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80545a0:	4605      	mov	r5, r0
      offset += this->accel.serialize(outbuffer + offset);
 80545a2:	1839      	adds	r1, r7, r0
 80545a4:	f106 0028 	add.w	r0, r6, #40	; 0x28
 80545a8:	f7ff ffb3 	bl	8054512 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80545ac:	4405      	add	r5, r0
      offset += this->ang.serialize(outbuffer + offset);
 80545ae:	f106 0048 	add.w	r0, r6, #72	; 0x48
 80545b2:	1979      	adds	r1, r7, r5
 80545b4:	f7ff ffad 	bl	8054512 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80545b8:	4405      	add	r5, r0
      offset += this->gyro.serialize(outbuffer + offset);
 80545ba:	f106 0068 	add.w	r0, r6, #104	; 0x68
 80545be:	1979      	adds	r1, r7, r5
 80545c0:	f7ff ffa7 	bl	8054512 <_ZNK13geometry_msgs7Vector39serializeEPh>
    }
 80545c4:	4428      	add	r0, r5
 80545c6:	bde0      	pop	{r5, r6, r7, pc}

080545c8 <_ZN13lexxauto_msgs3Imu11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer) override
 80545c8:	b5e0      	push	{r5, r6, r7, lr}
 80545ca:	4606      	mov	r6, r0
 80545cc:	460f      	mov	r7, r1
      offset += this->vel.deserialize(inbuffer + offset);
 80545ce:	3008      	adds	r0, #8
 80545d0:	f7ff ffd2 	bl	8054578 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80545d4:	4605      	mov	r5, r0
      offset += this->accel.deserialize(inbuffer + offset);
 80545d6:	1839      	adds	r1, r7, r0
 80545d8:	f106 0028 	add.w	r0, r6, #40	; 0x28
 80545dc:	f7ff ffcc 	bl	8054578 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80545e0:	4405      	add	r5, r0
      offset += this->ang.deserialize(inbuffer + offset);
 80545e2:	f106 0048 	add.w	r0, r6, #72	; 0x48
 80545e6:	1979      	adds	r1, r7, r5
 80545e8:	f7ff ffc6 	bl	8054578 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80545ec:	4405      	add	r5, r0
      offset += this->gyro.deserialize(inbuffer + offset);
 80545ee:	f106 0068 	add.w	r0, r6, #104	; 0x68
 80545f2:	1979      	adds	r1, r7, r5
 80545f4:	f7ff ffc0 	bl	8054578 <_ZN13geometry_msgs7Vector311deserializeEPh>
    }
 80545f8:	4428      	add	r0, r5
 80545fa:	bde0      	pop	{r5, r6, r7, pc}

080545fc <_ZNK8std_msgs17Float64MultiArray9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const override
 80545fc:	b570      	push	{r4, r5, r6, lr}
 80545fe:	4605      	mov	r5, r0
      offset += this->layout.serialize(outbuffer + offset);
 8054600:	3004      	adds	r0, #4
    virtual int serialize(unsigned char *outbuffer) const override
 8054602:	460c      	mov	r4, r1
      offset += this->layout.serialize(outbuffer + offset);
 8054604:	f7ff feea 	bl	80543dc <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8054608:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 805460a:	2600      	movs	r6, #0
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 805460c:	1823      	adds	r3, r4, r0
 805460e:	5422      	strb	r2, [r4, r0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8054610:	f1c4 0404 	rsb	r4, r4, #4
 8054614:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8054616:	0a12      	lsrs	r2, r2, #8
 8054618:	705a      	strb	r2, [r3, #1]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 805461a:	8cea      	ldrh	r2, [r5, #38]	; 0x26
 805461c:	709a      	strb	r2, [r3, #2]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 805461e:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
 8054622:	70da      	strb	r2, [r3, #3]
      for( uint32_t i = 0; i < data_length; i++){
 8054624:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8054626:	18e0      	adds	r0, r4, r3
 8054628:	42b2      	cmp	r2, r6
 805462a:	d91a      	bls.n	8054662 <_ZNK8std_msgs17Float64MultiArray9serializeEPh+0x66>
      u_datai.real = this->data[i];
 805462c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 805462e:	3308      	adds	r3, #8
 8054630:	f852 1036 	ldr.w	r1, [r2, r6, lsl #3]
 8054634:	eb02 00c6 	add.w	r0, r2, r6, lsl #3
      for( uint32_t i = 0; i < data_length; i++){
 8054638:	3601      	adds	r6, #1
      u_datai.real = this->data[i];
 805463a:	6842      	ldr	r2, [r0, #4]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 805463c:	0a08      	lsrs	r0, r1, #8
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 805463e:	f803 1c04 	strb.w	r1, [r3, #-4]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8054642:	f803 0c03 	strb.w	r0, [r3, #-3]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8054646:	0c08      	lsrs	r0, r1, #16
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8054648:	0e09      	lsrs	r1, r1, #24
      *(outbuffer + offset + 4) = (u_datai.base >> (8 * 4)) & 0xFF;
 805464a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 805464c:	f803 0c02 	strb.w	r0, [r3, #-2]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8054650:	f803 1c01 	strb.w	r1, [r3, #-1]
      *(outbuffer + offset + 5) = (u_datai.base >> (8 * 5)) & 0xFF;
 8054654:	0a11      	lsrs	r1, r2, #8
 8054656:	7059      	strb	r1, [r3, #1]
      *(outbuffer + offset + 6) = (u_datai.base >> (8 * 6)) & 0xFF;
 8054658:	0c11      	lsrs	r1, r2, #16
      *(outbuffer + offset + 7) = (u_datai.base >> (8 * 7)) & 0xFF;
 805465a:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 6) = (u_datai.base >> (8 * 6)) & 0xFF;
 805465c:	7099      	strb	r1, [r3, #2]
      *(outbuffer + offset + 7) = (u_datai.base >> (8 * 7)) & 0xFF;
 805465e:	70da      	strb	r2, [r3, #3]
      for( uint32_t i = 0; i < data_length; i++){
 8054660:	e7e0      	b.n	8054624 <_ZNK8std_msgs17Float64MultiArray9serializeEPh+0x28>
    }
 8054662:	bd70      	pop	{r4, r5, r6, pc}

08054664 <_ZN3ros10SubscriberIN8std_msgs4BoolEN8lexxhard13ros_interlockEE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8054664:	b430      	push	{r4, r5}
    (obj_->*cb_)(msg);
 8054666:	69c4      	ldr	r4, [r0, #28]
  virtual void callback(unsigned char* data) override
 8054668:	4603      	mov	r3, r0
      this->data = u_data.real;
 805466a:	780a      	ldrb	r2, [r1, #0]
    (obj_->*cb_)(msg);
 805466c:	6981      	ldr	r1, [r0, #24]
 805466e:	7402      	strb	r2, [r0, #16]
 8054670:	104d      	asrs	r5, r1, #1
 8054672:	695a      	ldr	r2, [r3, #20]
 8054674:	eb04 0061 	add.w	r0, r4, r1, asr #1
 8054678:	07c9      	lsls	r1, r1, #31
 805467a:	bf48      	it	mi
 805467c:	5961      	ldrmi	r1, [r4, r5]
  }
 805467e:	bc30      	pop	{r4, r5}
    (obj_->*cb_)(msg);
 8054680:	bf48      	it	mi
 8054682:	588a      	ldrmi	r2, [r1, r2]
 8054684:	f103 010c 	add.w	r1, r3, #12
 8054688:	4710      	bx	r2

0805468a <_ZN3ros10SubscriberIN8std_msgs4BoolEN8lexxhard13ros_interlockEE15getEndpointTypeEv>:
  virtual int getEndpointType() override
  {
    return endpoint_;
  }
 805468a:	6a00      	ldr	r0, [r0, #32]
 805468c:	4770      	bx	lr

0805468e <_ZN3ros10SubscriberIN8std_msgs15UInt8MultiArrayEN8lexxhard7ros_dfuEE15getEndpointTypeEv>:
 805468e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8054690:	4770      	bx	lr

08054692 <_ZN3ros10SubscriberIN8std_msgs6StringEN8lexxhard9ros_boardEE15getEndpointTypeEv>:
 8054692:	6a00      	ldr	r0, [r0, #32]
 8054694:	4770      	bx	lr

08054696 <_ZN3ros10SubscriberIN8std_msgs4BoolEN8lexxhard9ros_boardEE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8054696:	b430      	push	{r4, r5}
    (obj_->*cb_)(msg);
 8054698:	69c4      	ldr	r4, [r0, #28]
  virtual void callback(unsigned char* data) override
 805469a:	4603      	mov	r3, r0
 805469c:	780a      	ldrb	r2, [r1, #0]
    (obj_->*cb_)(msg);
 805469e:	6981      	ldr	r1, [r0, #24]
 80546a0:	7402      	strb	r2, [r0, #16]
 80546a2:	104d      	asrs	r5, r1, #1
 80546a4:	695a      	ldr	r2, [r3, #20]
 80546a6:	eb04 0061 	add.w	r0, r4, r1, asr #1
 80546aa:	07c9      	lsls	r1, r1, #31
 80546ac:	bf48      	it	mi
 80546ae:	5961      	ldrmi	r1, [r4, r5]
  }
 80546b0:	bc30      	pop	{r4, r5}
    (obj_->*cb_)(msg);
 80546b2:	bf48      	it	mi
 80546b4:	588a      	ldrmi	r2, [r1, r2]
 80546b6:	f103 010c 	add.w	r1, r3, #12
 80546ba:	4710      	bx	r2

080546bc <_ZN3ros10SubscriberIN8std_msgs4BoolEN8lexxhard9ros_boardEE15getEndpointTypeEv>:
  }
 80546bc:	6a00      	ldr	r0, [r0, #32]
 80546be:	4770      	bx	lr

080546c0 <_ZN3ros11NodeHandle_IN12_GLOBAL__N_125rosserial_hardware_zephyrELi25ELi25ELi512ELi512EE9connectedEv>:
  };
 80546c0:	f890 0d38 	ldrb.w	r0, [r0, #3384]	; 0xd38
 80546c4:	4770      	bx	lr

080546c6 <k_uptime_get_32>:
{
 80546c6:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 80546c8:	f006 f838 	bl	805a73c <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 80546cc:	220a      	movs	r2, #10
 80546ce:	2300      	movs	r3, #0
 80546d0:	f7eb ff36 	bl	8040540 <__aeabi_uldivmod>
}
 80546d4:	bd08      	pop	{r3, pc}

080546d6 <_ZN3ros3Msg8varToArrIPhjEEvT_T0_>:
  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
  {
    for (size_t i = 0; i < sizeof(V); i++)
      arr[i] = (var >> (8 * i));
 80546d6:	0a0b      	lsrs	r3, r1, #8
 80546d8:	7001      	strb	r1, [r0, #0]
 80546da:	7043      	strb	r3, [r0, #1]
 80546dc:	0c0b      	lsrs	r3, r1, #16
 80546de:	0e09      	lsrs	r1, r1, #24
 80546e0:	7083      	strb	r3, [r0, #2]
 80546e2:	70c1      	strb	r1, [r0, #3]
  }
 80546e4:	4770      	bx	lr

080546e6 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const override
 80546e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80546e8:	8883      	ldrh	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const override
 80546ea:	460e      	mov	r6, r1
 80546ec:	4607      	mov	r7, r0
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80546ee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80546f0:	8883      	ldrh	r3, [r0, #4]
 80546f2:	0a1b      	lsrs	r3, r3, #8
 80546f4:	704b      	strb	r3, [r1, #1]
      uint32_t length_topic_name = strlen(this->topic_name);
 80546f6:	6880      	ldr	r0, [r0, #8]
 80546f8:	f7ec f8ae 	bl	8040858 <strlen>
 80546fc:	4604      	mov	r4, r0
      varToArr(outbuffer + offset, length_topic_name);
 80546fe:	4601      	mov	r1, r0
 8054700:	1cb0      	adds	r0, r6, #2
 8054702:	f7ff ffe8 	bl	80546d6 <_ZN3ros3Msg8varToArrIPhjEEvT_T0_>
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8054706:	4622      	mov	r2, r4
 8054708:	68b9      	ldr	r1, [r7, #8]
 805470a:	1db0      	adds	r0, r6, #6
 805470c:	f006 fb63 	bl	805add6 <memcpy>
      uint32_t length_message_type = strlen(this->message_type);
 8054710:	68f8      	ldr	r0, [r7, #12]
 8054712:	f7ec f8a1 	bl	8040858 <strlen>
 8054716:	4605      	mov	r5, r0
      offset += length_topic_name;
 8054718:	1da0      	adds	r0, r4, #6
      offset += 4;
 805471a:	340a      	adds	r4, #10
      varToArr(outbuffer + offset, length_message_type);
 805471c:	4629      	mov	r1, r5
 805471e:	4430      	add	r0, r6
 8054720:	f7ff ffd9 	bl	80546d6 <_ZN3ros3Msg8varToArrIPhjEEvT_T0_>
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8054724:	462a      	mov	r2, r5
 8054726:	68f9      	ldr	r1, [r7, #12]
 8054728:	1930      	adds	r0, r6, r4
      offset += length_message_type;
 805472a:	4425      	add	r5, r4
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 805472c:	f006 fb53 	bl	805add6 <memcpy>
      uint32_t length_md5sum = strlen(this->md5sum);
 8054730:	6938      	ldr	r0, [r7, #16]
 8054732:	f7ec f891 	bl	8040858 <strlen>
 8054736:	4604      	mov	r4, r0
      varToArr(outbuffer + offset, length_md5sum);
 8054738:	4601      	mov	r1, r0
 805473a:	1970      	adds	r0, r6, r5
      offset += 4;
 805473c:	3504      	adds	r5, #4
      varToArr(outbuffer + offset, length_md5sum);
 805473e:	f7ff ffca 	bl	80546d6 <_ZN3ros3Msg8varToArrIPhjEEvT_T0_>
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8054742:	6939      	ldr	r1, [r7, #16]
 8054744:	4622      	mov	r2, r4
 8054746:	1970      	adds	r0, r6, r5
 8054748:	f006 fb45 	bl	805add6 <memcpy>
      u_buffer_size.real = this->buffer_size;
 805474c:	697b      	ldr	r3, [r7, #20]
      offset += length_md5sum;
 805474e:	1928      	adds	r0, r5, r4
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8054750:	0a19      	lsrs	r1, r3, #8
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8054752:	5433      	strb	r3, [r6, r0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8054754:	4406      	add	r6, r0
    }
 8054756:	3004      	adds	r0, #4
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8054758:	7071      	strb	r1, [r6, #1]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 805475a:	0c19      	lsrs	r1, r3, #16
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 805475c:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 805475e:	70b1      	strb	r1, [r6, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8054760:	70f3      	strb	r3, [r6, #3]
    }
 8054762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08054764 <_ZNK8std_msgs6String9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const override
 8054764:	b570      	push	{r4, r5, r6, lr}
 8054766:	460d      	mov	r5, r1
 8054768:	4606      	mov	r6, r0
      uint32_t length_data = strlen(this->data);
 805476a:	6840      	ldr	r0, [r0, #4]
 805476c:	f7ec f874 	bl	8040858 <strlen>
 8054770:	4604      	mov	r4, r0
      varToArr(outbuffer + offset, length_data);
 8054772:	4601      	mov	r1, r0
 8054774:	4628      	mov	r0, r5
 8054776:	f7ff ffae 	bl	80546d6 <_ZN3ros3Msg8varToArrIPhjEEvT_T0_>
      memcpy(outbuffer + offset, this->data, length_data);
 805477a:	4622      	mov	r2, r4
 805477c:	6871      	ldr	r1, [r6, #4]
 805477e:	1d28      	adds	r0, r5, #4
 8054780:	f006 fb29 	bl	805add6 <memcpy>
    }
 8054784:	1d20      	adds	r0, r4, #4
 8054786:	bd70      	pop	{r4, r5, r6, pc}

08054788 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const override
 8054788:	b570      	push	{r4, r5, r6, lr}
 805478a:	4605      	mov	r5, r0
 805478c:	460c      	mov	r4, r1
      uint32_t length_label = strlen(this->label);
 805478e:	6840      	ldr	r0, [r0, #4]
 8054790:	f7ec f862 	bl	8040858 <strlen>
 8054794:	4606      	mov	r6, r0
      varToArr(outbuffer + offset, length_label);
 8054796:	4601      	mov	r1, r0
 8054798:	4620      	mov	r0, r4
 805479a:	f7ff ff9c 	bl	80546d6 <_ZN3ros3Msg8varToArrIPhjEEvT_T0_>
      memcpy(outbuffer + offset, this->label, length_label);
 805479e:	6869      	ldr	r1, [r5, #4]
 80547a0:	4632      	mov	r2, r6
 80547a2:	1d20      	adds	r0, r4, #4
 80547a4:	f006 fb17 	bl	805add6 <memcpy>
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 80547a8:	68ab      	ldr	r3, [r5, #8]
 80547aa:	19a1      	adds	r1, r4, r6
    }
 80547ac:	f106 000c 	add.w	r0, r6, #12
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 80547b0:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 80547b2:	68ab      	ldr	r3, [r5, #8]
 80547b4:	0a1b      	lsrs	r3, r3, #8
 80547b6:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 80547b8:	896b      	ldrh	r3, [r5, #10]
 80547ba:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 80547bc:	7aeb      	ldrb	r3, [r5, #11]
 80547be:	71cb      	strb	r3, [r1, #7]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 80547c0:	68eb      	ldr	r3, [r5, #12]
 80547c2:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 80547c4:	68eb      	ldr	r3, [r5, #12]
 80547c6:	0a1b      	lsrs	r3, r3, #8
 80547c8:	724b      	strb	r3, [r1, #9]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 80547ca:	89eb      	ldrh	r3, [r5, #14]
 80547cc:	728b      	strb	r3, [r1, #10]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 80547ce:	7beb      	ldrb	r3, [r5, #15]
 80547d0:	72cb      	strb	r3, [r1, #11]
    }
 80547d2:	bd70      	pop	{r4, r5, r6, pc}

080547d4 <_ZNK8std_msgs6Header9serializeEPh>:
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 80547d4:	6843      	ldr	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const override
 80547d6:	b570      	push	{r4, r5, r6, lr}
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 80547d8:	700b      	strb	r3, [r1, #0]
    virtual int serialize(unsigned char *outbuffer) const override
 80547da:	460c      	mov	r4, r1
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 80547dc:	6843      	ldr	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const override
 80547de:	4605      	mov	r5, r0
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 80547e0:	0a1b      	lsrs	r3, r3, #8
 80547e2:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 80547e4:	88c3      	ldrh	r3, [r0, #6]
 80547e6:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 80547e8:	79c3      	ldrb	r3, [r0, #7]
 80547ea:	70cb      	strb	r3, [r1, #3]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80547ec:	6883      	ldr	r3, [r0, #8]
 80547ee:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80547f0:	6883      	ldr	r3, [r0, #8]
 80547f2:	0a1b      	lsrs	r3, r3, #8
 80547f4:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80547f6:	8943      	ldrh	r3, [r0, #10]
 80547f8:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 80547fa:	7ac3      	ldrb	r3, [r0, #11]
 80547fc:	71cb      	strb	r3, [r1, #7]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80547fe:	68c3      	ldr	r3, [r0, #12]
 8054800:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8054802:	68c3      	ldr	r3, [r0, #12]
 8054804:	0a1b      	lsrs	r3, r3, #8
 8054806:	724b      	strb	r3, [r1, #9]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8054808:	89c3      	ldrh	r3, [r0, #14]
 805480a:	728b      	strb	r3, [r1, #10]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 805480c:	7bc3      	ldrb	r3, [r0, #15]
 805480e:	72cb      	strb	r3, [r1, #11]
      uint32_t length_frame_id = strlen(this->frame_id);
 8054810:	6900      	ldr	r0, [r0, #16]
 8054812:	f7ec f821 	bl	8040858 <strlen>
 8054816:	4606      	mov	r6, r0
      varToArr(outbuffer + offset, length_frame_id);
 8054818:	4601      	mov	r1, r0
 805481a:	f104 000c 	add.w	r0, r4, #12
 805481e:	f7ff ff5a 	bl	80546d6 <_ZN3ros3Msg8varToArrIPhjEEvT_T0_>
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8054822:	4632      	mov	r2, r6
 8054824:	6929      	ldr	r1, [r5, #16]
 8054826:	f104 0010 	add.w	r0, r4, #16
 805482a:	f006 fad4 	bl	805add6 <memcpy>
    }
 805482e:	f106 0010 	add.w	r0, r6, #16
 8054832:	bd70      	pop	{r4, r5, r6, pc}

08054834 <_ZNK11sensor_msgs11Temperature9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const override
 8054834:	b538      	push	{r3, r4, r5, lr}
 8054836:	4604      	mov	r4, r0
      offset += this->header.serialize(outbuffer + offset);
 8054838:	3004      	adds	r0, #4
    virtual int serialize(unsigned char *outbuffer) const override
 805483a:	460d      	mov	r5, r1
      offset += this->header.serialize(outbuffer + offset);
 805483c:	f7ff ffca 	bl	80547d4 <_ZNK8std_msgs6Header9serializeEPh>
      u_temperature.real = this->temperature;
 8054840:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
      *(outbuffer + offset + 1) = (u_temperature.base >> (8 * 1)) & 0xFF;
 8054844:	1829      	adds	r1, r5, r0
      *(outbuffer + offset + 0) = (u_temperature.base >> (8 * 0)) & 0xFF;
 8054846:	542a      	strb	r2, [r5, r0]
      *(outbuffer + offset + 1) = (u_temperature.base >> (8 * 1)) & 0xFF;
 8054848:	0a15      	lsrs	r5, r2, #8
      *(outbuffer + offset + 4) = (u_temperature.base >> (8 * 4)) & 0xFF;
 805484a:	710b      	strb	r3, [r1, #4]
    }
 805484c:	3010      	adds	r0, #16
      *(outbuffer + offset + 1) = (u_temperature.base >> (8 * 1)) & 0xFF;
 805484e:	704d      	strb	r5, [r1, #1]
      *(outbuffer + offset + 2) = (u_temperature.base >> (8 * 2)) & 0xFF;
 8054850:	0c15      	lsrs	r5, r2, #16
      *(outbuffer + offset + 3) = (u_temperature.base >> (8 * 3)) & 0xFF;
 8054852:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 2) = (u_temperature.base >> (8 * 2)) & 0xFF;
 8054854:	708d      	strb	r5, [r1, #2]
      *(outbuffer + offset + 3) = (u_temperature.base >> (8 * 3)) & 0xFF;
 8054856:	70ca      	strb	r2, [r1, #3]
      *(outbuffer + offset + 5) = (u_temperature.base >> (8 * 5)) & 0xFF;
 8054858:	0a1a      	lsrs	r2, r3, #8
 805485a:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 6) = (u_temperature.base >> (8 * 6)) & 0xFF;
 805485c:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 7) = (u_temperature.base >> (8 * 7)) & 0xFF;
 805485e:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 6) = (u_temperature.base >> (8 * 6)) & 0xFF;
 8054860:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 7) = (u_temperature.base >> (8 * 7)) & 0xFF;
 8054862:	71cb      	strb	r3, [r1, #7]
      u_variance.real = this->variance;
 8054864:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
      *(outbuffer + offset + 1) = (u_variance.base >> (8 * 1)) & 0xFF;
 8054868:	0a14      	lsrs	r4, r2, #8
      *(outbuffer + offset + 0) = (u_variance.base >> (8 * 0)) & 0xFF;
 805486a:	720a      	strb	r2, [r1, #8]
      *(outbuffer + offset + 4) = (u_variance.base >> (8 * 4)) & 0xFF;
 805486c:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 1) = (u_variance.base >> (8 * 1)) & 0xFF;
 805486e:	724c      	strb	r4, [r1, #9]
      *(outbuffer + offset + 2) = (u_variance.base >> (8 * 2)) & 0xFF;
 8054870:	0c14      	lsrs	r4, r2, #16
      *(outbuffer + offset + 3) = (u_variance.base >> (8 * 3)) & 0xFF;
 8054872:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 2) = (u_variance.base >> (8 * 2)) & 0xFF;
 8054874:	728c      	strb	r4, [r1, #10]
      *(outbuffer + offset + 3) = (u_variance.base >> (8 * 3)) & 0xFF;
 8054876:	72ca      	strb	r2, [r1, #11]
      *(outbuffer + offset + 5) = (u_variance.base >> (8 * 5)) & 0xFF;
 8054878:	0a1a      	lsrs	r2, r3, #8
 805487a:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 6) = (u_variance.base >> (8 * 6)) & 0xFF;
 805487c:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 7) = (u_variance.base >> (8 * 7)) & 0xFF;
 805487e:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 6) = (u_variance.base >> (8 * 6)) & 0xFF;
 8054880:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 7) = (u_variance.base >> (8 * 7)) & 0xFF;
 8054882:	73cb      	strb	r3, [r1, #15]
    }
 8054884:	bd38      	pop	{r3, r4, r5, pc}

08054886 <_ZNK13lexxauto_msgs17BoardTemperatures9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const override
 8054886:	e92d 4620 	stmdb	sp!, {r5, r9, sl, lr}
 805488a:	4681      	mov	r9, r0
 805488c:	468a      	mov	sl, r1
      offset += this->main.serialize(outbuffer + offset);
 805488e:	3008      	adds	r0, #8
 8054890:	f7ff ffd0 	bl	8054834 <_ZNK11sensor_msgs11Temperature9serializeEPh>
 8054894:	4605      	mov	r5, r0
      offset += this->power.serialize(outbuffer + offset);
 8054896:	eb0a 0100 	add.w	r1, sl, r0
 805489a:	f109 0030 	add.w	r0, r9, #48	; 0x30
 805489e:	f7ff ffc9 	bl	8054834 <_ZNK11sensor_msgs11Temperature9serializeEPh>
 80548a2:	4405      	add	r5, r0
      offset += this->linear_actuator_center.serialize(outbuffer + offset);
 80548a4:	f109 0058 	add.w	r0, r9, #88	; 0x58
 80548a8:	eb0a 0105 	add.w	r1, sl, r5
 80548ac:	f7ff ffc2 	bl	8054834 <_ZNK11sensor_msgs11Temperature9serializeEPh>
 80548b0:	4405      	add	r5, r0
      offset += this->linear_actuator_left.serialize(outbuffer + offset);
 80548b2:	f109 0080 	add.w	r0, r9, #128	; 0x80
 80548b6:	eb0a 0105 	add.w	r1, sl, r5
 80548ba:	f7ff ffbb 	bl	8054834 <_ZNK11sensor_msgs11Temperature9serializeEPh>
 80548be:	4405      	add	r5, r0
      offset += this->linear_actuator_right.serialize(outbuffer + offset);
 80548c0:	f109 00a8 	add.w	r0, r9, #168	; 0xa8
 80548c4:	eb0a 0105 	add.w	r1, sl, r5
 80548c8:	f7ff ffb4 	bl	8054834 <_ZNK11sensor_msgs11Temperature9serializeEPh>
 80548cc:	4405      	add	r5, r0
      offset += this->charge_plus.serialize(outbuffer + offset);
 80548ce:	f109 00d0 	add.w	r0, r9, #208	; 0xd0
 80548d2:	eb0a 0105 	add.w	r1, sl, r5
 80548d6:	f7ff ffad 	bl	8054834 <_ZNK11sensor_msgs11Temperature9serializeEPh>
 80548da:	4405      	add	r5, r0
      offset += this->charge_minus.serialize(outbuffer + offset);
 80548dc:	f109 00f8 	add.w	r0, r9, #248	; 0xf8
 80548e0:	eb0a 0105 	add.w	r1, sl, r5
 80548e4:	f7ff ffa6 	bl	8054834 <_ZNK11sensor_msgs11Temperature9serializeEPh>
    }
 80548e8:	4428      	add	r0, r5
 80548ea:	e8bd 8620 	ldmia.w	sp!, {r5, r9, sl, pc}

080548ee <_ZNK11sensor_msgs12BatteryState9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const override
 80548ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80548f2:	4604      	mov	r4, r0
      offset += this->header.serialize(outbuffer + offset);
 80548f4:	3004      	adds	r0, #4
    virtual int serialize(unsigned char *outbuffer) const override
 80548f6:	460e      	mov	r6, r1
      offset += this->header.serialize(outbuffer + offset);
 80548f8:	f7ff ff6c 	bl	80547d4 <_ZNK8std_msgs6Header9serializeEPh>
      u_voltage.real = this->voltage;
 80548fc:	69a2      	ldr	r2, [r4, #24]
      *(outbuffer + offset + 1) = (u_voltage.base >> (8 * 1)) & 0xFF;
 80548fe:	1833      	adds	r3, r6, r0
 8054900:	f1c6 0704 	rsb	r7, r6, #4
 8054904:	0a11      	lsrs	r1, r2, #8
      *(outbuffer + offset + 0) = (u_voltage.base >> (8 * 0)) & 0xFF;
 8054906:	5432      	strb	r2, [r6, r0]
      offset += sizeof(this->cell_voltage_length);
 8054908:	3024      	adds	r0, #36	; 0x24
      *(outbuffer + offset + 1) = (u_voltage.base >> (8 * 1)) & 0xFF;
 805490a:	7059      	strb	r1, [r3, #1]
      *(outbuffer + offset + 2) = (u_voltage.base >> (8 * 2)) & 0xFF;
 805490c:	0c11      	lsrs	r1, r2, #16
      *(outbuffer + offset + 3) = (u_voltage.base >> (8 * 3)) & 0xFF;
 805490e:	0e12      	lsrs	r2, r2, #24
 8054910:	4430      	add	r0, r6
      *(outbuffer + offset + 2) = (u_voltage.base >> (8 * 2)) & 0xFF;
 8054912:	7099      	strb	r1, [r3, #2]
      *(outbuffer + offset + 3) = (u_voltage.base >> (8 * 3)) & 0xFF;
 8054914:	70da      	strb	r2, [r3, #3]
      u_temperature.real = this->temperature;
 8054916:	69e2      	ldr	r2, [r4, #28]
      *(outbuffer + offset + 1) = (u_temperature.base >> (8 * 1)) & 0xFF;
 8054918:	0a11      	lsrs	r1, r2, #8
      *(outbuffer + offset + 0) = (u_temperature.base >> (8 * 0)) & 0xFF;
 805491a:	711a      	strb	r2, [r3, #4]
      *(outbuffer + offset + 1) = (u_temperature.base >> (8 * 1)) & 0xFF;
 805491c:	7159      	strb	r1, [r3, #5]
      *(outbuffer + offset + 2) = (u_temperature.base >> (8 * 2)) & 0xFF;
 805491e:	0c11      	lsrs	r1, r2, #16
      *(outbuffer + offset + 3) = (u_temperature.base >> (8 * 3)) & 0xFF;
 8054920:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 2) = (u_temperature.base >> (8 * 2)) & 0xFF;
 8054922:	7199      	strb	r1, [r3, #6]
      *(outbuffer + offset + 3) = (u_temperature.base >> (8 * 3)) & 0xFF;
 8054924:	71da      	strb	r2, [r3, #7]
      u_current.real = this->current;
 8054926:	6a22      	ldr	r2, [r4, #32]
      *(outbuffer + offset + 1) = (u_current.base >> (8 * 1)) & 0xFF;
 8054928:	0a11      	lsrs	r1, r2, #8
      *(outbuffer + offset + 0) = (u_current.base >> (8 * 0)) & 0xFF;
 805492a:	721a      	strb	r2, [r3, #8]
      *(outbuffer + offset + 1) = (u_current.base >> (8 * 1)) & 0xFF;
 805492c:	7259      	strb	r1, [r3, #9]
      *(outbuffer + offset + 2) = (u_current.base >> (8 * 2)) & 0xFF;
 805492e:	0c11      	lsrs	r1, r2, #16
      *(outbuffer + offset + 3) = (u_current.base >> (8 * 3)) & 0xFF;
 8054930:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 2) = (u_current.base >> (8 * 2)) & 0xFF;
 8054932:	7299      	strb	r1, [r3, #10]
      *(outbuffer + offset + 3) = (u_current.base >> (8 * 3)) & 0xFF;
 8054934:	72da      	strb	r2, [r3, #11]
      u_charge.real = this->charge;
 8054936:	6a62      	ldr	r2, [r4, #36]	; 0x24
      *(outbuffer + offset + 1) = (u_charge.base >> (8 * 1)) & 0xFF;
 8054938:	0a11      	lsrs	r1, r2, #8
      *(outbuffer + offset + 0) = (u_charge.base >> (8 * 0)) & 0xFF;
 805493a:	731a      	strb	r2, [r3, #12]
      *(outbuffer + offset + 1) = (u_charge.base >> (8 * 1)) & 0xFF;
 805493c:	7359      	strb	r1, [r3, #13]
      *(outbuffer + offset + 2) = (u_charge.base >> (8 * 2)) & 0xFF;
 805493e:	0c11      	lsrs	r1, r2, #16
      *(outbuffer + offset + 3) = (u_charge.base >> (8 * 3)) & 0xFF;
 8054940:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 2) = (u_charge.base >> (8 * 2)) & 0xFF;
 8054942:	7399      	strb	r1, [r3, #14]
      *(outbuffer + offset + 3) = (u_charge.base >> (8 * 3)) & 0xFF;
 8054944:	73da      	strb	r2, [r3, #15]
      u_capacity.real = this->capacity;
 8054946:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      *(outbuffer + offset + 1) = (u_capacity.base >> (8 * 1)) & 0xFF;
 8054948:	0a11      	lsrs	r1, r2, #8
      *(outbuffer + offset + 0) = (u_capacity.base >> (8 * 0)) & 0xFF;
 805494a:	741a      	strb	r2, [r3, #16]
      *(outbuffer + offset + 1) = (u_capacity.base >> (8 * 1)) & 0xFF;
 805494c:	7459      	strb	r1, [r3, #17]
      *(outbuffer + offset + 2) = (u_capacity.base >> (8 * 2)) & 0xFF;
 805494e:	0c11      	lsrs	r1, r2, #16
      *(outbuffer + offset + 3) = (u_capacity.base >> (8 * 3)) & 0xFF;
 8054950:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 2) = (u_capacity.base >> (8 * 2)) & 0xFF;
 8054952:	7499      	strb	r1, [r3, #18]
      *(outbuffer + offset + 3) = (u_capacity.base >> (8 * 3)) & 0xFF;
 8054954:	74da      	strb	r2, [r3, #19]
      u_design_capacity.real = this->design_capacity;
 8054956:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      *(outbuffer + offset + 1) = (u_design_capacity.base >> (8 * 1)) & 0xFF;
 8054958:	0a11      	lsrs	r1, r2, #8
      *(outbuffer + offset + 0) = (u_design_capacity.base >> (8 * 0)) & 0xFF;
 805495a:	751a      	strb	r2, [r3, #20]
      *(outbuffer + offset + 1) = (u_design_capacity.base >> (8 * 1)) & 0xFF;
 805495c:	7559      	strb	r1, [r3, #21]
      *(outbuffer + offset + 2) = (u_design_capacity.base >> (8 * 2)) & 0xFF;
 805495e:	0c11      	lsrs	r1, r2, #16
      *(outbuffer + offset + 3) = (u_design_capacity.base >> (8 * 3)) & 0xFF;
 8054960:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 2) = (u_design_capacity.base >> (8 * 2)) & 0xFF;
 8054962:	7599      	strb	r1, [r3, #22]
      *(outbuffer + offset + 3) = (u_design_capacity.base >> (8 * 3)) & 0xFF;
 8054964:	75da      	strb	r2, [r3, #23]
      u_percentage.real = this->percentage;
 8054966:	6b22      	ldr	r2, [r4, #48]	; 0x30
      *(outbuffer + offset + 1) = (u_percentage.base >> (8 * 1)) & 0xFF;
 8054968:	0a11      	lsrs	r1, r2, #8
      *(outbuffer + offset + 0) = (u_percentage.base >> (8 * 0)) & 0xFF;
 805496a:	761a      	strb	r2, [r3, #24]
      *(outbuffer + offset + 1) = (u_percentage.base >> (8 * 1)) & 0xFF;
 805496c:	7659      	strb	r1, [r3, #25]
      *(outbuffer + offset + 2) = (u_percentage.base >> (8 * 2)) & 0xFF;
 805496e:	0c11      	lsrs	r1, r2, #16
      *(outbuffer + offset + 3) = (u_percentage.base >> (8 * 3)) & 0xFF;
 8054970:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 2) = (u_percentage.base >> (8 * 2)) & 0xFF;
 8054972:	7699      	strb	r1, [r3, #26]
      *(outbuffer + offset + 3) = (u_percentage.base >> (8 * 3)) & 0xFF;
 8054974:	76da      	strb	r2, [r3, #27]
      *(outbuffer + offset + 0) = (this->power_supply_status >> (8 * 0)) & 0xFF;
 8054976:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 805497a:	771a      	strb	r2, [r3, #28]
      *(outbuffer + offset + 0) = (this->power_supply_health >> (8 * 0)) & 0xFF;
 805497c:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8054980:	775a      	strb	r2, [r3, #29]
      *(outbuffer + offset + 0) = (this->power_supply_technology >> (8 * 0)) & 0xFF;
 8054982:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 8054986:	779a      	strb	r2, [r3, #30]
      *(outbuffer + offset + 0) = (u_present.base >> (8 * 0)) & 0xFF;
 8054988:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 805498c:	77da      	strb	r2, [r3, #31]
      *(outbuffer + offset + 0) = (this->cell_voltage_length >> (8 * 0)) & 0xFF;
 805498e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8054990:	f883 2020 	strb.w	r2, [r3, #32]
      *(outbuffer + offset + 1) = (this->cell_voltage_length >> (8 * 1)) & 0xFF;
 8054994:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8054996:	0a12      	lsrs	r2, r2, #8
 8054998:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      *(outbuffer + offset + 2) = (this->cell_voltage_length >> (8 * 2)) & 0xFF;
 805499c:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 805499e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      *(outbuffer + offset + 3) = (this->cell_voltage_length >> (8 * 3)) & 0xFF;
 80549a2:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
 80549a6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
      for( uint32_t i = 0; i < cell_voltage_length; i++){
 80549aa:	2200      	movs	r2, #0
 80549ac:	6ba5      	ldr	r5, [r4, #56]	; 0x38
      *(outbuffer + offset + 0) = (u_cell_voltagei.base >> (8 * 0)) & 0xFF;
 80549ae:	4680      	mov	r8, r0
 80549b0:	f100 0e01 	add.w	lr, r0, #1
 80549b4:	f100 0c02 	add.w	ip, r0, #2
      for( uint32_t i = 0; i < cell_voltage_length; i++){
 80549b8:	4295      	cmp	r5, r2
 80549ba:	f100 0103 	add.w	r1, r0, #3
 80549be:	eb00 0307 	add.w	r3, r0, r7
 80549c2:	f100 0004 	add.w	r0, r0, #4
 80549c6:	d90f      	bls.n	80549e8 <_ZNK11sensor_msgs12BatteryState9serializeEPh+0xfa>
      u_cell_voltagei.real = this->cell_voltage[i];
 80549c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80549ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      for( uint32_t i = 0; i < cell_voltage_length; i++){
 80549ce:	3201      	adds	r2, #1
      *(outbuffer + offset + 1) = (u_cell_voltagei.base >> (8 * 1)) & 0xFF;
 80549d0:	0a19      	lsrs	r1, r3, #8
      *(outbuffer + offset + 0) = (u_cell_voltagei.base >> (8 * 0)) & 0xFF;
 80549d2:	f800 3c04 	strb.w	r3, [r0, #-4]
      *(outbuffer + offset + 1) = (u_cell_voltagei.base >> (8 * 1)) & 0xFF;
 80549d6:	f800 1c03 	strb.w	r1, [r0, #-3]
      *(outbuffer + offset + 2) = (u_cell_voltagei.base >> (8 * 2)) & 0xFF;
 80549da:	0c19      	lsrs	r1, r3, #16
      *(outbuffer + offset + 3) = (u_cell_voltagei.base >> (8 * 3)) & 0xFF;
 80549dc:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_cell_voltagei.base >> (8 * 2)) & 0xFF;
 80549de:	f800 1c02 	strb.w	r1, [r0, #-2]
      *(outbuffer + offset + 3) = (u_cell_voltagei.base >> (8 * 3)) & 0xFF;
 80549e2:	f800 3c01 	strb.w	r3, [r0, #-1]
      for( uint32_t i = 0; i < cell_voltage_length; i++){
 80549e6:	e7e1      	b.n	80549ac <_ZNK11sensor_msgs12BatteryState9serializeEPh+0xbe>
      *(outbuffer + offset + 0) = (this->cell_temperature_length >> (8 * 0)) & 0xFF;
 80549e8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80549ea:	4433      	add	r3, r6
 80549ec:	f888 2000 	strb.w	r2, [r8]
      *(outbuffer + offset + 1) = (this->cell_temperature_length >> (8 * 1)) & 0xFF;
 80549f0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80549f2:	0a12      	lsrs	r2, r2, #8
 80549f4:	f88e 2000 	strb.w	r2, [lr]
      *(outbuffer + offset + 2) = (this->cell_temperature_length >> (8 * 2)) & 0xFF;
 80549f8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80549fc:	f88c 2000 	strb.w	r2, [ip]
      *(outbuffer + offset + 3) = (this->cell_temperature_length >> (8 * 3)) & 0xFF;
 8054a00:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 8054a04:	700a      	strb	r2, [r1, #0]
      for( uint32_t i = 0; i < cell_temperature_length; i++){
 8054a06:	2100      	movs	r1, #0
 8054a08:	6c62      	ldr	r2, [r4, #68]	; 0x44
      *(outbuffer + offset + 0) = (u_cell_temperaturei.base >> (8 * 0)) & 0xFF;
 8054a0a:	4699      	mov	r9, r3
 8054a0c:	eb03 0807 	add.w	r8, r3, r7
      for( uint32_t i = 0; i < cell_temperature_length; i++){
 8054a10:	3304      	adds	r3, #4
 8054a12:	428a      	cmp	r2, r1
 8054a14:	d90f      	bls.n	8054a36 <_ZNK11sensor_msgs12BatteryState9serializeEPh+0x148>
      u_cell_temperaturei.real = this->cell_temperature[i];
 8054a16:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8054a18:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
      for( uint32_t i = 0; i < cell_temperature_length; i++){
 8054a1c:	3101      	adds	r1, #1
      *(outbuffer + offset + 1) = (u_cell_temperaturei.base >> (8 * 1)) & 0xFF;
 8054a1e:	0a10      	lsrs	r0, r2, #8
      *(outbuffer + offset + 0) = (u_cell_temperaturei.base >> (8 * 0)) & 0xFF;
 8054a20:	f803 2c04 	strb.w	r2, [r3, #-4]
      *(outbuffer + offset + 1) = (u_cell_temperaturei.base >> (8 * 1)) & 0xFF;
 8054a24:	f803 0c03 	strb.w	r0, [r3, #-3]
      *(outbuffer + offset + 2) = (u_cell_temperaturei.base >> (8 * 2)) & 0xFF;
 8054a28:	0c10      	lsrs	r0, r2, #16
      *(outbuffer + offset + 3) = (u_cell_temperaturei.base >> (8 * 3)) & 0xFF;
 8054a2a:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 2) = (u_cell_temperaturei.base >> (8 * 2)) & 0xFF;
 8054a2c:	f803 0c02 	strb.w	r0, [r3, #-2]
      *(outbuffer + offset + 3) = (u_cell_temperaturei.base >> (8 * 3)) & 0xFF;
 8054a30:	f803 2c01 	strb.w	r2, [r3, #-1]
      for( uint32_t i = 0; i < cell_temperature_length; i++){
 8054a34:	e7e8      	b.n	8054a08 <_ZNK11sensor_msgs12BatteryState9serializeEPh+0x11a>
      uint32_t length_location = strlen(this->location);
 8054a36:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8054a38:	f7eb ff0e 	bl	8040858 <strlen>
 8054a3c:	4605      	mov	r5, r0
      varToArr(outbuffer + offset, length_location);
 8054a3e:	4601      	mov	r1, r0
 8054a40:	4648      	mov	r0, r9
 8054a42:	f7ff fe48 	bl	80546d6 <_ZN3ros3Msg8varToArrIPhjEEvT_T0_>
      memcpy(outbuffer + offset, this->location, length_location);
 8054a46:	462a      	mov	r2, r5
 8054a48:	6d21      	ldr	r1, [r4, #80]	; 0x50
      offset += length_location;
 8054a4a:	4445      	add	r5, r8
      memcpy(outbuffer + offset, this->location, length_location);
 8054a4c:	eb06 0008 	add.w	r0, r6, r8
 8054a50:	f006 f9c1 	bl	805add6 <memcpy>
      uint32_t length_serial_number = strlen(this->serial_number);
 8054a54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8054a56:	f7eb feff 	bl	8040858 <strlen>
 8054a5a:	4607      	mov	r7, r0
      varToArr(outbuffer + offset, length_serial_number);
 8054a5c:	4601      	mov	r1, r0
 8054a5e:	1970      	adds	r0, r6, r5
      offset += 4;
 8054a60:	3504      	adds	r5, #4
      varToArr(outbuffer + offset, length_serial_number);
 8054a62:	f7ff fe38 	bl	80546d6 <_ZN3ros3Msg8varToArrIPhjEEvT_T0_>
      memcpy(outbuffer + offset, this->serial_number, length_serial_number);
 8054a66:	463a      	mov	r2, r7
 8054a68:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8054a6a:	1970      	adds	r0, r6, r5
 8054a6c:	f006 f9b3 	bl	805add6 <memcpy>
    }
 8054a70:	19e8      	adds	r0, r5, r7
 8054a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08054a76 <_ZNK13lexxauto_msgs7Battery9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const override
 8054a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8054a7a:	4605      	mov	r5, r0
      offset += this->state.serialize(outbuffer + offset);
 8054a7c:	3004      	adds	r0, #4
    virtual int serialize(unsigned char *outbuffer) const override
 8054a7e:	460e      	mov	r6, r1
      offset += this->state.serialize(outbuffer + offset);
 8054a80:	f7ff ff35 	bl	80548ee <_ZNK11sensor_msgs12BatteryState9serializeEPh>
      *(outbuffer + offset + 0) = (this->temps_length >> (8 * 0)) & 0xFF;
 8054a84:	6deb      	ldr	r3, [r5, #92]	; 0x5c
      offset += this->state.serialize(outbuffer + offset);
 8054a86:	4604      	mov	r4, r0
      for( uint32_t i = 0; i < temps_length; i++){
 8054a88:	2700      	movs	r7, #0
      offset += this->temps[i].serialize(outbuffer + offset);
 8054a8a:	f04f 0828 	mov.w	r8, #40	; 0x28
      *(outbuffer + offset + 0) = (this->temps_length >> (8 * 0)) & 0xFF;
 8054a8e:	5433      	strb	r3, [r6, r0]
      *(outbuffer + offset + 1) = (this->temps_length >> (8 * 1)) & 0xFF;
 8054a90:	1833      	adds	r3, r6, r0
 8054a92:	6dea      	ldr	r2, [r5, #92]	; 0x5c
      offset += sizeof(this->temps_length);
 8054a94:	3404      	adds	r4, #4
      *(outbuffer + offset + 1) = (this->temps_length >> (8 * 1)) & 0xFF;
 8054a96:	0a12      	lsrs	r2, r2, #8
 8054a98:	705a      	strb	r2, [r3, #1]
      *(outbuffer + offset + 2) = (this->temps_length >> (8 * 2)) & 0xFF;
 8054a9a:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
 8054a9e:	709a      	strb	r2, [r3, #2]
      *(outbuffer + offset + 3) = (this->temps_length >> (8 * 3)) & 0xFF;
 8054aa0:	f895 205f 	ldrb.w	r2, [r5, #95]	; 0x5f
 8054aa4:	70da      	strb	r2, [r3, #3]
      for( uint32_t i = 0; i < temps_length; i++){
 8054aa6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
      offset += this->temps[i].serialize(outbuffer + offset);
 8054aa8:	1931      	adds	r1, r6, r4
      for( uint32_t i = 0; i < temps_length; i++){
 8054aaa:	42bb      	cmp	r3, r7
 8054aac:	d90a      	bls.n	8054ac4 <_ZNK13lexxauto_msgs7Battery9serializeEPh+0x4e>
      offset += this->temps[i].serialize(outbuffer + offset);
 8054aae:	fb08 f307 	mul.w	r3, r8, r7
 8054ab2:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
      for( uint32_t i = 0; i < temps_length; i++){
 8054ab6:	3701      	adds	r7, #1
      offset += this->temps[i].serialize(outbuffer + offset);
 8054ab8:	58c2      	ldr	r2, [r0, r3]
 8054aba:	4418      	add	r0, r3
 8054abc:	6812      	ldr	r2, [r2, #0]
 8054abe:	4790      	blx	r2
 8054ac0:	4404      	add	r4, r0
      for( uint32_t i = 0; i < temps_length; i++){
 8054ac2:	e7f0      	b.n	8054aa6 <_ZNK13lexxauto_msgs7Battery9serializeEPh+0x30>
      *(outbuffer + offset + 0) = (this->state_of_health >> (8 * 0)) & 0xFF;
 8054ac4:	f895 308c 	ldrb.w	r3, [r5, #140]	; 0x8c
    }
 8054ac8:	1c60      	adds	r0, r4, #1
      *(outbuffer + offset + 0) = (this->state_of_health >> (8 * 0)) & 0xFF;
 8054aca:	700b      	strb	r3, [r1, #0]
    }
 8054acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08054ad0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8054ad0:	6843      	ldr	r3, [r0, #4]
 8054ad2:	1d4a      	adds	r2, r1, #5
    virtual int serialize(unsigned char *outbuffer) const override
 8054ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8054ad8:	700b      	strb	r3, [r1, #0]
    virtual int serialize(unsigned char *outbuffer) const override
 8054ada:	460d      	mov	r5, r1
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8054adc:	6843      	ldr	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const override
 8054ade:	4604      	mov	r4, r0
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8054ae0:	0a1b      	lsrs	r3, r3, #8
 8054ae2:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8054ae4:	88c3      	ldrh	r3, [r0, #6]
 8054ae6:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8054ae8:	79c3      	ldrb	r3, [r0, #7]
 8054aea:	70cb      	strb	r3, [r1, #3]
      for( uint32_t i = 0; i < ints_length; i++){
 8054aec:	2100      	movs	r1, #0
 8054aee:	6867      	ldr	r7, [r4, #4]
 8054af0:	008b      	lsls	r3, r1, #2
 8054af2:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8054af6:	4694      	mov	ip, r2
      for( uint32_t i = 0; i < ints_length; i++){
 8054af8:	428f      	cmp	r7, r1
 8054afa:	f102 0601 	add.w	r6, r2, #1
 8054afe:	f102 0002 	add.w	r0, r2, #2
 8054b02:	f103 0308 	add.w	r3, r3, #8
 8054b06:	f102 0204 	add.w	r2, r2, #4
 8054b0a:	d90f      	bls.n	8054b2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      u_intsi.real = this->ints[i];
 8054b0c:	68e3      	ldr	r3, [r4, #12]
 8054b0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 8054b12:	3101      	adds	r1, #1
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8054b14:	0a18      	lsrs	r0, r3, #8
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8054b16:	f802 3c05 	strb.w	r3, [r2, #-5]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8054b1a:	f802 0c04 	strb.w	r0, [r2, #-4]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8054b1e:	0c18      	lsrs	r0, r3, #16
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8054b20:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8054b22:	f802 0c03 	strb.w	r0, [r2, #-3]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8054b26:	f802 3c02 	strb.w	r3, [r2, #-2]
      for( uint32_t i = 0; i < ints_length; i++){
 8054b2a:	e7e0      	b.n	8054aee <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1e>
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8054b2c:	6922      	ldr	r2, [r4, #16]
 8054b2e:	442b      	add	r3, r5
      for( uint32_t i = 0; i < floats_length; i++){
 8054b30:	2100      	movs	r1, #0
 8054b32:	f1c5 0804 	rsb	r8, r5, #4
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8054b36:	f88e 2000 	strb.w	r2, [lr]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8054b3a:	6922      	ldr	r2, [r4, #16]
 8054b3c:	0a12      	lsrs	r2, r2, #8
 8054b3e:	f88c 2000 	strb.w	r2, [ip]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8054b42:	8a62      	ldrh	r2, [r4, #18]
 8054b44:	7032      	strb	r2, [r6, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8054b46:	7ce2      	ldrb	r2, [r4, #19]
 8054b48:	7002      	strb	r2, [r0, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8054b4a:	6926      	ldr	r6, [r4, #16]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8054b4c:	469e      	mov	lr, r3
 8054b4e:	f103 0c01 	add.w	ip, r3, #1
 8054b52:	1c98      	adds	r0, r3, #2
      for( uint32_t i = 0; i < floats_length; i++){
 8054b54:	428e      	cmp	r6, r1
 8054b56:	f103 0203 	add.w	r2, r3, #3
 8054b5a:	eb08 0703 	add.w	r7, r8, r3
 8054b5e:	f103 0304 	add.w	r3, r3, #4
 8054b62:	d90f      	bls.n	8054b84 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      u_floatsi.real = this->floats[i];
 8054b64:	69a2      	ldr	r2, [r4, #24]
 8054b66:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 8054b6a:	3101      	adds	r1, #1
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8054b6c:	0a10      	lsrs	r0, r2, #8
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8054b6e:	f803 2c04 	strb.w	r2, [r3, #-4]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8054b72:	f803 0c03 	strb.w	r0, [r3, #-3]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8054b76:	0c10      	lsrs	r0, r2, #16
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8054b78:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8054b7a:	f803 0c02 	strb.w	r0, [r3, #-2]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8054b7e:	f803 2c01 	strb.w	r2, [r3, #-1]
      for( uint32_t i = 0; i < floats_length; i++){
 8054b82:	e7e2      	b.n	8054b4a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x7a>
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8054b84:	69e3      	ldr	r3, [r4, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8054b86:	f04f 0800 	mov.w	r8, #0
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8054b8a:	f88e 3000 	strb.w	r3, [lr]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8054b8e:	69e3      	ldr	r3, [r4, #28]
 8054b90:	0a1b      	lsrs	r3, r3, #8
 8054b92:	f88c 3000 	strb.w	r3, [ip]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8054b96:	8be3      	ldrh	r3, [r4, #30]
 8054b98:	7003      	strb	r3, [r0, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8054b9a:	7fe3      	ldrb	r3, [r4, #31]
 8054b9c:	7013      	strb	r3, [r2, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8054b9e:	69e3      	ldr	r3, [r4, #28]
 8054ba0:	4543      	cmp	r3, r8
 8054ba2:	d915      	bls.n	8054bd0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x100>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8054ba4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8054ba6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8054baa:	f7eb fe55 	bl	8040858 <strlen>
 8054bae:	4606      	mov	r6, r0
      varToArr(outbuffer + offset, length_stringsi);
 8054bb0:	4601      	mov	r1, r0
 8054bb2:	19e8      	adds	r0, r5, r7
 8054bb4:	f7ff fd8f 	bl	80546d6 <_ZN3ros3Msg8varToArrIPhjEEvT_T0_>
      offset += 4;
 8054bb8:	3704      	adds	r7, #4
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8054bba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8054bbc:	4632      	mov	r2, r6
 8054bbe:	19e8      	adds	r0, r5, r7
      offset += length_stringsi;
 8054bc0:	4437      	add	r7, r6
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8054bc2:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 8054bc6:	f108 0801 	add.w	r8, r8, #1
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8054bca:	f006 f904 	bl	805add6 <memcpy>
      for( uint32_t i = 0; i < strings_length; i++){
 8054bce:	e7e6      	b.n	8054b9e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xce>
    }
 8054bd0:	4638      	mov	r0, r7
 8054bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08054bd6 <_ZNK14rosserial_msgs3Log9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const override
 8054bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8054bd8:	460f      	mov	r7, r1
 8054bda:	7903      	ldrb	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const override
 8054bdc:	4605      	mov	r5, r0
 8054bde:	460e      	mov	r6, r1
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8054be0:	f807 3b01 	strb.w	r3, [r7], #1
      uint32_t length_msg = strlen(this->msg);
 8054be4:	6880      	ldr	r0, [r0, #8]
 8054be6:	f7eb fe37 	bl	8040858 <strlen>
 8054bea:	4604      	mov	r4, r0
      varToArr(outbuffer + offset, length_msg);
 8054bec:	4601      	mov	r1, r0
 8054bee:	4638      	mov	r0, r7
 8054bf0:	f7ff fd71 	bl	80546d6 <_ZN3ros3Msg8varToArrIPhjEEvT_T0_>
      memcpy(outbuffer + offset, this->msg, length_msg);
 8054bf4:	4622      	mov	r2, r4
 8054bf6:	68a9      	ldr	r1, [r5, #8]
 8054bf8:	1d70      	adds	r0, r6, #5
 8054bfa:	f006 f8ec 	bl	805add6 <memcpy>
    }
 8054bfe:	1d60      	adds	r0, r4, #5
 8054c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08054c02 <_ZN3ros3Msg8arrToVarIjPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
  {
    var = 0;
 8054c02:	2300      	movs	r3, #0
 8054c04:	3901      	subs	r1, #1
  static void arrToVar(V& var, const A arr)
 8054c06:	b510      	push	{r4, lr}
    var = 0;
 8054c08:	6003      	str	r3, [r0, #0]
    for (size_t i = 0; i < sizeof(V); i++)
      var |= (arr[i] << (8 * i));
 8054c0a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8054c0e:	fa02 f403 	lsl.w	r4, r2, r3
 8054c12:	6802      	ldr	r2, [r0, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8054c14:	3308      	adds	r3, #8
      var |= (arr[i] << (8 * i));
 8054c16:	4322      	orrs	r2, r4
    for (size_t i = 0; i < sizeof(V); i++)
 8054c18:	2b20      	cmp	r3, #32
      var |= (arr[i] << (8 * i));
 8054c1a:	6002      	str	r2, [r0, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8054c1c:	d1f5      	bne.n	8054c0a <_ZN3ros3Msg8arrToVarIjPhEEvRT_T0_+0x8>
  }
 8054c1e:	bd10      	pop	{r4, pc}

08054c20 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer) override
 8054c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8054c22:	460d      	mov	r5, r1
 8054c24:	4604      	mov	r4, r0
      arrToVar(length_label, (inbuffer + offset));
 8054c26:	a801      	add	r0, sp, #4
 8054c28:	f7ff ffeb 	bl	8054c02 <_ZN3ros3Msg8arrToVarIjPhEEvRT_T0_>
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8054c2c:	1cee      	adds	r6, r5, #3
 8054c2e:	9801      	ldr	r0, [sp, #4]
 8054c30:	f1c5 0701 	rsb	r7, r5, #1
 8054c34:	4633      	mov	r3, r6
 8054c36:	1d01      	adds	r1, r0, #4
 8054c38:	18fa      	adds	r2, r7, r3
 8054c3a:	4291      	cmp	r1, r2
 8054c3c:	d903      	bls.n	8054c46 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x26>
          inbuffer[k-1]=inbuffer[k];
 8054c3e:	785a      	ldrb	r2, [r3, #1]
 8054c40:	f803 2b01 	strb.w	r2, [r3], #1
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8054c44:	e7f8      	b.n	8054c38 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x18>
      inbuffer[offset+length_label-1]=0;
 8054c46:	182a      	adds	r2, r5, r0
 8054c48:	2300      	movs	r3, #0
    }
 8054c4a:	300c      	adds	r0, #12
      inbuffer[offset+length_label-1]=0;
 8054c4c:	70d3      	strb	r3, [r2, #3]
      this->label = (char *)(inbuffer + offset-1);
 8054c4e:	6066      	str	r6, [r4, #4]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8054c50:	5c6b      	ldrb	r3, [r5, r1]
 8054c52:	60a3      	str	r3, [r4, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8054c54:	7951      	ldrb	r1, [r2, #5]
 8054c56:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8054c5a:	60a3      	str	r3, [r4, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8054c5c:	7991      	ldrb	r1, [r2, #6]
 8054c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8054c62:	60a3      	str	r3, [r4, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8054c64:	79d1      	ldrb	r1, [r2, #7]
 8054c66:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8054c6a:	60a3      	str	r3, [r4, #8]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8054c6c:	7a13      	ldrb	r3, [r2, #8]
 8054c6e:	60e3      	str	r3, [r4, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8054c70:	7a51      	ldrb	r1, [r2, #9]
 8054c72:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8054c76:	60e3      	str	r3, [r4, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8054c78:	7a91      	ldrb	r1, [r2, #10]
 8054c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8054c7e:	60e3      	str	r3, [r4, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8054c80:	7ad2      	ldrb	r2, [r2, #11]
 8054c82:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8054c86:	60e3      	str	r3, [r4, #12]
    }
 8054c88:	b003      	add	sp, #12
 8054c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08054c8c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer) override
 8054c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      if(dim_lengthT > dim_length)
 8054c90:	6843      	ldr	r3, [r0, #4]
    virtual int deserialize(unsigned char *inbuffer) override
 8054c92:	4604      	mov	r4, r0
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8054c94:	680d      	ldr	r5, [r1, #0]
    virtual int deserialize(unsigned char *inbuffer) override
 8054c96:	460f      	mov	r7, r1
      if(dim_lengthT > dim_length)
 8054c98:	42ab      	cmp	r3, r5
 8054c9a:	d204      	bcs.n	8054ca6 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x1a>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8054c9c:	0129      	lsls	r1, r5, #4
 8054c9e:	6980      	ldr	r0, [r0, #24]
 8054ca0:	f7fe f838 	bl	8052d14 <realloc>
 8054ca4:	61a0      	str	r0, [r4, #24]
      dim_length = dim_lengthT;
 8054ca6:	6065      	str	r5, [r4, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8054ca8:	2600      	movs	r6, #0
      offset += sizeof(this->dim_length);
 8054caa:	2504      	movs	r5, #4
      offset += this->st_dim.deserialize(inbuffer + offset);
 8054cac:	f104 0808 	add.w	r8, r4, #8
      for( uint32_t i = 0; i < dim_length; i++){
 8054cb0:	6863      	ldr	r3, [r4, #4]
      offset += this->st_dim.deserialize(inbuffer + offset);
 8054cb2:	1979      	adds	r1, r7, r5
      for( uint32_t i = 0; i < dim_length; i++){
 8054cb4:	42b3      	cmp	r3, r6
 8054cb6:	d90c      	bls.n	8054cd2 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x46>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8054cb8:	4640      	mov	r0, r8
 8054cba:	f7ff ffb1 	bl	8054c20 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8054cbe:	4405      	add	r5, r0
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8054cc0:	69a0      	ldr	r0, [r4, #24]
 8054cc2:	2210      	movs	r2, #16
 8054cc4:	4641      	mov	r1, r8
 8054cc6:	eb00 1006 	add.w	r0, r0, r6, lsl #4
      for( uint32_t i = 0; i < dim_length; i++){
 8054cca:	3601      	adds	r6, #1
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8054ccc:	f006 f883 	bl	805add6 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8054cd0:	e7ee      	b.n	8054cb0 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x24>
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8054cd2:	780b      	ldrb	r3, [r1, #0]
    }
 8054cd4:	1d28      	adds	r0, r5, #4
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8054cd6:	61e3      	str	r3, [r4, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8054cd8:	784a      	ldrb	r2, [r1, #1]
 8054cda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8054cde:	61e3      	str	r3, [r4, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8054ce0:	788a      	ldrb	r2, [r1, #2]
 8054ce2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8054ce6:	61e3      	str	r3, [r4, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8054ce8:	78ca      	ldrb	r2, [r1, #3]
 8054cea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8054cee:	61e3      	str	r3, [r4, #28]
    }
 8054cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08054cf4 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer) override
 8054cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8054cf8:	460f      	mov	r7, r1
 8054cfa:	4604      	mov	r4, r0
      offset += this->layout.deserialize(inbuffer + offset);
 8054cfc:	3004      	adds	r0, #4
 8054cfe:	f7ff ffc5 	bl	8054c8c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8054d02:	183b      	adds	r3, r7, r0
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8054d04:	5c39      	ldrb	r1, [r7, r0]
      offset += sizeof(this->data_length);
 8054d06:	1d06      	adds	r6, r0, #4
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8054d08:	789d      	ldrb	r5, [r3, #2]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8054d0a:	785a      	ldrb	r2, [r3, #1]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8054d0c:	042d      	lsls	r5, r5, #16
 8054d0e:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8054d12:	430d      	orrs	r5, r1
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8054d14:	78d9      	ldrb	r1, [r3, #3]
      if(data_lengthT > data_length)
 8054d16:	6a63      	ldr	r3, [r4, #36]	; 0x24
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8054d18:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
      if(data_lengthT > data_length)
 8054d1c:	42ab      	cmp	r3, r5
 8054d1e:	d204      	bcs.n	8054d2a <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0x36>
        this->data = (uint8_t*)realloc(this->data, data_lengthT * sizeof(uint8_t));
 8054d20:	4629      	mov	r1, r5
 8054d22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8054d24:	f7fd fff6 	bl	8052d14 <realloc>
 8054d28:	62e0      	str	r0, [r4, #44]	; 0x2c
      data_length = data_lengthT;
 8054d2a:	6265      	str	r5, [r4, #36]	; 0x24
        memcpy( &(this->data[i]), &(this->st_data), sizeof(uint8_t));
 8054d2c:	f104 0828 	add.w	r8, r4, #40	; 0x28
      for( uint32_t i = 0; i < data_length; i++){
 8054d30:	2500      	movs	r5, #0
 8054d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8054d34:	42ab      	cmp	r3, r5
 8054d36:	d90b      	bls.n	8054d50 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0x5c>
      this->st_data =  ((uint8_t) (*(inbuffer + offset)));
 8054d38:	5dbb      	ldrb	r3, [r7, r6]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(uint8_t));
 8054d3a:	2201      	movs	r2, #1
 8054d3c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8054d3e:	4641      	mov	r1, r8
      this->st_data =  ((uint8_t) (*(inbuffer + offset)));
 8054d40:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
      offset += sizeof(this->st_data);
 8054d44:	3601      	adds	r6, #1
        memcpy( &(this->data[i]), &(this->st_data), sizeof(uint8_t));
 8054d46:	4428      	add	r0, r5
      for( uint32_t i = 0; i < data_length; i++){
 8054d48:	3501      	adds	r5, #1
        memcpy( &(this->data[i]), &(this->st_data), sizeof(uint8_t));
 8054d4a:	f006 f844 	bl	805add6 <memcpy>
      for( uint32_t i = 0; i < data_length; i++){
 8054d4e:	e7f0      	b.n	8054d32 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0x3e>
    }
 8054d50:	4630      	mov	r0, r6
 8054d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08054d56 <_ZN3ros10SubscriberIN8std_msgs15UInt8MultiArrayEN8lexxhard7ros_dfuEE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8054d56:	b570      	push	{r4, r5, r6, lr}
    msg.deserialize(data);
 8054d58:	f100 050c 	add.w	r5, r0, #12
  virtual void callback(unsigned char* data) override
 8054d5c:	4604      	mov	r4, r0
    msg.deserialize(data);
 8054d5e:	4628      	mov	r0, r5
 8054d60:	f7ff ffc8 	bl	8054cf4 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh>
    (obj_->*cb_)(msg);
 8054d64:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8054d66:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8054d68:	f012 0f01 	tst.w	r2, #1
 8054d6c:	ea4f 0262 	mov.w	r2, r2, asr #1
 8054d70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8054d72:	bf18      	it	ne
 8054d74:	5881      	ldrne	r1, [r0, r2]
 8054d76:	4410      	add	r0, r2
 8054d78:	bf18      	it	ne
 8054d7a:	58cb      	ldrne	r3, [r1, r3]
 8054d7c:	4629      	mov	r1, r5
  }
 8054d7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (obj_->*cb_)(msg);
 8054d82:	4718      	bx	r3

08054d84 <_ZN8std_msgs14ByteMultiArray11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer) override
 8054d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8054d88:	460f      	mov	r7, r1
 8054d8a:	4604      	mov	r4, r0
      offset += this->layout.deserialize(inbuffer + offset);
 8054d8c:	3004      	adds	r0, #4
 8054d8e:	f7ff ff7d 	bl	8054c8c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8054d92:	183b      	adds	r3, r7, r0
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8054d94:	5c39      	ldrb	r1, [r7, r0]
      offset += sizeof(this->data_length);
 8054d96:	1d06      	adds	r6, r0, #4
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8054d98:	789d      	ldrb	r5, [r3, #2]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8054d9a:	785a      	ldrb	r2, [r3, #1]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8054d9c:	042d      	lsls	r5, r5, #16
 8054d9e:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8054da2:	430d      	orrs	r5, r1
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8054da4:	78d9      	ldrb	r1, [r3, #3]
      if(data_lengthT > data_length)
 8054da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8054da8:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
      if(data_lengthT > data_length)
 8054dac:	42ab      	cmp	r3, r5
 8054dae:	d204      	bcs.n	8054dba <_ZN8std_msgs14ByteMultiArray11deserializeEPh+0x36>
        this->data = (int8_t*)realloc(this->data, data_lengthT * sizeof(int8_t));
 8054db0:	4629      	mov	r1, r5
 8054db2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8054db4:	f7fd ffae 	bl	8052d14 <realloc>
 8054db8:	62e0      	str	r0, [r4, #44]	; 0x2c
      data_length = data_lengthT;
 8054dba:	6265      	str	r5, [r4, #36]	; 0x24
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int8_t));
 8054dbc:	f104 0828 	add.w	r8, r4, #40	; 0x28
      for( uint32_t i = 0; i < data_length; i++){
 8054dc0:	2500      	movs	r5, #0
 8054dc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8054dc4:	42ab      	cmp	r3, r5
 8054dc6:	d90b      	bls.n	8054de0 <_ZN8std_msgs14ByteMultiArray11deserializeEPh+0x5c>
      this->st_data = u_st_data.real;
 8054dc8:	5dbb      	ldrb	r3, [r7, r6]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int8_t));
 8054dca:	2201      	movs	r2, #1
 8054dcc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8054dce:	4641      	mov	r1, r8
      this->st_data = u_st_data.real;
 8054dd0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
      offset += sizeof(this->st_data);
 8054dd4:	3601      	adds	r6, #1
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int8_t));
 8054dd6:	4428      	add	r0, r5
      for( uint32_t i = 0; i < data_length; i++){
 8054dd8:	3501      	adds	r5, #1
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int8_t));
 8054dda:	f005 fffc 	bl	805add6 <memcpy>
      for( uint32_t i = 0; i < data_length; i++){
 8054dde:	e7f0      	b.n	8054dc2 <_ZN8std_msgs14ByteMultiArray11deserializeEPh+0x3e>
    }
 8054de0:	4630      	mov	r0, r6
 8054de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08054de6 <_ZN8std_msgs16UInt16MultiArray11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer) override
 8054de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8054dea:	460f      	mov	r7, r1
 8054dec:	4604      	mov	r4, r0
      offset += this->layout.deserialize(inbuffer + offset);
 8054dee:	3004      	adds	r0, #4
 8054df0:	f7ff ff4c 	bl	8054c8c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8054df4:	183e      	adds	r6, r7, r0
 8054df6:	5c3b      	ldrb	r3, [r7, r0]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8054df8:	78b5      	ldrb	r5, [r6, #2]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8054dfa:	7872      	ldrb	r2, [r6, #1]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8054dfc:	042d      	lsls	r5, r5, #16
 8054dfe:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8054e02:	431d      	orrs	r5, r3
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8054e04:	78f3      	ldrb	r3, [r6, #3]
 8054e06:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
      if(data_lengthT > data_length)
 8054e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8054e0c:	42ab      	cmp	r3, r5
 8054e0e:	d204      	bcs.n	8054e1a <_ZN8std_msgs16UInt16MultiArray11deserializeEPh+0x34>
        this->data = (uint16_t*)realloc(this->data, data_lengthT * sizeof(uint16_t));
 8054e10:	0069      	lsls	r1, r5, #1
 8054e12:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8054e14:	f7fd ff7e 	bl	8052d14 <realloc>
 8054e18:	62e0      	str	r0, [r4, #44]	; 0x2c
      data_length = data_lengthT;
 8054e1a:	6265      	str	r5, [r4, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8054e1c:	f1c7 0704 	rsb	r7, r7, #4
 8054e20:	4635      	mov	r5, r6
        memcpy( &(this->data[i]), &(this->st_data), sizeof(uint16_t));
 8054e22:	f104 0828 	add.w	r8, r4, #40	; 0x28
      for( uint32_t i = 0; i < data_length; i++){
 8054e26:	2600      	movs	r6, #0
 8054e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8054e2a:	1978      	adds	r0, r7, r5
 8054e2c:	3502      	adds	r5, #2
 8054e2e:	42b3      	cmp	r3, r6
 8054e30:	d90e      	bls.n	8054e50 <_ZN8std_msgs16UInt16MultiArray11deserializeEPh+0x6a>
      this->st_data =  ((uint16_t) (*(inbuffer + offset)));
 8054e32:	78ab      	ldrb	r3, [r5, #2]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(uint16_t));
 8054e34:	4641      	mov	r1, r8
 8054e36:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      this->st_data =  ((uint16_t) (*(inbuffer + offset)));
 8054e38:	8523      	strh	r3, [r4, #40]	; 0x28
      this->st_data |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8054e3a:	78ea      	ldrb	r2, [r5, #3]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(uint16_t));
 8054e3c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
      for( uint32_t i = 0; i < data_length; i++){
 8054e40:	3601      	adds	r6, #1
      this->st_data |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8054e42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        memcpy( &(this->data[i]), &(this->st_data), sizeof(uint16_t));
 8054e46:	2202      	movs	r2, #2
      this->st_data |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8054e48:	8523      	strh	r3, [r4, #40]	; 0x28
        memcpy( &(this->data[i]), &(this->st_data), sizeof(uint16_t));
 8054e4a:	f005 ffc4 	bl	805add6 <memcpy>
      for( uint32_t i = 0; i < data_length; i++){
 8054e4e:	e7eb      	b.n	8054e28 <_ZN8std_msgs16UInt16MultiArray11deserializeEPh+0x42>
    }
 8054e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08054e54 <_ZN8std_msgs17Float64MultiArray11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer) override
 8054e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8054e58:	460f      	mov	r7, r1
 8054e5a:	4605      	mov	r5, r0
      offset += this->layout.deserialize(inbuffer + offset);
 8054e5c:	3004      	adds	r0, #4
 8054e5e:	f7ff ff15 	bl	8054c8c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8054e62:	183c      	adds	r4, r7, r0
 8054e64:	5c3b      	ldrb	r3, [r7, r0]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8054e66:	78a6      	ldrb	r6, [r4, #2]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8054e68:	7862      	ldrb	r2, [r4, #1]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8054e6a:	0436      	lsls	r6, r6, #16
 8054e6c:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 8054e70:	431e      	orrs	r6, r3
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8054e72:	78e3      	ldrb	r3, [r4, #3]
 8054e74:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
      if(data_lengthT > data_length)
 8054e78:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8054e7a:	42b3      	cmp	r3, r6
 8054e7c:	d204      	bcs.n	8054e88 <_ZN8std_msgs17Float64MultiArray11deserializeEPh+0x34>
        this->data = (double*)realloc(this->data, data_lengthT * sizeof(double));
 8054e7e:	00f1      	lsls	r1, r6, #3
 8054e80:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8054e82:	f7fd ff47 	bl	8052d14 <realloc>
 8054e86:	6328      	str	r0, [r5, #48]	; 0x30
      data_length = data_lengthT;
 8054e88:	626e      	str	r6, [r5, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8054e8a:	f1c7 0704 	rsb	r7, r7, #4
 8054e8e:	2600      	movs	r6, #0
        memcpy( &(this->data[i]), &(this->st_data), sizeof(double));
 8054e90:	f105 0a28 	add.w	sl, r5, #40	; 0x28
      for( uint32_t i = 0; i < data_length; i++){
 8054e94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8054e96:	1938      	adds	r0, r7, r4
 8054e98:	42b3      	cmp	r3, r6
 8054e9a:	d924      	bls.n	8054ee6 <_ZN8std_msgs17Float64MultiArray11deserializeEPh+0x92>
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8054e9c:	79a3      	ldrb	r3, [r4, #6]
 8054e9e:	3408      	adds	r4, #8
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8054ea0:	f814 2c03 	ldrb.w	r2, [r4, #-3]
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8054ea4:	041b      	lsls	r3, r3, #16
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8054ea6:	7861      	ldrb	r1, [r4, #1]
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8054ea8:	f814 0c01 	ldrb.w	r0, [r4, #-1]
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8054eac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8054eb0:	f814 2c04 	ldrb.w	r2, [r4, #-4]
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8054eb4:	4313      	orrs	r3, r2
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8054eb6:	7822      	ldrb	r2, [r4, #0]
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8054eb8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8054ebc:	78a1      	ldrb	r1, [r4, #2]
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8054ebe:	ea43 6800 	orr.w	r8, r3, r0, lsl #24
        memcpy( &(this->data[i]), &(this->st_data), sizeof(double));
 8054ec2:	6b28      	ldr	r0, [r5, #48]	; 0x30
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8054ec4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8054ec8:	78e1      	ldrb	r1, [r4, #3]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(double));
 8054eca:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
      for( uint32_t i = 0; i < data_length; i++){
 8054ece:	3601      	adds	r6, #1
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8054ed0:	ea42 6901 	orr.w	r9, r2, r1, lsl #24
      this->st_data = u_st_data.real;
 8054ed4:	4642      	mov	r2, r8
        memcpy( &(this->data[i]), &(this->st_data), sizeof(double));
 8054ed6:	4651      	mov	r1, sl
      this->st_data = u_st_data.real;
 8054ed8:	464b      	mov	r3, r9
 8054eda:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
        memcpy( &(this->data[i]), &(this->st_data), sizeof(double));
 8054ede:	2208      	movs	r2, #8
 8054ee0:	f005 ff79 	bl	805add6 <memcpy>
      for( uint32_t i = 0; i < data_length; i++){
 8054ee4:	e7d6      	b.n	8054e94 <_ZN8std_msgs17Float64MultiArray11deserializeEPh+0x40>
    }
 8054ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08054eea <_ZN8std_msgs6String11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer) override
 8054eea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8054eec:	460c      	mov	r4, r1
 8054eee:	4605      	mov	r5, r0
      arrToVar(length_data, (inbuffer + offset));
 8054ef0:	a801      	add	r0, sp, #4
 8054ef2:	f7ff fe86 	bl	8054c02 <_ZN3ros3Msg8arrToVarIjPhEEvRT_T0_>
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8054ef6:	9901      	ldr	r1, [sp, #4]
 8054ef8:	1ce2      	adds	r2, r4, #3
 8054efa:	f1c4 0701 	rsb	r7, r4, #1
 8054efe:	1d08      	adds	r0, r1, #4
 8054f00:	4613      	mov	r3, r2
 8054f02:	18fe      	adds	r6, r7, r3
 8054f04:	42b0      	cmp	r0, r6
 8054f06:	d903      	bls.n	8054f10 <_ZN8std_msgs6String11deserializeEPh+0x26>
          inbuffer[k-1]=inbuffer[k];
 8054f08:	785e      	ldrb	r6, [r3, #1]
 8054f0a:	f803 6b01 	strb.w	r6, [r3], #1
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8054f0e:	e7f8      	b.n	8054f02 <_ZN8std_msgs6String11deserializeEPh+0x18>
      inbuffer[offset+length_data-1]=0;
 8054f10:	440c      	add	r4, r1
 8054f12:	2300      	movs	r3, #0
 8054f14:	70e3      	strb	r3, [r4, #3]
      this->data = (char *)(inbuffer + offset-1);
 8054f16:	606a      	str	r2, [r5, #4]
    }
 8054f18:	b003      	add	sp, #12
 8054f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08054f1c <_ZN3ros10SubscriberIN8std_msgs6StringEN8lexxhard9ros_boardEE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8054f1c:	b570      	push	{r4, r5, r6, lr}
    msg.deserialize(data);
 8054f1e:	f100 050c 	add.w	r5, r0, #12
  virtual void callback(unsigned char* data) override
 8054f22:	4604      	mov	r4, r0
    msg.deserialize(data);
 8054f24:	4628      	mov	r0, r5
 8054f26:	f7ff ffe0 	bl	8054eea <_ZN8std_msgs6String11deserializeEPh>
    (obj_->*cb_)(msg);
 8054f2a:	69a2      	ldr	r2, [r4, #24]
 8054f2c:	69e0      	ldr	r0, [r4, #28]
 8054f2e:	f012 0f01 	tst.w	r2, #1
 8054f32:	ea4f 0262 	mov.w	r2, r2, asr #1
 8054f36:	6963      	ldr	r3, [r4, #20]
 8054f38:	bf18      	it	ne
 8054f3a:	5881      	ldrne	r1, [r0, r2]
 8054f3c:	4410      	add	r0, r2
 8054f3e:	bf18      	it	ne
 8054f40:	58cb      	ldrne	r3, [r1, r3]
 8054f42:	4629      	mov	r1, r5
  }
 8054f44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (obj_->*cb_)(msg);
 8054f48:	4718      	bx	r3

08054f4a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer) override
 8054f4a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8054f4e:	780b      	ldrb	r3, [r1, #0]
    virtual int deserialize(unsigned char *inbuffer) override
 8054f50:	460c      	mov	r4, r1
 8054f52:	4606      	mov	r6, r0
      arrToVar(length_topic_name, (inbuffer + offset));
 8054f54:	3102      	adds	r1, #2
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8054f56:	8083      	strh	r3, [r0, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8054f58:	f1c4 0801 	rsb	r8, r4, #1
 8054f5c:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 8054f60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8054f64:	8083      	strh	r3, [r0, #4]
      arrToVar(length_topic_name, (inbuffer + offset));
 8054f66:	a801      	add	r0, sp, #4
 8054f68:	f7ff fe4b 	bl	8054c02 <_ZN3ros3Msg8arrToVarIjPhEEvRT_T0_>
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8054f6c:	9f01      	ldr	r7, [sp, #4]
 8054f6e:	1d62      	adds	r2, r4, #5
 8054f70:	1db9      	adds	r1, r7, #6
 8054f72:	4613      	mov	r3, r2
 8054f74:	eb08 0003 	add.w	r0, r8, r3
 8054f78:	4281      	cmp	r1, r0
 8054f7a:	d903      	bls.n	8054f84 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x3a>
          inbuffer[k-1]=inbuffer[k];
 8054f7c:	7858      	ldrb	r0, [r3, #1]
 8054f7e:	f803 0b01 	strb.w	r0, [r3], #1
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8054f82:	e7f7      	b.n	8054f74 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x2a>
      inbuffer[offset+length_topic_name-1]=0;
 8054f84:	19e3      	adds	r3, r4, r7
 8054f86:	2000      	movs	r0, #0
      offset += 4;
 8054f88:	f107 050a 	add.w	r5, r7, #10
 8054f8c:	3709      	adds	r7, #9
      inbuffer[offset+length_topic_name-1]=0;
 8054f8e:	7158      	strb	r0, [r3, #5]
      arrToVar(length_message_type, (inbuffer + offset));
 8054f90:	4421      	add	r1, r4
 8054f92:	a802      	add	r0, sp, #8
      this->topic_name = (char *)(inbuffer + offset-1);
 8054f94:	60b2      	str	r2, [r6, #8]
      arrToVar(length_message_type, (inbuffer + offset));
 8054f96:	4427      	add	r7, r4
 8054f98:	f7ff fe33 	bl	8054c02 <_ZN3ros3Msg8arrToVarIjPhEEvRT_T0_>
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8054f9c:	9b02      	ldr	r3, [sp, #8]
 8054f9e:	441d      	add	r5, r3
 8054fa0:	463b      	mov	r3, r7
 8054fa2:	eb08 0203 	add.w	r2, r8, r3
 8054fa6:	4295      	cmp	r5, r2
 8054fa8:	d903      	bls.n	8054fb2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 8054faa:	785a      	ldrb	r2, [r3, #1]
 8054fac:	f803 2b01 	strb.w	r2, [r3], #1
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8054fb0:	e7f7      	b.n	8054fa2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x58>
      inbuffer[offset+length_message_type-1]=0;
 8054fb2:	1961      	adds	r1, r4, r5
 8054fb4:	2300      	movs	r3, #0
      arrToVar(length_md5sum, (inbuffer + offset));
 8054fb6:	a803      	add	r0, sp, #12
      inbuffer[offset+length_message_type-1]=0;
 8054fb8:	f801 3c01 	strb.w	r3, [r1, #-1]
      this->message_type = (char *)(inbuffer + offset-1);
 8054fbc:	60f7      	str	r7, [r6, #12]
      arrToVar(length_md5sum, (inbuffer + offset));
 8054fbe:	f7ff fe20 	bl	8054c02 <_ZN3ros3Msg8arrToVarIjPhEEvRT_T0_>
      offset += 4;
 8054fc2:	1d2b      	adds	r3, r5, #4
 8054fc4:	3503      	adds	r5, #3
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8054fc6:	9803      	ldr	r0, [sp, #12]
 8054fc8:	4425      	add	r5, r4
 8054fca:	4418      	add	r0, r3
 8054fcc:	462b      	mov	r3, r5
 8054fce:	eb08 0203 	add.w	r2, r8, r3
 8054fd2:	4290      	cmp	r0, r2
 8054fd4:	d903      	bls.n	8054fde <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x94>
          inbuffer[k-1]=inbuffer[k];
 8054fd6:	785a      	ldrb	r2, [r3, #1]
 8054fd8:	f803 2b01 	strb.w	r2, [r3], #1
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8054fdc:	e7f7      	b.n	8054fce <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x84>
      inbuffer[offset+length_md5sum-1]=0;
 8054fde:	1822      	adds	r2, r4, r0
 8054fe0:	2300      	movs	r3, #0
 8054fe2:	f802 3c01 	strb.w	r3, [r2, #-1]
      this->md5sum = (char *)(inbuffer + offset-1);
 8054fe6:	6135      	str	r5, [r6, #16]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8054fe8:	7893      	ldrb	r3, [r2, #2]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8054fea:	7851      	ldrb	r1, [r2, #1]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8054fec:	041b      	lsls	r3, r3, #16
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8054fee:	78d2      	ldrb	r2, [r2, #3]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8054ff0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8054ff4:	5c21      	ldrb	r1, [r4, r0]
    }
 8054ff6:	3004      	adds	r0, #4
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8054ff8:	430b      	orrs	r3, r1
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8054ffa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->buffer_size = u_buffer_size.real;
 8054ffe:	6173      	str	r3, [r6, #20]
    }
 8055000:	b004      	add	sp, #16
 8055002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08055006 <_ZN14rosserial_msgs3Log11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer) override
 8055006:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8055008:	460c      	mov	r4, r1
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 805500a:	f811 3b01 	ldrb.w	r3, [r1], #1
    virtual int deserialize(unsigned char *inbuffer) override
 805500e:	4605      	mov	r5, r0
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8055010:	7103      	strb	r3, [r0, #4]
      arrToVar(length_msg, (inbuffer + offset));
 8055012:	a801      	add	r0, sp, #4
 8055014:	f7ff fdf5 	bl	8054c02 <_ZN3ros3Msg8arrToVarIjPhEEvRT_T0_>
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8055018:	9901      	ldr	r1, [sp, #4]
 805501a:	1d22      	adds	r2, r4, #4
 805501c:	f1c4 0701 	rsb	r7, r4, #1
 8055020:	1d48      	adds	r0, r1, #5
 8055022:	4613      	mov	r3, r2
 8055024:	18fe      	adds	r6, r7, r3
 8055026:	42b0      	cmp	r0, r6
 8055028:	d903      	bls.n	8055032 <_ZN14rosserial_msgs3Log11deserializeEPh+0x2c>
          inbuffer[k-1]=inbuffer[k];
 805502a:	785e      	ldrb	r6, [r3, #1]
 805502c:	f803 6b01 	strb.w	r6, [r3], #1
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8055030:	e7f8      	b.n	8055024 <_ZN14rosserial_msgs3Log11deserializeEPh+0x1e>
      inbuffer[offset+length_msg-1]=0;
 8055032:	440c      	add	r4, r1
 8055034:	2300      	movs	r3, #0
 8055036:	7123      	strb	r3, [r4, #4]
      this->msg = (char *)(inbuffer + offset-1);
 8055038:	60aa      	str	r2, [r5, #8]
    }
 805503a:	b003      	add	sp, #12
 805503c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0805503e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer) override
 805503e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if(ints_lengthT > ints_length)
 8055042:	6843      	ldr	r3, [r0, #4]
    virtual int deserialize(unsigned char *inbuffer) override
 8055044:	4604      	mov	r4, r0
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8055046:	680d      	ldr	r5, [r1, #0]
    virtual int deserialize(unsigned char *inbuffer) override
 8055048:	460e      	mov	r6, r1
      if(ints_lengthT > ints_length)
 805504a:	42ab      	cmp	r3, r5
 805504c:	d204      	bcs.n	8055058 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1a>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 805504e:	00a9      	lsls	r1, r5, #2
 8055050:	68c0      	ldr	r0, [r0, #12]
 8055052:	f7fd fe5f 	bl	8052d14 <realloc>
 8055056:	60e0      	str	r0, [r4, #12]
      ints_length = ints_lengthT;
 8055058:	46b0      	mov	r8, r6
      for( uint32_t i = 0; i < ints_length; i++){
 805505a:	f04f 0900 	mov.w	r9, #0
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 805505e:	f104 0a08 	add.w	sl, r4, #8
      ints_length = ints_lengthT;
 8055062:	6065      	str	r5, [r4, #4]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055064:	f898 5006 	ldrb.w	r5, [r8, #6]
 8055068:	ea4f 0089 	mov.w	r0, r9, lsl #2
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 805506c:	f898 3005 	ldrb.w	r3, [r8, #5]
      for( uint32_t i = 0; i < ints_length; i++){
 8055070:	f108 0804 	add.w	r8, r8, #4
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055074:	042d      	lsls	r5, r5, #16
 8055076:	f100 0708 	add.w	r7, r0, #8
 805507a:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 805507e:	f898 3000 	ldrb.w	r3, [r8]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055082:	431d      	orrs	r5, r3
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8055084:	f898 3003 	ldrb.w	r3, [r8, #3]
 8055088:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
      for( uint32_t i = 0; i < ints_length; i++){
 805508c:	6863      	ldr	r3, [r4, #4]
 805508e:	454b      	cmp	r3, r9
 8055090:	d909      	bls.n	80550a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x68>
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8055092:	68e3      	ldr	r3, [r4, #12]
 8055094:	2204      	movs	r2, #4
 8055096:	4651      	mov	r1, sl
      this->st_ints = u_st_ints.real;
 8055098:	60a5      	str	r5, [r4, #8]
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 805509a:	4418      	add	r0, r3
      for( uint32_t i = 0; i < ints_length; i++){
 805509c:	f109 0901 	add.w	r9, r9, #1
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80550a0:	f005 fe99 	bl	805add6 <memcpy>
      for( uint32_t i = 0; i < ints_length; i++){
 80550a4:	e7de      	b.n	8055064 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26>
      if(floats_lengthT > floats_length)
 80550a6:	6923      	ldr	r3, [r4, #16]
 80550a8:	42ab      	cmp	r3, r5
 80550aa:	d204      	bcs.n	80550b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x78>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80550ac:	00a9      	lsls	r1, r5, #2
 80550ae:	69a0      	ldr	r0, [r4, #24]
 80550b0:	f7fd fe30 	bl	8052d14 <realloc>
 80550b4:	61a0      	str	r0, [r4, #24]
      floats_length = floats_lengthT;
 80550b6:	4437      	add	r7, r6
      for( uint32_t i = 0; i < floats_length; i++){
 80550b8:	f04f 0800 	mov.w	r8, #0
 80550bc:	f1c6 0904 	rsb	r9, r6, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80550c0:	f104 0a14 	add.w	sl, r4, #20
      floats_length = floats_lengthT;
 80550c4:	6125      	str	r5, [r4, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80550c6:	78bd      	ldrb	r5, [r7, #2]
 80550c8:	eb09 0b07 	add.w	fp, r9, r7
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80550cc:	787b      	ldrb	r3, [r7, #1]
      for( uint32_t i = 0; i < floats_length; i++){
 80550ce:	3704      	adds	r7, #4
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80550d0:	042d      	lsls	r5, r5, #16
 80550d2:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80550d6:	f817 3c04 	ldrb.w	r3, [r7, #-4]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80550da:	431d      	orrs	r5, r3
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80550dc:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80550e0:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
      for( uint32_t i = 0; i < floats_length; i++){
 80550e4:	6923      	ldr	r3, [r4, #16]
 80550e6:	4543      	cmp	r3, r8
 80550e8:	d90a      	bls.n	8055100 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xc2>
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80550ea:	69a0      	ldr	r0, [r4, #24]
 80550ec:	2204      	movs	r2, #4
 80550ee:	4651      	mov	r1, sl
      this->st_floats = u_st_floats.real;
 80550f0:	6165      	str	r5, [r4, #20]
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80550f2:	eb00 0088 	add.w	r0, r0, r8, lsl #2
      for( uint32_t i = 0; i < floats_length; i++){
 80550f6:	f108 0801 	add.w	r8, r8, #1
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80550fa:	f005 fe6c 	bl	805add6 <memcpy>
      for( uint32_t i = 0; i < floats_length; i++){
 80550fe:	e7e2      	b.n	80550c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x88>
      if(strings_lengthT > strings_length)
 8055100:	69e3      	ldr	r3, [r4, #28]
 8055102:	42ab      	cmp	r3, r5
 8055104:	d204      	bcs.n	8055110 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xd2>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8055106:	00a9      	lsls	r1, r5, #2
 8055108:	6a60      	ldr	r0, [r4, #36]	; 0x24
 805510a:	f7fd fe03 	bl	8052d14 <realloc>
 805510e:	6260      	str	r0, [r4, #36]	; 0x24
      strings_length = strings_lengthT;
 8055110:	61e5      	str	r5, [r4, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8055112:	2500      	movs	r5, #0
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8055114:	f1c6 0801 	rsb	r8, r6, #1
      inbuffer[offset+length_st_strings-1]=0;
 8055118:	462f      	mov	r7, r5
      for( uint32_t i = 0; i < strings_length; i++){
 805511a:	69e3      	ldr	r3, [r4, #28]
 805511c:	42ab      	cmp	r3, r5
 805511e:	d924      	bls.n	805516a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x12c>
      arrToVar(length_st_strings, (inbuffer + offset));
 8055120:	eb06 010b 	add.w	r1, r6, fp
 8055124:	a801      	add	r0, sp, #4
 8055126:	f7ff fd6c 	bl	8054c02 <_ZN3ros3Msg8arrToVarIjPhEEvRT_T0_>
      offset += 4;
 805512a:	f10b 0304 	add.w	r3, fp, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 805512e:	9a01      	ldr	r2, [sp, #4]
 8055130:	f10b 0b03 	add.w	fp, fp, #3
 8055134:	4413      	add	r3, r2
 8055136:	eb06 020b 	add.w	r2, r6, fp
 805513a:	4611      	mov	r1, r2
 805513c:	eb08 0001 	add.w	r0, r8, r1
 8055140:	4298      	cmp	r0, r3
 8055142:	d203      	bcs.n	805514c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x10e>
          inbuffer[k-1]=inbuffer[k];
 8055144:	7848      	ldrb	r0, [r1, #1]
 8055146:	f801 0b01 	strb.w	r0, [r1], #1
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 805514a:	e7f7      	b.n	805513c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xfe>
      inbuffer[offset+length_st_strings-1]=0;
 805514c:	18f1      	adds	r1, r6, r3
      offset += length_st_strings;
 805514e:	469b      	mov	fp, r3
      inbuffer[offset+length_st_strings-1]=0;
 8055150:	f801 7c01 	strb.w	r7, [r1, #-1]
      this->st_strings = (char *)(inbuffer + offset-1);
 8055154:	4621      	mov	r1, r4
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8055156:	6a60      	ldr	r0, [r4, #36]	; 0x24
      this->st_strings = (char *)(inbuffer + offset-1);
 8055158:	f841 2f20 	str.w	r2, [r1, #32]!
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 805515c:	2204      	movs	r2, #4
 805515e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
      for( uint32_t i = 0; i < strings_length; i++){
 8055162:	3501      	adds	r5, #1
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8055164:	f005 fe37 	bl	805add6 <memcpy>
      for( uint32_t i = 0; i < strings_length; i++){
 8055168:	e7d7      	b.n	805511a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xdc>
    }
 805516a:	4658      	mov	r0, fp
 805516c:	b003      	add	sp, #12
 805516e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08055172 <_ZN8std_msgs6Header11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer) override
 8055172:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8055174:	780b      	ldrb	r3, [r1, #0]
    virtual int deserialize(unsigned char *inbuffer) override
 8055176:	460c      	mov	r4, r1
 8055178:	4605      	mov	r5, r0
      arrToVar(length_frame_id, (inbuffer + offset));
 805517a:	310c      	adds	r1, #12
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 805517c:	6043      	str	r3, [r0, #4]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 805517e:	f1c4 0701 	rsb	r7, r4, #1
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8055182:	f811 2c0b 	ldrb.w	r2, [r1, #-11]
 8055186:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 805518a:	6043      	str	r3, [r0, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 805518c:	f811 2c0a 	ldrb.w	r2, [r1, #-10]
 8055190:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8055194:	6043      	str	r3, [r0, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8055196:	f811 2c09 	ldrb.w	r2, [r1, #-9]
 805519a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 805519e:	6043      	str	r3, [r0, #4]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 80551a0:	f811 3c08 	ldrb.w	r3, [r1, #-8]
 80551a4:	6083      	str	r3, [r0, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80551a6:	f811 2c07 	ldrb.w	r2, [r1, #-7]
 80551aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80551ae:	6083      	str	r3, [r0, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80551b0:	f811 2c06 	ldrb.w	r2, [r1, #-6]
 80551b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80551b8:	6083      	str	r3, [r0, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80551ba:	f811 2c05 	ldrb.w	r2, [r1, #-5]
 80551be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80551c2:	6083      	str	r3, [r0, #8]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80551c4:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 80551c8:	60c3      	str	r3, [r0, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80551ca:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 80551ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80551d2:	60c3      	str	r3, [r0, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80551d4:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 80551d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80551dc:	60c3      	str	r3, [r0, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80551de:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80551e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80551e6:	60c3      	str	r3, [r0, #12]
      arrToVar(length_frame_id, (inbuffer + offset));
 80551e8:	a801      	add	r0, sp, #4
 80551ea:	f7ff fd0a 	bl	8054c02 <_ZN3ros3Msg8arrToVarIjPhEEvRT_T0_>
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80551ee:	9901      	ldr	r1, [sp, #4]
 80551f0:	f104 020f 	add.w	r2, r4, #15
 80551f4:	f101 0010 	add.w	r0, r1, #16
 80551f8:	4613      	mov	r3, r2
 80551fa:	18fe      	adds	r6, r7, r3
 80551fc:	42b0      	cmp	r0, r6
 80551fe:	d903      	bls.n	8055208 <_ZN8std_msgs6Header11deserializeEPh+0x96>
          inbuffer[k-1]=inbuffer[k];
 8055200:	785e      	ldrb	r6, [r3, #1]
 8055202:	f803 6b01 	strb.w	r6, [r3], #1
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8055206:	e7f8      	b.n	80551fa <_ZN8std_msgs6Header11deserializeEPh+0x88>
      inbuffer[offset+length_frame_id-1]=0;
 8055208:	440c      	add	r4, r1
 805520a:	2300      	movs	r3, #0
 805520c:	73e3      	strb	r3, [r4, #15]
      this->frame_id = (char *)(inbuffer + offset-1);
 805520e:	612a      	str	r2, [r5, #16]
    }
 8055210:	b003      	add	sp, #12
 8055212:	bdf0      	pop	{r4, r5, r6, r7, pc}

08055214 <_ZN11sensor_msgs11Temperature11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer) override
 8055214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8055216:	460d      	mov	r5, r1
 8055218:	4604      	mov	r4, r0
      offset += this->header.deserialize(inbuffer + offset);
 805521a:	3004      	adds	r0, #4
 805521c:	f7ff ffa9 	bl	8055172 <_ZN8std_msgs6Header11deserializeEPh>
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8055220:	182b      	adds	r3, r5, r0
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055222:	789a      	ldrb	r2, [r3, #2]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8055224:	7859      	ldrb	r1, [r3, #1]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055226:	0412      	lsls	r2, r2, #16
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8055228:	f893 c003 	ldrb.w	ip, [r3, #3]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 805522c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8055230:	5c29      	ldrb	r1, [r5, r0]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8055232:	795d      	ldrb	r5, [r3, #5]
    }
 8055234:	3010      	adds	r0, #16
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055236:	430a      	orrs	r2, r1
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8055238:	7919      	ldrb	r1, [r3, #4]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 805523a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 805523e:	799d      	ldrb	r5, [r3, #6]
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8055240:	ea42 660c 	orr.w	r6, r2, ip, lsl #24
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8055244:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
      u_temperature.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8055248:	79dd      	ldrb	r5, [r3, #7]
 805524a:	ea41 6705 	orr.w	r7, r1, r5, lsl #24
      this->temperature = u_temperature.real;
 805524e:	e9c4 6706 	strd	r6, r7, [r4, #24]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055252:	7a9a      	ldrb	r2, [r3, #10]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8055254:	7a59      	ldrb	r1, [r3, #9]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055256:	0412      	lsls	r2, r2, #16
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8055258:	7b5e      	ldrb	r6, [r3, #13]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 805525a:	7add      	ldrb	r5, [r3, #11]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 805525c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8055260:	7a19      	ldrb	r1, [r3, #8]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055262:	430a      	orrs	r2, r1
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8055264:	7b19      	ldrb	r1, [r3, #12]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8055266:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 805526a:	7b9e      	ldrb	r6, [r3, #14]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 805526c:	7bdb      	ldrb	r3, [r3, #15]
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 805526e:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
      u_variance.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8055272:	ea42 6605 	orr.w	r6, r2, r5, lsl #24
 8055276:	ea41 6703 	orr.w	r7, r1, r3, lsl #24
      this->variance = u_variance.real;
 805527a:	e9c4 6708 	strd	r6, r7, [r4, #32]
    }
 805527e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08055280 <_ZN13lexxauto_msgs17BoardTemperatures11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer) override
 8055280:	e92d 4620 	stmdb	sp!, {r5, r9, sl, lr}
 8055284:	4681      	mov	r9, r0
 8055286:	468a      	mov	sl, r1
      offset += this->main.deserialize(inbuffer + offset);
 8055288:	3008      	adds	r0, #8
 805528a:	f7ff ffc3 	bl	8055214 <_ZN11sensor_msgs11Temperature11deserializeEPh>
 805528e:	4605      	mov	r5, r0
      offset += this->power.deserialize(inbuffer + offset);
 8055290:	eb0a 0100 	add.w	r1, sl, r0
 8055294:	f109 0030 	add.w	r0, r9, #48	; 0x30
 8055298:	f7ff ffbc 	bl	8055214 <_ZN11sensor_msgs11Temperature11deserializeEPh>
 805529c:	4405      	add	r5, r0
      offset += this->linear_actuator_center.deserialize(inbuffer + offset);
 805529e:	f109 0058 	add.w	r0, r9, #88	; 0x58
 80552a2:	eb0a 0105 	add.w	r1, sl, r5
 80552a6:	f7ff ffb5 	bl	8055214 <_ZN11sensor_msgs11Temperature11deserializeEPh>
 80552aa:	4405      	add	r5, r0
      offset += this->linear_actuator_left.deserialize(inbuffer + offset);
 80552ac:	f109 0080 	add.w	r0, r9, #128	; 0x80
 80552b0:	eb0a 0105 	add.w	r1, sl, r5
 80552b4:	f7ff ffae 	bl	8055214 <_ZN11sensor_msgs11Temperature11deserializeEPh>
 80552b8:	4405      	add	r5, r0
      offset += this->linear_actuator_right.deserialize(inbuffer + offset);
 80552ba:	f109 00a8 	add.w	r0, r9, #168	; 0xa8
 80552be:	eb0a 0105 	add.w	r1, sl, r5
 80552c2:	f7ff ffa7 	bl	8055214 <_ZN11sensor_msgs11Temperature11deserializeEPh>
 80552c6:	4405      	add	r5, r0
      offset += this->charge_plus.deserialize(inbuffer + offset);
 80552c8:	f109 00d0 	add.w	r0, r9, #208	; 0xd0
 80552cc:	eb0a 0105 	add.w	r1, sl, r5
 80552d0:	f7ff ffa0 	bl	8055214 <_ZN11sensor_msgs11Temperature11deserializeEPh>
 80552d4:	4405      	add	r5, r0
      offset += this->charge_minus.deserialize(inbuffer + offset);
 80552d6:	f109 00f8 	add.w	r0, r9, #248	; 0xf8
 80552da:	eb0a 0105 	add.w	r1, sl, r5
 80552de:	f7ff ff99 	bl	8055214 <_ZN11sensor_msgs11Temperature11deserializeEPh>
    }
 80552e2:	4428      	add	r0, r5
 80552e4:	e8bd 8620 	ldmia.w	sp!, {r5, r9, sl, pc}

080552e8 <_ZN11sensor_msgs12BatteryState11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer) override
 80552e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80552ec:	460e      	mov	r6, r1
 80552ee:	4605      	mov	r5, r0
      offset += this->header.deserialize(inbuffer + offset);
 80552f0:	3004      	adds	r0, #4
 80552f2:	f7ff ff3e 	bl	8055172 <_ZN8std_msgs6Header11deserializeEPh>
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80552f6:	1834      	adds	r4, r6, r0
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80552f8:	78a3      	ldrb	r3, [r4, #2]
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80552fa:	7862      	ldrb	r2, [r4, #1]
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80552fc:	041b      	lsls	r3, r3, #16
 80552fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8055302:	5c32      	ldrb	r2, [r6, r0]
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055304:	4313      	orrs	r3, r2
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8055306:	78e2      	ldrb	r2, [r4, #3]
      this->voltage = u_voltage.real;
 8055308:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 805530c:	61ab      	str	r3, [r5, #24]
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 805530e:	79a3      	ldrb	r3, [r4, #6]
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8055310:	7962      	ldrb	r2, [r4, #5]
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055312:	041b      	lsls	r3, r3, #16
 8055314:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8055318:	7922      	ldrb	r2, [r4, #4]
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 805531a:	4313      	orrs	r3, r2
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 805531c:	79e2      	ldrb	r2, [r4, #7]
      this->temperature = u_temperature.real;
 805531e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8055322:	61eb      	str	r3, [r5, #28]
      u_current.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055324:	7aa3      	ldrb	r3, [r4, #10]
      u_current.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8055326:	7a62      	ldrb	r2, [r4, #9]
      u_current.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055328:	041b      	lsls	r3, r3, #16
 805532a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_current.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 805532e:	7a22      	ldrb	r2, [r4, #8]
      u_current.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055330:	4313      	orrs	r3, r2
      u_current.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8055332:	7ae2      	ldrb	r2, [r4, #11]
      this->current = u_current.real;
 8055334:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8055338:	622b      	str	r3, [r5, #32]
      u_charge.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 805533a:	7ba3      	ldrb	r3, [r4, #14]
      u_charge.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 805533c:	7b62      	ldrb	r2, [r4, #13]
      u_charge.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 805533e:	041b      	lsls	r3, r3, #16
 8055340:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_charge.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8055344:	7b22      	ldrb	r2, [r4, #12]
      u_charge.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055346:	4313      	orrs	r3, r2
      u_charge.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8055348:	7be2      	ldrb	r2, [r4, #15]
      this->charge = u_charge.real;
 805534a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 805534e:	626b      	str	r3, [r5, #36]	; 0x24
      u_capacity.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055350:	7ca3      	ldrb	r3, [r4, #18]
      u_capacity.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8055352:	7c62      	ldrb	r2, [r4, #17]
      u_capacity.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055354:	041b      	lsls	r3, r3, #16
 8055356:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_capacity.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 805535a:	7c22      	ldrb	r2, [r4, #16]
      u_capacity.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 805535c:	4313      	orrs	r3, r2
      u_capacity.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 805535e:	7ce2      	ldrb	r2, [r4, #19]
      this->capacity = u_capacity.real;
 8055360:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8055364:	62ab      	str	r3, [r5, #40]	; 0x28
      u_design_capacity.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055366:	7da3      	ldrb	r3, [r4, #22]
      u_design_capacity.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8055368:	7d62      	ldrb	r2, [r4, #21]
      u_design_capacity.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 805536a:	041b      	lsls	r3, r3, #16
 805536c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_design_capacity.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8055370:	7d22      	ldrb	r2, [r4, #20]
      u_design_capacity.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055372:	4313      	orrs	r3, r2
      u_design_capacity.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8055374:	7de2      	ldrb	r2, [r4, #23]
      this->design_capacity = u_design_capacity.real;
 8055376:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 805537a:	62eb      	str	r3, [r5, #44]	; 0x2c
      u_percentage.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 805537c:	7ea3      	ldrb	r3, [r4, #26]
      u_percentage.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 805537e:	7e62      	ldrb	r2, [r4, #25]
      u_percentage.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055380:	041b      	lsls	r3, r3, #16
 8055382:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_percentage.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8055386:	7e22      	ldrb	r2, [r4, #24]
      u_percentage.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055388:	4313      	orrs	r3, r2
      u_percentage.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 805538a:	7ee2      	ldrb	r2, [r4, #27]
      this->percentage = u_percentage.real;
 805538c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8055390:	632b      	str	r3, [r5, #48]	; 0x30
      this->power_supply_status =  ((uint8_t) (*(inbuffer + offset)));
 8055392:	7f23      	ldrb	r3, [r4, #28]
 8055394:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
      this->power_supply_health =  ((uint8_t) (*(inbuffer + offset)));
 8055398:	7f63      	ldrb	r3, [r4, #29]
 805539a:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
      this->power_supply_technology =  ((uint8_t) (*(inbuffer + offset)));
 805539e:	7fa3      	ldrb	r3, [r4, #30]
 80553a0:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
      this->present = u_present.real;
 80553a4:	7fe3      	ldrb	r3, [r4, #31]
 80553a6:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
      cell_voltage_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80553aa:	f894 7022 	ldrb.w	r7, [r4, #34]	; 0x22
      cell_voltage_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80553ae:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
      cell_voltage_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80553b2:	043f      	lsls	r7, r7, #16
      uint32_t cell_voltage_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80553b4:	f894 3020 	ldrb.w	r3, [r4, #32]
      cell_voltage_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80553b8:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 80553bc:	431f      	orrs	r7, r3
      cell_voltage_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80553be:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80553c2:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      if(cell_voltage_lengthT > cell_voltage_length)
 80553c6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80553c8:	42bb      	cmp	r3, r7
 80553ca:	d204      	bcs.n	80553d6 <_ZN11sensor_msgs12BatteryState11deserializeEPh+0xee>
        this->cell_voltage = (float*)realloc(this->cell_voltage, cell_voltage_lengthT * sizeof(float));
 80553cc:	00b9      	lsls	r1, r7, #2
 80553ce:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80553d0:	f7fd fca0 	bl	8052d14 <realloc>
 80553d4:	6428      	str	r0, [r5, #64]	; 0x40
      for( uint32_t i = 0; i < cell_voltage_length; i++){
 80553d6:	f04f 0800 	mov.w	r8, #0
 80553da:	f1c6 0928 	rsb	r9, r6, #40	; 0x28
        memcpy( &(this->cell_voltage[i]), &(this->st_cell_voltage), sizeof(float));
 80553de:	f105 0a3c 	add.w	sl, r5, #60	; 0x3c
      cell_voltage_length = cell_voltage_lengthT;
 80553e2:	63af      	str	r7, [r5, #56]	; 0x38
      u_st_cell_voltage.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80553e4:	f894 7026 	ldrb.w	r7, [r4, #38]	; 0x26
 80553e8:	eb09 0b04 	add.w	fp, r9, r4
      u_st_cell_voltage.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80553ec:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
      for( uint32_t i = 0; i < cell_voltage_length; i++){
 80553f0:	3404      	adds	r4, #4
      u_st_cell_voltage.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80553f2:	043f      	lsls	r7, r7, #16
 80553f4:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      u_st_cell_voltage.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80553f8:	f894 3020 	ldrb.w	r3, [r4, #32]
      u_st_cell_voltage.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80553fc:	431f      	orrs	r7, r3
      u_st_cell_voltage.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80553fe:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8055402:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      for( uint32_t i = 0; i < cell_voltage_length; i++){
 8055406:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8055408:	4543      	cmp	r3, r8
 805540a:	d90a      	bls.n	8055422 <_ZN11sensor_msgs12BatteryState11deserializeEPh+0x13a>
        memcpy( &(this->cell_voltage[i]), &(this->st_cell_voltage), sizeof(float));
 805540c:	6c28      	ldr	r0, [r5, #64]	; 0x40
 805540e:	2204      	movs	r2, #4
 8055410:	4651      	mov	r1, sl
      this->st_cell_voltage = u_st_cell_voltage.real;
 8055412:	63ef      	str	r7, [r5, #60]	; 0x3c
        memcpy( &(this->cell_voltage[i]), &(this->st_cell_voltage), sizeof(float));
 8055414:	eb00 0088 	add.w	r0, r0, r8, lsl #2
      for( uint32_t i = 0; i < cell_voltage_length; i++){
 8055418:	f108 0801 	add.w	r8, r8, #1
        memcpy( &(this->cell_voltage[i]), &(this->st_cell_voltage), sizeof(float));
 805541c:	f005 fcdb 	bl	805add6 <memcpy>
      for( uint32_t i = 0; i < cell_voltage_length; i++){
 8055420:	e7e0      	b.n	80553e4 <_ZN11sensor_msgs12BatteryState11deserializeEPh+0xfc>
      if(cell_temperature_lengthT > cell_temperature_length)
 8055422:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8055424:	42bb      	cmp	r3, r7
 8055426:	d204      	bcs.n	8055432 <_ZN11sensor_msgs12BatteryState11deserializeEPh+0x14a>
        this->cell_temperature = (float*)realloc(this->cell_temperature, cell_temperature_lengthT * sizeof(float));
 8055428:	00b9      	lsls	r1, r7, #2
 805542a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 805542c:	f7fd fc72 	bl	8052d14 <realloc>
 8055430:	64e8      	str	r0, [r5, #76]	; 0x4c
      cell_temperature_length = cell_temperature_lengthT;
 8055432:	646f      	str	r7, [r5, #68]	; 0x44
      for( uint32_t i = 0; i < cell_temperature_length; i++){
 8055434:	eb06 040b 	add.w	r4, r6, fp
 8055438:	2700      	movs	r7, #0
 805543a:	f1c6 0804 	rsb	r8, r6, #4
        memcpy( &(this->cell_temperature[i]), &(this->st_cell_temperature), sizeof(float));
 805543e:	f105 0948 	add.w	r9, r5, #72	; 0x48
      for( uint32_t i = 0; i < cell_temperature_length; i++){
 8055442:	6c6b      	ldr	r3, [r5, #68]	; 0x44
      u_st_cell_temperature.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8055444:	4621      	mov	r1, r4
 8055446:	f104 0b03 	add.w	fp, r4, #3
 805544a:	eb08 0a04 	add.w	sl, r8, r4
      for( uint32_t i = 0; i < cell_temperature_length; i++){
 805544e:	42bb      	cmp	r3, r7
 8055450:	f104 0404 	add.w	r4, r4, #4
 8055454:	d917      	bls.n	8055486 <_ZN11sensor_msgs12BatteryState11deserializeEPh+0x19e>
      u_st_cell_temperature.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055456:	f814 3c02 	ldrb.w	r3, [r4, #-2]
        memcpy( &(this->cell_temperature[i]), &(this->st_cell_temperature), sizeof(float));
 805545a:	4649      	mov	r1, r9
      u_st_cell_temperature.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 805545c:	f814 2c03 	ldrb.w	r2, [r4, #-3]
      u_st_cell_temperature.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055460:	041b      	lsls	r3, r3, #16
        memcpy( &(this->cell_temperature[i]), &(this->st_cell_temperature), sizeof(float));
 8055462:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
      u_st_cell_temperature.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055464:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_st_cell_temperature.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8055468:	f814 2c04 	ldrb.w	r2, [r4, #-4]
        memcpy( &(this->cell_temperature[i]), &(this->st_cell_temperature), sizeof(float));
 805546c:	eb00 0087 	add.w	r0, r0, r7, lsl #2
      for( uint32_t i = 0; i < cell_temperature_length; i++){
 8055470:	3701      	adds	r7, #1
      u_st_cell_temperature.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8055472:	4313      	orrs	r3, r2
      u_st_cell_temperature.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8055474:	f814 2c01 	ldrb.w	r2, [r4, #-1]
      this->st_cell_temperature = u_st_cell_temperature.real;
 8055478:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        memcpy( &(this->cell_temperature[i]), &(this->st_cell_temperature), sizeof(float));
 805547c:	2204      	movs	r2, #4
      this->st_cell_temperature = u_st_cell_temperature.real;
 805547e:	64ab      	str	r3, [r5, #72]	; 0x48
        memcpy( &(this->cell_temperature[i]), &(this->st_cell_temperature), sizeof(float));
 8055480:	f005 fca9 	bl	805add6 <memcpy>
      for( uint32_t i = 0; i < cell_temperature_length; i++){
 8055484:	e7dd      	b.n	8055442 <_ZN11sensor_msgs12BatteryState11deserializeEPh+0x15a>
      arrToVar(length_location, (inbuffer + offset));
 8055486:	4668      	mov	r0, sp
 8055488:	f7ff fbbb 	bl	8054c02 <_ZN3ros3Msg8arrToVarIjPhEEvRT_T0_>
      for(unsigned int k= offset; k< offset+length_location; ++k){
 805548c:	9b00      	ldr	r3, [sp, #0]
 805548e:	eb06 020a 	add.w	r2, r6, sl
 8055492:	eb0a 0403 	add.w	r4, sl, r3
 8055496:	1b93      	subs	r3, r2, r6
 8055498:	429c      	cmp	r4, r3
 805549a:	d904      	bls.n	80554a6 <_ZN11sensor_msgs12BatteryState11deserializeEPh+0x1be>
          inbuffer[k-1]=inbuffer[k];
 805549c:	f812 3b01 	ldrb.w	r3, [r2], #1
 80554a0:	f802 3c02 	strb.w	r3, [r2, #-2]
      for(unsigned int k= offset; k< offset+length_location; ++k){
 80554a4:	e7f7      	b.n	8055496 <_ZN11sensor_msgs12BatteryState11deserializeEPh+0x1ae>
      inbuffer[offset+length_location-1]=0;
 80554a6:	1931      	adds	r1, r6, r4
 80554a8:	2300      	movs	r3, #0
      arrToVar(length_serial_number, (inbuffer + offset));
 80554aa:	a801      	add	r0, sp, #4
      inbuffer[offset+length_location-1]=0;
 80554ac:	f801 3c01 	strb.w	r3, [r1, #-1]
      this->location = (char *)(inbuffer + offset-1);
 80554b0:	f8c5 b050 	str.w	fp, [r5, #80]	; 0x50
      arrToVar(length_serial_number, (inbuffer + offset));
 80554b4:	f7ff fba5 	bl	8054c02 <_ZN3ros3Msg8arrToVarIjPhEEvRT_T0_>
      offset += 4;
 80554b8:	1d20      	adds	r0, r4, #4
      for(unsigned int k= offset; k< offset+length_serial_number; ++k){
 80554ba:	9b01      	ldr	r3, [sp, #4]
 80554bc:	4418      	add	r0, r3
 80554be:	1ce3      	adds	r3, r4, #3
 80554c0:	f1c6 0401 	rsb	r4, r6, #1
 80554c4:	4433      	add	r3, r6
 80554c6:	461a      	mov	r2, r3
 80554c8:	18a1      	adds	r1, r4, r2
 80554ca:	4288      	cmp	r0, r1
 80554cc:	d903      	bls.n	80554d6 <_ZN11sensor_msgs12BatteryState11deserializeEPh+0x1ee>
          inbuffer[k-1]=inbuffer[k];
 80554ce:	7851      	ldrb	r1, [r2, #1]
 80554d0:	f802 1b01 	strb.w	r1, [r2], #1
      for(unsigned int k= offset; k< offset+length_serial_number; ++k){
 80554d4:	e7f8      	b.n	80554c8 <_ZN11sensor_msgs12BatteryState11deserializeEPh+0x1e0>
      inbuffer[offset+length_serial_number-1]=0;
 80554d6:	4406      	add	r6, r0
 80554d8:	2200      	movs	r2, #0
 80554da:	f806 2c01 	strb.w	r2, [r6, #-1]
      this->serial_number = (char *)(inbuffer + offset-1);
 80554de:	656b      	str	r3, [r5, #84]	; 0x54
    }
 80554e0:	b003      	add	sp, #12
 80554e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080554e6 <_ZN13lexxauto_msgs7Battery11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer) override
 80554e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80554ea:	460f      	mov	r7, r1
 80554ec:	4604      	mov	r4, r0
      offset += this->state.deserialize(inbuffer + offset);
 80554ee:	3004      	adds	r0, #4
 80554f0:	f7ff fefa 	bl	80552e8 <_ZN11sensor_msgs12BatteryState11deserializeEPh>
      temps_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80554f4:	183b      	adds	r3, r7, r0
      uint32_t temps_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80554f6:	5c3a      	ldrb	r2, [r7, r0]
      offset += sizeof(this->temps_length);
 80554f8:	1d06      	adds	r6, r0, #4
      temps_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80554fa:	789d      	ldrb	r5, [r3, #2]
      temps_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80554fc:	7859      	ldrb	r1, [r3, #1]
      temps_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80554fe:	042d      	lsls	r5, r5, #16
      temps_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8055500:	78db      	ldrb	r3, [r3, #3]
      temps_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8055502:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
 8055506:	4315      	orrs	r5, r2
      temps_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8055508:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
      if(temps_lengthT > temps_length)
 805550c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 805550e:	42ab      	cmp	r3, r5
 8055510:	d207      	bcs.n	8055522 <_ZN13lexxauto_msgs7Battery11deserializeEPh+0x3c>
        this->temps = (sensor_msgs::Temperature*)realloc(this->temps, temps_lengthT * sizeof(sensor_msgs::Temperature));
 8055512:	2128      	movs	r1, #40	; 0x28
 8055514:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8055518:	4369      	muls	r1, r5
 805551a:	f7fd fbfb 	bl	8052d14 <realloc>
 805551e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
      temps_length = temps_lengthT;
 8055522:	65e5      	str	r5, [r4, #92]	; 0x5c
      offset += this->st_temps.deserialize(inbuffer + offset);
 8055524:	f104 0860 	add.w	r8, r4, #96	; 0x60
      for( uint32_t i = 0; i < temps_length; i++){
 8055528:	2500      	movs	r5, #0
        memcpy( &(this->temps[i]), &(this->st_temps), sizeof(sensor_msgs::Temperature));
 805552a:	f04f 0928 	mov.w	r9, #40	; 0x28
      for( uint32_t i = 0; i < temps_length; i++){
 805552e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
      offset += this->st_temps.deserialize(inbuffer + offset);
 8055530:	19b9      	adds	r1, r7, r6
      for( uint32_t i = 0; i < temps_length; i++){
 8055532:	42ab      	cmp	r3, r5
 8055534:	d90d      	bls.n	8055552 <_ZN13lexxauto_msgs7Battery11deserializeEPh+0x6c>
      offset += this->st_temps.deserialize(inbuffer + offset);
 8055536:	4640      	mov	r0, r8
 8055538:	f7ff fe6c 	bl	8055214 <_ZN11sensor_msgs11Temperature11deserializeEPh>
 805553c:	4406      	add	r6, r0
        memcpy( &(this->temps[i]), &(this->st_temps), sizeof(sensor_msgs::Temperature));
 805553e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8055542:	2228      	movs	r2, #40	; 0x28
 8055544:	4641      	mov	r1, r8
 8055546:	fb09 0005 	mla	r0, r9, r5, r0
      for( uint32_t i = 0; i < temps_length; i++){
 805554a:	3501      	adds	r5, #1
        memcpy( &(this->temps[i]), &(this->st_temps), sizeof(sensor_msgs::Temperature));
 805554c:	f005 fc43 	bl	805add6 <memcpy>
      for( uint32_t i = 0; i < temps_length; i++){
 8055550:	e7ed      	b.n	805552e <_ZN13lexxauto_msgs7Battery11deserializeEPh+0x48>
      this->state_of_health =  ((uint8_t) (*(inbuffer + offset)));
 8055552:	780b      	ldrb	r3, [r1, #0]
    }
 8055554:	1c70      	adds	r0, r6, #1
      this->state_of_health =  ((uint8_t) (*(inbuffer + offset)));
 8055556:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
    }
 805555a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0805555e <_ZNSt16allocator_traitsISaIPN12_GLOBAL__N_111yaw_checker5topicEEE8allocateERS4_j.isra.0>:
	if (__n > this->_M_max_size())
 805555e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
       *  @param  __n  The number of objects to allocate space for.
       *
       *  Calls @c a.allocate(n)
      */
      _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
      allocate(allocator_type& __a, size_type __n)
 8055562:	b508      	push	{r3, lr}
 8055564:	d301      	bcc.n	805556a <_ZNSt16allocator_traitsISaIPN12_GLOBAL__N_111yaw_checker5topicEEE8allocateERS4_j.isra.0+0xc>
	  std::__throw_bad_alloc();
 8055566:	f005 fc12 	bl	805ad8e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 805556a:	0080      	lsls	r0, r0, #2
      { return __a.allocate(__n); }
 805556c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8055570:	f005 bb6e 	b.w	805ac50 <_Znwj>

08055574 <_ZNSt5queueIfSt5dequeIfSaIfEEEC1IS2_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8055574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8055576:	2300      	movs	r3, #0
 8055578:	4604      	mov	r4, r0
 805557a:	6003      	str	r3, [r0, #0]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 805557c:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8055580:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8055584:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8055588:	e9c0 3308 	strd	r3, r3, [r0, #32]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 805558c:	2308      	movs	r3, #8
 805558e:	6043      	str	r3, [r0, #4]
 8055590:	2020      	movs	r0, #32
 8055592:	f005 fb5d 	bl	805ac50 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8055596:	6865      	ldr	r5, [r4, #4]
 8055598:	4606      	mov	r6, r0
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 805559a:	6020      	str	r0, [r4, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 805559c:	3d01      	subs	r5, #1
 805559e:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
 80555a0:	eb00 0785 	add.w	r7, r0, r5, lsl #2
 80555a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80555a8:	f005 fb52 	bl	805ac50 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
 80555ac:	f500 7300 	add.w	r3, r0, #512	; 0x200
	    *__cur = this->_M_allocate_node();
 80555b0:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
 80555b4:	60e0      	str	r0, [r4, #12]
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80555b6:	60a0      	str	r0, [r4, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80555b8:	61a0      	str	r0, [r4, #24]
	_M_node = __new_node;
 80555ba:	6167      	str	r7, [r4, #20]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80555bc:	6123      	str	r3, [r4, #16]
	_M_node = __new_node;
 80555be:	6267      	str	r7, [r4, #36]	; 0x24
	_M_last = _M_first + difference_type(_S_buffer_size());
 80555c0:	e9c4 0307 	strd	r0, r3, [r4, #28]
	: c() { }
 80555c4:	4620      	mov	r0, r4
 80555c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080555c8 <_ZNSt11_Deque_baseIfSaIfEED1Ev>:
      if (this->_M_impl._M_map)
 80555c8:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
 80555ca:	b570      	push	{r4, r5, r6, lr}
 80555cc:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
 80555ce:	b183      	cbz	r3, 80555f2 <_ZNSt11_Deque_baseIfSaIfEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80555d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80555d2:	6945      	ldr	r5, [r0, #20]
 80555d4:	1d1e      	adds	r6, r3, #4
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80555d6:	42ae      	cmp	r6, r5
 80555d8:	d906      	bls.n	80555e8 <_ZNSt11_Deque_baseIfSaIfEED1Ev+0x20>
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80555da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80555de:	f855 0b04 	ldr.w	r0, [r5], #4
 80555e2:	f005 fb33 	bl	805ac4c <_ZdlPvj>
 80555e6:	e7f6      	b.n	80555d6 <_ZNSt11_Deque_baseIfSaIfEED1Ev+0xe>
 80555e8:	6861      	ldr	r1, [r4, #4]
 80555ea:	6820      	ldr	r0, [r4, #0]
 80555ec:	0089      	lsls	r1, r1, #2
 80555ee:	f005 fb2d 	bl	805ac4c <_ZdlPvj>
    }
 80555f2:	4620      	mov	r0, r4
 80555f4:	bd70      	pop	{r4, r5, r6, pc}

080555f6 <_ZNSt5dequeIfSaIfEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 80555f6:	b510      	push	{r4, lr}
 80555f8:	4604      	mov	r4, r0
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80555fa:	f7ff ffe5 	bl	80555c8 <_ZNSt11_Deque_baseIfSaIfEED1Ev>
 80555fe:	4620      	mov	r0, r4
 8055600:	bd10      	pop	{r4, pc}

08055602 <_ZN8lexxhard16runaway_detector10._anon_374D1Ev>:
class {
 8055602:	b570      	push	{r4, r5, r6, lr}
 8055604:	4604      	mov	r4, r0
    class queue
 8055606:	3078      	adds	r0, #120	; 0x78
 8055608:	f7ff fff5 	bl	80555f6 <_ZNSt5dequeIfSaIfEED1Ev>
 805560c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8055610:	f7ff fff1 	bl	80555f6 <_ZNSt5dequeIfSaIfEED1Ev>
 8055614:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8055618:	f7ff ffed 	bl	80555f6 <_ZNSt5dequeIfSaIfEED1Ev>
      if (this->_M_impl._M_map)
 805561c:	6823      	ldr	r3, [r4, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 805561e:	6965      	ldr	r5, [r4, #20]
 8055620:	6a66      	ldr	r6, [r4, #36]	; 0x24
      if (this->_M_impl._M_map)
 8055622:	b173      	cbz	r3, 8055642 <_ZN8lexxhard16runaway_detector10._anon_374D1Ev+0x40>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8055624:	3604      	adds	r6, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8055626:	42ae      	cmp	r6, r5
 8055628:	d906      	bls.n	8055638 <_ZN8lexxhard16runaway_detector10._anon_374D1Ev+0x36>
 805562a:	f44f 7100 	mov.w	r1, #512	; 0x200
 805562e:	f855 0b04 	ldr.w	r0, [r5], #4
 8055632:	f005 fb0b 	bl	805ac4c <_ZdlPvj>
 8055636:	e7f6      	b.n	8055626 <_ZN8lexxhard16runaway_detector10._anon_374D1Ev+0x24>
 8055638:	6861      	ldr	r1, [r4, #4]
 805563a:	6820      	ldr	r0, [r4, #0]
 805563c:	0089      	lsls	r1, r1, #2
 805563e:	f005 fb05 	bl	805ac4c <_ZdlPvj>
 8055642:	4620      	mov	r0, r4
 8055644:	bd70      	pop	{r4, r5, r6, pc}

08055646 <arch_printk_char_out>:
}
 8055646:	2000      	movs	r0, #0
 8055648:	4770      	bx	lr

0805564a <str_out>:
{
 805564a:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 805564c:	688a      	ldr	r2, [r1, #8]
 805564e:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
 8055650:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8055652:	b114      	cbz	r4, 805565a <str_out+0x10>
 8055654:	684b      	ldr	r3, [r1, #4]
 8055656:	4293      	cmp	r3, r2
 8055658:	dc01      	bgt.n	805565e <str_out+0x14>
		ctx->count++;
 805565a:	608d      	str	r5, [r1, #8]
}
 805565c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
 805565e:	3b01      	subs	r3, #1
		ctx->str[ctx->count++] = '\0';
 8055660:	608d      	str	r5, [r1, #8]
	if (ctx->count == ctx->max - 1) {
 8055662:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
 8055664:	bf0a      	itet	eq
 8055666:	2200      	moveq	r2, #0
		ctx->str[ctx->count++] = c;
 8055668:	54a0      	strbne	r0, [r4, r2]
		ctx->str[ctx->count++] = '\0';
 805566a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
 805566c:	e7f6      	b.n	805565c <str_out+0x12>

0805566e <printk>:
{
 805566e:	b40f      	push	{r0, r1, r2, r3}
 8055670:	b507      	push	{r0, r1, r2, lr}
 8055672:	a904      	add	r1, sp, #16
 8055674:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8055678:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
 805567a:	f7ef f969 	bl	8044950 <vprintk>
}
 805567e:	b003      	add	sp, #12
 8055680:	f85d eb04 	ldr.w	lr, [sp], #4
 8055684:	b004      	add	sp, #16
 8055686:	4770      	bx	lr

08055688 <snprintk>:
{
 8055688:	b40c      	push	{r2, r3}
 805568a:	b507      	push	{r0, r1, r2, lr}
 805568c:	ab04      	add	r3, sp, #16
 805568e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 8055692:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 8055694:	f7ef f96a 	bl	804496c <vsnprintk>
}
 8055698:	b003      	add	sp, #12
 805569a:	f85d eb04 	ldr.w	lr, [sp], #4
 805569e:	b002      	add	sp, #8
 80556a0:	4770      	bx	lr

080556a2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 80556a2:	4604      	mov	r4, r0
 80556a4:	4608      	mov	r0, r1
 80556a6:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 80556a8:	461a      	mov	r2, r3
{
 80556aa:	b508      	push	{r3, lr}
	entry(p1, p2, p3);
 80556ac:	47a0      	blx	r4
	return z_impl_z_current_get();
 80556ae:	f7fc fe13 	bl	80522d8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 80556b2:	f7f3 fa6d 	bl	8048b90 <z_impl_k_thread_abort>

080556b6 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 80556b6:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 80556b8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 80556bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
 80556c0:	bf2c      	ite	cs
 80556c2:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
 80556c6:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
 80556ca:	4770      	bx	lr

080556cc <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 80556cc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
 80556d0:	6880      	ldr	r0, [r0, #8]
 80556d2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
 80556d6:	bf2c      	ite	cs
 80556d8:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 80556dc:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
 80556e0:	4770      	bx	lr

080556e2 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 80556e2:	2201      	movs	r2, #1
{
 80556e4:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 80556e6:	f7ff ffe6 	bl	80556b6 <chunk_field>
}
 80556ea:	40d0      	lsrs	r0, r2
 80556ec:	bd08      	pop	{r3, pc}

080556ee <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 80556ee:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 80556f0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 80556f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80556f8:	d308      	bcc.n	805570c <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 80556fa:	684b      	ldr	r3, [r1, #4]
		if (used) {
 80556fc:	b11a      	cbz	r2, 8055706 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 80556fe:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8055702:	604b      	str	r3, [r1, #4]
 8055704:	4770      	bx	lr
 8055706:	f023 0301 	bic.w	r3, r3, #1
 805570a:	e7fa      	b.n	8055702 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 805570c:	884b      	ldrh	r3, [r1, #2]
		if (used) {
 805570e:	b11a      	cbz	r2, 8055718 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8055710:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8055714:	804b      	strh	r3, [r1, #2]
		}
	}
}
 8055716:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8055718:	f023 0301 	bic.w	r3, r3, #1
 805571c:	e7fa      	b.n	8055714 <set_chunk_used+0x26>

0805571e <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 805571e:	0053      	lsls	r3, r2, #1
 8055720:	2201      	movs	r2, #1
 8055722:	f7ff bfd3 	b.w	80556cc <chunk_set>

08055726 <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 8055726:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 805572a:	f101 0101 	add.w	r1, r1, #1
	return big_heap(h) ? 8 : 4;
 805572e:	bf2c      	ite	cs
 8055730:	2008      	movcs	r0, #8
 8055732:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8055734:	3008      	adds	r0, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 8055736:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
 805573a:	fab0 f080 	clz	r0, r0
}
 805573e:	f1c0 001f 	rsb	r0, r0, #31
 8055742:	4770      	bx	lr

08055744 <free_list_remove_bidx>:

	return ret;
}

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
 8055744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8055748:	460e      	mov	r6, r1
 805574a:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
 805574c:	2203      	movs	r2, #3
 805574e:	4604      	mov	r4, r0
 8055750:	f7ff ffb1 	bl	80556b6 <chunk_field>

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
 8055754:	4286      	cmp	r6, r0
 8055756:	4605      	mov	r5, r0
 8055758:	f107 0804 	add.w	r8, r7, #4
 805575c:	d10b      	bne.n	8055776 <free_list_remove_bidx+0x32>
		/* this is the last chunk */
		h->avail_buckets &= ~(1 << bidx);
 805575e:	2301      	movs	r3, #1
 8055760:	fa03 f707 	lsl.w	r7, r3, r7
 8055764:	68e3      	ldr	r3, [r4, #12]
 8055766:	ea23 0307 	bic.w	r3, r3, r7
 805576a:	60e3      	str	r3, [r4, #12]
		b->next = 0;
 805576c:	2300      	movs	r3, #0
 805576e:	f844 3028 	str.w	r3, [r4, r8, lsl #2]

		b->next = second;
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
 8055772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
 8055776:	4631      	mov	r1, r6
 8055778:	2202      	movs	r2, #2
 805577a:	4620      	mov	r0, r4
 805577c:	f7ff ff9b 	bl	80556b6 <chunk_field>
 8055780:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
 8055782:	462b      	mov	r3, r5
 8055784:	4601      	mov	r1, r0
 8055786:	2203      	movs	r2, #3
 8055788:	4620      	mov	r0, r4
		b->next = second;
 805578a:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
 805578e:	f7ff ff9d 	bl	80556cc <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 8055792:	4633      	mov	r3, r6
 8055794:	4629      	mov	r1, r5
 8055796:	4620      	mov	r0, r4
 8055798:	2202      	movs	r2, #2
}
 805579a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 805579e:	f7ff bf95 	b.w	80556cc <chunk_set>

080557a2 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
 80557a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80557a6:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
 80557a8:	6880      	ldr	r0, [r0, #8]
{
 80557aa:	460f      	mov	r7, r1
	int bi = bucket_idx(h, sz);
 80557ac:	f7ff ffbb 	bl	8055726 <bucket_idx.isra.0>
 80557b0:	eb04 0980 	add.w	r9, r4, r0, lsl #2
 80557b4:	4605      	mov	r5, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
 80557b6:	f8d9 8010 	ldr.w	r8, [r9, #16]
 80557ba:	f1b8 0f00 	cmp.w	r8, #0
 80557be:	d01c      	beq.n	80557fa <alloc_chunk+0x58>
 80557c0:	2603      	movs	r6, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
 80557c2:	f8d9 1010 	ldr.w	r1, [r9, #16]
			if (chunk_size(h, c) >= sz) {
 80557c6:	4620      	mov	r0, r4
 80557c8:	9101      	str	r1, [sp, #4]
 80557ca:	f7ff ff8a 	bl	80556e2 <chunk_size>
 80557ce:	42b8      	cmp	r0, r7
 80557d0:	9901      	ldr	r1, [sp, #4]
 80557d2:	d308      	bcc.n	80557e6 <alloc_chunk+0x44>
				free_list_remove_bidx(h, c, bi);
 80557d4:	462a      	mov	r2, r5

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
 80557d6:	4620      	mov	r0, r4
 80557d8:	f7ff ffb4 	bl	8055744 <free_list_remove_bidx>
 80557dc:	9901      	ldr	r1, [sp, #4]
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
 80557de:	4608      	mov	r0, r1
 80557e0:	b003      	add	sp, #12
 80557e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return chunk_field(h, c, FREE_NEXT);
 80557e6:	2203      	movs	r2, #3
 80557e8:	4620      	mov	r0, r4
 80557ea:	f7ff ff64 	bl	80556b6 <chunk_field>
		} while (--i && b->next != first);
 80557ee:	3e01      	subs	r6, #1
			b->next = next_free_chunk(h, c);
 80557f0:	f8c9 0010 	str.w	r0, [r9, #16]
		} while (--i && b->next != first);
 80557f4:	d001      	beq.n	80557fa <alloc_chunk+0x58>
 80557f6:	4580      	cmp	r8, r0
 80557f8:	d1e3      	bne.n	80557c2 <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
 80557fa:	3501      	adds	r5, #1
 80557fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8055800:	68e3      	ldr	r3, [r4, #12]
 8055802:	40a9      	lsls	r1, r5
	if (bmask != 0U) {
 8055804:	4019      	ands	r1, r3
 8055806:	d0ea      	beq.n	80557de <alloc_chunk+0x3c>
		int minbucket = __builtin_ctz(bmask);
 8055808:	fa91 f2a1 	rbit	r2, r1
 805580c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
 8055810:	1d13      	adds	r3, r2, #4
 8055812:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
 8055816:	9101      	str	r1, [sp, #4]
 8055818:	e7dd      	b.n	80557d6 <alloc_chunk+0x34>

0805581a <split_chunks>:
{
 805581a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 805581c:	4614      	mov	r4, r2
 805581e:	460e      	mov	r6, r1
 8055820:	4605      	mov	r5, r0
	chunksz_t sz0 = chunk_size(h, lc);
 8055822:	f7ff ff5e 	bl	80556e2 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
 8055826:	1b32      	subs	r2, r6, r4
	chunksz_t lsz = rc - lc;
 8055828:	1ba3      	subs	r3, r4, r6
	set_chunk_size(h, lc, lsz);
 805582a:	4631      	mov	r1, r6
	chunksz_t rsz = sz0 - lsz;
 805582c:	1817      	adds	r7, r2, r0
	set_chunk_size(h, lc, lsz);
 805582e:	461a      	mov	r2, r3
 8055830:	4628      	mov	r0, r5
 8055832:	9301      	str	r3, [sp, #4]
 8055834:	f7ff ff73 	bl	805571e <set_chunk_size>
	set_chunk_size(h, rc, rsz);
 8055838:	463a      	mov	r2, r7
 805583a:	4621      	mov	r1, r4
 805583c:	4628      	mov	r0, r5
 805583e:	f7ff ff6e 	bl	805571e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 8055842:	9b01      	ldr	r3, [sp, #4]
 8055844:	2200      	movs	r2, #0
 8055846:	4621      	mov	r1, r4
 8055848:	4628      	mov	r0, r5
 805584a:	f7ff ff3f 	bl	80556cc <chunk_set>
	return c + chunk_size(h, c);
 805584e:	4621      	mov	r1, r4
 8055850:	4628      	mov	r0, r5
 8055852:	f7ff ff46 	bl	80556e2 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 8055856:	463b      	mov	r3, r7
 8055858:	1821      	adds	r1, r4, r0
 805585a:	2200      	movs	r2, #0
 805585c:	4628      	mov	r0, r5
}
 805585e:	b003      	add	sp, #12
 8055860:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8055864:	f7ff bf32 	b.w	80556cc <chunk_set>

08055868 <free_list_add>:
{
 8055868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->end_chunk);
 805586c:	6886      	ldr	r6, [r0, #8]
 805586e:	460d      	mov	r5, r1
 8055870:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
 8055872:	f7ff ff36 	bl	80556e2 <chunk_size>
 8055876:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 805587a:	4601      	mov	r1, r0
 805587c:	d301      	bcc.n	8055882 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
 805587e:	2801      	cmp	r0, #1
 8055880:	d033      	beq.n	80558ea <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
 8055882:	4630      	mov	r0, r6
 8055884:	f7ff ff4f 	bl	8055726 <bucket_idx.isra.0>
	if (b->next == 0U) {
 8055888:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 805588c:	6916      	ldr	r6, [r2, #16]
 805588e:	b99e      	cbnz	r6, 80558b8 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
 8055890:	2301      	movs	r3, #1
	chunk_set(h, c, FREE_PREV, prev);
 8055892:	4629      	mov	r1, r5
 8055894:	fa03 f000 	lsl.w	r0, r3, r0
 8055898:	68e3      	ldr	r3, [r4, #12]
 805589a:	4303      	orrs	r3, r0
 805589c:	4620      	mov	r0, r4
 805589e:	60e3      	str	r3, [r4, #12]
 80558a0:	462b      	mov	r3, r5
		b->next = c;
 80558a2:	6115      	str	r5, [r2, #16]
 80558a4:	2202      	movs	r2, #2
 80558a6:	f7ff ff11 	bl	80556cc <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 80558aa:	2203      	movs	r2, #3
 80558ac:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
 80558ae:	4620      	mov	r0, r4
}
 80558b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80558b4:	f7ff bf0a 	b.w	80556cc <chunk_set>
	return chunk_field(h, c, FREE_PREV);
 80558b8:	2202      	movs	r2, #2
 80558ba:	4631      	mov	r1, r6
 80558bc:	4620      	mov	r0, r4
 80558be:	f7ff fefa 	bl	80556b6 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
 80558c2:	4629      	mov	r1, r5
 80558c4:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
 80558c6:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
 80558c8:	4620      	mov	r0, r4
 80558ca:	f7ff feff 	bl	80556cc <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 80558ce:	2203      	movs	r2, #3
 80558d0:	4633      	mov	r3, r6
 80558d2:	4629      	mov	r1, r5
 80558d4:	4620      	mov	r0, r4
 80558d6:	f7ff fef9 	bl	80556cc <chunk_set>
 80558da:	4639      	mov	r1, r7
 80558dc:	462b      	mov	r3, r5
 80558de:	4620      	mov	r0, r4
 80558e0:	f7ff fef4 	bl	80556cc <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 80558e4:	2202      	movs	r2, #2
 80558e6:	4631      	mov	r1, r6
 80558e8:	e7e1      	b.n	80558ae <free_list_add+0x46>
 80558ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080558ee <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
 80558ee:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
 80558f0:	6806      	ldr	r6, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
 80558f2:	b909      	cbnz	r1, 80558f8 <sys_heap_alloc+0xa>
		return NULL;
 80558f4:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
 80558f6:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
 80558f8:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
 80558fa:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80558fe:	d9f9      	bls.n	80558f4 <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
 8055900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8055904:	f101 0407 	add.w	r4, r1, #7
	chunkid_t c = alloc_chunk(h, chunk_sz);
 8055908:	4630      	mov	r0, r6
	return big_heap(h) ? 8 : 4;
 805590a:	bf2c      	ite	cs
 805590c:	2208      	movcs	r2, #8
 805590e:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8055910:	4414      	add	r4, r2
 8055912:	08e4      	lsrs	r4, r4, #3
 8055914:	4621      	mov	r1, r4
 8055916:	f7ff ff44 	bl	80557a2 <alloc_chunk>
	if (c == 0U) {
 805591a:	4605      	mov	r5, r0
 805591c:	2800      	cmp	r0, #0
 805591e:	d0e9      	beq.n	80558f4 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
 8055920:	4601      	mov	r1, r0
 8055922:	4630      	mov	r0, r6
 8055924:	f7ff fedd 	bl	80556e2 <chunk_size>
 8055928:	42a0      	cmp	r0, r4
 805592a:	d909      	bls.n	8055940 <sys_heap_alloc+0x52>
		split_chunks(h, c, c + chunk_sz);
 805592c:	442c      	add	r4, r5
 805592e:	4629      	mov	r1, r5
 8055930:	4630      	mov	r0, r6
 8055932:	4622      	mov	r2, r4
 8055934:	f7ff ff71 	bl	805581a <split_chunks>
		free_list_add(h, c + chunk_sz);
 8055938:	4621      	mov	r1, r4
 805593a:	4630      	mov	r0, r6
 805593c:	f7ff ff94 	bl	8055868 <free_list_add>
	set_chunk_used(h, c, true);
 8055940:	4629      	mov	r1, r5
 8055942:	4630      	mov	r0, r6
 8055944:	2201      	movs	r2, #1
 8055946:	f7ff fed2 	bl	80556ee <set_chunk_used>
	return big_heap(h) ? 8 : 4;
 805594a:	68b3      	ldr	r3, [r6, #8]
 805594c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8055950:	bf2c      	ite	cs
 8055952:	2308      	movcs	r3, #8
 8055954:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
 8055956:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 805595a:	4428      	add	r0, r5
	return chunk_mem(h, c);
 805595c:	e7cb      	b.n	80558f6 <sys_heap_alloc+0x8>

0805595e <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
 805595e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
 8055962:	424b      	negs	r3, r1
	struct z_heap *h = heap->heap;
 8055964:	6806      	ldr	r6, [r0, #0]
{
 8055966:	4614      	mov	r4, r2
	rew = align & -align;
 8055968:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
 805596c:	ea31 0303 	bics.w	r3, r1, r3
	return big_heap_chunks(h->end_chunk);
 8055970:	68b2      	ldr	r2, [r6, #8]
 8055972:	d00e      	beq.n	8055992 <sys_heap_aligned_alloc+0x34>
	return big_heap(h) ? 8 : 4;
 8055974:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8055978:	46b9      	mov	r9, r7
 805597a:	bf2c      	ite	cs
 805597c:	2308      	movcs	r3, #8
 805597e:	2304      	movcc	r3, #4
 8055980:	42bb      	cmp	r3, r7
 8055982:	bf28      	it	cs
 8055984:	463b      	movcs	r3, r7
		align -= rew;
 8055986:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
 8055988:	b994      	cbnz	r4, 80559b0 <sys_heap_aligned_alloc+0x52>
		return NULL;
 805598a:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
 805598c:	4628      	mov	r0, r5
 805598e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8055992:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8055996:	bf34      	ite	cc
 8055998:	2304      	movcc	r3, #4
 805599a:	2308      	movcs	r3, #8
		if (align <= chunk_header_bytes(h)) {
 805599c:	4299      	cmp	r1, r3
 805599e:	d804      	bhi.n	80559aa <sys_heap_aligned_alloc+0x4c>
			return sys_heap_alloc(heap, bytes);
 80559a0:	4621      	mov	r1, r4
}
 80559a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
 80559a6:	f7ff bfa2 	b.w	80558ee <sys_heap_alloc>
		rew = 0;
 80559aa:	f04f 0900 	mov.w	r9, #0
 80559ae:	e7eb      	b.n	8055988 <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
 80559b0:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
 80559b4:	d9e9      	bls.n	805598a <sys_heap_aligned_alloc+0x2c>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
 80559b6:	1de1      	adds	r1, r4, #7
 80559b8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	chunkid_t c0 = alloc_chunk(h, padded_sz);
 80559bc:	4630      	mov	r0, r6
 80559be:	4439      	add	r1, r7
 80559c0:	bf2c      	ite	cs
 80559c2:	2208      	movcs	r2, #8
 80559c4:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 80559c6:	1ac9      	subs	r1, r1, r3
 80559c8:	4411      	add	r1, r2
 80559ca:	08c9      	lsrs	r1, r1, #3
 80559cc:	f7ff fee9 	bl	80557a2 <alloc_chunk>
	if (c0 == 0) {
 80559d0:	4680      	mov	r8, r0
 80559d2:	2800      	cmp	r0, #0
 80559d4:	d0d9      	beq.n	805598a <sys_heap_aligned_alloc+0x2c>
	return big_heap(h) ? 8 : 4;
 80559d6:	68b3      	ldr	r3, [r6, #8]
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
 80559d8:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
 80559dc:	1e7a      	subs	r2, r7, #1
 80559de:	427f      	negs	r7, r7
 80559e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80559e4:	bf2c      	ite	cs
 80559e6:	2308      	movcs	r3, #8
 80559e8:	2304      	movcc	r3, #4
 80559ea:	441d      	add	r5, r3
 80559ec:	4435      	add	r5, r6
 80559ee:	4415      	add	r5, r2
 80559f0:	403d      	ands	r5, r7
 80559f2:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 80559f6:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 80559f8:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 80559fa:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 80559fc:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 80559fe:	f024 0407 	bic.w	r4, r4, #7
	if (c > c0) {
 8055a02:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 8055a06:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
 8055a0a:	eba4 0406 	sub.w	r4, r4, r6
 8055a0e:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
 8055a12:	d208      	bcs.n	8055a26 <sys_heap_aligned_alloc+0xc8>
		split_chunks(h, c0, c);
 8055a14:	4601      	mov	r1, r0
 8055a16:	463a      	mov	r2, r7
 8055a18:	4630      	mov	r0, r6
 8055a1a:	f7ff fefe 	bl	805581a <split_chunks>
		free_list_add(h, c0);
 8055a1e:	4641      	mov	r1, r8
 8055a20:	4630      	mov	r0, r6
 8055a22:	f7ff ff21 	bl	8055868 <free_list_add>
	return c + chunk_size(h, c);
 8055a26:	4639      	mov	r1, r7
 8055a28:	4630      	mov	r0, r6
 8055a2a:	f7ff fe5a 	bl	80556e2 <chunk_size>
 8055a2e:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
 8055a30:	4284      	cmp	r4, r0
 8055a32:	d208      	bcs.n	8055a46 <sys_heap_aligned_alloc+0xe8>
		split_chunks(h, c, c_end);
 8055a34:	4639      	mov	r1, r7
 8055a36:	4630      	mov	r0, r6
 8055a38:	4622      	mov	r2, r4
 8055a3a:	f7ff feee 	bl	805581a <split_chunks>
		free_list_add(h, c_end);
 8055a3e:	4621      	mov	r1, r4
 8055a40:	4630      	mov	r0, r6
 8055a42:	f7ff ff11 	bl	8055868 <free_list_add>
	set_chunk_used(h, c, true);
 8055a46:	2201      	movs	r2, #1
 8055a48:	4639      	mov	r1, r7
 8055a4a:	4630      	mov	r0, r6
 8055a4c:	f7ff fe4f 	bl	80556ee <set_chunk_used>
	return mem;
 8055a50:	e79c      	b.n	805598c <sys_heap_aligned_alloc+0x2e>

08055a52 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
 8055a52:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 8055a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8055a58:	bf2c      	ite	cs
 8055a5a:	2408      	movcs	r4, #8
 8055a5c:	2404      	movcc	r4, #4
	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8055a5e:	1dce      	adds	r6, r1, #7
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
 8055a60:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
 8055a62:	1b14      	subs	r4, r2, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8055a64:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8055a68:	440c      	add	r4, r1
	heap->heap = h;
 8055a6a:	6006      	str	r6, [r0, #0]
 8055a6c:	f106 0210 	add.w	r2, r6, #16
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8055a70:	f024 0407 	bic.w	r4, r4, #7
	h->avail_buckets = 0;
 8055a74:	60f3      	str	r3, [r6, #12]
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8055a76:	1ba4      	subs	r4, r4, r6
 8055a78:	08e4      	lsrs	r4, r4, #3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8055a7a:	4621      	mov	r1, r4
 8055a7c:	4620      	mov	r0, r4
	h->end_chunk = heap_sz;
 8055a7e:	60b4      	str	r4, [r6, #8]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8055a80:	f7ff fe51 	bl	8055726 <bucket_idx.isra.0>
 8055a84:	1c41      	adds	r1, r0, #1
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 8055a86:	0085      	lsls	r5, r0, #2
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
 8055a88:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8055a8a:	351b      	adds	r5, #27
 8055a8c:	08ed      	lsrs	r5, r5, #3
	for (int i = 0; i < nb_buckets; i++) {
 8055a8e:	428b      	cmp	r3, r1
 8055a90:	db2e      	blt.n	8055af0 <sys_heap_init+0x9e>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
 8055a92:	462a      	mov	r2, r5
 8055a94:	4630      	mov	r0, r6
 8055a96:	2100      	movs	r1, #0
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8055a98:	1b67      	subs	r7, r4, r5
	set_chunk_size(h, 0, chunk0_size);
 8055a9a:	f7ff fe40 	bl	805571e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 8055a9e:	2300      	movs	r3, #0
 8055aa0:	4630      	mov	r0, r6
 8055aa2:	461a      	mov	r2, r3
 8055aa4:	4619      	mov	r1, r3
 8055aa6:	f7ff fe11 	bl	80556cc <chunk_set>
	set_chunk_used(h, 0, true);
 8055aaa:	4619      	mov	r1, r3
 8055aac:	4630      	mov	r0, r6
 8055aae:	2201      	movs	r2, #1
 8055ab0:	f7ff fe1d 	bl	80556ee <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8055ab4:	463a      	mov	r2, r7
 8055ab6:	4629      	mov	r1, r5
 8055ab8:	f7ff fe31 	bl	805571e <set_chunk_size>
 8055abc:	462b      	mov	r3, r5
 8055abe:	2200      	movs	r2, #0
 8055ac0:	4629      	mov	r1, r5
 8055ac2:	4630      	mov	r0, r6
 8055ac4:	f7ff fe02 	bl	80556cc <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
 8055ac8:	4621      	mov	r1, r4
 8055aca:	4630      	mov	r0, r6
 8055acc:	f7ff fe27 	bl	805571e <set_chunk_size>
 8055ad0:	463b      	mov	r3, r7
 8055ad2:	4621      	mov	r1, r4
 8055ad4:	4630      	mov	r0, r6
 8055ad6:	2200      	movs	r2, #0
 8055ad8:	f7ff fdf8 	bl	80556cc <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
 8055adc:	4621      	mov	r1, r4
 8055ade:	4630      	mov	r0, r6
 8055ae0:	2201      	movs	r2, #1
 8055ae2:	f7ff fe04 	bl	80556ee <set_chunk_used>

	free_list_add(h, chunk0_size);
 8055ae6:	4629      	mov	r1, r5
}
 8055ae8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
 8055aec:	f7ff bebc 	b.w	8055868 <free_list_add>
	for (int i = 0; i < nb_buckets; i++) {
 8055af0:	3301      	adds	r3, #1
		h->buckets[i].next = 0;
 8055af2:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
 8055af6:	e7ca      	b.n	8055a8e <sys_heap_init+0x3c>

08055af8 <_ldiv5>:
	uint32_t v_lo = *v;
 8055af8:	e9d0 2100 	ldrd	r2, r1, [r0]
{
 8055afc:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
 8055afe:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
 8055b02:	fba2 2403 	umull	r2, r4, r2, r3
 8055b06:	18d5      	adds	r5, r2, r3
 8055b08:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
 8055b0c:	fba1 1303 	umull	r1, r3, r1, r3
 8055b10:	1852      	adds	r2, r2, r1
 8055b12:	eb44 0403 	adc.w	r4, r4, r3
 8055b16:	1952      	adds	r2, r2, r5
 8055b18:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
 8055b1c:	1889      	adds	r1, r1, r2
 8055b1e:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
 8055b22:	e9c0 1300 	strd	r1, r3, [r0]
}
 8055b26:	bd30      	pop	{r4, r5, pc}

08055b28 <_get_digit>:
	if (*digit_count > 0) {
 8055b28:	680b      	ldr	r3, [r1, #0]
 8055b2a:	2b00      	cmp	r3, #0
{
 8055b2c:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
 8055b2e:	dd10      	ble.n	8055b52 <_get_digit+0x2a>
		--*digit_count;
 8055b30:	3b01      	subs	r3, #1
		*fr *= 10U;
 8055b32:	220a      	movs	r2, #10
 8055b34:	6844      	ldr	r4, [r0, #4]
		--*digit_count;
 8055b36:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
 8055b38:	6803      	ldr	r3, [r0, #0]
 8055b3a:	fba3 1302 	umull	r1, r3, r3, r2
 8055b3e:	fb02 3304 	mla	r3, r2, r4, r3
		rval = ((*fr >> 60) & 0xF) + '0';
 8055b42:	0f1a      	lsrs	r2, r3, #28
		*fr &= (BIT64(60) - 1U);
 8055b44:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
		rval = ((*fr >> 60) & 0xF) + '0';
 8055b48:	3230      	adds	r2, #48	; 0x30
		*fr &= (BIT64(60) - 1U);
 8055b4a:	e9c0 1300 	strd	r1, r3, [r0]
}
 8055b4e:	4610      	mov	r0, r2
 8055b50:	bd10      	pop	{r4, pc}
		rval = '0';
 8055b52:	2230      	movs	r2, #48	; 0x30
 8055b54:	e7fb      	b.n	8055b4e <_get_digit+0x26>

08055b56 <outs>:
{
 8055b56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8055b5a:	4680      	mov	r8, r0
 8055b5c:	4689      	mov	r9, r1
 8055b5e:	4616      	mov	r6, r2
 8055b60:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8055b62:	4615      	mov	r5, r2
 8055b64:	42bd      	cmp	r5, r7
 8055b66:	eba5 0406 	sub.w	r4, r5, r6
 8055b6a:	d305      	bcc.n	8055b78 <outs+0x22>
 8055b6c:	b10f      	cbz	r7, 8055b72 <outs+0x1c>
	return (int)count;
 8055b6e:	4620      	mov	r0, r4
 8055b70:	e008      	b.n	8055b84 <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8055b72:	782b      	ldrb	r3, [r5, #0]
 8055b74:	2b00      	cmp	r3, #0
 8055b76:	d0fa      	beq.n	8055b6e <outs+0x18>
		int rc = out((int)*sp++, ctx);
 8055b78:	4649      	mov	r1, r9
 8055b7a:	f815 0b01 	ldrb.w	r0, [r5], #1
 8055b7e:	47c0      	blx	r8
		if (rc < 0) {
 8055b80:	2800      	cmp	r0, #0
 8055b82:	daef      	bge.n	8055b64 <outs+0xe>
}
 8055b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08055b88 <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
 8055b88:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8055b8c:	4770      	bx	lr

08055b8e <ring_buf_put_claim>:
{
	return val >= max ? (val - max) : val;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
 8055b8e:	b570      	push	{r4, r5, r6, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 8055b90:	6985      	ldr	r5, [r0, #24]
{
 8055b92:	4604      	mov	r4, r0
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
 8055b94:	6886      	ldr	r6, [r0, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 8055b96:	6900      	ldr	r0, [r0, #16]
 8055b98:	b185      	cbz	r5, 8055bbc <ring_buf_put_claim+0x2e>
 8055b9a:	4035      	ands	r5, r6
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
 8055b9c:	6823      	ldr	r3, [r4, #0]
 8055b9e:	4403      	add	r3, r0
	trail_size = buf->size - tmp_trail_mod;
 8055ba0:	1b40      	subs	r0, r0, r5
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
 8055ba2:	1b9b      	subs	r3, r3, r6

	/* Limit requested size to available size. */
	size = MIN(size, space);
 8055ba4:	429a      	cmp	r2, r3
 8055ba6:	bf28      	it	cs
 8055ba8:	461a      	movcs	r2, r3

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
 8055baa:	6963      	ldr	r3, [r4, #20]
	allocated = MIN(trail_size, size);
 8055bac:	4290      	cmp	r0, r2
	*data = &buf->buf.buf8[tmp_trail_mod];
 8055bae:	442b      	add	r3, r5
	allocated = MIN(trail_size, size);
 8055bb0:	bf28      	it	cs
 8055bb2:	4610      	movcs	r0, r2
	*data = &buf->buf.buf8[tmp_trail_mod];
 8055bb4:	600b      	str	r3, [r1, #0]

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
 8055bb6:	4406      	add	r6, r0
	buf->misc.byte_mode.tmp_tail =
 8055bb8:	60a6      	str	r6, [r4, #8]

	return allocated;
}
 8055bba:	bd70      	pop	{r4, r5, r6, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 8055bbc:	fbb6 f5f0 	udiv	r5, r6, r0
 8055bc0:	fb00 6515 	mls	r5, r0, r5, r6
 8055bc4:	e7ea      	b.n	8055b9c <ring_buf_put_claim+0xe>

08055bc6 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
 8055bc6:	b570      	push	{r4, r5, r6, lr}
 8055bc8:	4605      	mov	r5, r0
 8055bca:	460c      	mov	r4, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
 8055bcc:	f7ff ffdc 	bl	8055b88 <ring_buf_get_rewind_threshold>

	if ((buf->tail + size) > (buf->head + buf->size)) {
 8055bd0:	686e      	ldr	r6, [r5, #4]
 8055bd2:	692a      	ldr	r2, [r5, #16]
 8055bd4:	682b      	ldr	r3, [r5, #0]
 8055bd6:	1931      	adds	r1, r6, r4
 8055bd8:	4413      	add	r3, r2
 8055bda:	4299      	cmp	r1, r3
 8055bdc:	d80a      	bhi.n	8055bf4 <ring_buf_put_finish+0x2e>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
 8055bde:	4286      	cmp	r6, r0
	return buf_size * (threshold / buf_size);
 8055be0:	bf8a      	itet	hi
 8055be2:	fbb0 f3f2 	udivhi	r3, r0, r2
		rew = get_rewind_value(buf->size, threshold);
	} else {
		rew = 0;
 8055be6:	2300      	movls	r3, #0
	return buf_size * (threshold / buf_size);
 8055be8:	4353      	mulhi	r3, r2
	}

	buf->tail += (size - rew);
	buf->misc.byte_mode.tmp_tail = buf->tail;

	return 0;
 8055bea:	2000      	movs	r0, #0
	buf->tail += (size - rew);
 8055bec:	1ac9      	subs	r1, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
 8055bee:	e9c5 1101 	strd	r1, r1, [r5, #4]
}
 8055bf2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
 8055bf4:	f06f 0015 	mvn.w	r0, #21
 8055bf8:	e7fb      	b.n	8055bf2 <ring_buf_put_finish+0x2c>

08055bfa <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
 8055bfa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8055bfe:	4680      	mov	r8, r0
 8055c00:	460e      	mov	r6, r1
 8055c02:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
 8055c04:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
 8055c06:	462a      	mov	r2, r5
 8055c08:	a901      	add	r1, sp, #4
 8055c0a:	4640      	mov	r0, r8
 8055c0c:	f7ff ffbf 	bl	8055b8e <ring_buf_put_claim>
 8055c10:	4604      	mov	r4, r0
 8055c12:	4602      	mov	r2, r0
 8055c14:	4631      	mov	r1, r6
 8055c16:	9801      	ldr	r0, [sp, #4]
		memcpy(dst, data, partial_size);
		total_size += partial_size;
 8055c18:	4427      	add	r7, r4
 8055c1a:	f005 f8dc 	bl	805add6 <memcpy>
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
 8055c1e:	1b2d      	subs	r5, r5, r4
		data += partial_size;
 8055c20:	4426      	add	r6, r4
	} while (size && partial_size);
 8055c22:	d001      	beq.n	8055c28 <ring_buf_put+0x2e>
 8055c24:	2c00      	cmp	r4, #0
 8055c26:	d1ee      	bne.n	8055c06 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
 8055c28:	4639      	mov	r1, r7
 8055c2a:	4640      	mov	r0, r8
 8055c2c:	f7ff ffcb 	bl	8055bc6 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
 8055c30:	4638      	mov	r0, r7
 8055c32:	b002      	add	sp, #8
 8055c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08055c38 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
 8055c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
 8055c3c:	68c3      	ldr	r3, [r0, #12]
{
 8055c3e:	4604      	mov	r4, r0
	uint32_t tail = buf->tail;
 8055c40:	6846      	ldr	r6, [r0, #4]
{
 8055c42:	460f      	mov	r7, r1
 8055c44:	4690      	mov	r8, r2
	if (tail < buf->misc.byte_mode.tmp_head) {
 8055c46:	42b3      	cmp	r3, r6
 8055c48:	d906      	bls.n	8055c58 <ring_buf_get_claim+0x20>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
 8055c4a:	6905      	ldr	r5, [r0, #16]
 8055c4c:	f7ff ff9c 	bl	8055b88 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size);
 8055c50:	fbb0 f0f5 	udiv	r0, r0, r5
		tail += get_rewind_value(buf->size,
 8055c54:	fb05 6600 	mla	r6, r5, r0, r6
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 8055c58:	69a5      	ldr	r5, [r4, #24]
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
 8055c5a:	68e1      	ldr	r1, [r4, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 8055c5c:	6923      	ldr	r3, [r4, #16]
 8055c5e:	b18d      	cbz	r5, 8055c84 <ring_buf_get_claim+0x4c>
 8055c60:	400d      	ands	r5, r1
	space = tail - buf->misc.byte_mode.tmp_head;
 8055c62:	1a70      	subs	r0, r6, r1
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
 8055c64:	4540      	cmp	r0, r8
 8055c66:	4602      	mov	r2, r0
	trail_size = buf->size - tmp_head_mod;
 8055c68:	eba3 0005 	sub.w	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);

	*data = &buf->buf.buf8[tmp_head_mod];
 8055c6c:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(size, space);
 8055c6e:	bf28      	it	cs
 8055c70:	4642      	movcs	r2, r8
	*data = &buf->buf.buf8[tmp_head_mod];
 8055c72:	442b      	add	r3, r5
	granted_size = MIN(trail_size, granted_size);
 8055c74:	4290      	cmp	r0, r2
	*data = &buf->buf.buf8[tmp_head_mod];
 8055c76:	603b      	str	r3, [r7, #0]
	granted_size = MIN(trail_size, granted_size);
 8055c78:	bf28      	it	cs
 8055c7a:	4610      	movcs	r0, r2
	buf->misc.byte_mode.tmp_head += granted_size;
 8055c7c:	4401      	add	r1, r0
 8055c7e:	60e1      	str	r1, [r4, #12]

	return granted_size;
}
 8055c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 8055c84:	fbb1 f5f3 	udiv	r5, r1, r3
 8055c88:	fb03 1515 	mls	r5, r3, r5, r1
 8055c8c:	e7e9      	b.n	8055c62 <ring_buf_get_claim+0x2a>

08055c8e <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
 8055c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = buf->tail;
 8055c90:	6846      	ldr	r6, [r0, #4]
{
 8055c92:	4605      	mov	r5, r0
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
 8055c94:	68c3      	ldr	r3, [r0, #12]
{
 8055c96:	460c      	mov	r4, r1
	if (tail < buf->misc.byte_mode.tmp_head) {
 8055c98:	42b3      	cmp	r3, r6
 8055c9a:	d912      	bls.n	8055cc2 <ring_buf_get_finish+0x34>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
 8055c9c:	6907      	ldr	r7, [r0, #16]
 8055c9e:	f7ff ff73 	bl	8055b88 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size);
 8055ca2:	fbb0 f0f7 	udiv	r0, r0, r7
 8055ca6:	4378      	muls	r0, r7
				       ring_buf_get_rewind_threshold());
		tail += rew;
 8055ca8:	4406      	add	r6, r0
	} else {
		rew = 0;
	}

	if ((buf->head + size) > tail) {
 8055caa:	6829      	ldr	r1, [r5, #0]
 8055cac:	4421      	add	r1, r4
 8055cae:	42b1      	cmp	r1, r6
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
 8055cb0:	bf97      	itett	ls
 8055cb2:	1a09      	subls	r1, r1, r0
		return -EINVAL;
 8055cb4:	f06f 0015 	mvnhi.w	r0, #21
	buf->misc.byte_mode.tmp_head = buf->head;

	return 0;
 8055cb8:	2000      	movls	r0, #0
	buf->head += (size - rew);
 8055cba:	6029      	strls	r1, [r5, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
 8055cbc:	bf98      	it	ls
 8055cbe:	60e9      	strls	r1, [r5, #12]
}
 8055cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = 0;
 8055cc2:	2000      	movs	r0, #0
 8055cc4:	e7f1      	b.n	8055caa <ring_buf_get_finish+0x1c>

08055cc6 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
 8055cc6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8055cca:	4680      	mov	r8, r0
 8055ccc:	460d      	mov	r5, r1
 8055cce:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
 8055cd0:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
 8055cd2:	4632      	mov	r2, r6
 8055cd4:	a901      	add	r1, sp, #4
 8055cd6:	4640      	mov	r0, r8
 8055cd8:	f7ff ffae 	bl	8055c38 <ring_buf_get_claim>
 8055cdc:	4604      	mov	r4, r0
		if (data) {
 8055cde:	b12d      	cbz	r5, 8055cec <ring_buf_get+0x26>
 8055ce0:	4602      	mov	r2, r0
 8055ce2:	4628      	mov	r0, r5
			memcpy(data, src, partial_size);
			data += partial_size;
 8055ce4:	4425      	add	r5, r4
 8055ce6:	9901      	ldr	r1, [sp, #4]
 8055ce8:	f005 f875 	bl	805add6 <memcpy>
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
 8055cec:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
 8055cee:	4427      	add	r7, r4
	} while (size && partial_size);
 8055cf0:	d001      	beq.n	8055cf6 <ring_buf_get+0x30>
 8055cf2:	2c00      	cmp	r4, #0
 8055cf4:	d1ed      	bne.n	8055cd2 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
 8055cf6:	4639      	mov	r1, r7
 8055cf8:	4640      	mov	r0, r8
 8055cfa:	f7ff ffc8 	bl	8055c8e <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
 8055cfe:	4638      	mov	r0, r7
 8055d00:	b002      	add	sp, #8
 8055d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08055d06 <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
 8055d06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8055d0a:	b087      	sub	sp, #28
 8055d0c:	468a      	mov	sl, r1
 8055d0e:	4614      	mov	r4, r2
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
 8055d10:	4605      	mov	r5, r0
{
 8055d12:	9302      	str	r3, [sp, #8]
    if ((pattern == NULL) || (string == NULL))
 8055d14:	b918      	cbnz	r0, 8055d1e <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
 8055d16:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
 8055d18:	b007      	add	sp, #28
 8055d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
 8055d1e:	2900      	cmp	r1, #0
 8055d20:	d0f9      	beq.n	8055d16 <fnmatchx+0x10>
    if (recursion-- == 0)
 8055d22:	9b02      	ldr	r3, [sp, #8]
 8055d24:	2b00      	cmp	r3, #0
 8055d26:	f000 8118 	beq.w	8055f5a <fnmatchx+0x254>
            if (*string == '.' && (flags & FNM_PERIOD) &&
 8055d2a:	f004 0304 	and.w	r3, r4, #4
 8055d2e:	460a      	mov	r2, r1
 8055d30:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
 8055d32:	46a8      	mov	r8, r5
 8055d34:	4621      	mov	r1, r4
 8055d36:	f818 0b01 	ldrb.w	r0, [r8], #1
 8055d3a:	f7ee fea5 	bl	8044a88 <foldcase>
 8055d3e:	4603      	mov	r3, r0
 8055d40:	b2c0      	uxtb	r0, r0
            if ((flags & FNM_LEADING_DIR) && *string == '/')
 8055d42:	7817      	ldrb	r7, [r2, #0]
        switch (c = FOLDCASE(*pattern++, flags)) {
 8055d44:	283f      	cmp	r0, #63	; 0x3f
 8055d46:	4606      	mov	r6, r0
 8055d48:	d025      	beq.n	8055d96 <fnmatchx+0x90>
 8055d4a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 8055d4e:	d10b      	bne.n	8055d68 <fnmatchx+0x62>
 8055d50:	b1c8      	cbz	r0, 8055d86 <fnmatchx+0x80>
 8055d52:	282a      	cmp	r0, #42	; 0x2a
 8055d54:	d036      	beq.n	8055dc4 <fnmatchx+0xbe>
            if (c != FOLDCASE(*string++, flags))
 8055d56:	4621      	mov	r1, r4
 8055d58:	4638      	mov	r0, r7
 8055d5a:	f7ee fe95 	bl	8044a88 <foldcase>
 8055d5e:	4286      	cmp	r6, r0
 8055d60:	f102 0201 	add.w	r2, r2, #1
 8055d64:	d01e      	beq.n	8055da4 <fnmatchx+0x9e>
 8055d66:	e7d6      	b.n	8055d16 <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
 8055d68:	285b      	cmp	r0, #91	; 0x5b
 8055d6a:	d07a      	beq.n	8055e62 <fnmatchx+0x15c>
 8055d6c:	285c      	cmp	r0, #92	; 0x5c
 8055d6e:	d1f2      	bne.n	8055d56 <fnmatchx+0x50>
            if (!(flags & FNM_NOESCAPE)) {
 8055d70:	07e3      	lsls	r3, r4, #31
 8055d72:	d4f0      	bmi.n	8055d56 <fnmatchx+0x50>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
 8055d74:	7868      	ldrb	r0, [r5, #1]
 8055d76:	f7ee fe87 	bl	8044a88 <foldcase>
 8055d7a:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 8055d7e:	bf18      	it	ne
 8055d80:	f105 0802 	addne.w	r8, r5, #2
 8055d84:	e7e7      	b.n	8055d56 <fnmatchx+0x50>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
 8055d86:	06e4      	lsls	r4, r4, #27
 8055d88:	d501      	bpl.n	8055d8e <fnmatchx+0x88>
 8055d8a:	2f2f      	cmp	r7, #47	; 0x2f
 8055d8c:	d0c4      	beq.n	8055d18 <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
 8055d8e:	1e38      	subs	r0, r7, #0
                        0 : FNM_NOMATCH;
 8055d90:	bf18      	it	ne
 8055d92:	2001      	movne	r0, #1
 8055d94:	e7c0      	b.n	8055d18 <fnmatchx+0x12>
            if (*string == EOS)
 8055d96:	2f00      	cmp	r7, #0
 8055d98:	d0bd      	beq.n	8055d16 <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
 8055d9a:	2f2f      	cmp	r7, #47	; 0x2f
 8055d9c:	d104      	bne.n	8055da8 <fnmatchx+0xa2>
 8055d9e:	07a1      	lsls	r1, r4, #30
 8055da0:	d4b9      	bmi.n	8055d16 <fnmatchx+0x10>
            ++string;
 8055da2:	3201      	adds	r2, #1
            break;
 8055da4:	4645      	mov	r5, r8
 8055da6:	e7c4      	b.n	8055d32 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
 8055da8:	2f2e      	cmp	r7, #46	; 0x2e
 8055daa:	d1fa      	bne.n	8055da2 <fnmatchx+0x9c>
 8055dac:	9b04      	ldr	r3, [sp, #16]
 8055dae:	2b00      	cmp	r3, #0
 8055db0:	d0f7      	beq.n	8055da2 <fnmatchx+0x9c>
 8055db2:	4552      	cmp	r2, sl
 8055db4:	d0af      	beq.n	8055d16 <fnmatchx+0x10>
                (string == stringstart ||
 8055db6:	07a3      	lsls	r3, r4, #30
 8055db8:	d5f3      	bpl.n	8055da2 <fnmatchx+0x9c>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
 8055dba:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8055dbe:	2b2f      	cmp	r3, #47	; 0x2f
 8055dc0:	d1ef      	bne.n	8055da2 <fnmatchx+0x9c>
 8055dc2:	e7a8      	b.n	8055d16 <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
 8055dc4:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
 8055dc6:	f7ee fe5f 	bl	8044a88 <foldcase>
 8055dca:	b2c1      	uxtb	r1, r0
            while (c == '*')
 8055dcc:	292a      	cmp	r1, #42	; 0x2a
 8055dce:	d018      	beq.n	8055e02 <fnmatchx+0xfc>
            if (*string == '.' && (flags & FNM_PERIOD) &&
 8055dd0:	2f2e      	cmp	r7, #46	; 0x2e
 8055dd2:	d109      	bne.n	8055de8 <fnmatchx+0xe2>
 8055dd4:	9b04      	ldr	r3, [sp, #16]
 8055dd6:	b13b      	cbz	r3, 8055de8 <fnmatchx+0xe2>
 8055dd8:	4552      	cmp	r2, sl
 8055dda:	d09c      	beq.n	8055d16 <fnmatchx+0x10>
                (string == stringstart ||
 8055ddc:	07a7      	lsls	r7, r4, #30
 8055dde:	d503      	bpl.n	8055de8 <fnmatchx+0xe2>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
 8055de0:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8055de4:	2b2f      	cmp	r3, #47	; 0x2f
 8055de6:	d096      	beq.n	8055d16 <fnmatchx+0x10>
            if (c == EOS) {
 8055de8:	b979      	cbnz	r1, 8055e0a <fnmatchx+0x104>
                if (flags & FNM_PATHNAME)
 8055dea:	f014 0002 	ands.w	r0, r4, #2
 8055dee:	d093      	beq.n	8055d18 <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
 8055df0:	06e6      	lsls	r6, r4, #27
 8055df2:	f100 80b4 	bmi.w	8055f5e <fnmatchx+0x258>
                        strchr(string, '/') == NULL ?
 8055df6:	212f      	movs	r1, #47	; 0x2f
 8055df8:	4610      	mov	r0, r2
 8055dfa:	f005 f956 	bl	805b0aa <strchr>
                        0 : FNM_NOMATCH;
 8055dfe:	3800      	subs	r0, #0
 8055e00:	e7c6      	b.n	8055d90 <fnmatchx+0x8a>
                c = FOLDCASE(*++pattern, flags);
 8055e02:	4621      	mov	r1, r4
 8055e04:	f818 0f01 	ldrb.w	r0, [r8, #1]!
 8055e08:	e7dd      	b.n	8055dc6 <fnmatchx+0xc0>
            } else if (c == '/' && flags & FNM_PATHNAME) {
 8055e0a:	292f      	cmp	r1, #47	; 0x2f
 8055e0c:	d020      	beq.n	8055e50 <fnmatchx+0x14a>
    if (recursion-- == 0)
 8055e0e:	9b02      	ldr	r3, [sp, #8]
 8055e10:	4616      	mov	r6, r2
                switch ((e = fnmatchx(pattern, string,
 8055e12:	f024 0a04 	bic.w	sl, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
 8055e16:	f004 0902 	and.w	r9, r4, #2
    if (recursion-- == 0)
 8055e1a:	1e5f      	subs	r7, r3, #1
 8055e1c:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
 8055e1e:	4621      	mov	r1, r4
 8055e20:	3601      	adds	r6, #1
 8055e22:	f89b 0000 	ldrb.w	r0, [fp]
 8055e26:	f7ee fe2f 	bl	8044a88 <foldcase>
 8055e2a:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 8055e2e:	f43f af72 	beq.w	8055d16 <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
 8055e32:	463b      	mov	r3, r7
 8055e34:	4652      	mov	r2, sl
 8055e36:	4659      	mov	r1, fp
 8055e38:	4640      	mov	r0, r8
 8055e3a:	f7ff ff64 	bl	8055d06 <fnmatchx>
 8055e3e:	2801      	cmp	r0, #1
 8055e40:	f47f af6a 	bne.w	8055d18 <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
 8055e44:	2d2f      	cmp	r5, #47	; 0x2f
 8055e46:	d1e9      	bne.n	8055e1c <fnmatchx+0x116>
 8055e48:	f1b9 0f00 	cmp.w	r9, #0
 8055e4c:	d0e6      	beq.n	8055e1c <fnmatchx+0x116>
 8055e4e:	e762      	b.n	8055d16 <fnmatchx+0x10>
            } else if (c == '/' && flags & FNM_PATHNAME) {
 8055e50:	07a5      	lsls	r5, r4, #30
 8055e52:	d5dc      	bpl.n	8055e0e <fnmatchx+0x108>
                if ((string = strchr(string, '/')) == NULL)
 8055e54:	4610      	mov	r0, r2
 8055e56:	f005 f928 	bl	805b0aa <strchr>
 8055e5a:	4602      	mov	r2, r0
 8055e5c:	2800      	cmp	r0, #0
 8055e5e:	d1a1      	bne.n	8055da4 <fnmatchx+0x9e>
 8055e60:	e759      	b.n	8055d16 <fnmatchx+0x10>
            if (*string == EOS)
 8055e62:	2f00      	cmp	r7, #0
 8055e64:	f43f af57 	beq.w	8055d16 <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
 8055e68:	2f2f      	cmp	r7, #47	; 0x2f
 8055e6a:	d102      	bne.n	8055e72 <fnmatchx+0x16c>
 8055e6c:	07a0      	lsls	r0, r4, #30
 8055e6e:	f53f af52 	bmi.w	8055d16 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
 8055e72:	4621      	mov	r1, r4
 8055e74:	4638      	mov	r0, r7
 8055e76:	f7ee fe07 	bl	8044a88 <foldcase>
 8055e7a:	9000      	str	r0, [sp, #0]
    if (pattern == NULL)
 8055e7c:	f1b8 0f00 	cmp.w	r8, #0
 8055e80:	f43f af49 	beq.w	8055d16 <fnmatchx+0x10>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 8055e84:	786b      	ldrb	r3, [r5, #1]
 8055e86:	2b21      	cmp	r3, #33	; 0x21
 8055e88:	d001      	beq.n	8055e8e <fnmatchx+0x188>
 8055e8a:	2b5e      	cmp	r3, #94	; 0x5e
 8055e8c:	d126      	bne.n	8055edc <fnmatchx+0x1d6>
        ++pattern;
 8055e8e:	3502      	adds	r5, #2
 8055e90:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 8055e92:	9301      	str	r3, [sp, #4]
    need = 1;
 8055e94:	2301      	movs	r3, #1
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
 8055e96:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
 8055e9a:	ea04 0103 	and.w	r1, r4, r3
 8055e9e:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
 8055ea0:	462e      	mov	r6, r5
 8055ea2:	4621      	mov	r1, r4
 8055ea4:	9305      	str	r3, [sp, #20]
 8055ea6:	f816 0b01 	ldrb.w	r0, [r6], #1
 8055eaa:	f7ee fded 	bl	8044a88 <foldcase>
 8055eae:	9b05      	ldr	r3, [sp, #20]
 8055eb0:	fa5f f980 	uxtb.w	r9, r0
 8055eb4:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
 8055eb8:	d113      	bne.n	8055ee2 <fnmatchx+0x1dc>
 8055eba:	bb23      	cbnz	r3, 8055f06 <fnmatchx+0x200>
    return ok == negate ? NULL : pattern;
 8055ebc:	9b01      	ldr	r3, [sp, #4]
 8055ebe:	455b      	cmp	r3, fp
 8055ec0:	f43f af29 	beq.w	8055d16 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
 8055ec4:	2e00      	cmp	r6, #0
 8055ec6:	f43f af26 	beq.w	8055d16 <fnmatchx+0x10>
            if (r == (void *)-1) {
 8055eca:	1c71      	adds	r1, r6, #1
 8055ecc:	d103      	bne.n	8055ed6 <fnmatchx+0x1d0>
                if (*string != '[')
 8055ece:	2f5b      	cmp	r7, #91	; 0x5b
 8055ed0:	f47f af21 	bne.w	8055d16 <fnmatchx+0x10>
 8055ed4:	4646      	mov	r6, r8
            ++string;
 8055ed6:	3201      	adds	r2, #1
            break;
 8055ed8:	46b0      	mov	r8, r6
 8055eda:	e763      	b.n	8055da4 <fnmatchx+0x9e>
 8055edc:	4645      	mov	r5, r8
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 8055ede:	2300      	movs	r3, #0
 8055ee0:	e7d7      	b.n	8055e92 <fnmatchx+0x18c>
        if (c == '/')
 8055ee2:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
 8055ee6:	d0f2      	beq.n	8055ece <fnmatchx+0x1c8>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
 8055ee8:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
 8055eec:	d107      	bne.n	8055efe <fnmatchx+0x1f8>
 8055eee:	9b03      	ldr	r3, [sp, #12]
 8055ef0:	b94b      	cbnz	r3, 8055f06 <fnmatchx+0x200>
            c = FOLDCASE(*pattern++, flags);
 8055ef2:	7868      	ldrb	r0, [r5, #1]
 8055ef4:	1cae      	adds	r6, r5, #2
 8055ef6:	f7ee fdc7 	bl	8044a88 <foldcase>
 8055efa:	fa5f f980 	uxtb.w	r9, r0
        if (c == EOS)
 8055efe:	f1b9 0f00 	cmp.w	r9, #0
 8055f02:	f43f af08 	beq.w	8055d16 <fnmatchx+0x10>
        if (*pattern == '-' 
 8055f06:	7833      	ldrb	r3, [r6, #0]
 8055f08:	2b2d      	cmp	r3, #45	; 0x2d
 8055f0a:	d11f      	bne.n	8055f4c <fnmatchx+0x246>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
 8055f0c:	4621      	mov	r1, r4
 8055f0e:	7870      	ldrb	r0, [r6, #1]
 8055f10:	f7ee fdba 	bl	8044a88 <foldcase>
 8055f14:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8055f18:	d018      	beq.n	8055f4c <fnmatchx+0x246>
 8055f1a:	285d      	cmp	r0, #93	; 0x5d
 8055f1c:	d016      	beq.n	8055f4c <fnmatchx+0x246>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
 8055f1e:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
 8055f20:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
 8055f24:	d109      	bne.n	8055f3a <fnmatchx+0x234>
 8055f26:	9b03      	ldr	r3, [sp, #12]
 8055f28:	b93b      	cbnz	r3, 8055f3a <fnmatchx+0x234>
                c2 = FOLDCASE(*pattern++, flags);
 8055f2a:	78b0      	ldrb	r0, [r6, #2]
 8055f2c:	1cf5      	adds	r5, r6, #3
 8055f2e:	f7ee fdab 	bl	8044a88 <foldcase>
            if (c2 == EOS)
 8055f32:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8055f36:	f43f aeee 	beq.w	8055d16 <fnmatchx+0x10>
            if (c <= test && test <= c2)
 8055f3a:	9b00      	ldr	r3, [sp, #0]
 8055f3c:	454b      	cmp	r3, r9
 8055f3e:	db03      	blt.n	8055f48 <fnmatchx+0x242>
                ok = 1;
 8055f40:	4283      	cmp	r3, r0
 8055f42:	bfd8      	it	le
 8055f44:	f04f 0b01 	movle.w	fp, #1
            ok = 1;
 8055f48:	2300      	movs	r3, #0
 8055f4a:	e7a9      	b.n	8055ea0 <fnmatchx+0x19a>
        } else if (c == test)
 8055f4c:	9b00      	ldr	r3, [sp, #0]
 8055f4e:	4635      	mov	r5, r6
 8055f50:	454b      	cmp	r3, r9
 8055f52:	bf08      	it	eq
 8055f54:	f04f 0b01 	moveq.w	fp, #1
 8055f58:	e7f6      	b.n	8055f48 <fnmatchx+0x242>
        return FNM_NORES;
 8055f5a:	2003      	movs	r0, #3
 8055f5c:	e6dc      	b.n	8055d18 <fnmatchx+0x12>
                return 0;
 8055f5e:	4608      	mov	r0, r1
 8055f60:	e6da      	b.n	8055d18 <fnmatchx+0x12>

08055f62 <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
 8055f62:	2340      	movs	r3, #64	; 0x40
 8055f64:	f7ff becf 	b.w	8055d06 <fnmatchx>

08055f68 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_ENCRYPTION_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_GENERATE_CONFIRMED_IMAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8055f68:	4770      	bx	lr

08055f6a <HAL_GetTick>:
 *        Cube HAL expects a 1ms tick which matches with k_uptime_get_32.
 *        Tick interrupt priority is not used
 * @return HAL status
 */
uint32_t HAL_GetTick(void)
{
 8055f6a:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8055f6c:	f004 fbe6 	bl	805a73c <z_impl_k_uptime_ticks>
 8055f70:	220a      	movs	r2, #10
 8055f72:	2300      	movs	r3, #0
 8055f74:	f7ea fae4 	bl	8040540 <__aeabi_uldivmod>
	return k_uptime_get_32();
}
 8055f78:	bd08      	pop	{r3, pc}

08055f7a <HAL_Delay>:
 *	  on variable incremented.
 * @param Delay: specifies the delay time length, in milliseconds.
 * @return None
 */
void HAL_Delay(__IO uint32_t Delay)
{
 8055f7a:	b082      	sub	sp, #8
 8055f7c:	9001      	str	r0, [sp, #4]
			return t * ((uint64_t)to_hz / from_hz);
 8055f7e:	200a      	movs	r0, #10
	k_msleep(Delay);
 8055f80:	9901      	ldr	r1, [sp, #4]
	return k_sleep(Z_TIMEOUT_MS(ms));
 8055f82:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8055f86:	fb81 0100 	smull	r0, r1, r1, r0
}
 8055f8a:	b002      	add	sp, #8
	return z_impl_k_sleep(timeout);
 8055f8c:	f7fc b98c 	b.w	80522a8 <z_impl_k_sleep>

08055f90 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8055f90:	2000      	movs	r0, #0
 8055f92:	4770      	bx	lr

08055f94 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
 8055f94:	2300      	movs	r3, #0
	list->head = NULL;
 8055f96:	e9c0 3300 	strd	r3, r3, [r0]
}
 8055f9a:	4770      	bx	lr

08055f9c <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
 8055f9c:	6803      	ldr	r3, [r0, #0]
 8055f9e:	b923      	cbnz	r3, 8055faa <log_list_add_tail+0xe>
		list->head = msg;
 8055fa0:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
 8055fa2:	2300      	movs	r3, #0
	list->tail = msg;
 8055fa4:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
 8055fa6:	600b      	str	r3, [r1, #0]
}
 8055fa8:	4770      	bx	lr
		list->tail->next = msg;
 8055faa:	6843      	ldr	r3, [r0, #4]
 8055fac:	6019      	str	r1, [r3, #0]
 8055fae:	e7f8      	b.n	8055fa2 <log_list_add_tail+0x6>

08055fb0 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
 8055fb0:	6800      	ldr	r0, [r0, #0]
 8055fb2:	4770      	bx	lr

08055fb4 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
 8055fb4:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
 8055fb6:	b10b      	cbz	r3, 8055fbc <log_list_head_get+0x8>
		list->head = list->head->next;
 8055fb8:	681a      	ldr	r2, [r3, #0]
 8055fba:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
 8055fbc:	4618      	mov	r0, r3
 8055fbe:	4770      	bx	lr

08055fc0 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
 8055fc0:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8055fc2:	f7ef f995 	bl	80452f0 <log_msg_chunk_alloc>

	if (msg != NULL) {
 8055fc6:	b118      	cbz	r0, 8055fd0 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
 8055fc8:	2301      	movs	r3, #1
 8055fca:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8055fcc:	2300      	movs	r3, #0
 8055fce:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
 8055fd0:	bd08      	pop	{r3, pc}

08055fd2 <default_lf_get_timestamp>:
{
 8055fd2:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8055fd4:	f004 fbb2 	bl	805a73c <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8055fd8:	220a      	movs	r2, #10
 8055fda:	2300      	movs	r3, #0
 8055fdc:	f7ea fab0 	bl	8040540 <__aeabi_uldivmod>
}
 8055fe0:	bd08      	pop	{r3, pc}

08055fe2 <dummy_timestamp>:
 8055fe2:	2000      	movs	r0, #0
 8055fe4:	4770      	bx	lr

08055fe6 <log_0>:
{
 8055fe6:	b513      	push	{r0, r1, r4, lr}
 8055fe8:	4604      	mov	r4, r0
 8055fea:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
 8055fec:	f7ff ffe8 	bl	8055fc0 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8055ff0:	b130      	cbz	r0, 8056000 <log_0+0x1a>
		msg_finalize(msg, src_level);
 8055ff2:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
 8055ff4:	6104      	str	r4, [r0, #16]
}
 8055ff6:	b002      	add	sp, #8
 8055ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
 8055ffc:	f7ee bfee 	b.w	8044fdc <msg_finalize>
}
 8056000:	b002      	add	sp, #8
 8056002:	bd10      	pop	{r4, pc}

08056004 <log_1>:
{
 8056004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8056006:	460c      	mov	r4, r1
 8056008:	4611      	mov	r1, r2
 805600a:	4605      	mov	r5, r0
 805600c:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 805600e:	f7ff ffd7 	bl	8055fc0 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8056012:	b160      	cbz	r0, 805602e <log_1+0x2a>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
 8056014:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
 8056016:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
 8056018:	2501      	movs	r5, #1
		msg->payload.single.args[0] = arg1;
 805601a:	6144      	str	r4, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
 805601c:	f365 1207 	bfi	r2, r5, #4, #4
 8056020:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
 8056022:	9901      	ldr	r1, [sp, #4]
}
 8056024:	b003      	add	sp, #12
 8056026:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
 805602a:	f7ee bfd7 	b.w	8044fdc <msg_finalize>
}
 805602e:	b003      	add	sp, #12
 8056030:	bd30      	pop	{r4, r5, pc}

08056032 <log_2>:
{
 8056032:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8056034:	460e      	mov	r6, r1
 8056036:	4619      	mov	r1, r3
 8056038:	4607      	mov	r7, r0
 805603a:	4615      	mov	r5, r2
 805603c:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 805603e:	f7ff ffbf 	bl	8055fc0 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8056042:	b168      	cbz	r0, 8056060 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
 8056044:	7a43      	ldrb	r3, [r0, #9]
 8056046:	2202      	movs	r2, #2
		msg->str = str;
 8056048:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
 805604a:	f362 1307 	bfi	r3, r2, #4, #4
 805604e:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
 8056050:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
 8056052:	e9c0 6505 	strd	r6, r5, [r0, #20]
}
 8056056:	b003      	add	sp, #12
 8056058:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
 805605c:	f7ee bfbe 	b.w	8044fdc <msg_finalize>
}
 8056060:	b003      	add	sp, #12
 8056062:	bdf0      	pop	{r4, r5, r6, r7, pc}

08056064 <log_3>:
{
 8056064:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8056068:	460f      	mov	r7, r1
 805606a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 805606e:	4680      	mov	r8, r0
 8056070:	4616      	mov	r6, r2
 8056072:	461d      	mov	r5, r3
 8056074:	9101      	str	r1, [sp, #4]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8056076:	f7ff ffa3 	bl	8055fc0 <z_log_msg_std_alloc>

	if (msg != NULL) {
 805607a:	b178      	cbz	r0, 805609c <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
 805607c:	7a43      	ldrb	r3, [r0, #9]
 805607e:	2203      	movs	r2, #3
		msg->str = str;
 8056080:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
 8056084:	f362 1307 	bfi	r3, r2, #4, #4
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
 8056088:	61c5      	str	r5, [r0, #28]
		msg->hdr.params.std.nargs = 3U;
 805608a:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
 805608c:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[1] = arg2;
 805608e:	e9c0 7605 	strd	r7, r6, [r0, #20]
}
 8056092:	b002      	add	sp, #8
 8056094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
 8056098:	f7ee bfa0 	b.w	8044fdc <msg_finalize>
}
 805609c:	b002      	add	sp, #8
 805609e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080560a2 <log_n>:
{
 80560a2:	b510      	push	{r4, lr}
 80560a4:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
 80560a6:	f000 f8a6 	bl	80561f6 <log_msg_create_n>
		if (msg == NULL) {
 80560aa:	b120      	cbz	r0, 80560b6 <log_n+0x14>
		msg_finalize(msg, src_level);
 80560ac:	4621      	mov	r1, r4
}
 80560ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
 80560b2:	f7ee bf93 	b.w	8044fdc <msg_finalize>
}
 80560b6:	bd10      	pop	{r4, pc}

080560b8 <log_backend_disable>:
 80560b8:	6843      	ldr	r3, [r0, #4]
 80560ba:	2100      	movs	r1, #0
 80560bc:	7159      	strb	r1, [r3, #5]
	backend_filter_set(backend, LOG_LEVEL_NONE);
 80560be:	f7ef b8ab 	b.w	8045218 <backend_filter_set>

080560c2 <log_msg_hexdump_data_op>:
{
 80560c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80560c6:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
 80560c8:	8903      	ldrh	r3, [r0, #8]
{
 80560ca:	460e      	mov	r6, r1
 80560cc:	f89d 7020 	ldrb.w	r7, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
 80560d0:	f3c3 038d 	ubfx	r3, r3, #2, #14
	if (offset >= available_len) {
 80560d4:	42a3      	cmp	r3, r4
 80560d6:	d803      	bhi.n	80560e0 <log_msg_hexdump_data_op+0x1e>
		*length = 0;
 80560d8:	2300      	movs	r3, #0
 80560da:	6013      	str	r3, [r2, #0]
}
 80560dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
 80560e0:	6811      	ldr	r1, [r2, #0]
 80560e2:	4421      	add	r1, r4
 80560e4:	4299      	cmp	r1, r3
		*length = available_len - offset;
 80560e6:	bf84      	itt	hi
 80560e8:	1b19      	subhi	r1, r3, r4
 80560ea:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 80560ec:	2b0c      	cmp	r3, #12
	req_len = *length;
 80560ee:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 80560f2:	d92b      	bls.n	805614c <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
 80560f4:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
 80560f6:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
 80560fa:	d82e      	bhi.n	805615a <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
 80560fc:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
 80560fe:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 8056100:	454b      	cmp	r3, r9
			(void)memcpy(&head_data[offset], data, cpy_len);
 8056102:	4420      	add	r0, r4
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 8056104:	bf28      	it	cs
 8056106:	464b      	movcs	r3, r9
 8056108:	461d      	mov	r5, r3
 805610a:	461a      	mov	r2, r3
		if (put_op) {
 805610c:	b317      	cbz	r7, 8056154 <log_msg_hexdump_data_op+0x92>
 805610e:	4631      	mov	r1, r6
		req_len -= cpy_len;
 8056110:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
 8056114:	442e      	add	r6, r5
 8056116:	f004 fe5e 	bl	805add6 <memcpy>
	while ((req_len > 0) && (cont != NULL)) {
 805611a:	f1b9 0f00 	cmp.w	r9, #0
 805611e:	d0dd      	beq.n	80560dc <log_msg_hexdump_data_op+0x1a>
 8056120:	f1b8 0f00 	cmp.w	r8, #0
 8056124:	d0da      	beq.n	80560dc <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
 8056126:	f1c4 051c 	rsb	r5, r4, #28
			(void)memcpy(&cont->payload.bytes[offset],
 805612a:	1d20      	adds	r0, r4, #4
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 805612c:	454d      	cmp	r5, r9
			(void)memcpy(&cont->payload.bytes[offset],
 805612e:	4440      	add	r0, r8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 8056130:	bf28      	it	cs
 8056132:	464d      	movcs	r5, r9
 8056134:	462a      	mov	r2, r5
		if (put_op) {
 8056136:	b1bf      	cbz	r7, 8056168 <log_msg_hexdump_data_op+0xa6>
 8056138:	4631      	mov	r1, r6
 805613a:	f004 fe4c 	bl	805add6 <memcpy>
		req_len -= cpy_len;
 805613e:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
 8056142:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
 8056146:	442e      	add	r6, r5
		offset = 0;
 8056148:	2400      	movs	r4, #0
 805614a:	e7e6      	b.n	805611a <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
 805614c:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
 805614e:	f04f 0800 	mov.w	r8, #0
 8056152:	e7d5      	b.n	8056100 <log_msg_hexdump_data_op+0x3e>
 8056154:	4601      	mov	r1, r0
 8056156:	4630      	mov	r0, r6
 8056158:	e7da      	b.n	8056110 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
 805615a:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
 805615c:	2c1b      	cmp	r4, #27
 805615e:	d9dc      	bls.n	805611a <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
 8056160:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
 8056164:	3c1c      	subs	r4, #28
 8056166:	e7f9      	b.n	805615c <log_msg_hexdump_data_op+0x9a>
 8056168:	4601      	mov	r1, r0
 805616a:	4630      	mov	r0, r6
 805616c:	e7e5      	b.n	805613a <log_msg_hexdump_data_op+0x78>

0805616e <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 805616e:	3004      	adds	r0, #4
 8056170:	f3bf 8f5b 	dmb	ish
 8056174:	e850 3f00 	ldrex	r3, [r0]
 8056178:	3301      	adds	r3, #1
 805617a:	e840 3200 	strex	r2, r3, [r0]
 805617e:	2a00      	cmp	r2, #0
 8056180:	d1f8      	bne.n	8056174 <log_msg_get+0x6>
 8056182:	f3bf 8f5b 	dmb	ish
}
 8056186:	4770      	bx	lr

08056188 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
 8056188:	7a40      	ldrb	r0, [r0, #9]
}
 805618a:	0900      	lsrs	r0, r0, #4
 805618c:	4770      	bx	lr

0805618e <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
 805618e:	7a43      	ldrb	r3, [r0, #9]
 8056190:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
 8056194:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8056198:	d216      	bcs.n	80561c8 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 805619a:	2a03      	cmp	r2, #3
 805619c:	d803      	bhi.n	80561a6 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
 805619e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80561a2:	6940      	ldr	r0, [r0, #20]
 80561a4:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
 80561a6:	2901      	cmp	r1, #1
 80561a8:	d803      	bhi.n	80561b2 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
 80561aa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80561ae:	6980      	ldr	r0, [r0, #24]
 80561b0:	4770      	bx	lr
	cont = msg->payload.ext.next;
 80561b2:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
 80561b4:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
 80561b6:	2906      	cmp	r1, #6
 80561b8:	d803      	bhi.n	80561c2 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
 80561ba:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80561be:	6848      	ldr	r0, [r1, #4]
 80561c0:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
 80561c2:	3907      	subs	r1, #7
		cont = cont->next;
 80561c4:	681b      	ldr	r3, [r3, #0]
 80561c6:	e7f6      	b.n	80561b6 <log_msg_arg_get+0x28>
		return 0;
 80561c8:	2000      	movs	r0, #0
}
 80561ca:	4770      	bx	lr

080561cc <log_msg_put>:
{
 80561cc:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 80561ce:	1d02      	adds	r2, r0, #4
 80561d0:	f3bf 8f5b 	dmb	ish
 80561d4:	e852 1f00 	ldrex	r1, [r2]
 80561d8:	3901      	subs	r1, #1
 80561da:	e842 1c00 	strex	ip, r1, [r2]
 80561de:	f1bc 0f00 	cmp.w	ip, #0
 80561e2:	d1f7      	bne.n	80561d4 <log_msg_put+0x8>
 80561e4:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
 80561e8:	685b      	ldr	r3, [r3, #4]
 80561ea:	b90b      	cbnz	r3, 80561f0 <log_msg_put+0x24>
		msg_free(msg);
 80561ec:	f7ef b894 	b.w	8045318 <msg_free>
}
 80561f0:	4770      	bx	lr

080561f2 <log_msg_str_get>:
}
 80561f2:	6900      	ldr	r0, [r0, #16]
 80561f4:	4770      	bx	lr

080561f6 <log_msg_create_n>:
{
 80561f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80561fa:	4680      	mov	r8, r0
 80561fc:	460f      	mov	r7, r1
 80561fe:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8056200:	f7ef f876 	bl	80452f0 <log_msg_chunk_alloc>
	if (msg != NULL) {
 8056204:	4604      	mov	r4, r0
 8056206:	b358      	cbz	r0, 8056260 <log_msg_create_n+0x6a>
		msg->hdr.ref_cnt = 1;
 8056208:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
 805620a:	f04f 0a00 	mov.w	sl, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 805620e:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
 8056210:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8056212:	f8a0 a008 	strh.w	sl, [r0, #8]
 8056216:	d90c      	bls.n	8056232 <log_msg_create_n+0x3c>
	msg->hdr.params.generic.ext = 1;
 8056218:	7a03      	ldrb	r3, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
 805621a:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
 805621e:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
 8056222:	f8c0 a014 	str.w	sl, [r0, #20]
	msg->hdr.params.generic.ext = 1;
 8056226:	f043 0302 	orr.w	r3, r3, #2
 805622a:	7203      	strb	r3, [r0, #8]
	while (n > 0) {
 805622c:	f1b9 0f00 	cmp.w	r9, #0
 8056230:	dc0e      	bgt.n	8056250 <log_msg_create_n+0x5a>
		msg->hdr.params.std.nargs = nargs;
 8056232:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
 8056234:	2d03      	cmp	r5, #3
		msg->str = str;
 8056236:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
 805623a:	f365 1307 	bfi	r3, r5, #4, #4
 805623e:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
 8056240:	d819      	bhi.n	8056276 <log_msg_create_n+0x80>
 8056242:	00aa      	lsls	r2, r5, #2
 8056244:	4639      	mov	r1, r7
 8056246:	f104 0014 	add.w	r0, r4, #20
 805624a:	f004 fdc4 	bl	805add6 <memcpy>
	while (nargs != 0U) {
 805624e:	e007      	b.n	8056260 <log_msg_create_n+0x6a>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
 8056250:	f7ef f84e 	bl	80452f0 <log_msg_chunk_alloc>
		if (cont == NULL) {
 8056254:	4606      	mov	r6, r0
 8056256:	b930      	cbnz	r0, 8056266 <log_msg_create_n+0x70>
			msg_free(msg);
 8056258:	4620      	mov	r0, r4
			return NULL;
 805625a:	4634      	mov	r4, r6
			msg_free(msg);
 805625c:	f7ef f85c 	bl	8045318 <msg_free>
}
 8056260:	4620      	mov	r0, r4
 8056262:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
 8056266:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
 805626a:	f1a9 0907 	sub.w	r9, r9, #7
		next = &cont->next;
 805626e:	4683      	mov	fp, r0
		cont->next = NULL;
 8056270:	f8c0 a000 	str.w	sl, [r0]
		n -= ARGS_CONT_MSG;
 8056274:	e7da      	b.n	805622c <log_msg_create_n+0x36>
 8056276:	683b      	ldr	r3, [r7, #0]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
 8056278:	3d02      	subs	r5, #2
	struct log_msg_cont *cont = msg->payload.ext.next;
 805627a:	f8d4 8014 	ldr.w	r8, [r4, #20]
		args += LOG_MSG_NARGS_HEAD_CHUNK;
 805627e:	3708      	adds	r7, #8
 8056280:	61a3      	str	r3, [r4, #24]
 8056282:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8056286:	61e3      	str	r3, [r4, #28]
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
 8056288:	2d07      	cmp	r5, #7
 805628a:	462e      	mov	r6, r5
 805628c:	4639      	mov	r1, r7
 805628e:	f108 0004 	add.w	r0, r8, #4
 8056292:	bf28      	it	cs
 8056294:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
 8056296:	ea4f 0986 	mov.w	r9, r6, lsl #2
 805629a:	464a      	mov	r2, r9
		args += cpy_args;
 805629c:	444f      	add	r7, r9
 805629e:	f004 fd9a 	bl	805add6 <memcpy>
	while (nargs != 0U) {
 80562a2:	1bad      	subs	r5, r5, r6
		cont = cont->next;
 80562a4:	f8d8 8000 	ldr.w	r8, [r8]
	while (nargs != 0U) {
 80562a8:	d1ee      	bne.n	8056288 <log_msg_create_n+0x92>
 80562aa:	e7d9      	b.n	8056260 <log_msg_create_n+0x6a>

080562ac <log_msg_hexdump_data_get>:
{
 80562ac:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
 80562ae:	2400      	movs	r4, #0
 80562b0:	9400      	str	r4, [sp, #0]
 80562b2:	f7ff ff06 	bl	80560c2 <log_msg_hexdump_data_op>
}
 80562b6:	b002      	add	sp, #8
 80562b8:	bd10      	pop	{r4, pc}

080562ba <buffer_write>:
{
 80562ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80562bc:	4606      	mov	r6, r0
 80562be:	460d      	mov	r5, r1
 80562c0:	4614      	mov	r4, r2
 80562c2:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 80562c4:	4621      	mov	r1, r4
 80562c6:	4628      	mov	r0, r5
 80562c8:	463a      	mov	r2, r7
 80562ca:	47b0      	blx	r6
	} while (len != 0);
 80562cc:	1a24      	subs	r4, r4, r0
		buf += processed;
 80562ce:	4405      	add	r5, r0
	} while (len != 0);
 80562d0:	d1f8      	bne.n	80562c4 <buffer_write+0xa>
}
 80562d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080562d4 <std_print>:
{
 80562d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80562d8:	b08e      	sub	sp, #56	; 0x38
 80562da:	4680      	mov	r8, r0
 80562dc:	460d      	mov	r5, r1
	for (i = 0; i < nargs; i++) {
 80562de:	f04f 0900 	mov.w	r9, #0
{
 80562e2:	af0e      	add	r7, sp, #56	; 0x38
	const char *str = log_msg_str_get(msg);
 80562e4:	f7ff ff85 	bl	80561f2 <log_msg_str_get>
 80562e8:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
 80562ea:	4640      	mov	r0, r8
 80562ec:	f7ff ff4c 	bl	8056188 <log_msg_nargs_get>
 80562f0:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
 80562f2:	0083      	lsls	r3, r0, #2
 80562f4:	3307      	adds	r3, #7
 80562f6:	f023 0307 	bic.w	r3, r3, #7
 80562fa:	ebad 0d03 	sub.w	sp, sp, r3
 80562fe:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
 8056300:	45d1      	cmp	r9, sl
 8056302:	d116      	bne.n	8056332 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
 8056304:	4640      	mov	r0, r8
 8056306:	f7ff ff3f 	bl	8056188 <log_msg_nargs_get>
 805630a:	280f      	cmp	r0, #15
 805630c:	d81e      	bhi.n	805634c <std_print+0x78>
 805630e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8056312:	0019      	.short	0x0019
 8056314:	00260020 	.word	0x00260020
 8056318:	0036002d 	.word	0x0036002d
 805631c:	004e0041 	.word	0x004e0041
 8056320:	006e005d 	.word	0x006e005d
 8056324:	00960081 	.word	0x00960081
 8056328:	00c600ad 	.word	0x00c600ad
 805632c:	00fe00e1 	.word	0x00fe00e1
 8056330:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
 8056332:	4649      	mov	r1, r9
 8056334:	4640      	mov	r0, r8
 8056336:	f7ff ff2a 	bl	805618e <log_msg_arg_get>
 805633a:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
 805633e:	f109 0901 	add.w	r9, r9, #1
 8056342:	e7dd      	b.n	8056300 <std_print+0x2c>
		print_formatted(output, str);
 8056344:	4631      	mov	r1, r6
 8056346:	4628      	mov	r0, r5
 8056348:	f7ef f832 	bl	80453b0 <print_formatted>
}
 805634c:	46bd      	mov	sp, r7
 805634e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
 8056352:	6822      	ldr	r2, [r4, #0]
 8056354:	4631      	mov	r1, r6
 8056356:	4628      	mov	r0, r5
 8056358:	f7ef f82a 	bl	80453b0 <print_formatted>
		break;
 805635c:	e7f6      	b.n	805634c <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
 805635e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8056362:	4631      	mov	r1, r6
 8056364:	4628      	mov	r0, r5
 8056366:	f7ef f823 	bl	80453b0 <print_formatted>
		break;
 805636a:	e7ef      	b.n	805634c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
 805636c:	68a3      	ldr	r3, [r4, #8]
 805636e:	4631      	mov	r1, r6
 8056370:	4628      	mov	r0, r5
 8056372:	9300      	str	r3, [sp, #0]
 8056374:	e9d4 2300 	ldrd	r2, r3, [r4]
 8056378:	f7ef f81a 	bl	80453b0 <print_formatted>
		break;
 805637c:	e7e6      	b.n	805634c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 805637e:	68e3      	ldr	r3, [r4, #12]
 8056380:	4631      	mov	r1, r6
 8056382:	4628      	mov	r0, r5
 8056384:	9301      	str	r3, [sp, #4]
 8056386:	68a3      	ldr	r3, [r4, #8]
 8056388:	9300      	str	r3, [sp, #0]
 805638a:	e9d4 2300 	ldrd	r2, r3, [r4]
 805638e:	f7ef f80f 	bl	80453b0 <print_formatted>
		break;
 8056392:	e7db      	b.n	805634c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8056394:	6923      	ldr	r3, [r4, #16]
 8056396:	4631      	mov	r1, r6
 8056398:	4628      	mov	r0, r5
 805639a:	9302      	str	r3, [sp, #8]
 805639c:	68e3      	ldr	r3, [r4, #12]
 805639e:	9301      	str	r3, [sp, #4]
 80563a0:	68a3      	ldr	r3, [r4, #8]
 80563a2:	9300      	str	r3, [sp, #0]
 80563a4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80563a8:	f7ef f802 	bl	80453b0 <print_formatted>
		break;
 80563ac:	e7ce      	b.n	805634c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 80563ae:	6963      	ldr	r3, [r4, #20]
 80563b0:	4631      	mov	r1, r6
 80563b2:	4628      	mov	r0, r5
 80563b4:	9303      	str	r3, [sp, #12]
 80563b6:	6923      	ldr	r3, [r4, #16]
 80563b8:	9302      	str	r3, [sp, #8]
 80563ba:	68e3      	ldr	r3, [r4, #12]
 80563bc:	9301      	str	r3, [sp, #4]
 80563be:	68a3      	ldr	r3, [r4, #8]
 80563c0:	9300      	str	r3, [sp, #0]
 80563c2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80563c6:	f7ee fff3 	bl	80453b0 <print_formatted>
		break;
 80563ca:	e7bf      	b.n	805634c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 80563cc:	69a3      	ldr	r3, [r4, #24]
 80563ce:	4631      	mov	r1, r6
 80563d0:	4628      	mov	r0, r5
 80563d2:	9304      	str	r3, [sp, #16]
 80563d4:	6963      	ldr	r3, [r4, #20]
 80563d6:	9303      	str	r3, [sp, #12]
 80563d8:	6923      	ldr	r3, [r4, #16]
 80563da:	9302      	str	r3, [sp, #8]
 80563dc:	68e3      	ldr	r3, [r4, #12]
 80563de:	9301      	str	r3, [sp, #4]
 80563e0:	68a3      	ldr	r3, [r4, #8]
 80563e2:	9300      	str	r3, [sp, #0]
 80563e4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80563e8:	f7ee ffe2 	bl	80453b0 <print_formatted>
		break;
 80563ec:	e7ae      	b.n	805634c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 80563ee:	69e3      	ldr	r3, [r4, #28]
 80563f0:	4631      	mov	r1, r6
 80563f2:	4628      	mov	r0, r5
 80563f4:	9305      	str	r3, [sp, #20]
 80563f6:	69a3      	ldr	r3, [r4, #24]
 80563f8:	9304      	str	r3, [sp, #16]
 80563fa:	6963      	ldr	r3, [r4, #20]
 80563fc:	9303      	str	r3, [sp, #12]
 80563fe:	6923      	ldr	r3, [r4, #16]
 8056400:	9302      	str	r3, [sp, #8]
 8056402:	68e3      	ldr	r3, [r4, #12]
 8056404:	9301      	str	r3, [sp, #4]
 8056406:	68a3      	ldr	r3, [r4, #8]
 8056408:	9300      	str	r3, [sp, #0]
 805640a:	e9d4 2300 	ldrd	r2, r3, [r4]
 805640e:	f7ee ffcf 	bl	80453b0 <print_formatted>
		break;
 8056412:	e79b      	b.n	805634c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 8056414:	6a23      	ldr	r3, [r4, #32]
 8056416:	4631      	mov	r1, r6
 8056418:	4628      	mov	r0, r5
 805641a:	9306      	str	r3, [sp, #24]
 805641c:	69e3      	ldr	r3, [r4, #28]
 805641e:	9305      	str	r3, [sp, #20]
 8056420:	69a3      	ldr	r3, [r4, #24]
 8056422:	9304      	str	r3, [sp, #16]
 8056424:	6963      	ldr	r3, [r4, #20]
 8056426:	9303      	str	r3, [sp, #12]
 8056428:	6923      	ldr	r3, [r4, #16]
 805642a:	9302      	str	r3, [sp, #8]
 805642c:	68e3      	ldr	r3, [r4, #12]
 805642e:	9301      	str	r3, [sp, #4]
 8056430:	68a3      	ldr	r3, [r4, #8]
 8056432:	9300      	str	r3, [sp, #0]
 8056434:	e9d4 2300 	ldrd	r2, r3, [r4]
 8056438:	f7ee ffba 	bl	80453b0 <print_formatted>
		break;
 805643c:	e786      	b.n	805634c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 805643e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8056440:	4631      	mov	r1, r6
 8056442:	4628      	mov	r0, r5
 8056444:	9307      	str	r3, [sp, #28]
 8056446:	6a23      	ldr	r3, [r4, #32]
 8056448:	9306      	str	r3, [sp, #24]
 805644a:	69e3      	ldr	r3, [r4, #28]
 805644c:	9305      	str	r3, [sp, #20]
 805644e:	69a3      	ldr	r3, [r4, #24]
 8056450:	9304      	str	r3, [sp, #16]
 8056452:	6963      	ldr	r3, [r4, #20]
 8056454:	9303      	str	r3, [sp, #12]
 8056456:	6923      	ldr	r3, [r4, #16]
 8056458:	9302      	str	r3, [sp, #8]
 805645a:	68e3      	ldr	r3, [r4, #12]
 805645c:	9301      	str	r3, [sp, #4]
 805645e:	68a3      	ldr	r3, [r4, #8]
 8056460:	9300      	str	r3, [sp, #0]
 8056462:	e9d4 2300 	ldrd	r2, r3, [r4]
 8056466:	f7ee ffa3 	bl	80453b0 <print_formatted>
		break;
 805646a:	e76f      	b.n	805634c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 805646c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 805646e:	4631      	mov	r1, r6
 8056470:	4628      	mov	r0, r5
 8056472:	9308      	str	r3, [sp, #32]
 8056474:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8056476:	9307      	str	r3, [sp, #28]
 8056478:	6a23      	ldr	r3, [r4, #32]
 805647a:	9306      	str	r3, [sp, #24]
 805647c:	69e3      	ldr	r3, [r4, #28]
 805647e:	9305      	str	r3, [sp, #20]
 8056480:	69a3      	ldr	r3, [r4, #24]
 8056482:	9304      	str	r3, [sp, #16]
 8056484:	6963      	ldr	r3, [r4, #20]
 8056486:	9303      	str	r3, [sp, #12]
 8056488:	6923      	ldr	r3, [r4, #16]
 805648a:	9302      	str	r3, [sp, #8]
 805648c:	68e3      	ldr	r3, [r4, #12]
 805648e:	9301      	str	r3, [sp, #4]
 8056490:	68a3      	ldr	r3, [r4, #8]
 8056492:	9300      	str	r3, [sp, #0]
 8056494:	e9d4 2300 	ldrd	r2, r3, [r4]
 8056498:	f7ee ff8a 	bl	80453b0 <print_formatted>
		break;
 805649c:	e756      	b.n	805634c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 805649e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80564a0:	4631      	mov	r1, r6
 80564a2:	4628      	mov	r0, r5
 80564a4:	9309      	str	r3, [sp, #36]	; 0x24
 80564a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80564a8:	9308      	str	r3, [sp, #32]
 80564aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80564ac:	9307      	str	r3, [sp, #28]
 80564ae:	6a23      	ldr	r3, [r4, #32]
 80564b0:	9306      	str	r3, [sp, #24]
 80564b2:	69e3      	ldr	r3, [r4, #28]
 80564b4:	9305      	str	r3, [sp, #20]
 80564b6:	69a3      	ldr	r3, [r4, #24]
 80564b8:	9304      	str	r3, [sp, #16]
 80564ba:	6963      	ldr	r3, [r4, #20]
 80564bc:	9303      	str	r3, [sp, #12]
 80564be:	6923      	ldr	r3, [r4, #16]
 80564c0:	9302      	str	r3, [sp, #8]
 80564c2:	68e3      	ldr	r3, [r4, #12]
 80564c4:	9301      	str	r3, [sp, #4]
 80564c6:	68a3      	ldr	r3, [r4, #8]
 80564c8:	9300      	str	r3, [sp, #0]
 80564ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 80564ce:	f7ee ff6f 	bl	80453b0 <print_formatted>
		break;
 80564d2:	e73b      	b.n	805634c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 80564d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80564d6:	4631      	mov	r1, r6
 80564d8:	4628      	mov	r0, r5
 80564da:	930a      	str	r3, [sp, #40]	; 0x28
 80564dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80564de:	9309      	str	r3, [sp, #36]	; 0x24
 80564e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80564e2:	9308      	str	r3, [sp, #32]
 80564e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80564e6:	9307      	str	r3, [sp, #28]
 80564e8:	6a23      	ldr	r3, [r4, #32]
 80564ea:	9306      	str	r3, [sp, #24]
 80564ec:	69e3      	ldr	r3, [r4, #28]
 80564ee:	9305      	str	r3, [sp, #20]
 80564f0:	69a3      	ldr	r3, [r4, #24]
 80564f2:	9304      	str	r3, [sp, #16]
 80564f4:	6963      	ldr	r3, [r4, #20]
 80564f6:	9303      	str	r3, [sp, #12]
 80564f8:	6923      	ldr	r3, [r4, #16]
 80564fa:	9302      	str	r3, [sp, #8]
 80564fc:	68e3      	ldr	r3, [r4, #12]
 80564fe:	9301      	str	r3, [sp, #4]
 8056500:	68a3      	ldr	r3, [r4, #8]
 8056502:	9300      	str	r3, [sp, #0]
 8056504:	e9d4 2300 	ldrd	r2, r3, [r4]
 8056508:	f7ee ff52 	bl	80453b0 <print_formatted>
		break;
 805650c:	e71e      	b.n	805634c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 805650e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8056510:	4631      	mov	r1, r6
 8056512:	4628      	mov	r0, r5
 8056514:	930b      	str	r3, [sp, #44]	; 0x2c
 8056516:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8056518:	930a      	str	r3, [sp, #40]	; 0x28
 805651a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 805651c:	9309      	str	r3, [sp, #36]	; 0x24
 805651e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8056520:	9308      	str	r3, [sp, #32]
 8056522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8056524:	9307      	str	r3, [sp, #28]
 8056526:	6a23      	ldr	r3, [r4, #32]
 8056528:	9306      	str	r3, [sp, #24]
 805652a:	69e3      	ldr	r3, [r4, #28]
 805652c:	9305      	str	r3, [sp, #20]
 805652e:	69a3      	ldr	r3, [r4, #24]
 8056530:	9304      	str	r3, [sp, #16]
 8056532:	6963      	ldr	r3, [r4, #20]
 8056534:	9303      	str	r3, [sp, #12]
 8056536:	6923      	ldr	r3, [r4, #16]
 8056538:	9302      	str	r3, [sp, #8]
 805653a:	68e3      	ldr	r3, [r4, #12]
 805653c:	9301      	str	r3, [sp, #4]
 805653e:	68a3      	ldr	r3, [r4, #8]
 8056540:	9300      	str	r3, [sp, #0]
 8056542:	e9d4 2300 	ldrd	r2, r3, [r4]
 8056546:	f7ee ff33 	bl	80453b0 <print_formatted>
		break;
 805654a:	e6ff      	b.n	805634c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
 805654c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 805654e:	4631      	mov	r1, r6
 8056550:	4628      	mov	r0, r5
 8056552:	930c      	str	r3, [sp, #48]	; 0x30
 8056554:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8056556:	930b      	str	r3, [sp, #44]	; 0x2c
 8056558:	6b23      	ldr	r3, [r4, #48]	; 0x30
 805655a:	930a      	str	r3, [sp, #40]	; 0x28
 805655c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 805655e:	9309      	str	r3, [sp, #36]	; 0x24
 8056560:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8056562:	9308      	str	r3, [sp, #32]
 8056564:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8056566:	9307      	str	r3, [sp, #28]
 8056568:	6a23      	ldr	r3, [r4, #32]
 805656a:	9306      	str	r3, [sp, #24]
 805656c:	69e3      	ldr	r3, [r4, #28]
 805656e:	9305      	str	r3, [sp, #20]
 8056570:	69a3      	ldr	r3, [r4, #24]
 8056572:	9304      	str	r3, [sp, #16]
 8056574:	6963      	ldr	r3, [r4, #20]
 8056576:	9303      	str	r3, [sp, #12]
 8056578:	6923      	ldr	r3, [r4, #16]
 805657a:	9302      	str	r3, [sp, #8]
 805657c:	68e3      	ldr	r3, [r4, #12]
 805657e:	9301      	str	r3, [sp, #4]
 8056580:	68a3      	ldr	r3, [r4, #8]
 8056582:	9300      	str	r3, [sp, #0]
 8056584:	e9d4 2300 	ldrd	r2, r3, [r4]
 8056588:	f7ee ff12 	bl	80453b0 <print_formatted>
}
 805658c:	e6de      	b.n	805634c <std_print+0x78>

0805658e <log_output_flush>:
		     output->control_block->offset,
 805658e:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 8056590:	6881      	ldr	r1, [r0, #8]
{
 8056592:	b510      	push	{r4, lr}
 8056594:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
 8056596:	6800      	ldr	r0, [r0, #0]
 8056598:	e9d2 2300 	ldrd	r2, r3, [r2]
 805659c:	f7ff fe8d 	bl	80562ba <buffer_write>
	output->control_block->offset = 0;
 80565a0:	6863      	ldr	r3, [r4, #4]
 80565a2:	2200      	movs	r2, #0
 80565a4:	601a      	str	r2, [r3, #0]
}
 80565a6:	bd10      	pop	{r4, pc}

080565a8 <out_func>:
{
 80565a8:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
 80565aa:	684b      	ldr	r3, [r1, #4]
{
 80565ac:	4605      	mov	r5, r0
 80565ae:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 80565b0:	681a      	ldr	r2, [r3, #0]
 80565b2:	68cb      	ldr	r3, [r1, #12]
 80565b4:	429a      	cmp	r2, r3
 80565b6:	d102      	bne.n	80565be <out_func+0x16>
		log_output_flush(out_ctx);
 80565b8:	4608      	mov	r0, r1
 80565ba:	f7ff ffe8 	bl	805658e <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80565be:	6863      	ldr	r3, [r4, #4]
 80565c0:	f3bf 8f5b 	dmb	ish
 80565c4:	e853 2f00 	ldrex	r2, [r3]
 80565c8:	1c51      	adds	r1, r2, #1
 80565ca:	e843 1000 	strex	r0, r1, [r3]
 80565ce:	2800      	cmp	r0, #0
 80565d0:	d1f8      	bne.n	80565c4 <out_func+0x1c>
 80565d2:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 80565d6:	68a3      	ldr	r3, [r4, #8]
}
 80565d8:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
 80565da:	549d      	strb	r5, [r3, r2]
}
 80565dc:	bd38      	pop	{r3, r4, r5, pc}

080565de <log_halt>:
 80565de:	684b      	ldr	r3, [r1, #4]
 80565e0:	2000      	movs	r0, #0
 80565e2:	7158      	strb	r0, [r3, #5]
}
 80565e4:	4770      	bx	lr

080565e6 <log_go>:
	backend->cb->active = true;
 80565e6:	684b      	ldr	r3, [r1, #4]
 80565e8:	2201      	movs	r2, #1
}
 80565ea:	2000      	movs	r0, #0
 80565ec:	715a      	strb	r2, [r3, #5]
 80565ee:	4770      	bx	lr

080565f0 <cmd_log_self_status>:
{
 80565f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80565f2:	4604      	mov	r4, r0
 80565f4:	460d      	mov	r5, r1
 80565f6:	9201      	str	r2, [sp, #4]
	if (!shell_state_precheck(shell)) {
 80565f8:	f7ef fa12 	bl	8045a20 <shell_state_precheck>
 80565fc:	b130      	cbz	r0, 805660c <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
 80565fe:	69e1      	ldr	r1, [r4, #28]
 8056600:	462a      	mov	r2, r5
 8056602:	9b01      	ldr	r3, [sp, #4]
 8056604:	4620      	mov	r0, r4
 8056606:	6809      	ldr	r1, [r1, #0]
 8056608:	f7ef f940 	bl	804588c <log_status>
}
 805660c:	2000      	movs	r0, #0
 805660e:	b003      	add	sp, #12
 8056610:	bd30      	pop	{r4, r5, pc}

08056612 <cmd_log_self_enable>:
{
 8056612:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8056614:	4604      	mov	r4, r0
 8056616:	460d      	mov	r5, r1
 8056618:	9201      	str	r2, [sp, #4]
	if (!shell_state_precheck(shell)) {
 805661a:	f7ef fa01 	bl	8045a20 <shell_state_precheck>
 805661e:	b148      	cbz	r0, 8056634 <cmd_log_self_enable+0x22>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
 8056620:	69e1      	ldr	r1, [r4, #28]
 8056622:	462a      	mov	r2, r5
 8056624:	9b01      	ldr	r3, [sp, #4]
 8056626:	4620      	mov	r0, r4
 8056628:	6809      	ldr	r1, [r1, #0]
}
 805662a:	b003      	add	sp, #12
 805662c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
 8056630:	f7ef ba70 	b.w	8045b14 <log_enable>
}
 8056634:	b003      	add	sp, #12
 8056636:	bd30      	pop	{r4, r5, pc}

08056638 <log_disable>:
{
 8056638:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
 805663a:	2400      	movs	r4, #0
 805663c:	3304      	adds	r3, #4
 805663e:	3a01      	subs	r2, #1
 8056640:	9400      	str	r4, [sp, #0]
 8056642:	f7ef f9fd 	bl	8045a40 <filters_set>
}
 8056646:	4620      	mov	r0, r4
 8056648:	b002      	add	sp, #8
 805664a:	bd10      	pop	{r4, pc}

0805664c <cmd_log_self_disable>:
{
 805664c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 805664e:	4604      	mov	r4, r0
 8056650:	460d      	mov	r5, r1
 8056652:	9201      	str	r2, [sp, #4]
	if (!shell_state_precheck(shell)) {
 8056654:	f7ef f9e4 	bl	8045a20 <shell_state_precheck>
 8056658:	b148      	cbz	r0, 805666e <cmd_log_self_disable+0x22>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
 805665a:	69e1      	ldr	r1, [r4, #28]
 805665c:	462a      	mov	r2, r5
 805665e:	9b01      	ldr	r3, [sp, #4]
 8056660:	4620      	mov	r0, r4
 8056662:	6809      	ldr	r1, [r1, #0]
}
 8056664:	b003      	add	sp, #12
 8056666:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
 805666a:	f7ff bfe5 	b.w	8056638 <log_disable>
}
 805666e:	b003      	add	sp, #12
 8056670:	bd30      	pop	{r4, r5, pc}

08056672 <cmd_log_self_go>:
{
 8056672:	b510      	push	{r4, lr}
 8056674:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
 8056676:	f7ef f9d3 	bl	8045a20 <shell_state_precheck>
 805667a:	b120      	cbz	r0, 8056686 <cmd_log_self_go+0x14>
	return log_go(shell, shell->log_backend->backend, argc, argv);
 805667c:	69e3      	ldr	r3, [r4, #28]
 805667e:	2201      	movs	r2, #1
	log_backend_activate(backend, backend->cb->ctx);
 8056680:	681b      	ldr	r3, [r3, #0]
 8056682:	685b      	ldr	r3, [r3, #4]
 8056684:	715a      	strb	r2, [r3, #5]
}
 8056686:	2000      	movs	r0, #0
 8056688:	bd10      	pop	{r4, pc}

0805668a <cmd_log_self_halt>:
{
 805668a:	b510      	push	{r4, lr}
 805668c:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
 805668e:	f7ef f9c7 	bl	8045a20 <shell_state_precheck>
 8056692:	b120      	cbz	r0, 805669e <cmd_log_self_halt+0x14>
	return log_halt(shell, shell->log_backend->backend, argc, argv);
 8056694:	69e3      	ldr	r3, [r4, #28]
	backend->cb->active = false;
 8056696:	2200      	movs	r2, #0
 8056698:	681b      	ldr	r3, [r3, #0]
 805669a:	685b      	ldr	r3, [r3, #4]
 805669c:	715a      	strb	r2, [r3, #5]
}
 805669e:	2000      	movs	r0, #0
 80566a0:	bd10      	pop	{r4, pc}

080566a2 <cmd_kernel_reboot_warm>:
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
#if (CONFIG_KERNEL_SHELL_REBOOT_DELAY > 0)
	k_sleep(K_MSEC(CONFIG_KERNEL_SHELL_REBOOT_DELAY));
#endif
	sys_reboot(SYS_REBOOT_WARM);
 80566a2:	2000      	movs	r0, #0
{
 80566a4:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
 80566a6:	f7ee f9d7 	bl	8044a58 <sys_reboot>

080566aa <cmd_kernel_reboot_cold>:
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
#if (CONFIG_KERNEL_SHELL_REBOOT_DELAY > 0)
	k_sleep(K_MSEC(CONFIG_KERNEL_SHELL_REBOOT_DELAY));
#endif
	sys_reboot(SYS_REBOOT_COLD);
 80566aa:	2001      	movs	r0, #1
{
 80566ac:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_COLD);
 80566ae:	f7ee f9d3 	bl	8044a58 <sys_reboot>

080566b2 <atomic_or>:
 * @param value Value to OR.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
 80566b2:	4603      	mov	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
 80566b4:	f3bf 8f5b 	dmb	ish
 80566b8:	e853 0f00 	ldrex	r0, [r3]
 80566bc:	ea40 0201 	orr.w	r2, r0, r1
 80566c0:	e843 2c00 	strex	ip, r2, [r3]
 80566c4:	f1bc 0f00 	cmp.w	ip, #0
 80566c8:	d1f6      	bne.n	80566b8 <atomic_or+0x6>
 80566ca:	f3bf 8f5b 	dmb	ish
 80566ce:	4770      	bx	lr

080566d0 <atomic_and>:
 * @param value Value to AND.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
 80566d0:	4603      	mov	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
 80566d2:	f3bf 8f5b 	dmb	ish
 80566d6:	e853 0f00 	ldrex	r0, [r3]
 80566da:	ea00 0201 	and.w	r2, r0, r1
 80566de:	e843 2c00 	strex	ip, r2, [r3]
 80566e2:	f1bc 0f00 	cmp.w	ip, #0
 80566e6:	d1f6      	bne.n	80566d6 <atomic_and+0x6>
 80566e8:	f3bf 8f5b 	dmb	ish
 80566ec:	4770      	bx	lr

080566ee <shell_signal_handle>:
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
 80566ee:	0109      	lsls	r1, r1, #4
{
 80566f0:	b530      	push	{r4, r5, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
 80566f2:	f501 7119 	add.w	r1, r1, #612	; 0x264
{
 80566f6:	4604      	mov	r4, r0
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
 80566f8:	6880      	ldr	r0, [r0, #8]
{
 80566fa:	b085      	sub	sp, #20
 80566fc:	4615      	mov	r5, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
 80566fe:	4408      	add	r0, r1
		(void) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_POLL_SIGNAL_CHECK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_check(sig, signaled, result);
 8056700:	aa03      	add	r2, sp, #12
 8056702:	a902      	add	r1, sp, #8
 8056704:	9001      	str	r0, [sp, #4]
 8056706:	f004 f9d1 	bl	805aaac <z_impl_k_poll_signal_check>
	if (set) {
 805670a:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
 805670e:	b11b      	cbz	r3, 8056718 <shell_signal_handle+0x2a>
	z_impl_k_poll_signal_reset(sig);
 8056710:	f004 f9c9 	bl	805aaa6 <z_impl_k_poll_signal_reset>
		handler(shell);
 8056714:	4620      	mov	r0, r4
 8056716:	47a8      	blx	r5
}
 8056718:	b005      	add	sp, #20
 805671a:	bd30      	pop	{r4, r5, pc}

0805671c <z_shell_strlen>:
{
 805671c:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
 805671e:	b110      	cbz	r0, 8056726 <z_shell_strlen+0xa>
 8056720:	f7ea f89a 	bl	8040858 <strlen>
 8056724:	b280      	uxth	r0, r0
}
 8056726:	bd08      	pop	{r3, pc}

08056728 <z_shell_raw_fprintf>:
{
 8056728:	b40e      	push	{r1, r2, r3}
 805672a:	b503      	push	{r0, r1, lr}
 805672c:	aa03      	add	r2, sp, #12
 805672e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 8056732:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
 8056734:	f7f0 fc74 	bl	8047020 <z_shell_fprintf_fmt>
}
 8056738:	b002      	add	sp, #8
 805673a:	f85d eb04 	ldr.w	lr, [sp], #4
 805673e:	b003      	add	sp, #12
 8056740:	4770      	bx	lr

08056742 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
 8056742:	f7fb b911 	b.w	8051968 <z_impl_k_mutex_lock>

08056746 <transport_evt_handler>:
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
 8056746:	688b      	ldr	r3, [r1, #8]
 8056748:	b920      	cbnz	r0, 8056754 <transport_evt_handler+0xe>
 805674a:	f503 7019 	add.w	r0, r3, #612	; 0x264
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 805674e:	2100      	movs	r1, #0
 8056750:	f7fc b89a 	b.w	8052888 <z_impl_k_poll_signal_raise>
 8056754:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8056758:	e7f9      	b.n	805674e <transport_evt_handler+0x8>

0805675a <kill_handler>:
{
 805675a:	b538      	push	{r3, r4, r5, lr}
	return shell->ctx->internal.flags.processing == 1;
 805675c:	6883      	ldr	r3, [r0, #8]
 805675e:	4604      	mov	r4, r0
 8056760:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (z_flag_processing_get(shell)) {
 8056764:	06db      	lsls	r3, r3, #27
 8056766:	d41d      	bmi.n	80567a4 <kill_handler+0x4a>
		z_shell_log_backend_disable(shell->log_backend);
 8056768:	69c0      	ldr	r0, [r0, #28]
 805676a:	f000 fded 	bl	8057348 <z_shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
 805676e:	6860      	ldr	r0, [r4, #4]
 8056770:	6803      	ldr	r3, [r0, #0]
 8056772:	685b      	ldr	r3, [r3, #4]
 8056774:	4798      	blx	r3
	if (err != 0) {
 8056776:	4605      	mov	r5, r0
 8056778:	b920      	cbnz	r0, 8056784 <kill_handler+0x2a>
	z_shell_history_purge(shell->history);
 805677a:	68e0      	ldr	r0, [r4, #12]
 805677c:	f000 fca9 	bl	80570d2 <z_shell_history_purge>
	shell->ctx->state = state;
 8056780:	68a3      	ldr	r3, [r4, #8]
 8056782:	711d      	strb	r5, [r3, #4]
	if (shell->ctx->uninit_cb) {
 8056784:	68a3      	ldr	r3, [r4, #8]
 8056786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8056788:	b113      	cbz	r3, 8056790 <kill_handler+0x36>
		shell->ctx->uninit_cb(shell, err);
 805678a:	4629      	mov	r1, r5
 805678c:	4620      	mov	r0, r4
 805678e:	4798      	blx	r3
	shell->ctx->tid = NULL;
 8056790:	68a3      	ldr	r3, [r4, #8]
 8056792:	2200      	movs	r2, #0
 8056794:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	return z_impl_z_current_get();
 8056798:	f7fb fd9e 	bl	80522d8 <z_impl_z_current_get>
}
 805679c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
 80567a0:	f7f2 b9f6 	b.w	8048b90 <z_impl_k_thread_abort>
		return -EBUSY;
 80567a4:	f06f 050f 	mvn.w	r5, #15
 80567a8:	e7ec      	b.n	8056784 <kill_handler+0x2a>

080567aa <z_flag_history_exit_set.isra.0>:
	Z_SHELL_SET_FLAG_ATOMIC(shell, history_exit, val, ret);
 80567aa:	f500 7018 	add.w	r0, r0, #608	; 0x260
 80567ae:	b111      	cbz	r1, 80567b6 <z_flag_history_exit_set.isra.0+0xc>
 80567b0:	2180      	movs	r1, #128	; 0x80
 80567b2:	f7ff bf7e 	b.w	80566b2 <atomic_or>
 80567b6:	f06f 0180 	mvn.w	r1, #128	; 0x80
 80567ba:	f7ff bf89 	b.w	80566d0 <atomic_and>

080567be <z_flag_use_colors_set.isra.0>:
	Z_SHELL_SET_FLAG_ATOMIC(shell, use_colors, val, ret);
 80567be:	f500 7018 	add.w	r0, r0, #608	; 0x260
static inline bool z_flag_use_colors_set(const struct shell *shell, bool val)
 80567c2:	b508      	push	{r3, lr}
	Z_SHELL_SET_FLAG_ATOMIC(shell, use_colors, val, ret);
 80567c4:	b129      	cbz	r1, 80567d2 <z_flag_use_colors_set.isra.0+0x14>
 80567c6:	2102      	movs	r1, #2
 80567c8:	f7ff ff73 	bl	80566b2 <atomic_or>
}
 80567cc:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80567d0:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(shell, use_colors, val, ret);
 80567d2:	f06f 0102 	mvn.w	r1, #2
 80567d6:	f7ff ff7b 	bl	80566d0 <atomic_and>
 80567da:	e7f7      	b.n	80567cc <z_flag_use_colors_set.isra.0+0xe>

080567dc <z_flag_insert_mode_set.isra.0>:
	Z_SHELL_SET_FLAG_ATOMIC(shell, insert_mode, val, ret);
 80567dc:	f500 7018 	add.w	r0, r0, #608	; 0x260
static inline bool z_flag_insert_mode_set(const struct shell *shell, bool val)
 80567e0:	b508      	push	{r3, lr}
	Z_SHELL_SET_FLAG_ATOMIC(shell, insert_mode, val, ret);
 80567e2:	b129      	cbz	r1, 80567f0 <z_flag_insert_mode_set.isra.0+0x14>
 80567e4:	2101      	movs	r1, #1
 80567e6:	f7ff ff64 	bl	80566b2 <atomic_or>
}
 80567ea:	f000 0001 	and.w	r0, r0, #1
 80567ee:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(shell, insert_mode, val, ret);
 80567f0:	f06f 0101 	mvn.w	r1, #1
 80567f4:	f7ff ff6c 	bl	80566d0 <atomic_and>
 80567f8:	e7f7      	b.n	80567ea <z_flag_insert_mode_set.isra.0+0xe>

080567fa <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 80567fa:	f7fb b92f 	b.w	8051a5c <z_impl_k_mutex_unlock>

080567fe <shell_log_process>:
{
 80567fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int signaled = 0;
 8056800:	2300      	movs	r3, #0
{
 8056802:	4604      	mov	r4, r0
	int signaled = 0;
 8056804:	9300      	str	r3, [sp, #0]
			z_shell_cmd_line_erase(shell);
 8056806:	4620      	mov	r0, r4
 8056808:	f000 fa4a 	bl	8056ca0 <z_shell_cmd_line_erase>
			processed = z_shell_log_backend_process(
 805680c:	69e0      	ldr	r0, [r4, #28]
 805680e:	f000 fda4 	bl	805735a <z_shell_log_backend_process>
 8056812:	4605      	mov	r5, r0
		z_shell_print_prompt_and_cmd(shell);
 8056814:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
 8056816:	68a6      	ldr	r6, [r4, #8]
		z_shell_print_prompt_and_cmd(shell);
 8056818:	f7f0 ff00 	bl	804761c <z_shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
 805681c:	68a3      	ldr	r3, [r4, #8]
		struct k_poll_signal *signal =
 805681e:	f506 7619 	add.w	r6, r6, #612	; 0x264
		if (shell->ctx->cmd_buff_len) {
 8056822:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8056824:	b11b      	cbz	r3, 805682e <shell_log_process+0x30>
	return z_impl_k_sleep(timeout);
 8056826:	2096      	movs	r0, #150	; 0x96
 8056828:	2100      	movs	r1, #0
 805682a:	f7fb fd3d 	bl	80522a8 <z_impl_k_sleep>
	z_impl_k_poll_signal_check(sig, signaled, result);
 805682e:	aa01      	add	r2, sp, #4
 8056830:	4669      	mov	r1, sp
 8056832:	4630      	mov	r0, r6
 8056834:	f004 f93a 	bl	805aaac <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
 8056838:	b115      	cbz	r5, 8056840 <shell_log_process+0x42>
 805683a:	9b00      	ldr	r3, [sp, #0]
 805683c:	2b00      	cmp	r3, #0
 805683e:	d0e2      	beq.n	8056806 <shell_log_process+0x8>
}
 8056840:	b002      	add	sp, #8
 8056842:	bd70      	pop	{r4, r5, r6, pc}

08056844 <shell_vfprintf>:
{
 8056844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8056846:	4604      	mov	r4, r0
	return shell->ctx->state;
 8056848:	6880      	ldr	r0, [r0, #8]
{
 805684a:	461f      	mov	r7, r3
 805684c:	460d      	mov	r5, r1
	if (state_get(shell) != SHELL_STATE_ACTIVE) {
 805684e:	7903      	ldrb	r3, [r0, #4]
{
 8056850:	4616      	mov	r6, r2
	if (state_get(shell) != SHELL_STATE_ACTIVE) {
 8056852:	2b02      	cmp	r3, #2
 8056854:	d007      	beq.n	8056866 <shell_vfprintf+0x22>
	Z_SHELL_SET_FLAG_ATOMIC(shell, print_noinit, val, ret);
 8056856:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 805685a:	f500 7018 	add.w	r0, r0, #608	; 0x260
}
 805685e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8056862:	f7ff bf26 	b.w	80566b2 <atomic_or>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8056866:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 805686a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 805686e:	f500 703d 	add.w	r0, r0, #756	; 0x2f4
 8056872:	f7ff ff66 	bl	8056742 <k_mutex_lock.constprop.0.isra.0>
	return shell->ctx->internal.flags.cmd_ctx == 1;
 8056876:	68a3      	ldr	r3, [r4, #8]
 8056878:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
	if (!z_flag_cmd_ctx_get(shell) && !shell->ctx->bypass) {
 805687c:	03d1      	lsls	r1, r2, #15
 805687e:	d404      	bmi.n	805688a <shell_vfprintf+0x46>
 8056880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8056882:	b913      	cbnz	r3, 805688a <shell_vfprintf+0x46>
		z_shell_cmd_line_erase(shell);
 8056884:	4620      	mov	r0, r4
 8056886:	f000 fa0b 	bl	8056ca0 <z_shell_cmd_line_erase>
	z_shell_vfprintf(shell, color, fmt, args);
 805688a:	463b      	mov	r3, r7
 805688c:	4632      	mov	r2, r6
 805688e:	4629      	mov	r1, r5
 8056890:	4620      	mov	r0, r4
 8056892:	f000 fa66 	bl	8056d62 <z_shell_vfprintf>
 8056896:	68a3      	ldr	r3, [r4, #8]
 8056898:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
	if (!z_flag_cmd_ctx_get(shell) && !shell->ctx->bypass) {
 805689c:	03d2      	lsls	r2, r2, #15
 805689e:	d404      	bmi.n	80568aa <shell_vfprintf+0x66>
 80568a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80568a2:	b913      	cbnz	r3, 80568aa <shell_vfprintf+0x66>
		z_shell_print_prompt_and_cmd(shell);
 80568a4:	4620      	mov	r0, r4
 80568a6:	f7f0 feb9 	bl	804761c <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
 80568aa:	6960      	ldr	r0, [r4, #20]
 80568ac:	f000 f82e 	bl	805690c <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&shell->ctx->wr_mtx);
 80568b0:	68a0      	ldr	r0, [r4, #8]
}
 80568b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&shell->ctx->wr_mtx);
 80568b6:	f500 703d 	add.w	r0, r0, #756	; 0x2f4
 80568ba:	f7ff bf9e 	b.w	80567fa <k_mutex_unlock.isra.0>

080568be <shell_fprintf>:
{
 80568be:	b40c      	push	{r2, r3}
 80568c0:	b507      	push	{r0, r1, r2, lr}
 80568c2:	ab04      	add	r3, sp, #16
 80568c4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
 80568c8:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
 80568ca:	f7ff ffbb 	bl	8056844 <shell_vfprintf>
}
 80568ce:	b003      	add	sp, #12
 80568d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80568d4:	b002      	add	sp, #8
 80568d6:	4770      	bx	lr

080568d8 <shell_hexdump>:
{
 80568d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80568dc:	4680      	mov	r8, r0
 80568de:	460e      	mov	r6, r1
 80568e0:	4614      	mov	r4, r2
	const uint8_t *p = data;
 80568e2:	460d      	mov	r5, r1
	while (len) {
 80568e4:	b90c      	cbnz	r4, 80568ea <shell_hexdump+0x12>
}
 80568e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		line_len = MIN(len, SHELL_HEXDUMP_BYTES_IN_LINE);
 80568ea:	2c10      	cmp	r4, #16
 80568ec:	4627      	mov	r7, r4
		shell_hexdump_line(shell, p - data, p, line_len);
 80568ee:	462a      	mov	r2, r5
 80568f0:	eba5 0106 	sub.w	r1, r5, r6
		line_len = MIN(len, SHELL_HEXDUMP_BYTES_IN_LINE);
 80568f4:	bf28      	it	cs
 80568f6:	2710      	movcs	r7, #16
		shell_hexdump_line(shell, p - data, p, line_len);
 80568f8:	4640      	mov	r0, r8
 80568fa:	463b      	mov	r3, r7
		len -= line_len;
 80568fc:	1be4      	subs	r4, r4, r7
		p += line_len;
 80568fe:	443d      	add	r5, r7
		shell_hexdump_line(shell, p - data, p, line_len);
 8056900:	f7f0 fb22 	bl	8046f48 <shell_hexdump_line>
		p += line_len;
 8056904:	e7ee      	b.n	80568e4 <shell_hexdump+0xc>

08056906 <shell_set_bypass>:
	sh->ctx->bypass = bypass;
 8056906:	6883      	ldr	r3, [r0, #8]
 8056908:	6399      	str	r1, [r3, #56]	; 0x38
}
 805690a:	4770      	bx	lr

0805690c <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
 805690c:	6902      	ldr	r2, [r0, #16]
 805690e:	6883      	ldr	r3, [r0, #8]
 8056910:	6812      	ldr	r2, [r2, #0]
 8056912:	6801      	ldr	r1, [r0, #0]
{
 8056914:	b510      	push	{r4, lr}
 8056916:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
 8056918:	68c0      	ldr	r0, [r0, #12]
 805691a:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
 805691c:	2200      	movs	r2, #0
 805691e:	6923      	ldr	r3, [r4, #16]
 8056920:	601a      	str	r2, [r3, #0]
}
 8056922:	bd10      	pop	{r4, pc}

08056924 <out_func>:
{
 8056924:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
 8056926:	68cb      	ldr	r3, [r1, #12]
{
 8056928:	4605      	mov	r5, r0
 805692a:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
 805692c:	7c1b      	ldrb	r3, [r3, #16]
 805692e:	2b02      	cmp	r3, #2
 8056930:	d104      	bne.n	805693c <out_func+0x18>
 8056932:	280a      	cmp	r0, #10
 8056934:	d102      	bne.n	805693c <out_func+0x18>
		(void)out_func('\r', ctx);
 8056936:	200d      	movs	r0, #13
 8056938:	f7ff fff4 	bl	8056924 <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
 805693c:	6923      	ldr	r3, [r4, #16]
 805693e:	6822      	ldr	r2, [r4, #0]
 8056940:	681b      	ldr	r3, [r3, #0]
 8056942:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
 8056944:	6922      	ldr	r2, [r4, #16]
 8056946:	6813      	ldr	r3, [r2, #0]
 8056948:	3301      	adds	r3, #1
 805694a:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
 805694c:	6862      	ldr	r2, [r4, #4]
 805694e:	4293      	cmp	r3, r2
 8056950:	d102      	bne.n	8056958 <out_func+0x34>
		z_shell_fprintf_buffer_flush(sh_fprintf);
 8056952:	4620      	mov	r0, r4
 8056954:	f7ff ffda 	bl	805690c <z_shell_fprintf_buffer_flush>
}
 8056958:	2000      	movs	r0, #0
 805695a:	bd38      	pop	{r3, r4, r5, pc}

0805695c <z_shell_strlen>:
{
 805695c:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
 805695e:	b110      	cbz	r0, 8056966 <z_shell_strlen+0xa>
 8056960:	f7e9 ff7a 	bl	8040858 <strlen>
 8056964:	b280      	uxth	r0, r0
}
 8056966:	bd08      	pop	{r3, pc}

08056968 <z_column_span_with_buffer_offsets_get>:
{
 8056968:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
 805696a:	7b03      	ldrb	r3, [r0, #12]
 805696c:	8940      	ldrh	r0, [r0, #10]
 805696e:	441a      	add	r2, r3
 8056970:	4419      	add	r1, r3
 8056972:	fbb2 f4f0 	udiv	r4, r2, r0
 8056976:	fbb1 f3f0 	udiv	r3, r1, r0
 805697a:	fb00 2214 	mls	r2, r0, r4, r2
 805697e:	fb00 1013 	mls	r0, r0, r3, r1
}
 8056982:	1a10      	subs	r0, r2, r0
 8056984:	bd10      	pop	{r4, pc}

08056986 <z_row_span_with_buffer_offsets_get>:
{
 8056986:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
 8056988:	7b04      	ldrb	r4, [r0, #12]
 805698a:	8943      	ldrh	r3, [r0, #10]
 805698c:	4422      	add	r2, r4
 805698e:	4421      	add	r1, r4
 8056990:	fbb2 f0f3 	udiv	r0, r2, r3
 8056994:	fbb1 f1f3 	udiv	r1, r1, r3
}
 8056998:	1a40      	subs	r0, r0, r1
 805699a:	bd10      	pop	{r4, pc}

0805699c <z_shell_multiline_data_calc>:
{
 805699c:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
 805699e:	7b05      	ldrb	r5, [r0, #12]
 80569a0:	8943      	ldrh	r3, [r0, #10]
 80569a2:	4429      	add	r1, r5
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 80569a4:	442a      	add	r2, r5
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
 80569a6:	fbb1 f4f3 	udiv	r4, r1, r3
 80569aa:	fb03 1114 	mls	r1, r3, r4, r1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
 80569ae:	3401      	adds	r4, #1
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
 80569b0:	3101      	adds	r1, #1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
 80569b2:	8084      	strh	r4, [r0, #4]
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
 80569b4:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 80569b6:	fbb2 f1f3 	udiv	r1, r2, r3
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
 80569ba:	fb03 2211 	mls	r2, r3, r1, r2
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 80569be:	1c4c      	adds	r4, r1, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
 80569c0:	3201      	adds	r2, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 80569c2:	80c4      	strh	r4, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
 80569c4:	8042      	strh	r2, [r0, #2]
}
 80569c6:	bd30      	pop	{r4, r5, pc}

080569c8 <z_shell_pattern_remove>:
{
 80569c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80569ca:	4615      	mov	r5, r2
 80569cc:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
 80569ce:	4611      	mov	r1, r2
{
 80569d0:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
 80569d2:	f004 fbc6 	bl	805b162 <strstr>
 80569d6:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
 80569d8:	4628      	mov	r0, r5
 80569da:	f7ff ffbf 	bl	805695c <z_shell_strlen>
 80569de:	4605      	mov	r5, r0
	if (!pattern_addr) {
 80569e0:	b1c4      	cbz	r4, 8056a14 <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
 80569e2:	42a7      	cmp	r7, r4
 80569e4:	d207      	bcs.n	80569f6 <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
 80569e6:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80569ea:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
 80569ec:	bf02      	ittt	eq
 80569ee:	3501      	addeq	r5, #1
			pattern_addr--; /* set pointer to space */
 80569f0:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
			pattern_len++; /* space needs to be removed as well */
 80569f4:	b2ad      	uxtheq	r5, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 80569f6:	4620      	mov	r0, r4
 80569f8:	f7ff ffb0 	bl	805695c <z_shell_strlen>
	*buff_len -= pattern_len;
 80569fc:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 80569fe:	1b40      	subs	r0, r0, r5
__ssp_bos_icheck3(memmove, void *, const void *)
 8056a00:	1961      	adds	r1, r4, r5
	*buff_len -= pattern_len;
 8056a02:	1b5b      	subs	r3, r3, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 8056a04:	1c42      	adds	r2, r0, #1
 8056a06:	4620      	mov	r0, r4
	*buff_len -= pattern_len;
 8056a08:	8033      	strh	r3, [r6, #0]
 8056a0a:	b292      	uxth	r2, r2
}
 8056a0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8056a10:	f004 ba02 	b.w	805ae18 <memmove>
 8056a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08056a16 <z_shell_find_cmd>:
{
 8056a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8056a1a:	460e      	mov	r6, r1
 8056a1c:	b086      	sub	sp, #24
 8056a1e:	4617      	mov	r7, r2
	if (parent) {
 8056a20:	4604      	mov	r4, r0
 8056a22:	b178      	cbz	r0, 8056a44 <z_shell_find_cmd+0x2e>
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
 8056a24:	4603      	mov	r3, r0
 8056a26:	ac01      	add	r4, sp, #4
 8056a28:	f100 0210 	add.w	r2, r0, #16
 8056a2c:	6818      	ldr	r0, [r3, #0]
 8056a2e:	3308      	adds	r3, #8
 8056a30:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8056a34:	4625      	mov	r5, r4
 8056a36:	4293      	cmp	r3, r2
 8056a38:	c503      	stmia	r5!, {r0, r1}
 8056a3a:	462c      	mov	r4, r5
 8056a3c:	d1f6      	bne.n	8056a2c <z_shell_find_cmd+0x16>
 8056a3e:	6818      	ldr	r0, [r3, #0]
		parent = &parent_cpy;
 8056a40:	ac01      	add	r4, sp, #4
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
 8056a42:	6028      	str	r0, [r5, #0]
		parent = &parent_cpy;
 8056a44:	f04f 0800 	mov.w	r8, #0
	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
 8056a48:	4641      	mov	r1, r8
 8056a4a:	463a      	mov	r2, r7
 8056a4c:	4620      	mov	r0, r4
 8056a4e:	f108 0801 	add.w	r8, r8, #1
 8056a52:	f7f0 fbb5 	bl	80471c0 <z_shell_cmd_get>
 8056a56:	4605      	mov	r5, r0
 8056a58:	b128      	cbz	r0, 8056a66 <z_shell_find_cmd+0x50>
		if (strcmp(cmd_str, entry->syntax) == 0) {
 8056a5a:	6829      	ldr	r1, [r5, #0]
 8056a5c:	4630      	mov	r0, r6
 8056a5e:	f7e9 fef1 	bl	8040844 <strcmp>
 8056a62:	2800      	cmp	r0, #0
 8056a64:	d1f0      	bne.n	8056a48 <z_shell_find_cmd+0x32>
}
 8056a66:	4628      	mov	r0, r5
 8056a68:	b006      	add	sp, #24
 8056a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08056a6e <z_shell_get_last_command>:
{
 8056a6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8056a72:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8056a76:	461c      	mov	r4, r3
 8056a78:	460f      	mov	r7, r1
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
 8056a7a:	2300      	movs	r3, #0
{
 8056a7c:	4616      	mov	r6, r2
 8056a7e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
 8056a82:	6023      	str	r3, [r4, #0]
	while (*match_arg < argc) {
 8056a84:	6823      	ldr	r3, [r4, #0]
				continue;
 8056a86:	4605      	mov	r5, r0
	while (*match_arg < argc) {
 8056a88:	42bb      	cmp	r3, r7
 8056a8a:	d21b      	bcs.n	8056ac4 <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
 8056a8c:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8056a90:	f000 fcd9 	bl	8057446 <z_shell_has_wildcard>
 8056a94:	6823      	ldr	r3, [r4, #0]
 8056a96:	4682      	mov	sl, r0
 8056a98:	b118      	cbz	r0, 8056aa2 <z_shell_get_last_command+0x34>
				(*match_arg)++;
 8056a9a:	3301      	adds	r3, #1
				continue;
 8056a9c:	4628      	mov	r0, r5
				(*match_arg)++;
 8056a9e:	6023      	str	r3, [r4, #0]
				continue;
 8056aa0:	e7f0      	b.n	8056a84 <z_shell_get_last_command+0x16>
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
 8056aa2:	4642      	mov	r2, r8
 8056aa4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8056aa8:	4628      	mov	r0, r5
 8056aaa:	f7ff ffb4 	bl	8056a16 <z_shell_find_cmd>
		if (entry) {
 8056aae:	b148      	cbz	r0, 8056ac4 <z_shell_get_last_command+0x56>
			(*match_arg)++;
 8056ab0:	6823      	ldr	r3, [r4, #0]
 8056ab2:	1c5a      	adds	r2, r3, #1
 8056ab4:	6022      	str	r2, [r4, #0]
		if (only_static && (entry == dloc)) {
 8056ab6:	f1b9 0f00 	cmp.w	r9, #0
 8056aba:	d0e3      	beq.n	8056a84 <z_shell_get_last_command+0x16>
 8056abc:	4580      	cmp	r8, r0
 8056abe:	d1e1      	bne.n	8056a84 <z_shell_get_last_command+0x16>
			return NULL;
 8056ac0:	4655      	mov	r5, sl
			(*match_arg)--;
 8056ac2:	6023      	str	r3, [r4, #0]
}
 8056ac4:	4628      	mov	r0, r5
 8056ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08056aca <shell_device_lookup>:

const struct device *shell_device_lookup(size_t idx,
				   const char *prefix)
{
 8056aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8056acc:	b085      	sub	sp, #20
 8056ace:	4607      	mov	r7, r0
 8056ad0:	460c      	mov	r4, r1
	size_t match_idx = 0;
	const struct device *dev;
	size_t len = z_device_get_all_static(&dev);
	const struct device *dev_end = dev + len;
 8056ad2:	2518      	movs	r5, #24
	size_t len = z_device_get_all_static(&dev);
 8056ad4:	a803      	add	r0, sp, #12
	size_t match_idx = 0;
 8056ad6:	2600      	movs	r6, #0
	size_t len = z_device_get_all_static(&dev);
 8056ad8:	f7fa fb02 	bl	80510e0 <z_device_get_all_static>
	const struct device *dev_end = dev + len;
 8056adc:	9b03      	ldr	r3, [sp, #12]
 8056ade:	fb05 3500 	mla	r5, r5, r0, r3

	while (dev < dev_end) {
 8056ae2:	9803      	ldr	r0, [sp, #12]
 8056ae4:	42a8      	cmp	r0, r5
 8056ae6:	d301      	bcc.n	8056aec <shell_device_lookup+0x22>
			++match_idx;
		}
		++dev;
	}

	return NULL;
 8056ae8:	2000      	movs	r0, #0
 8056aea:	e00c      	b.n	8056b06 <shell_device_lookup+0x3c>
	return z_device_ready(dev) ? 0 : -ENODEV;
 8056aec:	f003 fbb3 	bl	805a256 <z_device_ready>
 8056af0:	b1c0      	cbz	r0, 8056b24 <shell_device_lookup+0x5a>
		    && (dev->name != NULL)
 8056af2:	9b03      	ldr	r3, [sp, #12]
 8056af4:	6818      	ldr	r0, [r3, #0]
 8056af6:	b1a8      	cbz	r0, 8056b24 <shell_device_lookup+0x5a>
		    && (strlen(dev->name) != 0)
 8056af8:	f7e9 feae 	bl	8040858 <strlen>
 8056afc:	b190      	cbz	r0, 8056b24 <shell_device_lookup+0x5a>
		    && ((prefix == NULL)
 8056afe:	b924      	cbnz	r4, 8056b0a <shell_device_lookup+0x40>
			if (match_idx == idx) {
 8056b00:	42be      	cmp	r6, r7
 8056b02:	d113      	bne.n	8056b2c <shell_device_lookup+0x62>
				return dev;
 8056b04:	9803      	ldr	r0, [sp, #12]
}
 8056b06:	b005      	add	sp, #20
 8056b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
			|| (strncmp(prefix, dev->name,
 8056b0a:	9b03      	ldr	r3, [sp, #12]
 8056b0c:	4620      	mov	r0, r4
 8056b0e:	6819      	ldr	r1, [r3, #0]
 8056b10:	9101      	str	r1, [sp, #4]
 8056b12:	f7e9 fea1 	bl	8040858 <strlen>
 8056b16:	9901      	ldr	r1, [sp, #4]
 8056b18:	4602      	mov	r2, r0
 8056b1a:	4620      	mov	r0, r4
 8056b1c:	f004 fada 	bl	805b0d4 <strncmp>
 8056b20:	2800      	cmp	r0, #0
 8056b22:	d0ed      	beq.n	8056b00 <shell_device_lookup+0x36>
		++dev;
 8056b24:	9b03      	ldr	r3, [sp, #12]
 8056b26:	3318      	adds	r3, #24
 8056b28:	9303      	str	r3, [sp, #12]
 8056b2a:	e7da      	b.n	8056ae2 <shell_device_lookup+0x18>
			++match_idx;
 8056b2c:	3601      	adds	r6, #1
 8056b2e:	e7f9      	b.n	8056b24 <shell_device_lookup+0x5a>

08056b30 <z_shell_raw_fprintf>:
{
 8056b30:	b40e      	push	{r1, r2, r3}
 8056b32:	b503      	push	{r0, r1, lr}
 8056b34:	aa03      	add	r2, sp, #12
 8056b36:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 8056b3a:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
 8056b3c:	f7f0 fa70 	bl	8047020 <z_shell_fprintf_fmt>
}
 8056b40:	b002      	add	sp, #8
 8056b42:	f85d eb04 	ldr.w	lr, [sp], #4
 8056b46:	b003      	add	sp, #12
 8056b48:	4770      	bx	lr

08056b4a <full_line_cmd>:
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
 8056b4a:	6882      	ldr	r2, [r0, #8]
{
 8056b4c:	b538      	push	{r3, r4, r5, lr}
 8056b4e:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
 8056b50:	6810      	ldr	r0, [r2, #0]
 8056b52:	8f95      	ldrh	r5, [r2, #60]	; 0x3c
	return str == NULL ? 0U : (uint16_t)strlen(str);
 8056b54:	b168      	cbz	r0, 8056b72 <full_line_cmd+0x28>
 8056b56:	f7e9 fe7f 	bl	8040858 <strlen>
 8056b5a:	b283      	uxth	r3, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 8056b5c:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
 8056b5e:	442b      	add	r3, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 8056b60:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
 8056b62:	fbb3 f2f0 	udiv	r2, r3, r0
 8056b66:	fb00 3012 	mls	r0, r0, r2, r3
}
 8056b6a:	fab0 f080 	clz	r0, r0
 8056b6e:	0940      	lsrs	r0, r0, #5
 8056b70:	bd38      	pop	{r3, r4, r5, pc}
 8056b72:	4603      	mov	r3, r0
 8056b74:	e7f2      	b.n	8056b5c <full_line_cmd+0x12>

08056b76 <z_shell_cursor_in_empty_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
 8056b76:	6882      	ldr	r2, [r0, #8]
{
 8056b78:	b538      	push	{r3, r4, r5, lr}
 8056b7a:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
 8056b7c:	6810      	ldr	r0, [r2, #0]
 8056b7e:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
 8056b80:	b168      	cbz	r0, 8056b9e <z_shell_cursor_in_empty_line+0x28>
 8056b82:	f7e9 fe69 	bl	8040858 <strlen>
 8056b86:	b283      	uxth	r3, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 8056b88:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
 8056b8a:	442b      	add	r3, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 8056b8c:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
 8056b8e:	fbb3 f2f0 	udiv	r2, r3, r0
 8056b92:	fb00 3012 	mls	r0, r0, r2, r3
}
 8056b96:	fab0 f080 	clz	r0, r0
 8056b9a:	0940      	lsrs	r0, r0, #5
 8056b9c:	bd38      	pop	{r3, r4, r5, pc}
 8056b9e:	4603      	mov	r3, r0
 8056ba0:	e7f2      	b.n	8056b88 <z_shell_cursor_in_empty_line+0x12>

08056ba2 <z_shell_op_cond_next_line>:
{
 8056ba2:	b510      	push	{r4, lr}
 8056ba4:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
 8056ba6:	f7ff ffe6 	bl	8056b76 <z_shell_cursor_in_empty_line>
 8056baa:	b120      	cbz	r0, 8056bb6 <z_shell_op_cond_next_line+0x14>
		z_cursor_next_line_move(shell);
 8056bac:	6960      	ldr	r0, [r4, #20]
}
 8056bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_cursor_next_line_move(shell);
 8056bb2:	f7f0 bb97 	b.w	80472e4 <z_cursor_next_line_move.isra.0>
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
 8056bb6:	4620      	mov	r0, r4
 8056bb8:	f7ff ffc7 	bl	8056b4a <full_line_cmd>
 8056bbc:	2800      	cmp	r0, #0
 8056bbe:	d1f5      	bne.n	8056bac <z_shell_op_cond_next_line+0xa>
}
 8056bc0:	bd10      	pop	{r4, pc}

08056bc2 <z_shell_op_cursor_position_synchronize>:
{
 8056bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
 8056bc4:	6884      	ldr	r4, [r0, #8]
{
 8056bc6:	4605      	mov	r5, r0
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
 8056bc8:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8056bca:	f104 0020 	add.w	r0, r4, #32
 8056bce:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8056bd0:	f7ff fee4 	bl	805699c <z_shell_multiline_data_calc>
	if (full_line_cmd(shell)) {
 8056bd4:	4628      	mov	r0, r5
	last_line = (cons->cur_y == cons->cur_y_end);
 8056bd6:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
 8056bd8:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
 8056bda:	f7ff ffb6 	bl	8056b4a <full_line_cmd>
 8056bde:	b110      	cbz	r0, 8056be6 <z_shell_op_cursor_position_synchronize+0x24>
		z_cursor_next_line_move(shell);
 8056be0:	6968      	ldr	r0, [r5, #20]
 8056be2:	f7f0 fb7f 	bl	80472e4 <z_cursor_next_line_move.isra.0>
	if (last_line) {
 8056be6:	42b7      	cmp	r7, r6
 8056be8:	d107      	bne.n	8056bfa <z_shell_op_cursor_position_synchronize+0x38>
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
 8056bea:	8c21      	ldrh	r1, [r4, #32]
 8056bec:	4628      	mov	r0, r5
							       cons->cur_x_end);
 8056bee:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
 8056bf0:	1ac9      	subs	r1, r1, r3
}
 8056bf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
 8056bf6:	f7f0 bb93 	b.w	8047320 <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
 8056bfa:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8056bfc:	4628      	mov	r0, r5
 8056bfe:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8056c00:	1ac9      	subs	r1, r1, r3
 8056c02:	f7f0 fb7d 	bl	8047300 <z_shell_op_cursor_vert_move>
 8056c06:	e7f0      	b.n	8056bea <z_shell_op_cursor_position_synchronize+0x28>

08056c08 <z_shell_op_cursor_move>:
{
 8056c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8056c0a:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
 8056c0c:	6880      	ldr	r0, [r0, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
 8056c0e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
 8056c10:	3020      	adds	r0, #32
 8056c12:	8b82      	ldrh	r2, [r0, #28]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
 8056c14:	18cd      	adds	r5, r1, r3
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
 8056c16:	4619      	mov	r1, r3
 8056c18:	f7ff fec0 	bl	805699c <z_shell_multiline_data_calc>
						&shell->ctx->vt100_ctx.cons,
 8056c1c:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
 8056c1e:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
 8056c20:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8056c22:	3020      	adds	r0, #32
 8056c24:	462a      	mov	r2, r5
 8056c26:	f7ff feae 	bl	8056986 <z_row_span_with_buffer_offsets_get>
 8056c2a:	4607      	mov	r7, r0
						&shell->ctx->vt100_ctx.cons,
 8056c2c:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
 8056c2e:	462a      	mov	r2, r5
 8056c30:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8056c32:	3020      	adds	r0, #32
 8056c34:	f7ff fe98 	bl	8056968 <z_column_span_with_buffer_offsets_get>
 8056c38:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(shell, -row_span);
 8056c3a:	4279      	negs	r1, r7
 8056c3c:	4620      	mov	r0, r4
 8056c3e:	f7f0 fb5f 	bl	8047300 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, col_span);
 8056c42:	4631      	mov	r1, r6
 8056c44:	4620      	mov	r0, r4
 8056c46:	f7f0 fb6b 	bl	8047320 <z_shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
 8056c4a:	68a3      	ldr	r3, [r4, #8]
 8056c4c:	87dd      	strh	r5, [r3, #62]	; 0x3e
}
 8056c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08056c50 <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
 8056c50:	6883      	ldr	r3, [r0, #8]
 8056c52:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8056c54:	4249      	negs	r1, r1
 8056c56:	b209      	sxth	r1, r1
 8056c58:	f7ff bfd6 	b.w	8056c08 <z_shell_op_cursor_move>

08056c5c <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
 8056c5c:	6883      	ldr	r3, [r0, #8]
 8056c5e:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 8056c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8056c62:	1ac9      	subs	r1, r1, r3
 8056c64:	b209      	sxth	r1, r1
 8056c66:	f7ff bfcf 	b.w	8056c08 <z_shell_op_cursor_move>

08056c6a <z_shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
 8056c6a:	6883      	ldr	r3, [r0, #8]
 8056c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8056c6e:	b11b      	cbz	r3, 8056c78 <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(shell, -1);
 8056c70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8056c74:	f7ff bfc8 	b.w	8056c08 <z_shell_op_cursor_move>
}
 8056c78:	4770      	bx	lr

08056c7a <z_shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
 8056c7a:	6883      	ldr	r3, [r0, #8]
 8056c7c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8056c7e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8056c80:	429a      	cmp	r2, r3
 8056c82:	d202      	bcs.n	8056c8a <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(shell, 1);
 8056c84:	2101      	movs	r1, #1
 8056c86:	f7ff bfbf 	b.w	8056c08 <z_shell_op_cursor_move>
}
 8056c8a:	4770      	bx	lr

08056c8c <z_shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
 8056c8c:	6883      	ldr	r3, [r0, #8]
 8056c8e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8056c90:	879a      	strh	r2, [r3, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
 8056c92:	4413      	add	r3, r2
 8056c94:	2200      	movs	r2, #0
 8056c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_clear_eos(shell);
 8056c9a:	6940      	ldr	r0, [r0, #20]
 8056c9c:	f7f0 bb28 	b.w	80472f0 <z_clear_eos.isra.0>

08056ca0 <z_shell_cmd_line_erase>:
{
 8056ca0:	b510      	push	{r4, lr}
 8056ca2:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
 8056ca4:	6880      	ldr	r0, [r0, #8]
 8056ca6:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8056ca8:	3020      	adds	r0, #32
 8056caa:	8bc1      	ldrh	r1, [r0, #30]
 8056cac:	f7ff fe76 	bl	805699c <z_shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
 8056cb0:	68a3      	ldr	r3, [r4, #8]
	z_shell_op_cursor_horiz_move(shell,
 8056cb2:	4620      	mov	r0, r4
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
 8056cb4:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(shell,
 8056cb6:	f1c1 0101 	rsb	r1, r1, #1
 8056cba:	f7f0 fb31 	bl	8047320 <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
 8056cbe:	68a3      	ldr	r3, [r4, #8]
 8056cc0:	4620      	mov	r0, r4
 8056cc2:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8056cc4:	3901      	subs	r1, #1
 8056cc6:	f7f0 fb1b 	bl	8047300 <z_shell_op_cursor_vert_move>
	z_clear_eos(shell);
 8056cca:	6960      	ldr	r0, [r4, #20]
}
 8056ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(shell);
 8056cd0:	f7f0 bb0e 	b.w	80472f0 <z_clear_eos.isra.0>

08056cd4 <z_shell_write>:
{
 8056cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8056cd8:	4605      	mov	r5, r0
 8056cda:	b086      	sub	sp, #24
 8056cdc:	460f      	mov	r7, r1
 8056cde:	4614      	mov	r4, r2
	size_t offset = 0;
 8056ce0:	2600      	movs	r6, #0
	while (length) {
 8056ce2:	b914      	cbnz	r4, 8056cea <z_shell_write+0x16>
}
 8056ce4:	b006      	add	sp, #24
 8056ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
 8056cea:	6868      	ldr	r0, [r5, #4]
 8056cec:	4622      	mov	r2, r4
 8056cee:	19b9      	adds	r1, r7, r6
 8056cf0:	6803      	ldr	r3, [r0, #0]
 8056cf2:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8056cf6:	466b      	mov	r3, sp
 8056cf8:	47c0      	blx	r8
		offset += tmp_cnt;
 8056cfa:	9a00      	ldr	r2, [sp, #0]
 8056cfc:	4416      	add	r6, r2
		length -= tmp_cnt;
 8056cfe:	1aa4      	subs	r4, r4, r2
		if (tmp_cnt == 0 &&
 8056d00:	2a00      	cmp	r2, #0
 8056d02:	d1ee      	bne.n	8056ce2 <z_shell_write+0xe>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
 8056d04:	68ab      	ldr	r3, [r5, #8]
 8056d06:	7919      	ldrb	r1, [r3, #4]
		if (tmp_cnt == 0 &&
 8056d08:	2903      	cmp	r1, #3
 8056d0a:	d0ea      	beq.n	8056ce2 <z_shell_write+0xe>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
 8056d0c:	2902      	cmp	r1, #2
 8056d0e:	d813      	bhi.n	8056d38 <z_shell_write+0x64>
		k_poll_event_init(&event,
 8056d10:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8056d14:	2101      	movs	r1, #1
 8056d16:	a801      	add	r0, sp, #4
 8056d18:	f003 fea3 	bl	805aa62 <k_poll_event_init>
	return z_impl_k_poll(events, num_events, timeout);
 8056d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8056d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8056d24:	2101      	movs	r1, #1
 8056d26:	a801      	add	r0, sp, #4
 8056d28:	f7fb fd52 	bl	80527d0 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
 8056d2c:	68a8      	ldr	r0, [r5, #8]
 8056d2e:	f500 7025 	add.w	r0, r0, #660	; 0x294
	z_impl_k_poll_signal_reset(sig);
 8056d32:	f003 feb8 	bl	805aaa6 <z_impl_k_poll_signal_reset>
 8056d36:	e7d4      	b.n	8056ce2 <z_shell_write+0xe>
	return shell->ctx->internal.flags.tx_rdy == 1;
 8056d38:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
		while (!z_flag_tx_rdy_get(shell)) {
 8056d3c:	0692      	lsls	r2, r2, #26
 8056d3e:	d5fb      	bpl.n	8056d38 <z_shell_write+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8056d40:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8056d44:	f3bf 8f5b 	dmb	ish
 8056d48:	e853 2f00 	ldrex	r2, [r3]
 8056d4c:	f022 0220 	bic.w	r2, r2, #32
 8056d50:	e843 2100 	strex	r1, r2, [r3]
 8056d54:	2900      	cmp	r1, #0
 8056d56:	d1f7      	bne.n	8056d48 <z_shell_write+0x74>
 8056d58:	f3bf 8f5b 	dmb	ish
	return ret;
 8056d5c:	e7c1      	b.n	8056ce2 <z_shell_write+0xe>

08056d5e <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
 8056d5e:	f7ff bfb9 	b.w	8056cd4 <z_shell_write>

08056d62 <z_shell_vfprintf>:

void z_shell_vfprintf(const struct shell *shell, enum shell_vt100_color color,
		      const char *fmt, va_list args)
{
 8056d62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8056d64:	4615      	mov	r5, r2
 8056d66:	461a      	mov	r2, r3
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
	    shell->ctx->internal.flags.use_colors &&
 8056d68:	6883      	ldr	r3, [r0, #8]
{
 8056d6a:	b085      	sub	sp, #20
 8056d6c:	4604      	mov	r4, r0
	    shell->ctx->internal.flags.use_colors &&
 8056d6e:	f8d3 7260 	ldr.w	r7, [r3, #608]	; 0x260
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
 8056d72:	07bf      	lsls	r7, r7, #30
 8056d74:	d514      	bpl.n	8056da0 <z_shell_vfprintf+0x3e>
	    shell->ctx->internal.flags.use_colors &&
 8056d76:	f893 702e 	ldrb.w	r7, [r3, #46]	; 0x2e
 8056d7a:	428f      	cmp	r7, r1
 8056d7c:	d010      	beq.n	8056da0 <z_shell_vfprintf+0x3e>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *shell,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
 8056d7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8056d80:	9201      	str	r2, [sp, #4]
 8056d82:	f8ad 300c 	strh.w	r3, [sp, #12]
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		z_shell_vt100_colors_store(shell, &col);
		z_shell_vt100_color_set(shell, color);
 8056d86:	f7f0 fb1d 	bl	80473c4 <z_shell_vt100_color_set>

		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
 8056d8a:	9a01      	ldr	r2, [sp, #4]
 8056d8c:	4629      	mov	r1, r5
 8056d8e:	6960      	ldr	r0, [r4, #20]
 8056d90:	f7f0 f946 	bl	8047020 <z_shell_fprintf_fmt>

		z_shell_vt100_colors_restore(shell, &col);
 8056d94:	a903      	add	r1, sp, #12
 8056d96:	4620      	mov	r0, r4
 8056d98:	f7f0 fb4a 	bl	8047430 <z_shell_vt100_colors_restore>
	} else {
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
 8056d9c:	b005      	add	sp, #20
 8056d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
 8056da0:	4629      	mov	r1, r5
 8056da2:	6960      	ldr	r0, [r4, #20]
}
 8056da4:	b005      	add	sp, #20
 8056da6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
 8056daa:	f7f0 b939 	b.w	8047020 <z_shell_fprintf_fmt>

08056dae <z_shell_fprintf>:

void z_shell_fprintf(const struct shell *sh,
		     enum shell_vt100_color color,
		     const char *fmt, ...)
{
 8056dae:	b40c      	push	{r2, r3}
 8056db0:	b507      	push	{r0, r1, r2, lr}
 8056db2:	ab04      	add	r3, sp, #16
 8056db4:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT(z_flag_panic_mode_get(sh) || !k_is_in_isr(),
		 "Thread context required.");

	va_list args;

	va_start(args, fmt);
 8056db8:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(sh, color, fmt, args);
 8056dba:	f7ff ffd2 	bl	8056d62 <z_shell_vfprintf>
	va_end(args);
}
 8056dbe:	b003      	add	sp, #12
 8056dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8056dc4:	b002      	add	sp, #8
 8056dc6:	4770      	bx	lr

08056dc8 <data_insert>:
{
 8056dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 8056dcc:	6886      	ldr	r6, [r0, #8]
{
 8056dce:	4607      	mov	r7, r0
 8056dd0:	4688      	mov	r8, r1
 8056dd2:	4614      	mov	r4, r2
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 8056dd4:	8fb5      	ldrh	r5, [r6, #60]	; 0x3c
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 8056dd6:	18ab      	adds	r3, r5, r2
 8056dd8:	2bff      	cmp	r3, #255	; 0xff
 8056dda:	dc1e      	bgt.n	8056e1a <data_insert+0x52>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 8056ddc:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8056dde:	1aed      	subs	r5, r5, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
 8056de0:	3342      	adds	r3, #66	; 0x42
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 8056de2:	b2ad      	uxth	r5, r5
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
 8056de4:	441e      	add	r6, r3
 8056de6:	462a      	mov	r2, r5
 8056de8:	4631      	mov	r1, r6
 8056dea:	1930      	adds	r0, r6, r4
 8056dec:	f004 f814 	bl	805ae18 <memmove>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8056df0:	4622      	mov	r2, r4
 8056df2:	4641      	mov	r1, r8
 8056df4:	4630      	mov	r0, r6
 8056df6:	f003 ffee 	bl	805add6 <memcpy>
	shell->ctx->cmd_buff_len += len;
 8056dfa:	68b9      	ldr	r1, [r7, #8]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 8056dfc:	2200      	movs	r2, #0
	shell->ctx->cmd_buff_len += len;
 8056dfe:	8f8b      	ldrh	r3, [r1, #60]	; 0x3c
 8056e00:	4423      	add	r3, r4
 8056e02:	b29b      	uxth	r3, r3
 8056e04:	878b      	strh	r3, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 8056e06:	440b      	add	r3, r1
 8056e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return shell->ctx->internal.flags.echo == 1;
 8056e0c:	f8d1 3260 	ldr.w	r3, [r1, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
 8056e10:	075b      	lsls	r3, r3, #29
 8056e12:	d404      	bmi.n	8056e1e <data_insert+0x56>
		shell->ctx->cmd_buff_pos += len;
 8056e14:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8056e16:	4414      	add	r4, r2
 8056e18:	87cc      	strh	r4, [r1, #62]	; 0x3e
}
 8056e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
 8056e1e:	4629      	mov	r1, r5
 8056e20:	4638      	mov	r0, r7
}
 8056e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
 8056e26:	f7f0 bb87 	b.w	8047538 <reprint_from_cursor>

08056e2a <z_shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
 8056e2a:	f7ff bfcd 	b.w	8056dc8 <data_insert>

08056e2e <z_shell_op_char_delete>:
{
 8056e2e:	b538      	push	{r3, r4, r5, lr}
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 8056e30:	6883      	ldr	r3, [r0, #8]
{
 8056e32:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 8056e34:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
 8056e36:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 8056e38:	1a24      	subs	r4, r4, r0
 8056e3a:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
 8056e3c:	b18c      	cbz	r4, 8056e62 <z_shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
 8056e3e:	3042      	adds	r0, #66	; 0x42
__ssp_bos_icheck3(memmove, void *, const void *)
 8056e40:	4622      	mov	r2, r4
 8056e42:	4418      	add	r0, r3
 8056e44:	1c41      	adds	r1, r0, #1
 8056e46:	f003 ffe7 	bl	805ae18 <memmove>
	--shell->ctx->cmd_buff_len;
 8056e4a:	68aa      	ldr	r2, [r5, #8]
	reprint_from_cursor(shell, --diff, true);
 8056e4c:	1e61      	subs	r1, r4, #1
 8056e4e:	4628      	mov	r0, r5
	--shell->ctx->cmd_buff_len;
 8056e50:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
 8056e52:	b289      	uxth	r1, r1
	--shell->ctx->cmd_buff_len;
 8056e54:	3b01      	subs	r3, #1
 8056e56:	8793      	strh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
 8056e58:	2201      	movs	r2, #1
}
 8056e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
 8056e5e:	f7f0 bb6b 	b.w	8047538 <reprint_from_cursor>
}
 8056e62:	bd38      	pop	{r3, r4, r5, pc}

08056e64 <z_shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
 8056e64:	6883      	ldr	r3, [r0, #8]
 8056e66:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
 8056e68:	b510      	push	{r4, lr}
 8056e6a:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
 8056e6c:	b152      	cbz	r2, 8056e84 <z_shell_op_char_backspace+0x20>
 8056e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8056e70:	b143      	cbz	r3, 8056e84 <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(shell, -1);
 8056e72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8056e76:	f7ff fec7 	bl	8056c08 <z_shell_op_cursor_move>
	z_shell_op_char_delete(shell);
 8056e7a:	4620      	mov	r0, r4
}
 8056e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(shell);
 8056e80:	f7ff bfd5 	b.w	8056e2e <z_shell_op_char_delete>
}
 8056e84:	bd10      	pop	{r4, pc}

08056e86 <uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
 8056e86:	6883      	ldr	r3, [r0, #8]
 8056e88:	6a1b      	ldr	r3, [r3, #32]
 8056e8a:	b103      	cbz	r3, 8056e8e <uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
 8056e8c:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
}
 8056e8e:	4770      	bx	lr

08056e90 <uninit>:
		const struct device *dev = sh_uart->ctrl_blk->dev;
 8056e90:	6843      	ldr	r3, [r0, #4]
 8056e92:	681b      	ldr	r3, [r3, #0]
{
 8056e94:	b510      	push	{r4, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
 8056e96:	681c      	ldr	r4, [r3, #0]
		uart_irq_tx_disable(dev);
 8056e98:	4620      	mov	r0, r4
 8056e9a:	f7ff fff4 	bl	8056e86 <uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
 8056e9e:	68a3      	ldr	r3, [r4, #8]
 8056ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8056ea2:	b10b      	cbz	r3, 8056ea8 <uninit+0x18>
		api->irq_rx_disable(dev);
 8056ea4:	4620      	mov	r0, r4
 8056ea6:	4798      	blx	r3
}
 8056ea8:	2000      	movs	r0, #0
 8056eaa:	bd10      	pop	{r4, pc}

08056eac <enable>:
{
 8056eac:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
 8056eae:	6843      	ldr	r3, [r0, #4]
 8056eb0:	681b      	ldr	r3, [r3, #0]
 8056eb2:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
 8056eb4:	b111      	cbz	r1, 8056ebc <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
 8056eb6:	6818      	ldr	r0, [r3, #0]
 8056eb8:	f7ff ffe5 	bl	8056e86 <uart_irq_tx_disable>
}
 8056ebc:	2000      	movs	r0, #0
 8056ebe:	bd08      	pop	{r3, pc}

08056ec0 <read>:
{
 8056ec0:	b510      	push	{r4, lr}
 8056ec2:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
 8056ec4:	6843      	ldr	r3, [r0, #4]
 8056ec6:	68d8      	ldr	r0, [r3, #12]
 8056ec8:	f7fe fefd 	bl	8055cc6 <ring_buf_get>
 8056ecc:	6020      	str	r0, [r4, #0]
}
 8056ece:	2000      	movs	r0, #0
 8056ed0:	bd10      	pop	{r4, pc}

08056ed2 <ring_buf_reset>:
 *
 * @param buf Address of ring buffer.
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
 8056ed2:	2300      	movs	r3, #0
	buf->tail = 0;
 8056ed4:	e9c0 3300 	strd	r3, r3, [r0]
__ssp_bos_icheck3(memset, void *, int)
 8056ed8:	6083      	str	r3, [r0, #8]
 8056eda:	60c3      	str	r3, [r0, #12]
	memset(&buf->misc, 0, sizeof(buf->misc));
}
 8056edc:	4770      	bx	lr

08056ede <write>:
{
 8056ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
 8056ee2:	6845      	ldr	r5, [r0, #4]
{
 8056ee4:	461e      	mov	r6, r3
 8056ee6:	460c      	mov	r4, r1
 8056ee8:	4617      	mov	r7, r2
		!sh_uart->ctrl_blk->blocking_tx) {
 8056eea:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
 8056eec:	7c1b      	ldrb	r3, [r3, #16]
 8056eee:	b153      	cbz	r3, 8056f06 <write+0x28>
 8056ef0:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
 8056ef4:	4544      	cmp	r4, r8
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
 8056ef6:	682b      	ldr	r3, [r5, #0]
		for (size_t i = 0; i < length; i++) {
 8056ef8:	d120      	bne.n	8056f3c <write+0x5e>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
 8056efa:	2001      	movs	r0, #1
		*cnt = length;
 8056efc:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
 8056efe:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8056f02:	4790      	blx	r2
 8056f04:	e017      	b.n	8056f36 <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
 8056f06:	68a8      	ldr	r0, [r5, #8]
 8056f08:	f7fe fe77 	bl	8055bfa <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8056f0c:	682b      	ldr	r3, [r5, #0]
 8056f0e:	2101      	movs	r1, #1
 8056f10:	6030      	str	r0, [r6, #0]
 8056f12:	330c      	adds	r3, #12
 8056f14:	f3bf 8f5b 	dmb	ish
 8056f18:	e853 2f00 	ldrex	r2, [r3]
 8056f1c:	e843 1000 	strex	r0, r1, [r3]
 8056f20:	2800      	cmp	r0, #0
 8056f22:	d1f9      	bne.n	8056f18 <write+0x3a>
 8056f24:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
 8056f28:	b92a      	cbnz	r2, 8056f36 <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
 8056f2a:	682b      	ldr	r3, [r5, #0]
 8056f2c:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
 8056f2e:	6883      	ldr	r3, [r0, #8]
 8056f30:	69db      	ldr	r3, [r3, #28]
 8056f32:	b103      	cbz	r3, 8056f36 <write+0x58>
		api->irq_tx_enable(dev);
 8056f34:	4798      	blx	r3
}
 8056f36:	2000      	movs	r0, #0
 8056f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
 8056f3c:	6818      	ldr	r0, [r3, #0]
 8056f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
 8056f42:	6883      	ldr	r3, [r0, #8]
 8056f44:	685b      	ldr	r3, [r3, #4]
 8056f46:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
 8056f48:	e7d4      	b.n	8056ef4 <write+0x16>

08056f4a <z_shell_raw_fprintf>:
{
 8056f4a:	b40e      	push	{r1, r2, r3}
 8056f4c:	b503      	push	{r0, r1, lr}
 8056f4e:	aa03      	add	r2, sp, #12
 8056f50:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 8056f54:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
 8056f56:	f7f0 f863 	bl	8047020 <z_shell_fprintf_fmt>
}
 8056f5a:	b002      	add	sp, #8
 8056f5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8056f60:	b003      	add	sp, #12
 8056f62:	4770      	bx	lr

08056f64 <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
 8056f64:	6983      	ldr	r3, [r0, #24]
 8056f66:	2000      	movs	r0, #0
 8056f68:	6018      	str	r0, [r3, #0]
}
 8056f6a:	4770      	bx	lr

08056f6c <z_shell_raw_fprintf>:
{
 8056f6c:	b40e      	push	{r1, r2, r3}
 8056f6e:	b503      	push	{r0, r1, lr}
 8056f70:	aa03      	add	r2, sp, #12
 8056f72:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 8056f76:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
 8056f78:	f7f0 f852 	bl	8047020 <z_shell_fprintf_fmt>
}
 8056f7c:	b002      	add	sp, #8
 8056f7e:	f85d eb04 	ldr.w	lr, [sp], #4
 8056f82:	b003      	add	sp, #12
 8056f84:	4770      	bx	lr

08056f86 <cmd_bacskpace_mode_backspace>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8056f86:	6883      	ldr	r3, [r0, #8]
 8056f88:	f3bf 8f5b 	dmb	ish
 8056f8c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8056f90:	e853 2f00 	ldrex	r2, [r3]
 8056f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8056f98:	e843 2100 	strex	r1, r2, [r3]
 8056f9c:	2900      	cmp	r1, #0
 8056f9e:	d1f7      	bne.n	8056f90 <cmd_bacskpace_mode_backspace+0xa>
}
 8056fa0:	2000      	movs	r0, #0
 8056fa2:	f3bf 8f5b 	dmb	ish
 8056fa6:	4770      	bx	lr

08056fa8 <cmd_bacskpace_mode_delete>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8056fa8:	6883      	ldr	r3, [r0, #8]
 8056faa:	f3bf 8f5b 	dmb	ish
 8056fae:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8056fb2:	e853 2f00 	ldrex	r2, [r3]
 8056fb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8056fba:	e843 2100 	strex	r1, r2, [r3]
 8056fbe:	2900      	cmp	r1, #0
 8056fc0:	d1f7      	bne.n	8056fb2 <cmd_bacskpace_mode_delete+0xa>
}
 8056fc2:	2000      	movs	r0, #0
 8056fc4:	f3bf 8f5b 	dmb	ish
 8056fc8:	4770      	bx	lr

08056fca <cmd_echo_off>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8056fca:	6883      	ldr	r3, [r0, #8]
 8056fcc:	f3bf 8f5b 	dmb	ish
 8056fd0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8056fd4:	e853 2f00 	ldrex	r2, [r3]
 8056fd8:	f022 0204 	bic.w	r2, r2, #4
 8056fdc:	e843 2100 	strex	r1, r2, [r3]
 8056fe0:	2900      	cmp	r1, #0
 8056fe2:	d1f7      	bne.n	8056fd4 <cmd_echo_off+0xa>
}
 8056fe4:	2000      	movs	r0, #0
 8056fe6:	f3bf 8f5b 	dmb	ish
 8056fea:	4770      	bx	lr

08056fec <cmd_colors_off>:
 8056fec:	6883      	ldr	r3, [r0, #8]
 8056fee:	f3bf 8f5b 	dmb	ish
 8056ff2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8056ff6:	e853 2f00 	ldrex	r2, [r3]
 8056ffa:	f022 0202 	bic.w	r2, r2, #2
 8056ffe:	e843 2100 	strex	r1, r2, [r3]
 8057002:	2900      	cmp	r1, #0
 8057004:	d1f7      	bne.n	8056ff6 <cmd_colors_off+0xa>
}
 8057006:	2000      	movs	r0, #0
 8057008:	f3bf 8f5b 	dmb	ish
 805700c:	4770      	bx	lr

0805700e <cmd_colors_on>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 805700e:	6883      	ldr	r3, [r0, #8]
 8057010:	f3bf 8f5b 	dmb	ish
 8057014:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8057018:	e853 2f00 	ldrex	r2, [r3]
 805701c:	f042 0202 	orr.w	r2, r2, #2
 8057020:	e843 2100 	strex	r1, r2, [r3]
 8057024:	2900      	cmp	r1, #0
 8057026:	d1f7      	bne.n	8057018 <cmd_colors_on+0xa>
}
 8057028:	2000      	movs	r0, #0
 805702a:	f3bf 8f5b 	dmb	ish
 805702e:	4770      	bx	lr

08057030 <cmd_echo_on>:
 8057030:	6883      	ldr	r3, [r0, #8]
 8057032:	f3bf 8f5b 	dmb	ish
 8057036:	f503 7318 	add.w	r3, r3, #608	; 0x260
 805703a:	e853 2f00 	ldrex	r2, [r3]
 805703e:	f042 0204 	orr.w	r2, r2, #4
 8057042:	e843 2100 	strex	r1, r2, [r3]
 8057046:	2900      	cmp	r1, #0
 8057048:	d1f7      	bne.n	805703a <cmd_echo_on+0xa>
}
 805704a:	2000      	movs	r0, #0
 805704c:	f3bf 8f5b 	dmb	ish
 8057050:	4770      	bx	lr

08057052 <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
 8057052:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8057054:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
 8057056:	6800      	ldr	r0, [r0, #0]
	sys_dnode_t *const next = node->next;
 8057058:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
 805705c:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 805705e:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 8057060:	2200      	movs	r2, #0
			h_item->len + h_item->padding;
 8057062:	8919      	ldrh	r1, [r3, #8]
	node->prev = NULL;
 8057064:	e9c3 2200 	strd	r2, r2, [r3]
 8057068:	895b      	ldrh	r3, [r3, #10]
 805706a:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
 805706c:	310c      	adds	r1, #12
 805706e:	f7fe fe0e 	bl	8055c8e <ring_buf_get_finish>

	return true;
}
 8057072:	2001      	movs	r0, #1
 8057074:	bd08      	pop	{r3, pc}

08057076 <z_shell_history_mode_exit>:
	history->current = NULL;
 8057076:	2300      	movs	r3, #0
 8057078:	60c3      	str	r3, [r0, #12]
}
 805707a:	4770      	bx	lr

0805707c <z_shell_history_get>:
{
 805707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 805707e:	461f      	mov	r7, r3
	return list->head == list;
 8057080:	4603      	mov	r3, r0
 8057082:	4616      	mov	r6, r2
 8057084:	f853 4f04 	ldr.w	r4, [r3, #4]!
	if (sys_dlist_is_empty(&history->list)) {
 8057088:	429c      	cmp	r4, r3
 805708a:	d102      	bne.n	8057092 <z_shell_history_get+0x16>
		*len = 0U;
 805708c:	2000      	movs	r0, #0
 805708e:	8038      	strh	r0, [r7, #0]
}
 8057090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (history->current == NULL) {
 8057092:	68c5      	ldr	r5, [r0, #12]
	if (!up) { /* button down */
 8057094:	b9b1      	cbnz	r1, 80570c4 <z_shell_history_get+0x48>
		if (history->current == NULL) {
 8057096:	2d00      	cmp	r5, #0
 8057098:	d0f8      	beq.n	805708c <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
 805709a:	42a5      	cmp	r5, r4
 805709c:	d102      	bne.n	80570a4 <z_shell_history_get+0x28>
	history->current = l_item;
 805709e:	2300      	movs	r3, #0
 80570a0:	60c3      	str	r3, [r0, #12]
	if (l_item) {
 80570a2:	e7f3      	b.n	805708c <z_shell_history_get+0x10>
 80570a4:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
 80570a6:	60c4      	str	r4, [r0, #12]
	if (l_item) {
 80570a8:	2c00      	cmp	r4, #0
 80570aa:	d0ef      	beq.n	805708c <z_shell_history_get+0x10>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80570ac:	8922      	ldrh	r2, [r4, #8]
 80570ae:	f104 010c 	add.w	r1, r4, #12
 80570b2:	4630      	mov	r0, r6
 80570b4:	f003 fe8f 	bl	805add6 <memcpy>
		*len = h_item->len;
 80570b8:	8923      	ldrh	r3, [r4, #8]
		dst[*len] = '\0';
 80570ba:	2200      	movs	r2, #0
		return true;
 80570bc:	2001      	movs	r0, #1
		*len = h_item->len;
 80570be:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
 80570c0:	54f2      	strb	r2, [r6, r3]
		return true;
 80570c2:	e7e5      	b.n	8057090 <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
 80570c4:	2d00      	cmp	r5, #0
 80570c6:	d0ee      	beq.n	80570a6 <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
 80570c8:	6883      	ldr	r3, [r0, #8]
 80570ca:	429d      	cmp	r5, r3
 80570cc:	d0e7      	beq.n	805709e <z_shell_history_get+0x22>
 80570ce:	682c      	ldr	r4, [r5, #0]
 80570d0:	e7e9      	b.n	80570a6 <z_shell_history_get+0x2a>

080570d2 <z_shell_history_purge>:

void z_shell_history_purge(struct shell_history *history)
{
 80570d2:	b538      	push	{r3, r4, r5, lr}
 80570d4:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
 80570d6:	1d05      	adds	r5, r0, #4
 80570d8:	6863      	ldr	r3, [r4, #4]
 80570da:	42ab      	cmp	r3, r5
 80570dc:	d004      	beq.n	80570e8 <z_shell_history_purge+0x16>
 80570de:	4620      	mov	r0, r4
 80570e0:	f7ff ffb7 	bl	8057052 <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
 80570e4:	2800      	cmp	r0, #0
 80570e6:	d1f7      	bne.n	80570d8 <z_shell_history_purge+0x6>
	}
}
 80570e8:	bd38      	pop	{r3, r4, r5, pc}

080570ea <z_shell_history_put>:

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
 80570ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item;
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
 80570ee:	f102 050c 	add.w	r5, r2, #12
 *
 * @return Ring buffer capacity (in 32-bit words or bytes).
 */
static inline uint32_t ring_buf_capacity_get(struct ring_buf *buf)
{
	return buf->size;
 80570f2:	6803      	ldr	r3, [r0, #0]
{
 80570f4:	4604      	mov	r4, r0
 80570f6:	468a      	mov	sl, r1
	uint32_t claim_len;
	uint32_t claim2_len;
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
 80570f8:	f1c5 0800 	rsb	r8, r5, #0

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 80570fc:	691b      	ldr	r3, [r3, #16]
{
 80570fe:	4617      	mov	r7, r2
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
 8057100:	f008 0803 	and.w	r8, r8, #3
	total_len += padding;
 8057104:	4445      	add	r5, r8
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 8057106:	429d      	cmp	r5, r3
 8057108:	d841      	bhi.n	805718e <z_shell_history_put+0xa4>
	history->current = NULL;
 805710a:	2300      	movs	r3, #0
 805710c:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
 805710e:	2a00      	cmp	r2, #0
 8057110:	d03d      	beq.n	805718e <z_shell_history_put+0xa4>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
 8057112:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
 8057116:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8057118:	4581      	cmp	r9, r0
 805711a:	d12d      	bne.n	8057178 <z_shell_history_put+0x8e>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
 805711c:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
 805711e:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
 8057122:	462a      	mov	r2, r5
 8057124:	a901      	add	r1, sp, #4
 8057126:	6820      	ldr	r0, [r4, #0]
 8057128:	f7fe fd31 	bl	8055b8e <ring_buf_put_claim>
		if (claim_len < total_len) {
 805712c:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
 805712e:	4606      	mov	r6, r0
		if (claim_len < total_len) {
 8057130:	d930      	bls.n	8057194 <z_shell_history_put+0xaa>
				ring_buf_put_claim(history->ring_buf,
 8057132:	462a      	mov	r2, r5
 8057134:	a901      	add	r1, sp, #4
 8057136:	6820      	ldr	r0, [r4, #0]
 8057138:	f7fe fd29 	bl	8055b8e <ring_buf_put_claim>
			if (claim2_len == total_len) {
 805713c:	4285      	cmp	r5, r0
 805713e:	d12a      	bne.n	8057196 <z_shell_history_put+0xac>
				padding += claim_len;
 8057140:	44b0      	add	r8, r6
				ring_buf_put_finish(history->ring_buf,
 8057142:	4631      	mov	r1, r6
				padding += claim_len;
 8057144:	462e      	mov	r6, r5
				ring_buf_put_finish(history->ring_buf,
 8057146:	6820      	ldr	r0, [r4, #0]
				padding += claim_len;
 8057148:	fa1f f888 	uxth.w	r8, r8
				ring_buf_put_finish(history->ring_buf,
 805714c:	f7fe fd3b 	bl	8055bc6 <ring_buf_put_finish>
			add_to_head(history, h_item, line, len, padding);
 8057150:	9d01      	ldr	r5, [sp, #4]
 8057152:	4651      	mov	r1, sl
 8057154:	463a      	mov	r2, r7
 8057156:	f105 000c 	add.w	r0, r5, #12
	item->len = len;
 805715a:	812f      	strh	r7, [r5, #8]
	item->padding = padding;
 805715c:	f8a5 800a 	strh.w	r8, [r5, #10]
 8057160:	f003 fe39 	bl	805add6 <memcpy>
	sys_dnode_t *const head = list->head;
 8057164:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
 8057166:	4631      	mov	r1, r6
 8057168:	6820      	ldr	r0, [r4, #0]
	node->prev = list;
 805716a:	e9c5 3900 	strd	r3, r9, [r5]
	head->prev = node;
 805716e:	605d      	str	r5, [r3, #4]
	list->head = node;
 8057170:	6065      	str	r5, [r4, #4]
 8057172:	f7fe fd28 	bl	8055bc6 <ring_buf_put_finish>
			break;
 8057176:	e00a      	b.n	805718e <z_shell_history_put+0xa4>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
 8057178:	9001      	str	r0, [sp, #4]
	if (l_item &&
 805717a:	2800      	cmp	r0, #0
 805717c:	d0cf      	beq.n	805711e <z_shell_history_put+0x34>
	   (h_item->len == len) &&
 805717e:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
 8057180:	4293      	cmp	r3, r2
 8057182:	d1cc      	bne.n	805711e <z_shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
 8057184:	300c      	adds	r0, #12
 8057186:	f003 fe16 	bl	805adb6 <memcmp>
	   (h_item->len == len) &&
 805718a:	2800      	cmp	r0, #0
 805718c:	d1c7      	bne.n	805711e <z_shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
 805718e:	b003      	add	sp, #12
 8057190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
 8057194:	d0dc      	beq.n	8057150 <z_shell_history_put+0x66>
		ring_buf_put_finish(history->ring_buf, 0);
 8057196:	2100      	movs	r1, #0
 8057198:	6820      	ldr	r0, [r4, #0]
 805719a:	f7fe fd14 	bl	8055bc6 <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
 805719e:	6863      	ldr	r3, [r4, #4]
 80571a0:	4599      	cmp	r9, r3
 80571a2:	d107      	bne.n	80571b4 <z_shell_history_put+0xca>
			ring_buf_reset(history->ring_buf);
 80571a4:	6823      	ldr	r3, [r4, #0]
	buf->tail = 0;
 80571a6:	e9c3 bb00 	strd	fp, fp, [r3]
__ssp_bos_icheck3(memset, void *, int)
 80571aa:	f8c3 b008 	str.w	fp, [r3, #8]
 80571ae:	f8c3 b00c 	str.w	fp, [r3, #12]
}
 80571b2:	e7b6      	b.n	8057122 <z_shell_history_put+0x38>
 80571b4:	4620      	mov	r0, r4
 80571b6:	f7ff ff4c 	bl	8057052 <remove_from_tail.part.0>
		if (remove_from_tail(history) == false) {
 80571ba:	2800      	cmp	r0, #0
 80571bc:	d1b1      	bne.n	8057122 <z_shell_history_put+0x38>
 80571be:	e7f1      	b.n	80571a4 <z_shell_history_put+0xba>

080571c0 <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
 80571c0:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
 80571c2:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
 80571c6:	2300      	movs	r3, #0
 80571c8:	60c3      	str	r3, [r0, #12]
}
 80571ca:	4770      	bx	lr

080571cc <msg_from_fifo.isra.0>:
{
	z_shell_print_stream(ctx, data, length);
	return length;
}

static struct log_msg *msg_from_fifo(const struct shell_log_backend *backend)
 80571cc:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
 80571ce:	2200      	movs	r2, #0
 80571d0:	2300      	movs	r3, #0
 80571d2:	4669      	mov	r1, sp
 80571d4:	f7fa fb6e 	bl	80518b4 <z_impl_k_msgq_get>
	struct shell_log_backend_msg msg;
	int err;

	err = k_msgq_get(backend->msgq, &msg, K_NO_WAIT);

	return (err == 0) ? msg.msg : NULL;
 80571d8:	b918      	cbnz	r0, 80571e2 <msg_from_fifo.isra.0+0x16>
 80571da:	9800      	ldr	r0, [sp, #0]
}
 80571dc:	b003      	add	sp, #12
 80571de:	f85d fb04 	ldr.w	pc, [sp], #4
	return (err == 0) ? msg.msg : NULL;
 80571e2:	2000      	movs	r0, #0
 80571e4:	e7fa      	b.n	80571dc <msg_from_fifo.isra.0+0x10>

080571e6 <put>:

	return true;
}

static void put(const struct log_backend *const backend, struct log_msg *msg)
{
 80571e6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
 80571ea:	6843      	ldr	r3, [r0, #4]
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			shell->ctx->internal.flags.use_colors;
	struct k_poll_signal *signal;

	log_msg_get(msg);
 80571ec:	4608      	mov	r0, r1
{
 80571ee:	460d      	mov	r5, r1
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
 80571f0:	681c      	ldr	r4, [r3, #0]
			shell->ctx->internal.flags.use_colors;
 80571f2:	68a3      	ldr	r3, [r4, #8]
 80571f4:	f8d3 6260 	ldr.w	r6, [r3, #608]	; 0x260
	log_msg_get(msg);
 80571f8:	f7fe ffb9 	bl	805616e <log_msg_get>

	switch (shell->log_backend->control_block->state) {
 80571fc:	69e3      	ldr	r3, [r4, #28]
			shell->ctx->internal.flags.use_colors;
 80571fe:	f3c6 0640 	ubfx	r6, r6, #1, #1
	switch (shell->log_backend->control_block->state) {
 8057202:	68db      	ldr	r3, [r3, #12]
 8057204:	791b      	ldrb	r3, [r3, #4]
 8057206:	2b01      	cmp	r3, #1
 8057208:	d007      	beq.n	805721a <put+0x34>
 805720a:	2b03      	cmp	r3, #3
 805720c:	d04f      	beq.n	80572ae <put+0xc8>

	case SHELL_LOG_BACKEND_DISABLED:
		__fallthrough;
	default:
		/* Discard message. */
		log_msg_put(msg);
 805720e:	4628      	mov	r0, r5
	}
}
 8057210:	b004      	add	sp, #16
 8057212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		log_msg_put(msg);
 8057216:	f7fe bfd9 	b.w	80561cc <log_msg_put>
	struct shell_log_backend_msg t_msg = {
 805721a:	9500      	str	r5, [sp, #0]
			return t * ((uint64_t)to_hz / from_hz);
 805721c:	260a      	movs	r6, #10
	return z_impl_k_uptime_ticks();
 805721e:	f003 fa8d 	bl	805a73c <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8057222:	220a      	movs	r2, #10
 8057224:	2300      	movs	r3, #0
 8057226:	f7e9 f98b 	bl	8040540 <__aeabi_uldivmod>
	return (uint32_t)k_uptime_get();
 805722a:	9001      	str	r0, [sp, #4]
		err = k_msgq_put(shell->log_backend->msgq, &t_msg,
 805722c:	69e3      	ldr	r3, [r4, #28]
 805722e:	6858      	ldr	r0, [r3, #4]
			return t * ((uint64_t)to_hz / from_hz);
 8057230:	691b      	ldr	r3, [r3, #16]
 8057232:	fba3 2306 	umull	r2, r3, r3, r6
	return z_impl_k_msgq_put(msgq, data, timeout);
 8057236:	4669      	mov	r1, sp
 8057238:	f7fa fae6 	bl	8051808 <z_impl_k_msgq_put>
		switch (err) {
 805723c:	f110 0f23 	cmn.w	r0, #35	; 0x23
 8057240:	d00a      	beq.n	8057258 <put+0x72>
 8057242:	300b      	adds	r0, #11
 8057244:	d008      	beq.n	8057258 <put+0x72>
			signal = &shell->ctx->signals[SHELL_SIGNAL_LOG_MSG];
 8057246:	68a0      	ldr	r0, [r4, #8]
 8057248:	f500 701d 	add.w	r0, r0, #628	; 0x274
	return z_impl_k_poll_signal_raise(sig, result);
 805724c:	2100      	movs	r1, #0
}
 805724e:	b004      	add	sp, #16
 8057250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8057254:	f7fb bb18 	b.w	8052888 <z_impl_k_poll_signal_raise>
	struct k_msgq *msgq = shell->log_backend->msgq;
 8057258:	69e3      	ldr	r3, [r4, #28]
 805725a:	685f      	ldr	r7, [r3, #4]
	uint32_t timeout = shell->log_backend->timeout;
 805725c:	f8d3 8010 	ldr.w	r8, [r3, #16]
	return z_impl_k_uptime_ticks();
 8057260:	f003 fa6c 	bl	805a73c <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8057264:	220a      	movs	r2, #10
 8057266:	2300      	movs	r3, #0
 8057268:	f7e9 f96a 	bl	8040540 <__aeabi_uldivmod>
 805726c:	4605      	mov	r5, r0
	return z_impl_k_msgq_peek(msgq, data);
 805726e:	a902      	add	r1, sp, #8
 8057270:	4638      	mov	r0, r7
 8057272:	f003 f881 	bl	805a378 <z_impl_k_msgq_peek>
		if (err == 0 && ((now - msg.timestamp) > timeout)) {
 8057276:	2800      	cmp	r0, #0
 8057278:	d1d8      	bne.n	805722c <put+0x46>
 805727a:	9b03      	ldr	r3, [sp, #12]
 805727c:	1aeb      	subs	r3, r5, r3
 805727e:	4598      	cmp	r8, r3
 8057280:	d2d4      	bcs.n	805722c <put+0x46>
	return z_impl_k_msgq_get(msgq, data, timeout);
 8057282:	2300      	movs	r3, #0
 8057284:	2200      	movs	r2, #0
 8057286:	a902      	add	r1, sp, #8
 8057288:	4638      	mov	r0, r7
 805728a:	f7fa fb13 	bl	80518b4 <z_impl_k_msgq_get>
			log_msg_put(msg.msg);
 805728e:	9802      	ldr	r0, [sp, #8]
 8057290:	f7fe ff9c 	bl	80561cc <log_msg_put>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8057294:	69a3      	ldr	r3, [r4, #24]
 8057296:	f3bf 8f5b 	dmb	ish
 805729a:	e853 2f00 	ldrex	r2, [r3]
 805729e:	3201      	adds	r2, #1
 80572a0:	e843 2100 	strex	r1, r2, [r3]
 80572a4:	2900      	cmp	r1, #0
 80572a6:	d1f8      	bne.n	805729a <put+0xb4>
 80572a8:	f3bf 8f5b 	dmb	ish
		err = k_msgq_peek(msgq, &msg);
 80572ac:	e7df      	b.n	805726e <put+0x88>
		z_shell_cmd_line_erase(shell);
 80572ae:	4620      	mov	r0, r4
 80572b0:	f7ff fcf6 	bl	8056ca0 <z_shell_cmd_line_erase>
		flags |= LOG_OUTPUT_FLAG_COLORS;
 80572b4:	2e00      	cmp	r6, #0
		msg_process(shell->log_backend->log_output, msg, colors);
 80572b6:	69e3      	ldr	r3, [r4, #28]
	log_output_msg_process(log_output, msg, flags);
 80572b8:	4629      	mov	r1, r5
 80572ba:	bf0c      	ite	eq
 80572bc:	220e      	moveq	r2, #14
 80572be:	220f      	movne	r2, #15
 80572c0:	6898      	ldr	r0, [r3, #8]
 80572c2:	f7ee f9a9 	bl	8045618 <log_output_msg_process>
	log_msg_put(msg);
 80572c6:	e7a2      	b.n	805720e <put+0x28>

080572c8 <dropped>:
	}
}

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
 80572c8:	6843      	ldr	r3, [r0, #4]
 80572ca:	681b      	ldr	r3, [r3, #0]
 80572cc:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
 80572d0:	f3bf 8f5b 	dmb	ish
 80572d4:	e853 0f00 	ldrex	r0, [r3]
 80572d8:	4408      	add	r0, r1
 80572da:	e843 0c00 	strex	ip, r0, [r3]
 80572de:	f1bc 0f00 	cmp.w	ip, #0
 80572e2:	d1f7      	bne.n	80572d4 <dropped+0xc>
 80572e4:	f3bf 8f5b 	dmb	ish
 80572e8:	68d3      	ldr	r3, [r2, #12]
 80572ea:	f3bf 8f5b 	dmb	ish
 80572ee:	e853 2f00 	ldrex	r2, [r3]
 80572f2:	440a      	add	r2, r1
 80572f4:	e843 2000 	strex	r0, r2, [r3]
 80572f8:	2800      	cmp	r0, #0
 80572fa:	d1f8      	bne.n	80572ee <dropped+0x26>
 80572fc:	f3bf 8f5b 	dmb	ish

	if (IS_ENABLED(CONFIG_SHELL_STATS)) {
		atomic_add(&shell->stats->log_lost_cnt, cnt);
	}
	atomic_add(&log_backend->control_block->dropped_cnt, cnt);
}
 8057300:	4770      	bx	lr

08057302 <z_shell_log_backend_output_func>:
{
 8057302:	4613      	mov	r3, r2
	z_shell_print_stream(ctx, data, length);
 8057304:	460a      	mov	r2, r1
{
 8057306:	b510      	push	{r4, lr}
 8057308:	460c      	mov	r4, r1
	z_shell_print_stream(ctx, data, length);
 805730a:	4601      	mov	r1, r0
 805730c:	4618      	mov	r0, r3
 805730e:	f7ff fd26 	bl	8056d5e <z_shell_print_stream>
}
 8057312:	4620      	mov	r0, r4
 8057314:	bd10      	pop	{r4, pc}

08057316 <z_shell_log_backend_enable>:
{
 8057316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8057318:	4604      	mov	r4, r0
 805731a:	460e      	mov	r6, r1
 805731c:	4617      	mov	r7, r2
		while ((msg = msg_from_fifo(backend)) != NULL) {
 805731e:	6860      	ldr	r0, [r4, #4]
 8057320:	f7ff ff54 	bl	80571cc <msg_from_fifo.isra.0>
 8057324:	4605      	mov	r5, r0
 8057326:	b960      	cbnz	r0, 8057342 <z_shell_log_backend_enable+0x2c>
		log_backend_enable(backend->backend, ctx, init_log_level);
 8057328:	463a      	mov	r2, r7
 805732a:	4631      	mov	r1, r6
 805732c:	6820      	ldr	r0, [r4, #0]
 805732e:	f7ed ff8b 	bl	8045248 <log_backend_enable>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *output,
				      void *ctx)
{
	output->control_block->ctx = ctx;
 8057332:	68a3      	ldr	r3, [r4, #8]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
 8057334:	2201      	movs	r2, #1
 8057336:	685b      	ldr	r3, [r3, #4]
 8057338:	605e      	str	r6, [r3, #4]
		backend->control_block->dropped_cnt = 0;
 805733a:	68e3      	ldr	r3, [r4, #12]
 805733c:	601d      	str	r5, [r3, #0]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
 805733e:	711a      	strb	r2, [r3, #4]
}
 8057340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			log_msg_put(msg);
 8057342:	f7fe ff43 	bl	80561cc <log_msg_put>
 8057346:	e7ea      	b.n	805731e <z_shell_log_backend_enable+0x8>

08057348 <z_shell_log_backend_disable>:
{
 8057348:	b510      	push	{r4, lr}
 805734a:	4604      	mov	r4, r0
	log_backend_disable(backend->backend);
 805734c:	6800      	ldr	r0, [r0, #0]
 805734e:	f7fe feb3 	bl	80560b8 <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
 8057352:	2202      	movs	r2, #2
 8057354:	68e3      	ldr	r3, [r4, #12]
 8057356:	711a      	strb	r2, [r3, #4]
}
 8057358:	bd10      	pop	{r4, pc}

0805735a <z_shell_log_backend_process>:
			(const struct shell *)backend->backend->cb->ctx;
 805735a:	6803      	ldr	r3, [r0, #0]
	const struct shell *shell =
 805735c:	685b      	ldr	r3, [r3, #4]
{
 805735e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct shell *shell =
 8057360:	681e      	ldr	r6, [r3, #0]
{
 8057362:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8057364:	2200      	movs	r2, #0
			shell->ctx->internal.flags.use_colors;
 8057366:	68b3      	ldr	r3, [r6, #8]
 8057368:	f8d3 5260 	ldr.w	r5, [r3, #608]	; 0x260
 805736c:	68c3      	ldr	r3, [r0, #12]
 805736e:	f3bf 8f5b 	dmb	ish
 8057372:	f3c5 0540 	ubfx	r5, r5, #1, #1
 8057376:	e853 7f00 	ldrex	r7, [r3]
 805737a:	e843 2100 	strex	r1, r2, [r3]
 805737e:	2900      	cmp	r1, #0
 8057380:	d1f9      	bne.n	8057376 <z_shell_log_backend_process+0x1c>
 8057382:	f3bf 8f5b 	dmb	ish
	if (dropped) {
 8057386:	b18f      	cbz	r7, 80573ac <z_shell_log_backend_process+0x52>
		if (colors) {
 8057388:	b13d      	cbz	r5, 805739a <z_shell_log_backend_process+0x40>
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
 805738a:	68b3      	ldr	r3, [r6, #8]
			z_shell_vt100_color_set(shell, SHELL_VT100_COLOR_RED);
 805738c:	2102      	movs	r1, #2
 805738e:	4630      	mov	r0, r6
 8057390:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8057392:	f8ad 3004 	strh.w	r3, [sp, #4]
 8057396:	f7f0 f815 	bl	80473c4 <z_shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
 805739a:	4639      	mov	r1, r7
 805739c:	68a0      	ldr	r0, [r4, #8]
 805739e:	f7ee f9b7 	bl	8045710 <log_output_dropped_process>
		if (colors) {
 80573a2:	b11d      	cbz	r5, 80573ac <z_shell_log_backend_process+0x52>
			z_shell_vt100_colors_restore(shell, &col);
 80573a4:	a901      	add	r1, sp, #4
 80573a6:	4630      	mov	r0, r6
 80573a8:	f7f0 f842 	bl	8047430 <z_shell_vt100_colors_restore>
	struct log_msg *msg = msg_from_fifo(backend);
 80573ac:	6860      	ldr	r0, [r4, #4]
 80573ae:	f7ff ff0d 	bl	80571cc <msg_from_fifo.isra.0>
	if (!msg) {
 80573b2:	4604      	mov	r4, r0
 80573b4:	b168      	cbz	r0, 80573d2 <z_shell_log_backend_process+0x78>
		flags |= LOG_OUTPUT_FLAG_COLORS;
 80573b6:	2d00      	cmp	r5, #0
	msg_process(shell->log_backend->log_output, msg, colors);
 80573b8:	69f3      	ldr	r3, [r6, #28]
	log_output_msg_process(log_output, msg, flags);
 80573ba:	4601      	mov	r1, r0
 80573bc:	bf08      	it	eq
 80573be:	220e      	moveq	r2, #14
 80573c0:	6898      	ldr	r0, [r3, #8]
 80573c2:	bf18      	it	ne
 80573c4:	220f      	movne	r2, #15
 80573c6:	f7ee f927 	bl	8045618 <log_output_msg_process>
	log_msg_put(msg);
 80573ca:	4620      	mov	r0, r4
 80573cc:	f7fe fefe 	bl	80561cc <log_msg_put>
	return true;
 80573d0:	2001      	movs	r0, #1
}
 80573d2:	b003      	add	sp, #12
 80573d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080573d6 <panic>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
 80573d6:	6843      	ldr	r3, [r0, #4]
	err = shell->iface->api->enable(shell->iface, true);
 80573d8:	2101      	movs	r1, #1
{
 80573da:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
 80573dc:	681c      	ldr	r4, [r3, #0]
	err = shell->iface->api->enable(shell->iface, true);
 80573de:	6860      	ldr	r0, [r4, #4]
 80573e0:	6803      	ldr	r3, [r0, #0]
 80573e2:	689b      	ldr	r3, [r3, #8]
 80573e4:	4798      	blx	r3
	if (err == 0) {
 80573e6:	bb48      	cbnz	r0, 805743c <panic+0x66>
		shell->log_backend->control_block->state =
 80573e8:	69e3      	ldr	r3, [r4, #28]
 80573ea:	2203      	movs	r2, #3
 80573ec:	68db      	ldr	r3, [r3, #12]
 80573ee:	711a      	strb	r2, [r3, #4]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80573f0:	68a3      	ldr	r3, [r4, #8]
 80573f2:	f3bf 8f5b 	dmb	ish
 80573f6:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80573fa:	e853 2f00 	ldrex	r2, [r3]
 80573fe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8057402:	e843 2100 	strex	r1, r2, [r3]
 8057406:	2900      	cmp	r1, #0
 8057408:	d1f7      	bne.n	80573fa <panic+0x24>
 805740a:	f3bf 8f5b 	dmb	ish
		z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
 805740e:	68a0      	ldr	r0, [r4, #8]
 8057410:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8057412:	3020      	adds	r0, #32
 8057414:	8bc1      	ldrh	r1, [r0, #30]
 8057416:	f7ff fac1 	bl	805699c <z_shell_multiline_data_calc>
		z_shell_op_cursor_vert_move(shell, -1);
 805741a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 805741e:	4620      	mov	r0, r4
 8057420:	f7ef ff6e 	bl	8047300 <z_shell_op_cursor_vert_move>
					   -shell->ctx->vt100_ctx.cons.cur_x);
 8057424:	68a3      	ldr	r3, [r4, #8]
		z_shell_op_cursor_horiz_move(shell,
 8057426:	4620      	mov	r0, r4
					   -shell->ctx->vt100_ctx.cons.cur_x);
 8057428:	8c19      	ldrh	r1, [r3, #32]
		z_shell_op_cursor_horiz_move(shell,
 805742a:	4249      	negs	r1, r1
 805742c:	f7ef ff78 	bl	8047320 <z_shell_op_cursor_horiz_move>
			while (z_shell_log_backend_process(
 8057430:	69e0      	ldr	r0, [r4, #28]
 8057432:	f7ff ff92 	bl	805735a <z_shell_log_backend_process>
 8057436:	2800      	cmp	r0, #0
 8057438:	d1fa      	bne.n	8057430 <panic+0x5a>
}
 805743a:	bd10      	pop	{r4, pc}
		z_shell_log_backend_disable(shell->log_backend);
 805743c:	69e0      	ldr	r0, [r4, #28]
}
 805743e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_log_backend_disable(shell->log_backend);
 8057442:	f7ff bf81 	b.w	8057348 <z_shell_log_backend_disable>

08057446 <z_shell_has_wildcard>:
{
 8057446:	b510      	push	{r4, lr}
 8057448:	4604      	mov	r4, r0
 805744a:	b908      	cbnz	r0, 8057450 <z_shell_has_wildcard+0xa>
	return false;
 805744c:	2000      	movs	r0, #0
}
 805744e:	bd10      	pop	{r4, pc}
 8057450:	f7e9 fa02 	bl	8040858 <strlen>
	for (size_t i = 0; i < str_len; i++) {
 8057454:	2300      	movs	r3, #0
 8057456:	b280      	uxth	r0, r0
 8057458:	4283      	cmp	r3, r0
 805745a:	d2f7      	bcs.n	805744c <z_shell_has_wildcard+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
 805745c:	5ce2      	ldrb	r2, [r4, r3]
 805745e:	2a3f      	cmp	r2, #63	; 0x3f
 8057460:	d003      	beq.n	805746a <z_shell_has_wildcard+0x24>
 8057462:	2a2a      	cmp	r2, #42	; 0x2a
 8057464:	d001      	beq.n	805746a <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
 8057466:	3301      	adds	r3, #1
 8057468:	e7f6      	b.n	8057458 <z_shell_has_wildcard+0x12>
			return true;
 805746a:	2001      	movs	r0, #1
 805746c:	e7ef      	b.n	805744e <z_shell_has_wildcard+0x8>

0805746e <z_shell_wildcard_prepare>:
{
 805746e:	b510      	push	{r4, lr}
 8057470:	4604      	mov	r4, r0
 8057472:	6880      	ldr	r0, [r0, #8]
 8057474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8057478:	2100      	movs	r1, #0
 805747a:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 805747e:	f003 fce5 	bl	805ae4c <memset>
	memcpy(shell->ctx->temp_buff,
 8057482:	68a0      	ldr	r0, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8057484:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8057486:	f100 0142 	add.w	r1, r0, #66	; 0x42
 805748a:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 805748e:	f003 fca2 	bl	805add6 <memcpy>
	z_shell_spaces_trim(shell->ctx->temp_buff);
 8057492:	68a0      	ldr	r0, [r4, #8]
 8057494:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 8057498:	f7ef feb8 	bl	804720c <z_shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = z_shell_strlen(shell->ctx->temp_buff) + 1;
 805749c:	68a3      	ldr	r3, [r4, #8]
 805749e:	f513 70a1 	adds.w	r0, r3, #322	; 0x142
 80574a2:	d007      	beq.n	80574b4 <z_shell_wildcard_prepare+0x46>
 80574a4:	f7e9 f9d8 	bl	8040858 <strlen>
 80574a8:	b283      	uxth	r3, r0
 80574aa:	68a2      	ldr	r2, [r4, #8]
 80574ac:	3301      	adds	r3, #1
 80574ae:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
 80574b2:	bd10      	pop	{r4, pc}
 80574b4:	4603      	mov	r3, r0
 80574b6:	e7f8      	b.n	80574aa <z_shell_wildcard_prepare+0x3c>

080574b8 <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *shell)
{
 80574b8:	b510      	push	{r4, lr}
 80574ba:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
 80574bc:	6880      	ldr	r0, [r0, #8]
 80574be:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 80574c2:	f500 71a1 	add.w	r1, r0, #322	; 0x142
 80574c6:	3042      	adds	r0, #66	; 0x42
 80574c8:	f003 fc85 	bl	805add6 <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
 80574cc:	68a3      	ldr	r3, [r4, #8]
 80574ce:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80574d2:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 80574d4:	bd10      	pop	{r4, pc}

080574d6 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
 80574d6:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
 80574d8:	f7f0 fc72 	bl	8047dc0 <__do_global_ctors_aux>
	__do_init_array_aux();
}
 80574dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__do_init_array_aux();
 80574e0:	f7f0 bc60 	b.w	8047da4 <__do_init_array_aux>

080574e4 <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
 80574e4:	2000      	movs	r0, #0
 80574e6:	4770      	bx	lr

080574e8 <disk_access_init>:
{
 80574e8:	b510      	push	{r4, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
 80574ea:	f7f0 fc85 	bl	8047df8 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 80574ee:	b130      	cbz	r0, 80574fe <disk_access_init+0x16>
 80574f0:	68c3      	ldr	r3, [r0, #12]
 80574f2:	b123      	cbz	r3, 80574fe <disk_access_init+0x16>
				(disk->ops->init != NULL)) {
 80574f4:	681b      	ldr	r3, [r3, #0]
	if ((disk != NULL) && (disk->ops != NULL) &&
 80574f6:	b113      	cbz	r3, 80574fe <disk_access_init+0x16>
}
 80574f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->init(disk);
 80574fc:	4718      	bx	r3
}
 80574fe:	f06f 0015 	mvn.w	r0, #21
 8057502:	bd10      	pop	{r4, pc}

08057504 <disk_access_status>:
{
 8057504:	b510      	push	{r4, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
 8057506:	f7f0 fc77 	bl	8047df8 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 805750a:	b130      	cbz	r0, 805751a <disk_access_status+0x16>
 805750c:	68c3      	ldr	r3, [r0, #12]
 805750e:	b123      	cbz	r3, 805751a <disk_access_status+0x16>
				(disk->ops->status != NULL)) {
 8057510:	685b      	ldr	r3, [r3, #4]
	if ((disk != NULL) && (disk->ops != NULL) &&
 8057512:	b113      	cbz	r3, 805751a <disk_access_status+0x16>
}
 8057514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->status(disk);
 8057518:	4718      	bx	r3
}
 805751a:	f06f 0015 	mvn.w	r0, #21
 805751e:	bd10      	pop	{r4, pc}

08057520 <disk_access_read>:
{
 8057520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8057522:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8057526:	9301      	str	r3, [sp, #4]
	struct disk_info *disk = disk_access_get_di(pdrv);
 8057528:	f7f0 fc66 	bl	8047df8 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 805752c:	b158      	cbz	r0, 8057546 <disk_access_read+0x26>
 805752e:	68c4      	ldr	r4, [r0, #12]
 8057530:	b14c      	cbz	r4, 8057546 <disk_access_read+0x26>
				(disk->ops->read != NULL)) {
 8057532:	68a4      	ldr	r4, [r4, #8]
	if ((disk != NULL) && (disk->ops != NULL) &&
 8057534:	b13c      	cbz	r4, 8057546 <disk_access_read+0x26>
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
 8057536:	9903      	ldr	r1, [sp, #12]
 8057538:	46a4      	mov	ip, r4
 805753a:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
}
 805753e:	b004      	add	sp, #16
 8057540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
 8057544:	4760      	bx	ip
}
 8057546:	f06f 0015 	mvn.w	r0, #21
 805754a:	b004      	add	sp, #16
 805754c:	bd10      	pop	{r4, pc}

0805754e <disk_access_write>:
{
 805754e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8057550:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8057554:	9301      	str	r3, [sp, #4]
	struct disk_info *disk = disk_access_get_di(pdrv);
 8057556:	f7f0 fc4f 	bl	8047df8 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 805755a:	b158      	cbz	r0, 8057574 <disk_access_write+0x26>
 805755c:	68c4      	ldr	r4, [r0, #12]
 805755e:	b14c      	cbz	r4, 8057574 <disk_access_write+0x26>
				(disk->ops->write != NULL)) {
 8057560:	68e4      	ldr	r4, [r4, #12]
	if ((disk != NULL) && (disk->ops != NULL) &&
 8057562:	b13c      	cbz	r4, 8057574 <disk_access_write+0x26>
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
 8057564:	9903      	ldr	r1, [sp, #12]
 8057566:	46a4      	mov	ip, r4
 8057568:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
}
 805756c:	b004      	add	sp, #16
 805756e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
 8057572:	4760      	bx	ip
}
 8057574:	f06f 0015 	mvn.w	r0, #21
 8057578:	b004      	add	sp, #16
 805757a:	bd10      	pop	{r4, pc}

0805757c <disk_access_ioctl>:
{
 805757c:	b507      	push	{r0, r1, r2, lr}
 805757e:	e9cd 2100 	strd	r2, r1, [sp]
	struct disk_info *disk = disk_access_get_di(pdrv);
 8057582:	f7f0 fc39 	bl	8047df8 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 8057586:	b148      	cbz	r0, 805759c <disk_access_ioctl+0x20>
 8057588:	68c3      	ldr	r3, [r0, #12]
 805758a:	b13b      	cbz	r3, 805759c <disk_access_ioctl+0x20>
				(disk->ops->ioctl != NULL)) {
 805758c:	691b      	ldr	r3, [r3, #16]
	if ((disk != NULL) && (disk->ops != NULL) &&
 805758e:	b12b      	cbz	r3, 805759c <disk_access_ioctl+0x20>
		rc = disk->ops->ioctl(disk, cmd, buf);
 8057590:	e9dd 2100 	ldrd	r2, r1, [sp]
}
 8057594:	b003      	add	sp, #12
 8057596:	f85d eb04 	ldr.w	lr, [sp], #4
		rc = disk->ops->ioctl(disk, cmd, buf);
 805759a:	4718      	bx	r3
}
 805759c:	f06f 0015 	mvn.w	r0, #21
 80575a0:	b003      	add	sp, #12
 80575a2:	f85d fb04 	ldr.w	pc, [sp], #4

080575a6 <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 80575a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t pin, mux;
	uint32_t func = 0;
	int ret = 0;

	if (!list_size) {
 80575a8:	460f      	mov	r7, r1
 80575aa:	b1a9      	cbz	r1, 80575d8 <stm32_dt_pinctrl_configure+0x32>
	}
#else
	ARG_UNUSED(base);
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (int i = 0; i < list_size; i++) {
 80575ac:	2600      	movs	r6, #0
 80575ae:	1d04      	adds	r4, r0, #4
	uint32_t func = 0;
 80575b0:	4635      	mov	r5, r6
		mux = pinctrl[i].pinmux;
 80575b2:	f854 0c04 	ldr.w	r0, [r4, #-4]
		} else {
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 80575b6:	f010 0ff0 	tst.w	r0, #240	; 0xf0
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 80575ba:	b2c2      	uxtb	r2, r0
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 80575bc:	d10e      	bne.n	80575dc <stm32_dt_pinctrl_configure+0x36>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 80575be:	6825      	ldr	r5, [r4, #0]
 80575c0:	f045 0520 	orr.w	r5, r5, #32
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
			       STM32_DT_PINMUX_LINE(mux));

		ret = stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 80575c4:	4629      	mov	r1, r5
 80575c6:	f3c0 2007 	ubfx	r0, r0, #8, #8
		if (ret != 0) {
 80575ca:	3408      	adds	r4, #8
		ret = stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 80575cc:	f7f0 fc86 	bl	8047edc <stm32_pin_configure>
		if (ret != 0) {
 80575d0:	b918      	cbnz	r0, 80575da <stm32_dt_pinctrl_configure+0x34>
	for (int i = 0; i < list_size; i++) {
 80575d2:	3601      	adds	r6, #1
 80575d4:	42b7      	cmp	r7, r6
 80575d6:	d1ec      	bne.n	80575b2 <stm32_dt_pinctrl_configure+0xc>
		return 0;
 80575d8:	2000      	movs	r0, #0
			return ret;
		}
	}

	return 0;
}
 80575da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			func = STM32_MODER_ANALOG_MODE;
 80575dc:	2a10      	cmp	r2, #16
 80575de:	bf08      	it	eq
 80575e0:	2530      	moveq	r5, #48	; 0x30
 80575e2:	e7ef      	b.n	80575c4 <stm32_dt_pinctrl_configure+0x1e>

080575e4 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 80575e4:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 80575e6:	6800      	ldr	r0, [r0, #0]
 80575e8:	f7f0 bcb0 	b.w	8047f4c <z_arm_fatal_error>

080575ec <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 80575ec:	2100      	movs	r1, #0
 80575ee:	2001      	movs	r0, #1
 80575f0:	f7f0 bcac 	b.w	8047f4c <z_arm_fatal_error>

080575f4 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 80575f4:	b508      	push	{r3, lr}
	handler();
 80575f6:	f7f0 fd5d 	bl	80480b4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 80575fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 80575fe:	f7f0 bec7 	b.w	8048390 <z_arm_exc_exit>

08057602 <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
 8057602:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
 8057604:	4601      	mov	r1, r0
 8057606:	4618      	mov	r0, r3
 8057608:	f7ff bf6c 	b.w	80574e4 <__cxa_atexit>

0805760c <malloc_prepare>:
}
 805760c:	2000      	movs	r0, #0
 805760e:	4770      	bx	lr

08057610 <_stdout_hook_default>:
}
 8057610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8057614:	4770      	bx	lr

08057616 <_stdin_hook_default>:
}
 8057616:	2000      	movs	r0, #0
 8057618:	4770      	bx	lr

0805761a <_read>:
{
 805761a:	4608      	mov	r0, r1
 805761c:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
 805761e:	f7f1 bbc1 	b.w	8048da4 <z_impl_zephyr_read_stdin>

08057622 <_write>:
{
 8057622:	4608      	mov	r0, r1
 8057624:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
 8057626:	f7f1 bbd1 	b.w	8048dcc <z_impl_zephyr_write_stdout>

0805762a <_close>:
 805762a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 805762e:	4770      	bx	lr

08057630 <_lseek>:
}
 8057630:	2000      	movs	r0, #0
 8057632:	4770      	bx	lr

08057634 <_isatty>:
}
 8057634:	2802      	cmp	r0, #2
 8057636:	bfcc      	ite	gt
 8057638:	2000      	movgt	r0, #0
 805763a:	2001      	movle	r0, #1
 805763c:	4770      	bx	lr

0805763e <_kill>:
}
 805763e:	2000      	movs	r0, #0
 8057640:	4770      	bx	lr

08057642 <_getpid>:
}
 8057642:	2000      	movs	r0, #0
 8057644:	4770      	bx	lr

08057646 <_fstat>:
	st->st_mode = S_IFCHR;
 8057646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
 805764a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 805764c:	604b      	str	r3, [r1, #4]
}
 805764e:	4770      	bx	lr

08057650 <__retarget_lock_init_recursive>:
{
 8057650:	b510      	push	{r4, lr}
 8057652:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
 8057654:	2014      	movs	r0, #20
 8057656:	f7fb f981 	bl	805295c <malloc>
 805765a:	6020      	str	r0, [r4, #0]
}
 805765c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
 8057660:	f002 becd 	b.w	805a3fe <z_impl_k_mutex_init>

08057664 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
 8057664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8057668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 805766c:	f7fa b97c 	b.w	8051968 <z_impl_k_mutex_lock>

08057670 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
 8057670:	f7fa b9f4 	b.w	8051a5c <z_impl_k_mutex_unlock>

08057674 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 8057674:	f7f9 bda8 	b.w	80511c8 <z_impl_z_errno>

08057678 <fatfs_tell>:
	return f_tell((FIL *)zfp->filep);
 8057678:	6803      	ldr	r3, [r0, #0]
}
 805767a:	6958      	ldr	r0, [r3, #20]
 805767c:	4770      	bx	lr

0805767e <fatfs_mkdir>:
{
 805767e:	b508      	push	{r3, lr}
	res = f_mkdir(&path[1]);
 8057680:	1c48      	adds	r0, r1, #1
 8057682:	f002 fa6e 	bl	8059b62 <f_mkdir>
}
 8057686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = translate_error(res);
 805768a:	f7f2 b919 	b.w	80498c0 <translate_error>

0805768e <fatfs_unlink>:
{
 805768e:	b508      	push	{r3, lr}
	res = f_unlink(&path[1]);
 8057690:	1c48      	adds	r0, r1, #1
 8057692:	f002 fa17 	bl	8059ac4 <f_unlink>
}
 8057696:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = translate_error(res);
 805769a:	f7f2 b911 	b.w	80498c0 <translate_error>

0805769e <fatfs_rename>:
{
 805769e:	b530      	push	{r4, r5, lr}
	res = f_stat(&to[1], &fno);
 80576a0:	1c54      	adds	r4, r2, #1
{
 80576a2:	b0c7      	sub	sp, #284	; 0x11c
 80576a4:	460d      	mov	r5, r1
	res = f_stat(&to[1], &fno);
 80576a6:	4620      	mov	r0, r4
 80576a8:	4669      	mov	r1, sp
 80576aa:	f002 f94d 	bl	8059948 <f_stat>
	if (FR_OK == res) {
 80576ae:	b940      	cbnz	r0, 80576c2 <fatfs_rename+0x24>
		res = f_unlink(&to[1]);
 80576b0:	4620      	mov	r0, r4
 80576b2:	f002 fa07 	bl	8059ac4 <f_unlink>
		if (FR_OK != res)
 80576b6:	b120      	cbz	r0, 80576c2 <fatfs_rename+0x24>
}
 80576b8:	b047      	add	sp, #284	; 0x11c
 80576ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	res = translate_error(res);
 80576be:	f7f2 b8ff 	b.w	80498c0 <translate_error>
	res = f_rename(&from[1], &to[1]);
 80576c2:	4621      	mov	r1, r4
 80576c4:	1c68      	adds	r0, r5, #1
 80576c6:	f002 fad1 	bl	8059c6c <f_rename>
 80576ca:	e7f5      	b.n	80576b8 <fatfs_rename+0x1a>

080576cc <fatfs_unmount>:
	res = f_mount(NULL, &mountp->mnt_point[1], 0);
 80576cc:	68c1      	ldr	r1, [r0, #12]
 80576ce:	2200      	movs	r2, #0
{
 80576d0:	b508      	push	{r3, lr}
	res = f_mount(NULL, &mountp->mnt_point[1], 0);
 80576d2:	3101      	adds	r1, #1
 80576d4:	4610      	mov	r0, r2
 80576d6:	f7f7 fcd9 	bl	804f08c <f_mount>
}
 80576da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return translate_error(res);
 80576de:	f7f2 b8ef 	b.w	80498c0 <translate_error>

080576e2 <fatfs_sync>:
{
 80576e2:	b508      	push	{r3, lr}
	res = f_sync(zfp->filep);
 80576e4:	6800      	ldr	r0, [r0, #0]
 80576e6:	f002 f80d 	bl	8059704 <f_sync>
}
 80576ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = translate_error(res);
 80576ee:	f7f2 b8e7 	b.w	80498c0 <translate_error>

080576f2 <fatfs_seek>:
	switch (whence) {
 80576f2:	2a01      	cmp	r2, #1
{
 80576f4:	b508      	push	{r3, lr}
	switch (whence) {
 80576f6:	d00e      	beq.n	8057716 <fatfs_seek+0x24>
 80576f8:	2a02      	cmp	r2, #2
 80576fa:	d010      	beq.n	805771e <fatfs_seek+0x2c>
 80576fc:	b992      	cbnz	r2, 8057724 <fatfs_seek+0x32>
	if ((pos < 0) || (pos > f_size((FIL *)zfp->filep))) {
 80576fe:	2900      	cmp	r1, #0
 8057700:	db10      	blt.n	8057724 <fatfs_seek+0x32>
 8057702:	6800      	ldr	r0, [r0, #0]
 8057704:	68c3      	ldr	r3, [r0, #12]
 8057706:	428b      	cmp	r3, r1
 8057708:	d30c      	bcc.n	8057724 <fatfs_seek+0x32>
	res = f_lseek(zfp->filep, pos);
 805770a:	f002 f83d 	bl	8059788 <f_lseek>
}
 805770e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return translate_error(res);
 8057712:	f7f2 b8d5 	b.w	80498c0 <translate_error>
		pos = f_tell((FIL *)zfp->filep) + offset;
 8057716:	6803      	ldr	r3, [r0, #0]
 8057718:	695b      	ldr	r3, [r3, #20]
		pos = f_size((FIL *)zfp->filep) + offset;
 805771a:	4419      	add	r1, r3
		break;
 805771c:	e7ef      	b.n	80576fe <fatfs_seek+0xc>
		pos = f_size((FIL *)zfp->filep) + offset;
 805771e:	6803      	ldr	r3, [r0, #0]
 8057720:	68db      	ldr	r3, [r3, #12]
 8057722:	e7fa      	b.n	805771a <fatfs_seek+0x28>
}
 8057724:	f06f 0015 	mvn.w	r0, #21
 8057728:	bd08      	pop	{r3, pc}

0805772a <fatfs_truncate>:
{
 805772a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 805772c:	4604      	mov	r4, r0
	off_t cur_length = f_size((FIL *)zfp->filep);
 805772e:	6800      	ldr	r0, [r0, #0]
{
 8057730:	460e      	mov	r6, r1
	off_t cur_length = f_size((FIL *)zfp->filep);
 8057732:	68c7      	ldr	r7, [r0, #12]
	res = f_lseek(zfp->filep, length);
 8057734:	f002 f828 	bl	8059788 <f_lseek>
	if (res != FR_OK) {
 8057738:	b120      	cbz	r0, 8057744 <fatfs_truncate+0x1a>
}
 805773a:	b003      	add	sp, #12
 805773c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	res = translate_error(res);
 8057740:	f7f2 b8be 	b.w	80498c0 <translate_error>
	if (length < cur_length) {
 8057744:	42b7      	cmp	r7, r6
	off_t cur_length = f_size((FIL *)zfp->filep);
 8057746:	463d      	mov	r5, r7
		res = f_truncate(zfp->filep);
 8057748:	6820      	ldr	r0, [r4, #0]
	if (length < cur_length) {
 805774a:	dd02      	ble.n	8057752 <fatfs_truncate+0x28>
		res = f_truncate(zfp->filep);
 805774c:	f002 f97f 	bl	8059a4e <f_truncate>
 8057750:	e7f3      	b.n	805773a <fatfs_truncate+0x10>
		res = f_lseek(zfp->filep, cur_length);
 8057752:	4639      	mov	r1, r7
		length = f_tell((FIL *)zfp->filep);
 8057754:	6946      	ldr	r6, [r0, #20]
		res = f_lseek(zfp->filep, cur_length);
 8057756:	f002 f817 	bl	8059788 <f_lseek>
		if (res != FR_OK) {
 805775a:	2800      	cmp	r0, #0
 805775c:	d1ed      	bne.n	805773a <fatfs_truncate+0x10>
		uint8_t c = 0U;
 805775e:	f88d 0003 	strb.w	r0, [sp, #3]
		for (int i = cur_length; i < length; i++) {
 8057762:	42b5      	cmp	r5, r6
 8057764:	db01      	blt.n	805776a <fatfs_truncate+0x40>
 8057766:	2000      	movs	r0, #0
 8057768:	e7e7      	b.n	805773a <fatfs_truncate+0x10>
			res = f_write(zfp->filep, &c, 1, &bw);
 805776a:	ab01      	add	r3, sp, #4
 805776c:	2201      	movs	r2, #1
 805776e:	f10d 0103 	add.w	r1, sp, #3
 8057772:	6820      	ldr	r0, [r4, #0]
 8057774:	f001 ff08 	bl	8059588 <f_write>
			if (res != FR_OK) {
 8057778:	2800      	cmp	r0, #0
 805777a:	d1de      	bne.n	805773a <fatfs_truncate+0x10>
		for (int i = cur_length; i < length; i++) {
 805777c:	3501      	adds	r5, #1
 805777e:	e7f0      	b.n	8057762 <fatfs_truncate+0x38>

08057780 <fatfs_write>:
{
 8057780:	b530      	push	{r4, r5, lr}
	if (zfp->flags & FS_O_APPEND) {
 8057782:	7a03      	ldrb	r3, [r0, #8]
{
 8057784:	b085      	sub	sp, #20
 8057786:	4604      	mov	r4, r0
 8057788:	460d      	mov	r5, r1
	if (zfp->flags & FS_O_APPEND) {
 805778a:	069b      	lsls	r3, r3, #26
 805778c:	d40a      	bmi.n	80577a4 <fatfs_write+0x24>
		res = f_write(zfp->filep, ptr, size, &bw);
 805778e:	ab03      	add	r3, sp, #12
 8057790:	4629      	mov	r1, r5
 8057792:	6820      	ldr	r0, [r4, #0]
 8057794:	f001 fef8 	bl	8059588 <f_write>
	if (res != FR_OK) {
 8057798:	b168      	cbz	r0, 80577b6 <fatfs_write+0x36>
}
 805779a:	b005      	add	sp, #20
 805779c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		res = translate_error(res);
 80577a0:	f7f2 b88e 	b.w	80498c0 <translate_error>
	off_t pos = f_size((FIL *)zfp->filep);
 80577a4:	6800      	ldr	r0, [r0, #0]
		res = f_lseek(zfp->filep, pos);
 80577a6:	9201      	str	r2, [sp, #4]
 80577a8:	68c1      	ldr	r1, [r0, #12]
 80577aa:	f001 ffed 	bl	8059788 <f_lseek>
	if (res == FR_OK) {
 80577ae:	9a01      	ldr	r2, [sp, #4]
 80577b0:	2800      	cmp	r0, #0
 80577b2:	d0ec      	beq.n	805778e <fatfs_write+0xe>
 80577b4:	e7f1      	b.n	805779a <fatfs_write+0x1a>
}
 80577b6:	9803      	ldr	r0, [sp, #12]
 80577b8:	b005      	add	sp, #20
 80577ba:	bd30      	pop	{r4, r5, pc}

080577bc <fatfs_read>:
{
 80577bc:	b507      	push	{r0, r1, r2, lr}
	res = f_read(zfp->filep, ptr, size, &br);
 80577be:	6800      	ldr	r0, [r0, #0]
 80577c0:	ab01      	add	r3, sp, #4
 80577c2:	f001 fe4c 	bl	805945e <f_read>
	if (res != FR_OK) {
 80577c6:	b120      	cbz	r0, 80577d2 <fatfs_read+0x16>
}
 80577c8:	b003      	add	sp, #12
 80577ca:	f85d eb04 	ldr.w	lr, [sp], #4
		return translate_error(res);
 80577ce:	f7f2 b877 	b.w	80498c0 <translate_error>
}
 80577d2:	9801      	ldr	r0, [sp, #4]
 80577d4:	b003      	add	sp, #12
 80577d6:	f85d fb04 	ldr.w	pc, [sp], #4

080577da <fatfs_stat>:
{
 80577da:	b530      	push	{r4, r5, lr}
 80577dc:	4608      	mov	r0, r1
 80577de:	b0c7      	sub	sp, #284	; 0x11c
 80577e0:	4615      	mov	r5, r2
	res = f_stat(&path[1], &fno);
 80577e2:	4669      	mov	r1, sp
 80577e4:	3001      	adds	r0, #1
 80577e6:	f002 f8af 	bl	8059948 <f_stat>
	if (res == FR_OK) {
 80577ea:	4604      	mov	r4, r0
 80577ec:	b968      	cbnz	r0, 805780a <fatfs_stat+0x30>
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
 80577ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
		entry->type = ((fno.fattrib & AM_DIR) ?
 80577f2:	4628      	mov	r0, r5
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
 80577f4:	f10d 0116 	add.w	r1, sp, #22
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
 80577f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
		entry->type = ((fno.fattrib & AM_DIR) ?
 80577fc:	f800 3b01 	strb.w	r3, [r0], #1
 8057800:	f003 fc60 	bl	805b0c4 <strcpy>
		entry->size = fno.fsize;
 8057804:	9b00      	ldr	r3, [sp, #0]
 8057806:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
	return translate_error(res);
 805780a:	4620      	mov	r0, r4
}
 805780c:	b047      	add	sp, #284	; 0x11c
 805780e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return translate_error(res);
 8057812:	f7f2 b855 	b.w	80498c0 <translate_error>

08057816 <fatfs_readdir>:
{
 8057816:	b530      	push	{r4, r5, lr}
 8057818:	b0c7      	sub	sp, #284	; 0x11c
 805781a:	460c      	mov	r4, r1
	res = f_readdir(zdp->dirp, &fno);
 805781c:	6800      	ldr	r0, [r0, #0]
 805781e:	4669      	mov	r1, sp
 8057820:	f002 f872 	bl	8059908 <f_readdir>
	if (res == FR_OK) {
 8057824:	4605      	mov	r5, r0
 8057826:	b970      	cbnz	r0, 8057846 <fatfs_readdir+0x30>
 8057828:	f10d 0116 	add.w	r1, sp, #22
 805782c:	1c60      	adds	r0, r4, #1
 805782e:	f003 fc49 	bl	805b0c4 <strcpy>
		if (entry->name[0] != 0) {
 8057832:	7863      	ldrb	r3, [r4, #1]
 8057834:	b13b      	cbz	r3, 8057846 <fatfs_readdir+0x30>
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
 8057836:	f89d 3008 	ldrb.w	r3, [sp, #8]
 805783a:	f3c3 1300 	ubfx	r3, r3, #4, #1
			entry->type = ((fno.fattrib & AM_DIR) ?
 805783e:	7023      	strb	r3, [r4, #0]
			entry->size = fno.fsize;
 8057840:	9b00      	ldr	r3, [sp, #0]
 8057842:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	return translate_error(res);
 8057846:	4628      	mov	r0, r5
}
 8057848:	b047      	add	sp, #284	; 0x11c
 805784a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return translate_error(res);
 805784e:	f7f2 b837 	b.w	80498c0 <translate_error>

08057852 <fatfs_statvfs>:
{
 8057852:	b513      	push	{r0, r1, r4, lr}
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
 8057854:	68c0      	ldr	r0, [r0, #12]
	DWORD f_bfree = 0;
 8057856:	2300      	movs	r3, #0
{
 8057858:	4614      	mov	r4, r2
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
 805785a:	a901      	add	r1, sp, #4
 805785c:	466a      	mov	r2, sp
 805785e:	3001      	adds	r0, #1
	DWORD f_bfree = 0;
 8057860:	9301      	str	r3, [sp, #4]
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
 8057862:	f002 f890 	bl	8059986 <f_getfree>
	if (res != FR_OK) {
 8057866:	b968      	cbnz	r0, 8057884 <fatfs_statvfs+0x32>
	stat->f_bfree = f_bfree;
 8057868:	9b01      	ldr	r3, [sp, #4]
	stat->f_frsize = fs->csize * stat->f_bsize;
 805786a:	9a00      	ldr	r2, [sp, #0]
	stat->f_bfree = f_bfree;
 805786c:	60e3      	str	r3, [r4, #12]
	stat->f_bsize = FF_MIN_SS;
 805786e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8057872:	6023      	str	r3, [r4, #0]
	stat->f_frsize = fs->csize * stat->f_bsize;
 8057874:	8953      	ldrh	r3, [r2, #10]
 8057876:	025b      	lsls	r3, r3, #9
 8057878:	6063      	str	r3, [r4, #4]
	stat->f_blocks = (fs->n_fatent - 2);
 805787a:	6993      	ldr	r3, [r2, #24]
 805787c:	3b02      	subs	r3, #2
 805787e:	60a3      	str	r3, [r4, #8]
}
 8057880:	b002      	add	sp, #8
 8057882:	bd10      	pop	{r4, pc}
		return -EIO;
 8057884:	f06f 0004 	mvn.w	r0, #4
 8057888:	e7fa      	b.n	8057880 <fatfs_statvfs+0x2e>

0805788a <fs_file_t_init>:
	*zfp = (struct fs_file_t){ 0 };
 805788a:	2300      	movs	r3, #0
 805788c:	e9c0 3300 	strd	r3, r3, [r0]
 8057890:	6083      	str	r3, [r0, #8]
}
 8057892:	4770      	bx	lr

08057894 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 8057894:	2200      	movs	r2, #0
 8057896:	2006      	movs	r0, #6
{
 8057898:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 805789a:	4611      	mov	r1, r2
 805789c:	f7f0 fbf4 	bl	8048088 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 80578a0:	2200      	movs	r2, #0
 80578a2:	2007      	movs	r0, #7
 80578a4:	4611      	mov	r1, r2
 80578a6:	f7f0 fbef 	bl	8048088 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 80578aa:	2200      	movs	r2, #0
 80578ac:	2008      	movs	r0, #8
 80578ae:	4611      	mov	r1, r2
 80578b0:	f7f0 fbea 	bl	8048088 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 80578b4:	2200      	movs	r2, #0
 80578b6:	2009      	movs	r0, #9
 80578b8:	4611      	mov	r1, r2
 80578ba:	f7f0 fbe5 	bl	8048088 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 80578be:	2200      	movs	r2, #0
 80578c0:	200a      	movs	r0, #10
 80578c2:	4611      	mov	r1, r2
 80578c4:	f7f0 fbe0 	bl	8048088 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 80578c8:	2200      	movs	r2, #0
 80578ca:	2017      	movs	r0, #23
 80578cc:	4611      	mov	r1, r2
 80578ce:	f7f0 fbdb 	bl	8048088 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 80578d2:	2200      	movs	r2, #0
 80578d4:	2028      	movs	r0, #40	; 0x28
 80578d6:	4611      	mov	r1, r2
 80578d8:	f7f0 fbd6 	bl	8048088 <z_arm_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X || CONFIG_SOC_SERIES_STM32L5X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 80578dc:	2200      	movs	r2, #0
 80578de:	2001      	movs	r0, #1
 80578e0:	4611      	mov	r1, r2
 80578e2:	f7f0 fbd1 	bl	8048088 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_STM32F410RX)
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 80578e6:	2200      	movs	r2, #0
 80578e8:	202a      	movs	r0, #42	; 0x2a
 80578ea:	4611      	mov	r1, r2
 80578ec:	f7f0 fbcc 	bl	8048088 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 80578f0:	2200      	movs	r2, #0
 80578f2:	2002      	movs	r0, #2
 80578f4:	4611      	mov	r1, r2
 80578f6:	f7f0 fbc7 	bl	8048088 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 80578fa:	2200      	movs	r2, #0
 80578fc:	2003      	movs	r0, #3
 80578fe:	4611      	mov	r1, r2
 8057900:	f7f0 fbc2 	bl	8048088 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_RTC_WKUP_IRQ_PRI,
		__stm32_exti_isr_22, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif
#if CONFIG_SOC_SERIES_STM32F7X
	IRQ_CONNECT(LPTIM1_IRQn,
 8057904:	2200      	movs	r2, #0
 8057906:	205d      	movs	r0, #93	; 0x5d
 8057908:	4611      	mov	r1, r2
 805790a:	f7f0 fbbd 	bl	8048088 <z_arm_irq_priority_set>
}
 805790e:	2000      	movs	r0, #0
 8057910:	bd08      	pop	{r3, pc}

08057912 <__stm32_exti_isr_23>:
	__stm32_exti_isr(23, 24, arg);
 8057912:	6902      	ldr	r2, [r0, #16]
 8057914:	2118      	movs	r1, #24
 8057916:	2017      	movs	r0, #23
 8057918:	f7f2 bc0a 	b.w	804a130 <__stm32_exti_isr.isra.0>

0805791c <__stm32_exti_isr_22>:
	__stm32_exti_isr(22, 23, arg);
 805791c:	6902      	ldr	r2, [r0, #16]
 805791e:	2117      	movs	r1, #23
 8057920:	2016      	movs	r0, #22
 8057922:	f7f2 bc05 	b.w	804a130 <__stm32_exti_isr.isra.0>

08057926 <__stm32_exti_isr_21>:
	__stm32_exti_isr(21, 22, arg);
 8057926:	6902      	ldr	r2, [r0, #16]
 8057928:	2116      	movs	r1, #22
 805792a:	2015      	movs	r0, #21
 805792c:	f7f2 bc00 	b.w	804a130 <__stm32_exti_isr.isra.0>

08057930 <__stm32_exti_isr_18>:
	__stm32_exti_isr(18, 19, arg);
 8057930:	6902      	ldr	r2, [r0, #16]
 8057932:	2113      	movs	r1, #19
 8057934:	2012      	movs	r0, #18
 8057936:	f7f2 bbfb 	b.w	804a130 <__stm32_exti_isr.isra.0>

0805793a <__stm32_exti_isr_16>:
	__stm32_exti_isr(16, 17, arg);
 805793a:	6902      	ldr	r2, [r0, #16]
 805793c:	2111      	movs	r1, #17
 805793e:	2010      	movs	r0, #16
 8057940:	f7f2 bbf6 	b.w	804a130 <__stm32_exti_isr.isra.0>

08057944 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 8057944:	6902      	ldr	r2, [r0, #16]
 8057946:	2110      	movs	r1, #16
 8057948:	200a      	movs	r0, #10
 805794a:	f7f2 bbf1 	b.w	804a130 <__stm32_exti_isr.isra.0>

0805794e <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 805794e:	6902      	ldr	r2, [r0, #16]
 8057950:	210a      	movs	r1, #10
 8057952:	2005      	movs	r0, #5
 8057954:	f7f2 bbec 	b.w	804a130 <__stm32_exti_isr.isra.0>

08057958 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 8057958:	6902      	ldr	r2, [r0, #16]
 805795a:	2105      	movs	r1, #5
 805795c:	2004      	movs	r0, #4
 805795e:	f7f2 bbe7 	b.w	804a130 <__stm32_exti_isr.isra.0>

08057962 <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 8057962:	6902      	ldr	r2, [r0, #16]
 8057964:	2104      	movs	r1, #4
 8057966:	2003      	movs	r0, #3
 8057968:	f7f2 bbe2 	b.w	804a130 <__stm32_exti_isr.isra.0>

0805796c <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 805796c:	6902      	ldr	r2, [r0, #16]
 805796e:	2103      	movs	r1, #3
 8057970:	2002      	movs	r0, #2
 8057972:	f7f2 bbdd 	b.w	804a130 <__stm32_exti_isr.isra.0>

08057976 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 8057976:	6902      	ldr	r2, [r0, #16]
 8057978:	2102      	movs	r1, #2
 805797a:	2001      	movs	r0, #1
 805797c:	f7f2 bbd8 	b.w	804a130 <__stm32_exti_isr.isra.0>

08057980 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 8057980:	6902      	ldr	r2, [r0, #16]
 8057982:	2101      	movs	r1, #1
 8057984:	2000      	movs	r0, #0
 8057986:	f7f2 bbd3 	b.w	804a130 <__stm32_exti_isr.isra.0>

0805798a <gpio_pin_configure>:
{
 805798a:	4613      	mov	r3, r2
 805798c:	b4f0      	push	{r4, r5, r6, r7}
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 805798e:	04d4      	lsls	r4, r2, #19
	const struct gpio_driver_api *api =
 8057990:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 8057992:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8057994:	d506      	bpl.n	80579a4 <gpio_pin_configure+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8057996:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 805799a:	d003      	beq.n	80579a4 <gpio_pin_configure+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 805799c:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 805799e:	bf48      	it	mi
 80579a0:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80579a4:	2501      	movs	r5, #1
 80579a6:	6834      	ldr	r4, [r6, #0]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80579a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80579ac:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80579ae:	fa05 f501 	lsl.w	r5, r5, r1
	return api->pin_configure(port, pin, flags);
 80579b2:	683b      	ldr	r3, [r7, #0]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80579b4:	bf4c      	ite	mi
 80579b6:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80579b8:	43ac      	bicpl	r4, r5
 80579ba:	6034      	str	r4, [r6, #0]
}
 80579bc:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
 80579be:	4718      	bx	r3

080579c0 <stm32_sdmmc_access_status>:
	struct stm32_sdmmc_priv *priv = dev->data;
 80579c0:	6903      	ldr	r3, [r0, #16]
	return priv->status;
 80579c2:	691b      	ldr	r3, [r3, #16]
}
 80579c4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80579c8:	4770      	bx	lr

080579ca <stm32_sdmmc_access_ioctl>:
	struct stm32_sdmmc_priv *priv = dev->data;
 80579ca:	6903      	ldr	r3, [r0, #16]
 80579cc:	3901      	subs	r1, #1
{
 80579ce:	b510      	push	{r4, lr}
	struct stm32_sdmmc_priv *priv = dev->data;
 80579d0:	6918      	ldr	r0, [r3, #16]
{
 80579d2:	b088      	sub	sp, #32
 80579d4:	4614      	mov	r4, r2
 80579d6:	2904      	cmp	r1, #4
 80579d8:	d81a      	bhi.n	8057a10 <stm32_sdmmc_access_ioctl+0x46>
 80579da:	e8df f001 	tbb	[pc, r1]
 80579de:	0e03      	.short	0x0e03
 80579e0:	1519      	.short	0x1519
 80579e2:	17          	.byte	0x17
 80579e3:	00          	.byte	0x00
		err = HAL_SD_GetCardInfo(&priv->hsd, &info);
 80579e4:	4669      	mov	r1, sp
 80579e6:	f002 fa01 	bl	8059dec <HAL_SD_GetCardInfo>
		if (err != HAL_OK) {
 80579ea:	b118      	cbz	r0, 80579f4 <stm32_sdmmc_access_ioctl+0x2a>
			return -EIO;
 80579ec:	f06f 0004 	mvn.w	r0, #4
}
 80579f0:	b008      	add	sp, #32
 80579f2:	bd10      	pop	{r4, pc}
		*(uint32_t *)buff = info.LogBlockNbr;
 80579f4:	9b06      	ldr	r3, [sp, #24]
		*(uint32_t *)buff = info.LogBlockSize;
 80579f6:	6023      	str	r3, [r4, #0]
		break;
 80579f8:	e7fa      	b.n	80579f0 <stm32_sdmmc_access_ioctl+0x26>
		err = HAL_SD_GetCardInfo(&priv->hsd, &info);
 80579fa:	4669      	mov	r1, sp
 80579fc:	f002 f9f6 	bl	8059dec <HAL_SD_GetCardInfo>
		if (err != HAL_OK) {
 8057a00:	2800      	cmp	r0, #0
 8057a02:	d1f3      	bne.n	80579ec <stm32_sdmmc_access_ioctl+0x22>
		*(uint32_t *)buff = info.LogBlockSize;
 8057a04:	9b07      	ldr	r3, [sp, #28]
 8057a06:	e7f6      	b.n	80579f6 <stm32_sdmmc_access_ioctl+0x2c>
		*(uint32_t *)buff = 1;
 8057a08:	2301      	movs	r3, #1
 8057a0a:	6013      	str	r3, [r2, #0]
	return 0;
 8057a0c:	2000      	movs	r0, #0
		break;
 8057a0e:	e7ef      	b.n	80579f0 <stm32_sdmmc_access_ioctl+0x26>
		return -EINVAL;
 8057a10:	f06f 0015 	mvn.w	r0, #21
 8057a14:	e7ec      	b.n	80579f0 <stm32_sdmmc_access_ioctl+0x26>

08057a16 <stm32_sdmmc_cd_callback>:
	k_work_submit(&priv->work);
 8057a16:	f1a1 0010 	sub.w	r0, r1, #16
 8057a1a:	f7fa b93d 	b.w	8051c98 <k_work_submit>

08057a1e <gpio_remove_callback.isra.0>:
				       struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 8057a1e:	6883      	ldr	r3, [r0, #8]
 8057a20:	69db      	ldr	r3, [r3, #28]
 8057a22:	b10b      	cbz	r3, 8057a28 <gpio_remove_callback.isra.0+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, false);
 8057a24:	2200      	movs	r2, #0
 8057a26:	4718      	bx	r3
}
 8057a28:	4770      	bx	lr

08057a2a <adc_channel_setup>:
	return api->channel_setup(dev, channel_cfg);
 8057a2a:	6883      	ldr	r3, [r0, #8]
 8057a2c:	681b      	ldr	r3, [r3, #0]
 8057a2e:	4718      	bx	r3

08057a30 <cmd_dict_GAIN_1_6>:
SHELL_SUBCMD_DICT_SET_CREATE(sub_gain_cmds, cmd_adc_gain,
 8057a30:	4611      	mov	r1, r2
 8057a32:	2200      	movs	r2, #0
 8057a34:	f7f2 be46 	b.w	804a6c4 <cmd_adc_gain.constprop.0>

08057a38 <cmd_dict_GAIN_1_5>:
 8057a38:	4611      	mov	r1, r2
 8057a3a:	2201      	movs	r2, #1
 8057a3c:	f7f2 be42 	b.w	804a6c4 <cmd_adc_gain.constprop.0>

08057a40 <cmd_dict_GAIN_1_4>:
 8057a40:	4611      	mov	r1, r2
 8057a42:	2202      	movs	r2, #2
 8057a44:	f7f2 be3e 	b.w	804a6c4 <cmd_adc_gain.constprop.0>

08057a48 <cmd_dict_GAIN_1_3>:
 8057a48:	4611      	mov	r1, r2
 8057a4a:	2203      	movs	r2, #3
 8057a4c:	f7f2 be3a 	b.w	804a6c4 <cmd_adc_gain.constprop.0>

08057a50 <cmd_dict_GAIN_1_2>:
 8057a50:	4611      	mov	r1, r2
 8057a52:	2204      	movs	r2, #4
 8057a54:	f7f2 be36 	b.w	804a6c4 <cmd_adc_gain.constprop.0>

08057a58 <cmd_dict_GAIN_2_3>:
 8057a58:	4611      	mov	r1, r2
 8057a5a:	2205      	movs	r2, #5
 8057a5c:	f7f2 be32 	b.w	804a6c4 <cmd_adc_gain.constprop.0>

08057a60 <cmd_dict_GAIN_1>:
 8057a60:	4611      	mov	r1, r2
 8057a62:	2206      	movs	r2, #6
 8057a64:	f7f2 be2e 	b.w	804a6c4 <cmd_adc_gain.constprop.0>

08057a68 <cmd_dict_GAIN_2>:
 8057a68:	4611      	mov	r1, r2
 8057a6a:	2207      	movs	r2, #7
 8057a6c:	f7f2 be2a 	b.w	804a6c4 <cmd_adc_gain.constprop.0>

08057a70 <cmd_dict_GAIN_3>:
 8057a70:	4611      	mov	r1, r2
 8057a72:	2208      	movs	r2, #8
 8057a74:	f7f2 be26 	b.w	804a6c4 <cmd_adc_gain.constprop.0>

08057a78 <cmd_dict_GAIN_4>:
 8057a78:	4611      	mov	r1, r2
 8057a7a:	2209      	movs	r2, #9
 8057a7c:	f7f2 be22 	b.w	804a6c4 <cmd_adc_gain.constprop.0>

08057a80 <cmd_dict_GAIN_8>:
 8057a80:	4611      	mov	r1, r2
 8057a82:	220b      	movs	r2, #11
 8057a84:	f7f2 be1e 	b.w	804a6c4 <cmd_adc_gain.constprop.0>

08057a88 <cmd_dict_GAIN_16>:
 8057a88:	4611      	mov	r1, r2
 8057a8a:	220d      	movs	r2, #13
 8057a8c:	f7f2 be1a 	b.w	804a6c4 <cmd_adc_gain.constprop.0>

08057a90 <cmd_dict_GAIN_32>:
 8057a90:	4611      	mov	r1, r2
 8057a92:	220f      	movs	r2, #15
 8057a94:	f7f2 be16 	b.w	804a6c4 <cmd_adc_gain.constprop.0>

08057a98 <cmd_dict_GAIN_64>:
 8057a98:	4611      	mov	r1, r2
 8057a9a:	2210      	movs	r2, #16
 8057a9c:	f7f2 be12 	b.w	804a6c4 <cmd_adc_gain.constprop.0>

08057aa0 <cmd_dict_VDD_1>:
SHELL_SUBCMD_DICT_SET_CREATE(sub_ref_cmds, cmd_adc_ref,
 8057aa0:	4611      	mov	r1, r2
 8057aa2:	2200      	movs	r2, #0
 8057aa4:	f7f2 be48 	b.w	804a738 <cmd_adc_ref.constprop.0>

08057aa8 <cmd_dict_VDD_1_2>:
 8057aa8:	4611      	mov	r1, r2
 8057aaa:	2201      	movs	r2, #1
 8057aac:	f7f2 be44 	b.w	804a738 <cmd_adc_ref.constprop.0>

08057ab0 <cmd_dict_VDD_1_3>:
 8057ab0:	4611      	mov	r1, r2
 8057ab2:	2202      	movs	r2, #2
 8057ab4:	f7f2 be40 	b.w	804a738 <cmd_adc_ref.constprop.0>

08057ab8 <cmd_dict_VDD_1_4>:
 8057ab8:	4611      	mov	r1, r2
 8057aba:	2203      	movs	r2, #3
 8057abc:	f7f2 be3c 	b.w	804a738 <cmd_adc_ref.constprop.0>

08057ac0 <cmd_dict_INTERNAL>:
 8057ac0:	4611      	mov	r1, r2
 8057ac2:	2204      	movs	r2, #4
 8057ac4:	f7f2 be38 	b.w	804a738 <cmd_adc_ref.constprop.0>

08057ac8 <cmd_dict_EXTERNAL_0>:
 8057ac8:	4611      	mov	r1, r2
 8057aca:	2205      	movs	r2, #5
 8057acc:	f7f2 be34 	b.w	804a738 <cmd_adc_ref.constprop.0>

08057ad0 <cmd_dict_EXTERNAL_1>:
 8057ad0:	4611      	mov	r1, r2
 8057ad2:	2206      	movs	r2, #6
 8057ad4:	f7f2 be30 	b.w	804a738 <cmd_adc_ref.constprop.0>

08057ad8 <adc_stm32_cfg_func_0>:
		    DT_INST_IRQ(index, priority),			\
		    adc_stm32_isr, DEVICE_DT_INST_GET(index), 0);	\
	irq_enable(DT_INST_IRQN(index));				\
}

DT_INST_FOREACH_STATUS_OKAY(STM32_ADC_INIT)
 8057ad8:	2200      	movs	r2, #0
 8057ada:	2012      	movs	r0, #18
 8057adc:	b508      	push	{r3, lr}
 8057ade:	4611      	mov	r1, r2
 8057ae0:	f7f0 fad2 	bl	8048088 <z_arm_irq_priority_set>
 8057ae4:	2012      	movs	r0, #18
 8057ae6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8057aea:	f7f0 babd 	b.w	8048068 <arch_irq_enable>

08057aee <adc_context_start_sampling>:
	data->repeat_buffer = data->buffer;
 8057aee:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8057af2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 8057af6:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 8057afa:	685b      	ldr	r3, [r3, #4]
 8057afc:	681a      	ldr	r2, [r3, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8057afe:	6893      	ldr	r3, [r2, #8]
 8057b00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8057b04:	6093      	str	r3, [r2, #8]
}
 8057b06:	4770      	bx	lr

08057b08 <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8057b08:	f1a0 0308 	sub.w	r3, r0, #8
 8057b0c:	f3bf 8f5b 	dmb	ish
 8057b10:	e853 2f00 	ldrex	r2, [r3]
 8057b14:	1c51      	adds	r1, r2, #1
 8057b16:	e843 1c00 	strex	ip, r1, [r3]
 8057b1a:	f1bc 0f00 	cmp.w	ip, #0
 8057b1e:	d1f7      	bne.n	8057b10 <adc_context_on_timer_expired+0x8>
 8057b20:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
 8057b24:	b912      	cbnz	r2, 8057b2c <adc_context_on_timer_expired+0x24>
		adc_context_start_sampling(ctx);
 8057b26:	4618      	mov	r0, r3
 8057b28:	f7ff bfe1 	b.w	8057aee <adc_context_start_sampling>
		ctx->status = -EBUSY;
 8057b2c:	f06f 030f 	mvn.w	r3, #15
 8057b30:	6683      	str	r3, [r0, #104]	; 0x68
}
 8057b32:	4770      	bx	lr

08057b34 <adc_stm32_isr>:
	ADC_TypeDef *adc = config->base;
 8057b34:	6843      	ldr	r3, [r0, #4]
{
 8057b36:	b510      	push	{r4, lr}
	ADC_TypeDef *adc = config->base;
 8057b38:	681b      	ldr	r3, [r3, #0]
	struct adc_stm32_data *data = (struct adc_stm32_data *)dev->data;
 8057b3a:	6904      	ldr	r4, [r0, #16]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8057b3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	*data->buffer++ = LL_ADC_REG_ReadConversionData32(adc);
 8057b3e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8057b42:	1c99      	adds	r1, r3, #2
 8057b44:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
 8057b48:	801a      	strh	r2, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
 8057b4a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8057b4c:	b3b3      	cbz	r3, 8057bbc <adc_stm32_isr+0x88>
		adc_sequence_callback callback = ctx->options.callback;
 8057b4e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
 8057b52:	b143      	cbz	r3, 8057b66 <adc_stm32_isr+0x32>
			action = callback(dev,
 8057b54:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
 8057b58:	f104 0174 	add.w	r1, r4, #116	; 0x74
 8057b5c:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
 8057b5e:	2801      	cmp	r0, #1
 8057b60:	d00b      	beq.n	8057b7a <adc_stm32_isr+0x46>
 8057b62:	2802      	cmp	r0, #2
 8057b64:	d023      	beq.n	8057bae <adc_stm32_isr+0x7a>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
 8057b66:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 8057b6a:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
 8057b6e:	429a      	cmp	r2, r3
 8057b70:	d91d      	bls.n	8057bae <adc_stm32_isr+0x7a>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
 8057b72:	3301      	adds	r3, #1
 8057b74:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
	if (repeat_sampling) {
 8057b78:	e003      	b.n	8057b82 <adc_stm32_isr+0x4e>
		data->buffer = data->repeat_buffer;
 8057b7a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8057b7e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
 8057b82:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8057b86:	b923      	cbnz	r3, 8057b92 <adc_stm32_isr+0x5e>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
 8057b88:	4620      	mov	r0, r4
}
 8057b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8057b8e:	f7ff bfae 	b.w	8057aee <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8057b92:	f3bf 8f5b 	dmb	ish
 8057b96:	e854 3f00 	ldrex	r3, [r4]
 8057b9a:	1e5a      	subs	r2, r3, #1
 8057b9c:	e844 2100 	strex	r1, r2, [r4]
 8057ba0:	2900      	cmp	r1, #0
 8057ba2:	d1f8      	bne.n	8057b96 <adc_stm32_isr+0x62>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
 8057ba4:	2b01      	cmp	r3, #1
 8057ba6:	f3bf 8f5b 	dmb	ish
 8057baa:	dced      	bgt.n	8057b88 <adc_stm32_isr+0x54>
 8057bac:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
 8057bae:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8057bb2:	b11b      	cbz	r3, 8057bbc <adc_stm32_isr+0x88>
	z_impl_k_timer_stop(timer);
 8057bb4:	f104 0008 	add.w	r0, r4, #8
 8057bb8:	f002 fdfc 	bl	805a7b4 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8057bbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8057bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8057bc4:	f7f9 bf8e 	b.w	8051ae4 <z_impl_k_sem_give>

08057bc8 <config_pll_init>:
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 8057bc8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8057bcc:	2208      	movs	r2, #8
 8057bce:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLP = pllp(STM32_PLL_P_DIVISOR);
 8057bd2:	2300      	movs	r3, #0
 8057bd4:	6083      	str	r3, [r0, #8]
}
 8057bd6:	4770      	bx	lr

08057bd8 <LL_RCC_MSI_Disable>:
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
	/* Do nothing */
}
 8057bd8:	4770      	bx	lr

08057bda <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8057bda:	6843      	ldr	r3, [r0, #4]
}
 8057bdc:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8057bde:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8057be0:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8057be2:	600b      	str	r3, [r1, #0]
}
 8057be4:	4770      	bx	lr

08057be6 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8057be6:	6843      	ldr	r3, [r0, #4]
 8057be8:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8057bea:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8057bec:	4042      	eors	r2, r0
 8057bee:	400a      	ands	r2, r1
 8057bf0:	4042      	eors	r2, r0
}
 8057bf2:	2000      	movs	r0, #0
  WRITE_REG(GPIOx->ODR, PortValue);
 8057bf4:	615a      	str	r2, [r3, #20]
 8057bf6:	4770      	bx	lr

08057bf8 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8057bf8:	6843      	ldr	r3, [r0, #4]
}
 8057bfa:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8057bfc:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8057bfe:	6199      	str	r1, [r3, #24]
}
 8057c00:	4770      	bx	lr

08057c02 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8057c02:	6843      	ldr	r3, [r0, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8057c04:	0409      	lsls	r1, r1, #16
}
 8057c06:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8057c08:	685b      	ldr	r3, [r3, #4]
 8057c0a:	6199      	str	r1, [r3, #24]
}
 8057c0c:	4770      	bx	lr

08057c0e <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8057c0e:	6843      	ldr	r3, [r0, #4]
}
 8057c10:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8057c12:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8057c14:	6953      	ldr	r3, [r2, #20]
 8057c16:	4059      	eors	r1, r3
 8057c18:	6151      	str	r1, [r2, #20]
}
 8057c1a:	4770      	bx	lr

08057c1c <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
	struct gpio_stm32_data *data = dev->data;
 8057c1c:	6903      	ldr	r3, [r0, #16]
	return list->head;
 8057c1e:	6898      	ldr	r0, [r3, #8]
{
 8057c20:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8057c22:	b158      	cbz	r0, 8057c3c <gpio_stm32_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8057c24:	2400      	movs	r4, #0
 8057c26:	4281      	cmp	r1, r0
 8057c28:	d112      	bne.n	8057c50 <gpio_stm32_manage_callback+0x34>
	return node->next;
 8057c2a:	6808      	ldr	r0, [r1, #0]
	return list->tail;
 8057c2c:	68dd      	ldr	r5, [r3, #12]
Z_GENLIST_REMOVE(slist, snode)
 8057c2e:	b954      	cbnz	r4, 8057c46 <gpio_stm32_manage_callback+0x2a>
 8057c30:	428d      	cmp	r5, r1
	list->head = node;
 8057c32:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8057c34:	d100      	bne.n	8057c38 <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8057c36:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8057c38:	2000      	movs	r0, #0
 8057c3a:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 8057c3c:	b96a      	cbnz	r2, 8057c5a <gpio_stm32_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8057c3e:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->cb, callback, set);
}
 8057c40:	bd30      	pop	{r4, r5, pc}
 8057c42:	4628      	mov	r0, r5
 8057c44:	e7ef      	b.n	8057c26 <gpio_stm32_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
 8057c46:	428d      	cmp	r5, r1
	parent->next = child;
 8057c48:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8057c4a:	bf08      	it	eq
 8057c4c:	60dc      	streq	r4, [r3, #12]
}
 8057c4e:	e7f3      	b.n	8057c38 <gpio_stm32_manage_callback+0x1c>
	return node->next;
 8057c50:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8057c52:	4604      	mov	r4, r0
 8057c54:	2d00      	cmp	r5, #0
 8057c56:	d1f4      	bne.n	8057c42 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8057c58:	b13a      	cbz	r2, 8057c6a <gpio_stm32_manage_callback+0x4e>
	parent->next = child;
 8057c5a:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8057c5c:	68d8      	ldr	r0, [r3, #12]
	parent->next = child;
 8057c5e:	600a      	str	r2, [r1, #0]
	list->head = node;
 8057c60:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8057c62:	2800      	cmp	r0, #0
 8057c64:	d1eb      	bne.n	8057c3e <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8057c66:	60d9      	str	r1, [r3, #12]
}
 8057c68:	e7ea      	b.n	8057c40 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8057c6a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8057c6e:	e7e7      	b.n	8057c40 <gpio_stm32_manage_callback+0x24>

08057c70 <gpio_stm32_isr>:
{
 8057c70:	460b      	mov	r3, r1
 8057c72:	6889      	ldr	r1, [r1, #8]
 8057c74:	b570      	push	{r4, r5, r6, lr}
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8057c76:	b171      	cbz	r1, 8057c96 <gpio_stm32_isr+0x26>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8057c78:	685e      	ldr	r6, [r3, #4]
 8057c7a:	2301      	movs	r3, #1
	return node->next;
 8057c7c:	680c      	ldr	r4, [r1, #0]
 8057c7e:	fa03 f500 	lsl.w	r5, r3, r0
		if (cb->pin_mask & pins) {
 8057c82:	688a      	ldr	r2, [r1, #8]
 8057c84:	402a      	ands	r2, r5
 8057c86:	d002      	beq.n	8057c8e <gpio_stm32_isr+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8057c88:	684b      	ldr	r3, [r1, #4]
 8057c8a:	4630      	mov	r0, r6
 8057c8c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8057c8e:	b114      	cbz	r4, 8057c96 <gpio_stm32_isr+0x26>
 8057c90:	4621      	mov	r1, r4
 8057c92:	6824      	ldr	r4, [r4, #0]
 8057c94:	e7f5      	b.n	8057c82 <gpio_stm32_isr+0x12>
}
 8057c96:	bd70      	pop	{r4, r5, r6, pc}

08057c98 <gpio_stm32_configure>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8057c98:	6840      	ldr	r0, [r0, #4]
{
 8057c9a:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8057c9c:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8057c9e:	2001      	movs	r0, #1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8057ca0:	f3c2 1680 	ubfx	r6, r2, #6, #1
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8057ca4:	f04f 0e03 	mov.w	lr, #3
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8057ca8:	6867      	ldr	r7, [r4, #4]
	pinval = 1 << pin;
 8057caa:	4088      	lsls	r0, r1
 8057cac:	408e      	lsls	r6, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8057cae:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8057cb2:	ea27 0700 	bic.w	r7, r7, r0
	if (mode == STM32_MODER_ALT_MODE) {
 8057cb6:	2d20      	cmp	r5, #32
 8057cb8:	ea46 0607 	orr.w	r6, r6, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8057cbc:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8057cc0:	fab7 f787 	clz	r7, r7
 8057cc4:	6066      	str	r6, [r4, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8057cc6:	f8d4 c008 	ldr.w	ip, [r4, #8]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8057cca:	f3c2 16c1 	ubfx	r6, r2, #7, #2
 8057cce:	ea4f 0747 	mov.w	r7, r7, lsl #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8057cd2:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8057cd6:	fa0e f707 	lsl.w	r7, lr, r7
 8057cda:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8057cde:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8057ce2:	fab7 f787 	clz	r7, r7
 8057ce6:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8057cea:	fa06 f607 	lsl.w	r6, r6, r7
 8057cee:	ea46 060c 	orr.w	r6, r6, ip
 8057cf2:	60a6      	str	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8057cf4:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8057cf8:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8057cfc:	68e7      	ldr	r7, [r4, #12]
 8057cfe:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8057d02:	fa0e f606 	lsl.w	r6, lr, r6
 8057d06:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8057d0a:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8057d0e:	fab6 f686 	clz	r6, r6
 8057d12:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8057d16:	fa02 f206 	lsl.w	r2, r2, r6
 8057d1a:	ea42 0207 	orr.w	r2, r2, r7
 8057d1e:	60e2      	str	r2, [r4, #12]
	if (mode == STM32_MODER_ALT_MODE) {
 8057d20:	d115      	bne.n	8057d4e <gpio_stm32_configure+0xb6>
		if (pin < 8) {
 8057d22:	2907      	cmp	r1, #7
 8057d24:	dc2b      	bgt.n	8057d7e <gpio_stm32_configure+0xe6>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8057d26:	6a21      	ldr	r1, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8057d28:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8057d2c:	b32a      	cbz	r2, 8057d7a <gpio_stm32_configure+0xe2>
  return __builtin_clz(value);
 8057d2e:	fab2 f282 	clz	r2, r2
 8057d32:	0092      	lsls	r2, r2, #2
 8057d34:	260f      	movs	r6, #15
 8057d36:	fa06 f202 	lsl.w	r2, r6, r2
 8057d3a:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8057d3e:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 8057d42:	fab2 f282 	clz	r2, r2
 8057d46:	0092      	lsls	r2, r2, #2
 8057d48:	4093      	lsls	r3, r2
 8057d4a:	430b      	orrs	r3, r1
 8057d4c:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8057d4e:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8057d52:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8057d56:	2103      	movs	r1, #3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8057d58:	fa90 f0a0 	rbit	r0, r0
 8057d5c:	005b      	lsls	r3, r3, #1
  return __builtin_clz(value);
 8057d5e:	fab0 f080 	clz	r0, r0
 8057d62:	6822      	ldr	r2, [r4, #0]
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8057d64:	092d      	lsrs	r5, r5, #4
 8057d66:	fa01 f303 	lsl.w	r3, r1, r3
 8057d6a:	0040      	lsls	r0, r0, #1
 8057d6c:	ea22 0303 	bic.w	r3, r2, r3
 8057d70:	fa05 f000 	lsl.w	r0, r5, r0
 8057d74:	4318      	orrs	r0, r3
 8057d76:	6020      	str	r0, [r4, #0]
}
 8057d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8057d7a:	462a      	mov	r2, r5
 8057d7c:	e7d9      	b.n	8057d32 <gpio_stm32_configure+0x9a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8057d7e:	0a02      	lsrs	r2, r0, #8
 8057d80:	6a66      	ldr	r6, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8057d82:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8057d86:	b181      	cbz	r1, 8057daa <gpio_stm32_configure+0x112>
  return __builtin_clz(value);
 8057d88:	fab1 f181 	clz	r1, r1
 8057d8c:	0089      	lsls	r1, r1, #2
 8057d8e:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8057d90:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8057d94:	fab2 f282 	clz	r2, r2
 8057d98:	fa07 f101 	lsl.w	r1, r7, r1
 8057d9c:	0092      	lsls	r2, r2, #2
 8057d9e:	ea26 0101 	bic.w	r1, r6, r1
 8057da2:	4093      	lsls	r3, r2
 8057da4:	430b      	orrs	r3, r1
 8057da6:	6263      	str	r3, [r4, #36]	; 0x24
}
 8057da8:	e7d1      	b.n	8057d4e <gpio_stm32_configure+0xb6>
    return 32U;
 8057daa:	4629      	mov	r1, r5
 8057dac:	e7ee      	b.n	8057d8c <gpio_stm32_configure+0xf4>

08057dae <gpio_stm32_config>:
	if ((flags & GPIO_OUTPUT) != 0) {
 8057dae:	0593      	lsls	r3, r2, #22
{
 8057db0:	b570      	push	{r4, r5, r6, lr}
 8057db2:	4605      	mov	r5, r0
 8057db4:	460e      	mov	r6, r1
	if ((flags & GPIO_OUTPUT) != 0) {
 8057db6:	d519      	bpl.n	8057dec <gpio_stm32_config+0x3e>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8057db8:	0794      	lsls	r4, r2, #30
 8057dba:	d510      	bpl.n	8057dde <gpio_stm32_config+0x30>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8057dbc:	0750      	lsls	r0, r2, #29
 8057dbe:	d531      	bpl.n	8057e24 <gpio_stm32_config+0x76>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8057dc0:	2450      	movs	r4, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8057dc2:	06d1      	lsls	r1, r2, #27
 8057dc4:	d50d      	bpl.n	8057de2 <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8057dc6:	f444 7400 	orr.w	r4, r4, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8057dca:	0513      	lsls	r3, r2, #20
 8057dcc:	d41f      	bmi.n	8057e0e <gpio_stm32_config+0x60>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8057dce:	0552      	lsls	r2, r2, #21
 8057dd0:	d515      	bpl.n	8057dfe <gpio_stm32_config+0x50>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8057dd2:	2101      	movs	r1, #1
 8057dd4:	4628      	mov	r0, r5
 8057dd6:	40b1      	lsls	r1, r6
 8057dd8:	f7ff ff13 	bl	8057c02 <gpio_stm32_port_clear_bits_raw>
 8057ddc:	e00f      	b.n	8057dfe <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8057dde:	2410      	movs	r4, #16
 8057de0:	e7ef      	b.n	8057dc2 <gpio_stm32_config+0x14>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8057de2:	0693      	lsls	r3, r2, #26
 8057de4:	d5f1      	bpl.n	8057dca <gpio_stm32_config+0x1c>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8057de6:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
	if (err != 0) {
 8057dea:	e7ee      	b.n	8057dca <gpio_stm32_config+0x1c>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8057dec:	05d0      	lsls	r0, r2, #23
 8057dee:	d514      	bpl.n	8057e1a <gpio_stm32_config+0x6c>
		if ((flags & GPIO_PULL_UP) != 0) {
 8057df0:	06d1      	lsls	r1, r2, #27
 8057df2:	d414      	bmi.n	8057e1e <gpio_stm32_config+0x70>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8057df4:	f012 0420 	ands.w	r4, r2, #32
 8057df8:	bf18      	it	ne
 8057dfa:	f44f 6480 	movne.w	r4, #1024	; 0x400
	gpio_stm32_configure(dev, pin, pincfg, 0);
 8057dfe:	4628      	mov	r0, r5
 8057e00:	2300      	movs	r3, #0
 8057e02:	4622      	mov	r2, r4
 8057e04:	4631      	mov	r1, r6
 8057e06:	f7ff ff47 	bl	8057c98 <gpio_stm32_configure>
 8057e0a:	2000      	movs	r0, #0
}
 8057e0c:	bd70      	pop	{r4, r5, r6, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8057e0e:	686a      	ldr	r2, [r5, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8057e10:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8057e12:	6852      	ldr	r2, [r2, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8057e14:	40b3      	lsls	r3, r6
	WRITE_REG(gpio->BSRR, pins);
 8057e16:	6193      	str	r3, [r2, #24]
	return 0;
 8057e18:	e7f1      	b.n	8057dfe <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8057e1a:	2430      	movs	r4, #48	; 0x30
 8057e1c:	e7ef      	b.n	8057dfe <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8057e1e:	f44f 7400 	mov.w	r4, #512	; 0x200
 8057e22:	e7ec      	b.n	8057dfe <gpio_stm32_config+0x50>
				return -ENOTSUP;
 8057e24:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return err;
 8057e28:	e7f0      	b.n	8057e0c <gpio_stm32_config+0x5e>

08057e2a <gpio_stm32_init>:
 */
static int gpio_stm32_init(const struct device *dev)
{
	struct gpio_stm32_data *data = dev->data;

	data->dev = dev;
 8057e2a:	6902      	ldr	r2, [r0, #16]
#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_enable(dev);

	return 0;
#else
	return gpio_stm32_clock_request(dev, true);
 8057e2c:	2101      	movs	r1, #1
	data->dev = dev;
 8057e2e:	6050      	str	r0, [r2, #4]
	return gpio_stm32_clock_request(dev, true);
 8057e30:	f7f3 b968 	b.w	804b104 <gpio_stm32_clock_request>

08057e34 <i2c_transfer>:

extern int z_impl_i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr);

__pinned_func
static inline int i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr)
{
 8057e34:	b410      	push	{r4}
	return api->transfer(dev, msgs, num_msgs, addr);
 8057e36:	6884      	ldr	r4, [r0, #8]
 8057e38:	6864      	ldr	r4, [r4, #4]
 8057e3a:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
}
 8057e3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8057e40:	4760      	bx	ip

08057e42 <stm32_i2c_enable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 8057e42:	68c3      	ldr	r3, [r0, #12]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 8057e44:	681a      	ldr	r2, [r3, #0]
 8057e46:	f042 0220 	orr.w	r2, r2, #32
 8057e4a:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 8057e4c:	681a      	ldr	r2, [r3, #0]
 8057e4e:	f042 0210 	orr.w	r2, r2, #16
 8057e52:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_TCIE);
 8057e54:	681a      	ldr	r2, [r3, #0]
 8057e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8057e5a:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 8057e5c:	681a      	ldr	r2, [r3, #0]
 8057e5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8057e62:	601a      	str	r2, [r3, #0]
}
 8057e64:	4770      	bx	lr

08057e66 <stm32_i2c_disable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 8057e66:	68c3      	ldr	r3, [r0, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 8057e68:	681a      	ldr	r2, [r3, #0]
 8057e6a:	f022 0202 	bic.w	r2, r2, #2
 8057e6e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8057e70:	681a      	ldr	r2, [r3, #0]
 8057e72:	f022 0204 	bic.w	r2, r2, #4
 8057e76:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 8057e78:	681a      	ldr	r2, [r3, #0]
 8057e7a:	f022 0220 	bic.w	r2, r2, #32
 8057e7e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 8057e80:	681a      	ldr	r2, [r3, #0]
 8057e82:	f022 0210 	bic.w	r2, r2, #16
 8057e86:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_TCIE);
 8057e88:	681a      	ldr	r2, [r3, #0]
 8057e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8057e8e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 8057e90:	681a      	ldr	r2, [r3, #0]
 8057e92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8057e96:	601a      	str	r2, [r3, #0]
}
 8057e98:	4770      	bx	lr

08057e9a <stm32_i2c_master_mode_end>:
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8057e9a:	6843      	ldr	r3, [r0, #4]
	I2C_TypeDef *i2c = cfg->i2c;
 8057e9c:	68d9      	ldr	r1, [r3, #12]
{
 8057e9e:	b510      	push	{r4, lr}
	struct i2c_stm32_data *data = DEV_DATA(dev);
 8057ea0:	6904      	ldr	r4, [r0, #16]
	stm32_i2c_disable_transfer_interrupts(dev);
 8057ea2:	4618      	mov	r0, r3
 8057ea4:	f7ff ffdf 	bl	8057e66 <stm32_i2c_disable_transfer_interrupts.isra.0>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8057ea8:	680b      	ldr	r3, [r1, #0]
 8057eaa:	f023 0301 	bic.w	r3, r3, #1
 8057eae:	600b      	str	r3, [r1, #0]
 8057eb0:	4620      	mov	r0, r4
}
 8057eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8057eb6:	f7f9 be15 	b.w	8051ae4 <z_impl_k_sem_give>

08057eba <stm32_i2c_event_isr>:
	struct i2c_stm32_data *data = DEV_DATA(dev);
 8057eba:	6901      	ldr	r1, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8057ebc:	6843      	ldr	r3, [r0, #4]
	if (data->current.len) {
 8057ebe:	6c8a      	ldr	r2, [r1, #72]	; 0x48
	I2C_TypeDef *i2c = cfg->i2c;
 8057ec0:	68db      	ldr	r3, [r3, #12]
{
 8057ec2:	b510      	push	{r4, lr}
	if (data->current.len) {
 8057ec4:	b182      	cbz	r2, 8057ee8 <stm32_i2c_event_isr+0x2e>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8057ec6:	699c      	ldr	r4, [r3, #24]
			LL_I2C_TransmitData8(i2c, *data->current.buf);
 8057ec8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8057eca:	07a4      	lsls	r4, r4, #30
 8057ecc:	d501      	bpl.n	8057ed2 <stm32_i2c_event_isr+0x18>
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  WRITE_REG(I2Cx->TXDR, Data);
 8057ece:	7814      	ldrb	r4, [r2, #0]
 8057ed0:	629c      	str	r4, [r3, #40]	; 0x28
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8057ed2:	699c      	ldr	r4, [r3, #24]
 8057ed4:	0764      	lsls	r4, r4, #29
 8057ed6:	d501      	bpl.n	8057edc <stm32_i2c_event_isr+0x22>
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8057ed8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8057eda:	7014      	strb	r4, [r2, #0]
		data->current.buf++;
 8057edc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8057ede:	3201      	adds	r2, #1
 8057ee0:	64ca      	str	r2, [r1, #76]	; 0x4c
		data->current.len--;
 8057ee2:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8057ee4:	3a01      	subs	r2, #1
 8057ee6:	648a      	str	r2, [r1, #72]	; 0x48
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 8057ee8:	699a      	ldr	r2, [r3, #24]
 8057eea:	06d2      	lsls	r2, r2, #27
 8057eec:	d414      	bmi.n	8057f18 <stm32_i2c_event_isr+0x5e>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8057eee:	699a      	ldr	r2, [r3, #24]
 8057ef0:	0694      	lsls	r4, r2, #26
 8057ef2:	d41c      	bmi.n	8057f2e <stm32_i2c_event_isr+0x74>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 8057ef4:	699a      	ldr	r2, [r3, #24]
 8057ef6:	0652      	lsls	r2, r2, #25
 8057ef8:	d402      	bmi.n	8057f00 <stm32_i2c_event_isr+0x46>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TCR) == (I2C_ISR_TCR)) ? 1UL : 0UL);
 8057efa:	699a      	ldr	r2, [r3, #24]
 8057efc:	0614      	lsls	r4, r2, #24
 8057efe:	d515      	bpl.n	8057f2c <stm32_i2c_event_isr+0x72>
		if (data->current.msg->flags & I2C_MSG_STOP) {
 8057f00:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8057f02:	7a12      	ldrb	r2, [r2, #8]
 8057f04:	0792      	lsls	r2, r2, #30
 8057f06:	d40d      	bmi.n	8057f24 <stm32_i2c_event_isr+0x6a>
			stm32_i2c_disable_transfer_interrupts(dev);
 8057f08:	6840      	ldr	r0, [r0, #4]
 8057f0a:	f7ff ffac 	bl	8057e66 <stm32_i2c_disable_transfer_interrupts.isra.0>
 8057f0e:	4608      	mov	r0, r1
}
 8057f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8057f14:	f7f9 bde6 	b.w	8051ae4 <z_impl_k_sem_give>
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 8057f18:	69da      	ldr	r2, [r3, #28]
 8057f1a:	f042 0210 	orr.w	r2, r2, #16
 8057f1e:	61da      	str	r2, [r3, #28]
		data->current.is_nack = 1U;
 8057f20:	2201      	movs	r2, #1
 8057f22:	63ca      	str	r2, [r1, #60]	; 0x3c
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 8057f24:	685a      	ldr	r2, [r3, #4]
 8057f26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8057f2a:	605a      	str	r2, [r3, #4]
}
 8057f2c:	bd10      	pop	{r4, pc}
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8057f2e:	69da      	ldr	r2, [r3, #28]
 8057f30:	f042 0220 	orr.w	r2, r2, #32
 8057f34:	61da      	str	r2, [r3, #28]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 8057f36:	685a      	ldr	r2, [r3, #4]
 8057f38:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8057f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8057f40:	605a      	str	r2, [r3, #4]
	stm32_i2c_master_mode_end(dev);
 8057f42:	f7ff bfaa 	b.w	8057e9a <stm32_i2c_master_mode_end>

08057f46 <stm32_i2c_error_isr>:
	I2C_TypeDef *i2c = cfg->i2c;
 8057f46:	6843      	ldr	r3, [r0, #4]
	struct i2c_stm32_data *data = DEV_DATA(dev);
 8057f48:	6901      	ldr	r1, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8057f4a:	68db      	ldr	r3, [r3, #12]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_ARLO) == (I2C_ISR_ARLO)) ? 1UL : 0UL);
 8057f4c:	699a      	ldr	r2, [r3, #24]
 8057f4e:	0592      	lsls	r2, r2, #22
 8057f50:	d507      	bpl.n	8057f62 <stm32_i2c_error_isr+0x1c>
  SET_BIT(I2Cx->ICR, I2C_ICR_ARLOCF);
 8057f52:	69da      	ldr	r2, [r3, #28]
 8057f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8057f58:	61da      	str	r2, [r3, #28]
		data->current.is_arlo = 1U;
 8057f5a:	2301      	movs	r3, #1
 8057f5c:	638b      	str	r3, [r1, #56]	; 0x38
	stm32_i2c_master_mode_end(dev);
 8057f5e:	f7ff bf9c 	b.w	8057e9a <stm32_i2c_master_mode_end>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BERR) == (I2C_ISR_BERR)) ? 1UL : 0UL);
 8057f62:	699a      	ldr	r2, [r3, #24]
 8057f64:	05d2      	lsls	r2, r2, #23
 8057f66:	d506      	bpl.n	8057f76 <stm32_i2c_error_isr+0x30>
  SET_BIT(I2Cx->ICR, I2C_ICR_BERRCF);
 8057f68:	69da      	ldr	r2, [r3, #28]
 8057f6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8057f6e:	61da      	str	r2, [r3, #28]
		data->current.is_err = 1U;
 8057f70:	2301      	movs	r3, #1
 8057f72:	640b      	str	r3, [r1, #64]	; 0x40
		goto end;
 8057f74:	e7f3      	b.n	8057f5e <stm32_i2c_error_isr+0x18>
}
 8057f76:	4770      	bx	lr

08057f78 <stm32_i2c_msg_write>:
{
 8057f78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	I2C_TypeDef *i2c = cfg->i2c;
 8057f7c:	6847      	ldr	r7, [r0, #4]
	data->current.is_nack = 0U;
 8057f7e:	f04f 0c00 	mov.w	ip, #0
	struct i2c_stm32_data *data = DEV_DATA(dev);
 8057f82:	6904      	ldr	r4, [r0, #16]
{
 8057f84:	4605      	mov	r5, r0
	I2C_TypeDef *i2c = cfg->i2c;
 8057f86:	f8d7 800c 	ldr.w	r8, [r7, #12]
	data->current.len = msg->len;
 8057f8a:	684f      	ldr	r7, [r1, #4]
 8057f8c:	64a7      	str	r7, [r4, #72]	; 0x48
	data->current.buf = msg->buf;
 8057f8e:	680f      	ldr	r7, [r1, #0]
	data->current.msg = msg;
 8057f90:	6461      	str	r1, [r4, #68]	; 0x44
	data->current.buf = msg->buf;
 8057f92:	64e7      	str	r7, [r4, #76]	; 0x4c
	data->current.is_write = 1U;
 8057f94:	2701      	movs	r7, #1
	data->current.is_err = 0U;
 8057f96:	e9c4 cc0f 	strd	ip, ip, [r4, #60]	; 0x3c
	data->current.is_write = 1U;
 8057f9a:	6367      	str	r7, [r4, #52]	; 0x34
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_WRITE);
 8057f9c:	f8cd c000 	str.w	ip, [sp]
 8057fa0:	f7f3 face 	bl	804b540 <msg_init>
	stm32_i2c_enable_transfer_interrupts(dev);
 8057fa4:	6868      	ldr	r0, [r5, #4]
 8057fa6:	f7ff ff4c 	bl	8057e42 <stm32_i2c_enable_transfer_interrupts.isra.0>
  SET_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 8057faa:	f8d8 3000 	ldr.w	r3, [r8]
 8057fae:	f043 0302 	orr.w	r3, r3, #2
 8057fb2:	f8c8 3000 	str.w	r3, [r8]
	return z_impl_k_sem_take(sem, timeout);
 8057fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8057fba:	2300      	movs	r3, #0
 8057fbc:	4620      	mov	r0, r4
 8057fbe:	f7f9 fdb7 	bl	8051b30 <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 8057fc2:	b150      	cbz	r0, 8057fda <stm32_i2c_msg_write+0x62>
		stm32_i2c_master_mode_end(dev);
 8057fc4:	4628      	mov	r0, r5
 8057fc6:	f7ff ff68 	bl	8057e9a <stm32_i2c_master_mode_end>
 8057fca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8057fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8057fd2:	4620      	mov	r0, r4
 8057fd4:	f7f9 fdac 	bl	8051b30 <z_impl_k_sem_take>
		is_timeout = true;
 8057fd8:	4638      	mov	r0, r7
	    data->current.is_arlo || is_timeout) {
 8057fda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	if (data->current.is_nack || data->current.is_err ||
 8057fdc:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8057fe0:	ea52 0503 	orrs.w	r5, r2, r3
 8057fe4:	d104      	bne.n	8057ff0 <stm32_i2c_msg_write+0x78>
 8057fe6:	b921      	cbnz	r1, 8057ff2 <stm32_i2c_msg_write+0x7a>
	    data->current.is_arlo || is_timeout) {
 8057fe8:	b940      	cbnz	r0, 8057ffc <stm32_i2c_msg_write+0x84>
}
 8057fea:	b002      	add	sp, #8
 8057fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data->current.is_arlo) {
 8057ff0:	b109      	cbz	r1, 8057ff6 <stm32_i2c_msg_write+0x7e>
		data->current.is_arlo = 0U;
 8057ff2:	2100      	movs	r1, #0
 8057ff4:	63a1      	str	r1, [r4, #56]	; 0x38
	if (data->current.is_nack) {
 8057ff6:	b10a      	cbz	r2, 8057ffc <stm32_i2c_msg_write+0x84>
		data->current.is_nack = 0U;
 8057ff8:	2200      	movs	r2, #0
 8057ffa:	63e2      	str	r2, [r4, #60]	; 0x3c
	if (data->current.is_err) {
 8057ffc:	b10b      	cbz	r3, 8058002 <stm32_i2c_msg_write+0x8a>
		data->current.is_err = 0U;
 8057ffe:	2300      	movs	r3, #0
 8058000:	6423      	str	r3, [r4, #64]	; 0x40
	return -EIO;
 8058002:	f06f 0004 	mvn.w	r0, #4
 8058006:	e7f0      	b.n	8057fea <stm32_i2c_msg_write+0x72>

08058008 <stm32_i2c_msg_read>:
{
 8058008:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	I2C_TypeDef *i2c = cfg->i2c;
 805800c:	6847      	ldr	r7, [r0, #4]
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_READ);
 805800e:	f44f 6680 	mov.w	r6, #1024	; 0x400
	struct i2c_stm32_data *data = DEV_DATA(dev);
 8058012:	6904      	ldr	r4, [r0, #16]
{
 8058014:	4605      	mov	r5, r0
	I2C_TypeDef *i2c = cfg->i2c;
 8058016:	f8d7 800c 	ldr.w	r8, [r7, #12]
	data->current.len = msg->len;
 805801a:	684f      	ldr	r7, [r1, #4]
 805801c:	64a7      	str	r7, [r4, #72]	; 0x48
	data->current.buf = msg->buf;
 805801e:	680f      	ldr	r7, [r1, #0]
	data->current.msg = msg;
 8058020:	6461      	str	r1, [r4, #68]	; 0x44
	data->current.buf = msg->buf;
 8058022:	64e7      	str	r7, [r4, #76]	; 0x4c
	data->current.is_write = 0U;
 8058024:	2700      	movs	r7, #0
	data->current.is_arlo = 0U;
 8058026:	e9c4 770d 	strd	r7, r7, [r4, #52]	; 0x34
	data->current.is_nack = 0U;
 805802a:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_READ);
 805802e:	9600      	str	r6, [sp, #0]
 8058030:	f7f3 fa86 	bl	804b540 <msg_init>
	stm32_i2c_enable_transfer_interrupts(dev);
 8058034:	6868      	ldr	r0, [r5, #4]
 8058036:	f7ff ff04 	bl	8057e42 <stm32_i2c_enable_transfer_interrupts.isra.0>
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 805803a:	f8d8 3000 	ldr.w	r3, [r8]
 805803e:	f043 0304 	orr.w	r3, r3, #4
 8058042:	f8c8 3000 	str.w	r3, [r8]
 8058046:	f241 3288 	movw	r2, #5000	; 0x1388
 805804a:	2300      	movs	r3, #0
 805804c:	4620      	mov	r0, r4
 805804e:	f7f9 fd6f 	bl	8051b30 <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 8058052:	b150      	cbz	r0, 805806a <stm32_i2c_msg_read+0x62>
		stm32_i2c_master_mode_end(dev);
 8058054:	4628      	mov	r0, r5
 8058056:	f7ff ff20 	bl	8057e9a <stm32_i2c_master_mode_end>
 805805a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 805805e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8058062:	4620      	mov	r0, r4
 8058064:	f7f9 fd64 	bl	8051b30 <z_impl_k_sem_take>
		is_timeout = true;
 8058068:	2001      	movs	r0, #1
	    data->current.is_arlo || is_timeout) {
 805806a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	if (data->current.is_nack || data->current.is_err ||
 805806c:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8058070:	ea52 0503 	orrs.w	r5, r2, r3
 8058074:	d104      	bne.n	8058080 <stm32_i2c_msg_read+0x78>
 8058076:	b921      	cbnz	r1, 8058082 <stm32_i2c_msg_read+0x7a>
	    data->current.is_arlo || is_timeout) {
 8058078:	b940      	cbnz	r0, 805808c <stm32_i2c_msg_read+0x84>
}
 805807a:	b002      	add	sp, #8
 805807c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data->current.is_arlo) {
 8058080:	b109      	cbz	r1, 8058086 <stm32_i2c_msg_read+0x7e>
		data->current.is_arlo = 0U;
 8058082:	2100      	movs	r1, #0
 8058084:	63a1      	str	r1, [r4, #56]	; 0x38
	if (data->current.is_nack) {
 8058086:	b10a      	cbz	r2, 805808c <stm32_i2c_msg_read+0x84>
		data->current.is_nack = 0U;
 8058088:	2200      	movs	r2, #0
 805808a:	63e2      	str	r2, [r4, #60]	; 0x3c
	if (data->current.is_err) {
 805808c:	b10b      	cbz	r3, 8058092 <stm32_i2c_msg_read+0x8a>
		data->current.is_err = 0U;
 805808e:	2300      	movs	r3, #0
 8058090:	6423      	str	r3, [r4, #64]	; 0x40
	return -EIO;
 8058092:	f06f 0004 	mvn.w	r0, #4
 8058096:	e7f0      	b.n	805807a <stm32_i2c_msg_read+0x72>

08058098 <i2c_stm32_irq_config_func_i2c2>:
#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c1), okay)
STM32_I2C_INIT(i2c1);
#endif

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c2), okay)
STM32_I2C_INIT(i2c2);
 8058098:	2200      	movs	r2, #0
 805809a:	2021      	movs	r0, #33	; 0x21
 805809c:	4611      	mov	r1, r2
 805809e:	b508      	push	{r3, lr}
 80580a0:	f7ef fff2 	bl	8048088 <z_arm_irq_priority_set>
 80580a4:	2021      	movs	r0, #33	; 0x21
 80580a6:	f7ef ffdf 	bl	8048068 <arch_irq_enable>
 80580aa:	2200      	movs	r2, #0
 80580ac:	2022      	movs	r0, #34	; 0x22
 80580ae:	4611      	mov	r1, r2
 80580b0:	f7ef ffea 	bl	8048088 <z_arm_irq_priority_set>
 80580b4:	2022      	movs	r0, #34	; 0x22
 80580b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80580ba:	f7ef bfd5 	b.w	8048068 <arch_irq_enable>

080580be <i2c_stm32_irq_config_func_i2c4>:
#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c3), okay)
STM32_I2C_INIT(i2c3);
#endif

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c4), okay)
STM32_I2C_INIT(i2c4);
 80580be:	2200      	movs	r2, #0
 80580c0:	205f      	movs	r0, #95	; 0x5f
 80580c2:	4611      	mov	r1, r2
 80580c4:	b508      	push	{r3, lr}
 80580c6:	f7ef ffdf 	bl	8048088 <z_arm_irq_priority_set>
 80580ca:	205f      	movs	r0, #95	; 0x5f
 80580cc:	f7ef ffcc 	bl	8048068 <arch_irq_enable>
 80580d0:	2200      	movs	r2, #0
 80580d2:	2060      	movs	r0, #96	; 0x60
 80580d4:	4611      	mov	r1, r2
 80580d6:	f7ef ffd7 	bl	8048088 <z_arm_irq_priority_set>
 80580da:	2060      	movs	r0, #96	; 0x60
 80580dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80580e0:	f7ef bfc2 	b.w	8048068 <arch_irq_enable>

080580e4 <i2c_stm32_transfer>:
{
 80580e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80580e8:	4699      	mov	r9, r3
	current->flags |= I2C_MSG_RESTART;
 80580ea:	7a0b      	ldrb	r3, [r1, #8]
{
 80580ec:	4615      	mov	r5, r2
	struct i2c_stm32_data *data = DEV_DATA(dev);
 80580ee:	6907      	ldr	r7, [r0, #16]
	current->flags |= I2C_MSG_RESTART;
 80580f0:	f043 0304 	orr.w	r3, r3, #4
{
 80580f4:	4606      	mov	r6, r0
 80580f6:	460c      	mov	r4, r1
	for (uint8_t i = 1; i <= num_msgs; i++) {
 80580f8:	460a      	mov	r2, r1
	current->flags |= I2C_MSG_RESTART;
 80580fa:	720b      	strb	r3, [r1, #8]
	for (uint8_t i = 1; i <= num_msgs; i++) {
 80580fc:	2301      	movs	r3, #1
 80580fe:	42ab      	cmp	r3, r5
 8058100:	d90b      	bls.n	805811a <i2c_stm32_transfer+0x36>
	k_sem_take(&data->bus_mutex, K_FOREVER);
 8058102:	f107 0818 	add.w	r8, r7, #24
 8058106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 805810a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 805810e:	4640      	mov	r0, r8
 8058110:	3414      	adds	r4, #20
 8058112:	f7f9 fd0d 	bl	8051b30 <z_impl_k_sem_take>
	while (num_msgs > 0) {
 8058116:	2300      	movs	r3, #0
 8058118:	e05b      	b.n	80581d2 <i2c_stm32_transfer+0xee>
			if (OPERATION(current) != OPERATION(next)) {
 805811a:	7a11      	ldrb	r1, [r2, #8]
		if (i < num_msgs) {
 805811c:	d20c      	bcs.n	8058138 <i2c_stm32_transfer+0x54>
			if (OPERATION(current) != OPERATION(next)) {
 805811e:	7d10      	ldrb	r0, [r2, #20]
 8058120:	ea80 0c01 	eor.w	ip, r0, r1
 8058124:	f01c 0f01 	tst.w	ip, #1
 8058128:	d001      	beq.n	805812e <i2c_stm32_transfer+0x4a>
				if (!(next->flags & I2C_MSG_RESTART)) {
 805812a:	0740      	lsls	r0, r0, #29
 805812c:	d501      	bpl.n	8058132 <i2c_stm32_transfer+0x4e>
			if (current->flags & I2C_MSG_STOP) {
 805812e:	0789      	lsls	r1, r1, #30
 8058130:	d505      	bpl.n	805813e <i2c_stm32_transfer+0x5a>
 8058132:	f06f 0315 	mvn.w	r3, #21
 8058136:	e055      	b.n	80581e4 <i2c_stm32_transfer+0x100>
			current->flags |= I2C_MSG_STOP;
 8058138:	f041 0102 	orr.w	r1, r1, #2
 805813c:	7211      	strb	r1, [r2, #8]
	for (uint8_t i = 1; i <= num_msgs; i++) {
 805813e:	3301      	adds	r3, #1
		current++;
 8058140:	320c      	adds	r2, #12
	for (uint8_t i = 1; i <= num_msgs; i++) {
 8058142:	b2db      	uxtb	r3, r3
 8058144:	e7db      	b.n	80580fe <i2c_stm32_transfer+0x1a>
		if (num_msgs > 1) {
 8058146:	2d01      	cmp	r5, #1
 8058148:	bf14      	ite	ne
 805814a:	46a3      	movne	fp, r4
 805814c:	f04f 0b00 	moveq.w	fp, #0
			uint8_t tmp_msg_flags = current->flags & ~I2C_MSG_RESTART;
 8058150:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
			uint32_t temp_len = current->len;
 8058154:	f854 7c10 	ldr.w	r7, [r4, #-16]
			uint8_t tmp_msg_flags = current->flags & ~I2C_MSG_RESTART;
 8058158:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 805815c:	9200      	str	r2, [sp, #0]
			uint8_t tmp_next_msg_flags = next_msg_flags ?
 805815e:	f1bb 0f00 	cmp.w	fp, #0
 8058162:	d043      	beq.n	80581ec <i2c_stm32_transfer+0x108>
 8058164:	f89b a000 	ldrb.w	sl, [fp]
			if (current->len > 255) {
 8058168:	2fff      	cmp	r7, #255	; 0xff
 805816a:	d90d      	bls.n	8058188 <i2c_stm32_transfer+0xa4>
				current->len = 255U;
 805816c:	22ff      	movs	r2, #255	; 0xff
				current->flags &= ~I2C_MSG_STOP;
 805816e:	f023 0002 	bic.w	r0, r3, #2
				current->len = 255U;
 8058172:	f844 2c10 	str.w	r2, [r4, #-16]
				current->flags &= ~I2C_MSG_STOP;
 8058176:	f804 0c0c 	strb.w	r0, [r4, #-12]
				if (next_msg_flags) {
 805817a:	f1bb 0f00 	cmp.w	fp, #0
 805817e:	d003      	beq.n	8058188 <i2c_stm32_transfer+0xa4>
					*next_msg_flags = current->flags &
 8058180:	f023 0306 	bic.w	r3, r3, #6
 8058184:	f88b 3000 	strb.w	r3, [fp]
			if ((current->flags & I2C_MSG_RW_MASK) ==
 8058188:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
				ret = stm32_i2c_msg_write(dev, current,
 805818c:	465a      	mov	r2, fp
 805818e:	4630      	mov	r0, r6
 8058190:	9101      	str	r1, [sp, #4]
			if ((current->flags & I2C_MSG_RW_MASK) ==
 8058192:	f013 0f01 	tst.w	r3, #1
				ret = stm32_i2c_msg_write(dev, current,
 8058196:	464b      	mov	r3, r9
			if ((current->flags & I2C_MSG_RW_MASK) ==
 8058198:	d12a      	bne.n	80581f0 <i2c_stm32_transfer+0x10c>
				ret = stm32_i2c_msg_write(dev, current,
 805819a:	f7ff feed 	bl	8057f78 <stm32_i2c_msg_write>
			if (ret < 0) {
 805819e:	2800      	cmp	r0, #0
				ret = stm32_i2c_msg_read(dev, current,
 80581a0:	4603      	mov	r3, r0
 80581a2:	9901      	ldr	r1, [sp, #4]
			if (ret < 0) {
 80581a4:	db19      	blt.n	80581da <i2c_stm32_transfer+0xf6>
			if (next_msg_flags) {
 80581a6:	f1bb 0f00 	cmp.w	fp, #0
 80581aa:	d001      	beq.n	80581b0 <i2c_stm32_transfer+0xcc>
				*next_msg_flags = tmp_next_msg_flags;
 80581ac:	f88b a000 	strb.w	sl, [fp]
			current->flags = tmp_msg_flags;
 80581b0:	9a00      	ldr	r2, [sp, #0]
			current->buf += current->len;
 80581b2:	e954 0c05 	ldrd	r0, ip, [r4, #-20]
			current->flags = tmp_msg_flags;
 80581b6:	f804 2c0c 	strb.w	r2, [r4, #-12]
			current->buf += current->len;
 80581ba:	4460      	add	r0, ip
			current->len = temp_len - current->len;
 80581bc:	eba7 070c 	sub.w	r7, r7, ip
			current->buf += current->len;
 80581c0:	f844 0c14 	str.w	r0, [r4, #-20]
			current->len = temp_len - current->len;
 80581c4:	f844 7c10 	str.w	r7, [r4, #-16]
		} while (current->len > 0);
 80581c8:	2f00      	cmp	r7, #0
 80581ca:	d1c1      	bne.n	8058150 <i2c_stm32_transfer+0x6c>
		num_msgs--;
 80581cc:	3d01      	subs	r5, #1
 80581ce:	340c      	adds	r4, #12
 80581d0:	b2ed      	uxtb	r5, r5
 80581d2:	f1a4 0114 	sub.w	r1, r4, #20
	while (num_msgs > 0) {
 80581d6:	2d00      	cmp	r5, #0
 80581d8:	d1b5      	bne.n	8058146 <i2c_stm32_transfer+0x62>
 80581da:	9300      	str	r3, [sp, #0]
	z_impl_k_sem_give(sem);
 80581dc:	4640      	mov	r0, r8
 80581de:	f7f9 fc81 	bl	8051ae4 <z_impl_k_sem_give>
}
 80581e2:	9b00      	ldr	r3, [sp, #0]
}
 80581e4:	4618      	mov	r0, r3
 80581e6:	b003      	add	sp, #12
 80581e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t tmp_next_msg_flags = next_msg_flags ?
 80581ec:	46da      	mov	sl, fp
 80581ee:	e7bb      	b.n	8058168 <i2c_stm32_transfer+0x84>
				ret = stm32_i2c_msg_read(dev, current,
 80581f0:	f7ff ff0a 	bl	8058008 <stm32_i2c_msg_read>
 80581f4:	e7d3      	b.n	805819e <i2c_stm32_transfer+0xba>

080581f6 <ws2812_strip_update_rgb>:
{
 80581f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct spi_buf_set tx = {
 80581fa:	2301      	movs	r3, #1
	return dev->config;
 80581fc:	6844      	ldr	r4, [r0, #4]
{
 80581fe:	b085      	sub	sp, #20
		.buf = cfg->px_buf,
 8058200:	6926      	ldr	r6, [r4, #16]
	const struct spi_buf_set tx = {
 8058202:	9303      	str	r3, [sp, #12]
	overflow = size_mul_overflow(num_pixels, cfg->num_colors * 8, &nbytes);
 8058204:	7ea3      	ldrb	r3, [r4, #26]
		.len = cfg->px_buf_size,
 8058206:	6965      	ldr	r5, [r4, #20]
	overflow = size_mul_overflow(num_pixels, cfg->num_colors * 8, &nbytes);
 8058208:	00db      	lsls	r3, r3, #3
	const uint8_t one = cfg->one_frame, zero = cfg->zero_frame;
 805820a:	7e27      	ldrb	r7, [r4, #24]
 805820c:	f894 c019 	ldrb.w	ip, [r4, #25]
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
 8058210:	fba2 0303 	umull	r0, r3, r2, r3
	struct spi_buf buf = {
 8058214:	9600      	str	r6, [sp, #0]
 8058216:	9501      	str	r5, [sp, #4]
	const struct spi_buf_set tx = {
 8058218:	f8cd d008 	str.w	sp, [sp, #8]
 805821c:	2b00      	cmp	r3, #0
 805821e:	d13c      	bne.n	805829a <ws2812_strip_update_rgb+0xa4>
	return !overflow && (nbytes <= cfg->px_buf_size);
 8058220:	4285      	cmp	r5, r0
 8058222:	d33a      	bcc.n	805829a <ws2812_strip_update_rgb+0xa4>
	for (i = 0; i < num_pixels; i++) {
 8058224:	4293      	cmp	r3, r2
 8058226:	d135      	bne.n	8058294 <ws2812_strip_update_rgb+0x9e>
 * @return a value from spi_write().
 */
static inline int spi_write_dt(const struct spi_dt_spec *spec,
			       const struct spi_buf_set *tx_bufs)
{
	return spi_write(spec->bus, &spec->config, tx_bufs);
 8058228:	4621      	mov	r1, r4
 805822a:	f851 0b04 	ldr.w	r0, [r1], #4
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 805822e:	6883      	ldr	r3, [r0, #8]
 8058230:	aa02      	add	r2, sp, #8
 8058232:	681d      	ldr	r5, [r3, #0]
 8058234:	2300      	movs	r3, #0
 8058236:	47a8      	blx	r5
 8058238:	4605      	mov	r5, r0
	k_usleep(delay);
 805823a:	8c20      	ldrh	r0, [r4, #32]
	return z_impl_k_usleep(us);
 805823c:	f002 fa1b 	bl	805a676 <z_impl_k_usleep>
}
 8058240:	4628      	mov	r0, r5
 8058242:	b005      	add	sp, #20
 8058244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			switch (cfg->color_mapping[j]) {
 8058248:	69e0      	ldr	r0, [r4, #28]
 805824a:	5d40      	ldrb	r0, [r0, r5]
 805824c:	2803      	cmp	r0, #3
 805824e:	d827      	bhi.n	80582a0 <ws2812_strip_update_rgb+0xaa>
 8058250:	e8df f000 	tbb	[pc, r0]
 8058254:	1e1c0203 	.word	0x1e1c0203
				pixel = pixels[i].r;
 8058258:	7848      	ldrb	r0, [r1, #1]
	for (i = 0; i < 8; i++) {
 805825a:	f106 3eff 	add.w	lr, r6, #4294967295	; 0xffffffff
{
 805825e:	2507      	movs	r5, #7
		buf[i] = color & BIT(7 - i) ? one_frame : zero_frame;
 8058260:	fa20 f905 	lsr.w	r9, r0, r5
 8058264:	f019 0f01 	tst.w	r9, #1
 8058268:	bf14      	ite	ne
 805826a:	46b9      	movne	r9, r7
 805826c:	46e1      	moveq	r9, ip
	for (i = 0; i < 8; i++) {
 805826e:	3d01      	subs	r5, #1
		buf[i] = color & BIT(7 - i) ? one_frame : zero_frame;
 8058270:	f80e 9f01 	strb.w	r9, [lr, #1]!
	for (i = 0; i < 8; i++) {
 8058274:	d2f4      	bcs.n	8058260 <ws2812_strip_update_rgb+0x6a>
			px_buf += 8;
 8058276:	3608      	adds	r6, #8
		for (j = 0; j < cfg->num_colors; j++) {
 8058278:	f108 0801 	add.w	r8, r8, #1
 805827c:	7ea0      	ldrb	r0, [r4, #26]
 805827e:	fa5f f588 	uxtb.w	r5, r8
 8058282:	42a8      	cmp	r0, r5
 8058284:	d8e0      	bhi.n	8058248 <ws2812_strip_update_rgb+0x52>
	for (i = 0; i < num_pixels; i++) {
 8058286:	3301      	adds	r3, #1
 8058288:	3104      	adds	r1, #4
 805828a:	e7cb      	b.n	8058224 <ws2812_strip_update_rgb+0x2e>
				pixel = pixels[i].g;
 805828c:	7888      	ldrb	r0, [r1, #2]
				break;
 805828e:	e7e4      	b.n	805825a <ws2812_strip_update_rgb+0x64>
				pixel = pixels[i].b;
 8058290:	78c8      	ldrb	r0, [r1, #3]
				break;
 8058292:	e7e2      	b.n	805825a <ws2812_strip_update_rgb+0x64>
 8058294:	f04f 0800 	mov.w	r8, #0
 8058298:	e7f0      	b.n	805827c <ws2812_strip_update_rgb+0x86>
		return -ENOMEM;
 805829a:	f06f 050b 	mvn.w	r5, #11
 805829e:	e7cf      	b.n	8058240 <ws2812_strip_update_rgb+0x4a>
			switch (cfg->color_mapping[j]) {
 80582a0:	f06f 0515 	mvn.w	r5, #21
 80582a4:	e7cc      	b.n	8058240 <ws2812_strip_update_rgb+0x4a>

080582a6 <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 80582a6:	6341      	str	r1, [r0, #52]	; 0x34
}
 80582a8:	4770      	bx	lr

080582aa <LL_TIM_OC_SetCompareCH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 80582aa:	6381      	str	r1, [r0, #56]	; 0x38
}
 80582ac:	4770      	bx	lr

080582ae <LL_TIM_OC_SetCompareCH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 80582ae:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 80582b0:	4770      	bx	lr

080582b2 <LL_TIM_OC_SetCompareCH4>:
  WRITE_REG(TIMx->CCR4, CompareValue);
 80582b2:	6401      	str	r1, [r0, #64]	; 0x40
}
 80582b4:	4770      	bx	lr

080582b6 <LL_TIM_OC_SetCompareCH5>:
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80582b6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80582b8:	6581      	str	r1, [r0, #88]	; 0x58
}
 80582ba:	4770      	bx	lr

080582bc <LL_TIM_OC_SetCompareCH6>:
  WRITE_REG(TIMx->CCR6, CompareValue);
 80582bc:	65c1      	str	r1, [r0, #92]	; 0x5c
}
 80582be:	4770      	bx	lr

080582c0 <pwm_stm32_get_cycles_per_sec>:
	*cycles = (uint64_t)(data->tim_clk / (cfg->prescaler + 1));
 80582c0:	6843      	ldr	r3, [r0, #4]
{
 80582c2:	b510      	push	{r4, lr}
	*cycles = (uint64_t)(data->tim_clk / (cfg->prescaler + 1));
 80582c4:	6859      	ldr	r1, [r3, #4]
 80582c6:	6904      	ldr	r4, [r0, #16]
 80582c8:	2000      	movs	r0, #0
 80582ca:	3101      	adds	r1, #1
 80582cc:	6823      	ldr	r3, [r4, #0]
 80582ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80582d2:	e9c2 3000 	strd	r3, r0, [r2]
}
 80582d6:	bd10      	pop	{r4, pc}

080582d8 <spi_context_get_next_buf>:
{
 80582d8:	b570      	push	{r4, r5, r6, lr}
	while (*count) {
 80582da:	680c      	ldr	r4, [r1, #0]
 80582dc:	b914      	cbnz	r4, 80582e4 <spi_context_get_next_buf+0xc>
	return NULL;
 80582de:	4620      	mov	r0, r4
	*buf_len = 0;
 80582e0:	6014      	str	r4, [r2, #0]
	return NULL;
 80582e2:	e007      	b.n	80582f4 <spi_context_get_next_buf+0x1c>
		if (((*current)->len / dfs) != 0) {
 80582e4:	6805      	ldr	r5, [r0, #0]
 80582e6:	686e      	ldr	r6, [r5, #4]
 80582e8:	429e      	cmp	r6, r3
 80582ea:	d304      	bcc.n	80582f6 <spi_context_get_next_buf+0x1e>
			*buf_len = (*current)->len / dfs;
 80582ec:	fbb6 f3f3 	udiv	r3, r6, r3
			return (*current)->buf;
 80582f0:	6828      	ldr	r0, [r5, #0]
			*buf_len = (*current)->len / dfs;
 80582f2:	6013      	str	r3, [r2, #0]
}
 80582f4:	bd70      	pop	{r4, r5, r6, pc}
		++(*current);
 80582f6:	3508      	adds	r5, #8
		--(*count);
 80582f8:	3c01      	subs	r4, #1
		++(*current);
 80582fa:	6005      	str	r5, [r0, #0]
		--(*count);
 80582fc:	600c      	str	r4, [r1, #0]
 80582fe:	e7ec      	b.n	80582da <spi_context_get_next_buf+0x2>

08058300 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8058300:	2301      	movs	r3, #1
 8058302:	fa03 f101 	lsl.w	r1, r3, r1
 8058306:	6903      	ldr	r3, [r0, #16]
 8058308:	681b      	ldr	r3, [r3, #0]
 805830a:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 805830c:	bf18      	it	ne
 805830e:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 8058312:	b112      	cbz	r2, 805831a <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
 8058314:	6883      	ldr	r3, [r0, #8]
 8058316:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8058318:	4718      	bx	r3
 805831a:	6883      	ldr	r3, [r0, #8]
 805831c:	691b      	ldr	r3, [r3, #16]
 805831e:	e7fb      	b.n	8058318 <gpio_pin_set.isra.0+0x18>

08058320 <_spi_context_cs_control>:
{
 8058320:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 8058322:	6805      	ldr	r5, [r0, #0]
{
 8058324:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 8058326:	b1fd      	cbz	r5, 8058368 <_spi_context_cs_control+0x48>
 8058328:	68ab      	ldr	r3, [r5, #8]
 805832a:	b1eb      	cbz	r3, 8058368 <_spi_context_cs_control+0x48>
 805832c:	6818      	ldr	r0, [r3, #0]
 805832e:	b1d8      	cbz	r0, 8058368 <_spi_context_cs_control+0x48>
		if (on) {
 8058330:	b151      	cbz	r1, 8058348 <_spi_context_cs_control+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8058332:	7a19      	ldrb	r1, [r3, #8]
 8058334:	2201      	movs	r2, #1
 8058336:	f7ff ffe3 	bl	8058300 <gpio_pin_set.isra.0>
			k_busy_wait(ctx->config->cs->delay);
 805833a:	6823      	ldr	r3, [r4, #0]
 805833c:	689b      	ldr	r3, [r3, #8]
 805833e:	6858      	ldr	r0, [r3, #4]
}
 8058340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
 8058344:	f7fa b996 	b.w	8052674 <z_impl_k_busy_wait>
			if (!force_off &&
 8058348:	b912      	cbnz	r2, 8058350 <_spi_context_cs_control+0x30>
 805834a:	88aa      	ldrh	r2, [r5, #4]
 805834c:	0492      	lsls	r2, r2, #18
 805834e:	d40b      	bmi.n	8058368 <_spi_context_cs_control+0x48>
			k_busy_wait(ctx->config->cs->delay);
 8058350:	6858      	ldr	r0, [r3, #4]
 8058352:	f7fa f98f 	bl	8052674 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8058356:	6823      	ldr	r3, [r4, #0]
 8058358:	2200      	movs	r2, #0
 805835a:	689b      	ldr	r3, [r3, #8]
 805835c:	7a19      	ldrb	r1, [r3, #8]
 805835e:	6818      	ldr	r0, [r3, #0]
}
 8058360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8058364:	f7ff bfcc 	b.w	8058300 <gpio_pin_set.isra.0>
}
 8058368:	bd38      	pop	{r3, r4, r5, pc}

0805836a <spi_context_unlock_unconditionally>:
{
 805836a:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
 805836c:	2201      	movs	r2, #1
 805836e:	2100      	movs	r1, #0
{
 8058370:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
 8058372:	f7ff ffd5 	bl	8058320 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
 8058376:	6923      	ldr	r3, [r4, #16]
 8058378:	b933      	cbnz	r3, 8058388 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
 805837a:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 805837c:	f104 0008 	add.w	r0, r4, #8
}
 8058380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8058384:	f7f9 bbae 	b.w	8051ae4 <z_impl_k_sem_give>
 8058388:	bd10      	pop	{r4, pc}

0805838a <spi_stm32_release>:
	spi_context_unlock_unconditionally(&data->ctx);
 805838a:	6900      	ldr	r0, [r0, #16]
{
 805838c:	b508      	push	{r3, lr}
	spi_context_unlock_unconditionally(&data->ctx);
 805838e:	f7ff ffec 	bl	805836a <spi_context_unlock_unconditionally>
}
 8058392:	2000      	movs	r0, #0
 8058394:	bd08      	pop	{r3, pc}

08058396 <can_work_handler>:
{
 8058396:	b570      	push	{r4, r5, r6, lr}
 8058398:	4604      	mov	r4, r0
		return &buffer->buf[buffer->tail];
 805839a:	f100 0514 	add.w	r5, r0, #20
	if (buffer->head == WORK_BUF_FULL) {
 805839e:	f64f 76ff 	movw	r6, #65535	; 0xffff
	if (buffer->head == buffer->tail) {
 80583a2:	f8b4 0056 	ldrh.w	r0, [r4, #86]	; 0x56
 80583a6:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
 80583aa:	4283      	cmp	r3, r0
 80583ac:	d002      	beq.n	80583b4 <can_work_handler+0x1e>
	while ((frame = can_work_buffer_get_next(&can_work->buf))) {
 80583ae:	eb15 1000 	adds.w	r0, r5, r0, lsl #4
 80583b2:	d100      	bne.n	80583b6 <can_work_handler+0x20>
}
 80583b4:	bd70      	pop	{r4, r5, r6, pc}
		can_work->cb(frame, can_work->cb_arg);
 80583b6:	e9d4 3116 	ldrd	r3, r1, [r4, #88]	; 0x58
 80583ba:	4798      	blx	r3
	uint16_t next_tail = WORK_BUF_MOD_SIZE(buffer->tail + 1);
 80583bc:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
	if (buffer->head == buffer->tail) {
 80583c0:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80583c4:	4293      	cmp	r3, r2
 80583c6:	d0ec      	beq.n	80583a2 <can_work_handler+0xc>
	if (buffer->head == WORK_BUF_FULL) {
 80583c8:	42b2      	cmp	r2, r6
		buffer->head = buffer->tail;
 80583ca:	bf08      	it	eq
 80583cc:	f8a4 3054 	strheq.w	r3, [r4, #84]	; 0x54
	uint16_t next_tail = WORK_BUF_MOD_SIZE(buffer->tail + 1);
 80583d0:	3301      	adds	r3, #1
 80583d2:	f003 0303 	and.w	r3, r3, #3
	buffer->tail = next_tail;
 80583d6:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 80583da:	e7e2      	b.n	80583a2 <can_work_handler+0xc>

080583dc <can_calc_prescaler>:
}
#endif

int can_calc_prescaler(const struct device *dev, struct can_timing *timing,
		       uint32_t bitrate)
{
 80583dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80583e0:	460e      	mov	r6, r1
 80583e2:	4614      	mov	r4, r2
	uint32_t ts = timing->prop_seg + timing->phase_seg1 + timing->phase_seg2 +
 80583e4:	884d      	ldrh	r5, [r1, #2]
 80583e6:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80583ea:	88cf      	ldrh	r7, [r1, #6]
	return api->get_core_clock(dev, rate);
 80583ec:	6883      	ldr	r3, [r0, #8]
 80583ee:	a901      	add	r1, sp, #4
 80583f0:	69db      	ldr	r3, [r3, #28]
 80583f2:	4798      	blx	r3
		   CAN_SYNC_SEG;
	uint32_t core_clock;
	int ret;

	ret = can_get_core_clock(dev, &core_clock);
	if (ret != 0) {
 80583f4:	b978      	cbnz	r0, 8058416 <can_calc_prescaler+0x3a>
	uint32_t ts = timing->prop_seg + timing->phase_seg1 + timing->phase_seg2 +
 80583f6:	eb05 0008 	add.w	r0, r5, r8
		return ret;
	}

	timing->prescaler = core_clock / (bitrate * ts);
 80583fa:	9b01      	ldr	r3, [sp, #4]
	uint32_t ts = timing->prop_seg + timing->phase_seg1 + timing->phase_seg2 +
 80583fc:	3001      	adds	r0, #1
 80583fe:	4438      	add	r0, r7
	timing->prescaler = core_clock / (bitrate * ts);
 8058400:	fb04 f200 	mul.w	r2, r4, r0
 8058404:	fbb3 f2f2 	udiv	r2, r3, r2
 8058408:	8132      	strh	r2, [r6, #8]

	return core_clock % (ts * timing->prescaler);
 805840a:	b292      	uxth	r2, r2
 805840c:	4350      	muls	r0, r2
 805840e:	fbb3 f2f0 	udiv	r2, r3, r0
 8058412:	fb00 3012 	mls	r0, r0, r2, r3
}
 8058416:	b002      	add	sp, #8
 8058418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0805841c <can_stm32_register_state_change_isr>:
	CAN_TypeDef *can = cfg->can;
 805841c:	6843      	ldr	r3, [r0, #4]
	data->state_change_isr = isr;
 805841e:	6902      	ldr	r2, [r0, #16]
	CAN_TypeDef *can = cfg->can;
 8058420:	681b      	ldr	r3, [r3, #0]
	data->state_change_isr = isr;
 8058422:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
		can->IER &= ~CAN_IER_EPVIE;
 8058426:	695a      	ldr	r2, [r3, #20]
	if (isr == NULL) {
 8058428:	b919      	cbnz	r1, 8058432 <can_stm32_register_state_change_isr+0x16>
		can->IER &= ~CAN_IER_EPVIE;
 805842a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
		can->IER |= CAN_IER_EPVIE;
 805842e:	615a      	str	r2, [r3, #20]
}
 8058430:	4770      	bx	lr
		can->IER |= CAN_IER_EPVIE;
 8058432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8058436:	e7fa      	b.n	805842e <can_stm32_register_state_change_isr+0x12>

08058438 <can_stm32_get_state>:
	CAN_TypeDef *can = cfg->can;
 8058438:	6843      	ldr	r3, [r0, #4]
 805843a:	681b      	ldr	r3, [r3, #0]
	if (err_cnt) {
 805843c:	b129      	cbz	r1, 805844a <can_stm32_get_state+0x12>
			((can->ESR & CAN_ESR_TEC) >> CAN_ESR_TEC_Pos);
 805843e:	699a      	ldr	r2, [r3, #24]
 8058440:	0c12      	lsrs	r2, r2, #16
		err_cnt->tx_err_cnt =
 8058442:	700a      	strb	r2, [r1, #0]
			((can->ESR & CAN_ESR_REC) >> CAN_ESR_REC_Pos);
 8058444:	699a      	ldr	r2, [r3, #24]
 8058446:	0e12      	lsrs	r2, r2, #24
		err_cnt->rx_err_cnt =
 8058448:	704a      	strb	r2, [r1, #1]
	if (can->ESR & CAN_ESR_BOFF) {
 805844a:	699a      	ldr	r2, [r3, #24]
 805844c:	0752      	lsls	r2, r2, #29
 805844e:	d403      	bmi.n	8058458 <can_stm32_get_state+0x20>
	if (can->ESR & CAN_ESR_EPVF) {
 8058450:	6998      	ldr	r0, [r3, #24]
		return CAN_BUS_OFF;
 8058452:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8058456:	4770      	bx	lr
 8058458:	2002      	movs	r0, #2
}
 805845a:	4770      	bx	lr

0805845c <can_stm32_set_filter_bank>:
{
 805845c:	b510      	push	{r4, lr}
 805845e:	9c02      	ldr	r4, [sp, #8]
 8058460:	2a03      	cmp	r2, #3
 8058462:	d814      	bhi.n	805848e <can_stm32_set_filter_bank+0x32>
 8058464:	e8df f002 	tbb	[pc, r2]
 8058468:	272a021f 	.word	0x272a021f
		switch (filter_nr & 0x03) {
 805846c:	f000 0003 	and.w	r0, r0, #3
 8058470:	2802      	cmp	r0, #2
 8058472:	d00d      	beq.n	8058490 <can_stm32_set_filter_bank+0x34>
 8058474:	2803      	cmp	r0, #3
 8058476:	d011      	beq.n	805849c <can_stm32_set_filter_bank+0x40>
			filter_reg->FR1 = (filter_reg->FR1 & 0xFFFF0000) | id;
 8058478:	680a      	ldr	r2, [r1, #0]
 805847a:	2801      	cmp	r0, #1
 805847c:	bf15      	itete	ne
 805847e:	0c12      	lsrne	r2, r2, #16
			filter_reg->FR1 = (filter_reg->FR1 & 0x0000FFFF)
 8058480:	b292      	uxtheq	r2, r2
			filter_reg->FR1 = (filter_reg->FR1 & 0xFFFF0000) | id;
 8058482:	0412      	lslne	r2, r2, #16
					  | (id << 16);
 8058484:	ea42 4303 	orreq.w	r3, r2, r3, lsl #16
			filter_reg->FR1 = (filter_reg->FR1 & 0xFFFF0000) | id;
 8058488:	bf18      	it	ne
 805848a:	4313      	orrne	r3, r2
			filter_reg->FR1 = (filter_reg->FR1 & 0x0000FFFF)
 805848c:	600b      	str	r3, [r1, #0]
}
 805848e:	bd10      	pop	{r4, pc}
			filter_reg->FR2 = (filter_reg->FR2 & 0xFFFF0000) | id;
 8058490:	684a      	ldr	r2, [r1, #4]
 8058492:	0c12      	lsrs	r2, r2, #16
 8058494:	0412      	lsls	r2, r2, #16
 8058496:	4313      	orrs	r3, r2
			filter_reg->FR2 = id;
 8058498:	604b      	str	r3, [r1, #4]
			break;
 805849a:	e7f8      	b.n	805848e <can_stm32_set_filter_bank+0x32>
			filter_reg->FR2 = (filter_reg->FR2 & 0x0000FFFF)
 805849c:	684a      	ldr	r2, [r1, #4]
 805849e:	b292      	uxth	r2, r2
					   | (id << 16);
 80584a0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80584a4:	e7f8      	b.n	8058498 <can_stm32_set_filter_bank+0x3c>
		switch (filter_nr & 0x02) {
 80584a6:	0424      	lsls	r4, r4, #16
 80584a8:	f010 0f02 	tst.w	r0, #2
			filter_reg->FR2 = id | (mask << 16);
 80584ac:	ea44 0403 	orr.w	r4, r4, r3
 80584b0:	d105      	bne.n	80584be <can_stm32_set_filter_bank+0x62>
			filter_reg->FR1 = id | (mask << 16);
 80584b2:	600c      	str	r4, [r1, #0]
			break;
 80584b4:	e7eb      	b.n	805848e <can_stm32_set_filter_bank+0x32>
		switch (filter_nr & 0x02) {
 80584b6:	0782      	lsls	r2, r0, #30
 80584b8:	d4ee      	bmi.n	8058498 <can_stm32_set_filter_bank+0x3c>
 80584ba:	e7e7      	b.n	805848c <can_stm32_set_filter_bank+0x30>
		filter_reg->FR1 = id;
 80584bc:	600b      	str	r3, [r1, #0]
		filter_reg->FR2 = mask;
 80584be:	604c      	str	r4, [r1, #4]
}
 80584c0:	e7e5      	b.n	805848e <can_stm32_set_filter_bank+0x32>

080584c2 <config_can_2_irq>:
		    &can_api_funcs);

static void config_can_2_irq(CAN_TypeDef *can)
{
	LOG_DBG("Enable CAN2 IRQ");
	IRQ_CONNECT(DT_IRQ_BY_NAME(DT_NODELABEL(can2), rx0, irq),
 80584c2:	2200      	movs	r2, #0
{
 80584c4:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_IRQ_BY_NAME(DT_NODELABEL(can2), rx0, irq),
 80584c6:	4611      	mov	r1, r2
{
 80584c8:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_IRQ_BY_NAME(DT_NODELABEL(can2), rx0, irq),
 80584ca:	2040      	movs	r0, #64	; 0x40
 80584cc:	f7ef fddc 	bl	8048088 <z_arm_irq_priority_set>
		    DT_IRQ_BY_NAME(DT_NODELABEL(can2), rx0, priority),
		    can_stm32_rx_isr, DEVICE_DT_GET(DT_NODELABEL(can2)), 0);
	irq_enable(DT_IRQ_BY_NAME(DT_NODELABEL(can2), rx0, irq));
 80584d0:	2040      	movs	r0, #64	; 0x40
 80584d2:	f7ef fdc9 	bl	8048068 <arch_irq_enable>

	IRQ_CONNECT(DT_IRQ_BY_NAME(DT_NODELABEL(can2), tx, irq),
 80584d6:	2200      	movs	r2, #0
 80584d8:	203f      	movs	r0, #63	; 0x3f
 80584da:	4611      	mov	r1, r2
 80584dc:	f7ef fdd4 	bl	8048088 <z_arm_irq_priority_set>
		    DT_IRQ_BY_NAME(DT_NODELABEL(can2), tx, priority),
		    can_stm32_tx_isr, DEVICE_DT_GET(DT_NODELABEL(can2)), 0);
	irq_enable(DT_IRQ_BY_NAME(DT_NODELABEL(can2), tx, irq));
 80584e0:	203f      	movs	r0, #63	; 0x3f
 80584e2:	f7ef fdc1 	bl	8048068 <arch_irq_enable>

	IRQ_CONNECT(DT_IRQ_BY_NAME(DT_NODELABEL(can2), sce, irq),
 80584e6:	2200      	movs	r2, #0
 80584e8:	2042      	movs	r0, #66	; 0x42
 80584ea:	4611      	mov	r1, r2
 80584ec:	f7ef fdcc 	bl	8048088 <z_arm_irq_priority_set>
		    DT_IRQ_BY_NAME(DT_NODELABEL(can2), sce, priority),
		    can_stm32_state_change_isr,
		    DEVICE_DT_GET(DT_NODELABEL(can2)), 0);
	irq_enable(DT_IRQ_BY_NAME(DT_NODELABEL(can2), sce, irq));
 80584f0:	2042      	movs	r0, #66	; 0x42
 80584f2:	f7ef fdb9 	bl	8048068 <arch_irq_enable>
	can->IER |= CAN_IER_TMEIE | CAN_IER_ERRIE | CAN_IER_FMPIE0 |
 80584f6:	6963      	ldr	r3, [r4, #20]
 80584f8:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80584fc:	f043 0313 	orr.w	r3, r3, #19
 8058500:	6163      	str	r3, [r4, #20]
		    CAN_IER_FMPIE1 | CAN_IER_BOFIE;
}
 8058502:	bd10      	pop	{r4, pc}

08058504 <can_stm32_shift_arr>:
	if (start > CONFIG_CAN_MAX_FILTER) {
 8058504:	2905      	cmp	r1, #5
{
 8058506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8058508:	4605      	mov	r5, r0
 805850a:	4614      	mov	r4, r2
	void **start_ptr = arr + start;
 805850c:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	if (start > CONFIG_CAN_MAX_FILTER) {
 8058510:	dc32      	bgt.n	8058578 <can_stm32_shift_arr+0x74>
	if (count > 0) {
 8058512:	2a00      	cmp	r2, #0
 8058514:	dd1d      	ble.n	8058552 <can_stm32_shift_arr+0x4e>
		if (!can_stm32_check_free(arr, CONFIG_CAN_MAX_FILTER - count,
 8058516:	f1c2 0305 	rsb	r3, r2, #5
 805851a:	3514      	adds	r5, #20
 805851c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
		if (arr[i] != NULL) {
 8058520:	f853 7b04 	ldr.w	r7, [r3], #4
 8058524:	bb47      	cbnz	r7, 8058578 <can_stm32_shift_arr+0x74>
	for (i = start; i <= end; i++) {
 8058526:	42ab      	cmp	r3, r5
 8058528:	d1fa      	bne.n	8058520 <can_stm32_shift_arr+0x1c>
		if ((start + count) >= CONFIG_CAN_MAX_FILTER) {
 805852a:	4421      	add	r1, r4
 805852c:	2904      	cmp	r1, #4
 805852e:	dc0d      	bgt.n	805854c <can_stm32_shift_arr+0x48>
		cnt = (CONFIG_CAN_MAX_FILTER - start - count) * sizeof(void *);
 8058530:	f1c1 0105 	rsb	r1, r1, #5
		move_dest = start_ptr + count;
 8058534:	00a5      	lsls	r5, r4, #2
__ssp_bos_icheck3(memmove, void *, const void *)
 8058536:	eb06 0084 	add.w	r0, r6, r4, lsl #2
 805853a:	008a      	lsls	r2, r1, #2
 805853c:	4631      	mov	r1, r6
 805853e:	f002 fc6b 	bl	805ae18 <memmove>
__ssp_bos_icheck3(memset, void *, int)
 8058542:	462a      	mov	r2, r5
 8058544:	4639      	mov	r1, r7
 8058546:	4630      	mov	r0, r6
 8058548:	f002 fc80 	bl	805ae4c <memset>
	return 0;
 805854c:	2400      	movs	r4, #0
}
 805854e:	4620      	mov	r0, r4
 8058550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (count < 0) {
 8058552:	d0fc      	beq.n	805854e <can_stm32_shift_arr+0x4a>
		if (start - count < 0) {
 8058554:	42d1      	cmn	r1, r2
 8058556:	d40f      	bmi.n	8058578 <can_stm32_shift_arr+0x74>
		memmove(start_ptr - count, start_ptr, cnt);
 8058558:	f06f 0703 	mvn.w	r7, #3
		cnt = (CONFIG_CAN_MAX_FILTER - start) * sizeof(void *);
 805855c:	f1c1 0105 	rsb	r1, r1, #5
		memmove(start_ptr - count, start_ptr, cnt);
 8058560:	4357      	muls	r7, r2
__ssp_bos_icheck3(memmove, void *, const void *)
 8058562:	008a      	lsls	r2, r1, #2
 8058564:	4631      	mov	r1, r6
 8058566:	1bf0      	subs	r0, r6, r7
 8058568:	f002 fc56 	bl	805ae18 <memmove>
		(void)memset(arr + CONFIG_CAN_MAX_FILTER - count, 0,
 805856c:	1d60      	adds	r0, r4, #5
__ssp_bos_icheck3(memset, void *, int)
 805856e:	463a      	mov	r2, r7
 8058570:	2100      	movs	r1, #0
 8058572:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8058576:	e7e7      	b.n	8058548 <can_stm32_shift_arr+0x44>
		return CAN_NO_FREE_FILTER;
 8058578:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 805857c:	e7e7      	b.n	805854e <can_stm32_shift_arr+0x4a>

0805857e <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
 805857e:	f7f9 b9f3 	b.w	8051968 <z_impl_k_mutex_lock>

08058582 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 8058582:	f7f9 ba6b 	b.w	8051a5c <z_impl_k_mutex_unlock>

08058586 <can_stm32_signal_tx_complete>:
	if (mb->tx_callback) {
 8058586:	6803      	ldr	r3, [r0, #0]
 8058588:	b113      	cbz	r3, 8058590 <can_stm32_signal_tx_complete+0xa>
		mb->tx_callback(mb->error, mb->callback_arg);
 805858a:	6841      	ldr	r1, [r0, #4]
 805858c:	6a00      	ldr	r0, [r0, #32]
 805858e:	4718      	bx	r3
	z_impl_k_sem_give(sem);
 8058590:	3008      	adds	r0, #8
 8058592:	f7f9 baa7 	b.w	8051ae4 <z_impl_k_sem_give>

08058596 <can_stm32_tx_isr_handler>:
{
 8058596:	b570      	push	{r4, r5, r6, lr}
	bus_off = can->ESR & CAN_ESR_BOFF;
 8058598:	6986      	ldr	r6, [r0, #24]
{
 805859a:	4604      	mov	r4, r0
	if ((can->TSR & CAN_TSR_RQCP0) | bus_off) {
 805859c:	6883      	ldr	r3, [r0, #8]
{
 805859e:	460d      	mov	r5, r1
	bus_off = can->ESR & CAN_ESR_BOFF;
 80585a0:	f006 0604 	and.w	r6, r6, #4
	if ((can->TSR & CAN_TSR_RQCP0) | bus_off) {
 80585a4:	f003 0301 	and.w	r3, r3, #1
 80585a8:	4333      	orrs	r3, r6
 80585aa:	d017      	beq.n	80585dc <can_stm32_tx_isr_handler+0x46>
				can->TSR & CAN_TSR_TXOK0 ? CAN_TX_OK  :
 80585ac:	6883      	ldr	r3, [r0, #8]
 80585ae:	0798      	lsls	r0, r3, #30
 80585b0:	d459      	bmi.n	8058666 <can_stm32_tx_isr_handler+0xd0>
				can->TSR & CAN_TSR_TERR0 ? CAN_TX_ERR :
 80585b2:	68a3      	ldr	r3, [r4, #8]
 80585b4:	0719      	lsls	r1, r3, #28
 80585b6:	d458      	bmi.n	805866a <can_stm32_tx_isr_handler+0xd4>
				can->TSR & CAN_TSR_ALST0 ? CAN_TX_ARB_LOST :
 80585b8:	68a3      	ldr	r3, [r4, #8]
 80585ba:	075a      	lsls	r2, r3, #29
 80585bc:	d458      	bmi.n	8058670 <can_stm32_tx_isr_handler+0xda>
						 bus_off ? CAN_TX_BUS_OFF :
 80585be:	2e00      	cmp	r6, #0
 80585c0:	bf14      	ite	ne
 80585c2:	f06f 0303 	mvnne.w	r3, #3
 80585c6:	f06f 0304 	mvneq.w	r3, #4
		data->mb0.error =
 80585ca:	64eb      	str	r3, [r5, #76]	; 0x4c
		can_stm32_signal_tx_complete(&data->mb0);
 80585cc:	f105 002c 	add.w	r0, r5, #44	; 0x2c
		can->TSR |= CAN_TSR_RQCP0;
 80585d0:	68a3      	ldr	r3, [r4, #8]
 80585d2:	f043 0301 	orr.w	r3, r3, #1
 80585d6:	60a3      	str	r3, [r4, #8]
		can_stm32_signal_tx_complete(&data->mb0);
 80585d8:	f7ff ffd5 	bl	8058586 <can_stm32_signal_tx_complete>
	if ((can->TSR & CAN_TSR_RQCP1) | bus_off) {
 80585dc:	68a3      	ldr	r3, [r4, #8]
 80585de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80585e2:	4333      	orrs	r3, r6
 80585e4:	d017      	beq.n	8058616 <can_stm32_tx_isr_handler+0x80>
				can->TSR & CAN_TSR_TXOK1 ? CAN_TX_OK  :
 80585e6:	68a3      	ldr	r3, [r4, #8]
 80585e8:	0598      	lsls	r0, r3, #22
 80585ea:	d444      	bmi.n	8058676 <can_stm32_tx_isr_handler+0xe0>
				can->TSR & CAN_TSR_TERR1 ? CAN_TX_ERR :
 80585ec:	68a3      	ldr	r3, [r4, #8]
 80585ee:	0519      	lsls	r1, r3, #20
 80585f0:	d443      	bmi.n	805867a <can_stm32_tx_isr_handler+0xe4>
				can->TSR & CAN_TSR_ALST1 ? CAN_TX_ARB_LOST :
 80585f2:	68a3      	ldr	r3, [r4, #8]
 80585f4:	055a      	lsls	r2, r3, #21
 80585f6:	d443      	bmi.n	8058680 <can_stm32_tx_isr_handler+0xea>
				bus_off                  ? CAN_TX_BUS_OFF :
 80585f8:	2e00      	cmp	r6, #0
 80585fa:	bf14      	ite	ne
 80585fc:	f06f 0303 	mvnne.w	r3, #3
 8058600:	f06f 0304 	mvneq.w	r3, #4
		data->mb1.error =
 8058604:	672b      	str	r3, [r5, #112]	; 0x70
		can_stm32_signal_tx_complete(&data->mb1);
 8058606:	f105 0050 	add.w	r0, r5, #80	; 0x50
		can->TSR |= CAN_TSR_RQCP1;
 805860a:	68a3      	ldr	r3, [r4, #8]
 805860c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8058610:	60a3      	str	r3, [r4, #8]
		can_stm32_signal_tx_complete(&data->mb1);
 8058612:	f7ff ffb8 	bl	8058586 <can_stm32_signal_tx_complete>
	if ((can->TSR & CAN_TSR_RQCP2) | bus_off) {
 8058616:	68a3      	ldr	r3, [r4, #8]
 8058618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 805861c:	4333      	orrs	r3, r6
 805861e:	d018      	beq.n	8058652 <can_stm32_tx_isr_handler+0xbc>
				can->TSR & CAN_TSR_TXOK2 ? CAN_TX_OK  :
 8058620:	68a3      	ldr	r3, [r4, #8]
 8058622:	0398      	lsls	r0, r3, #14
 8058624:	d42f      	bmi.n	8058686 <can_stm32_tx_isr_handler+0xf0>
				can->TSR & CAN_TSR_TERR2 ? CAN_TX_ERR :
 8058626:	68a3      	ldr	r3, [r4, #8]
 8058628:	0319      	lsls	r1, r3, #12
 805862a:	d42e      	bmi.n	805868a <can_stm32_tx_isr_handler+0xf4>
				can->TSR & CAN_TSR_ALST2 ? CAN_TX_ARB_LOST :
 805862c:	68a3      	ldr	r3, [r4, #8]
 805862e:	035a      	lsls	r2, r3, #13
 8058630:	d42e      	bmi.n	8058690 <can_stm32_tx_isr_handler+0xfa>
				bus_off                  ? CAN_TX_BUS_OFF :
 8058632:	2e00      	cmp	r6, #0
 8058634:	bf14      	ite	ne
 8058636:	f06f 0303 	mvnne.w	r3, #3
 805863a:	f06f 0304 	mvneq.w	r3, #4
		data->mb2.error =
 805863e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
		can_stm32_signal_tx_complete(&data->mb2);
 8058642:	f105 0074 	add.w	r0, r5, #116	; 0x74
		can->TSR |= CAN_TSR_RQCP2;
 8058646:	68a3      	ldr	r3, [r4, #8]
 8058648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 805864c:	60a3      	str	r3, [r4, #8]
		can_stm32_signal_tx_complete(&data->mb2);
 805864e:	f7ff ff9a 	bl	8058586 <can_stm32_signal_tx_complete>
	if (can->TSR & CAN_TSR_TME) {
 8058652:	68a3      	ldr	r3, [r4, #8]
 8058654:	f013 5fe0 	tst.w	r3, #469762048	; 0x1c000000
 8058658:	d01d      	beq.n	8058696 <can_stm32_tx_isr_handler+0x100>
 805865a:	f105 0014 	add.w	r0, r5, #20
}
 805865e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8058662:	f7f9 ba3f 	b.w	8051ae4 <z_impl_k_sem_give>
				can->TSR & CAN_TSR_TXOK0 ? CAN_TX_OK  :
 8058666:	2300      	movs	r3, #0
 8058668:	e7af      	b.n	80585ca <can_stm32_tx_isr_handler+0x34>
				can->TSR & CAN_TSR_TERR0 ? CAN_TX_ERR :
 805866a:	f06f 0301 	mvn.w	r3, #1
 805866e:	e7ac      	b.n	80585ca <can_stm32_tx_isr_handler+0x34>
				can->TSR & CAN_TSR_ALST0 ? CAN_TX_ARB_LOST :
 8058670:	f06f 0302 	mvn.w	r3, #2
 8058674:	e7a9      	b.n	80585ca <can_stm32_tx_isr_handler+0x34>
				can->TSR & CAN_TSR_TXOK1 ? CAN_TX_OK  :
 8058676:	2300      	movs	r3, #0
 8058678:	e7c4      	b.n	8058604 <can_stm32_tx_isr_handler+0x6e>
				can->TSR & CAN_TSR_TERR1 ? CAN_TX_ERR :
 805867a:	f06f 0301 	mvn.w	r3, #1
 805867e:	e7c1      	b.n	8058604 <can_stm32_tx_isr_handler+0x6e>
				can->TSR & CAN_TSR_ALST1 ? CAN_TX_ARB_LOST :
 8058680:	f06f 0302 	mvn.w	r3, #2
 8058684:	e7be      	b.n	8058604 <can_stm32_tx_isr_handler+0x6e>
				can->TSR & CAN_TSR_TXOK2 ? CAN_TX_OK  :
 8058686:	2300      	movs	r3, #0
 8058688:	e7d9      	b.n	805863e <can_stm32_tx_isr_handler+0xa8>
				can->TSR & CAN_TSR_TERR2 ? CAN_TX_ERR :
 805868a:	f06f 0301 	mvn.w	r3, #1
 805868e:	e7d6      	b.n	805863e <can_stm32_tx_isr_handler+0xa8>
				can->TSR & CAN_TSR_ALST2 ? CAN_TX_ARB_LOST :
 8058690:	f06f 0302 	mvn.w	r3, #2
 8058694:	e7d3      	b.n	805863e <can_stm32_tx_isr_handler+0xa8>
}
 8058696:	bd70      	pop	{r4, r5, r6, pc}

08058698 <can_stm32_tx_isr>:
	can = cfg->can;
 8058698:	6843      	ldr	r3, [r0, #4]
	can_stm32_tx_isr_handler(can, data);
 805869a:	6901      	ldr	r1, [r0, #16]
 805869c:	6818      	ldr	r0, [r3, #0]
 805869e:	f7ff bf7a 	b.w	8058596 <can_stm32_tx_isr_handler>

080586a2 <can_stm32_state_change_isr>:
	can = cfg->can;
 80586a2:	6843      	ldr	r3, [r0, #4]
{
 80586a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	can = cfg->can;
 80586a6:	681c      	ldr	r4, [r3, #0]
	if (can->MSR & CAN_MSR_ERRI) {
 80586a8:	6863      	ldr	r3, [r4, #4]
 80586aa:	075d      	lsls	r5, r3, #29
 80586ac:	d50e      	bpl.n	80586cc <can_stm32_state_change_isr+0x2a>
	data = DEV_DATA(dev);
 80586ae:	6905      	ldr	r5, [r0, #16]
		can_stm32_tx_isr_handler(can, data);
 80586b0:	4620      	mov	r0, r4
 80586b2:	4629      	mov	r1, r5
 80586b4:	f7ff ff6f 	bl	8058596 <can_stm32_tx_isr_handler>
	if (!(can->ESR & CAN_ESR_EPVF) && !(can->ESR & CAN_ESR_BOFF)) {
 80586b8:	69a3      	ldr	r3, [r4, #24]
 80586ba:	0799      	lsls	r1, r3, #30
 80586bc:	d408      	bmi.n	80586d0 <can_stm32_state_change_isr+0x2e>
 80586be:	69a3      	ldr	r3, [r4, #24]
 80586c0:	075a      	lsls	r2, r3, #29
 80586c2:	d405      	bmi.n	80586d0 <can_stm32_state_change_isr+0x2e>
		can->MSR |= CAN_MSR_ERRI;
 80586c4:	6863      	ldr	r3, [r4, #4]
 80586c6:	f043 0304 	orr.w	r3, r3, #4
 80586ca:	6063      	str	r3, [r4, #4]
}
 80586cc:	b003      	add	sp, #12
 80586ce:	bd30      	pop	{r4, r5, pc}
	err_cnt.tx_err_cnt = ((can->ESR & CAN_ESR_TEC) >> CAN_ESR_TEC_Pos);
 80586d0:	69a3      	ldr	r3, [r4, #24]
 80586d2:	0c1b      	lsrs	r3, r3, #16
 80586d4:	f88d 3004 	strb.w	r3, [sp, #4]
	err_cnt.rx_err_cnt = ((can->ESR & CAN_ESR_REC) >> CAN_ESR_REC_Pos);
 80586d8:	69a3      	ldr	r3, [r4, #24]
 80586da:	0e1b      	lsrs	r3, r3, #24
 80586dc:	f88d 3005 	strb.w	r3, [sp, #5]
	if (can->ESR & CAN_ESR_BOFF) {
 80586e0:	69a3      	ldr	r3, [r4, #24]
 80586e2:	075b      	lsls	r3, r3, #29
 80586e4:	d409      	bmi.n	80586fa <can_stm32_state_change_isr+0x58>
	} else if (can->ESR & CAN_ESR_EPVF) {
 80586e6:	69a0      	ldr	r0, [r4, #24]
		state = CAN_BUS_OFF;
 80586e8:	f3c0 0040 	ubfx	r0, r0, #1, #1
	if (data->state_change_isr) {
 80586ec:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
 80586f0:	2b00      	cmp	r3, #0
 80586f2:	d0e7      	beq.n	80586c4 <can_stm32_state_change_isr+0x22>
		data->state_change_isr(state, err_cnt);
 80586f4:	9901      	ldr	r1, [sp, #4]
 80586f6:	4798      	blx	r3
 80586f8:	e7e4      	b.n	80586c4 <can_stm32_state_change_isr+0x22>
		state = CAN_BUS_OFF;
 80586fa:	2002      	movs	r0, #2
 80586fc:	e7f6      	b.n	80586ec <can_stm32_state_change_isr+0x4a>

080586fe <can_stm32_get_filter_type>:
	uint32_t scale_masked = (scale_reg >> bank_nr) & 0x01;
 80586fe:	40c2      	lsrs	r2, r0
	uint32_t mode_masked  = (mode_reg  >> bank_nr) & 0x01;
 8058700:	40c1      	lsrs	r1, r0
	uint32_t scale_masked = (scale_reg >> bank_nr) & 0x01;
 8058702:	f002 0201 	and.w	r2, r2, #1
	uint32_t mode_masked  = (mode_reg  >> bank_nr) & 0x01;
 8058706:	f001 0101 	and.w	r1, r1, #1
}
 805870a:	ea41 0042 	orr.w	r0, r1, r2, lsl #1
 805870e:	4770      	bx	lr

08058710 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
 8058710:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8058714:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
 8058716:	f04f 0800 	mov.w	r8, #0
	const struct flash_driver_api *api = dev->api;
 805871a:	6883      	ldr	r3, [r0, #8]
{
 805871c:	460d      	mov	r5, r1
 805871e:	4616      	mov	r6, r2
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
 8058720:	4669      	mov	r1, sp
 8058722:	695b      	ldr	r3, [r3, #20]
 8058724:	aa01      	add	r2, sp, #4
	info->start_offset = 0;
 8058726:	f8c4 8000 	str.w	r8, [r4]
	info->index = 0U;
 805872a:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
 805872e:	4798      	blx	r3

	while (layout_size--) {
 8058730:	4640      	mov	r0, r8
 8058732:	e9dd 7c00 	ldrd	r7, ip, [sp]
		info->size = layout->pages_size;
 8058736:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
 805873a:	4560      	cmp	r0, ip
 805873c:	d104      	bne.n	8058748 <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
 805873e:	f06f 0015 	mvn.w	r0, #21
}
 8058742:	b003      	add	sp, #12
 8058744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
 8058748:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
 805874c:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
 805874e:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
 8058750:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
 8058754:	b97d      	cbnz	r5, 8058776 <flash_get_page_info+0x66>
			index_jmp = index - info->index;
 8058756:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
 8058758:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
		if (index_jmp < layout->pages_count) {
 805875c:	3001      	adds	r0, #1
		index_jmp = MIN(index_jmp, layout->pages_count);
 805875e:	4543      	cmp	r3, r8
 8058760:	bf28      	it	cs
 8058762:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
 8058764:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
 8058768:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
 805876a:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
 805876c:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
 805876e:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
 8058770:	d9e3      	bls.n	805873a <flash_get_page_info+0x2a>
			return 0;
 8058772:	2000      	movs	r0, #0
 8058774:	e7e5      	b.n	8058742 <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
 8058776:	1aab      	subs	r3, r5, r2
 8058778:	fbb3 f3f9 	udiv	r3, r3, r9
 805877c:	e7ec      	b.n	8058758 <flash_get_page_info+0x48>

0805877e <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
 805877e:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
 8058780:	2200      	movs	r2, #0
 8058782:	f7ff bfc5 	b.w	8058710 <flash_get_page_info>

08058786 <_flash_stm32_sem_take.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
 8058786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 805878a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 805878e:	3004      	adds	r0, #4
 8058790:	f7f9 b9ce 	b.w	8051b30 <z_impl_k_sem_take>

08058794 <flash_stm32_check_configuration>:
}
 8058794:	2000      	movs	r0, #0
 8058796:	4770      	bx	lr

08058798 <stm32_flash_init>:
	.page_layout = flash_stm32_page_layout,
#endif
};

static int stm32_flash_init(const struct device *dev)
{
 8058798:	b510      	push	{r4, lr}
 805879a:	4604      	mov	r4, r0

#ifdef CONFIG_SOC_SERIES_STM32WBX
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_HSEM);
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	flash_stm32_sem_init(dev);
 805879c:	6900      	ldr	r0, [r0, #16]
 805879e:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
 80587a0:	2201      	movs	r2, #1
 80587a2:	4611      	mov	r1, r2
 80587a4:	f001 fe32 	bl	805a40c <z_impl_k_sem_init>

	LOG_DBG("Flash initialized. BS: %zu",
		flash_stm32_parameters.write_block_size);

	/* Check Flash configuration */
	rc = flash_stm32_check_configuration();
 80587a8:	f7ff fff4 	bl	8058794 <flash_stm32_check_configuration>
	if (rc < 0) {
 80587ac:	2800      	cmp	r0, #0
 80587ae:	db05      	blt.n	80587bc <stm32_flash_init+0x24>
		LOG_DBG("Block %zu: bs: %zu count: %zu", i,
			layout[i].pages_size, layout[i].pages_count);
	}
#endif

	return flash_stm32_write_protection(dev, false);
 80587b0:	4620      	mov	r0, r4
 80587b2:	2100      	movs	r1, #0
}
 80587b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return flash_stm32_write_protection(dev, false);
 80587b8:	f7f5 b904 	b.w	804d9c4 <flash_stm32_write_protection>
}
 80587bc:	bd10      	pop	{r4, pc}

080587be <flash_stm32_valid_range>:
{
 80587be:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80587c0:	4605      	mov	r5, r0
 80587c2:	460e      	mov	r6, r1
 80587c4:	4614      	mov	r4, r2
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
 80587c6:	aa01      	add	r2, sp, #4
 80587c8:	f7ff ffd9 	bl	805877e <z_impl_flash_get_page_info_by_offs>
					    off_t offset,
					    uint32_t len)
{
	struct flash_pages_info info;

	return !(flash_get_page_info_by_offs(dev, offset, &info) ||
 80587cc:	b950      	cbnz	r0, 80587e4 <flash_stm32_valid_range+0x26>
		 flash_get_page_info_by_offs(dev, offset + len - 1, &info));
 80587ce:	3c01      	subs	r4, #1
 80587d0:	aa01      	add	r2, sp, #4
 80587d2:	4628      	mov	r0, r5
 80587d4:	19a1      	adds	r1, r4, r6
 80587d6:	f7ff ffd2 	bl	805877e <z_impl_flash_get_page_info_by_offs>
	return !(flash_get_page_info_by_offs(dev, offset, &info) ||
 80587da:	fab0 f080 	clz	r0, r0
 80587de:	0940      	lsrs	r0, r0, #5
}
 80587e0:	b004      	add	sp, #16
 80587e2:	bd70      	pop	{r4, r5, r6, pc}
 80587e4:	2000      	movs	r0, #0
 80587e6:	e7fb      	b.n	80587e0 <flash_stm32_valid_range+0x22>

080587e8 <z_impl_flash_write>:
			  const void *data,
			  size_t len);

static inline int z_impl_flash_write(const struct device *dev, off_t offset,
				     const void *data, size_t len)
{
 80587e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct flash_driver_api *api =
 80587ea:	6886      	ldr	r6, [r0, #8]
{
 80587ec:	4605      	mov	r5, r0
 80587ee:	460f      	mov	r7, r1
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
 80587f0:	68f4      	ldr	r4, [r6, #12]
 80587f2:	b94c      	cbnz	r4, 8058808 <z_impl_flash_write+0x20>
		if (rc) {
			return rc;
		}
	}

	rc = api->write(dev, offset, data, len);
 80587f4:	6874      	ldr	r4, [r6, #4]
 80587f6:	4639      	mov	r1, r7
 80587f8:	4628      	mov	r0, r5
 80587fa:	47a0      	blx	r4

	if (api->write_protection != NULL) {
 80587fc:	68f3      	ldr	r3, [r6, #12]
	rc = api->write(dev, offset, data, len);
 80587fe:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
 8058800:	b963      	cbnz	r3, 805881c <z_impl_flash_write+0x34>
		(void) api->write_protection(dev, true);
	}

	return rc;
}
 8058802:	4620      	mov	r0, r4
 8058804:	b003      	add	sp, #12
 8058806:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = api->write_protection(dev, false);
 8058808:	2100      	movs	r1, #0
 805880a:	e9cd 2300 	strd	r2, r3, [sp]
 805880e:	47a0      	blx	r4
		if (rc) {
 8058810:	4604      	mov	r4, r0
 8058812:	e9dd 2300 	ldrd	r2, r3, [sp]
 8058816:	2800      	cmp	r0, #0
 8058818:	d0ec      	beq.n	80587f4 <z_impl_flash_write+0xc>
 805881a:	e7f2      	b.n	8058802 <z_impl_flash_write+0x1a>
		(void) api->write_protection(dev, true);
 805881c:	2101      	movs	r1, #1
 805881e:	4628      	mov	r0, r5
 8058820:	4798      	blx	r3
 8058822:	e7ee      	b.n	8058802 <z_impl_flash_write+0x1a>

08058824 <z_impl_flash_erase>:
 */
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
 8058824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct flash_driver_api *api =
 8058826:	6886      	ldr	r6, [r0, #8]
{
 8058828:	4605      	mov	r5, r0
 805882a:	460f      	mov	r7, r1
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
 805882c:	68f3      	ldr	r3, [r6, #12]
 805882e:	b94b      	cbnz	r3, 8058844 <z_impl_flash_erase+0x20>
		if (rc) {
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
 8058830:	68b3      	ldr	r3, [r6, #8]
 8058832:	4639      	mov	r1, r7
 8058834:	4628      	mov	r0, r5
 8058836:	4798      	blx	r3

	if (api->write_protection != NULL) {
 8058838:	68f3      	ldr	r3, [r6, #12]
	rc = api->erase(dev, offset, size);
 805883a:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
 805883c:	b953      	cbnz	r3, 8058854 <z_impl_flash_erase+0x30>
		(void) api->write_protection(dev, true);
	}

	return rc;
}
 805883e:	4620      	mov	r0, r4
 8058840:	b003      	add	sp, #12
 8058842:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = api->write_protection(dev, false);
 8058844:	2100      	movs	r1, #0
 8058846:	9201      	str	r2, [sp, #4]
 8058848:	4798      	blx	r3
		if (rc) {
 805884a:	9a01      	ldr	r2, [sp, #4]
 805884c:	4604      	mov	r4, r0
 805884e:	2800      	cmp	r0, #0
 8058850:	d0ee      	beq.n	8058830 <z_impl_flash_erase+0xc>
 8058852:	e7f4      	b.n	805883e <z_impl_flash_erase+0x1a>
		(void) api->write_protection(dev, true);
 8058854:	2101      	movs	r1, #1
 8058856:	4628      	mov	r0, r5
 8058858:	4798      	blx	r3
 805885a:	e7f0      	b.n	805883e <z_impl_flash_erase+0x1a>

0805885c <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 805885c:	6843      	ldr	r3, [r0, #4]
 805885e:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8058860:	69da      	ldr	r2, [r3, #28]
 8058862:	0710      	lsls	r0, r2, #28
 8058864:	d501      	bpl.n	805886a <uart_stm32_poll_in+0xe>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8058866:	2208      	movs	r2, #8
 8058868:	621a      	str	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 805886a:	69da      	ldr	r2, [r3, #28]
 805886c:	0692      	lsls	r2, r2, #26
 805886e:	d503      	bpl.n	8058878 <uart_stm32_poll_in+0x1c>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8058870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return 0;
 8058872:	2000      	movs	r0, #0
 8058874:	700b      	strb	r3, [r1, #0]
 8058876:	4770      	bx	lr
		return -1;
 8058878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 805887c:	4770      	bx	lr

0805887e <uart_stm32_irq_tx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 805887e:	6843      	ldr	r3, [r0, #4]
 8058880:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8058882:	6813      	ldr	r3, [r2, #0]
 8058884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8058888:	6013      	str	r3, [r2, #0]
}
 805888a:	4770      	bx	lr

0805888c <uart_stm32_irq_tx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 805888c:	6843      	ldr	r3, [r0, #4]
 805888e:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8058890:	6813      	ldr	r3, [r2, #0]
 8058892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8058896:	6013      	str	r3, [r2, #0]
}
 8058898:	4770      	bx	lr

0805889a <uart_stm32_irq_rx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 805889a:	6843      	ldr	r3, [r0, #4]
 805889c:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 805889e:	6813      	ldr	r3, [r2, #0]
 80588a0:	f043 0320 	orr.w	r3, r3, #32
 80588a4:	6013      	str	r3, [r2, #0]
}
 80588a6:	4770      	bx	lr

080588a8 <uart_stm32_irq_rx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80588a8:	6843      	ldr	r3, [r0, #4]
 80588aa:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80588ac:	6813      	ldr	r3, [r2, #0]
 80588ae:	f023 0320 	bic.w	r3, r3, #32
 80588b2:	6013      	str	r3, [r2, #0]
}
 80588b4:	4770      	bx	lr

080588b6 <uart_stm32_irq_update>:
}
 80588b6:	2001      	movs	r0, #1
 80588b8:	4770      	bx	lr

080588ba <uart_stm32_irq_callback_set>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 80588ba:	6903      	ldr	r3, [r0, #16]
	data->user_data = cb_data;
 80588bc:	e9c3 1202 	strd	r1, r2, [r3, #8]
}
 80588c0:	4770      	bx	lr

080588c2 <uart_stm32_isr>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 80588c2:	6902      	ldr	r2, [r0, #16]
	if (data->user_cb) {
 80588c4:	6893      	ldr	r3, [r2, #8]
 80588c6:	b10b      	cbz	r3, 80588cc <uart_stm32_isr+0xa>
		data->user_cb(dev, data->user_data);
 80588c8:	68d1      	ldr	r1, [r2, #12]
 80588ca:	4718      	bx	r3
}
 80588cc:	4770      	bx	lr

080588ce <uart_stm32_irq_config_func_0>:
		    PRE_KERNEL_1, CONFIG_SERIAL_INIT_PRIORITY,		\
		    &uart_stm32_driver_api);				\
									\
STM32_UART_IRQ_HANDLER(index)

DT_INST_FOREACH_STATUS_OKAY(STM32_UART_INIT)
 80588ce:	2200      	movs	r2, #0
 80588d0:	2025      	movs	r0, #37	; 0x25
 80588d2:	b508      	push	{r3, lr}
 80588d4:	4611      	mov	r1, r2
 80588d6:	f7ef fbd7 	bl	8048088 <z_arm_irq_priority_set>
 80588da:	2025      	movs	r0, #37	; 0x25
 80588dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80588e0:	f7ef bbc2 	b.w	8048068 <arch_irq_enable>

080588e4 <uart_stm32_irq_config_func_1>:
 80588e4:	2200      	movs	r2, #0
 80588e6:	2026      	movs	r0, #38	; 0x26
 80588e8:	b508      	push	{r3, lr}
 80588ea:	4611      	mov	r1, r2
 80588ec:	f7ef fbcc 	bl	8048088 <z_arm_irq_priority_set>
 80588f0:	2026      	movs	r0, #38	; 0x26
 80588f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80588f6:	f7ef bbb7 	b.w	8048068 <arch_irq_enable>

080588fa <uart_stm32_irq_config_func_2>:
 80588fa:	2200      	movs	r2, #0
 80588fc:	2034      	movs	r0, #52	; 0x34
 80588fe:	b508      	push	{r3, lr}
 8058900:	4611      	mov	r1, r2
 8058902:	f7ef fbc1 	bl	8048088 <z_arm_irq_priority_set>
 8058906:	2034      	movs	r0, #52	; 0x34
 8058908:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 805890c:	f7ef bbac 	b.w	8048068 <arch_irq_enable>

08058910 <uart_stm32_irq_config_func_3>:
 8058910:	2200      	movs	r2, #0
 8058912:	2047      	movs	r0, #71	; 0x47
 8058914:	b508      	push	{r3, lr}
 8058916:	4611      	mov	r1, r2
 8058918:	f7ef fbb6 	bl	8048088 <z_arm_irq_priority_set>
 805891c:	2047      	movs	r0, #71	; 0x47
 805891e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8058922:	f7ef bba1 	b.w	8048068 <arch_irq_enable>

08058926 <uart_stm32_irq_tx_complete>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8058926:	6843      	ldr	r3, [r0, #4]
 8058928:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 805892a:	69d8      	ldr	r0, [r3, #28]
}
 805892c:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8058930:	4770      	bx	lr

08058932 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8058932:	6903      	ldr	r3, [r0, #16]
 8058934:	681b      	ldr	r3, [r3, #0]
 8058936:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8058938:	6843      	ldr	r3, [r0, #4]
 805893a:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 805893c:	6813      	ldr	r3, [r2, #0]
 805893e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8058942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8058946:	d02d      	beq.n	80589a4 <uart_stm32_config_get+0x72>
		return UART_CFG_PARITY_NONE;
 8058948:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 805894c:	4243      	negs	r3, r0
 805894e:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8058950:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8058952:	6853      	ldr	r3, [r2, #4]
 8058954:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8058958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 805895c:	d024      	beq.n	80589a8 <uart_stm32_config_get+0x76>
 805895e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8058962:	d023      	beq.n	80589ac <uart_stm32_config_get+0x7a>
 8058964:	2b00      	cmp	r3, #0
 8058966:	bf14      	ite	ne
 8058968:	2303      	movne	r3, #3
 805896a:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 805896c:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 805896e:	6810      	ldr	r0, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8058970:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8058972:	f000 2010 	and.w	r0, r0, #268439552	; 0x10001000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8058976:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (db) {
 805897a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 805897e:	d017      	beq.n	80589b0 <uart_stm32_config_get+0x7e>
 8058980:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8058984:	d119      	bne.n	80589ba <uart_stm32_config_get+0x88>
			return UART_CFG_DATA_BITS_6;
 8058986:	2b00      	cmp	r3, #0
 8058988:	bf0c      	ite	eq
 805898a:	2302      	moveq	r3, #2
 805898c:	2301      	movne	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 805898e:	718b      	strb	r3, [r1, #6]
}
 8058990:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8058992:	6893      	ldr	r3, [r2, #8]
 8058994:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8058998:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 805899c:	4253      	negs	r3, r2
 805899e:	4153      	adcs	r3, r2
 80589a0:	71cb      	strb	r3, [r1, #7]
}
 80589a2:	4770      	bx	lr
	switch (parity) {
 80589a4:	2302      	movs	r3, #2
 80589a6:	e7d3      	b.n	8058950 <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_0_5;
 80589a8:	2300      	movs	r3, #0
 80589aa:	e7df      	b.n	805896c <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 80589ac:	2302      	movs	r3, #2
 80589ae:	e7dd      	b.n	805896c <uart_stm32_config_get+0x3a>
			return UART_CFG_DATA_BITS_9;
 80589b0:	2b00      	cmp	r3, #0
 80589b2:	bf14      	ite	ne
 80589b4:	2303      	movne	r3, #3
 80589b6:	2304      	moveq	r3, #4
 80589b8:	e7e9      	b.n	805898e <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_8;
 80589ba:	2b00      	cmp	r3, #0
 80589bc:	bf14      	ite	ne
 80589be:	2302      	movne	r3, #2
 80589c0:	2303      	moveq	r3, #3
 80589c2:	e7e4      	b.n	805898e <uart_stm32_config_get+0x5c>

080589c4 <uart_stm32_irq_tx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80589c4:	6843      	ldr	r3, [r0, #4]
 80589c6:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80589c8:	69d8      	ldr	r0, [r3, #28]
 80589ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80589ce:	d002      	beq.n	80589d6 <uart_stm32_irq_tx_ready+0x12>
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 80589d0:	6818      	ldr	r0, [r3, #0]
 80589d2:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
 80589d6:	4770      	bx	lr

080589d8 <uart_stm32_fifo_fill>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80589d8:	6843      	ldr	r3, [r0, #4]
{
 80589da:	b570      	push	{r4, r5, r6, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80589dc:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80589de:	69e0      	ldr	r0, [r4, #28]
 80589e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80589e4:	d017      	beq.n	8058a16 <uart_stm32_fifo_fill+0x3e>
	__asm__ volatile(
 80589e6:	f04f 0310 	mov.w	r3, #16
 80589ea:	f3ef 8511 	mrs	r5, BASEPRI
 80589ee:	f383 8812 	msr	BASEPRI_MAX, r3
 80589f2:	f3bf 8f6f 	isb	sy
	while ((size - num_tx > 0) &&
 80589f6:	2300      	movs	r3, #0
 80589f8:	b2d8      	uxtb	r0, r3
 80589fa:	1a16      	subs	r6, r2, r0
 80589fc:	2e00      	cmp	r6, #0
 80589fe:	dd06      	ble.n	8058a0e <uart_stm32_fifo_fill+0x36>
 8058a00:	69e6      	ldr	r6, [r4, #28]
 8058a02:	3301      	adds	r3, #1
 8058a04:	0636      	lsls	r6, r6, #24
 8058a06:	d502      	bpl.n	8058a0e <uart_stm32_fifo_fill+0x36>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8058a08:	5c08      	ldrb	r0, [r1, r0]
 8058a0a:	62a0      	str	r0, [r4, #40]	; 0x28
}
 8058a0c:	e7f4      	b.n	80589f8 <uart_stm32_fifo_fill+0x20>
	__asm__ volatile(
 8058a0e:	f385 8811 	msr	BASEPRI, r5
 8058a12:	f3bf 8f6f 	isb	sy
}
 8058a16:	bd70      	pop	{r4, r5, r6, pc}

08058a18 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8058a18:	6843      	ldr	r3, [r0, #4]
 8058a1a:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8058a1c:	69da      	ldr	r2, [r3, #28]
 8058a1e:	0612      	lsls	r2, r2, #24
 8058a20:	d5fc      	bpl.n	8058a1c <uart_stm32_poll_out+0x4>
	__asm__ volatile(
 8058a22:	f04f 0010 	mov.w	r0, #16
 8058a26:	f3ef 8211 	mrs	r2, BASEPRI
 8058a2a:	f380 8812 	msr	BASEPRI_MAX, r0
 8058a2e:	f3bf 8f6f 	isb	sy
 8058a32:	69d8      	ldr	r0, [r3, #28]
 8058a34:	0600      	lsls	r0, r0, #24
 8058a36:	d404      	bmi.n	8058a42 <uart_stm32_poll_out+0x2a>
	__asm__ volatile(
 8058a38:	f382 8811 	msr	BASEPRI, r2
 8058a3c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 8058a40:	e7ec      	b.n	8058a1c <uart_stm32_poll_out+0x4>
  USARTx->TDR = Value;
 8058a42:	6299      	str	r1, [r3, #40]	; 0x28
	__asm__ volatile(
 8058a44:	f382 8811 	msr	BASEPRI, r2
 8058a48:	f3bf 8f6f 	isb	sy
}
 8058a4c:	4770      	bx	lr

08058a4e <uart_stm32_irq_is_pending>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8058a4e:	6843      	ldr	r3, [r0, #4]
 8058a50:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8058a52:	69da      	ldr	r2, [r3, #28]
 8058a54:	0691      	lsls	r1, r2, #26
 8058a56:	d502      	bpl.n	8058a5e <uart_stm32_irq_is_pending+0x10>
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
 8058a58:	681a      	ldr	r2, [r3, #0]
 8058a5a:	0692      	lsls	r2, r2, #26
 8058a5c:	d407      	bmi.n	8058a6e <uart_stm32_irq_is_pending+0x20>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8058a5e:	69d8      	ldr	r0, [r3, #28]
 8058a60:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8058a64:	d004      	beq.n	8058a70 <uart_stm32_irq_is_pending+0x22>
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8058a66:	6818      	ldr	r0, [r3, #0]
 8058a68:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8058a6c:	4770      	bx	lr
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 8058a6e:	2001      	movs	r0, #1
}
 8058a70:	4770      	bx	lr

08058a72 <uart_stm32_irq_rx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8058a72:	6843      	ldr	r3, [r0, #4]
 8058a74:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8058a76:	69d8      	ldr	r0, [r3, #28]
}
 8058a78:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8058a7c:	4770      	bx	lr

08058a7e <uart_stm32_fifo_read>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8058a7e:	6843      	ldr	r3, [r0, #4]
{
 8058a80:	b570      	push	{r4, r5, r6, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8058a82:	681b      	ldr	r3, [r3, #0]
	while ((size - num_rx > 0) &&
 8058a84:	2400      	movs	r4, #0
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8058a86:	2508      	movs	r5, #8
 8058a88:	b2e0      	uxtb	r0, r4
 8058a8a:	1a16      	subs	r6, r2, r0
 8058a8c:	2e00      	cmp	r6, #0
 8058a8e:	dd0a      	ble.n	8058aa6 <uart_stm32_fifo_read+0x28>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8058a90:	69de      	ldr	r6, [r3, #28]
 8058a92:	06b6      	lsls	r6, r6, #26
 8058a94:	d507      	bpl.n	8058aa6 <uart_stm32_fifo_read+0x28>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8058a96:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8058a98:	540e      	strb	r6, [r1, r0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8058a9a:	69d8      	ldr	r0, [r3, #28]
 8058a9c:	0700      	lsls	r0, r0, #28
 8058a9e:	d500      	bpl.n	8058aa2 <uart_stm32_fifo_read+0x24>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8058aa0:	621d      	str	r5, [r3, #32]
 8058aa2:	3401      	adds	r4, #1
 8058aa4:	e7f0      	b.n	8058a88 <uart_stm32_fifo_read+0xa>
}
 8058aa6:	bd70      	pop	{r4, r5, r6, pc}

08058aa8 <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8058aa8:	6843      	ldr	r3, [r0, #4]
 8058aaa:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8058aac:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8058aae:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8058ab0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 8058ab4:	07d1      	lsls	r1, r2, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8058ab6:	69da      	ldr	r2, [r3, #28]
		err |= UART_ERROR_PARITY;
 8058ab8:	bf48      	it	mi
 8058aba:	f040 0002 	orrmi.w	r0, r0, #2
 8058abe:	0792      	lsls	r2, r2, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 8058ac0:	69da      	ldr	r2, [r3, #28]
		err |= UART_ERROR_FRAMING;
 8058ac2:	bf48      	it	mi
 8058ac4:	f040 0004 	orrmi.w	r0, r0, #4
 8058ac8:	05d1      	lsls	r1, r2, #23
 8058aca:	d504      	bpl.n	8058ad6 <uart_stm32_err_check+0x2e>
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 8058acc:	f44f 7280 	mov.w	r2, #256	; 0x100
		err |= UART_BREAK;
 8058ad0:	f040 0008 	orr.w	r0, r0, #8
 8058ad4:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 8058ad6:	07c2      	lsls	r2, r0, #31
 8058ad8:	d501      	bpl.n	8058ade <uart_stm32_err_check+0x36>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8058ada:	2208      	movs	r2, #8
 8058adc:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 8058ade:	0781      	lsls	r1, r0, #30
 8058ae0:	d501      	bpl.n	8058ae6 <uart_stm32_err_check+0x3e>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8058ae2:	2201      	movs	r2, #1
 8058ae4:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 8058ae6:	0742      	lsls	r2, r0, #29
 8058ae8:	d501      	bpl.n	8058aee <uart_stm32_err_check+0x46>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8058aea:	2202      	movs	r2, #2
 8058aec:	621a      	str	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NCF);
 8058aee:	2204      	movs	r2, #4
 8058af0:	621a      	str	r2, [r3, #32]
}
 8058af2:	4770      	bx	lr

08058af4 <sys_clock_disable>:
	}
}

void sys_clock_disable(void)
{
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8058af4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8058af8:	6913      	ldr	r3, [r2, #16]
 8058afa:	f023 0301 	bic.w	r3, r3, #1
 8058afe:	6113      	str	r3, [r2, #16]
}
 8058b00:	4770      	bx	lr

08058b02 <ld_dword>:
}
 8058b02:	6800      	ldr	r0, [r0, #0]
 8058b04:	4770      	bx	lr

08058b06 <st_dword>:
	*ptr++ = (BYTE)val; val >>= 8;
 8058b06:	0a0b      	lsrs	r3, r1, #8
 8058b08:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8058b0a:	7043      	strb	r3, [r0, #1]
 8058b0c:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8058b0e:	0e09      	lsrs	r1, r1, #24
 8058b10:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8058b12:	70c1      	strb	r1, [r0, #3]
}
 8058b14:	4770      	bx	lr

08058b16 <clst2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8058b16:	6983      	ldr	r3, [r0, #24]
	clst -= 2;		/* Cluster number is origin from 2 */
 8058b18:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8058b1a:	3b02      	subs	r3, #2
 8058b1c:	428b      	cmp	r3, r1
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8058b1e:	bf83      	ittte	hi
 8058b20:	8943      	ldrhhi	r3, [r0, #10]
 8058b22:	6ac0      	ldrhi	r0, [r0, #44]	; 0x2c
 8058b24:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8058b28:	2000      	movls	r0, #0
}
 8058b2a:	4770      	bx	lr

08058b2c <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 8058b2c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8058b30:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8058b32:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8058b34:	7803      	ldrb	r3, [r0, #0]
 8058b36:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8058b38:	bf01      	itttt	eq
 8058b3a:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8058b3c:	750a      	strbeq	r2, [r1, #20]
 8058b3e:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8058b40:	754a      	strbeq	r2, [r1, #21]
}
 8058b42:	4770      	bx	lr

08058b44 <sum_sfn>:
{
 8058b44:	4602      	mov	r2, r0
 8058b46:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8058b4a:	2000      	movs	r0, #0
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8058b4c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8058b50:	eb03 0350 	add.w	r3, r3, r0, lsr #1
	} while (--n);
 8058b54:	428a      	cmp	r2, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8058b56:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
 8058b5a:	b2d8      	uxtb	r0, r3
	} while (--n);
 8058b5c:	d1f6      	bne.n	8058b4c <sum_sfn+0x8>
}
 8058b5e:	4770      	bx	lr

08058b60 <validate>:
{
 8058b60:	b538      	push	{r3, r4, r5, lr}
 8058b62:	460d      	mov	r5, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8058b64:	4604      	mov	r4, r0
 8058b66:	b918      	cbnz	r0, 8058b70 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 8058b68:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8058b6a:	2300      	movs	r3, #0
 8058b6c:	602b      	str	r3, [r5, #0]
}
 8058b6e:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8058b70:	6803      	ldr	r3, [r0, #0]
 8058b72:	2b00      	cmp	r3, #0
 8058b74:	d0f8      	beq.n	8058b68 <validate+0x8>
 8058b76:	781a      	ldrb	r2, [r3, #0]
 8058b78:	2a00      	cmp	r2, #0
 8058b7a:	d0f5      	beq.n	8058b68 <validate+0x8>
 8058b7c:	8881      	ldrh	r1, [r0, #4]
 8058b7e:	88da      	ldrh	r2, [r3, #6]
 8058b80:	4291      	cmp	r1, r2
 8058b82:	d1f1      	bne.n	8058b68 <validate+0x8>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8058b84:	7858      	ldrb	r0, [r3, #1]
 8058b86:	f7f6 fe29 	bl	804f7dc <disk_status>
 8058b8a:	f010 0001 	ands.w	r0, r0, #1
 8058b8e:	d1eb      	bne.n	8058b68 <validate+0x8>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8058b90:	6823      	ldr	r3, [r4, #0]
 8058b92:	e7eb      	b.n	8058b6c <validate+0xc>

08058b94 <get_fileinfo>:
{
 8058b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	fno->fname[0] = 0;			/* Invaidate file info */
 8058b98:	2600      	movs	r6, #0
	FATFS *fs = dp->obj.fs;
 8058b9a:	f8d0 a000 	ldr.w	sl, [r0]
{
 8058b9e:	4607      	mov	r7, r0
 8058ba0:	460c      	mov	r4, r1
	fno->fname[0] = 0;			/* Invaidate file info */
 8058ba2:	758e      	strb	r6, [r1, #22]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8058ba4:	6983      	ldr	r3, [r0, #24]
 8058ba6:	2b00      	cmp	r3, #0
 8058ba8:	f000 8090 	beq.w	8058ccc <get_fileinfo+0x138>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8058bac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8058bae:	3301      	adds	r3, #1
 8058bb0:	d16f      	bne.n	8058c92 <get_fileinfo+0xfe>
		wc = dp->dir[si++];			/* Get a char */
 8058bb2:	69fa      	ldr	r2, [r7, #28]
 8058bb4:	2300      	movs	r3, #0
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 8058bb6:	262e      	movs	r6, #46	; 0x2e
 8058bb8:	1e55      	subs	r5, r2, #1
		wc = dp->dir[si++];			/* Get a char */
 8058bba:	4618      	mov	r0, r3
 8058bbc:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8058bc0:	3001      	adds	r0, #1
		if (wc == ' ') continue;	/* Skip padding spaces */
 8058bc2:	2920      	cmp	r1, #32
 8058bc4:	d00c      	beq.n	8058be0 <get_fileinfo+0x4c>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 8058bc6:	2905      	cmp	r1, #5
 8058bc8:	bf08      	it	eq
 8058bca:	21e5      	moveq	r1, #229	; 0xe5
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 8058bcc:	2809      	cmp	r0, #9
 8058bce:	d104      	bne.n	8058bda <get_fileinfo+0x46>
 8058bd0:	2b0b      	cmp	r3, #11
 8058bd2:	bf9e      	ittt	ls
 8058bd4:	18e7      	addls	r7, r4, r3
 8058bd6:	3301      	addls	r3, #1
 8058bd8:	727e      	strbls	r6, [r7, #9]
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
 8058bda:	18e7      	adds	r7, r4, r3
 8058bdc:	3301      	adds	r3, #1
 8058bde:	7279      	strb	r1, [r7, #9]
	while (si < 11) {		/* Get SFN from SFN entry */
 8058be0:	280b      	cmp	r0, #11
 8058be2:	d1eb      	bne.n	8058bbc <get_fileinfo+0x28>
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
 8058be4:	18e1      	adds	r1, r4, r3
 8058be6:	2000      	movs	r0, #0
 8058be8:	7248      	strb	r0, [r1, #9]
	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
 8058bea:	7da1      	ldrb	r1, [r4, #22]
 8058bec:	2900      	cmp	r1, #0
 8058bee:	d160      	bne.n	8058cb2 <get_fileinfo+0x11e>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
 8058bf0:	2b00      	cmp	r3, #0
 8058bf2:	d055      	beq.n	8058ca0 <get_fileinfo+0x10c>
 8058bf4:	f06f 0608 	mvn.w	r6, #8
 8058bf8:	f104 0009 	add.w	r0, r4, #9
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 8058bfc:	2508      	movs	r5, #8
 8058bfe:	1b36      	subs	r6, r6, r4
 8058c00:	1831      	adds	r1, r6, r0
 8058c02:	f810 3b01 	ldrb.w	r3, [r0], #1
 8058c06:	2b00      	cmp	r3, #0
 8058c08:	d04d      	beq.n	8058ca6 <get_fileinfo+0x112>
				if (wc == '.') lcf = NS_EXT;
 8058c0a:	2b2e      	cmp	r3, #46	; 0x2e
				wc = (WCHAR)fno->altname[si];
 8058c0c:	b299      	uxth	r1, r3
				if (wc == '.') lcf = NS_EXT;
 8058c0e:	d05f      	beq.n	8058cd0 <get_fileinfo+0x13c>
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 8058c10:	f1a1 0741 	sub.w	r7, r1, #65	; 0x41
 8058c14:	2f19      	cmp	r7, #25
 8058c16:	d804      	bhi.n	8058c22 <get_fileinfo+0x8e>
 8058c18:	7b17      	ldrb	r7, [r2, #12]
 8058c1a:	423d      	tst	r5, r7
 8058c1c:	d001      	beq.n	8058c22 <get_fileinfo+0x8e>
 8058c1e:	f103 0120 	add.w	r1, r3, #32
				fno->fname[di] = (TCHAR)wc;
 8058c22:	7301      	strb	r1, [r0, #12]
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 8058c24:	e7ec      	b.n	8058c00 <get_fileinfo+0x6c>
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 8058c26:	f1b9 0f00 	cmp.w	r9, #0
 8058c2a:	d105      	bne.n	8058c38 <get_fileinfo+0xa4>
 8058c2c:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
 8058c30:	b29b      	uxth	r3, r3
 8058c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8058c36:	d313      	bcc.n	8058c60 <get_fileinfo+0xcc>
	wc = ff_uni2oem(chr, CODEPAGE);
 8058c38:	f240 11b5 	movw	r1, #437	; 0x1b5
 8058c3c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8058c40:	f7f6 fe2a 	bl	804f898 <ff_uni2oem>
	if (wc >= 0x100) {	/* Is this a DBC? */
 8058c44:	28ff      	cmp	r0, #255	; 0xff
				nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 8058c46:	f1c8 05ff 	rsb	r5, r8, #255	; 0xff
	if (wc >= 0x100) {	/* Is this a DBC? */
 8058c4a:	d91a      	bls.n	8058c82 <get_fileinfo+0xee>
		if (szb < 2) return 0;
 8058c4c:	2d01      	cmp	r5, #1
 8058c4e:	d923      	bls.n	8058c98 <get_fileinfo+0x104>
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 8058c50:	eb04 0308 	add.w	r3, r4, r8
 8058c54:	0a02      	lsrs	r2, r0, #8
		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 8058c56:	75d8      	strb	r0, [r3, #23]
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 8058c58:	759a      	strb	r2, [r3, #22]
		return 2;
 8058c5a:	2302      	movs	r3, #2
				di += nw;
 8058c5c:	4498      	add	r8, r3
				hs = 0;
 8058c5e:	2000      	movs	r0, #0
 8058c60:	3602      	adds	r6, #2
 8058c62:	4681      	mov	r9, r0
			while (fs->lfnbuf[si] != 0) {
 8058c64:	f8da 300c 	ldr.w	r3, [sl, #12]
 8058c68:	5b98      	ldrh	r0, [r3, r6]
 8058c6a:	2800      	cmp	r0, #0
 8058c6c:	d1db      	bne.n	8058c26 <get_fileinfo+0x92>
 8058c6e:	4645      	mov	r5, r8
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 8058c70:	f1b9 0f00 	cmp.w	r9, #0
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 8058c74:	f04f 0300 	mov.w	r3, #0
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 8058c78:	bf18      	it	ne
 8058c7a:	2500      	movne	r5, #0
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 8058c7c:	4425      	add	r5, r4
 8058c7e:	75ab      	strb	r3, [r5, #22]
 8058c80:	e797      	b.n	8058bb2 <get_fileinfo+0x1e>
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 8058c82:	b158      	cbz	r0, 8058c9c <get_fileinfo+0x108>
 8058c84:	2d00      	cmp	r5, #0
 8058c86:	d0f3      	beq.n	8058c70 <get_fileinfo+0xdc>
	*buf++ = (TCHAR)wc;					/* Store the character */
 8058c88:	eb04 0308 	add.w	r3, r4, r8
 8058c8c:	7598      	strb	r0, [r3, #22]
	return 1;
 8058c8e:	2301      	movs	r3, #1
 8058c90:	e7e4      	b.n	8058c5c <get_fileinfo+0xc8>
			hs = 0;
 8058c92:	46b1      	mov	r9, r6
			si = di = 0;
 8058c94:	46b0      	mov	r8, r6
 8058c96:	e7e5      	b.n	8058c64 <get_fileinfo+0xd0>
				if (nw == 0) { di = 0; break; }	/* Buffer overflow or wrong char? */
 8058c98:	2500      	movs	r5, #0
 8058c9a:	e7e9      	b.n	8058c70 <get_fileinfo+0xdc>
 8058c9c:	4605      	mov	r5, r0
 8058c9e:	e7e7      	b.n	8058c70 <get_fileinfo+0xdc>
			fno->fname[di++] = '?';
 8058ca0:	233f      	movs	r3, #63	; 0x3f
 8058ca2:	2101      	movs	r1, #1
 8058ca4:	75a3      	strb	r3, [r4, #22]
		fno->fname[di] = 0;	/* Terminate the LFN */
 8058ca6:	2300      	movs	r3, #0
 8058ca8:	4421      	add	r1, r4
 8058caa:	758b      	strb	r3, [r1, #22]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
 8058cac:	7b13      	ldrb	r3, [r2, #12]
 8058cae:	b903      	cbnz	r3, 8058cb2 <get_fileinfo+0x11e>
 8058cb0:	7263      	strb	r3, [r4, #9]
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 8058cb2:	7ad3      	ldrb	r3, [r2, #11]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8058cb4:	f102 001c 	add.w	r0, r2, #28
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 8058cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8058cbc:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8058cbe:	f7ff ff20 	bl	8058b02 <ld_dword>
 8058cc2:	6020      	str	r0, [r4, #0]
	rv = ptr[1];
 8058cc4:	8ad3      	ldrh	r3, [r2, #22]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 8058cc6:	80e3      	strh	r3, [r4, #6]
	rv = ptr[1];
 8058cc8:	8b13      	ldrh	r3, [r2, #24]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 8058cca:	80a3      	strh	r3, [r4, #4]
}
 8058ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (wc == '.') lcf = NS_EXT;
 8058cd0:	2510      	movs	r5, #16
 8058cd2:	4619      	mov	r1, r3
 8058cd4:	e7a5      	b.n	8058c22 <get_fileinfo+0x8e>

08058cd6 <sync_window>:
{
 8058cd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8058cd8:	78c3      	ldrb	r3, [r0, #3]
{
 8058cda:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8058cdc:	b91b      	cbnz	r3, 8058ce6 <sync_window+0x10>
	FRESULT res = FR_OK;
 8058cde:	2500      	movs	r5, #0
}
 8058ce0:	4628      	mov	r0, r5
 8058ce2:	b003      	add	sp, #12
 8058ce4:	bd30      	pop	{r4, r5, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8058ce6:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8058cea:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8058cec:	2301      	movs	r3, #1
 8058cee:	7840      	ldrb	r0, [r0, #1]
 8058cf0:	9101      	str	r1, [sp, #4]
 8058cf2:	f7f6 fd97 	bl	804f824 <disk_write>
 8058cf6:	4605      	mov	r5, r0
 8058cf8:	b980      	cbnz	r0, 8058d1c <sync_window+0x46>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8058cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
			fs->wflag = 0;	/* Clear window dirty flag */
 8058cfc:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8058cfe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8058d00:	69e2      	ldr	r2, [r4, #28]
 8058d02:	1ac3      	subs	r3, r0, r3
 8058d04:	4293      	cmp	r3, r2
 8058d06:	d2ea      	bcs.n	8058cde <sync_window+0x8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8058d08:	78a3      	ldrb	r3, [r4, #2]
 8058d0a:	9901      	ldr	r1, [sp, #4]
 8058d0c:	2b02      	cmp	r3, #2
 8058d0e:	d1e6      	bne.n	8058cde <sync_window+0x8>
 8058d10:	4402      	add	r2, r0
 8058d12:	2301      	movs	r3, #1
 8058d14:	7860      	ldrb	r0, [r4, #1]
 8058d16:	f7f6 fd85 	bl	804f824 <disk_write>
 8058d1a:	e7e1      	b.n	8058ce0 <sync_window+0xa>
			res = FR_DISK_ERR;
 8058d1c:	2501      	movs	r5, #1
 8058d1e:	e7df      	b.n	8058ce0 <sync_window+0xa>

08058d20 <move_window>:
{
 8058d20:	b538      	push	{r3, r4, r5, lr}
	if (sect != fs->winsect) {	/* Window offset changed? */
 8058d22:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 8058d24:	4605      	mov	r5, r0
 8058d26:	460c      	mov	r4, r1
	if (sect != fs->winsect) {	/* Window offset changed? */
 8058d28:	428b      	cmp	r3, r1
 8058d2a:	d010      	beq.n	8058d4e <move_window+0x2e>
		res = sync_window(fs);		/* Flush the window */
 8058d2c:	f7ff ffd3 	bl	8058cd6 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8058d30:	b960      	cbnz	r0, 8058d4c <move_window+0x2c>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8058d32:	4622      	mov	r2, r4
 8058d34:	2301      	movs	r3, #1
 8058d36:	f105 0134 	add.w	r1, r5, #52	; 0x34
 8058d3a:	7868      	ldrb	r0, [r5, #1]
 8058d3c:	f7f6 fd66 	bl	804f80c <disk_read>
				res = FR_DISK_ERR;
 8058d40:	2800      	cmp	r0, #0
 8058d42:	bf1c      	itt	ne
 8058d44:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
 8058d48:	2001      	movne	r0, #1
			fs->winsect = sect;
 8058d4a:	632c      	str	r4, [r5, #48]	; 0x30
}
 8058d4c:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 8058d4e:	2000      	movs	r0, #0
 8058d50:	e7fc      	b.n	8058d4c <move_window+0x2c>

08058d52 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8058d52:	2901      	cmp	r1, #1
{
 8058d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8058d58:	4606      	mov	r6, r0
 8058d5a:	460c      	mov	r4, r1
 8058d5c:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8058d5e:	d974      	bls.n	8058e4a <put_fat+0xf8>
 8058d60:	6983      	ldr	r3, [r0, #24]
 8058d62:	428b      	cmp	r3, r1
 8058d64:	d971      	bls.n	8058e4a <put_fat+0xf8>
		switch (fs->fs_type) {
 8058d66:	7803      	ldrb	r3, [r0, #0]
 8058d68:	2b02      	cmp	r3, #2
 8058d6a:	d040      	beq.n	8058dee <put_fat+0x9c>
 8058d6c:	2b03      	cmp	r3, #3
 8058d6e:	d051      	beq.n	8058e14 <put_fat+0xc2>
 8058d70:	2b01      	cmp	r3, #1
 8058d72:	d16a      	bne.n	8058e4a <put_fat+0xf8>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8058d74:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8058d78:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8058d7a:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8058d7e:	f7ff ffcf 	bl	8058d20 <move_window>
 8058d82:	4605      	mov	r5, r0
			if (res != FR_OK) break;
 8058d84:	bb40      	cbnz	r0, 8058dd8 <put_fat+0x86>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8058d86:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 8058d8a:	f106 0934 	add.w	r9, r6, #52	; 0x34
 8058d8e:	f108 0a01 	add.w	sl, r8, #1
 8058d92:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8058d96:	bf08      	it	eq
 8058d98:	b2fb      	uxtbeq	r3, r7
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8058d9a:	4630      	mov	r0, r6
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8058d9c:	bf1f      	itttt	ne
 8058d9e:	f819 3008 	ldrbne.w	r3, [r9, r8]
 8058da2:	f003 020f 	andne.w	r2, r3, #15
 8058da6:	013b      	lslne	r3, r7, #4
 8058da8:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8058dac:	bf18      	it	ne
 8058dae:	4313      	orrne	r3, r2
 8058db0:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 8058db4:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8058db6:	6a71      	ldr	r1, [r6, #36]	; 0x24
			fs->wflag = 1;
 8058db8:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8058dba:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8058dbe:	f7ff ffaf 	bl	8058d20 <move_window>
			if (res != FR_OK) break;
 8058dc2:	4605      	mov	r5, r0
 8058dc4:	b940      	cbnz	r0, 8058dd8 <put_fat+0x86>
			p = fs->win + bc % SS(fs);
 8058dc6:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8058dca:	b144      	cbz	r4, 8058dde <put_fat+0x8c>
 8058dcc:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8058dd0:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 8058dd4:	2301      	movs	r3, #1
 8058dd6:	70f3      	strb	r3, [r6, #3]
}
 8058dd8:	4628      	mov	r0, r5
 8058dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8058dde:	f819 300a 	ldrb.w	r3, [r9, sl]
 8058de2:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8058de6:	f023 030f 	bic.w	r3, r3, #15
 8058dea:	431f      	orrs	r7, r3
 8058dec:	e7f0      	b.n	8058dd0 <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8058dee:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8058df0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8058df4:	f7ff ff94 	bl	8058d20 <move_window>
			if (res != FR_OK) break;
 8058df8:	4605      	mov	r5, r0
 8058dfa:	2800      	cmp	r0, #0
 8058dfc:	d1ec      	bne.n	8058dd8 <put_fat+0x86>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8058dfe:	0064      	lsls	r4, r4, #1
 8058e00:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8058e04:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 8058e08:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8058e0a:	1918      	adds	r0, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8058e0c:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8058e10:	7047      	strb	r7, [r0, #1]
			fs->wflag = 1;
 8058e12:	e7df      	b.n	8058dd4 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8058e14:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8058e16:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8058e1a:	f7ff ff81 	bl	8058d20 <move_window>
			if (res != FR_OK) break;
 8058e1e:	4605      	mov	r5, r0
 8058e20:	2800      	cmp	r0, #0
 8058e22:	d1d9      	bne.n	8058dd8 <put_fat+0x86>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8058e24:	00a4      	lsls	r4, r4, #2
 8058e26:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8058e2a:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8058e2e:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8058e32:	441c      	add	r4, r3
 8058e34:	4620      	mov	r0, r4
 8058e36:	f7ff fe64 	bl	8058b02 <ld_dword>
 8058e3a:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8058e3e:	ea47 0100 	orr.w	r1, r7, r0
 8058e42:	4620      	mov	r0, r4
 8058e44:	f7ff fe5f 	bl	8058b06 <st_dword>
 8058e48:	e7c4      	b.n	8058dd4 <put_fat+0x82>
		switch (fs->fs_type) {
 8058e4a:	2502      	movs	r5, #2
 8058e4c:	e7c4      	b.n	8058dd8 <put_fat+0x86>

08058e4e <dir_clear>:
{
 8058e4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8058e50:	4605      	mov	r5, r0
 8058e52:	9101      	str	r1, [sp, #4]
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8058e54:	f7ff ff3f 	bl	8058cd6 <sync_window>
 8058e58:	4604      	mov	r4, r0
 8058e5a:	bb00      	cbnz	r0, 8058e9e <dir_clear+0x50>
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8058e5c:	f105 0734 	add.w	r7, r5, #52	; 0x34
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8058e60:	9901      	ldr	r1, [sp, #4]
 8058e62:	4628      	mov	r0, r5
 8058e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8058e68:	f7ff fe55 	bl	8058b16 <clst2sect>
 8058e6c:	4621      	mov	r1, r4
 8058e6e:	4606      	mov	r6, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
 8058e70:	6328      	str	r0, [r5, #48]	; 0x30
 8058e72:	4638      	mov	r0, r7
 8058e74:	f001 ffea 	bl	805ae4c <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8058e78:	896b      	ldrh	r3, [r5, #10]
 8058e7a:	429c      	cmp	r4, r3
 8058e7c:	d305      	bcc.n	8058e8a <dir_clear+0x3c>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8058e7e:	8968      	ldrh	r0, [r5, #10]
 8058e80:	1b00      	subs	r0, r0, r4
 8058e82:	bf18      	it	ne
 8058e84:	2001      	movne	r0, #1
}
 8058e86:	b003      	add	sp, #12
 8058e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8058e8a:	2301      	movs	r3, #1
 8058e8c:	1932      	adds	r2, r6, r4
 8058e8e:	4639      	mov	r1, r7
 8058e90:	7868      	ldrb	r0, [r5, #1]
 8058e92:	f7f6 fcc7 	bl	804f824 <disk_write>
 8058e96:	2800      	cmp	r0, #0
 8058e98:	d1f1      	bne.n	8058e7e <dir_clear+0x30>
 8058e9a:	3401      	adds	r4, #1
 8058e9c:	e7ec      	b.n	8058e78 <dir_clear+0x2a>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8058e9e:	2001      	movs	r0, #1
 8058ea0:	e7f1      	b.n	8058e86 <dir_clear+0x38>

08058ea2 <sync_fs>:
{
 8058ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8058ea4:	4604      	mov	r4, r0
	res = sync_window(fs);
 8058ea6:	f7ff ff16 	bl	8058cd6 <sync_window>
 8058eaa:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8058eac:	2800      	cmp	r0, #0
 8058eae:	d142      	bne.n	8058f36 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8058eb0:	7823      	ldrb	r3, [r4, #0]
 8058eb2:	2b03      	cmp	r3, #3
 8058eb4:	d137      	bne.n	8058f26 <sync_fs+0x84>
 8058eb6:	7927      	ldrb	r7, [r4, #4]
 8058eb8:	2f01      	cmp	r7, #1
 8058eba:	d134      	bne.n	8058f26 <sync_fs+0x84>
			memset(fs->win, 0, sizeof fs->win);
 8058ebc:	f104 0634 	add.w	r6, r4, #52	; 0x34
 8058ec0:	4601      	mov	r1, r0
 8058ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8058ec6:	4630      	mov	r0, r6
 8058ec8:	f001 ffc0 	bl	805ae4c <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8058ecc:	2355      	movs	r3, #85	; 0x55
	*ptr++ = (BYTE)val;
 8058ece:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8058ed0:	2172      	movs	r1, #114	; 0x72
	*ptr++ = (BYTE)val; val >>= 8;
 8058ed2:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 8058ed6:	23aa      	movs	r3, #170	; 0xaa
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8058ed8:	f504 7007 	add.w	r0, r4, #540	; 0x21c
	*ptr++ = (BYTE)val;
 8058edc:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val;
 8058ee0:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 8058ee4:	2352      	movs	r3, #82	; 0x52
 8058ee6:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
 8058eea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8058eee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 8058ef2:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val; val >>= 8;
 8058ef4:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
	*ptr++ = (BYTE)val; val >>= 8;
 8058ef8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 8058efc:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8058f00:	6961      	ldr	r1, [r4, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8058f02:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8058f06:	f7ff fdfe 	bl	8058b06 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8058f0a:	6921      	ldr	r1, [r4, #16]
 8058f0c:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8058f10:	f7ff fdf9 	bl	8058b06 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8058f14:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8058f16:	463b      	mov	r3, r7
 8058f18:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8058f1a:	3201      	adds	r2, #1
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8058f1c:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8058f1e:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8058f20:	f7f6 fc80 	bl	804f824 <disk_write>
			fs->fsi_flag = 0;
 8058f24:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8058f26:	2200      	movs	r2, #0
 8058f28:	7860      	ldrb	r0, [r4, #1]
 8058f2a:	4611      	mov	r1, r2
 8058f2c:	f7f6 fc86 	bl	804f83c <disk_ioctl>
	res = sync_window(fs);
 8058f30:	3800      	subs	r0, #0
 8058f32:	bf18      	it	ne
 8058f34:	2001      	movne	r0, #1
}
 8058f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08058f38 <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 8058f38:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8058f3a:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8058f3c:	bf04      	itt	eq
 8058f3e:	8a8a      	ldrheq	r2, [r1, #20]
 8058f40:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8058f44:	4618      	mov	r0, r3
 8058f46:	4770      	bx	lr

08058f48 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8058f48:	2901      	cmp	r1, #1
static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8058f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8058f4c:	4606      	mov	r6, r0
 8058f4e:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8058f50:	d94e      	bls.n	8058ff0 <get_fat.isra.0+0xa8>
 8058f52:	6983      	ldr	r3, [r0, #24]
 8058f54:	4299      	cmp	r1, r3
 8058f56:	d24b      	bcs.n	8058ff0 <get_fat.isra.0+0xa8>
		switch (fs->fs_type) {
 8058f58:	7803      	ldrb	r3, [r0, #0]
 8058f5a:	2b02      	cmp	r3, #2
 8058f5c:	d029      	beq.n	8058fb2 <get_fat.isra.0+0x6a>
 8058f5e:	2b03      	cmp	r3, #3
 8058f60:	d034      	beq.n	8058fcc <get_fat.isra.0+0x84>
 8058f62:	2b01      	cmp	r3, #1
 8058f64:	d144      	bne.n	8058ff0 <get_fat.isra.0+0xa8>
			bc = (UINT)clst; bc += bc / 2;
 8058f66:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8058f6a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8058f6c:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 8058f70:	f7ff fed6 	bl	8058d20 <move_window>
 8058f74:	b110      	cbz	r0, 8058f7c <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8058f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8058f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8058f7c:	1c6f      	adds	r7, r5, #1
 8058f7e:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8058f82:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8058f84:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8058f86:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8058f88:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8058f8c:	f895 5034 	ldrb.w	r5, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8058f90:	f7ff fec6 	bl	8058d20 <move_window>
 8058f94:	2800      	cmp	r0, #0
 8058f96:	d1ee      	bne.n	8058f76 <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8058f98:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8058f9c:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8058f9e:	443e      	add	r6, r7
 8058fa0:	f896 0034 	ldrb.w	r0, [r6, #52]	; 0x34
 8058fa4:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8058fa8:	bf4c      	ite	mi
 8058faa:	0900      	lsrmi	r0, r0, #4
 8058fac:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8058fb0:	e7e3      	b.n	8058f7a <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8058fb2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8058fb4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8058fb8:	f7ff feb2 	bl	8058d20 <move_window>
 8058fbc:	2800      	cmp	r0, #0
 8058fbe:	d1da      	bne.n	8058f76 <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8058fc0:	0064      	lsls	r4, r4, #1
 8058fc2:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8058fc6:	4426      	add	r6, r4
 8058fc8:	8eb0      	ldrh	r0, [r6, #52]	; 0x34
			break;
 8058fca:	e7d6      	b.n	8058f7a <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8058fcc:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8058fce:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8058fd2:	f7ff fea5 	bl	8058d20 <move_window>
 8058fd6:	2800      	cmp	r0, #0
 8058fd8:	d1cd      	bne.n	8058f76 <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8058fda:	00a4      	lsls	r4, r4, #2
 8058fdc:	f106 0034 	add.w	r0, r6, #52	; 0x34
 8058fe0:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8058fe4:	4420      	add	r0, r4
 8058fe6:	f7ff fd8c 	bl	8058b02 <ld_dword>
 8058fea:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8058fee:	e7c4      	b.n	8058f7a <get_fat.isra.0+0x32>
		switch (fs->fs_type) {
 8058ff0:	2001      	movs	r0, #1
	return val;
 8058ff2:	e7c2      	b.n	8058f7a <get_fat.isra.0+0x32>

08058ff4 <remove_chain.isra.0>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
 8058ff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8058ff6:	460c      	mov	r4, r1
 8058ff8:	4605      	mov	r5, r0
 8058ffa:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8058ffc:	2c01      	cmp	r4, #1
 8058ffe:	d92b      	bls.n	8059058 <remove_chain.isra.0+0x64>
 8059000:	6983      	ldr	r3, [r0, #24]
 8059002:	429c      	cmp	r4, r3
 8059004:	d228      	bcs.n	8059058 <remove_chain.isra.0+0x64>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8059006:	b122      	cbz	r2, 8059012 <remove_chain.isra.0+0x1e>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8059008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 805900c:	f7ff fea1 	bl	8058d52 <put_fat>
		if (res != FR_OK) return res;
 8059010:	b940      	cbnz	r0, 8059024 <remove_chain.isra.0+0x30>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8059012:	4621      	mov	r1, r4
 8059014:	4628      	mov	r0, r5
 8059016:	9401      	str	r4, [sp, #4]
 8059018:	f7ff ff96 	bl	8058f48 <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
 805901c:	9901      	ldr	r1, [sp, #4]
 805901e:	4604      	mov	r4, r0
 8059020:	b910      	cbnz	r0, 8059028 <remove_chain.isra.0+0x34>
	return FR_OK;
 8059022:	2000      	movs	r0, #0
}
 8059024:	b003      	add	sp, #12
 8059026:	bd30      	pop	{r4, r5, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8059028:	2801      	cmp	r0, #1
 805902a:	d015      	beq.n	8059058 <remove_chain.isra.0+0x64>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 805902c:	1c43      	adds	r3, r0, #1
 805902e:	d015      	beq.n	805905c <remove_chain.isra.0+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8059030:	2200      	movs	r2, #0
 8059032:	4628      	mov	r0, r5
 8059034:	f7ff fe8d 	bl	8058d52 <put_fat>
			if (res != FR_OK) return res;
 8059038:	2800      	cmp	r0, #0
 805903a:	d1f3      	bne.n	8059024 <remove_chain.isra.0+0x30>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 805903c:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 8059040:	1e91      	subs	r1, r2, #2
 8059042:	428b      	cmp	r3, r1
 8059044:	d205      	bcs.n	8059052 <remove_chain.isra.0+0x5e>
			fs->free_clst++;
 8059046:	3301      	adds	r3, #1
 8059048:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 805904a:	792b      	ldrb	r3, [r5, #4]
 805904c:	f043 0301 	orr.w	r3, r3, #1
 8059050:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8059052:	4294      	cmp	r4, r2
 8059054:	d3dd      	bcc.n	8059012 <remove_chain.isra.0+0x1e>
 8059056:	e7e4      	b.n	8059022 <remove_chain.isra.0+0x2e>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8059058:	2002      	movs	r0, #2
 805905a:	e7e3      	b.n	8059024 <remove_chain.isra.0+0x30>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 805905c:	2001      	movs	r0, #1
 805905e:	e7e1      	b.n	8059024 <remove_chain.isra.0+0x30>

08059060 <create_chain.isra.0>:
static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
 8059060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8059062:	4605      	mov	r5, r0
	if (clst == 0) {	/* Create a new chain */
 8059064:	460f      	mov	r7, r1
 8059066:	b949      	cbnz	r1, 805907c <create_chain.isra.0+0x1c>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8059068:	6906      	ldr	r6, [r0, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 805906a:	b1b6      	cbz	r6, 805909a <create_chain.isra.0+0x3a>
 805906c:	6983      	ldr	r3, [r0, #24]
 805906e:	429e      	cmp	r6, r3
 8059070:	bf28      	it	cs
 8059072:	2601      	movcs	r6, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8059074:	696b      	ldr	r3, [r5, #20]
 8059076:	b993      	cbnz	r3, 805909e <create_chain.isra.0+0x3e>
 8059078:	2400      	movs	r4, #0
 805907a:	e005      	b.n	8059088 <create_chain.isra.0+0x28>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 805907c:	f7ff ff64 	bl	8058f48 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Test for insanity */
 8059080:	2801      	cmp	r0, #1
 8059082:	4604      	mov	r4, r0
 8059084:	d802      	bhi.n	805908c <create_chain.isra.0+0x2c>
 8059086:	2401      	movs	r4, #1
}
 8059088:	4620      	mov	r0, r4
 805908a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 805908c:	1c42      	adds	r2, r0, #1
 805908e:	d050      	beq.n	8059132 <create_chain.isra.0+0xd2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8059090:	69ab      	ldr	r3, [r5, #24]
 8059092:	4298      	cmp	r0, r3
 8059094:	d3f8      	bcc.n	8059088 <create_chain.isra.0+0x28>
 8059096:	463e      	mov	r6, r7
 8059098:	e7ec      	b.n	8059074 <create_chain.isra.0+0x14>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 805909a:	2601      	movs	r6, #1
 805909c:	e7ea      	b.n	8059074 <create_chain.isra.0+0x14>
		if (scl == clst) {						/* Stretching an existing chain? */
 805909e:	42b7      	cmp	r7, r6
 80590a0:	d115      	bne.n	80590ce <create_chain.isra.0+0x6e>
			if (ncl >= fs->n_fatent) ncl = 2;
 80590a2:	69ab      	ldr	r3, [r5, #24]
			ncl = scl + 1;						/* Test if next cluster is free */
 80590a4:	1c7c      	adds	r4, r7, #1
			if (ncl >= fs->n_fatent) ncl = 2;
 80590a6:	4628      	mov	r0, r5
 80590a8:	429c      	cmp	r4, r3
 80590aa:	bf28      	it	cs
 80590ac:	2402      	movcs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 80590ae:	4621      	mov	r1, r4
 80590b0:	f7ff ff4a 	bl	8058f48 <get_fat.isra.0>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80590b4:	2801      	cmp	r0, #1
 80590b6:	d0e6      	beq.n	8059086 <create_chain.isra.0+0x26>
 80590b8:	1c43      	adds	r3, r0, #1
 80590ba:	d03a      	beq.n	8059132 <create_chain.isra.0+0xd2>
			if (cs != 0) {						/* Not free? */
 80590bc:	b1d8      	cbz	r0, 80590f6 <create_chain.isra.0+0x96>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 80590be:	692b      	ldr	r3, [r5, #16]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 80590c0:	2b01      	cmp	r3, #1
 80590c2:	d904      	bls.n	80590ce <create_chain.isra.0+0x6e>
 80590c4:	69aa      	ldr	r2, [r5, #24]
 80590c6:	4293      	cmp	r3, r2
 80590c8:	bf34      	ite	cc
 80590ca:	461e      	movcc	r6, r3
 80590cc:	463e      	movcs	r6, r7
 80590ce:	4634      	mov	r4, r6
				ncl++;							/* Next cluster */
 80590d0:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80590d2:	69ab      	ldr	r3, [r5, #24]
 80590d4:	429c      	cmp	r4, r3
 80590d6:	d302      	bcc.n	80590de <create_chain.isra.0+0x7e>
					if (ncl > scl) return 0;	/* No free cluster found? */
 80590d8:	2e01      	cmp	r6, #1
 80590da:	d9cd      	bls.n	8059078 <create_chain.isra.0+0x18>
					ncl = 2;
 80590dc:	2402      	movs	r4, #2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 80590de:	4621      	mov	r1, r4
 80590e0:	4628      	mov	r0, r5
 80590e2:	f7ff ff31 	bl	8058f48 <get_fat.isra.0>
				if (cs == 0) break;				/* Found a free cluster? */
 80590e6:	b140      	cbz	r0, 80590fa <create_chain.isra.0+0x9a>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80590e8:	2801      	cmp	r0, #1
 80590ea:	d0cc      	beq.n	8059086 <create_chain.isra.0+0x26>
 80590ec:	3001      	adds	r0, #1
 80590ee:	d020      	beq.n	8059132 <create_chain.isra.0+0xd2>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80590f0:	42a6      	cmp	r6, r4
 80590f2:	d1ed      	bne.n	80590d0 <create_chain.isra.0+0x70>
 80590f4:	e7c0      	b.n	8059078 <create_chain.isra.0+0x18>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 80590f6:	2c00      	cmp	r4, #0
 80590f8:	d0e9      	beq.n	80590ce <create_chain.isra.0+0x6e>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 80590fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80590fe:	4621      	mov	r1, r4
 8059100:	4628      	mov	r0, r5
 8059102:	f7ff fe26 	bl	8058d52 <put_fat>
		if (res == FR_OK && clst != 0) {
 8059106:	b990      	cbnz	r0, 805912e <create_chain.isra.0+0xce>
 8059108:	b957      	cbnz	r7, 8059120 <create_chain.isra.0+0xc0>
		fs->last_clst = ncl;
 805910a:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 805910c:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 8059110:	3a02      	subs	r2, #2
 8059112:	4293      	cmp	r3, r2
 8059114:	d910      	bls.n	8059138 <create_chain.isra.0+0xd8>
		fs->fsi_flag |= 1;
 8059116:	792b      	ldrb	r3, [r5, #4]
 8059118:	f043 0301 	orr.w	r3, r3, #1
 805911c:	712b      	strb	r3, [r5, #4]
 805911e:	e7b3      	b.n	8059088 <create_chain.isra.0+0x28>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8059120:	4622      	mov	r2, r4
 8059122:	4639      	mov	r1, r7
 8059124:	4628      	mov	r0, r5
 8059126:	f7ff fe14 	bl	8058d52 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 805912a:	2800      	cmp	r0, #0
 805912c:	d0ed      	beq.n	805910a <create_chain.isra.0+0xaa>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 805912e:	2801      	cmp	r0, #1
 8059130:	d1a9      	bne.n	8059086 <create_chain.isra.0+0x26>
 8059132:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8059136:	e7a7      	b.n	8059088 <create_chain.isra.0+0x28>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8059138:	3b01      	subs	r3, #1
 805913a:	616b      	str	r3, [r5, #20]
 805913c:	e7eb      	b.n	8059116 <create_chain.isra.0+0xb6>

0805913e <dir_next>:
{
 805913e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8059142:	6907      	ldr	r7, [r0, #16]
{
 8059144:	4604      	mov	r4, r0
 8059146:	4689      	mov	r9, r1
	FATFS *fs = dp->obj.fs;
 8059148:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 805914a:	3720      	adds	r7, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 805914c:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
 8059150:	bf24      	itt	cs
 8059152:	2300      	movcs	r3, #0
 8059154:	6183      	strcs	r3, [r0, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8059156:	6983      	ldr	r3, [r0, #24]
 8059158:	b173      	cbz	r3, 8059178 <dir_next+0x3a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 805915a:	f3c7 0808 	ubfx	r8, r7, #0, #9
 805915e:	f1b8 0f00 	cmp.w	r8, #0
 8059162:	d139      	bne.n	80591d8 <dir_next+0x9a>
		dp->sect++;				/* Next sector */
 8059164:	3301      	adds	r3, #1
		if (dp->clust == 0) {	/* Static table */
 8059166:	6941      	ldr	r1, [r0, #20]
		dp->sect++;				/* Next sector */
 8059168:	6183      	str	r3, [r0, #24]
		if (dp->clust == 0) {	/* Static table */
 805916a:	b939      	cbnz	r1, 805917c <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 805916c:	8933      	ldrh	r3, [r6, #8]
 805916e:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 8059172:	d831      	bhi.n	80591d8 <dir_next+0x9a>
				dp->sect = 0; return FR_NO_FILE;
 8059174:	2300      	movs	r3, #0
 8059176:	61a3      	str	r3, [r4, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8059178:	2004      	movs	r0, #4
 805917a:	e00b      	b.n	8059194 <dir_next+0x56>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 805917c:	8973      	ldrh	r3, [r6, #10]
 805917e:	3b01      	subs	r3, #1
 8059180:	ea13 2357 	ands.w	r3, r3, r7, lsr #9
 8059184:	d128      	bne.n	80591d8 <dir_next+0x9a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8059186:	4630      	mov	r0, r6
 8059188:	f7ff fede 	bl	8058f48 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 805918c:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 805918e:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8059190:	d802      	bhi.n	8059198 <dir_next+0x5a>
 8059192:	2002      	movs	r0, #2
}
 8059194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8059198:	1c42      	adds	r2, r0, #1
 805919a:	d101      	bne.n	80591a0 <dir_next+0x62>
 805919c:	2001      	movs	r0, #1
 805919e:	e7f9      	b.n	8059194 <dir_next+0x56>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 80591a0:	69b3      	ldr	r3, [r6, #24]
 80591a2:	4283      	cmp	r3, r0
 80591a4:	d812      	bhi.n	80591cc <dir_next+0x8e>
					if (!stretch) {								/* If no stretch, report EOT */
 80591a6:	f1b9 0f00 	cmp.w	r9, #0
 80591aa:	d0e3      	beq.n	8059174 <dir_next+0x36>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80591ac:	6961      	ldr	r1, [r4, #20]
 80591ae:	6820      	ldr	r0, [r4, #0]
 80591b0:	f7ff ff56 	bl	8059060 <create_chain.isra.0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80591b4:	4605      	mov	r5, r0
 80591b6:	b1a8      	cbz	r0, 80591e4 <dir_next+0xa6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80591b8:	2801      	cmp	r0, #1
 80591ba:	d0ea      	beq.n	8059192 <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80591bc:	1c43      	adds	r3, r0, #1
 80591be:	d0ed      	beq.n	805919c <dir_next+0x5e>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 80591c0:	4601      	mov	r1, r0
 80591c2:	4630      	mov	r0, r6
 80591c4:	f7ff fe43 	bl	8058e4e <dir_clear>
 80591c8:	2800      	cmp	r0, #0
 80591ca:	d1e7      	bne.n	805919c <dir_next+0x5e>
				dp->sect = clst2sect(fs, clst);
 80591cc:	4629      	mov	r1, r5
 80591ce:	4630      	mov	r0, r6
				dp->clust = clst;		/* Initialize data for new cluster */
 80591d0:	6165      	str	r5, [r4, #20]
				dp->sect = clst2sect(fs, clst);
 80591d2:	f7ff fca0 	bl	8058b16 <clst2sect>
 80591d6:	61a0      	str	r0, [r4, #24]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80591d8:	3634      	adds	r6, #52	; 0x34
	return FR_OK;
 80591da:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 80591dc:	6127      	str	r7, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80591de:	4446      	add	r6, r8
 80591e0:	61e6      	str	r6, [r4, #28]
	return FR_OK;
 80591e2:	e7d7      	b.n	8059194 <dir_next+0x56>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80591e4:	2007      	movs	r0, #7
 80591e6:	e7d5      	b.n	8059194 <dir_next+0x56>

080591e8 <dir_sdi>:
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80591e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 80591ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80591ee:	4606      	mov	r6, r0
 80591f0:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80591f2:	d301      	bcc.n	80591f8 <dir_sdi+0x10>
		return FR_INT_ERR;
 80591f4:	2002      	movs	r0, #2
}
 80591f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80591f8:	06ca      	lsls	r2, r1, #27
 80591fa:	d1fb      	bne.n	80591f4 <dir_sdi+0xc>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80591fc:	6882      	ldr	r2, [r0, #8]
	FATFS *fs = dp->obj.fs;
 80591fe:	6805      	ldr	r5, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8059200:	6101      	str	r1, [r0, #16]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8059202:	b9ca      	cbnz	r2, 8059238 <dir_sdi+0x50>
 8059204:	782b      	ldrb	r3, [r5, #0]
 8059206:	2b02      	cmp	r3, #2
 8059208:	d901      	bls.n	805920e <dir_sdi+0x26>
		clst = (DWORD)fs->dirbase;
 805920a:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 805920c:	b99b      	cbnz	r3, 8059236 <dir_sdi+0x4e>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 805920e:	892b      	ldrh	r3, [r5, #8]
 8059210:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8059214:	d9ee      	bls.n	80591f4 <dir_sdi+0xc>
		dp->sect = fs->dirbase;
 8059216:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8059218:	61b3      	str	r3, [r6, #24]
	if (dp->sect == 0) return FR_INT_ERR;
 805921a:	69b3      	ldr	r3, [r6, #24]
	dp->clust = clst;					/* Current cluster# */
 805921c:	6172      	str	r2, [r6, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 805921e:	2b00      	cmp	r3, #0
 8059220:	d0e8      	beq.n	80591f4 <dir_sdi+0xc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8059222:	eb03 2354 	add.w	r3, r3, r4, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8059226:	3534      	adds	r5, #52	; 0x34
 8059228:	f3c4 0408 	ubfx	r4, r4, #0, #9
	return FR_OK;
 805922c:	2000      	movs	r0, #0
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 805922e:	61b3      	str	r3, [r6, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8059230:	442c      	add	r4, r5
 8059232:	61f4      	str	r4, [r6, #28]
	return FR_OK;
 8059234:	e7df      	b.n	80591f6 <dir_sdi+0xe>
 8059236:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8059238:	896f      	ldrh	r7, [r5, #10]
 805923a:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 805923c:	42bc      	cmp	r4, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 805923e:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 8059240:	d204      	bcs.n	805924c <dir_sdi+0x64>
		dp->sect = clst2sect(fs, clst);
 8059242:	4628      	mov	r0, r5
 8059244:	f7ff fc67 	bl	8058b16 <clst2sect>
 8059248:	61b0      	str	r0, [r6, #24]
 805924a:	e7e6      	b.n	805921a <dir_sdi+0x32>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 805924c:	6830      	ldr	r0, [r6, #0]
 805924e:	f7ff fe7b 	bl	8058f48 <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8059252:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8059254:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8059256:	d006      	beq.n	8059266 <dir_sdi+0x7e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8059258:	2801      	cmp	r0, #1
 805925a:	d9cb      	bls.n	80591f4 <dir_sdi+0xc>
 805925c:	69ab      	ldr	r3, [r5, #24]
 805925e:	4283      	cmp	r3, r0
 8059260:	d9c8      	bls.n	80591f4 <dir_sdi+0xc>
			ofs -= csz;
 8059262:	1be4      	subs	r4, r4, r7
 8059264:	e7ea      	b.n	805923c <dir_sdi+0x54>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8059266:	2001      	movs	r0, #1
 8059268:	e7c5      	b.n	80591f6 <dir_sdi+0xe>

0805926a <dir_remove>:
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 805926a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 805926c:	1c4b      	adds	r3, r1, #1
{
 805926e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8059272:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8059274:	6805      	ldr	r5, [r0, #0]
	DWORD last = dp->dptr;
 8059276:	6906      	ldr	r6, [r0, #16]
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8059278:	d118      	bne.n	80592ac <dir_remove+0x42>
				dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'. */
 805927a:	27e5      	movs	r7, #229	; 0xe5
			fs->wflag = 1;
 805927c:	f04f 0801 	mov.w	r8, #1
			res = move_window(fs, dp->sect);
 8059280:	69a1      	ldr	r1, [r4, #24]
 8059282:	4628      	mov	r0, r5
 8059284:	f7ff fd4c 	bl	8058d20 <move_window>
			if (res != FR_OK) break;
 8059288:	b960      	cbnz	r0, 80592a4 <dir_remove+0x3a>
				dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'. */
 805928a:	69e3      	ldr	r3, [r4, #28]
 805928c:	701f      	strb	r7, [r3, #0]
			fs->wflag = 1;
 805928e:	f885 8003 	strb.w	r8, [r5, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8059292:	6923      	ldr	r3, [r4, #16]
 8059294:	42b3      	cmp	r3, r6
 8059296:	d20d      	bcs.n	80592b4 <dir_remove+0x4a>
			res = dir_next(dp, 0);	/* Next entry */
 8059298:	4601      	mov	r1, r0
 805929a:	4620      	mov	r0, r4
 805929c:	f7ff ff4f 	bl	805913e <dir_next>
		} while (res == FR_OK);
 80592a0:	2800      	cmp	r0, #0
 80592a2:	d0ed      	beq.n	8059280 <dir_remove+0x16>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 80592a4:	2804      	cmp	r0, #4
 80592a6:	bf08      	it	eq
 80592a8:	2002      	moveq	r0, #2
 80592aa:	e003      	b.n	80592b4 <dir_remove+0x4a>
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80592ac:	f7ff ff9c 	bl	80591e8 <dir_sdi>
	if (res == FR_OK) {
 80592b0:	2800      	cmp	r0, #0
 80592b2:	d0e2      	beq.n	805927a <dir_remove+0x10>
}
 80592b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080592b8 <f_open>:
{
 80592b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80592bc:	b090      	sub	sp, #64	; 0x40
 80592be:	4617      	mov	r7, r2
	if (!fp) return FR_INVALID_OBJECT;
 80592c0:	4605      	mov	r5, r0
{
 80592c2:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 80592c4:	2800      	cmp	r0, #0
 80592c6:	f000 80c8 	beq.w	805945a <f_open+0x1a2>
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 80592ca:	f002 063f 	and.w	r6, r2, #63	; 0x3f
	res = mount_volume(&path, &fs, mode);
 80592ce:	a903      	add	r1, sp, #12
 80592d0:	a801      	add	r0, sp, #4
 80592d2:	4632      	mov	r2, r6
 80592d4:	f7f5 fa0a 	bl	804e6ec <mount_volume>
	if (res == FR_OK) {
 80592d8:	2800      	cmp	r0, #0
 80592da:	f040 80b6 	bne.w	805944a <f_open+0x192>
		dj.obj.fs = fs;
 80592de:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80592e0:	a804      	add	r0, sp, #16
 80592e2:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 80592e4:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80592e6:	f7f5 fc45 	bl	804eb74 <follow_path>
		if (res == FR_OK) {
 80592ea:	4604      	mov	r4, r0
 80592ec:	b920      	cbnz	r0, 80592f8 <f_open+0x40>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80592ee:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
				res = FR_INVALID_NAME;
 80592f2:	2b00      	cmp	r3, #0
 80592f4:	bfb8      	it	lt
 80592f6:	2406      	movlt	r4, #6
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80592f8:	f017 0f1c 	tst.w	r7, #28
 80592fc:	d072      	beq.n	80593e4 <f_open+0x12c>
			if (res != FR_OK) {					/* No file, create new */
 80592fe:	2c00      	cmp	r4, #0
 8059300:	d043      	beq.n	805938a <f_open+0xd2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8059302:	2c04      	cmp	r4, #4
 8059304:	d13e      	bne.n	8059384 <f_open+0xcc>
					res = dir_register(&dj);
 8059306:	a804      	add	r0, sp, #16
 8059308:	f7f5 fd7e 	bl	804ee08 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 805930c:	4604      	mov	r4, r0
 805930e:	2800      	cmp	r0, #0
 8059310:	d138      	bne.n	8059384 <f_open+0xcc>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8059312:	f046 0608 	orr.w	r6, r6, #8
					st_dword(dj.dir + DIR_CrtTime, tm);
 8059316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8059318:	2400      	movs	r4, #0
	*ptr++ = (BYTE)val;
 805931a:	2250      	movs	r2, #80	; 0x50
	*ptr++ = (BYTE)val; val >>= 8;
 805931c:	2121      	movs	r1, #33	; 0x21
	*ptr++ = (BYTE)val; val >>= 8;
 805931e:	739c      	strb	r4, [r3, #14]
	*ptr++ = (BYTE)val;
 8059320:	745a      	strb	r2, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8059322:	73dc      	strb	r4, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 8059324:	7419      	strb	r1, [r3, #16]
					st_dword(dj.dir + DIR_ModTime, tm);
 8059326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8059328:	f8dd 800c 	ldr.w	r8, [sp, #12]
	*ptr++ = (BYTE)val;
 805932c:	765a      	strb	r2, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 805932e:	759c      	strb	r4, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8059330:	75dc      	strb	r4, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8059332:	7619      	strb	r1, [r3, #24]
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8059334:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8059336:	f898 0000 	ldrb.w	r0, [r8]
 805933a:	f7ff fdfd 	bl	8058f38 <ld_clust.isra.0>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 805933e:	2320      	movs	r3, #32
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8059340:	4622      	mov	r2, r4
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8059342:	4607      	mov	r7, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8059344:	72cb      	strb	r3, [r1, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8059346:	4640      	mov	r0, r8
 8059348:	990b      	ldr	r1, [sp, #44]	; 0x2c
 805934a:	f7ff fbef 	bl	8058b2c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 805934e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					fs->wflag = 1;
 8059350:	2201      	movs	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8059352:	771c      	strb	r4, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8059354:	775c      	strb	r4, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8059356:	779c      	strb	r4, [r3, #30]
	*ptr++ = (BYTE)val;
 8059358:	77dc      	strb	r4, [r3, #31]
					fs->wflag = 1;
 805935a:	9b03      	ldr	r3, [sp, #12]
 805935c:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 805935e:	b1ef      	cbz	r7, 805939c <f_open+0xe4>
						res = remove_chain(&dj.obj, cl, 0);
 8059360:	4622      	mov	r2, r4
 8059362:	4639      	mov	r1, r7
 8059364:	9804      	ldr	r0, [sp, #16]
						sc = fs->winsect;
 8059366:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 805936a:	f7ff fe43 	bl	8058ff4 <remove_chain.isra.0>
						if (res == FR_OK) {
 805936e:	4604      	mov	r4, r0
 8059370:	b940      	cbnz	r0, 8059384 <f_open+0xcc>
							res = move_window(fs, sc);
 8059372:	4641      	mov	r1, r8
 8059374:	9803      	ldr	r0, [sp, #12]
 8059376:	f7ff fcd3 	bl	8058d20 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 805937a:	3f01      	subs	r7, #1
 805937c:	9b03      	ldr	r3, [sp, #12]
		if (res == FR_OK) {
 805937e:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8059380:	611f      	str	r7, [r3, #16]
		if (res == FR_OK) {
 8059382:	b158      	cbz	r0, 805939c <f_open+0xe4>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8059384:	2300      	movs	r3, #0
 8059386:	602b      	str	r3, [r5, #0]
 8059388:	e028      	b.n	80593dc <f_open+0x124>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 805938a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 805938e:	f013 0f11 	tst.w	r3, #17
 8059392:	d131      	bne.n	80593f8 <f_open+0x140>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8059394:	0778      	lsls	r0, r7, #29
 8059396:	d45a      	bmi.n	805944e <f_open+0x196>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8059398:	0739      	lsls	r1, r7, #28
 805939a:	d4bc      	bmi.n	8059316 <f_open+0x5e>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 805939c:	9c03      	ldr	r4, [sp, #12]
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 805939e:	0730      	lsls	r0, r6, #28
			fp->dir_ptr = dj.dir;
 80593a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80593a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 80593a4:	bf48      	it	mi
 80593a6:	f046 0640 	orrmi.w	r6, r6, #64	; 0x40
			fp->dir_ptr = dj.dir;
 80593aa:	6269      	str	r1, [r5, #36]	; 0x24
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80593ac:	622b      	str	r3, [r5, #32]
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80593ae:	7820      	ldrb	r0, [r4, #0]
 80593b0:	f7ff fdc2 	bl	8058f38 <ld_clust.isra.0>
 80593b4:	60a8      	str	r0, [r5, #8]
 80593b6:	4603      	mov	r3, r0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80593b8:	f101 001c 	add.w	r0, r1, #28
 80593bc:	f7ff fba1 	bl	8058b02 <ld_dword>
			fp->obj.id = fs->id;
 80593c0:	88e2      	ldrh	r2, [r4, #6]
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80593c2:	06b1      	lsls	r1, r6, #26
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80593c4:	4607      	mov	r7, r0
			fp->obj.id = fs->id;
 80593c6:	80aa      	strh	r2, [r5, #4]
			fp->err = 0;		/* Clear error flag */
 80593c8:	f04f 0200 	mov.w	r2, #0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80593cc:	60e8      	str	r0, [r5, #12]
			fp->obj.fs = fs;	/* Validate the file object */
 80593ce:	602c      	str	r4, [r5, #0]
			fp->flag = mode;	/* Set file access mode */
 80593d0:	742e      	strb	r6, [r5, #16]
			fp->err = 0;		/* Clear error flag */
 80593d2:	746a      	strb	r2, [r5, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 80593d4:	61ea      	str	r2, [r5, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 80593d6:	616a      	str	r2, [r5, #20]
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80593d8:	d410      	bmi.n	80593fc <f_open+0x144>
						res = FR_INT_ERR;
 80593da:	2400      	movs	r4, #0
}
 80593dc:	4620      	mov	r0, r4
 80593de:	b010      	add	sp, #64	; 0x40
 80593e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (res == FR_OK) {					/* Is the object exsiting? */
 80593e4:	2c00      	cmp	r4, #0
 80593e6:	d1cd      	bne.n	8059384 <f_open+0xcc>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 80593e8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80593ec:	06da      	lsls	r2, r3, #27
 80593ee:	d430      	bmi.n	8059452 <f_open+0x19a>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 80593f0:	07bf      	lsls	r7, r7, #30
 80593f2:	d5d3      	bpl.n	805939c <f_open+0xe4>
 80593f4:	07dc      	lsls	r4, r3, #31
 80593f6:	d5d1      	bpl.n	805939c <f_open+0xe4>
					res = FR_DENIED;
 80593f8:	2407      	movs	r4, #7
 80593fa:	e7c3      	b.n	8059384 <f_open+0xcc>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80593fc:	2800      	cmp	r0, #0
 80593fe:	d0ec      	beq.n	80593da <f_open+0x122>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8059400:	8964      	ldrh	r4, [r4, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8059402:	6168      	str	r0, [r5, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8059404:	0264      	lsls	r4, r4, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8059406:	42bc      	cmp	r4, r7
 8059408:	d310      	bcc.n	805942c <f_open+0x174>
 805940a:	2400      	movs	r4, #0
				fp->clust = clst;
 805940c:	61ab      	str	r3, [r5, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 805940e:	2c00      	cmp	r4, #0
 8059410:	d1b8      	bne.n	8059384 <f_open+0xcc>
 8059412:	f3c7 0208 	ubfx	r2, r7, #0, #9
 8059416:	2a00      	cmp	r2, #0
 8059418:	d0df      	beq.n	80593da <f_open+0x122>
					sc = clst2sect(fs, clst);
 805941a:	4619      	mov	r1, r3
 805941c:	9803      	ldr	r0, [sp, #12]
 805941e:	f7ff fb7a 	bl	8058b16 <clst2sect>
					if (sc == 0) {
 8059422:	b1c0      	cbz	r0, 8059456 <f_open+0x19e>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8059424:	eb00 2057 	add.w	r0, r0, r7, lsr #9
 8059428:	61e8      	str	r0, [r5, #28]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 805942a:	e7d7      	b.n	80593dc <f_open+0x124>
					clst = get_fat(&fp->obj, clst);
 805942c:	4619      	mov	r1, r3
 805942e:	6828      	ldr	r0, [r5, #0]
 8059430:	f7ff fd8a 	bl	8058f48 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8059434:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8059436:	4603      	mov	r3, r0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8059438:	eba7 0704 	sub.w	r7, r7, r4
					if (clst <= 1) res = FR_INT_ERR;
 805943c:	d903      	bls.n	8059446 <f_open+0x18e>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 805943e:	1c42      	adds	r2, r0, #1
 8059440:	d1e1      	bne.n	8059406 <f_open+0x14e>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8059442:	2401      	movs	r4, #1
 8059444:	e7e2      	b.n	805940c <f_open+0x154>
					if (clst <= 1) res = FR_INT_ERR;
 8059446:	2402      	movs	r4, #2
 8059448:	e7e0      	b.n	805940c <f_open+0x154>
 805944a:	4604      	mov	r4, r0
 805944c:	e79a      	b.n	8059384 <f_open+0xcc>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 805944e:	2408      	movs	r4, #8
 8059450:	e798      	b.n	8059384 <f_open+0xcc>
					res = FR_NO_FILE;
 8059452:	2404      	movs	r4, #4
 8059454:	e796      	b.n	8059384 <f_open+0xcc>
						res = FR_INT_ERR;
 8059456:	2402      	movs	r4, #2
 8059458:	e794      	b.n	8059384 <f_open+0xcc>
	if (!fp) return FR_INVALID_OBJECT;
 805945a:	2409      	movs	r4, #9
 805945c:	e7be      	b.n	80593dc <f_open+0x124>

0805945e <f_read>:
{
 805945e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8059462:	4699      	mov	r9, r3
 8059464:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 8059466:	2300      	movs	r3, #0
{
 8059468:	4688      	mov	r8, r1
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 805946a:	a903      	add	r1, sp, #12
{
 805946c:	4604      	mov	r4, r0
	*br = 0;	/* Clear read byte counter */
 805946e:	f8c9 3000 	str.w	r3, [r9]
{
 8059472:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8059474:	f7ff fb74 	bl	8058b60 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8059478:	4606      	mov	r6, r0
 805947a:	b9f8      	cbnz	r0, 80594bc <f_read+0x5e>
 805947c:	7c66      	ldrb	r6, [r4, #17]
 805947e:	b9ee      	cbnz	r6, 80594bc <f_read+0x5e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8059480:	f894 a010 	ldrb.w	sl, [r4, #16]
 8059484:	f01a 0301 	ands.w	r3, sl, #1
 8059488:	9300      	str	r3, [sp, #0]
 805948a:	d07b      	beq.n	8059584 <f_read+0x126>
	remain = fp->obj.objsize - fp->fptr;
 805948c:	68e2      	ldr	r2, [r4, #12]
 805948e:	6963      	ldr	r3, [r4, #20]
 8059490:	1ad2      	subs	r2, r2, r3
 8059492:	4297      	cmp	r7, r2
 8059494:	bf28      	it	cs
 8059496:	4617      	movcs	r7, r2
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8059498:	b187      	cbz	r7, 80594bc <f_read+0x5e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 805949a:	6962      	ldr	r2, [r4, #20]
 805949c:	f3c2 0308 	ubfx	r3, r2, #0, #9
 80594a0:	2b00      	cmp	r3, #0
 80594a2:	d156      	bne.n	8059552 <f_read+0xf4>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80594a4:	9b03      	ldr	r3, [sp, #12]
 80594a6:	895b      	ldrh	r3, [r3, #10]
 80594a8:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 80594aa:	ea13 2a52 	ands.w	sl, r3, r2, lsr #9
 80594ae:	d115      	bne.n	80594dc <f_read+0x7e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80594b0:	b942      	cbnz	r2, 80594c4 <f_read+0x66>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80594b2:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80594b4:	2801      	cmp	r0, #1
 80594b6:	d80a      	bhi.n	80594ce <f_read+0x70>
 80594b8:	2602      	movs	r6, #2
 80594ba:	7466      	strb	r6, [r4, #17]
}
 80594bc:	4630      	mov	r0, r6
 80594be:	b005      	add	sp, #20
 80594c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80594c4:	69a1      	ldr	r1, [r4, #24]
 80594c6:	6820      	ldr	r0, [r4, #0]
 80594c8:	f7ff fd3e 	bl	8058f48 <get_fat.isra.0>
 80594cc:	e7f2      	b.n	80594b4 <f_read+0x56>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80594ce:	1c43      	adds	r3, r0, #1
 80594d0:	d103      	bne.n	80594da <f_read+0x7c>
 80594d2:	2301      	movs	r3, #1
 80594d4:	9e00      	ldr	r6, [sp, #0]
 80594d6:	7463      	strb	r3, [r4, #17]
 80594d8:	e7f0      	b.n	80594bc <f_read+0x5e>
				fp->clust = clst;				/* Update current cluster */
 80594da:	61a0      	str	r0, [r4, #24]
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 80594dc:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80594e0:	69a1      	ldr	r1, [r4, #24]
 80594e2:	4658      	mov	r0, fp
 80594e4:	f7ff fb17 	bl	8058b16 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80594e8:	2800      	cmp	r0, #0
 80594ea:	d0e5      	beq.n	80594b8 <f_read+0x5a>
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 80594ec:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 80594f0:	eb0a 0200 	add.w	r2, sl, r0
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 80594f4:	d32c      	bcc.n	8059550 <f_read+0xf2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80594f6:	f8bb 100a 	ldrh.w	r1, [fp, #10]
 80594fa:	eb0a 2057 	add.w	r0, sl, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80594fe:	0a7d      	lsrs	r5, r7, #9
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8059500:	9201      	str	r2, [sp, #4]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8059502:	4288      	cmp	r0, r1
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8059504:	f89b 0001 	ldrb.w	r0, [fp, #1]
					cc = fs->csize - csect;
 8059508:	bf88      	it	hi
 805950a:	eba1 050a 	subhi.w	r5, r1, sl
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 805950e:	4641      	mov	r1, r8
 8059510:	462b      	mov	r3, r5
 8059512:	f7f6 f97b 	bl	804f80c <disk_read>
 8059516:	2800      	cmp	r0, #0
 8059518:	d1db      	bne.n	80594d2 <f_read+0x74>
				if (fs->wflag && fs->winsect - sect < cc) {
 805951a:	9903      	ldr	r1, [sp, #12]
 805951c:	78cb      	ldrb	r3, [r1, #3]
 805951e:	b15b      	cbz	r3, 8059538 <f_read+0xda>
 8059520:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8059522:	9a01      	ldr	r2, [sp, #4]
 8059524:	1a80      	subs	r0, r0, r2
 8059526:	42a8      	cmp	r0, r5
 8059528:	d206      	bcs.n	8059538 <f_read+0xda>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 805952a:	f44f 7200 	mov.w	r2, #512	; 0x200
 805952e:	3134      	adds	r1, #52	; 0x34
 8059530:	eb08 2040 	add.w	r0, r8, r0, lsl #9
 8059534:	f001 fc4f 	bl	805add6 <memcpy>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8059538:	026d      	lsls	r5, r5, #9
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 805953a:	f8d9 3000 	ldr.w	r3, [r9]
 805953e:	1b7f      	subs	r7, r7, r5
 8059540:	44a8      	add	r8, r5
 8059542:	442b      	add	r3, r5
 8059544:	f8c9 3000 	str.w	r3, [r9]
 8059548:	6963      	ldr	r3, [r4, #20]
 805954a:	442b      	add	r3, r5
 805954c:	6163      	str	r3, [r4, #20]
 805954e:	e7a3      	b.n	8059498 <f_read+0x3a>
			fp->sect = sect;
 8059550:	61e2      	str	r2, [r4, #28]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8059552:	6965      	ldr	r5, [r4, #20]
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 8059554:	69e1      	ldr	r1, [r4, #28]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8059556:	f3c5 0508 	ubfx	r5, r5, #0, #9
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 805955a:	9803      	ldr	r0, [sp, #12]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 805955c:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8059560:	42bd      	cmp	r5, r7
 8059562:	bf28      	it	cs
 8059564:	463d      	movcs	r5, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 8059566:	f7ff fbdb 	bl	8058d20 <move_window>
 805956a:	2800      	cmp	r0, #0
 805956c:	d1b1      	bne.n	80594d2 <f_read+0x74>
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 805956e:	9903      	ldr	r1, [sp, #12]
 8059570:	462a      	mov	r2, r5
 8059572:	6963      	ldr	r3, [r4, #20]
 8059574:	4640      	mov	r0, r8
 8059576:	3134      	adds	r1, #52	; 0x34
 8059578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 805957c:	4419      	add	r1, r3
 805957e:	f001 fc2a 	bl	805add6 <memcpy>
 8059582:	e7da      	b.n	805953a <f_read+0xdc>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8059584:	2607      	movs	r6, #7
 8059586:	e799      	b.n	80594bc <f_read+0x5e>

08059588 <f_write>:
{
 8059588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 805958c:	469a      	mov	sl, r3
 805958e:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 8059590:	2300      	movs	r3, #0
{
 8059592:	4689      	mov	r9, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8059594:	a903      	add	r1, sp, #12
{
 8059596:	4604      	mov	r4, r0
	*bw = 0;	/* Clear write byte counter */
 8059598:	f8ca 3000 	str.w	r3, [sl]
{
 805959c:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 805959e:	f7ff fadf 	bl	8058b60 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80595a2:	4606      	mov	r6, r0
 80595a4:	bb18      	cbnz	r0, 80595ee <f_write+0x66>
 80595a6:	7c66      	ldrb	r6, [r4, #17]
 80595a8:	bb0e      	cbnz	r6, 80595ee <f_write+0x66>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80595aa:	7c23      	ldrb	r3, [r4, #16]
 80595ac:	079a      	lsls	r2, r3, #30
 80595ae:	f140 80a7 	bpl.w	8059700 <f_write+0x178>
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80595b2:	6963      	ldr	r3, [r4, #20]
 80595b4:	42fb      	cmn	r3, r7
 80595b6:	d300      	bcc.n	80595ba <f_write+0x32>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80595b8:	43df      	mvns	r7, r3
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 80595ba:	b1a7      	cbz	r7, 80595e6 <f_write+0x5e>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80595bc:	6963      	ldr	r3, [r4, #20]
 80595be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80595c2:	2a00      	cmp	r2, #0
 80595c4:	d17f      	bne.n	80596c6 <f_write+0x13e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80595c6:	9a03      	ldr	r2, [sp, #12]
 80595c8:	f8b2 800a 	ldrh.w	r8, [r2, #10]
 80595cc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
 80595d0:	ea18 2853 	ands.w	r8, r8, r3, lsr #9
 80595d4:	d11e      	bne.n	8059614 <f_write+0x8c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80595d6:	b973      	cbnz	r3, 80595f6 <f_write+0x6e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80595d8:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80595da:	b970      	cbnz	r0, 80595fa <f_write+0x72>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80595dc:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80595de:	6820      	ldr	r0, [r4, #0]
 80595e0:	f7ff fd3e 	bl	8059060 <create_chain.isra.0>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80595e4:	b948      	cbnz	r0, 80595fa <f_write+0x72>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80595e6:	7c23      	ldrb	r3, [r4, #16]
 80595e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80595ec:	7423      	strb	r3, [r4, #16]
}
 80595ee:	4630      	mov	r0, r6
 80595f0:	b005      	add	sp, #20
 80595f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80595f6:	69a1      	ldr	r1, [r4, #24]
 80595f8:	e7f1      	b.n	80595de <f_write+0x56>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80595fa:	2801      	cmp	r0, #1
 80595fc:	d102      	bne.n	8059604 <f_write+0x7c>
 80595fe:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8059600:	7466      	strb	r6, [r4, #17]
 8059602:	e7f4      	b.n	80595ee <f_write+0x66>
 8059604:	1c43      	adds	r3, r0, #1
 8059606:	d101      	bne.n	805960c <f_write+0x84>
 8059608:	2601      	movs	r6, #1
 805960a:	e7f9      	b.n	8059600 <f_write+0x78>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 805960c:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 805960e:	61a0      	str	r0, [r4, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8059610:	b903      	cbnz	r3, 8059614 <f_write+0x8c>
 8059612:	60a0      	str	r0, [r4, #8]
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
 8059614:	9803      	ldr	r0, [sp, #12]
 8059616:	69e3      	ldr	r3, [r4, #28]
 8059618:	6b02      	ldr	r2, [r0, #48]	; 0x30
 805961a:	429a      	cmp	r2, r3
 805961c:	d103      	bne.n	8059626 <f_write+0x9e>
 805961e:	f7ff fb5a 	bl	8058cd6 <sync_window>
 8059622:	2800      	cmp	r0, #0
 8059624:	d1f0      	bne.n	8059608 <f_write+0x80>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8059626:	9d03      	ldr	r5, [sp, #12]
 8059628:	69a1      	ldr	r1, [r4, #24]
 805962a:	4628      	mov	r0, r5
 805962c:	f7ff fa73 	bl	8058b16 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8059630:	2800      	cmp	r0, #0
 8059632:	d0e4      	beq.n	80595fe <f_write+0x76>
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8059634:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 8059638:	eb08 0b00 	add.w	fp, r8, r0
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 805963c:	d335      	bcc.n	80596aa <f_write+0x122>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 805963e:	8969      	ldrh	r1, [r5, #10]
 8059640:	eb08 2057 	add.w	r0, r8, r7, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8059644:	0a7b      	lsrs	r3, r7, #9
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8059646:	465a      	mov	r2, fp
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8059648:	4288      	cmp	r0, r1
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 805964a:	7868      	ldrb	r0, [r5, #1]
					cc = fs->csize - csect;
 805964c:	bf88      	it	hi
 805964e:	eba1 0308 	subhi.w	r3, r1, r8
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8059652:	4649      	mov	r1, r9
 8059654:	9301      	str	r3, [sp, #4]
 8059656:	f7f6 f8e5 	bl	804f824 <disk_write>
 805965a:	4605      	mov	r5, r0
 805965c:	2800      	cmp	r0, #0
 805965e:	d1d3      	bne.n	8059608 <f_write+0x80>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 8059660:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8059664:	9b01      	ldr	r3, [sp, #4]
 8059666:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
 805966a:	eba1 010b 	sub.w	r1, r1, fp
 805966e:	4299      	cmp	r1, r3
 8059670:	d20a      	bcs.n	8059688 <f_write+0x100>
 8059672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8059676:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 805967a:	f108 0034 	add.w	r0, r8, #52	; 0x34
 805967e:	f001 fbaa 	bl	805add6 <memcpy>
					fs->wflag = 0;
 8059682:	9b01      	ldr	r3, [sp, #4]
 8059684:	f888 5003 	strb.w	r5, [r8, #3]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8059688:	025d      	lsls	r5, r3, #9
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 805968a:	f8da 3000 	ldr.w	r3, [sl]
 805968e:	1b7f      	subs	r7, r7, r5
 8059690:	44a9      	add	r9, r5
 8059692:	442b      	add	r3, r5
 8059694:	f8ca 3000 	str.w	r3, [sl]
 8059698:	6962      	ldr	r2, [r4, #20]
 805969a:	68e3      	ldr	r3, [r4, #12]
 805969c:	4415      	add	r5, r2
 805969e:	6165      	str	r5, [r4, #20]
 80596a0:	42ab      	cmp	r3, r5
 80596a2:	bf2c      	ite	cs
 80596a4:	60e3      	strcs	r3, [r4, #12]
 80596a6:	60e5      	strcc	r5, [r4, #12]
 80596a8:	e787      	b.n	80595ba <f_write+0x32>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
 80596aa:	6961      	ldr	r1, [r4, #20]
 80596ac:	68e3      	ldr	r3, [r4, #12]
 80596ae:	4299      	cmp	r1, r3
 80596b0:	d307      	bcc.n	80596c2 <f_write+0x13a>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
 80596b2:	4628      	mov	r0, r5
 80596b4:	f7ff fb0f 	bl	8058cd6 <sync_window>
 80596b8:	2800      	cmp	r0, #0
 80596ba:	d1a5      	bne.n	8059608 <f_write+0x80>
				fs->winsect = sect;
 80596bc:	9b03      	ldr	r3, [sp, #12]
 80596be:	f8c3 b030 	str.w	fp, [r3, #48]	; 0x30
			fp->sect = sect;
 80596c2:	f8c4 b01c 	str.w	fp, [r4, #28]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 80596c6:	6965      	ldr	r5, [r4, #20]
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 80596c8:	69e1      	ldr	r1, [r4, #28]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 80596ca:	f3c5 0508 	ubfx	r5, r5, #0, #9
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 80596ce:	9803      	ldr	r0, [sp, #12]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 80596d0:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80596d4:	42bd      	cmp	r5, r7
 80596d6:	bf28      	it	cs
 80596d8:	463d      	movcs	r5, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 80596da:	f7ff fb21 	bl	8058d20 <move_window>
 80596de:	2800      	cmp	r0, #0
 80596e0:	d192      	bne.n	8059608 <f_write+0x80>
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80596e2:	9803      	ldr	r0, [sp, #12]
 80596e4:	462a      	mov	r2, r5
 80596e6:	6963      	ldr	r3, [r4, #20]
 80596e8:	4649      	mov	r1, r9
 80596ea:	3034      	adds	r0, #52	; 0x34
 80596ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80596f0:	4418      	add	r0, r3
 80596f2:	f001 fb70 	bl	805add6 <memcpy>
		fs->wflag = 1;
 80596f6:	9b03      	ldr	r3, [sp, #12]
 80596f8:	f04f 0201 	mov.w	r2, #1
 80596fc:	70da      	strb	r2, [r3, #3]
 80596fe:	e7c4      	b.n	805968a <f_write+0x102>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8059700:	2607      	movs	r6, #7
 8059702:	e774      	b.n	80595ee <f_write+0x66>

08059704 <f_sync>:
{
 8059704:	b573      	push	{r0, r1, r4, r5, r6, lr}
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8059706:	a901      	add	r1, sp, #4
{
 8059708:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 805970a:	f7ff fa29 	bl	8058b60 <validate>
	if (res == FR_OK) {
 805970e:	4604      	mov	r4, r0
 8059710:	bb50      	cbnz	r0, 8059768 <f_sync+0x64>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8059712:	7c2c      	ldrb	r4, [r5, #16]
 8059714:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 8059718:	d026      	beq.n	8059768 <f_sync+0x64>
				res = move_window(fs, fp->dir_sect);
 805971a:	6a29      	ldr	r1, [r5, #32]
 805971c:	9801      	ldr	r0, [sp, #4]
 805971e:	f7ff faff 	bl	8058d20 <move_window>
				if (res == FR_OK) {
 8059722:	4604      	mov	r4, r0
 8059724:	bb00      	cbnz	r0, 8059768 <f_sync+0x64>
					dir = fp->dir_ptr;
 8059726:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8059728:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 805972a:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 805972c:	f043 0320 	orr.w	r3, r3, #32
 8059730:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8059732:	68aa      	ldr	r2, [r5, #8]
 8059734:	6828      	ldr	r0, [r5, #0]
 8059736:	f7ff f9f9 	bl	8058b2c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 805973a:	68e9      	ldr	r1, [r5, #12]
 805973c:	f106 001c 	add.w	r0, r6, #28
 8059740:	f7ff f9e1 	bl	8058b06 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 8059744:	2321      	movs	r3, #33	; 0x21
					fs->wflag = 1;
 8059746:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8059748:	7633      	strb	r3, [r6, #24]
	*ptr++ = (BYTE)val;
 805974a:	2350      	movs	r3, #80	; 0x50
	*ptr++ = (BYTE)val; val >>= 8;
 805974c:	75b4      	strb	r4, [r6, #22]
	*ptr++ = (BYTE)val;
 805974e:	7673      	strb	r3, [r6, #25]
					fs->wflag = 1;
 8059750:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8059752:	75f4      	strb	r4, [r6, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8059754:	74b4      	strb	r4, [r6, #18]
	*ptr++ = (BYTE)val;
 8059756:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
 8059758:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 805975a:	f7ff fba2 	bl	8058ea2 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 805975e:	7c2b      	ldrb	r3, [r5, #16]
					res = sync_fs(fs);					/* Restore it to the directory */
 8059760:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8059762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8059766:	742b      	strb	r3, [r5, #16]
}
 8059768:	4620      	mov	r0, r4
 805976a:	b002      	add	sp, #8
 805976c:	bd70      	pop	{r4, r5, r6, pc}

0805976e <f_close>:
{
 805976e:	b513      	push	{r0, r1, r4, lr}
 8059770:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 8059772:	f7ff ffc7 	bl	8059704 <f_sync>
	if (res == FR_OK)
 8059776:	b928      	cbnz	r0, 8059784 <f_close+0x16>
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8059778:	a901      	add	r1, sp, #4
 805977a:	4620      	mov	r0, r4
 805977c:	f7ff f9f0 	bl	8058b60 <validate>
		if (res == FR_OK) {
 8059780:	b900      	cbnz	r0, 8059784 <f_close+0x16>
			fp->obj.fs = 0;	/* Invalidate file object */
 8059782:	6020      	str	r0, [r4, #0]
}
 8059784:	b002      	add	sp, #8
 8059786:	bd10      	pop	{r4, pc}

08059788 <f_lseek>:
{
 8059788:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 805978c:	460d      	mov	r5, r1
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 805978e:	a901      	add	r1, sp, #4
{
 8059790:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8059792:	f7ff f9e5 	bl	8058b60 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 8059796:	4606      	mov	r6, r0
 8059798:	2800      	cmp	r0, #0
 805979a:	d150      	bne.n	805983e <f_lseek+0xb6>
 805979c:	7c66      	ldrb	r6, [r4, #17]
	if (res != FR_OK) LEAVE_FF(fs, res);
 805979e:	2e00      	cmp	r6, #0
 80597a0:	d14d      	bne.n	805983e <f_lseek+0xb6>
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80597a2:	68e3      	ldr	r3, [r4, #12]
 80597a4:	42ab      	cmp	r3, r5
 80597a6:	d204      	bcs.n	80597b2 <f_lseek+0x2a>
 80597a8:	7c22      	ldrb	r2, [r4, #16]
 80597aa:	f012 0f02 	tst.w	r2, #2
 80597ae:	bf08      	it	eq
 80597b0:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 80597b2:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 80597b4:	6963      	ldr	r3, [r4, #20]
		fp->fptr = nsect = 0;
 80597b6:	6162      	str	r2, [r4, #20]
		if (ofs > 0) {
 80597b8:	b99d      	cbnz	r5, 80597e2 <f_lseek+0x5a>
		fp->fptr = nsect = 0;
 80597ba:	2500      	movs	r5, #0
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
 80597bc:	68e2      	ldr	r2, [r4, #12]
 80597be:	6963      	ldr	r3, [r4, #20]
 80597c0:	4293      	cmp	r3, r2
			fp->flag |= FA_MODIFIED;
 80597c2:	bf84      	itt	hi
 80597c4:	7c22      	ldrbhi	r2, [r4, #16]
			fp->obj.objsize = fp->fptr;
 80597c6:	60e3      	strhi	r3, [r4, #12]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80597c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->flag |= FA_MODIFIED;
 80597cc:	bf84      	itt	hi
 80597ce:	f042 0240 	orrhi.w	r2, r2, #64	; 0x40
 80597d2:	7422      	strbhi	r2, [r4, #16]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80597d4:	2b00      	cmp	r3, #0
 80597d6:	d032      	beq.n	805983e <f_lseek+0xb6>
 80597d8:	69e3      	ldr	r3, [r4, #28]
 80597da:	42ab      	cmp	r3, r5
			fp->sect = nsect;
 80597dc:	bf18      	it	ne
 80597de:	61e5      	strne	r5, [r4, #28]
 80597e0:	e02d      	b.n	805983e <f_lseek+0xb6>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80597e2:	9a01      	ldr	r2, [sp, #4]
 80597e4:	8957      	ldrh	r7, [r2, #10]
 80597e6:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 80597e8:	b1fb      	cbz	r3, 805982a <f_lseek+0xa2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80597ea:	3b01      	subs	r3, #1
 80597ec:	1e6a      	subs	r2, r5, #1
 80597ee:	fbb3 f1f7 	udiv	r1, r3, r7
 80597f2:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 80597f6:	428a      	cmp	r2, r1
 80597f8:	d317      	bcc.n	805982a <f_lseek+0xa2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80597fa:	427a      	negs	r2, r7
				clst = fp->clust;
 80597fc:	69a1      	ldr	r1, [r4, #24]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80597fe:	4013      	ands	r3, r2
				ofs -= fp->fptr;
 8059800:	1aed      	subs	r5, r5, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8059802:	6163      	str	r3, [r4, #20]
			if (clst != 0) {
 8059804:	2900      	cmp	r1, #0
 8059806:	d0d8      	beq.n	80597ba <f_lseek+0x32>
				while (ofs > bcs) {						/* Cluster following loop */
 8059808:	42bd      	cmp	r5, r7
					ofs -= bcs; fp->fptr += bcs;
 805980a:	6963      	ldr	r3, [r4, #20]
				while (ofs > bcs) {						/* Cluster following loop */
 805980c:	d822      	bhi.n	8059854 <f_lseek+0xcc>
				fp->fptr += ofs;
 805980e:	6963      	ldr	r3, [r4, #20]
 8059810:	442b      	add	r3, r5
 8059812:	6163      	str	r3, [r4, #20]
				if (ofs % SS(fs)) {
 8059814:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8059818:	2b00      	cmp	r3, #0
 805981a:	d0ce      	beq.n	80597ba <f_lseek+0x32>
					nsect = clst2sect(fs, clst);	/* Current sector */
 805981c:	9801      	ldr	r0, [sp, #4]
 805981e:	f7ff f97a 	bl	8058b16 <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 8059822:	b150      	cbz	r0, 805983a <f_lseek+0xb2>
					nsect += (DWORD)(ofs / SS(fs));
 8059824:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 8059828:	e7c8      	b.n	80597bc <f_lseek+0x34>
				clst = fp->obj.sclust;					/* start from the first cluster */
 805982a:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 805982c:	b981      	cbnz	r1, 8059850 <f_lseek+0xc8>
					clst = create_chain(&fp->obj, 0);
 805982e:	6820      	ldr	r0, [r4, #0]
 8059830:	f7ff fc16 	bl	8059060 <create_chain.isra.0>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8059834:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 8059836:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8059838:	d105      	bne.n	8059846 <f_lseek+0xbe>
 805983a:	2602      	movs	r6, #2
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 805983c:	7466      	strb	r6, [r4, #17]
}
 805983e:	4630      	mov	r0, r6
 8059840:	b002      	add	sp, #8
 8059842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8059846:	1c48      	adds	r0, r1, #1
 8059848:	d101      	bne.n	805984e <f_lseek+0xc6>
 805984a:	2601      	movs	r6, #1
 805984c:	e7f6      	b.n	805983c <f_lseek+0xb4>
					fp->obj.sclust = clst;
 805984e:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
 8059850:	61a1      	str	r1, [r4, #24]
 8059852:	e7d7      	b.n	8059804 <f_lseek+0x7c>
					ofs -= bcs; fp->fptr += bcs;
 8059854:	443b      	add	r3, r7
 8059856:	eba5 0807 	sub.w	r8, r5, r7
 805985a:	6820      	ldr	r0, [r4, #0]
 805985c:	6163      	str	r3, [r4, #20]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 805985e:	7c23      	ldrb	r3, [r4, #16]
 8059860:	079a      	lsls	r2, r3, #30
 8059862:	d505      	bpl.n	8059870 <f_lseek+0xe8>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8059864:	f7ff fbfc 	bl	8059060 <create_chain.isra.0>
						if (clst == 0) {				/* Clip file size in case of disk full */
 8059868:	4605      	mov	r5, r0
 805986a:	b920      	cbnz	r0, 8059876 <f_lseek+0xee>
 805986c:	4601      	mov	r1, r0
 805986e:	e7ce      	b.n	805980e <f_lseek+0x86>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8059870:	f7ff fb6a 	bl	8058f48 <get_fat.isra.0>
 8059874:	4605      	mov	r5, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8059876:	1c6b      	adds	r3, r5, #1
 8059878:	d0e7      	beq.n	805984a <f_lseek+0xc2>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 805987a:	2d01      	cmp	r5, #1
 805987c:	d9dd      	bls.n	805983a <f_lseek+0xb2>
 805987e:	9b01      	ldr	r3, [sp, #4]
 8059880:	699b      	ldr	r3, [r3, #24]
 8059882:	42ab      	cmp	r3, r5
 8059884:	d9d9      	bls.n	805983a <f_lseek+0xb2>
					fp->clust = clst;
 8059886:	4629      	mov	r1, r5
 8059888:	61a5      	str	r5, [r4, #24]
					ofs -= bcs; fp->fptr += bcs;
 805988a:	4645      	mov	r5, r8
 805988c:	e7bc      	b.n	8059808 <f_lseek+0x80>

0805988e <f_opendir>:
{
 805988e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!dp) return FR_INVALID_OBJECT;
 8059890:	4604      	mov	r4, r0
{
 8059892:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 8059894:	b350      	cbz	r0, 80598ec <f_opendir+0x5e>
	res = mount_volume(&path, &fs, 0);
 8059896:	2200      	movs	r2, #0
 8059898:	a903      	add	r1, sp, #12
 805989a:	a801      	add	r0, sp, #4
 805989c:	f7f4 ff26 	bl	804e6ec <mount_volume>
	if (res == FR_OK) {
 80598a0:	b970      	cbnz	r0, 80598c0 <f_opendir+0x32>
		dp->obj.fs = fs;
 80598a2:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80598a4:	4620      	mov	r0, r4
 80598a6:	9901      	ldr	r1, [sp, #4]
		dp->obj.fs = fs;
 80598a8:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80598aa:	f7f5 f963 	bl	804eb74 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 80598ae:	b9f8      	cbnz	r0, 80598f0 <f_opendir+0x62>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80598b0:	f994 302b 	ldrsb.w	r3, [r4, #43]	; 0x2b
 80598b4:	2b00      	cmp	r3, #0
 80598b6:	db0c      	blt.n	80598d2 <f_opendir+0x44>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 80598b8:	79a3      	ldrb	r3, [r4, #6]
 80598ba:	06db      	lsls	r3, r3, #27
 80598bc:	d403      	bmi.n	80598c6 <f_opendir+0x38>
					res = FR_NO_PATH;
 80598be:	2005      	movs	r0, #5
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 80598c0:	2300      	movs	r3, #0
 80598c2:	6023      	str	r3, [r4, #0]
 80598c4:	e010      	b.n	80598e8 <f_opendir+0x5a>
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80598c6:	9b03      	ldr	r3, [sp, #12]
 80598c8:	69e1      	ldr	r1, [r4, #28]
 80598ca:	7818      	ldrb	r0, [r3, #0]
 80598cc:	f7ff fb34 	bl	8058f38 <ld_clust.isra.0>
 80598d0:	60a0      	str	r0, [r4, #8]
				dp->obj.id = fs->id;
 80598d2:	9b03      	ldr	r3, [sp, #12]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80598d4:	2100      	movs	r1, #0
 80598d6:	4620      	mov	r0, r4
				dp->obj.id = fs->id;
 80598d8:	88db      	ldrh	r3, [r3, #6]
 80598da:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80598dc:	f7ff fc84 	bl	80591e8 <dir_sdi>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80598e0:	2804      	cmp	r0, #4
 80598e2:	d0ec      	beq.n	80598be <f_opendir+0x30>
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 80598e4:	2800      	cmp	r0, #0
 80598e6:	d1eb      	bne.n	80598c0 <f_opendir+0x32>
}
 80598e8:	b004      	add	sp, #16
 80598ea:	bd10      	pop	{r4, pc}
	if (!dp) return FR_INVALID_OBJECT;
 80598ec:	2009      	movs	r0, #9
 80598ee:	e7fb      	b.n	80598e8 <f_opendir+0x5a>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80598f0:	2804      	cmp	r0, #4
 80598f2:	d0e4      	beq.n	80598be <f_opendir+0x30>
 80598f4:	e7e4      	b.n	80598c0 <f_opendir+0x32>

080598f6 <f_closedir>:
{
 80598f6:	b513      	push	{r0, r1, r4, lr}
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 80598f8:	a901      	add	r1, sp, #4
{
 80598fa:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 80598fc:	f7ff f930 	bl	8058b60 <validate>
	if (res == FR_OK) {
 8059900:	b900      	cbnz	r0, 8059904 <f_closedir+0xe>
		dp->obj.fs = 0;	/* Invalidate directory object */
 8059902:	6020      	str	r0, [r4, #0]
}
 8059904:	b002      	add	sp, #8
 8059906:	bd10      	pop	{r4, pc}

08059908 <f_readdir>:
{
 8059908:	b573      	push	{r0, r1, r4, r5, r6, lr}
 805990a:	460d      	mov	r5, r1
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 805990c:	a901      	add	r1, sp, #4
{
 805990e:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8059910:	f7ff f926 	bl	8058b60 <validate>
	if (res == FR_OK) {
 8059914:	b920      	cbnz	r0, 8059920 <f_readdir+0x18>
		if (!fno) {
 8059916:	b92d      	cbnz	r5, 8059924 <f_readdir+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8059918:	4601      	mov	r1, r0
 805991a:	4620      	mov	r0, r4
 805991c:	f7ff fc64 	bl	80591e8 <dir_sdi>
}
 8059920:	b002      	add	sp, #8
 8059922:	bd70      	pop	{r4, r5, r6, pc}
			res = DIR_READ_FILE(dp);		/* Read an item */
 8059924:	4620      	mov	r0, r4
 8059926:	f7f5 f807 	bl	804e938 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
 805992a:	f010 06fb 	ands.w	r6, r0, #251	; 0xfb
 805992e:	d1f7      	bne.n	8059920 <f_readdir+0x18>
				get_fileinfo(dp, fno);		/* Get the object information */
 8059930:	4629      	mov	r1, r5
 8059932:	4620      	mov	r0, r4
 8059934:	f7ff f92e 	bl	8058b94 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8059938:	4631      	mov	r1, r6
 805993a:	4620      	mov	r0, r4
 805993c:	f7ff fbff 	bl	805913e <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8059940:	2804      	cmp	r0, #4
 8059942:	bf08      	it	eq
 8059944:	2000      	moveq	r0, #0
 8059946:	e7eb      	b.n	8059920 <f_readdir+0x18>

08059948 <f_stat>:
{
 8059948:	b530      	push	{r4, r5, lr}
 805994a:	b08f      	sub	sp, #60	; 0x3c
 805994c:	460d      	mov	r5, r1
	res = mount_volume(&path, &dj.obj.fs, 0);
 805994e:	2200      	movs	r2, #0
{
 8059950:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &dj.obj.fs, 0);
 8059952:	a902      	add	r1, sp, #8
 8059954:	a801      	add	r0, sp, #4
 8059956:	f7f4 fec9 	bl	804e6ec <mount_volume>
	if (res == FR_OK) {
 805995a:	4604      	mov	r4, r0
 805995c:	b970      	cbnz	r0, 805997c <f_stat+0x34>
		res = follow_path(&dj, path);	/* Follow the file path */
 805995e:	9901      	ldr	r1, [sp, #4]
 8059960:	a802      	add	r0, sp, #8
 8059962:	f7f5 f907 	bl	804eb74 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 8059966:	4604      	mov	r4, r0
 8059968:	b940      	cbnz	r0, 805997c <f_stat+0x34>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 805996a:	f99d 3033 	ldrsb.w	r3, [sp, #51]	; 0x33
 805996e:	2b00      	cmp	r3, #0
 8059970:	db07      	blt.n	8059982 <f_stat+0x3a>
				if (fno) get_fileinfo(&dj, fno);
 8059972:	b11d      	cbz	r5, 805997c <f_stat+0x34>
 8059974:	4629      	mov	r1, r5
 8059976:	a802      	add	r0, sp, #8
 8059978:	f7ff f90c 	bl	8058b94 <get_fileinfo>
}
 805997c:	4620      	mov	r0, r4
 805997e:	b00f      	add	sp, #60	; 0x3c
 8059980:	bd30      	pop	{r4, r5, pc}
				res = FR_INVALID_NAME;
 8059982:	2406      	movs	r4, #6
 8059984:	e7fa      	b.n	805997c <f_stat+0x34>

08059986 <f_getfree>:
{
 8059986:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 805998a:	b085      	sub	sp, #20
 805998c:	460f      	mov	r7, r1
 805998e:	4615      	mov	r5, r2
	res = mount_volume(&path, &fs, 0);
 8059990:	2200      	movs	r2, #0
{
 8059992:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, 0);
 8059994:	a903      	add	r1, sp, #12
 8059996:	a801      	add	r0, sp, #4
 8059998:	f7f4 fea8 	bl	804e6ec <mount_volume>
	if (res == FR_OK) {
 805999c:	4604      	mov	r4, r0
 805999e:	b940      	cbnz	r0, 80599b2 <f_getfree+0x2c>
		*fatfs = fs;				/* Return ptr to the fs object */
 80599a0:	9e03      	ldr	r6, [sp, #12]
		if (fs->free_clst <= fs->n_fatent - 2) {
 80599a2:	e9d6 3805 	ldrd	r3, r8, [r6, #20]
		*fatfs = fs;				/* Return ptr to the fs object */
 80599a6:	602e      	str	r6, [r5, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
 80599a8:	f1a8 0202 	sub.w	r2, r8, #2
 80599ac:	4293      	cmp	r3, r2
 80599ae:	d804      	bhi.n	80599ba <f_getfree+0x34>
			*nclst = fs->free_clst;
 80599b0:	603b      	str	r3, [r7, #0]
}
 80599b2:	4620      	mov	r0, r4
 80599b4:	b005      	add	sp, #20
 80599b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 80599ba:	7833      	ldrb	r3, [r6, #0]
 80599bc:	2b01      	cmp	r3, #1
 80599be:	d11a      	bne.n	80599f6 <f_getfree+0x70>
				clst = 2; obj.fs = fs;
 80599c0:	f04f 0802 	mov.w	r8, #2
			nfree = 0;
 80599c4:	4605      	mov	r5, r0
					stat = get_fat(&obj, clst);
 80599c6:	4641      	mov	r1, r8
 80599c8:	4630      	mov	r0, r6
 80599ca:	f7ff fabd 	bl	8058f48 <get_fat.isra.0>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80599ce:	1c43      	adds	r3, r0, #1
 80599d0:	d037      	beq.n	8059a42 <f_getfree+0xbc>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80599d2:	2801      	cmp	r0, #1
 80599d4:	d037      	beq.n	8059a46 <f_getfree+0xc0>
					if (stat == 0) nfree++;
 80599d6:	b900      	cbnz	r0, 80599da <f_getfree+0x54>
 80599d8:	3501      	adds	r5, #1
				} while (++clst < fs->n_fatent);
 80599da:	9b03      	ldr	r3, [sp, #12]
 80599dc:	f108 0801 	add.w	r8, r8, #1
 80599e0:	699b      	ldr	r3, [r3, #24]
 80599e2:	4543      	cmp	r3, r8
 80599e4:	d8ef      	bhi.n	80599c6 <f_getfree+0x40>
				fs->free_clst = nfree;	/* Now free_clst is valid */
 80599e6:	9b03      	ldr	r3, [sp, #12]
				*nclst = nfree;			/* Return the free clusters */
 80599e8:	603d      	str	r5, [r7, #0]
				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 80599ea:	791a      	ldrb	r2, [r3, #4]
				fs->free_clst = nfree;	/* Now free_clst is valid */
 80599ec:	615d      	str	r5, [r3, #20]
				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 80599ee:	f042 0201 	orr.w	r2, r2, #1
 80599f2:	711a      	strb	r2, [r3, #4]
	LEAVE_FF(fs, res);
 80599f4:	e7dd      	b.n	80599b2 <f_getfree+0x2c>
					sect = fs->fatbase;		/* Top of the FAT */
 80599f6:	6a71      	ldr	r1, [r6, #36]	; 0x24
			nfree = 0;
 80599f8:	4605      	mov	r5, r0
					i = 0;					/* Offset in the sector */
 80599fa:	4606      	mov	r6, r0
						if (i == 0) {
 80599fc:	b936      	cbnz	r6, 8059a0c <f_getfree+0x86>
							res = move_window(fs, sect++);
 80599fe:	9803      	ldr	r0, [sp, #12]
 8059a00:	f101 0901 	add.w	r9, r1, #1
 8059a04:	f7ff f98c 	bl	8058d20 <move_window>
							if (res != FR_OK) break;
 8059a08:	b9f8      	cbnz	r0, 8059a4a <f_getfree+0xc4>
							res = move_window(fs, sect++);
 8059a0a:	4649      	mov	r1, r9
						if (fs->fs_type == FS_FAT16) {
 8059a0c:	9a03      	ldr	r2, [sp, #12]
							if (ld_word(fs->win + i) == 0) nfree++;
 8059a0e:	f102 0334 	add.w	r3, r2, #52	; 0x34
						if (fs->fs_type == FS_FAT16) {
 8059a12:	7812      	ldrb	r2, [r2, #0]
 8059a14:	2a02      	cmp	r2, #2
							if (ld_word(fs->win + i) == 0) nfree++;
 8059a16:	eb03 0006 	add.w	r0, r3, r6
						if (fs->fs_type == FS_FAT16) {
 8059a1a:	d109      	bne.n	8059a30 <f_getfree+0xaa>
							if (ld_word(fs->win + i) == 0) nfree++;
 8059a1c:	5b9b      	ldrh	r3, [r3, r6]
 8059a1e:	b903      	cbnz	r3, 8059a22 <f_getfree+0x9c>
 8059a20:	3501      	adds	r5, #1
							i += 2;
 8059a22:	3602      	adds	r6, #2
					} while (--clst);
 8059a24:	f1b8 0801 	subs.w	r8, r8, #1
						i %= SS(fs);
 8059a28:	f3c6 0608 	ubfx	r6, r6, #0, #9
					} while (--clst);
 8059a2c:	d1e6      	bne.n	80599fc <f_getfree+0x76>
 8059a2e:	e7da      	b.n	80599e6 <f_getfree+0x60>
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 8059a30:	f7ff f867 	bl	8058b02 <ld_dword>
 8059a34:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
							i += 4;
 8059a38:	f106 0604 	add.w	r6, r6, #4
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 8059a3c:	bf08      	it	eq
 8059a3e:	3501      	addeq	r5, #1
							i += 4;
 8059a40:	e7f0      	b.n	8059a24 <f_getfree+0x9e>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8059a42:	2401      	movs	r4, #1
 8059a44:	e7b5      	b.n	80599b2 <f_getfree+0x2c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8059a46:	2402      	movs	r4, #2
 8059a48:	e7b3      	b.n	80599b2 <f_getfree+0x2c>
 8059a4a:	4604      	mov	r4, r0
 8059a4c:	e7b1      	b.n	80599b2 <f_getfree+0x2c>

08059a4e <f_truncate>:
{
 8059a4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8059a50:	a901      	add	r1, sp, #4
{
 8059a52:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8059a54:	f7ff f884 	bl	8058b60 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 8059a58:	4604      	mov	r4, r0
 8059a5a:	b9c0      	cbnz	r0, 8059a8e <f_truncate+0x40>
 8059a5c:	7c6c      	ldrb	r4, [r5, #17]
 8059a5e:	b9b4      	cbnz	r4, 8059a8e <f_truncate+0x40>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8059a60:	7c2b      	ldrb	r3, [r5, #16]
 8059a62:	079a      	lsls	r2, r3, #30
 8059a64:	d52c      	bpl.n	8059ac0 <f_truncate+0x72>
	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
 8059a66:	696e      	ldr	r6, [r5, #20]
 8059a68:	68eb      	ldr	r3, [r5, #12]
 8059a6a:	429e      	cmp	r6, r3
 8059a6c:	d20f      	bcs.n	8059a8e <f_truncate+0x40>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 8059a6e:	6828      	ldr	r0, [r5, #0]
 8059a70:	b986      	cbnz	r6, 8059a94 <f_truncate+0x46>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8059a72:	4622      	mov	r2, r4
 8059a74:	68a9      	ldr	r1, [r5, #8]
 8059a76:	f7ff fabd 	bl	8058ff4 <remove_chain.isra.0>
 8059a7a:	4604      	mov	r4, r0
			fp->obj.sclust = 0;
 8059a7c:	60ae      	str	r6, [r5, #8]
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
 8059a7e:	696b      	ldr	r3, [r5, #20]
 8059a80:	60eb      	str	r3, [r5, #12]
		fp->flag |= FA_MODIFIED;
 8059a82:	7c2b      	ldrb	r3, [r5, #16]
 8059a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8059a88:	742b      	strb	r3, [r5, #16]
		if (res != FR_OK) ABORT(fs, res);
 8059a8a:	b104      	cbz	r4, 8059a8e <f_truncate+0x40>
 8059a8c:	746c      	strb	r4, [r5, #17]
}
 8059a8e:	4620      	mov	r0, r4
 8059a90:	b002      	add	sp, #8
 8059a92:	bd70      	pop	{r4, r5, r6, pc}
			ncl = get_fat(&fp->obj, fp->clust);
 8059a94:	69a9      	ldr	r1, [r5, #24]
 8059a96:	f7ff fa57 	bl	8058f48 <get_fat.isra.0>
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8059a9a:	1c43      	adds	r3, r0, #1
			ncl = get_fat(&fp->obj, fp->clust);
 8059a9c:	4601      	mov	r1, r0
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8059a9e:	d00b      	beq.n	8059ab8 <f_truncate+0x6a>
			if (ncl == 1) res = FR_INT_ERR;
 8059aa0:	2801      	cmp	r0, #1
 8059aa2:	d00b      	beq.n	8059abc <f_truncate+0x6e>
			if (res == FR_OK && ncl < fs->n_fatent) {
 8059aa4:	9b01      	ldr	r3, [sp, #4]
 8059aa6:	699b      	ldr	r3, [r3, #24]
 8059aa8:	4283      	cmp	r3, r0
 8059aaa:	d9e8      	bls.n	8059a7e <f_truncate+0x30>
				res = remove_chain(&fp->obj, ncl, fp->clust);
 8059aac:	69aa      	ldr	r2, [r5, #24]
 8059aae:	6828      	ldr	r0, [r5, #0]
 8059ab0:	f7ff faa0 	bl	8058ff4 <remove_chain.isra.0>
 8059ab4:	4604      	mov	r4, r0
 8059ab6:	e7e2      	b.n	8059a7e <f_truncate+0x30>
 8059ab8:	2401      	movs	r4, #1
 8059aba:	e7e0      	b.n	8059a7e <f_truncate+0x30>
			if (ncl == 1) res = FR_INT_ERR;
 8059abc:	2402      	movs	r4, #2
 8059abe:	e7de      	b.n	8059a7e <f_truncate+0x30>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8059ac0:	2407      	movs	r4, #7
 8059ac2:	e7e4      	b.n	8059a8e <f_truncate+0x40>

08059ac4 <f_unlink>:
{
 8059ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8059ac6:	b09d      	sub	sp, #116	; 0x74
	res = mount_volume(&path, &fs, FA_WRITE);
 8059ac8:	2202      	movs	r2, #2
{
 8059aca:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, FA_WRITE);
 8059acc:	a903      	add	r1, sp, #12
 8059ace:	a801      	add	r0, sp, #4
 8059ad0:	f7f4 fe0c 	bl	804e6ec <mount_volume>
	if (res == FR_OK) {
 8059ad4:	4604      	mov	r4, r0
 8059ad6:	b980      	cbnz	r0, 8059afa <f_unlink+0x36>
		dj.obj.fs = fs;
 8059ad8:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 8059ada:	a804      	add	r0, sp, #16
 8059adc:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8059ade:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);		/* Follow the file path */
 8059ae0:	f7f5 f848 	bl	804eb74 <follow_path>
		if (res == FR_OK) {					/* The object is accessible */
 8059ae4:	4604      	mov	r4, r0
 8059ae6:	b940      	cbnz	r0, 8059afa <f_unlink+0x36>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8059ae8:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8059aec:	2b00      	cmp	r3, #0
 8059aee:	db36      	blt.n	8059b5e <f_unlink+0x9a>
				if (dj.obj.attr & AM_RDO) {
 8059af0:	f89d 7016 	ldrb.w	r7, [sp, #22]
 8059af4:	07fa      	lsls	r2, r7, #31
 8059af6:	d503      	bpl.n	8059b00 <f_unlink+0x3c>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8059af8:	2407      	movs	r4, #7
}
 8059afa:	4620      	mov	r0, r4
 8059afc:	b01d      	add	sp, #116	; 0x74
 8059afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
					dclst = ld_clust(fs, dj.dir);
 8059b00:	9e03      	ldr	r6, [sp, #12]
 8059b02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8059b04:	7830      	ldrb	r0, [r6, #0]
 8059b06:	f7ff fa17 	bl	8058f38 <ld_clust.isra.0>
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8059b0a:	06fb      	lsls	r3, r7, #27
					dclst = ld_clust(fs, dj.dir);
 8059b0c:	4605      	mov	r5, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8059b0e:	d40b      	bmi.n	8059b28 <f_unlink+0x64>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8059b10:	a804      	add	r0, sp, #16
 8059b12:	f7ff fbaa 	bl	805926a <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 8059b16:	4604      	mov	r4, r0
 8059b18:	2800      	cmp	r0, #0
 8059b1a:	d1ee      	bne.n	8059afa <f_unlink+0x36>
 8059b1c:	b9b5      	cbnz	r5, 8059b4c <f_unlink+0x88>
				if (res == FR_OK) res = sync_fs(fs);
 8059b1e:	9803      	ldr	r0, [sp, #12]
 8059b20:	f7ff f9bf 	bl	8058ea2 <sync_fs>
 8059b24:	4604      	mov	r4, r0
 8059b26:	e7e8      	b.n	8059afa <f_unlink+0x36>
						res = dir_sdi(&sdj, 0);
 8059b28:	4621      	mov	r1, r4
						sdj.obj.sclust = dclst;
 8059b2a:	9012      	str	r0, [sp, #72]	; 0x48
						res = dir_sdi(&sdj, 0);
 8059b2c:	a810      	add	r0, sp, #64	; 0x40
						sdj.obj.fs = fs;			/* Open the sub-directory */
 8059b2e:	9610      	str	r6, [sp, #64]	; 0x40
						res = dir_sdi(&sdj, 0);
 8059b30:	f7ff fb5a 	bl	80591e8 <dir_sdi>
						if (res == FR_OK) {
 8059b34:	4604      	mov	r4, r0
 8059b36:	2800      	cmp	r0, #0
 8059b38:	d1df      	bne.n	8059afa <f_unlink+0x36>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
 8059b3a:	a810      	add	r0, sp, #64	; 0x40
 8059b3c:	f7f4 fefc 	bl	804e938 <dir_read.constprop.0>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8059b40:	4604      	mov	r4, r0
 8059b42:	2800      	cmp	r0, #0
 8059b44:	d0d8      	beq.n	8059af8 <f_unlink+0x34>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8059b46:	2804      	cmp	r0, #4
 8059b48:	d1d7      	bne.n	8059afa <f_unlink+0x36>
 8059b4a:	e7e1      	b.n	8059b10 <f_unlink+0x4c>
					res = remove_chain(&dj.obj, dclst, 0);
 8059b4c:	4602      	mov	r2, r0
 8059b4e:	4629      	mov	r1, r5
 8059b50:	9804      	ldr	r0, [sp, #16]
 8059b52:	f7ff fa4f 	bl	8058ff4 <remove_chain.isra.0>
				if (res == FR_OK) res = sync_fs(fs);
 8059b56:	4604      	mov	r4, r0
 8059b58:	2800      	cmp	r0, #0
 8059b5a:	d1ce      	bne.n	8059afa <f_unlink+0x36>
 8059b5c:	e7df      	b.n	8059b1e <f_unlink+0x5a>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8059b5e:	2406      	movs	r4, #6
 8059b60:	e7cb      	b.n	8059afa <f_unlink+0x36>

08059b62 <f_mkdir>:
{
 8059b62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8059b64:	b091      	sub	sp, #68	; 0x44
	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 8059b66:	2202      	movs	r2, #2
{
 8059b68:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 8059b6a:	a903      	add	r1, sp, #12
 8059b6c:	a801      	add	r0, sp, #4
 8059b6e:	f7f4 fdbd 	bl	804e6ec <mount_volume>
 8059b72:	4604      	mov	r4, r0
 8059b74:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8059b76:	2800      	cmp	r0, #0
 8059b78:	d168      	bne.n	8059c4c <f_mkdir+0xea>
		dj.obj.fs = fs;
 8059b7a:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);			/* Follow the file path */
 8059b7c:	a804      	add	r0, sp, #16
 8059b7e:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8059b80:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);			/* Follow the file path */
 8059b82:	f7f4 fff7 	bl	804eb74 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
 8059b86:	4604      	mov	r4, r0
 8059b88:	2800      	cmp	r0, #0
 8059b8a:	d06d      	beq.n	8059c68 <f_mkdir+0x106>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
 8059b8c:	2804      	cmp	r0, #4
 8059b8e:	d15d      	bne.n	8059c4c <f_mkdir+0xea>
			sobj.fs = fs;						/* New object id to create a new chain */
 8059b90:	9e03      	ldr	r6, [sp, #12]
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
 8059b92:	4629      	mov	r1, r5
 8059b94:	4630      	mov	r0, r6
 8059b96:	f7ff fa63 	bl	8059060 <create_chain.isra.0>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
 8059b9a:	4605      	mov	r5, r0
 8059b9c:	2800      	cmp	r0, #0
 8059b9e:	d058      	beq.n	8059c52 <f_mkdir+0xf0>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
 8059ba0:	2801      	cmp	r0, #1
 8059ba2:	d05d      	beq.n	8059c60 <f_mkdir+0xfe>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
 8059ba4:	1c43      	adds	r3, r0, #1
 8059ba6:	d05d      	beq.n	8059c64 <f_mkdir+0x102>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
 8059ba8:	4629      	mov	r1, r5
 8059baa:	9803      	ldr	r0, [sp, #12]
 8059bac:	f7ff f94f 	bl	8058e4e <dir_clear>
 8059bb0:	4604      	mov	r4, r0
				if (res == FR_OK) {
 8059bb2:	2800      	cmp	r0, #0
 8059bb4:	d14e      	bne.n	8059c54 <f_mkdir+0xf2>
						memset(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
 8059bb6:	9b03      	ldr	r3, [sp, #12]
__ssp_bos_icheck3(memset, void *, int)
 8059bb8:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
 8059bbc:	635a      	str	r2, [r3, #52]	; 0x34
						st_clust(fs, fs->win, dcl);
 8059bbe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8059bc2:	639a      	str	r2, [r3, #56]	; 0x38
 8059bc4:	f8c3 203b 	str.w	r2, [r3, #59]	; 0x3b
						fs->win[DIR_Name] = '.';
 8059bc8:	222e      	movs	r2, #46	; 0x2e
	*ptr++ = (BYTE)val; val >>= 8;
 8059bca:	f883 004a 	strb.w	r0, [r3, #74]	; 0x4a
						fs->win[DIR_Name] = '.';
 8059bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
						fs->win[DIR_Attr] = AM_DIR;
 8059bd2:	2210      	movs	r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8059bd4:	f883 004b 	strb.w	r0, [r3, #75]	; 0x4b
						st_clust(fs, fs->win, dcl);
 8059bd8:	4618      	mov	r0, r3
						fs->win[DIR_Attr] = AM_DIR;
 8059bda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	*ptr++ = (BYTE)val; val >>= 8;
 8059bde:	2221      	movs	r2, #33	; 0x21
 8059be0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	*ptr++ = (BYTE)val;
 8059be4:	2250      	movs	r2, #80	; 0x50
 8059be6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
						st_clust(fs, fs->win, dcl);
 8059bea:	462a      	mov	r2, r5
 8059bec:	f7fe ff9e 	bl	8058b2c <st_clust>
						memcpy(fs->win + SZDIRE, fs->win, SZDIRE);	/* Create ".." entry */
 8059bf0:	9803      	ldr	r0, [sp, #12]
 8059bf2:	f100 0354 	add.w	r3, r0, #84	; 0x54
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8059bf6:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8059bfa:	461a      	mov	r2, r3
 8059bfc:	f851 4b04 	ldr.w	r4, [r1], #4
 8059c00:	4299      	cmp	r1, r3
 8059c02:	f842 4b04 	str.w	r4, [r2], #4
 8059c06:	d1f9      	bne.n	8059bfc <f_mkdir+0x9a>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8059c08:	232e      	movs	r3, #46	; 0x2e
						st_clust(fs, fs->win + SZDIRE, pcl);
 8059c0a:	9a06      	ldr	r2, [sp, #24]
						fs->wflag = 1;
 8059c0c:	2701      	movs	r7, #1
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8059c0e:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
						st_clust(fs, fs->win + SZDIRE, pcl);
 8059c12:	f7fe ff8b 	bl	8058b2c <st_clust>
						fs->wflag = 1;
 8059c16:	9b03      	ldr	r3, [sp, #12]
					res = dir_register(&dj);	/* Register the object to the parent directoy */
 8059c18:	a804      	add	r0, sp, #16
						fs->wflag = 1;
 8059c1a:	70df      	strb	r7, [r3, #3]
					res = dir_register(&dj);	/* Register the object to the parent directoy */
 8059c1c:	f7f5 f8f4 	bl	804ee08 <dir_register>
			if (res == FR_OK) {
 8059c20:	4604      	mov	r4, r0
 8059c22:	b9b8      	cbnz	r0, 8059c54 <f_mkdir+0xf2>
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
 8059c24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8059c26:	2221      	movs	r2, #33	; 0x21
 8059c28:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 8059c2a:	2250      	movs	r2, #80	; 0x50
	*ptr++ = (BYTE)val; val >>= 8;
 8059c2c:	7598      	strb	r0, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8059c2e:	75d8      	strb	r0, [r3, #23]
	*ptr++ = (BYTE)val;
 8059c30:	765a      	strb	r2, [r3, #25]
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
 8059c32:	462a      	mov	r2, r5
 8059c34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8059c36:	9803      	ldr	r0, [sp, #12]
 8059c38:	f7fe ff78 	bl	8058b2c <st_clust>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
 8059c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8059c3e:	2210      	movs	r2, #16
					fs->wflag = 1;
 8059c40:	9803      	ldr	r0, [sp, #12]
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
 8059c42:	72da      	strb	r2, [r3, #11]
					fs->wflag = 1;
 8059c44:	70c7      	strb	r7, [r0, #3]
					res = sync_fs(fs);
 8059c46:	f7ff f92c 	bl	8058ea2 <sync_fs>
 8059c4a:	4604      	mov	r4, r0
}
 8059c4c:	4620      	mov	r0, r4
 8059c4e:	b011      	add	sp, #68	; 0x44
 8059c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
 8059c52:	2407      	movs	r4, #7
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
 8059c54:	2200      	movs	r2, #0
 8059c56:	4629      	mov	r1, r5
 8059c58:	4630      	mov	r0, r6
 8059c5a:	f7ff f9cb 	bl	8058ff4 <remove_chain.isra.0>
 8059c5e:	e7f5      	b.n	8059c4c <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
 8059c60:	2402      	movs	r4, #2
 8059c62:	e7f7      	b.n	8059c54 <f_mkdir+0xf2>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
 8059c64:	2401      	movs	r4, #1
 8059c66:	e7f5      	b.n	8059c54 <f_mkdir+0xf2>
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
 8059c68:	2408      	movs	r4, #8
	LEAVE_FF(fs, res);
 8059c6a:	e7ef      	b.n	8059c4c <f_mkdir+0xea>

08059c6c <f_rename>:
{
 8059c6c:	b530      	push	{r4, r5, lr}
 8059c6e:	b0a5      	sub	sp, #148	; 0x94
 8059c70:	e9cd 1000 	strd	r1, r0, [sp]
	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
 8059c74:	4668      	mov	r0, sp
 8059c76:	f7f4 fca1 	bl	804e5bc <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 8059c7a:	2202      	movs	r2, #2
 8059c7c:	a903      	add	r1, sp, #12
 8059c7e:	a801      	add	r0, sp, #4
 8059c80:	f7f4 fd34 	bl	804e6ec <mount_volume>
	if (res == FR_OK) {
 8059c84:	2800      	cmp	r0, #0
 8059c86:	d17b      	bne.n	8059d80 <f_rename+0x114>
		djo.obj.fs = fs;
 8059c88:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&djo, path_old);			/* Check old object */
 8059c8a:	a80c      	add	r0, sp, #48	; 0x30
 8059c8c:	9901      	ldr	r1, [sp, #4]
		djo.obj.fs = fs;
 8059c8e:	930c      	str	r3, [sp, #48]	; 0x30
		res = follow_path(&djo, path_old);			/* Check old object */
 8059c90:	f7f4 ff70 	bl	804eb74 <follow_path>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 8059c94:	2800      	cmp	r0, #0
 8059c96:	d173      	bne.n	8059d80 <f_rename+0x114>
 8059c98:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8059c9c:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8059ca0:	d170      	bne.n	8059d84 <f_rename+0x118>
				memcpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
 8059ca2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8059ca4:	ac04      	add	r4, sp, #16
 8059ca6:	f103 0520 	add.w	r5, r3, #32
 8059caa:	6818      	ldr	r0, [r3, #0]
 8059cac:	3308      	adds	r3, #8
 8059cae:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8059cb2:	4622      	mov	r2, r4
 8059cb4:	42ab      	cmp	r3, r5
 8059cb6:	c203      	stmia	r2!, {r0, r1}
 8059cb8:	4614      	mov	r4, r2
 8059cba:	d1f6      	bne.n	8059caa <f_rename+0x3e>
				memcpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 8059cbc:	ad0c      	add	r5, sp, #48	; 0x30
 8059cbe:	ac18      	add	r4, sp, #96	; 0x60
 8059cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8059cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8059cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8059cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8059cc8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8059ccc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 8059cd0:	9900      	ldr	r1, [sp, #0]
 8059cd2:	a818      	add	r0, sp, #96	; 0x60
 8059cd4:	f7f4 ff4e 	bl	804eb74 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 8059cd8:	b948      	cbnz	r0, 8059cee <f_rename+0x82>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 8059cda:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8059cdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8059cde:	429a      	cmp	r2, r3
 8059ce0:	d103      	bne.n	8059cea <f_rename+0x7e>
 8059ce2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8059ce4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8059ce6:	429a      	cmp	r2, r3
 8059ce8:	d003      	beq.n	8059cf2 <f_rename+0x86>
 8059cea:	2008      	movs	r0, #8
 8059cec:	e048      	b.n	8059d80 <f_rename+0x114>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 8059cee:	2804      	cmp	r0, #4
 8059cf0:	d146      	bne.n	8059d80 <f_rename+0x114>
					res = dir_register(&djn);			/* Register the new entry */
 8059cf2:	a818      	add	r0, sp, #96	; 0x60
 8059cf4:	f7f5 f888 	bl	804ee08 <dir_register>
					if (res == FR_OK) {
 8059cf8:	2800      	cmp	r0, #0
 8059cfa:	d141      	bne.n	8059d80 <f_rename+0x114>
						dir = djn.dir;					/* Copy directory entry of the object except name */
 8059cfc:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8059cfe:	f10d 031d 	add.w	r3, sp, #29
 8059d02:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 8059d06:	f101 020d 	add.w	r2, r1, #13
 8059d0a:	f853 4b04 	ldr.w	r4, [r3], #4
 8059d0e:	4283      	cmp	r3, r0
 8059d10:	f842 4b04 	str.w	r4, [r2], #4
 8059d14:	d1f9      	bne.n	8059d0a <f_rename+0x9e>
 8059d16:	8818      	ldrh	r0, [r3, #0]
						fs->wflag = 1;
 8059d18:	2501      	movs	r5, #1
 8059d1a:	8010      	strh	r0, [r2, #0]
 8059d1c:	789b      	ldrb	r3, [r3, #2]
 8059d1e:	7093      	strb	r3, [r2, #2]
						dir[DIR_Attr] = buf[DIR_Attr];
 8059d20:	f89d 301b 	ldrb.w	r3, [sp, #27]
						fs->wflag = 1;
 8059d24:	9c03      	ldr	r4, [sp, #12]
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
 8059d26:	06da      	lsls	r2, r3, #27
 8059d28:	bf58      	it	pl
 8059d2a:	f043 0320 	orrpl.w	r3, r3, #32
 8059d2e:	72cb      	strb	r3, [r1, #11]
						fs->wflag = 1;
 8059d30:	70e5      	strb	r5, [r4, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 8059d32:	7acb      	ldrb	r3, [r1, #11]
 8059d34:	06db      	lsls	r3, r3, #27
 8059d36:	d51c      	bpl.n	8059d72 <f_rename+0x106>
 8059d38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8059d3a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8059d3c:	429a      	cmp	r2, r3
 8059d3e:	d018      	beq.n	8059d72 <f_rename+0x106>
							sect = clst2sect(fs, ld_clust(fs, dir));
 8059d40:	7820      	ldrb	r0, [r4, #0]
 8059d42:	f7ff f8f9 	bl	8058f38 <ld_clust.isra.0>
 8059d46:	4601      	mov	r1, r0
 8059d48:	4620      	mov	r0, r4
 8059d4a:	f7fe fee4 	bl	8058b16 <clst2sect>
							if (sect == 0) {
 8059d4e:	4601      	mov	r1, r0
 8059d50:	b1d0      	cbz	r0, 8059d88 <f_rename+0x11c>
								res = move_window(fs, sect);
 8059d52:	4620      	mov	r0, r4
 8059d54:	f7fe ffe4 	bl	8058d20 <move_window>
								if (res == FR_OK && dir[1] == '.') {
 8059d58:	b990      	cbnz	r0, 8059d80 <f_rename+0x114>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 8059d5a:	9803      	ldr	r0, [sp, #12]
								if (res == FR_OK && dir[1] == '.') {
 8059d5c:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
 8059d60:	2b2e      	cmp	r3, #46	; 0x2e
 8059d62:	d106      	bne.n	8059d72 <f_rename+0x106>
									st_clust(fs, dir, djn.obj.sclust);
 8059d64:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8059d66:	f100 0154 	add.w	r1, r0, #84	; 0x54
 8059d6a:	f7fe fedf 	bl	8058b2c <st_clust>
									fs->wflag = 1;
 8059d6e:	9b03      	ldr	r3, [sp, #12]
 8059d70:	70dd      	strb	r5, [r3, #3]
				res = dir_remove(&djo);		/* Remove old entry */
 8059d72:	a80c      	add	r0, sp, #48	; 0x30
 8059d74:	f7ff fa79 	bl	805926a <dir_remove>
				if (res == FR_OK) {
 8059d78:	b910      	cbnz	r0, 8059d80 <f_rename+0x114>
					res = sync_fs(fs);
 8059d7a:	9803      	ldr	r0, [sp, #12]
 8059d7c:	f7ff f891 	bl	8058ea2 <sync_fs>
}
 8059d80:	b025      	add	sp, #148	; 0x94
 8059d82:	bd30      	pop	{r4, r5, pc}
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 8059d84:	2006      	movs	r0, #6
 8059d86:	e7fb      	b.n	8059d80 <f_rename+0x114>
								res = FR_INT_ERR;
 8059d88:	2002      	movs	r0, #2
 8059d8a:	e7f9      	b.n	8059d80 <f_rename+0x114>

08059d8c <HAL_SD_MspInit>:
}
 8059d8c:	4770      	bx	lr

08059d8e <HAL_SD_MspDeInit>:
 8059d8e:	4770      	bx	lr

08059d90 <HAL_SD_DeInit>:
{
 8059d90:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8059d92:	4604      	mov	r4, r0
 8059d94:	b168      	cbz	r0, 8059db2 <HAL_SD_DeInit+0x22>
  hsd->State = HAL_SD_STATE_BUSY;
 8059d96:	2303      	movs	r3, #3
 8059d98:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
  /* Set Power State to OFF */
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 8059d9c:	6800      	ldr	r0, [r0, #0]
 8059d9e:	f000 f887 	bl	8059eb0 <SDMMC_PowerState_OFF>
  HAL_SD_MspDeInit(hsd);
 8059da2:	4620      	mov	r0, r4
 8059da4:	f7ff fff3 	bl	8059d8e <HAL_SD_MspDeInit>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8059da8:	2000      	movs	r0, #0
 8059daa:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 8059dac:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8059db0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8059db2:	2001      	movs	r0, #1
 8059db4:	e7fc      	b.n	8059db0 <HAL_SD_DeInit+0x20>

08059db6 <HAL_SD_Init>:
{
 8059db6:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8059db8:	4604      	mov	r4, r0
 8059dba:	b908      	cbnz	r0, 8059dc0 <HAL_SD_Init+0xa>
    return HAL_ERROR;
 8059dbc:	2001      	movs	r0, #1
}
 8059dbe:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8059dc0:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8059dc4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8059dc8:	b913      	cbnz	r3, 8059dd0 <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 8059dca:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8059dcc:	f7ff ffde 	bl	8059d8c <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8059dd0:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8059dd2:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8059dd4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8059dd8:	f7f6 f858 	bl	804fe8c <HAL_SD_InitCard>
 8059ddc:	2800      	cmp	r0, #0
 8059dde:	d1ed      	bne.n	8059dbc <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 8059de0:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8059de2:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8059de4:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8059de6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8059dea:	e7e8      	b.n	8059dbe <HAL_SD_Init+0x8>

08059dec <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8059dec:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8059dee:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8059df0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8059df2:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8059df4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8059df6:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8059df8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8059dfa:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8059dfc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8059dfe:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8059e00:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8059e02:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8059e04:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8059e06:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8059e08:	6e03      	ldr	r3, [r0, #96]	; 0x60
}
 8059e0a:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8059e0c:	61cb      	str	r3, [r1, #28]
}
 8059e0e:	4770      	bx	lr

08059e10 <HAL_SD_GetCardState>:
  {
    return HAL_SD_ERROR_PARAM;
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8059e10:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8059e12:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8059e14:	0409      	lsls	r1, r1, #16
{
 8059e16:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8059e18:	6800      	ldr	r0, [r0, #0]
 8059e1a:	f000 f965 	bl	805a0e8 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8059e1e:	4601      	mov	r1, r0
 8059e20:	b928      	cbnz	r0, 8059e2e <HAL_SD_GetCardState+0x1e>
  {
    return errorstate;
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8059e22:	6820      	ldr	r0, [r4, #0]
 8059e24:	f000 f85f 	bl	8059ee6 <SDMMC_GetResponse>
}
 8059e28:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8059e2c:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8059e2e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8059e30:	4308      	orrs	r0, r1
 8059e32:	63a0      	str	r0, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8059e34:	2000      	movs	r0, #0
 8059e36:	e7f7      	b.n	8059e28 <HAL_SD_GetCardState+0x18>

08059e38 <LL_RCC_GetSystemClocksFreq>:
{
 8059e38:	b510      	push	{r4, lr}
 8059e3a:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8059e3c:	f7f6 f96a 	bl	8050114 <RCC_GetSystemClockFreq>
 8059e40:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8059e42:	f7f6 f923 	bl	805008c <RCC_GetHCLKClockFreq>
 8059e46:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8059e48:	f7f6 f92c 	bl	80500a4 <RCC_GetPCLK1ClockFreq>
 8059e4c:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8059e4e:	6860      	ldr	r0, [r4, #4]
 8059e50:	f7f6 f934 	bl	80500bc <RCC_GetPCLK2ClockFreq>
 8059e54:	60e0      	str	r0, [r4, #12]
}
 8059e56:	bd10      	pop	{r4, pc}

08059e58 <SDMMC_Init>:
{
 8059e58:	b084      	sub	sp, #16
 8059e5a:	b510      	push	{r4, lr}
 8059e5c:	ac03      	add	r4, sp, #12
 8059e5e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8059e62:	460b      	mov	r3, r1
 8059e64:	9904      	ldr	r1, [sp, #16]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8059e66:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8059e68:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8059e6a:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8059e6c:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockBypass         |\
 8059e70:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8059e72:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8059e74:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.ClockPowerSave      |\
 8059e78:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8059e7a:	9907      	ldr	r1, [sp, #28]
 8059e7c:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8059e7e:	9908      	ldr	r1, [sp, #32]
 8059e80:	430b      	orrs	r3, r1
}
 8059e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8059e86:	4313      	orrs	r3, r2
}
 8059e88:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8059e8a:	6043      	str	r3, [r0, #4]
}
 8059e8c:	2000      	movs	r0, #0
 8059e8e:	4770      	bx	lr

08059e90 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8059e90:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8059e94:	4770      	bx	lr

08059e96 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 8059e96:	680b      	ldr	r3, [r1, #0]
 8059e98:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8059e9c:	2000      	movs	r0, #0
 8059e9e:	4770      	bx	lr

08059ea0 <SDMMC_PowerState_ON>:
{
 8059ea0:	b508      	push	{r3, lr}
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8059ea2:	2303      	movs	r3, #3
 8059ea4:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 8059ea6:	2002      	movs	r0, #2
 8059ea8:	f7fc f867 	bl	8055f7a <HAL_Delay>
}
 8059eac:	2000      	movs	r0, #0
 8059eae:	bd08      	pop	{r3, pc}

08059eb0 <SDMMC_PowerState_OFF>:
  SDMMCx->POWER = (uint32_t)0x00000000;
 8059eb0:	2300      	movs	r3, #0
 8059eb2:	6003      	str	r3, [r0, #0]
}
 8059eb4:	4618      	mov	r0, r3
 8059eb6:	4770      	bx	lr

08059eb8 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8059eb8:	6800      	ldr	r0, [r0, #0]
}
 8059eba:	f000 0003 	and.w	r0, r0, #3
 8059ebe:	4770      	bx	lr

08059ec0 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8059ec0:	680b      	ldr	r3, [r1, #0]
{
 8059ec2:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 8059ec4:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8059ec6:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8059ec8:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8059ecc:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8059ed0:	4323      	orrs	r3, r4
                       Command->Response         |\
 8059ed2:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8059ed4:	6909      	ldr	r1, [r1, #16]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8059ed6:	f022 020f 	bic.w	r2, r2, #15
                       Command->Response         |\
 8059eda:	4323      	orrs	r3, r4
                       Command->WaitForInterrupt |\
 8059edc:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8059ede:	4313      	orrs	r3, r2
 8059ee0:	60c3      	str	r3, [r0, #12]
}
 8059ee2:	2000      	movs	r0, #0
 8059ee4:	bd10      	pop	{r4, pc}

08059ee6 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8059ee6:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8059ee8:	5840      	ldr	r0, [r0, r1]
}
 8059eea:	4770      	bx	lr

08059eec <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8059eec:	680b      	ldr	r3, [r1, #0]
{
 8059eee:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8059ef0:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8059ef2:	684b      	ldr	r3, [r1, #4]
 8059ef4:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8059ef6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8059ef8:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8059efc:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8059f00:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8059f02:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8059f04:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8059f06:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8059f08:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8059f0a:	4313      	orrs	r3, r2
 8059f0c:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8059f0e:	2000      	movs	r0, #0
 8059f10:	bd10      	pop	{r4, pc}

08059f12 <SDMMC_CmdBlockLength>:
{
 8059f12:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8059f14:	2340      	movs	r3, #64	; 0x40
{
 8059f16:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8059f18:	2510      	movs	r5, #16
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8059f1a:	2200      	movs	r2, #0
{
 8059f1c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8059f1e:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8059f20:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8059f22:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8059f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8059f2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8059f2e:	f7ff ffc7 	bl	8059ec0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8059f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8059f36:	4629      	mov	r1, r5
 8059f38:	4620      	mov	r0, r4
 8059f3a:	f7f6 f947 	bl	80501cc <SDMMC_GetCmdResp1>
}
 8059f3e:	b007      	add	sp, #28
 8059f40:	bd30      	pop	{r4, r5, pc}

08059f42 <SDMMC_CmdReadSingleBlock>:
{
 8059f42:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8059f44:	2340      	movs	r3, #64	; 0x40
{
 8059f46:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8059f48:	2511      	movs	r5, #17
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8059f4a:	2200      	movs	r2, #0
{
 8059f4c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8059f4e:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8059f50:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8059f52:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8059f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8059f5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8059f5e:	f7ff ffaf 	bl	8059ec0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8059f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8059f66:	4629      	mov	r1, r5
 8059f68:	4620      	mov	r0, r4
 8059f6a:	f7f6 f92f 	bl	80501cc <SDMMC_GetCmdResp1>
}
 8059f6e:	b007      	add	sp, #28
 8059f70:	bd30      	pop	{r4, r5, pc}

08059f72 <SDMMC_CmdReadMultiBlock>:
{
 8059f72:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8059f74:	2340      	movs	r3, #64	; 0x40
{
 8059f76:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8059f78:	2512      	movs	r5, #18
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8059f7a:	2200      	movs	r2, #0
{
 8059f7c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8059f7e:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8059f80:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8059f82:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8059f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8059f8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8059f8e:	f7ff ff97 	bl	8059ec0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8059f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8059f96:	4629      	mov	r1, r5
 8059f98:	4620      	mov	r0, r4
 8059f9a:	f7f6 f917 	bl	80501cc <SDMMC_GetCmdResp1>
}
 8059f9e:	b007      	add	sp, #28
 8059fa0:	bd30      	pop	{r4, r5, pc}

08059fa2 <SDMMC_CmdWriteSingleBlock>:
{
 8059fa2:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8059fa4:	2340      	movs	r3, #64	; 0x40
{
 8059fa6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8059fa8:	2518      	movs	r5, #24
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8059faa:	2200      	movs	r2, #0
{
 8059fac:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8059fae:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8059fb0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8059fb2:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8059fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8059fba:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8059fbe:	f7ff ff7f 	bl	8059ec0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8059fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8059fc6:	4629      	mov	r1, r5
 8059fc8:	4620      	mov	r0, r4
 8059fca:	f7f6 f8ff 	bl	80501cc <SDMMC_GetCmdResp1>
}
 8059fce:	b007      	add	sp, #28
 8059fd0:	bd30      	pop	{r4, r5, pc}

08059fd2 <SDMMC_CmdWriteMultiBlock>:
{
 8059fd2:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8059fd4:	2340      	movs	r3, #64	; 0x40
{
 8059fd6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8059fd8:	2519      	movs	r5, #25
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8059fda:	2200      	movs	r2, #0
{
 8059fdc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8059fde:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8059fe0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8059fe2:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8059fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8059fea:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8059fee:	f7ff ff67 	bl	8059ec0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8059ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8059ff6:	4629      	mov	r1, r5
 8059ff8:	4620      	mov	r0, r4
 8059ffa:	f7f6 f8e7 	bl	80501cc <SDMMC_GetCmdResp1>
}
 8059ffe:	b007      	add	sp, #28
 805a000:	bd30      	pop	{r4, r5, pc}

0805a002 <SDMMC_CmdSelDesel>:
{
 805a002:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 805a004:	2340      	movs	r3, #64	; 0x40
{
 805a006:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 805a008:	2507      	movs	r5, #7
{
 805a00a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 805a00c:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 805a00e:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 805a010:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 805a012:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 805a016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 805a01a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 805a01e:	f7ff ff4f 	bl	8059ec0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 805a022:	f241 3288 	movw	r2, #5000	; 0x1388
 805a026:	4629      	mov	r1, r5
 805a028:	4620      	mov	r0, r4
 805a02a:	f7f6 f8cf 	bl	80501cc <SDMMC_GetCmdResp1>
}
 805a02e:	b007      	add	sp, #28
 805a030:	bd30      	pop	{r4, r5, pc}

0805a032 <SDMMC_CmdAppCommand>:
{
 805a032:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 805a034:	2340      	movs	r3, #64	; 0x40
{
 805a036:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 805a038:	2537      	movs	r5, #55	; 0x37
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 805a03a:	2200      	movs	r2, #0
{
 805a03c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 805a03e:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 805a040:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 805a042:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 805a046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 805a04a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 805a04e:	f7ff ff37 	bl	8059ec0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 805a052:	f241 3288 	movw	r2, #5000	; 0x1388
 805a056:	4629      	mov	r1, r5
 805a058:	4620      	mov	r0, r4
 805a05a:	f7f6 f8b7 	bl	80501cc <SDMMC_GetCmdResp1>
}
 805a05e:	b007      	add	sp, #28
 805a060:	bd30      	pop	{r4, r5, pc}

0805a062 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 805a062:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 805a066:	2229      	movs	r2, #41	; 0x29
 805a068:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 805a06a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
{
 805a06e:	b510      	push	{r4, lr}
 805a070:	b086      	sub	sp, #24
 805a072:	4604      	mov	r4, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 805a074:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 805a078:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 805a07a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 805a07e:	2100      	movs	r1, #0
 805a080:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 805a084:	a901      	add	r1, sp, #4
 805a086:	f7ff ff1b 	bl	8059ec0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 805a08a:	4620      	mov	r0, r4
 805a08c:	f7f6 f87c 	bl	8050188 <SDMMC_GetCmdResp3>
}
 805a090:	b006      	add	sp, #24
 805a092:	bd10      	pop	{r4, pc}

0805a094 <SDMMC_CmdSendCID>:
{
 805a094:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 805a096:	2300      	movs	r3, #0
{
 805a098:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 805a09a:	2202      	movs	r2, #2
{
 805a09c:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 805a09e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 805a0a0:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 805a0a4:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 805a0a6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 805a0aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 805a0ae:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 805a0b0:	f7ff ff06 	bl	8059ec0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 805a0b4:	4620      	mov	r0, r4
 805a0b6:	f7f6 f841 	bl	805013c <SDMMC_GetCmdResp2>
}
 805a0ba:	b006      	add	sp, #24
 805a0bc:	bd10      	pop	{r4, pc}

0805a0be <SDMMC_CmdSendCSD>:
{
 805a0be:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 805a0c0:	2209      	movs	r2, #9
{
 805a0c2:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 805a0c4:	23c0      	movs	r3, #192	; 0xc0
{
 805a0c6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 805a0c8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 805a0ca:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 805a0cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 805a0d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 805a0d4:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 805a0d8:	a901      	add	r1, sp, #4
 805a0da:	f7ff fef1 	bl	8059ec0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 805a0de:	4620      	mov	r0, r4
 805a0e0:	f7f6 f82c 	bl	805013c <SDMMC_GetCmdResp2>
}
 805a0e4:	b006      	add	sp, #24
 805a0e6:	bd10      	pop	{r4, pc}

0805a0e8 <SDMMC_CmdSendStatus>:
{
 805a0e8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 805a0ea:	2340      	movs	r3, #64	; 0x40
{
 805a0ec:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 805a0ee:	250d      	movs	r5, #13
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 805a0f0:	2200      	movs	r2, #0
{
 805a0f2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 805a0f4:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 805a0f6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 805a0f8:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 805a0fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 805a100:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 805a104:	f7ff fedc 	bl	8059ec0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 805a108:	f241 3288 	movw	r2, #5000	; 0x1388
 805a10c:	4629      	mov	r1, r5
 805a10e:	4620      	mov	r0, r4
 805a110:	f7f6 f85c 	bl	80501cc <SDMMC_GetCmdResp1>
}
 805a114:	b007      	add	sp, #28
 805a116:	bd30      	pop	{r4, r5, pc}

0805a118 <LL_TIM_StructInit>:
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 805a118:	2300      	movs	r3, #0
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 805a11a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 805a11e:	8003      	strh	r3, [r0, #0]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 805a120:	6043      	str	r3, [r0, #4]
  TIM_InitStruct->RepetitionCounter = 0x00000000U;
 805a122:	6103      	str	r3, [r0, #16]
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
 805a124:	e9c0 2302 	strd	r2, r3, [r0, #8]
}
 805a128:	4770      	bx	lr

0805a12a <LL_TIM_OC_StructInit>:
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 805a12a:	2300      	movs	r3, #0
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 805a12c:	e9c0 3300 	strd	r3, r3, [r0]
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 805a130:	e9c0 3302 	strd	r3, r3, [r0, #8]
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 805a134:	e9c0 3304 	strd	r3, r3, [r0, #16]
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 805a138:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
 805a13c:	4770      	bx	lr

0805a13e <z_impl_spi_transceive>:
{
 805a13e:	b410      	push	{r4}
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 805a140:	6884      	ldr	r4, [r0, #8]
 805a142:	6824      	ldr	r4, [r4, #0]
 805a144:	46a4      	mov	ip, r4
}
 805a146:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 805a14a:	4760      	bx	ip

0805a14c <adis16470_dr>:
	z_impl_k_sem_give(sem);
 805a14c:	f101 000c 	add.w	r0, r1, #12
 805a150:	f7f7 bcc8 	b.w	8051ae4 <z_impl_k_sem_give>

0805a154 <k_usleep.constprop.0.isra.0>:
	return z_impl_k_usleep(us);
 805a154:	2014      	movs	r0, #20
 805a156:	f000 ba8e 	b.w	805a676 <z_impl_k_usleep>

0805a15a <k_msleep.isra.0>:
			return t * ((uint64_t)to_hz / from_hz);
 805a15a:	210a      	movs	r1, #10
 805a15c:	fb80 0101 	smull	r0, r1, r0, r1
	return z_impl_k_sleep(timeout);
 805a160:	f7f8 b8a2 	b.w	80522a8 <z_impl_k_sleep>

0805a164 <adis16470_reg_read_pair>:
{
 805a164:	b573      	push	{r0, r1, r4, r5, r6, lr}
 805a166:	460c      	mov	r4, r1
 805a168:	4615      	mov	r5, r2
    int status = adis16470_reg_read(data, reg[0], &v[0]);
 805a16a:	7809      	ldrb	r1, [r1, #0]
 805a16c:	aa01      	add	r2, sp, #4
{
 805a16e:	4606      	mov	r6, r0
    int status = adis16470_reg_read(data, reg[0], &v[0]);
 805a170:	f7f6 fc98 	bl	8050aa4 <adis16470_reg_read>
    if (status < 0)
 805a174:	2800      	cmp	r0, #0
 805a176:	db0a      	blt.n	805a18e <adis16470_reg_read_pair+0x2a>
    status = adis16470_reg_read(data, reg[1], &v[1]);
 805a178:	f10d 0206 	add.w	r2, sp, #6
 805a17c:	7861      	ldrb	r1, [r4, #1]
 805a17e:	4630      	mov	r0, r6
 805a180:	f7f6 fc90 	bl	8050aa4 <adis16470_reg_read>
    if (status < 0)
 805a184:	2800      	cmp	r0, #0
    *value = ((uint32_t)v[1] << 16) | (uint32_t)v[0];
 805a186:	bfa2      	ittt	ge
 805a188:	9b01      	ldrge	r3, [sp, #4]
    return 0;
 805a18a:	2000      	movge	r0, #0
    *value = ((uint32_t)v[1] << 16) | (uint32_t)v[0];
 805a18c:	602b      	strge	r3, [r5, #0]
}
 805a18e:	b002      	add	sp, #8
 805a190:	bd70      	pop	{r4, r5, r6, pc}

0805a192 <z_impl_gpio_pin_configure>:
{
 805a192:	b4f0      	push	{r4, r5, r6, r7}
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 805a194:	04d4      	lsls	r4, r2, #19
{
 805a196:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
 805a198:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 805a19a:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 805a19c:	d506      	bpl.n	805a1ac <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 805a19e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 805a1a2:	d003      	beq.n	805a1ac <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 805a1a4:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 805a1a6:	bf48      	it	mi
 805a1a8:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
 805a1ac:	2501      	movs	r5, #1
 805a1ae:	6834      	ldr	r4, [r6, #0]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 805a1b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 805a1b4:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 805a1b6:	fa05 f501 	lsl.w	r5, r5, r1
	return api->pin_configure(port, pin, flags);
 805a1ba:	683b      	ldr	r3, [r7, #0]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 805a1bc:	bf4c      	ite	mi
 805a1be:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 805a1c0:	43ac      	bicpl	r4, r5
 805a1c2:	6034      	str	r4, [r6, #0]
}
 805a1c4:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
 805a1c6:	4718      	bx	r3

0805a1c8 <maxbotix_channel_get>:

static int maxbotix_channel_get(const struct device *dev, enum sensor_channel chan, struct sensor_value *val)
{
    const struct maxbotix_data *data = dev->data;
 805a1c8:	6903      	ldr	r3, [r0, #16]
    switch (chan) {
 805a1ca:	291a      	cmp	r1, #26
    case SENSOR_CHAN_DISTANCE:
        val->val1 = data->sensor_value.val1;
 805a1cc:	bf03      	ittte	eq
 805a1ce:	6819      	ldreq	r1, [r3, #0]
        val->val2 = data->sensor_value.val2;
        break;
    default:
        return -ENOTSUP;
    }
    return 0;
 805a1d0:	2000      	moveq	r0, #0
        val->val2 = data->sensor_value.val2;
 805a1d2:	685b      	ldreq	r3, [r3, #4]
        return -ENOTSUP;
 805a1d4:	f06f 0085 	mvnne.w	r0, #133	; 0x85
        val->val1 = data->sensor_value.val1;
 805a1d8:	bf04      	itt	eq
 805a1da:	6011      	streq	r1, [r2, #0]
        val->val2 = data->sensor_value.val2;
 805a1dc:	6053      	streq	r3, [r2, #4]
}
 805a1de:	4770      	bx	lr

0805a1e0 <gpio_remove_callback.isra.0>:
	if (api->manage_callback == NULL) {
 805a1e0:	6883      	ldr	r3, [r0, #8]
 805a1e2:	69db      	ldr	r3, [r3, #28]
 805a1e4:	b10b      	cbz	r3, 805a1ea <gpio_remove_callback.isra.0+0xa>
	return api->manage_callback(port, callback, false);
 805a1e6:	2200      	movs	r2, #0
 805a1e8:	4718      	bx	r3
}
 805a1ea:	4770      	bx	lr

0805a1ec <input_changed>:
{
 805a1ec:	b538      	push	{r3, r4, r5, lr}
    switch (cb_data->state) {
 805a1ee:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
{
 805a1f2:	4605      	mov	r5, r0
 805a1f4:	460c      	mov	r4, r1
    switch (cb_data->state) {
 805a1f6:	2b01      	cmp	r3, #1
 805a1f8:	d005      	beq.n	805a206 <input_changed+0x1a>
 805a1fa:	2b02      	cmp	r3, #2
 805a1fc:	d00a      	beq.n	805a214 <input_changed+0x28>
        gpio_remove_callback(dev, cb);
 805a1fe:	f7ff ffef 	bl	805a1e0 <gpio_remove_callback.isra.0>
        cb_data->state = MAXBOTIX_STATE_IDLE;
 805a202:	2300      	movs	r3, #0
 805a204:	e003      	b.n	805a20e <input_changed+0x22>
 805a206:	f7f4 f9c3 	bl	804e590 <sys_clock_cycle_get_32>
        cb_data->state = MAXBOTIX_STATE_FALLING_EDGE;
 805a20a:	2302      	movs	r3, #2
        cb_data->start_time = k_cycle_get_32();
 805a20c:	62a0      	str	r0, [r4, #40]	; 0x28
        cb_data->state = MAXBOTIX_STATE_IDLE;
 805a20e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 805a212:	bd38      	pop	{r3, r4, r5, pc}
 805a214:	f7f4 f9bc 	bl	804e590 <sys_clock_cycle_get_32>
        cb_data->state = MAXBOTIX_STATE_FINISHED;
 805a218:	2303      	movs	r3, #3
        cb_data->end_time = k_cycle_get_32();
 805a21a:	62e0      	str	r0, [r4, #44]	; 0x2c
        gpio_remove_callback(dev, cb);
 805a21c:	4621      	mov	r1, r4
 805a21e:	4628      	mov	r0, r5
        cb_data->state = MAXBOTIX_STATE_FINISHED;
 805a220:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        gpio_remove_callback(dev, cb);
 805a224:	f7ff ffdc 	bl	805a1e0 <gpio_remove_callback.isra.0>
	z_impl_k_sem_give(sem);
 805a228:	f104 000c 	add.w	r0, r4, #12
}
 805a22c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 805a230:	f7f7 bc58 	b.w	8051ae4 <z_impl_k_sem_give>

0805a234 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 805a234:	2301      	movs	r3, #1
 805a236:	fa03 f101 	lsl.w	r1, r3, r1
 805a23a:	6903      	ldr	r3, [r0, #16]
 805a23c:	681b      	ldr	r3, [r3, #0]
 805a23e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 805a240:	bf18      	it	ne
 805a242:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 805a246:	b112      	cbz	r2, 805a24e <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
 805a248:	6883      	ldr	r3, [r0, #8]
 805a24a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 805a24c:	4718      	bx	r3
 805a24e:	6883      	ldr	r3, [r0, #8]
 805a250:	691b      	ldr	r3, [r3, #16]
 805a252:	e7fb      	b.n	805a24c <gpio_pin_set.isra.0+0x18>

0805a254 <z_device_state_init>:
}
 805a254:	4770      	bx	lr

0805a256 <z_device_ready>:
	if (dev == NULL) {
 805a256:	b138      	cbz	r0, 805a268 <z_device_ready+0x12>
	return dev->state->initialized && (dev->state->init_res == 0U);
 805a258:	68c3      	ldr	r3, [r0, #12]
 805a25a:	8818      	ldrh	r0, [r3, #0]
 805a25c:	f3c0 0008 	ubfx	r0, r0, #0, #9
 805a260:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 805a264:	4258      	negs	r0, r3
 805a266:	4158      	adcs	r0, r3
}
 805a268:	4770      	bx	lr

0805a26a <arch_system_halt>:
	__asm__ volatile(
 805a26a:	f04f 0210 	mov.w	r2, #16
 805a26e:	f3ef 8311 	mrs	r3, BASEPRI
 805a272:	f382 8812 	msr	BASEPRI_MAX, r2
 805a276:	f3bf 8f6f 	isb	sy
	for (;;) {
 805a27a:	e7fe      	b.n	805a27a <arch_system_halt+0x10>

0805a27c <k_mem_slab_init>:
{
 805a27c:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
 805a27e:	2400      	movs	r4, #0
	slab->buffer = buffer;
 805a280:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
 805a282:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
 805a284:	7204      	strb	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 805a286:	ea41 0402 	orr.w	r4, r1, r2
 805a28a:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
 805a28e:	e9c0 3203 	strd	r3, r2, [r0, #12]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 805a292:	d10c      	bne.n	805a2ae <k_mem_slab_init+0x32>
	slab->free_list = NULL;
 805a294:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 805a296:	42a3      	cmp	r3, r4
 805a298:	d103      	bne.n	805a2a2 <k_mem_slab_init+0x26>
 805a29a:	e9c0 0000 	strd	r0, r0, [r0]
}
 805a29e:	2000      	movs	r0, #0
}
 805a2a0:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
 805a2a2:	6985      	ldr	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 805a2a4:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
 805a2a6:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
 805a2a8:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
 805a2aa:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
 805a2ac:	e7f3      	b.n	805a296 <k_mem_slab_init+0x1a>
		return -EINVAL;
 805a2ae:	f06f 0015 	mvn.w	r0, #21
	return rc;
 805a2b2:	e7f5      	b.n	805a2a0 <k_mem_slab_init+0x24>

0805a2b4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 805a2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 805a2b6:	4604      	mov	r4, r0
 805a2b8:	460d      	mov	r5, r1
 805a2ba:	f04f 0310 	mov.w	r3, #16
 805a2be:	f3ef 8611 	mrs	r6, BASEPRI
 805a2c2:	f383 8812 	msr	BASEPRI_MAX, r3
 805a2c6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
 805a2ca:	6987      	ldr	r7, [r0, #24]
 805a2cc:	b97f      	cbnz	r7, 805a2ee <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 805a2ce:	f000 f9ba 	bl	805a646 <z_unpend_first_thread>

		if (pending_thread != NULL) {
 805a2d2:	b160      	cbz	r0, 805a2ee <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 805a2d4:	682a      	ldr	r2, [r5, #0]
 805a2d6:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 805a2da:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
 805a2dc:	f000 f942 	bl	805a564 <z_ready_thread>
			z_reschedule(&slab->lock, key);
 805a2e0:	4631      	mov	r1, r6
 805a2e2:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
 805a2e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
 805a2ea:	f7f7 bd51 	b.w	8051d90 <z_reschedule>
	**(char ***) mem = slab->free_list;
 805a2ee:	682b      	ldr	r3, [r5, #0]
 805a2f0:	69a2      	ldr	r2, [r4, #24]
 805a2f2:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
 805a2f4:	682b      	ldr	r3, [r5, #0]
 805a2f6:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
 805a2f8:	69e3      	ldr	r3, [r4, #28]
 805a2fa:	3b01      	subs	r3, #1
 805a2fc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
 805a2fe:	f386 8811 	msr	BASEPRI, r6
 805a302:	f3bf 8f6f 	isb	sy
}
 805a306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0805a308 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 805a308:	f3ef 8005 	mrs	r0, IPSR
}
 805a30c:	3800      	subs	r0, #0
 805a30e:	bf18      	it	ne
 805a310:	2001      	movne	r0, #1
 805a312:	4770      	bx	lr

0805a314 <k_thread_name_get>:
}
 805a314:	3078      	adds	r0, #120	; 0x78
 805a316:	4770      	bx	lr

0805a318 <z_impl_k_thread_start>:
	z_sched_start(thread);
 805a318:	f7f7 be30 	b.w	8051f7c <z_sched_start>

0805a31c <z_impl_k_thread_stack_space_get>:
#error "Unsupported configuration for stack analysis"
#endif

int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
 805a31c:	b510      	push	{r4, lr}
	const uint8_t *start = (uint8_t *)thread->stack_info.start;
	size_t size = thread->stack_info.size;
	size_t unused = 0;
 805a31e:	2300      	movs	r3, #0
	size_t size = thread->stack_info.size;
 805a320:	e9d0 4227 	ldrd	r4, r2, [r0, #156]	; 0x9c
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
 805a324:	4293      	cmp	r3, r2
 805a326:	d102      	bne.n	805a32e <z_impl_k_thread_stack_space_get+0x12>
	}

	*unused_ptr = unused;

	return 0;
}
 805a328:	2000      	movs	r0, #0
	*unused_ptr = unused;
 805a32a:	600b      	str	r3, [r1, #0]
}
 805a32c:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
 805a32e:	5ce0      	ldrb	r0, [r4, r3]
 805a330:	28aa      	cmp	r0, #170	; 0xaa
 805a332:	d1f9      	bne.n	805a328 <z_impl_k_thread_stack_space_get+0xc>
			unused++;
 805a334:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
 805a336:	e7f5      	b.n	805a324 <z_impl_k_thread_stack_space_get+0x8>

0805a338 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 805a338:	b508      	push	{r3, lr}
	__asm__ volatile(
 805a33a:	f04f 0210 	mov.w	r2, #16
 805a33e:	f3ef 8311 	mrs	r3, BASEPRI
 805a342:	f382 8812 	msr	BASEPRI_MAX, r2
 805a346:	f3bf 8f6f 	isb	sy
	arch_cpu_idle();
 805a34a:	f7ed fdf1 	bl	8047f30 <arch_cpu_idle>
 805a34e:	e7f4      	b.n	805a33a <idle+0x2>

0805a350 <k_msgq_init>:
	msgq->max_msgs = max_msgs;
 805a350:	e9c0 2303 	strd	r2, r3, [r0, #12]
	msgq->buffer_end = buffer + (max_msgs * msg_size);
 805a354:	fb03 1202 	mla	r2, r3, r2, r1
	msgq->used_msgs = 0;
 805a358:	2300      	movs	r3, #0
	msgq->buffer_start = buffer;
 805a35a:	6141      	str	r1, [r0, #20]
	msgq->used_msgs = 0;
 805a35c:	6243      	str	r3, [r0, #36]	; 0x24
	msgq->flags = 0;
 805a35e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	msgq->lock = (struct k_spinlock) {};
 805a362:	7203      	strb	r3, [r0, #8]
	sys_dlist_init(&msgq->poll_events);
 805a364:	f100 0328 	add.w	r3, r0, #40	; 0x28
	msgq->write_ptr = buffer;
 805a368:	6201      	str	r1, [r0, #32]
	msgq->read_ptr = buffer;
 805a36a:	e9c0 2106 	strd	r2, r1, [r0, #24]
 805a36e:	e9c0 0000 	strd	r0, r0, [r0]
 805a372:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
}
 805a376:	4770      	bx	lr

0805a378 <z_impl_k_msgq_peek>:
}
#include <syscalls/k_msgq_get_mrsh.c>
#endif

int z_impl_k_msgq_peek(struct k_msgq *msgq, void *data)
{
 805a378:	4603      	mov	r3, r0
 805a37a:	4608      	mov	r0, r1
 805a37c:	b510      	push	{r4, lr}
 805a37e:	f04f 0210 	mov.w	r2, #16
 805a382:	f3ef 8411 	mrs	r4, BASEPRI
 805a386:	f382 8812 	msr	BASEPRI_MAX, r2
 805a38a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);

	if (msgq->used_msgs > 0U) {
 805a38e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 805a390:	b14a      	cbz	r2, 805a3a6 <z_impl_k_msgq_peek+0x2e>
 805a392:	68da      	ldr	r2, [r3, #12]
 805a394:	69d9      	ldr	r1, [r3, #28]
 805a396:	f000 fd1e 	bl	805add6 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		result = 0;
 805a39a:	2000      	movs	r0, #0
	__asm__ volatile(
 805a39c:	f384 8811 	msr	BASEPRI, r4
 805a3a0:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC(k_msgq, peek, msgq, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 805a3a4:	bd10      	pop	{r4, pc}
		result = -ENOMSG;
 805a3a6:	f06f 0022 	mvn.w	r0, #34	; 0x22
 805a3aa:	e7f7      	b.n	805a39c <z_impl_k_msgq_peek+0x24>

0805a3ac <z_impl_k_msgq_purge>:
}
#include <syscalls/k_msgq_peek_mrsh.c>
#endif

void z_impl_k_msgq_purge(struct k_msgq *msgq)
{
 805a3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 805a3ae:	4604      	mov	r4, r0
	k_spinlock_key_t key;
	struct k_thread *pending_thread;

	key = k_spin_lock(&msgq->lock);
 805a3b0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
 805a3b4:	f04f 0310 	mov.w	r3, #16
 805a3b8:	f3ef 8611 	mrs	r6, BASEPRI
 805a3bc:	f383 8812 	msr	BASEPRI_MAX, r3
 805a3c0:	f3bf 8f6f 	isb	sy
 805a3c4:	f06f 0722 	mvn.w	r7, #34	; 0x22

	SYS_PORT_TRACING_OBJ_FUNC(k_msgq, purge, msgq);

	/* wake up any threads that are waiting to write */
	while ((pending_thread = z_unpend_first_thread(&msgq->wait_q)) != NULL) {
 805a3c8:	4620      	mov	r0, r4
 805a3ca:	f000 f93c 	bl	805a646 <z_unpend_first_thread>
 805a3ce:	4603      	mov	r3, r0
 805a3d0:	b940      	cbnz	r0, 805a3e4 <z_impl_k_msgq_purge+0x38>
		arch_thread_return_value_set(pending_thread, -ENOMSG);
		z_ready_thread(pending_thread);
	}

	msgq->used_msgs = 0;
	msgq->read_ptr = msgq->write_ptr;
 805a3d2:	6a23      	ldr	r3, [r4, #32]

	z_reschedule(&msgq->lock, key);
 805a3d4:	4631      	mov	r1, r6
	msgq->used_msgs = 0;
 805a3d6:	6260      	str	r0, [r4, #36]	; 0x24
	z_reschedule(&msgq->lock, key);
 805a3d8:	4628      	mov	r0, r5
	msgq->read_ptr = msgq->write_ptr;
 805a3da:	61e3      	str	r3, [r4, #28]
}
 805a3dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_reschedule(&msgq->lock, key);
 805a3e0:	f7f7 bcd6 	b.w	8051d90 <z_reschedule>
 805a3e4:	f8c3 70b0 	str.w	r7, [r3, #176]	; 0xb0
		z_ready_thread(pending_thread);
 805a3e8:	f000 f8bc 	bl	805a564 <z_ready_thread>
 805a3ec:	e7ec      	b.n	805a3c8 <z_impl_k_msgq_purge+0x1c>

0805a3ee <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
 805a3ee:	f990 300e 	ldrsb.w	r3, [r0, #14]
 805a3f2:	428b      	cmp	r3, r1
 805a3f4:	d001      	beq.n	805a3fa <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
 805a3f6:	f7f7 be2d 	b.w	8052054 <z_set_prio>
}
 805a3fa:	2000      	movs	r0, #0
 805a3fc:	4770      	bx	lr

0805a3fe <z_impl_k_mutex_init>:
	mutex->owner = NULL;
 805a3fe:	2300      	movs	r3, #0
 805a400:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
 805a404:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 805a408:	4618      	mov	r0, r3
 805a40a:	4770      	bx	lr

0805a40c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 805a40c:	b15a      	cbz	r2, 805a426 <z_impl_k_sem_init+0x1a>
 805a40e:	428a      	cmp	r2, r1
 805a410:	d309      	bcc.n	805a426 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
 805a412:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
 805a416:	e9c0 1202 	strd	r1, r2, [r0, #8]
 805a41a:	e9c0 0000 	strd	r0, r0, [r0]
 805a41e:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
 805a422:	2000      	movs	r0, #0
 805a424:	4770      	bx	lr
		return -EINVAL;
 805a426:	f06f 0015 	mvn.w	r0, #21
}
 805a42a:	4770      	bx	lr

0805a42c <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
 805a42c:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
 805a42e:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
 805a430:	408b      	lsls	r3, r1
 805a432:	ea22 0303 	bic.w	r3, r2, r3
 805a436:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
 805a438:	fa22 f001 	lsr.w	r0, r2, r1
}
 805a43c:	f000 0001 	and.w	r0, r0, #1
 805a440:	4770      	bx	lr

0805a442 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
 805a442:	b128      	cbz	r0, 805a450 <notify_queue_locked.isra.0+0xe>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 805a444:	2200      	movs	r2, #0
 805a446:	f500 7080 	add.w	r0, r0, #256	; 0x100
 805a44a:	4611      	mov	r1, r2
 805a44c:	f000 b923 	b.w	805a696 <z_sched_wake>
}
 805a450:	4770      	bx	lr

0805a452 <k_work_init>:
{
 805a452:	b538      	push	{r3, r4, r5, lr}
 805a454:	4604      	mov	r4, r0
 805a456:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 805a458:	2210      	movs	r2, #16
 805a45a:	2100      	movs	r1, #0
 805a45c:	f000 fcf6 	bl	805ae4c <memset>
 805a460:	6065      	str	r5, [r4, #4]
}
 805a462:	bd38      	pop	{r3, r4, r5, pc}

0805a464 <z_work_submit_to_queue>:
{
 805a464:	b513      	push	{r0, r1, r4, lr}
 805a466:	9001      	str	r0, [sp, #4]
 805a468:	4608      	mov	r0, r1
 805a46a:	f04f 0310 	mov.w	r3, #16
 805a46e:	f3ef 8411 	mrs	r4, BASEPRI
 805a472:	f383 8812 	msr	BASEPRI_MAX, r3
 805a476:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 805a47a:	a901      	add	r1, sp, #4
 805a47c:	f7f7 fbbe 	bl	8051bfc <submit_to_queue_locked>
	__asm__ volatile(
 805a480:	f384 8811 	msr	BASEPRI, r4
 805a484:	f3bf 8f6f 	isb	sy
}
 805a488:	b002      	add	sp, #8
 805a48a:	bd10      	pop	{r4, pc}

0805a48c <k_work_submit_to_queue>:
{
 805a48c:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
 805a48e:	f7ff ffe9 	bl	805a464 <z_work_submit_to_queue>
	if (ret > 0) {
 805a492:	1e04      	subs	r4, r0, #0
 805a494:	dd09      	ble.n	805a4aa <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
 805a496:	f04f 0310 	mov.w	r3, #16
 805a49a:	f3ef 8011 	mrs	r0, BASEPRI
 805a49e:	f383 8812 	msr	BASEPRI_MAX, r3
 805a4a2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 805a4a6:	f000 f841 	bl	805a52c <z_reschedule_irqlock>
}
 805a4aa:	4620      	mov	r0, r4
 805a4ac:	bd10      	pop	{r4, pc}

0805a4ae <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 805a4ae:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 805a4b2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 805a4b4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 805a4b6:	2300      	movs	r3, #0
	node->prev = NULL;
 805a4b8:	e9c0 3300 	strd	r3, r3, [r0]
}
 805a4bc:	4770      	bx	lr

0805a4be <unpend_thread_no_timeout>:
{
 805a4be:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 805a4c0:	f7ff fff5 	bl	805a4ae <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 805a4c4:	7b43      	ldrb	r3, [r0, #13]
 805a4c6:	f023 0302 	bic.w	r3, r3, #2
 805a4ca:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 805a4cc:	2300      	movs	r3, #0
 805a4ce:	6083      	str	r3, [r0, #8]
}
 805a4d0:	bd08      	pop	{r3, pc}

0805a4d2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 805a4d2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 805a4d6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 805a4da:	4283      	cmp	r3, r0
		return b2 - b1;
 805a4dc:	bf14      	ite	ne
 805a4de:	1ac0      	subne	r0, r0, r3
	return 0;
 805a4e0:	2000      	moveq	r0, #0
}
 805a4e2:	4770      	bx	lr

0805a4e4 <z_unpend_thread_no_timeout>:
{
 805a4e4:	b508      	push	{r3, lr}
 805a4e6:	f04f 0310 	mov.w	r3, #16
 805a4ea:	f3ef 8111 	mrs	r1, BASEPRI
 805a4ee:	f383 8812 	msr	BASEPRI_MAX, r3
 805a4f2:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 805a4f6:	f7ff ffe2 	bl	805a4be <unpend_thread_no_timeout>
	__asm__ volatile(
 805a4fa:	f381 8811 	msr	BASEPRI, r1
 805a4fe:	f3bf 8f6f 	isb	sy
}
 805a502:	bd08      	pop	{r3, pc}

0805a504 <z_unpend_thread>:
{
 805a504:	b510      	push	{r4, lr}
	__asm__ volatile(
 805a506:	f04f 0310 	mov.w	r3, #16
 805a50a:	f3ef 8411 	mrs	r4, BASEPRI
 805a50e:	f383 8812 	msr	BASEPRI_MAX, r3
 805a512:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 805a516:	f7ff ffd2 	bl	805a4be <unpend_thread_no_timeout>
	__asm__ volatile(
 805a51a:	f384 8811 	msr	BASEPRI, r4
 805a51e:	f3bf 8f6f 	isb	sy
 805a522:	3018      	adds	r0, #24
}
 805a524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 805a528:	f000 b8d3 	b.w	805a6d2 <z_abort_timeout>

0805a52c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 805a52c:	4603      	mov	r3, r0
 805a52e:	b920      	cbnz	r0, 805a53a <z_reschedule_irqlock+0xe>
 805a530:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 805a534:	b90a      	cbnz	r2, 805a53a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 805a536:	f7ed bdef 	b.w	8048118 <arch_swap>
 805a53a:	f383 8811 	msr	BASEPRI, r3
 805a53e:	f3bf 8f6f 	isb	sy
}
 805a542:	4770      	bx	lr

0805a544 <z_reschedule_unlocked>:
	__asm__ volatile(
 805a544:	f04f 0310 	mov.w	r3, #16
 805a548:	f3ef 8011 	mrs	r0, BASEPRI
 805a54c:	f383 8812 	msr	BASEPRI_MAX, r3
 805a550:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 805a554:	f7ff bfea 	b.w	805a52c <z_reschedule_irqlock>

0805a558 <z_priq_dumb_best>:
	return list->head == list;
 805a558:	6803      	ldr	r3, [r0, #0]
}
 805a55a:	4298      	cmp	r0, r3
 805a55c:	bf14      	ite	ne
 805a55e:	4618      	movne	r0, r3
 805a560:	2000      	moveq	r0, #0
 805a562:	4770      	bx	lr

0805a564 <z_ready_thread>:
{
 805a564:	b510      	push	{r4, lr}
 805a566:	f04f 0310 	mov.w	r3, #16
 805a56a:	f3ef 8411 	mrs	r4, BASEPRI
 805a56e:	f383 8812 	msr	BASEPRI_MAX, r3
 805a572:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 805a576:	f7f7 fccb 	bl	8051f10 <ready_thread>
	__asm__ volatile(
 805a57a:	f384 8811 	msr	BASEPRI, r4
 805a57e:	f3bf 8f6f 	isb	sy
}
 805a582:	bd10      	pop	{r4, pc}

0805a584 <z_thread_timeout>:
{
 805a584:	4601      	mov	r1, r0
 805a586:	b510      	push	{r4, lr}
	__asm__ volatile(
 805a588:	f04f 0310 	mov.w	r3, #16
 805a58c:	f3ef 8411 	mrs	r4, BASEPRI
 805a590:	f383 8812 	msr	BASEPRI_MAX, r3
 805a594:	f3bf 8f6f 	isb	sy
		if (!killed) {
 805a598:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 805a59c:	f013 0f28 	tst.w	r3, #40	; 0x28
 805a5a0:	d10d      	bne.n	805a5be <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 805a5a2:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 805a5a6:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 805a5a8:	b10b      	cbz	r3, 805a5ae <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 805a5aa:	f7ff ff88 	bl	805a4be <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 805a5ae:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 805a5b2:	f023 0314 	bic.w	r3, r3, #20
 805a5b6:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 805a5ba:	f7f7 fca9 	bl	8051f10 <ready_thread>
	__asm__ volatile(
 805a5be:	f384 8811 	msr	BASEPRI, r4
 805a5c2:	f3bf 8f6f 	isb	sy
}
 805a5c6:	bd10      	pop	{r4, pc}

0805a5c8 <add_to_waitq_locked>:
{
 805a5c8:	b538      	push	{r3, r4, r5, lr}
 805a5ca:	4604      	mov	r4, r0
 805a5cc:	460d      	mov	r5, r1
	unready_thread(thread);
 805a5ce:	f7f7 fcf3 	bl	8051fb8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 805a5d2:	7b63      	ldrb	r3, [r4, #13]
 805a5d4:	f043 0302 	orr.w	r3, r3, #2
 805a5d8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 805a5da:	b195      	cbz	r5, 805a602 <add_to_waitq_locked+0x3a>
 805a5dc:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 805a5de:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 805a5e0:	429d      	cmp	r5, r3
 805a5e2:	d015      	beq.n	805a610 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 805a5e4:	b1a3      	cbz	r3, 805a610 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
 805a5e6:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 805a5ea:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 805a5ee:	4291      	cmp	r1, r2
 805a5f0:	d008      	beq.n	805a604 <add_to_waitq_locked+0x3c>
		return b2 - b1;
 805a5f2:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 805a5f4:	2a00      	cmp	r2, #0
 805a5f6:	dd05      	ble.n	805a604 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
 805a5f8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 805a5fa:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 805a5fe:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 805a600:	605c      	str	r4, [r3, #4]
}
 805a602:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
 805a604:	686a      	ldr	r2, [r5, #4]
 805a606:	4293      	cmp	r3, r2
 805a608:	d002      	beq.n	805a610 <add_to_waitq_locked+0x48>
 805a60a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 805a60c:	2b00      	cmp	r3, #0
 805a60e:	d1ec      	bne.n	805a5ea <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
 805a610:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 805a612:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 805a616:	601c      	str	r4, [r3, #0]
	list->tail = node;
 805a618:	606c      	str	r4, [r5, #4]
}
 805a61a:	e7f2      	b.n	805a602 <add_to_waitq_locked+0x3a>

0805a61c <z_unpend1_no_timeout>:
{
 805a61c:	b510      	push	{r4, lr}
	__asm__ volatile(
 805a61e:	f04f 0310 	mov.w	r3, #16
 805a622:	f3ef 8411 	mrs	r4, BASEPRI
 805a626:	f383 8812 	msr	BASEPRI_MAX, r3
 805a62a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 805a62e:	f7ff ff93 	bl	805a558 <z_priq_dumb_best>
		if (thread != NULL) {
 805a632:	4601      	mov	r1, r0
 805a634:	b108      	cbz	r0, 805a63a <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
 805a636:	f7ff ff42 	bl	805a4be <unpend_thread_no_timeout>
	__asm__ volatile(
 805a63a:	f384 8811 	msr	BASEPRI, r4
 805a63e:	f3bf 8f6f 	isb	sy
}
 805a642:	4608      	mov	r0, r1
 805a644:	bd10      	pop	{r4, pc}

0805a646 <z_unpend_first_thread>:
{
 805a646:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 805a648:	f04f 0310 	mov.w	r3, #16
 805a64c:	f3ef 8511 	mrs	r5, BASEPRI
 805a650:	f383 8812 	msr	BASEPRI_MAX, r3
 805a654:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 805a658:	f7ff ff7e 	bl	805a558 <z_priq_dumb_best>
		if (thread != NULL) {
 805a65c:	4604      	mov	r4, r0
 805a65e:	b120      	cbz	r0, 805a66a <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
 805a660:	f7ff ff2d 	bl	805a4be <unpend_thread_no_timeout>
 805a664:	3018      	adds	r0, #24
 805a666:	f000 f834 	bl	805a6d2 <z_abort_timeout>
	__asm__ volatile(
 805a66a:	f385 8811 	msr	BASEPRI, r5
 805a66e:	f3bf 8f6f 	isb	sy
}
 805a672:	4620      	mov	r0, r4
 805a674:	bd38      	pop	{r3, r4, r5, pc}

0805a676 <z_impl_k_usleep>:
	ticks = k_us_to_ticks_ceil64(us);
 805a676:	17c1      	asrs	r1, r0, #31
		t += off;
 805a678:	3063      	adds	r0, #99	; 0x63
			return t / ((uint64_t)from_hz / to_hz);
 805a67a:	f04f 0264 	mov.w	r2, #100	; 0x64
 805a67e:	f141 0100 	adc.w	r1, r1, #0
{
 805a682:	b508      	push	{r3, lr}
 805a684:	2300      	movs	r3, #0
 805a686:	f7e5 ff5b 	bl	8040540 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
 805a68a:	17c1      	asrs	r1, r0, #31
 805a68c:	f7f7 fdc4 	bl	8052218 <z_tick_sleep>
}
 805a690:	2364      	movs	r3, #100	; 0x64
 805a692:	4358      	muls	r0, r3
 805a694:	bd08      	pop	{r3, pc}

0805a696 <z_sched_wake>:
{
 805a696:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 805a698:	f04f 0310 	mov.w	r3, #16
 805a69c:	f3ef 8511 	mrs	r5, BASEPRI
 805a6a0:	f383 8812 	msr	BASEPRI_MAX, r3
 805a6a4:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 805a6a8:	f7ff ff56 	bl	805a558 <z_priq_dumb_best>
		if (thread != NULL) {
 805a6ac:	4604      	mov	r4, r0
 805a6ae:	b158      	cbz	r0, 805a6c8 <z_sched_wake+0x32>
 805a6b0:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
 805a6b4:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
 805a6b6:	f7ff ff02 	bl	805a4be <unpend_thread_no_timeout>
 805a6ba:	3018      	adds	r0, #24
 805a6bc:	f000 f809 	bl	805a6d2 <z_abort_timeout>
			ready_thread(thread);
 805a6c0:	4620      	mov	r0, r4
 805a6c2:	f7f7 fc25 	bl	8051f10 <ready_thread>
			ret = true;
 805a6c6:	2001      	movs	r0, #1
	__asm__ volatile(
 805a6c8:	f385 8811 	msr	BASEPRI, r5
 805a6cc:	f3bf 8f6f 	isb	sy
}
 805a6d0:	bd38      	pop	{r3, r4, r5, pc}

0805a6d2 <z_abort_timeout>:
{
 805a6d2:	b510      	push	{r4, lr}
	__asm__ volatile(
 805a6d4:	f04f 0210 	mov.w	r2, #16
 805a6d8:	f3ef 8411 	mrs	r4, BASEPRI
 805a6dc:	f382 8812 	msr	BASEPRI_MAX, r2
 805a6e0:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 805a6e4:	6803      	ldr	r3, [r0, #0]
 805a6e6:	b13b      	cbz	r3, 805a6f8 <z_abort_timeout+0x26>
			remove_timeout(to);
 805a6e8:	f7f7 feba 	bl	8052460 <remove_timeout>
			ret = 0;
 805a6ec:	2000      	movs	r0, #0
	__asm__ volatile(
 805a6ee:	f384 8811 	msr	BASEPRI, r4
 805a6f2:	f3bf 8f6f 	isb	sy
}
 805a6f6:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 805a6f8:	f06f 0015 	mvn.w	r0, #21
 805a6fc:	e7f7      	b.n	805a6ee <z_abort_timeout+0x1c>

0805a6fe <z_set_timeout_expiry>:
{
 805a6fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 805a700:	4604      	mov	r4, r0
 805a702:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
 805a704:	f04f 0310 	mov.w	r3, #16
 805a708:	f3ef 8511 	mrs	r5, BASEPRI
 805a70c:	f383 8812 	msr	BASEPRI_MAX, r3
 805a710:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 805a714:	f7f7 fe7e 	bl	8052414 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 805a718:	2801      	cmp	r0, #1
 805a71a:	dd05      	ble.n	805a728 <z_set_timeout_expiry+0x2a>
 805a71c:	42a0      	cmp	r0, r4
 805a71e:	9901      	ldr	r1, [sp, #4]
 805a720:	db02      	blt.n	805a728 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 805a722:	4620      	mov	r0, r4
 805a724:	f7f3 fea6 	bl	804e474 <sys_clock_set_timeout>
	__asm__ volatile(
 805a728:	f385 8811 	msr	BASEPRI, r5
 805a72c:	f3bf 8f6f 	isb	sy
}
 805a730:	b003      	add	sp, #12
 805a732:	bd30      	pop	{r4, r5, pc}

0805a734 <sys_clock_tick_get_32>:
{
 805a734:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 805a736:	f7f7 ff83 	bl	8052640 <sys_clock_tick_get>
}
 805a73a:	bd08      	pop	{r3, pc}

0805a73c <z_impl_k_uptime_ticks>:
	return sys_clock_tick_get();
 805a73c:	f7f7 bf80 	b.w	8052640 <sys_clock_tick_get>

0805a740 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 805a740:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 805a744:	bf08      	it	eq
 805a746:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 805a74a:	b538      	push	{r3, r4, r5, lr}
 805a74c:	4605      	mov	r5, r0
 805a74e:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 805a750:	d020      	beq.n	805a794 <sys_clock_timeout_end_calc+0x54>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 805a752:	ea51 0300 	orrs.w	r3, r1, r0
 805a756:	d103      	bne.n	805a760 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
 805a758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
 805a75c:	f7f7 bf70 	b.w	8052640 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
 805a760:	f06f 0301 	mvn.w	r3, #1
 805a764:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 805a768:	1a1b      	subs	r3, r3, r0
 805a76a:	eb61 0204 	sbc.w	r2, r1, r4
 805a76e:	2a00      	cmp	r2, #0
 805a770:	db02      	blt.n	805a778 <sys_clock_timeout_end_calc+0x38>
			return Z_TICK_ABS(dt);
 805a772:	4618      	mov	r0, r3
 805a774:	4611      	mov	r1, r2
}
 805a776:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
 805a778:	f7f7 ff62 	bl	8052640 <sys_clock_tick_get>
 805a77c:	2d01      	cmp	r5, #1
 805a77e:	4622      	mov	r2, r4
 805a780:	462b      	mov	r3, r5
 805a782:	f174 0400 	sbcs.w	r4, r4, #0
 805a786:	bfbc      	itt	lt
 805a788:	2301      	movlt	r3, #1
 805a78a:	2200      	movlt	r2, #0
 805a78c:	1818      	adds	r0, r3, r0
 805a78e:	eb41 0102 	adc.w	r1, r1, r2
 805a792:	e7f0      	b.n	805a776 <sys_clock_timeout_end_calc+0x36>
		return UINT64_MAX;
 805a794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 805a798:	4601      	mov	r1, r0
 805a79a:	e7ec      	b.n	805a776 <sys_clock_timeout_end_calc+0x36>

0805a79c <k_timer_init>:
	timer->status = 0U;
 805a79c:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
 805a79e:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
 805a7a2:	f100 0218 	add.w	r2, r0, #24
	timer->status = 0U;
 805a7a6:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
 805a7a8:	6343      	str	r3, [r0, #52]	; 0x34
	list->tail = (sys_dnode_t *)list;
 805a7aa:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
 805a7ae:	e9c0 3300 	strd	r3, r3, [r0]
}
 805a7b2:	4770      	bx	lr

0805a7b4 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 805a7b4:	b510      	push	{r4, lr}
 805a7b6:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 805a7b8:	f7ff ff8b 	bl	805a6d2 <z_abort_timeout>

	if (inactive) {
 805a7bc:	b9b0      	cbnz	r0, 805a7ec <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
 805a7be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 805a7c0:	b10b      	cbz	r3, 805a7c6 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 805a7c2:	4620      	mov	r0, r4
 805a7c4:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 805a7c6:	f104 0018 	add.w	r0, r4, #24
 805a7ca:	f7ff ff27 	bl	805a61c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 805a7ce:	b168      	cbz	r0, 805a7ec <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 805a7d0:	f7ff fec8 	bl	805a564 <z_ready_thread>
	__asm__ volatile(
 805a7d4:	f04f 0310 	mov.w	r3, #16
 805a7d8:	f3ef 8011 	mrs	r0, BASEPRI
 805a7dc:	f383 8812 	msr	BASEPRI_MAX, r3
 805a7e0:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
 805a7e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
 805a7e8:	f7ff bea0 	b.w	805a52c <z_reschedule_irqlock>
 805a7ec:	bd10      	pop	{r4, pc}

0805a7ee <add_event>:
{
 805a7ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 805a7f0:	4617      	mov	r7, r2
 805a7f2:	4604      	mov	r4, r0
 805a7f4:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 805a7f6:	e9d0 2300 	ldrd	r2, r3, [r0]
 805a7fa:	4290      	cmp	r0, r2
 805a7fc:	d105      	bne.n	805a80a <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
 805a7fe:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
 805a800:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
 805a804:	601d      	str	r5, [r3, #0]
	list->tail = node;
 805a806:	6065      	str	r5, [r4, #4]
}
 805a808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
 805a80a:	2b00      	cmp	r3, #0
 805a80c:	d0f7      	beq.n	805a7fe <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 805a80e:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 805a810:	b100      	cbz	r0, 805a814 <add_event+0x26>
 805a812:	3860      	subs	r0, #96	; 0x60
 805a814:	b107      	cbz	r7, 805a818 <add_event+0x2a>
 805a816:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
 805a818:	4639      	mov	r1, r7
 805a81a:	f7ff fe5a 	bl	805a4d2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 805a81e:	2800      	cmp	r0, #0
 805a820:	dced      	bgt.n	805a7fe <add_event+0x10>
	return list->head == list;
 805a822:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 805a824:	42b4      	cmp	r4, r6
 805a826:	d0ea      	beq.n	805a7fe <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 805a828:	2e00      	cmp	r6, #0
 805a82a:	d0e8      	beq.n	805a7fe <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
 805a82c:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 805a82e:	b101      	cbz	r1, 805a832 <add_event+0x44>
 805a830:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
 805a832:	4638      	mov	r0, r7
 805a834:	f7ff fe4d 	bl	805a4d2 <z_sched_prio_cmp>
 805a838:	2800      	cmp	r0, #0
 805a83a:	dd05      	ble.n	805a848 <add_event+0x5a>
	sys_dnode_t *const prev = successor->prev;
 805a83c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
 805a83e:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
 805a842:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 805a844:	6075      	str	r5, [r6, #4]
			return;
 805a846:	e7df      	b.n	805a808 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
 805a848:	6863      	ldr	r3, [r4, #4]
 805a84a:	429e      	cmp	r6, r3
 805a84c:	d0d7      	beq.n	805a7fe <add_event+0x10>
 805a84e:	6836      	ldr	r6, [r6, #0]
 805a850:	e7ea      	b.n	805a828 <add_event+0x3a>

0805a852 <register_events>:
{
 805a852:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
 805a856:	2500      	movs	r5, #0
{
 805a858:	468b      	mov	fp, r1
 805a85a:	4614      	mov	r4, r2
 805a85c:	461f      	mov	r7, r3
 805a85e:	4682      	mov	sl, r0
	int events_registered = 0;
 805a860:	462e      	mov	r6, r5
	event->poller = NULL;
 805a862:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
 805a864:	455d      	cmp	r5, fp
 805a866:	db02      	blt.n	805a86e <register_events+0x1c>
}
 805a868:	4630      	mov	r0, r6
 805a86a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 805a86e:	f04f 0310 	mov.w	r3, #16
 805a872:	f3ef 8911 	mrs	r9, BASEPRI
 805a876:	f383 8812 	msr	BASEPRI_MAX, r3
 805a87a:	f3bf 8f6f 	isb	sy
	switch (event->type) {
 805a87e:	f89a 300d 	ldrb.w	r3, [sl, #13]
 805a882:	f003 031f 	and.w	r3, r3, #31
 805a886:	3b01      	subs	r3, #1
 805a888:	2b07      	cmp	r3, #7
 805a88a:	d80f      	bhi.n	805a8ac <register_events+0x5a>
 805a88c:	e8df f003 	tbb	[pc, r3]
 805a890:	0a0e041e 	.word	0x0a0e041e
 805a894:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
 805a898:	f8da 3010 	ldr.w	r3, [sl, #16]
 805a89c:	689b      	ldr	r3, [r3, #8]
 805a89e:	b12b      	cbz	r3, 805a8ac <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 805a8a0:	2302      	movs	r3, #2
 805a8a2:	e020      	b.n	805a8e6 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
 805a8a4:	f8da 3010 	ldr.w	r3, [sl, #16]
 805a8a8:	681b      	ldr	r3, [r3, #0]
 805a8aa:	bb8b      	cbnz	r3, 805a910 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
 805a8ac:	bb47      	cbnz	r7, 805a900 <register_events+0xae>
 805a8ae:	7823      	ldrb	r3, [r4, #0]
 805a8b0:	b333      	cbz	r3, 805a900 <register_events+0xae>
	switch (event->type) {
 805a8b2:	f89a 300d 	ldrb.w	r3, [sl, #13]
 805a8b6:	f003 031f 	and.w	r3, r3, #31
 805a8ba:	3b01      	subs	r3, #1
 805a8bc:	2b07      	cmp	r3, #7
 805a8be:	d830      	bhi.n	805a922 <register_events+0xd0>
 805a8c0:	e8df f003 	tbb	[pc, r3]
 805a8c4:	332f2839 	.word	0x332f2839
 805a8c8:	3e2f2f2f 	.word	0x3e2f2f2f
		if (event->signal->signaled != 0U) {
 805a8cc:	f8da 3010 	ldr.w	r3, [sl, #16]
 805a8d0:	689b      	ldr	r3, [r3, #8]
 805a8d2:	2b00      	cmp	r3, #0
 805a8d4:	d0ea      	beq.n	805a8ac <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
 805a8d6:	2301      	movs	r3, #1
 805a8d8:	e005      	b.n	805a8e6 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
 805a8da:	f8da 3010 	ldr.w	r3, [sl, #16]
 805a8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805a8e0:	2b00      	cmp	r3, #0
 805a8e2:	d0e3      	beq.n	805a8ac <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 805a8e4:	2310      	movs	r3, #16
	event->state |= state;
 805a8e6:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
 805a8ea:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
 805a8ee:	f3c2 3145 	ubfx	r1, r2, #13, #6
 805a8f2:	430b      	orrs	r3, r1
 805a8f4:	f363 3252 	bfi	r2, r3, #13, #6
 805a8f8:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
 805a8fc:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
 805a900:	f389 8811 	msr	BASEPRI, r9
 805a904:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 805a908:	3501      	adds	r5, #1
 805a90a:	f10a 0a14 	add.w	sl, sl, #20
 805a90e:	e7a9      	b.n	805a864 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 805a910:	2304      	movs	r3, #4
 805a912:	e7e8      	b.n	805a8e6 <register_events+0x94>
		add_event(&event->sem->poll_events, event, poller);
 805a914:	f8da 0010 	ldr.w	r0, [sl, #16]
 805a918:	4622      	mov	r2, r4
 805a91a:	4651      	mov	r1, sl
 805a91c:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
 805a91e:	f7ff ff66 	bl	805a7ee <add_event>
			events_registered += 1;
 805a922:	3601      	adds	r6, #1
	event->poller = poller;
 805a924:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
 805a928:	e7ea      	b.n	805a900 <register_events+0xae>
		add_event(&event->queue->poll_events, event, poller);
 805a92a:	f8da 0010 	ldr.w	r0, [sl, #16]
 805a92e:	4622      	mov	r2, r4
 805a930:	4651      	mov	r1, sl
 805a932:	3014      	adds	r0, #20
 805a934:	e7f3      	b.n	805a91e <register_events+0xcc>
		add_event(&event->signal->poll_events, event, poller);
 805a936:	4622      	mov	r2, r4
 805a938:	4651      	mov	r1, sl
 805a93a:	f8da 0010 	ldr.w	r0, [sl, #16]
 805a93e:	e7ee      	b.n	805a91e <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
 805a940:	f8da 0010 	ldr.w	r0, [sl, #16]
 805a944:	4622      	mov	r2, r4
 805a946:	4651      	mov	r1, sl
 805a948:	3028      	adds	r0, #40	; 0x28
 805a94a:	e7e8      	b.n	805a91e <register_events+0xcc>

0805a94c <signal_poll_event>:
{
 805a94c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct z_poller *poller = event->poller;
 805a950:	6884      	ldr	r4, [r0, #8]
{
 805a952:	4605      	mov	r5, r0
 805a954:	460e      	mov	r6, r1
	if (poller != NULL) {
 805a956:	b144      	cbz	r4, 805a96a <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
 805a958:	7863      	ldrb	r3, [r4, #1]
 805a95a:	2b01      	cmp	r3, #1
 805a95c:	d137      	bne.n	805a9ce <signal_poll_event+0x82>
	if (!z_is_thread_pending(thread)) {
 805a95e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
 805a962:	f013 0302 	ands.w	r3, r3, #2
 805a966:	d10a      	bne.n	805a97e <signal_poll_event+0x32>
		poller->is_polling = false;
 805a968:	7023      	strb	r3, [r4, #0]
	event->state |= state;
 805a96a:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
 805a96c:	2000      	movs	r0, #0
	event->state |= state;
 805a96e:	f3c3 3145 	ubfx	r1, r3, #13, #6
	event->poller = NULL;
 805a972:	60a8      	str	r0, [r5, #8]
	event->state |= state;
 805a974:	430e      	orrs	r6, r1
 805a976:	f366 3352 	bfi	r3, r6, #13, #6
 805a97a:	60eb      	str	r3, [r5, #12]
	return retcode;
 805a97c:	e00b      	b.n	805a996 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
 805a97e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
 805a982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 805a986:	bf08      	it	eq
 805a988:	f112 0f02 	cmneq.w	r2, #2
 805a98c:	d106      	bne.n	805a99c <signal_poll_event+0x50>
		poller->is_polling = false;
 805a98e:	2300      	movs	r3, #0
		return -EAGAIN;
 805a990:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
 805a994:	7023      	strb	r3, [r4, #0]
}
 805a996:	b002      	add	sp, #8
 805a998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 805a99c:	f1a4 0060 	sub.w	r0, r4, #96	; 0x60
	z_unpend_thread(thread);
 805a9a0:	9001      	str	r0, [sp, #4]
 805a9a2:	f7ff fdaf 	bl	805a504 <z_unpend_thread>
	arch_thread_return_value_set(thread,
 805a9a6:	2e08      	cmp	r6, #8
 805a9a8:	bf0c      	ite	eq
 805a9aa:	f06f 0303 	mvneq.w	r3, #3
 805a9ae:	2300      	movne	r3, #0
 805a9b0:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 805a9b2:	f814 3c53 	ldrb.w	r3, [r4, #-83]
 805a9b6:	06db      	lsls	r3, r3, #27
 805a9b8:	d103      	bne.n	805a9c2 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
 805a9ba:	f854 7c48 	ldr.w	r7, [r4, #-72]
 805a9be:	9801      	ldr	r0, [sp, #4]
 805a9c0:	b10f      	cbz	r7, 805a9c6 <signal_poll_event+0x7a>
		poller->is_polling = false;
 805a9c2:	2300      	movs	r3, #0
 805a9c4:	e7d0      	b.n	805a968 <signal_poll_event+0x1c>
	z_ready_thread(thread);
 805a9c6:	f7ff fdcd 	bl	805a564 <z_ready_thread>
		poller->is_polling = false;
 805a9ca:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
 805a9cc:	e7cd      	b.n	805a96a <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
 805a9ce:	2b02      	cmp	r3, #2
 805a9d0:	d1f7      	bne.n	805a9c2 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 805a9d2:	7823      	ldrb	r3, [r4, #0]
 805a9d4:	2b00      	cmp	r3, #0
 805a9d6:	d0c8      	beq.n	805a96a <signal_poll_event+0x1e>
 805a9d8:	f854 7c04 	ldr.w	r7, [r4, #-4]
 805a9dc:	2f00      	cmp	r7, #0
 805a9de:	d0f4      	beq.n	805a9ca <signal_poll_event+0x7e>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
 805a9e0:	f1a4 0114 	sub.w	r1, r4, #20
		twork->poll_result = 0;
 805a9e4:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
 805a9e8:	f104 0014 	add.w	r0, r4, #20
 805a9ec:	9101      	str	r1, [sp, #4]
 805a9ee:	f7ff fe70 	bl	805a6d2 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
 805a9f2:	9901      	ldr	r1, [sp, #4]
 805a9f4:	4638      	mov	r0, r7
		twork->poll_result = 0;
 805a9f6:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
 805a9fa:	f7ff fd33 	bl	805a464 <z_work_submit_to_queue>
		poller->is_polling = false;
 805a9fe:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
 805aa02:	e7b2      	b.n	805a96a <signal_poll_event+0x1e>

0805aa04 <clear_event_registrations>:
	while (num_events--) {
 805aa04:	2314      	movs	r3, #20
{
 805aa06:	b5f0      	push	{r4, r5, r6, r7, lr}
 805aa08:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
 805aa0c:	2400      	movs	r4, #0
 805aa0e:	2601      	movs	r6, #1
	while (num_events--) {
 805aa10:	b901      	cbnz	r1, 805aa14 <clear_event_registrations+0x10>
}
 805aa12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
 805aa14:	f810 3c07 	ldrb.w	r3, [r0, #-7]
 805aa18:	f1a0 0714 	sub.w	r7, r0, #20
	event->poller = NULL;
 805aa1c:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
 805aa20:	f003 031f 	and.w	r3, r3, #31
 805aa24:	2b08      	cmp	r3, #8
 805aa26:	d80d      	bhi.n	805aa44 <clear_event_registrations+0x40>
 805aa28:	fa06 f303 	lsl.w	r3, r6, r3
 805aa2c:	f413 7f8b 	tst.w	r3, #278	; 0x116
 805aa30:	d008      	beq.n	805aa44 <clear_event_registrations+0x40>
	return node->next != NULL;
 805aa32:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 805aa36:	b12b      	cbz	r3, 805aa44 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
 805aa38:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
 805aa3c:	602b      	str	r3, [r5, #0]
	next->prev = prev;
 805aa3e:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
 805aa40:	e940 4405 	strd	r4, r4, [r0, #-20]
 805aa44:	f382 8811 	msr	BASEPRI, r2
 805aa48:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 805aa4c:	f04f 0310 	mov.w	r3, #16
 805aa50:	f3ef 8211 	mrs	r2, BASEPRI
 805aa54:	f383 8812 	msr	BASEPRI_MAX, r3
 805aa58:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 805aa5c:	3901      	subs	r1, #1
 805aa5e:	4638      	mov	r0, r7
 805aa60:	e7d6      	b.n	805aa10 <clear_event_registrations+0xc>

0805aa62 <k_poll_event_init>:
	event->type = type;
 805aa62:	04d2      	lsls	r2, r2, #19
 805aa64:	0209      	lsls	r1, r1, #8
 805aa66:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 805aa6a:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
 805aa6e:	430a      	orrs	r2, r1
 805aa70:	7b01      	ldrb	r1, [r0, #12]
{
 805aa72:	b510      	push	{r4, lr}
	event->type = type;
 805aa74:	430a      	orrs	r2, r1
	event->poller = NULL;
 805aa76:	2400      	movs	r4, #0
	event->obj = obj;
 805aa78:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
 805aa7c:	6084      	str	r4, [r0, #8]
}
 805aa7e:	bd10      	pop	{r4, pc}

0805aa80 <z_handle_obj_poll_events>:
{
 805aa80:	4603      	mov	r3, r0
	return list->head == list;
 805aa82:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 805aa84:	4283      	cmp	r3, r0
 805aa86:	d008      	beq.n	805aa9a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
 805aa88:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 805aa8c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 805aa8e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 805aa90:	2300      	movs	r3, #0
	node->prev = NULL;
 805aa92:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
 805aa96:	f7ff bf59 	b.w	805a94c <signal_poll_event>
}
 805aa9a:	4770      	bx	lr

0805aa9c <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
 805aa9c:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
 805aa9e:	e9c0 0000 	strd	r0, r0, [r0]
 805aaa2:	6083      	str	r3, [r0, #8]
}
 805aaa4:	4770      	bx	lr

0805aaa6 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
 805aaa6:	2300      	movs	r3, #0
 805aaa8:	6083      	str	r3, [r0, #8]
}
 805aaaa:	4770      	bx	lr

0805aaac <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
 805aaac:	6883      	ldr	r3, [r0, #8]
 805aaae:	600b      	str	r3, [r1, #0]
	*result = sig->result;
 805aab0:	68c3      	ldr	r3, [r0, #12]
 805aab2:	6013      	str	r3, [r2, #0]
}
 805aab4:	4770      	bx	lr

0805aab6 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
 805aab6:	3204      	adds	r2, #4
{
 805aab8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
 805aaba:	4604      	mov	r4, r0
 805aabc:	d208      	bcs.n	805aad0 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
 805aabe:	2600      	movs	r6, #0
 805aac0:	2700      	movs	r7, #0
 805aac2:	f041 0104 	orr.w	r1, r1, #4
 805aac6:	e9cd 6700 	strd	r6, r7, [sp]
 805aaca:	f000 f814 	bl	805aaf6 <k_heap_aligned_alloc>
	if (mem == NULL) {
 805aace:	b910      	cbnz	r0, 805aad6 <z_heap_aligned_alloc+0x20>
		return NULL;
 805aad0:	2000      	movs	r0, #0
}
 805aad2:	b002      	add	sp, #8
 805aad4:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
 805aad6:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
 805aada:	e7fa      	b.n	805aad2 <z_heap_aligned_alloc+0x1c>

0805aadc <k_malloc>:

	return ret;
}

void *k_malloc(size_t size)
{
 805aadc:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_malloc, _SYSTEM_HEAP);

	void *ret = k_aligned_alloc(sizeof(void *), size);
 805aade:	2004      	movs	r0, #4
 805aae0:	f7f7 befa 	b.w	80528d8 <k_aligned_alloc>

0805aae4 <k_heap_init>:
{
 805aae4:	b410      	push	{r4}
 805aae6:	f100 040c 	add.w	r4, r0, #12
 805aaea:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 805aaee:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
 805aaf2:	f7fa bfae 	b.w	8055a52 <sys_heap_init>

0805aaf6 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
 805aaf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 805aafa:	b085      	sub	sp, #20
 805aafc:	4606      	mov	r6, r0
 805aafe:	4688      	mov	r8, r1
 805ab00:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
 805ab02:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 805ab06:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 805ab0a:	f7ff fe19 	bl	805a740 <sys_clock_timeout_end_calc>
 805ab0e:	4605      	mov	r5, r0
 805ab10:	460f      	mov	r7, r1
 805ab12:	f04f 0310 	mov.w	r3, #16
 805ab16:	f3ef 8411 	mrs	r4, BASEPRI
 805ab1a:	f383 8812 	msr	BASEPRI_MAX, r3
 805ab1e:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 805ab22:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
 805ab26:	464a      	mov	r2, r9
 805ab28:	4641      	mov	r1, r8
 805ab2a:	4630      	mov	r0, r6
 805ab2c:	f7fa ff17 	bl	805595e <sys_heap_aligned_alloc>
 805ab30:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
 805ab32:	f7f7 fd85 	bl	8052640 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
 805ab36:	9b03      	ldr	r3, [sp, #12]
 805ab38:	b13b      	cbz	r3, 805ab4a <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
 805ab3a:	f384 8811 	msr	BASEPRI, r4
 805ab3e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
 805ab42:	4618      	mov	r0, r3
 805ab44:	b005      	add	sp, #20
 805ab46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
 805ab4a:	1a28      	subs	r0, r5, r0
 805ab4c:	eb67 0101 	sbc.w	r1, r7, r1
 805ab50:	2801      	cmp	r0, #1
 805ab52:	f171 0200 	sbcs.w	r2, r1, #0
 805ab56:	dbf0      	blt.n	805ab3a <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 805ab58:	465a      	mov	r2, fp
 805ab5a:	e9cd 0100 	strd	r0, r1, [sp]
 805ab5e:	4621      	mov	r1, r4
 805ab60:	4650      	mov	r0, sl
 805ab62:	f7f7 fa59 	bl	8052018 <z_pend_curr>
	__asm__ volatile(
 805ab66:	f04f 0310 	mov.w	r3, #16
 805ab6a:	f3ef 8411 	mrs	r4, BASEPRI
 805ab6e:	f383 8812 	msr	BASEPRI_MAX, r3
 805ab72:	f3bf 8f6f 	isb	sy
 805ab76:	e7d6      	b.n	805ab26 <k_heap_aligned_alloc+0x30>

0805ab78 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 805ab78:	4770      	bx	lr

0805ab7a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 805ab7a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 805ab7c:	2400      	movs	r4, #0
 805ab7e:	2310      	movs	r3, #16
 805ab80:	e9cd 3402 	strd	r3, r4, [sp, #8]
 805ab84:	6803      	ldr	r3, [r0, #0]
 805ab86:	4615      	mov	r5, r2
 805ab88:	699e      	ldr	r6, [r3, #24]
 805ab8a:	6812      	ldr	r2, [r2, #0]
 805ab8c:	466b      	mov	r3, sp
 805ab8e:	e9cd 4400 	strd	r4, r4, [sp]
 805ab92:	47b0      	blx	r6
 805ab94:	f89d 3004 	ldrb.w	r3, [sp, #4]
 805ab98:	f003 0306 	and.w	r3, r3, #6
 805ab9c:	2b06      	cmp	r3, #6
 805ab9e:	bf03      	ittte	eq
 805aba0:	9b00      	ldreq	r3, [sp, #0]
 805aba2:	602b      	streq	r3, [r5, #0]
 805aba4:	2001      	moveq	r0, #1
 805aba6:	4620      	movne	r0, r4
 805aba8:	b004      	add	sp, #16
 805abaa:	bd70      	pop	{r4, r5, r6, pc}

0805abac <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 805abac:	9800      	ldr	r0, [sp, #0]
 805abae:	4290      	cmp	r0, r2
 805abb0:	bf14      	ite	ne
 805abb2:	2001      	movne	r0, #1
 805abb4:	2006      	moveq	r0, #6
 805abb6:	4770      	bx	lr

0805abb8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 805abb8:	b510      	push	{r4, lr}
 805abba:	4604      	mov	r4, r0
 805abbc:	f7f7 feb2 	bl	8052924 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 805abc0:	4620      	mov	r0, r4
 805abc2:	2108      	movs	r1, #8
 805abc4:	f000 f842 	bl	805ac4c <_ZdlPvj>
 805abc8:	4620      	mov	r0, r4
 805abca:	bd10      	pop	{r4, pc}

0805abcc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 805abcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 805abd0:	461f      	mov	r7, r3
 805abd2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 805abd6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 805abda:	4598      	cmp	r8, r3
 805abdc:	4606      	mov	r6, r0
 805abde:	4615      	mov	r5, r2
 805abe0:	d107      	bne.n	805abf2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 805abe2:	9907      	ldr	r1, [sp, #28]
 805abe4:	f000 f8bd 	bl	805ad62 <_ZNKSt9type_infoeqERKS_>
 805abe8:	b118      	cbz	r0, 805abf2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 805abea:	7165      	strb	r5, [r4, #5]
 805abec:	2000      	movs	r0, #0
 805abee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 805abf2:	4639      	mov	r1, r7
 805abf4:	4630      	mov	r0, r6
 805abf6:	f000 f8b4 	bl	805ad62 <_ZNKSt9type_infoeqERKS_>
 805abfa:	2800      	cmp	r0, #0
 805abfc:	d0f6      	beq.n	805abec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 805abfe:	2301      	movs	r3, #1
 805ac00:	f8c4 8000 	str.w	r8, [r4]
 805ac04:	7125      	strb	r5, [r4, #4]
 805ac06:	71a3      	strb	r3, [r4, #6]
 805ac08:	e7f0      	b.n	805abec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0805ac0a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 805ac0a:	b538      	push	{r3, r4, r5, lr}
 805ac0c:	4615      	mov	r5, r2
 805ac0e:	461c      	mov	r4, r3
 805ac10:	f000 f8a7 	bl	805ad62 <_ZNKSt9type_infoeqERKS_>
 805ac14:	b120      	cbz	r0, 805ac20 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 805ac16:	2308      	movs	r3, #8
 805ac18:	60e3      	str	r3, [r4, #12]
 805ac1a:	2306      	movs	r3, #6
 805ac1c:	6025      	str	r5, [r4, #0]
 805ac1e:	7123      	strb	r3, [r4, #4]
 805ac20:	bd38      	pop	{r3, r4, r5, pc}

0805ac22 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 805ac22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 805ac24:	4605      	mov	r5, r0
 805ac26:	460c      	mov	r4, r1
 805ac28:	9201      	str	r2, [sp, #4]
 805ac2a:	461e      	mov	r6, r3
 805ac2c:	f000 f899 	bl	805ad62 <_ZNKSt9type_infoeqERKS_>
 805ac30:	b950      	cbnz	r0, 805ac48 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 805ac32:	2e03      	cmp	r6, #3
 805ac34:	d808      	bhi.n	805ac48 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 805ac36:	6823      	ldr	r3, [r4, #0]
 805ac38:	9a01      	ldr	r2, [sp, #4]
 805ac3a:	695b      	ldr	r3, [r3, #20]
 805ac3c:	4629      	mov	r1, r5
 805ac3e:	4620      	mov	r0, r4
 805ac40:	b002      	add	sp, #8
 805ac42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 805ac46:	4718      	bx	r3
 805ac48:	b002      	add	sp, #8
 805ac4a:	bd70      	pop	{r4, r5, r6, pc}

0805ac4c <_ZdlPvj>:
 805ac4c:	f000 b8a2 	b.w	805ad94 <_ZdlPv>

0805ac50 <_Znwj>:
 805ac50:	2801      	cmp	r0, #1
 805ac52:	bf38      	it	cc
 805ac54:	2001      	movcc	r0, #1
 805ac56:	b510      	push	{r4, lr}
 805ac58:	4604      	mov	r4, r0
 805ac5a:	4620      	mov	r0, r4
 805ac5c:	f7f7 fe7e 	bl	805295c <malloc>
 805ac60:	b930      	cbnz	r0, 805ac70 <_Znwj+0x20>
 805ac62:	f7f7 fe73 	bl	805294c <_ZSt15get_new_handlerv>
 805ac66:	b908      	cbnz	r0, 805ac6c <_Znwj+0x1c>
 805ac68:	f000 f896 	bl	805ad98 <abort>
 805ac6c:	4780      	blx	r0
 805ac6e:	e7f4      	b.n	805ac5a <_Znwj+0xa>
 805ac70:	bd10      	pop	{r4, pc}

0805ac72 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 805ac72:	b510      	push	{r4, lr}
 805ac74:	4604      	mov	r4, r0
 805ac76:	f7f7 fe5f 	bl	8052938 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 805ac7a:	4620      	mov	r0, r4
 805ac7c:	210c      	movs	r1, #12
 805ac7e:	f7ff ffe5 	bl	805ac4c <_ZdlPvj>
 805ac82:	4620      	mov	r0, r4
 805ac84:	bd10      	pop	{r4, pc}

0805ac86 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 805ac86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 805ac88:	9f08      	ldr	r7, [sp, #32]
 805ac8a:	4297      	cmp	r7, r2
 805ac8c:	4605      	mov	r5, r0
 805ac8e:	460e      	mov	r6, r1
 805ac90:	4614      	mov	r4, r2
 805ac92:	d00a      	beq.n	805acaa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 805ac94:	68a8      	ldr	r0, [r5, #8]
 805ac96:	6802      	ldr	r2, [r0, #0]
 805ac98:	9708      	str	r7, [sp, #32]
 805ac9a:	6a15      	ldr	r5, [r2, #32]
 805ac9c:	4631      	mov	r1, r6
 805ac9e:	4622      	mov	r2, r4
 805aca0:	46ac      	mov	ip, r5
 805aca2:	b003      	add	sp, #12
 805aca4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 805aca8:	4760      	bx	ip
 805acaa:	4619      	mov	r1, r3
 805acac:	9301      	str	r3, [sp, #4]
 805acae:	f000 f858 	bl	805ad62 <_ZNKSt9type_infoeqERKS_>
 805acb2:	9b01      	ldr	r3, [sp, #4]
 805acb4:	2800      	cmp	r0, #0
 805acb6:	d0ed      	beq.n	805ac94 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 805acb8:	2006      	movs	r0, #6
 805acba:	b003      	add	sp, #12
 805acbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0805acbe <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 805acbe:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 805acc2:	460d      	mov	r5, r1
 805acc4:	4619      	mov	r1, r3
 805acc6:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 805acca:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 805acce:	4681      	mov	r9, r0
 805acd0:	4617      	mov	r7, r2
 805acd2:	4698      	mov	r8, r3
 805acd4:	f000 f845 	bl	805ad62 <_ZNKSt9type_infoeqERKS_>
 805acd8:	b190      	cbz	r0, 805ad00 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 805acda:	2d00      	cmp	r5, #0
 805acdc:	6034      	str	r4, [r6, #0]
 805acde:	7137      	strb	r7, [r6, #4]
 805ace0:	db09      	blt.n	805acf6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 805ace2:	1961      	adds	r1, r4, r5
 805ace4:	458a      	cmp	sl, r1
 805ace6:	bf0c      	ite	eq
 805ace8:	2106      	moveq	r1, #6
 805acea:	2101      	movne	r1, #1
 805acec:	71b1      	strb	r1, [r6, #6]
 805acee:	2000      	movs	r0, #0
 805acf0:	b001      	add	sp, #4
 805acf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 805acf6:	3502      	adds	r5, #2
 805acf8:	d1f9      	bne.n	805acee <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 805acfa:	2301      	movs	r3, #1
 805acfc:	71b3      	strb	r3, [r6, #6]
 805acfe:	e7f6      	b.n	805acee <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 805ad00:	4554      	cmp	r4, sl
 805ad02:	d106      	bne.n	805ad12 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 805ad04:	4659      	mov	r1, fp
 805ad06:	4648      	mov	r0, r9
 805ad08:	f000 f82b 	bl	805ad62 <_ZNKSt9type_infoeqERKS_>
 805ad0c:	b108      	cbz	r0, 805ad12 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 805ad0e:	7177      	strb	r7, [r6, #5]
 805ad10:	e7ed      	b.n	805acee <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 805ad12:	f8d9 0008 	ldr.w	r0, [r9, #8]
 805ad16:	6803      	ldr	r3, [r0, #0]
 805ad18:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 805ad1c:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 805ad20:	69dc      	ldr	r4, [r3, #28]
 805ad22:	463a      	mov	r2, r7
 805ad24:	4643      	mov	r3, r8
 805ad26:	4629      	mov	r1, r5
 805ad28:	46a4      	mov	ip, r4
 805ad2a:	b001      	add	sp, #4
 805ad2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 805ad30:	4760      	bx	ip

0805ad32 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 805ad32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 805ad36:	4607      	mov	r7, r0
 805ad38:	460c      	mov	r4, r1
 805ad3a:	4615      	mov	r5, r2
 805ad3c:	461e      	mov	r6, r3
 805ad3e:	f7ff ff64 	bl	805ac0a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 805ad42:	b948      	cbnz	r0, 805ad58 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 805ad44:	68b8      	ldr	r0, [r7, #8]
 805ad46:	6803      	ldr	r3, [r0, #0]
 805ad48:	699f      	ldr	r7, [r3, #24]
 805ad4a:	462a      	mov	r2, r5
 805ad4c:	4633      	mov	r3, r6
 805ad4e:	4621      	mov	r1, r4
 805ad50:	46bc      	mov	ip, r7
 805ad52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 805ad56:	4760      	bx	ip
 805ad58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0805ad5c <_ZNSt9type_infoD1Ev>:
 805ad5c:	4770      	bx	lr

0805ad5e <_ZNKSt9type_info14__is_pointer_pEv>:
 805ad5e:	2000      	movs	r0, #0
 805ad60:	4770      	bx	lr

0805ad62 <_ZNKSt9type_infoeqERKS_>:
 805ad62:	4281      	cmp	r1, r0
 805ad64:	b508      	push	{r3, lr}
 805ad66:	d00e      	beq.n	805ad86 <_ZNKSt9type_infoeqERKS_+0x24>
 805ad68:	6840      	ldr	r0, [r0, #4]
 805ad6a:	7803      	ldrb	r3, [r0, #0]
 805ad6c:	2b2a      	cmp	r3, #42	; 0x2a
 805ad6e:	d00c      	beq.n	805ad8a <_ZNKSt9type_infoeqERKS_+0x28>
 805ad70:	6849      	ldr	r1, [r1, #4]
 805ad72:	780b      	ldrb	r3, [r1, #0]
 805ad74:	2b2a      	cmp	r3, #42	; 0x2a
 805ad76:	bf08      	it	eq
 805ad78:	3101      	addeq	r1, #1
 805ad7a:	f7e5 fd63 	bl	8040844 <strcmp>
 805ad7e:	fab0 f080 	clz	r0, r0
 805ad82:	0940      	lsrs	r0, r0, #5
 805ad84:	bd08      	pop	{r3, pc}
 805ad86:	2001      	movs	r0, #1
 805ad88:	e7fc      	b.n	805ad84 <_ZNKSt9type_infoeqERKS_+0x22>
 805ad8a:	2000      	movs	r0, #0
 805ad8c:	e7fa      	b.n	805ad84 <_ZNKSt9type_infoeqERKS_+0x22>

0805ad8e <_ZSt17__throw_bad_allocv>:
 805ad8e:	b508      	push	{r3, lr}
 805ad90:	f000 f802 	bl	805ad98 <abort>

0805ad94 <_ZdlPv>:
 805ad94:	f7f7 bdea 	b.w	805296c <free>

0805ad98 <abort>:
 805ad98:	b508      	push	{r3, lr}
 805ad9a:	2006      	movs	r0, #6
 805ad9c:	f7f7 ffd2 	bl	8052d44 <raise>
 805ada0:	2001      	movs	r0, #1
 805ada2:	f7ee f82b 	bl	8048dfc <_exit>

0805ada6 <abs>:
 805ada6:	2800      	cmp	r0, #0
 805ada8:	bfb8      	it	lt
 805adaa:	4240      	neglt	r0, r0
 805adac:	4770      	bx	lr

0805adae <atoi>:
 805adae:	220a      	movs	r2, #10
 805adb0:	2100      	movs	r1, #0
 805adb2:	f7f8 b897 	b.w	8052ee4 <strtol>

0805adb6 <memcmp>:
 805adb6:	b510      	push	{r4, lr}
 805adb8:	3901      	subs	r1, #1
 805adba:	4402      	add	r2, r0
 805adbc:	4290      	cmp	r0, r2
 805adbe:	d101      	bne.n	805adc4 <memcmp+0xe>
 805adc0:	2000      	movs	r0, #0
 805adc2:	e005      	b.n	805add0 <memcmp+0x1a>
 805adc4:	7803      	ldrb	r3, [r0, #0]
 805adc6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 805adca:	42a3      	cmp	r3, r4
 805adcc:	d001      	beq.n	805add2 <memcmp+0x1c>
 805adce:	1b18      	subs	r0, r3, r4
 805add0:	bd10      	pop	{r4, pc}
 805add2:	3001      	adds	r0, #1
 805add4:	e7f2      	b.n	805adbc <memcmp+0x6>

0805add6 <memcpy>:
 805add6:	440a      	add	r2, r1
 805add8:	4291      	cmp	r1, r2
 805adda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 805adde:	d100      	bne.n	805ade2 <memcpy+0xc>
 805ade0:	4770      	bx	lr
 805ade2:	b510      	push	{r4, lr}
 805ade4:	f811 4b01 	ldrb.w	r4, [r1], #1
 805ade8:	f803 4f01 	strb.w	r4, [r3, #1]!
 805adec:	4291      	cmp	r1, r2
 805adee:	d1f9      	bne.n	805ade4 <memcpy+0xe>
 805adf0:	bd10      	pop	{r4, pc}

0805adf2 <__memcpy_chk>:
 805adf2:	429a      	cmp	r2, r3
 805adf4:	b508      	push	{r3, lr}
 805adf6:	d901      	bls.n	805adfc <__memcpy_chk+0xa>
 805adf8:	f7ee f81c 	bl	8048e34 <__chk_fail>
 805adfc:	4281      	cmp	r1, r0
 805adfe:	d804      	bhi.n	805ae0a <__memcpy_chk+0x18>
 805ae00:	188b      	adds	r3, r1, r2
 805ae02:	4298      	cmp	r0, r3
 805ae04:	d3f8      	bcc.n	805adf8 <__memcpy_chk+0x6>
 805ae06:	4281      	cmp	r1, r0
 805ae08:	d102      	bne.n	805ae10 <__memcpy_chk+0x1e>
 805ae0a:	1883      	adds	r3, r0, r2
 805ae0c:	4299      	cmp	r1, r3
 805ae0e:	d3f3      	bcc.n	805adf8 <__memcpy_chk+0x6>
 805ae10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 805ae14:	f7ff bfdf 	b.w	805add6 <memcpy>

0805ae18 <memmove>:
 805ae18:	4288      	cmp	r0, r1
 805ae1a:	b510      	push	{r4, lr}
 805ae1c:	eb01 0402 	add.w	r4, r1, r2
 805ae20:	d902      	bls.n	805ae28 <memmove+0x10>
 805ae22:	4284      	cmp	r4, r0
 805ae24:	4623      	mov	r3, r4
 805ae26:	d807      	bhi.n	805ae38 <memmove+0x20>
 805ae28:	1e43      	subs	r3, r0, #1
 805ae2a:	42a1      	cmp	r1, r4
 805ae2c:	d008      	beq.n	805ae40 <memmove+0x28>
 805ae2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 805ae32:	f803 2f01 	strb.w	r2, [r3, #1]!
 805ae36:	e7f8      	b.n	805ae2a <memmove+0x12>
 805ae38:	4402      	add	r2, r0
 805ae3a:	4601      	mov	r1, r0
 805ae3c:	428a      	cmp	r2, r1
 805ae3e:	d100      	bne.n	805ae42 <memmove+0x2a>
 805ae40:	bd10      	pop	{r4, pc}
 805ae42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 805ae46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 805ae4a:	e7f7      	b.n	805ae3c <memmove+0x24>

0805ae4c <memset>:
 805ae4c:	4402      	add	r2, r0
 805ae4e:	4603      	mov	r3, r0
 805ae50:	4293      	cmp	r3, r2
 805ae52:	d100      	bne.n	805ae56 <memset+0xa>
 805ae54:	4770      	bx	lr
 805ae56:	f803 1b01 	strb.w	r1, [r3], #1
 805ae5a:	e7f9      	b.n	805ae50 <memset+0x4>

0805ae5c <__cvt>:
 805ae5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 805ae5e:	ed2d 8b02 	vpush	{d8}
 805ae62:	eeb0 8b40 	vmov.f64	d8, d0
 805ae66:	b085      	sub	sp, #20
 805ae68:	4617      	mov	r7, r2
 805ae6a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 805ae6c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 805ae6e:	ee18 2a90 	vmov	r2, s17
 805ae72:	f025 0520 	bic.w	r5, r5, #32
 805ae76:	2a00      	cmp	r2, #0
 805ae78:	bfb6      	itet	lt
 805ae7a:	222d      	movlt	r2, #45	; 0x2d
 805ae7c:	2200      	movge	r2, #0
 805ae7e:	eeb1 8b40 	vneglt.f64	d8, d0
 805ae82:	2d46      	cmp	r5, #70	; 0x46
 805ae84:	460c      	mov	r4, r1
 805ae86:	701a      	strb	r2, [r3, #0]
 805ae88:	d004      	beq.n	805ae94 <__cvt+0x38>
 805ae8a:	2d45      	cmp	r5, #69	; 0x45
 805ae8c:	d100      	bne.n	805ae90 <__cvt+0x34>
 805ae8e:	3401      	adds	r4, #1
 805ae90:	2102      	movs	r1, #2
 805ae92:	e000      	b.n	805ae96 <__cvt+0x3a>
 805ae94:	2103      	movs	r1, #3
 805ae96:	ab03      	add	r3, sp, #12
 805ae98:	9301      	str	r3, [sp, #4]
 805ae9a:	ab02      	add	r3, sp, #8
 805ae9c:	9300      	str	r3, [sp, #0]
 805ae9e:	4622      	mov	r2, r4
 805aea0:	4633      	mov	r3, r6
 805aea2:	eeb0 0b48 	vmov.f64	d0, d8
 805aea6:	f7e6 ff23 	bl	8041cf0 <_dtoa_r>
 805aeaa:	2d47      	cmp	r5, #71	; 0x47
 805aeac:	d101      	bne.n	805aeb2 <__cvt+0x56>
 805aeae:	07fb      	lsls	r3, r7, #31
 805aeb0:	d51a      	bpl.n	805aee8 <__cvt+0x8c>
 805aeb2:	2d46      	cmp	r5, #70	; 0x46
 805aeb4:	eb00 0204 	add.w	r2, r0, r4
 805aeb8:	d10c      	bne.n	805aed4 <__cvt+0x78>
 805aeba:	7803      	ldrb	r3, [r0, #0]
 805aebc:	2b30      	cmp	r3, #48	; 0x30
 805aebe:	d107      	bne.n	805aed0 <__cvt+0x74>
 805aec0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 805aec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 805aec8:	bf1c      	itt	ne
 805aeca:	f1c4 0401 	rsbne	r4, r4, #1
 805aece:	6034      	strne	r4, [r6, #0]
 805aed0:	6833      	ldr	r3, [r6, #0]
 805aed2:	441a      	add	r2, r3
 805aed4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 805aed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 805aedc:	bf08      	it	eq
 805aede:	9203      	streq	r2, [sp, #12]
 805aee0:	2130      	movs	r1, #48	; 0x30
 805aee2:	9b03      	ldr	r3, [sp, #12]
 805aee4:	4293      	cmp	r3, r2
 805aee6:	d307      	bcc.n	805aef8 <__cvt+0x9c>
 805aee8:	9b03      	ldr	r3, [sp, #12]
 805aeea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 805aeec:	1a1b      	subs	r3, r3, r0
 805aeee:	6013      	str	r3, [r2, #0]
 805aef0:	b005      	add	sp, #20
 805aef2:	ecbd 8b02 	vpop	{d8}
 805aef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 805aef8:	1c5c      	adds	r4, r3, #1
 805aefa:	9403      	str	r4, [sp, #12]
 805aefc:	7019      	strb	r1, [r3, #0]
 805aefe:	e7f0      	b.n	805aee2 <__cvt+0x86>

0805af00 <__exponent>:
 805af00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 805af02:	4603      	mov	r3, r0
 805af04:	2900      	cmp	r1, #0
 805af06:	bfb8      	it	lt
 805af08:	4249      	neglt	r1, r1
 805af0a:	f803 2b02 	strb.w	r2, [r3], #2
 805af0e:	bfb4      	ite	lt
 805af10:	222d      	movlt	r2, #45	; 0x2d
 805af12:	222b      	movge	r2, #43	; 0x2b
 805af14:	2909      	cmp	r1, #9
 805af16:	7042      	strb	r2, [r0, #1]
 805af18:	dd2a      	ble.n	805af70 <__exponent+0x70>
 805af1a:	f10d 0407 	add.w	r4, sp, #7
 805af1e:	46a4      	mov	ip, r4
 805af20:	270a      	movs	r7, #10
 805af22:	46a6      	mov	lr, r4
 805af24:	460a      	mov	r2, r1
 805af26:	fb91 f6f7 	sdiv	r6, r1, r7
 805af2a:	fb07 1516 	mls	r5, r7, r6, r1
 805af2e:	3530      	adds	r5, #48	; 0x30
 805af30:	2a63      	cmp	r2, #99	; 0x63
 805af32:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 805af36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 805af3a:	4631      	mov	r1, r6
 805af3c:	dcf1      	bgt.n	805af22 <__exponent+0x22>
 805af3e:	3130      	adds	r1, #48	; 0x30
 805af40:	f1ae 0502 	sub.w	r5, lr, #2
 805af44:	f804 1c01 	strb.w	r1, [r4, #-1]
 805af48:	1c44      	adds	r4, r0, #1
 805af4a:	4629      	mov	r1, r5
 805af4c:	4561      	cmp	r1, ip
 805af4e:	d30a      	bcc.n	805af66 <__exponent+0x66>
 805af50:	f10d 0209 	add.w	r2, sp, #9
 805af54:	eba2 020e 	sub.w	r2, r2, lr
 805af58:	4565      	cmp	r5, ip
 805af5a:	bf88      	it	hi
 805af5c:	2200      	movhi	r2, #0
 805af5e:	4413      	add	r3, r2
 805af60:	1a18      	subs	r0, r3, r0
 805af62:	b003      	add	sp, #12
 805af64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 805af66:	f811 2b01 	ldrb.w	r2, [r1], #1
 805af6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 805af6e:	e7ed      	b.n	805af4c <__exponent+0x4c>
 805af70:	2330      	movs	r3, #48	; 0x30
 805af72:	3130      	adds	r1, #48	; 0x30
 805af74:	7083      	strb	r3, [r0, #2]
 805af76:	70c1      	strb	r1, [r0, #3]
 805af78:	1d03      	adds	r3, r0, #4
 805af7a:	e7f1      	b.n	805af60 <__exponent+0x60>

0805af7c <_printf_common>:
 805af7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 805af80:	4616      	mov	r6, r2
 805af82:	4699      	mov	r9, r3
 805af84:	688a      	ldr	r2, [r1, #8]
 805af86:	690b      	ldr	r3, [r1, #16]
 805af88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 805af8c:	4293      	cmp	r3, r2
 805af8e:	bfb8      	it	lt
 805af90:	4613      	movlt	r3, r2
 805af92:	6033      	str	r3, [r6, #0]
 805af94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 805af98:	4607      	mov	r7, r0
 805af9a:	460c      	mov	r4, r1
 805af9c:	b10a      	cbz	r2, 805afa2 <_printf_common+0x26>
 805af9e:	3301      	adds	r3, #1
 805afa0:	6033      	str	r3, [r6, #0]
 805afa2:	6823      	ldr	r3, [r4, #0]
 805afa4:	0699      	lsls	r1, r3, #26
 805afa6:	bf42      	ittt	mi
 805afa8:	6833      	ldrmi	r3, [r6, #0]
 805afaa:	3302      	addmi	r3, #2
 805afac:	6033      	strmi	r3, [r6, #0]
 805afae:	6825      	ldr	r5, [r4, #0]
 805afb0:	f015 0506 	ands.w	r5, r5, #6
 805afb4:	d106      	bne.n	805afc4 <_printf_common+0x48>
 805afb6:	f104 0a19 	add.w	sl, r4, #25
 805afba:	68e3      	ldr	r3, [r4, #12]
 805afbc:	6832      	ldr	r2, [r6, #0]
 805afbe:	1a9b      	subs	r3, r3, r2
 805afc0:	42ab      	cmp	r3, r5
 805afc2:	dc26      	bgt.n	805b012 <_printf_common+0x96>
 805afc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 805afc8:	1e13      	subs	r3, r2, #0
 805afca:	6822      	ldr	r2, [r4, #0]
 805afcc:	bf18      	it	ne
 805afce:	2301      	movne	r3, #1
 805afd0:	0692      	lsls	r2, r2, #26
 805afd2:	d42b      	bmi.n	805b02c <_printf_common+0xb0>
 805afd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 805afd8:	4649      	mov	r1, r9
 805afda:	4638      	mov	r0, r7
 805afdc:	47c0      	blx	r8
 805afde:	3001      	adds	r0, #1
 805afe0:	d01e      	beq.n	805b020 <_printf_common+0xa4>
 805afe2:	6823      	ldr	r3, [r4, #0]
 805afe4:	68e5      	ldr	r5, [r4, #12]
 805afe6:	6832      	ldr	r2, [r6, #0]
 805afe8:	f003 0306 	and.w	r3, r3, #6
 805afec:	2b04      	cmp	r3, #4
 805afee:	bf08      	it	eq
 805aff0:	1aad      	subeq	r5, r5, r2
 805aff2:	68a3      	ldr	r3, [r4, #8]
 805aff4:	6922      	ldr	r2, [r4, #16]
 805aff6:	bf0c      	ite	eq
 805aff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 805affc:	2500      	movne	r5, #0
 805affe:	4293      	cmp	r3, r2
 805b000:	bfc4      	itt	gt
 805b002:	1a9b      	subgt	r3, r3, r2
 805b004:	18ed      	addgt	r5, r5, r3
 805b006:	2600      	movs	r6, #0
 805b008:	341a      	adds	r4, #26
 805b00a:	42b5      	cmp	r5, r6
 805b00c:	d11a      	bne.n	805b044 <_printf_common+0xc8>
 805b00e:	2000      	movs	r0, #0
 805b010:	e008      	b.n	805b024 <_printf_common+0xa8>
 805b012:	2301      	movs	r3, #1
 805b014:	4652      	mov	r2, sl
 805b016:	4649      	mov	r1, r9
 805b018:	4638      	mov	r0, r7
 805b01a:	47c0      	blx	r8
 805b01c:	3001      	adds	r0, #1
 805b01e:	d103      	bne.n	805b028 <_printf_common+0xac>
 805b020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 805b024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 805b028:	3501      	adds	r5, #1
 805b02a:	e7c6      	b.n	805afba <_printf_common+0x3e>
 805b02c:	18e1      	adds	r1, r4, r3
 805b02e:	1c5a      	adds	r2, r3, #1
 805b030:	2030      	movs	r0, #48	; 0x30
 805b032:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 805b036:	4422      	add	r2, r4
 805b038:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 805b03c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 805b040:	3302      	adds	r3, #2
 805b042:	e7c7      	b.n	805afd4 <_printf_common+0x58>
 805b044:	2301      	movs	r3, #1
 805b046:	4622      	mov	r2, r4
 805b048:	4649      	mov	r1, r9
 805b04a:	4638      	mov	r0, r7
 805b04c:	47c0      	blx	r8
 805b04e:	3001      	adds	r0, #1
 805b050:	d0e6      	beq.n	805b020 <_printf_common+0xa4>
 805b052:	3601      	adds	r6, #1
 805b054:	e7d9      	b.n	805b00a <_printf_common+0x8e>

0805b056 <_raise_r>:
 805b056:	291f      	cmp	r1, #31
 805b058:	b538      	push	{r3, r4, r5, lr}
 805b05a:	4604      	mov	r4, r0
 805b05c:	460d      	mov	r5, r1
 805b05e:	d904      	bls.n	805b06a <_raise_r+0x14>
 805b060:	2316      	movs	r3, #22
 805b062:	6003      	str	r3, [r0, #0]
 805b064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 805b068:	bd38      	pop	{r3, r4, r5, pc}
 805b06a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 805b06c:	b112      	cbz	r2, 805b074 <_raise_r+0x1e>
 805b06e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 805b072:	b94b      	cbnz	r3, 805b088 <_raise_r+0x32>
 805b074:	4620      	mov	r0, r4
 805b076:	f000 f816 	bl	805b0a6 <_getpid_r>
 805b07a:	462a      	mov	r2, r5
 805b07c:	4601      	mov	r1, r0
 805b07e:	4620      	mov	r0, r4
 805b080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 805b084:	f7f7 be66 	b.w	8052d54 <_kill_r>
 805b088:	2b01      	cmp	r3, #1
 805b08a:	d00a      	beq.n	805b0a2 <_raise_r+0x4c>
 805b08c:	1c59      	adds	r1, r3, #1
 805b08e:	d103      	bne.n	805b098 <_raise_r+0x42>
 805b090:	2316      	movs	r3, #22
 805b092:	6003      	str	r3, [r0, #0]
 805b094:	2001      	movs	r0, #1
 805b096:	e7e7      	b.n	805b068 <_raise_r+0x12>
 805b098:	2400      	movs	r4, #0
 805b09a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 805b09e:	4628      	mov	r0, r5
 805b0a0:	4798      	blx	r3
 805b0a2:	2000      	movs	r0, #0
 805b0a4:	e7e0      	b.n	805b068 <_raise_r+0x12>

0805b0a6 <_getpid_r>:
 805b0a6:	f7fc bacc 	b.w	8057642 <_getpid>

0805b0aa <strchr>:
 805b0aa:	b2c9      	uxtb	r1, r1
 805b0ac:	4603      	mov	r3, r0
 805b0ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 805b0b2:	b11a      	cbz	r2, 805b0bc <strchr+0x12>
 805b0b4:	428a      	cmp	r2, r1
 805b0b6:	d1f9      	bne.n	805b0ac <strchr+0x2>
 805b0b8:	4618      	mov	r0, r3
 805b0ba:	4770      	bx	lr
 805b0bc:	2900      	cmp	r1, #0
 805b0be:	bf18      	it	ne
 805b0c0:	2300      	movne	r3, #0
 805b0c2:	e7f9      	b.n	805b0b8 <strchr+0xe>

0805b0c4 <strcpy>:
 805b0c4:	4603      	mov	r3, r0
 805b0c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 805b0ca:	f803 2b01 	strb.w	r2, [r3], #1
 805b0ce:	2a00      	cmp	r2, #0
 805b0d0:	d1f9      	bne.n	805b0c6 <strcpy+0x2>
 805b0d2:	4770      	bx	lr

0805b0d4 <strncmp>:
 805b0d4:	b510      	push	{r4, lr}
 805b0d6:	b17a      	cbz	r2, 805b0f8 <strncmp+0x24>
 805b0d8:	4603      	mov	r3, r0
 805b0da:	3901      	subs	r1, #1
 805b0dc:	1884      	adds	r4, r0, r2
 805b0de:	f813 0b01 	ldrb.w	r0, [r3], #1
 805b0e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 805b0e6:	4290      	cmp	r0, r2
 805b0e8:	d101      	bne.n	805b0ee <strncmp+0x1a>
 805b0ea:	42a3      	cmp	r3, r4
 805b0ec:	d101      	bne.n	805b0f2 <strncmp+0x1e>
 805b0ee:	1a80      	subs	r0, r0, r2
 805b0f0:	bd10      	pop	{r4, pc}
 805b0f2:	2800      	cmp	r0, #0
 805b0f4:	d1f3      	bne.n	805b0de <strncmp+0xa>
 805b0f6:	e7fa      	b.n	805b0ee <strncmp+0x1a>
 805b0f8:	4610      	mov	r0, r2
 805b0fa:	e7f9      	b.n	805b0f0 <strncmp+0x1c>

0805b0fc <strncpy>:
 805b0fc:	b510      	push	{r4, lr}
 805b0fe:	3901      	subs	r1, #1
 805b100:	4603      	mov	r3, r0
 805b102:	b132      	cbz	r2, 805b112 <strncpy+0x16>
 805b104:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 805b108:	f803 4b01 	strb.w	r4, [r3], #1
 805b10c:	3a01      	subs	r2, #1
 805b10e:	2c00      	cmp	r4, #0
 805b110:	d1f7      	bne.n	805b102 <strncpy+0x6>
 805b112:	441a      	add	r2, r3
 805b114:	2100      	movs	r1, #0
 805b116:	4293      	cmp	r3, r2
 805b118:	d100      	bne.n	805b11c <strncpy+0x20>
 805b11a:	bd10      	pop	{r4, pc}
 805b11c:	f803 1b01 	strb.w	r1, [r3], #1
 805b120:	e7f9      	b.n	805b116 <strncpy+0x1a>

0805b122 <strnlen>:
 805b122:	b510      	push	{r4, lr}
 805b124:	4602      	mov	r2, r0
 805b126:	4401      	add	r1, r0
 805b128:	428a      	cmp	r2, r1
 805b12a:	4613      	mov	r3, r2
 805b12c:	d003      	beq.n	805b136 <strnlen+0x14>
 805b12e:	781c      	ldrb	r4, [r3, #0]
 805b130:	3201      	adds	r2, #1
 805b132:	2c00      	cmp	r4, #0
 805b134:	d1f8      	bne.n	805b128 <strnlen+0x6>
 805b136:	1a18      	subs	r0, r3, r0
 805b138:	bd10      	pop	{r4, pc}

0805b13a <strrchr>:
 805b13a:	b538      	push	{r3, r4, r5, lr}
 805b13c:	4603      	mov	r3, r0
 805b13e:	460c      	mov	r4, r1
 805b140:	b969      	cbnz	r1, 805b15e <strrchr+0x24>
 805b142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 805b146:	f7ff bfb0 	b.w	805b0aa <strchr>
 805b14a:	1c43      	adds	r3, r0, #1
 805b14c:	4605      	mov	r5, r0
 805b14e:	4621      	mov	r1, r4
 805b150:	4618      	mov	r0, r3
 805b152:	f7ff ffaa 	bl	805b0aa <strchr>
 805b156:	2800      	cmp	r0, #0
 805b158:	d1f7      	bne.n	805b14a <strrchr+0x10>
 805b15a:	4628      	mov	r0, r5
 805b15c:	bd38      	pop	{r3, r4, r5, pc}
 805b15e:	2500      	movs	r5, #0
 805b160:	e7f5      	b.n	805b14e <strrchr+0x14>

0805b162 <strstr>:
 805b162:	780a      	ldrb	r2, [r1, #0]
 805b164:	b570      	push	{r4, r5, r6, lr}
 805b166:	b96a      	cbnz	r2, 805b184 <strstr+0x22>
 805b168:	bd70      	pop	{r4, r5, r6, pc}
 805b16a:	429a      	cmp	r2, r3
 805b16c:	d109      	bne.n	805b182 <strstr+0x20>
 805b16e:	460c      	mov	r4, r1
 805b170:	4605      	mov	r5, r0
 805b172:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 805b176:	2b00      	cmp	r3, #0
 805b178:	d0f6      	beq.n	805b168 <strstr+0x6>
 805b17a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 805b17e:	429e      	cmp	r6, r3
 805b180:	d0f7      	beq.n	805b172 <strstr+0x10>
 805b182:	3001      	adds	r0, #1
 805b184:	7803      	ldrb	r3, [r0, #0]
 805b186:	2b00      	cmp	r3, #0
 805b188:	d1ef      	bne.n	805b16a <strstr+0x8>
 805b18a:	4618      	mov	r0, r3
 805b18c:	e7ec      	b.n	805b168 <strstr+0x6>

0805b18e <quorem>:
 805b18e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 805b192:	6903      	ldr	r3, [r0, #16]
 805b194:	690c      	ldr	r4, [r1, #16]
 805b196:	42a3      	cmp	r3, r4
 805b198:	4607      	mov	r7, r0
 805b19a:	f2c0 8081 	blt.w	805b2a0 <quorem+0x112>
 805b19e:	3c01      	subs	r4, #1
 805b1a0:	f101 0814 	add.w	r8, r1, #20
 805b1a4:	f100 0514 	add.w	r5, r0, #20
 805b1a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 805b1ac:	9301      	str	r3, [sp, #4]
 805b1ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 805b1b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 805b1b6:	3301      	adds	r3, #1
 805b1b8:	429a      	cmp	r2, r3
 805b1ba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 805b1be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 805b1c2:	fbb2 f6f3 	udiv	r6, r2, r3
 805b1c6:	d331      	bcc.n	805b22c <quorem+0x9e>
 805b1c8:	f04f 0e00 	mov.w	lr, #0
 805b1cc:	4640      	mov	r0, r8
 805b1ce:	46ac      	mov	ip, r5
 805b1d0:	46f2      	mov	sl, lr
 805b1d2:	f850 2b04 	ldr.w	r2, [r0], #4
 805b1d6:	b293      	uxth	r3, r2
 805b1d8:	fb06 e303 	mla	r3, r6, r3, lr
 805b1dc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 805b1e0:	b29b      	uxth	r3, r3
 805b1e2:	ebaa 0303 	sub.w	r3, sl, r3
 805b1e6:	0c12      	lsrs	r2, r2, #16
 805b1e8:	f8dc a000 	ldr.w	sl, [ip]
 805b1ec:	fb06 e202 	mla	r2, r6, r2, lr
 805b1f0:	fa13 f38a 	uxtah	r3, r3, sl
 805b1f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 805b1f8:	fa1f fa82 	uxth.w	sl, r2
 805b1fc:	f8dc 2000 	ldr.w	r2, [ip]
 805b200:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 805b204:	eb02 4223 	add.w	r2, r2, r3, asr #16
 805b208:	b29b      	uxth	r3, r3
 805b20a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 805b20e:	4581      	cmp	r9, r0
 805b210:	f84c 3b04 	str.w	r3, [ip], #4
 805b214:	ea4f 4a22 	mov.w	sl, r2, asr #16
 805b218:	d2db      	bcs.n	805b1d2 <quorem+0x44>
 805b21a:	f855 300b 	ldr.w	r3, [r5, fp]
 805b21e:	b92b      	cbnz	r3, 805b22c <quorem+0x9e>
 805b220:	9b01      	ldr	r3, [sp, #4]
 805b222:	3b04      	subs	r3, #4
 805b224:	429d      	cmp	r5, r3
 805b226:	461a      	mov	r2, r3
 805b228:	d32e      	bcc.n	805b288 <quorem+0xfa>
 805b22a:	613c      	str	r4, [r7, #16]
 805b22c:	4638      	mov	r0, r7
 805b22e:	f000 f888 	bl	805b342 <__mcmp>
 805b232:	2800      	cmp	r0, #0
 805b234:	db24      	blt.n	805b280 <quorem+0xf2>
 805b236:	3601      	adds	r6, #1
 805b238:	4628      	mov	r0, r5
 805b23a:	f04f 0c00 	mov.w	ip, #0
 805b23e:	f858 2b04 	ldr.w	r2, [r8], #4
 805b242:	f8d0 e000 	ldr.w	lr, [r0]
 805b246:	b293      	uxth	r3, r2
 805b248:	ebac 0303 	sub.w	r3, ip, r3
 805b24c:	0c12      	lsrs	r2, r2, #16
 805b24e:	fa13 f38e 	uxtah	r3, r3, lr
 805b252:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 805b256:	eb02 4223 	add.w	r2, r2, r3, asr #16
 805b25a:	b29b      	uxth	r3, r3
 805b25c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 805b260:	45c1      	cmp	r9, r8
 805b262:	f840 3b04 	str.w	r3, [r0], #4
 805b266:	ea4f 4c22 	mov.w	ip, r2, asr #16
 805b26a:	d2e8      	bcs.n	805b23e <quorem+0xb0>
 805b26c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 805b270:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 805b274:	b922      	cbnz	r2, 805b280 <quorem+0xf2>
 805b276:	3b04      	subs	r3, #4
 805b278:	429d      	cmp	r5, r3
 805b27a:	461a      	mov	r2, r3
 805b27c:	d30a      	bcc.n	805b294 <quorem+0x106>
 805b27e:	613c      	str	r4, [r7, #16]
 805b280:	4630      	mov	r0, r6
 805b282:	b003      	add	sp, #12
 805b284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 805b288:	6812      	ldr	r2, [r2, #0]
 805b28a:	3b04      	subs	r3, #4
 805b28c:	2a00      	cmp	r2, #0
 805b28e:	d1cc      	bne.n	805b22a <quorem+0x9c>
 805b290:	3c01      	subs	r4, #1
 805b292:	e7c7      	b.n	805b224 <quorem+0x96>
 805b294:	6812      	ldr	r2, [r2, #0]
 805b296:	3b04      	subs	r3, #4
 805b298:	2a00      	cmp	r2, #0
 805b29a:	d1f0      	bne.n	805b27e <quorem+0xf0>
 805b29c:	3c01      	subs	r4, #1
 805b29e:	e7eb      	b.n	805b278 <quorem+0xea>
 805b2a0:	2000      	movs	r0, #0
 805b2a2:	e7ee      	b.n	805b282 <quorem+0xf4>

0805b2a4 <__hi0bits>:
 805b2a4:	0c03      	lsrs	r3, r0, #16
 805b2a6:	041b      	lsls	r3, r3, #16
 805b2a8:	b9d3      	cbnz	r3, 805b2e0 <__hi0bits+0x3c>
 805b2aa:	0400      	lsls	r0, r0, #16
 805b2ac:	2310      	movs	r3, #16
 805b2ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 805b2b2:	bf04      	itt	eq
 805b2b4:	0200      	lsleq	r0, r0, #8
 805b2b6:	3308      	addeq	r3, #8
 805b2b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 805b2bc:	bf04      	itt	eq
 805b2be:	0100      	lsleq	r0, r0, #4
 805b2c0:	3304      	addeq	r3, #4
 805b2c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 805b2c6:	bf04      	itt	eq
 805b2c8:	0080      	lsleq	r0, r0, #2
 805b2ca:	3302      	addeq	r3, #2
 805b2cc:	2800      	cmp	r0, #0
 805b2ce:	db05      	blt.n	805b2dc <__hi0bits+0x38>
 805b2d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 805b2d4:	f103 0301 	add.w	r3, r3, #1
 805b2d8:	bf08      	it	eq
 805b2da:	2320      	moveq	r3, #32
 805b2dc:	4618      	mov	r0, r3
 805b2de:	4770      	bx	lr
 805b2e0:	2300      	movs	r3, #0
 805b2e2:	e7e4      	b.n	805b2ae <__hi0bits+0xa>

0805b2e4 <__lo0bits>:
 805b2e4:	6803      	ldr	r3, [r0, #0]
 805b2e6:	f013 0207 	ands.w	r2, r3, #7
 805b2ea:	4601      	mov	r1, r0
 805b2ec:	d00b      	beq.n	805b306 <__lo0bits+0x22>
 805b2ee:	07da      	lsls	r2, r3, #31
 805b2f0:	d423      	bmi.n	805b33a <__lo0bits+0x56>
 805b2f2:	0798      	lsls	r0, r3, #30
 805b2f4:	bf49      	itett	mi
 805b2f6:	085b      	lsrmi	r3, r3, #1
 805b2f8:	089b      	lsrpl	r3, r3, #2
 805b2fa:	2001      	movmi	r0, #1
 805b2fc:	600b      	strmi	r3, [r1, #0]
 805b2fe:	bf5c      	itt	pl
 805b300:	600b      	strpl	r3, [r1, #0]
 805b302:	2002      	movpl	r0, #2
 805b304:	4770      	bx	lr
 805b306:	b298      	uxth	r0, r3
 805b308:	b9a8      	cbnz	r0, 805b336 <__lo0bits+0x52>
 805b30a:	0c1b      	lsrs	r3, r3, #16
 805b30c:	2010      	movs	r0, #16
 805b30e:	b2da      	uxtb	r2, r3
 805b310:	b90a      	cbnz	r2, 805b316 <__lo0bits+0x32>
 805b312:	3008      	adds	r0, #8
 805b314:	0a1b      	lsrs	r3, r3, #8
 805b316:	071a      	lsls	r2, r3, #28
 805b318:	bf04      	itt	eq
 805b31a:	091b      	lsreq	r3, r3, #4
 805b31c:	3004      	addeq	r0, #4
 805b31e:	079a      	lsls	r2, r3, #30
 805b320:	bf04      	itt	eq
 805b322:	089b      	lsreq	r3, r3, #2
 805b324:	3002      	addeq	r0, #2
 805b326:	07da      	lsls	r2, r3, #31
 805b328:	d403      	bmi.n	805b332 <__lo0bits+0x4e>
 805b32a:	085b      	lsrs	r3, r3, #1
 805b32c:	f100 0001 	add.w	r0, r0, #1
 805b330:	d005      	beq.n	805b33e <__lo0bits+0x5a>
 805b332:	600b      	str	r3, [r1, #0]
 805b334:	4770      	bx	lr
 805b336:	4610      	mov	r0, r2
 805b338:	e7e9      	b.n	805b30e <__lo0bits+0x2a>
 805b33a:	2000      	movs	r0, #0
 805b33c:	4770      	bx	lr
 805b33e:	2020      	movs	r0, #32
 805b340:	4770      	bx	lr

0805b342 <__mcmp>:
 805b342:	b530      	push	{r4, r5, lr}
 805b344:	6902      	ldr	r2, [r0, #16]
 805b346:	690c      	ldr	r4, [r1, #16]
 805b348:	1b12      	subs	r2, r2, r4
 805b34a:	d10e      	bne.n	805b36a <__mcmp+0x28>
 805b34c:	f100 0314 	add.w	r3, r0, #20
 805b350:	3114      	adds	r1, #20
 805b352:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 805b356:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 805b35a:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 805b35e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 805b362:	42a5      	cmp	r5, r4
 805b364:	d003      	beq.n	805b36e <__mcmp+0x2c>
 805b366:	d305      	bcc.n	805b374 <__mcmp+0x32>
 805b368:	2201      	movs	r2, #1
 805b36a:	4610      	mov	r0, r2
 805b36c:	bd30      	pop	{r4, r5, pc}
 805b36e:	4283      	cmp	r3, r0
 805b370:	d3f3      	bcc.n	805b35a <__mcmp+0x18>
 805b372:	e7fa      	b.n	805b36a <__mcmp+0x28>
 805b374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 805b378:	e7f7      	b.n	805b36a <__mcmp+0x28>

0805b37a <_calloc_r>:
 805b37a:	b513      	push	{r0, r1, r4, lr}
 805b37c:	434a      	muls	r2, r1
 805b37e:	4611      	mov	r1, r2
 805b380:	9201      	str	r2, [sp, #4]
 805b382:	f7f7 fb47 	bl	8052a14 <_malloc_r>
 805b386:	4604      	mov	r4, r0
 805b388:	b118      	cbz	r0, 805b392 <_calloc_r+0x18>
 805b38a:	9a01      	ldr	r2, [sp, #4]
 805b38c:	2100      	movs	r1, #0
 805b38e:	f7ff fd5d 	bl	805ae4c <memset>
 805b392:	4620      	mov	r0, r4
 805b394:	b002      	add	sp, #8
 805b396:	bd10      	pop	{r4, pc}

0805b398 <_realloc_r>:
 805b398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 805b39a:	4607      	mov	r7, r0
 805b39c:	4614      	mov	r4, r2
 805b39e:	460e      	mov	r6, r1
 805b3a0:	b921      	cbnz	r1, 805b3ac <_realloc_r+0x14>
 805b3a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 805b3a6:	4611      	mov	r1, r2
 805b3a8:	f7f7 bb34 	b.w	8052a14 <_malloc_r>
 805b3ac:	b922      	cbnz	r2, 805b3b8 <_realloc_r+0x20>
 805b3ae:	f7f7 fae5 	bl	805297c <_free_r>
 805b3b2:	4625      	mov	r5, r4
 805b3b4:	4628      	mov	r0, r5
 805b3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 805b3b8:	f000 f881 	bl	805b4be <_malloc_usable_size_r>
 805b3bc:	42a0      	cmp	r0, r4
 805b3be:	d20f      	bcs.n	805b3e0 <_realloc_r+0x48>
 805b3c0:	4621      	mov	r1, r4
 805b3c2:	4638      	mov	r0, r7
 805b3c4:	f7f7 fb26 	bl	8052a14 <_malloc_r>
 805b3c8:	4605      	mov	r5, r0
 805b3ca:	2800      	cmp	r0, #0
 805b3cc:	d0f2      	beq.n	805b3b4 <_realloc_r+0x1c>
 805b3ce:	4631      	mov	r1, r6
 805b3d0:	4622      	mov	r2, r4
 805b3d2:	f7ff fd00 	bl	805add6 <memcpy>
 805b3d6:	4631      	mov	r1, r6
 805b3d8:	4638      	mov	r0, r7
 805b3da:	f7f7 facf 	bl	805297c <_free_r>
 805b3de:	e7e9      	b.n	805b3b4 <_realloc_r+0x1c>
 805b3e0:	4635      	mov	r5, r6
 805b3e2:	e7e7      	b.n	805b3b4 <_realloc_r+0x1c>

0805b3e4 <__ssputs_r>:
 805b3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 805b3e8:	688e      	ldr	r6, [r1, #8]
 805b3ea:	429e      	cmp	r6, r3
 805b3ec:	4682      	mov	sl, r0
 805b3ee:	460c      	mov	r4, r1
 805b3f0:	4690      	mov	r8, r2
 805b3f2:	461f      	mov	r7, r3
 805b3f4:	d838      	bhi.n	805b468 <__ssputs_r+0x84>
 805b3f6:	898a      	ldrh	r2, [r1, #12]
 805b3f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 805b3fc:	d032      	beq.n	805b464 <__ssputs_r+0x80>
 805b3fe:	6825      	ldr	r5, [r4, #0]
 805b400:	6909      	ldr	r1, [r1, #16]
 805b402:	eba5 0901 	sub.w	r9, r5, r1
 805b406:	6965      	ldr	r5, [r4, #20]
 805b408:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 805b40c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 805b410:	3301      	adds	r3, #1
 805b412:	444b      	add	r3, r9
 805b414:	106d      	asrs	r5, r5, #1
 805b416:	429d      	cmp	r5, r3
 805b418:	bf38      	it	cc
 805b41a:	461d      	movcc	r5, r3
 805b41c:	0553      	lsls	r3, r2, #21
 805b41e:	d531      	bpl.n	805b484 <__ssputs_r+0xa0>
 805b420:	4629      	mov	r1, r5
 805b422:	f7f7 faf7 	bl	8052a14 <_malloc_r>
 805b426:	4606      	mov	r6, r0
 805b428:	b950      	cbnz	r0, 805b440 <__ssputs_r+0x5c>
 805b42a:	230c      	movs	r3, #12
 805b42c:	f8ca 3000 	str.w	r3, [sl]
 805b430:	89a3      	ldrh	r3, [r4, #12]
 805b432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 805b436:	81a3      	strh	r3, [r4, #12]
 805b438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 805b43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 805b440:	6921      	ldr	r1, [r4, #16]
 805b442:	464a      	mov	r2, r9
 805b444:	f7ff fcc7 	bl	805add6 <memcpy>
 805b448:	89a3      	ldrh	r3, [r4, #12]
 805b44a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 805b44e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 805b452:	81a3      	strh	r3, [r4, #12]
 805b454:	6126      	str	r6, [r4, #16]
 805b456:	6165      	str	r5, [r4, #20]
 805b458:	444e      	add	r6, r9
 805b45a:	eba5 0509 	sub.w	r5, r5, r9
 805b45e:	6026      	str	r6, [r4, #0]
 805b460:	60a5      	str	r5, [r4, #8]
 805b462:	463e      	mov	r6, r7
 805b464:	42be      	cmp	r6, r7
 805b466:	d900      	bls.n	805b46a <__ssputs_r+0x86>
 805b468:	463e      	mov	r6, r7
 805b46a:	6820      	ldr	r0, [r4, #0]
 805b46c:	4632      	mov	r2, r6
 805b46e:	4641      	mov	r1, r8
 805b470:	f7ff fcd2 	bl	805ae18 <memmove>
 805b474:	68a3      	ldr	r3, [r4, #8]
 805b476:	1b9b      	subs	r3, r3, r6
 805b478:	60a3      	str	r3, [r4, #8]
 805b47a:	6823      	ldr	r3, [r4, #0]
 805b47c:	4433      	add	r3, r6
 805b47e:	6023      	str	r3, [r4, #0]
 805b480:	2000      	movs	r0, #0
 805b482:	e7db      	b.n	805b43c <__ssputs_r+0x58>
 805b484:	462a      	mov	r2, r5
 805b486:	f7ff ff87 	bl	805b398 <_realloc_r>
 805b48a:	4606      	mov	r6, r0
 805b48c:	2800      	cmp	r0, #0
 805b48e:	d1e1      	bne.n	805b454 <__ssputs_r+0x70>
 805b490:	6921      	ldr	r1, [r4, #16]
 805b492:	4650      	mov	r0, sl
 805b494:	f7f7 fa72 	bl	805297c <_free_r>
 805b498:	e7c7      	b.n	805b42a <__ssputs_r+0x46>

0805b49a <__ascii_mbtowc>:
 805b49a:	b082      	sub	sp, #8
 805b49c:	b901      	cbnz	r1, 805b4a0 <__ascii_mbtowc+0x6>
 805b49e:	a901      	add	r1, sp, #4
 805b4a0:	b142      	cbz	r2, 805b4b4 <__ascii_mbtowc+0x1a>
 805b4a2:	b14b      	cbz	r3, 805b4b8 <__ascii_mbtowc+0x1e>
 805b4a4:	7813      	ldrb	r3, [r2, #0]
 805b4a6:	600b      	str	r3, [r1, #0]
 805b4a8:	7812      	ldrb	r2, [r2, #0]
 805b4aa:	1e10      	subs	r0, r2, #0
 805b4ac:	bf18      	it	ne
 805b4ae:	2001      	movne	r0, #1
 805b4b0:	b002      	add	sp, #8
 805b4b2:	4770      	bx	lr
 805b4b4:	4610      	mov	r0, r2
 805b4b6:	e7fb      	b.n	805b4b0 <__ascii_mbtowc+0x16>
 805b4b8:	f06f 0001 	mvn.w	r0, #1
 805b4bc:	e7f8      	b.n	805b4b0 <__ascii_mbtowc+0x16>

0805b4be <_malloc_usable_size_r>:
 805b4be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 805b4c2:	1f18      	subs	r0, r3, #4
 805b4c4:	2b00      	cmp	r3, #0
 805b4c6:	bfbc      	itt	lt
 805b4c8:	580b      	ldrlt	r3, [r1, r0]
 805b4ca:	18c0      	addlt	r0, r0, r3
 805b4cc:	4770      	bx	lr

0805b4ce <__sfputc_r>:
 805b4ce:	6893      	ldr	r3, [r2, #8]
 805b4d0:	3b01      	subs	r3, #1
 805b4d2:	2b00      	cmp	r3, #0
 805b4d4:	b410      	push	{r4}
 805b4d6:	6093      	str	r3, [r2, #8]
 805b4d8:	da08      	bge.n	805b4ec <__sfputc_r+0x1e>
 805b4da:	6994      	ldr	r4, [r2, #24]
 805b4dc:	42a3      	cmp	r3, r4
 805b4de:	db01      	blt.n	805b4e4 <__sfputc_r+0x16>
 805b4e0:	290a      	cmp	r1, #10
 805b4e2:	d103      	bne.n	805b4ec <__sfputc_r+0x1e>
 805b4e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 805b4e8:	f7f8 bb0a 	b.w	8053b00 <__swbuf_r>
 805b4ec:	6813      	ldr	r3, [r2, #0]
 805b4ee:	1c58      	adds	r0, r3, #1
 805b4f0:	6010      	str	r0, [r2, #0]
 805b4f2:	7019      	strb	r1, [r3, #0]
 805b4f4:	4608      	mov	r0, r1
 805b4f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 805b4fa:	4770      	bx	lr

0805b4fc <__sfputs_r>:
 805b4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 805b4fe:	4606      	mov	r6, r0
 805b500:	460f      	mov	r7, r1
 805b502:	4614      	mov	r4, r2
 805b504:	18d5      	adds	r5, r2, r3
 805b506:	42ac      	cmp	r4, r5
 805b508:	d101      	bne.n	805b50e <__sfputs_r+0x12>
 805b50a:	2000      	movs	r0, #0
 805b50c:	e007      	b.n	805b51e <__sfputs_r+0x22>
 805b50e:	f814 1b01 	ldrb.w	r1, [r4], #1
 805b512:	463a      	mov	r2, r7
 805b514:	4630      	mov	r0, r6
 805b516:	f7ff ffda 	bl	805b4ce <__sfputc_r>
 805b51a:	1c43      	adds	r3, r0, #1
 805b51c:	d1f3      	bne.n	805b506 <__sfputs_r+0xa>
 805b51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0805b520 <__ascii_wctomb>:
 805b520:	b149      	cbz	r1, 805b536 <__ascii_wctomb+0x16>
 805b522:	2aff      	cmp	r2, #255	; 0xff
 805b524:	bf85      	ittet	hi
 805b526:	238a      	movhi	r3, #138	; 0x8a
 805b528:	6003      	strhi	r3, [r0, #0]
 805b52a:	700a      	strbls	r2, [r1, #0]
 805b52c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 805b530:	bf98      	it	ls
 805b532:	2001      	movls	r0, #1
 805b534:	4770      	bx	lr
 805b536:	4608      	mov	r0, r1
 805b538:	4770      	bx	lr

0805b53a <__sfmoreglue>:
 805b53a:	b570      	push	{r4, r5, r6, lr}
 805b53c:	2268      	movs	r2, #104	; 0x68
 805b53e:	1e4d      	subs	r5, r1, #1
 805b540:	4355      	muls	r5, r2
 805b542:	460e      	mov	r6, r1
 805b544:	f105 0174 	add.w	r1, r5, #116	; 0x74
 805b548:	f7f7 fa64 	bl	8052a14 <_malloc_r>
 805b54c:	4604      	mov	r4, r0
 805b54e:	b140      	cbz	r0, 805b562 <__sfmoreglue+0x28>
 805b550:	2100      	movs	r1, #0
 805b552:	e9c0 1600 	strd	r1, r6, [r0]
 805b556:	300c      	adds	r0, #12
 805b558:	60a0      	str	r0, [r4, #8]
 805b55a:	f105 0268 	add.w	r2, r5, #104	; 0x68
 805b55e:	f7ff fc75 	bl	805ae4c <memset>
 805b562:	4620      	mov	r0, r4
 805b564:	bd70      	pop	{r4, r5, r6, pc}

0805b566 <_fwalk_reent>:
 805b566:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 805b56a:	4606      	mov	r6, r0
 805b56c:	4688      	mov	r8, r1
 805b56e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 805b572:	2700      	movs	r7, #0
 805b574:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 805b578:	f1b9 0901 	subs.w	r9, r9, #1
 805b57c:	d505      	bpl.n	805b58a <_fwalk_reent+0x24>
 805b57e:	6824      	ldr	r4, [r4, #0]
 805b580:	2c00      	cmp	r4, #0
 805b582:	d1f7      	bne.n	805b574 <_fwalk_reent+0xe>
 805b584:	4638      	mov	r0, r7
 805b586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 805b58a:	89ab      	ldrh	r3, [r5, #12]
 805b58c:	2b01      	cmp	r3, #1
 805b58e:	d907      	bls.n	805b5a0 <_fwalk_reent+0x3a>
 805b590:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 805b594:	3301      	adds	r3, #1
 805b596:	d003      	beq.n	805b5a0 <_fwalk_reent+0x3a>
 805b598:	4629      	mov	r1, r5
 805b59a:	4630      	mov	r0, r6
 805b59c:	47c0      	blx	r8
 805b59e:	4307      	orrs	r7, r0
 805b5a0:	3568      	adds	r5, #104	; 0x68
 805b5a2:	e7e9      	b.n	805b578 <_fwalk_reent+0x12>

0805b5a4 <__swhatbuf_r>:
 805b5a4:	b570      	push	{r4, r5, r6, lr}
 805b5a6:	460e      	mov	r6, r1
 805b5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 805b5ac:	2900      	cmp	r1, #0
 805b5ae:	b096      	sub	sp, #88	; 0x58
 805b5b0:	4614      	mov	r4, r2
 805b5b2:	461d      	mov	r5, r3
 805b5b4:	da08      	bge.n	805b5c8 <__swhatbuf_r+0x24>
 805b5b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 805b5ba:	2200      	movs	r2, #0
 805b5bc:	602a      	str	r2, [r5, #0]
 805b5be:	061a      	lsls	r2, r3, #24
 805b5c0:	d410      	bmi.n	805b5e4 <__swhatbuf_r+0x40>
 805b5c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 805b5c6:	e00e      	b.n	805b5e6 <__swhatbuf_r+0x42>
 805b5c8:	466a      	mov	r2, sp
 805b5ca:	f7f8 fd3d 	bl	8054048 <_fstat_r>
 805b5ce:	2800      	cmp	r0, #0
 805b5d0:	dbf1      	blt.n	805b5b6 <__swhatbuf_r+0x12>
 805b5d2:	9a01      	ldr	r2, [sp, #4]
 805b5d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 805b5d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 805b5dc:	425a      	negs	r2, r3
 805b5de:	415a      	adcs	r2, r3
 805b5e0:	602a      	str	r2, [r5, #0]
 805b5e2:	e7ee      	b.n	805b5c2 <__swhatbuf_r+0x1e>
 805b5e4:	2340      	movs	r3, #64	; 0x40
 805b5e6:	2000      	movs	r0, #0
 805b5e8:	6023      	str	r3, [r4, #0]
 805b5ea:	b016      	add	sp, #88	; 0x58
 805b5ec:	bd70      	pop	{r4, r5, r6, pc}

0805b5ee <__sread>:
 805b5ee:	b510      	push	{r4, lr}
 805b5f0:	460c      	mov	r4, r1
 805b5f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 805b5f6:	f7f8 fd5b 	bl	80540b0 <_read_r>
 805b5fa:	2800      	cmp	r0, #0
 805b5fc:	bfab      	itete	ge
 805b5fe:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 805b600:	89a3      	ldrhlt	r3, [r4, #12]
 805b602:	181b      	addge	r3, r3, r0
 805b604:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 805b608:	bfac      	ite	ge
 805b60a:	6563      	strge	r3, [r4, #84]	; 0x54
 805b60c:	81a3      	strhlt	r3, [r4, #12]
 805b60e:	bd10      	pop	{r4, pc}

0805b610 <__swrite>:
 805b610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 805b614:	461f      	mov	r7, r3
 805b616:	898b      	ldrh	r3, [r1, #12]
 805b618:	05db      	lsls	r3, r3, #23
 805b61a:	4605      	mov	r5, r0
 805b61c:	460c      	mov	r4, r1
 805b61e:	4616      	mov	r6, r2
 805b620:	d505      	bpl.n	805b62e <__swrite+0x1e>
 805b622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 805b626:	2302      	movs	r3, #2
 805b628:	2200      	movs	r2, #0
 805b62a:	f7f8 fd2f 	bl	805408c <_lseek_r>
 805b62e:	89a3      	ldrh	r3, [r4, #12]
 805b630:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 805b634:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 805b638:	81a3      	strh	r3, [r4, #12]
 805b63a:	4632      	mov	r2, r6
 805b63c:	463b      	mov	r3, r7
 805b63e:	4628      	mov	r0, r5
 805b640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 805b644:	f7f8 bcde 	b.w	8054004 <_write_r>

0805b648 <__sseek>:
 805b648:	b510      	push	{r4, lr}
 805b64a:	460c      	mov	r4, r1
 805b64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 805b650:	f7f8 fd1c 	bl	805408c <_lseek_r>
 805b654:	1c43      	adds	r3, r0, #1
 805b656:	89a3      	ldrh	r3, [r4, #12]
 805b658:	bf15      	itete	ne
 805b65a:	6560      	strne	r0, [r4, #84]	; 0x54
 805b65c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 805b660:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 805b664:	81a3      	strheq	r3, [r4, #12]
 805b666:	bf18      	it	ne
 805b668:	81a3      	strhne	r3, [r4, #12]
 805b66a:	bd10      	pop	{r4, pc}

0805b66c <__sclose>:
 805b66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 805b670:	f7f8 bcda 	b.w	8054028 <_close_r>
