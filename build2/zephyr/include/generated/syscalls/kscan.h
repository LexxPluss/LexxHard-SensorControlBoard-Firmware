
/* auto-generated by gen_syscalls.py, don't edit */
#ifndef Z_INCLUDE_SYSCALLS_KSCAN_H
#define Z_INCLUDE_SYSCALLS_KSCAN_H


#ifndef _ASMLANGUAGE

#include <syscall_list.h>
#include <syscall.h>

#include <linker/sections.h>

#ifdef __cplusplus
extern "C" {
#endif

extern int z_impl_kscan_config(const struct device * dev, kscan_callback_t callback);

__pinned_func
static inline int kscan_config(const struct device * dev, kscan_callback_t callback)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; kscan_callback_t val; } parm1 = { .val = callback };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_KSCAN_CONFIG);
	}
#endif
	compiler_barrier();
	return z_impl_kscan_config(dev, callback);
}


extern int z_impl_kscan_enable_callback(const struct device * dev);

__pinned_func
static inline int kscan_enable_callback(const struct device * dev)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_KSCAN_ENABLE_CALLBACK);
	}
#endif
	compiler_barrier();
	return z_impl_kscan_enable_callback(dev);
}


extern int z_impl_kscan_disable_callback(const struct device * dev);

__pinned_func
static inline int kscan_disable_callback(const struct device * dev)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_KSCAN_DISABLE_CALLBACK);
	}
#endif
	compiler_barrier();
	return z_impl_kscan_disable_callback(dev);
}


#ifdef __cplusplus
}
#endif

#endif
#endif /* include guard */
